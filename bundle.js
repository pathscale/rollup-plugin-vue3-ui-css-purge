import { createRequire } from "module";
import path, { win32 } from "path";
import { inspect } from "util";

//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod$1) => function() {
	return mod$1 || (0, cb[__getOwnPropNames(cb)[0]])((mod$1 = { exports: {} }).exports, mod$1), mod$1.exports;
};
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys$1 = __getOwnPropNames(from), i$6 = 0, n$4 = keys$1.length, key; i$6 < n$4; i$6++) {
		key = keys$1[i$6];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k$1) => from[k$1]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod$1, isNodeMode, target) => (target = mod$1 != null ? __create(__getProtoOf(mod$1)) : {}, __copyProps(isNodeMode || !mod$1 || !mod$1.__esModule ? __defProp(target, "default", {
	value: mod$1,
	enumerable: true
}) : target, mod$1));
var __require = /* @__PURE__ */ createRequire(import.meta.url);

//#endregion
//#region node_modules/strict-uri-encode/index.js
var require_strict_uri_encode = __commonJS({ "node_modules/strict-uri-encode/index.js"(exports, module) {
	module.exports = (str$4) => encodeURIComponent(str$4).replace(/[!'()*]/g, (x$1) => `%${x$1.charCodeAt(0).toString(16).toUpperCase()}`);
} });

//#endregion
//#region node_modules/decode-uri-component/index.js
var require_decode_uri_component = __commonJS({ "node_modules/decode-uri-component/index.js"(exports, module) {
	var token = "%[a-f0-9]{2}";
	var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
	var multiMatcher = new RegExp("(" + token + ")+", "gi");
	function decodeComponents(components, split) {
		try {
			return [decodeURIComponent(components.join(""))];
		} catch (err) {}
		if (components.length === 1) return components;
		split = split || 1;
		var left = components.slice(0, split);
		var right = components.slice(split);
		return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
	}
	function decode$2(input) {
		try {
			return decodeURIComponent(input);
		} catch (err) {
			var tokens$3 = input.match(singleMatcher) || [];
			for (var i$6 = 1; i$6 < tokens$3.length; i$6++) {
				input = decodeComponents(tokens$3, i$6).join("");
				tokens$3 = input.match(singleMatcher) || [];
			}
			return input;
		}
	}
	function customDecodeURIComponent(input) {
		var replaceMap = {
			"%FE%FF": "��",
			"%FF%FE": "��"
		};
		var match = multiMatcher.exec(input);
		while (match) {
			try {
				replaceMap[match[0]] = decodeURIComponent(match[0]);
			} catch (err) {
				var result = decode$2(match[0]);
				if (result !== match[0]) replaceMap[match[0]] = result;
			}
			match = multiMatcher.exec(input);
		}
		replaceMap["%C2"] = "�";
		var entries = Object.keys(replaceMap);
		for (var i$6 = 0; i$6 < entries.length; i$6++) {
			var key = entries[i$6];
			input = input.replace(new RegExp(key, "g"), replaceMap[key]);
		}
		return input;
	}
	module.exports = function(encodedURI) {
		if (typeof encodedURI !== "string") throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
		try {
			encodedURI = encodedURI.replace(/\+/g, " ");
			return decodeURIComponent(encodedURI);
		} catch (err) {
			return customDecodeURIComponent(encodedURI);
		}
	};
} });

//#endregion
//#region node_modules/split-on-first/index.js
var require_split_on_first = __commonJS({ "node_modules/split-on-first/index.js"(exports, module) {
	module.exports = (string$3, separator) => {
		if (!(typeof string$3 === "string" && typeof separator === "string")) throw new TypeError("Expected the arguments to be of type `string`");
		if (separator === "") return [string$3];
		const separatorIndex = string$3.indexOf(separator);
		if (separatorIndex === -1) return [string$3];
		return [string$3.slice(0, separatorIndex), string$3.slice(separatorIndex + separator.length)];
	};
} });

//#endregion
//#region node_modules/filter-obj/index.js
var require_filter_obj = __commonJS({ "node_modules/filter-obj/index.js"(exports, module) {
	module.exports = function(obj, predicate) {
		var ret$1 = {};
		var keys$1 = Object.keys(obj);
		var isArr = Array.isArray(predicate);
		for (var i$6 = 0; i$6 < keys$1.length; i$6++) {
			var key = keys$1[i$6];
			var val = obj[key];
			if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) ret$1[key] = val;
		}
		return ret$1;
	};
} });

//#endregion
//#region node_modules/query-string/index.js
var require_query_string = __commonJS({ "node_modules/query-string/index.js"(exports) {
	const strictUriEncode = require_strict_uri_encode();
	const decodeComponent = require_decode_uri_component();
	const splitOnFirst = require_split_on_first();
	const filterObject = require_filter_obj();
	const isNullOrUndefined = (value) => value === null || value === void 0;
	function encoderForArrayFormat(options) {
		switch (options.arrayFormat) {
			case "index": return (key) => (result, value) => {
				const index$1 = result.length;
				if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") return result;
				if (value === null) return [...result, [
					encode$1(key, options),
					"[",
					index$1,
					"]"
				].join("")];
				return [...result, [
					encode$1(key, options),
					"[",
					encode$1(index$1, options),
					"]=",
					encode$1(value, options)
				].join("")];
			};
			case "bracket": return (key) => (result, value) => {
				if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") return result;
				if (value === null) return [...result, [encode$1(key, options), "[]"].join("")];
				return [...result, [
					encode$1(key, options),
					"[]=",
					encode$1(value, options)
				].join("")];
			};
			case "comma":
			case "separator": return (key) => (result, value) => {
				if (value === null || value === void 0 || value.length === 0) return result;
				if (result.length === 0) return [[
					encode$1(key, options),
					"=",
					encode$1(value, options)
				].join("")];
				return [[result, encode$1(value, options)].join(options.arrayFormatSeparator)];
			};
			default: return (key) => (result, value) => {
				if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") return result;
				if (value === null) return [...result, encode$1(key, options)];
				return [...result, [
					encode$1(key, options),
					"=",
					encode$1(value, options)
				].join("")];
			};
		}
	}
	function parserForArrayFormat(options) {
		let result;
		switch (options.arrayFormat) {
			case "index": return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);
				key = key.replace(/\[\d*\]$/, "");
				if (!result) {
					accumulator[key] = value;
					return;
				}
				if (accumulator[key] === void 0) accumulator[key] = {};
				accumulator[key][result[1]] = value;
			};
			case "bracket": return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, "");
				if (!result) {
					accumulator[key] = value;
					return;
				}
				if (accumulator[key] === void 0) {
					accumulator[key] = [value];
					return;
				}
				accumulator[key] = [].concat(accumulator[key], value);
			};
			case "comma":
			case "separator": return (key, value, accumulator) => {
				const isArray$5 = typeof value === "string" && value.includes(options.arrayFormatSeparator);
				const isEncodedArray = typeof value === "string" && !isArray$5 && decode$1(value, options).includes(options.arrayFormatSeparator);
				value = isEncodedArray ? decode$1(value, options) : value;
				const newValue = isArray$5 || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item) => decode$1(item, options)) : value === null ? value : decode$1(value, options);
				accumulator[key] = newValue;
			};
			default: return (key, value, accumulator) => {
				if (accumulator[key] === void 0) {
					accumulator[key] = value;
					return;
				}
				accumulator[key] = [].concat(accumulator[key], value);
			};
		}
	}
	function validateArrayFormatSeparator(value) {
		if (typeof value !== "string" || value.length !== 1) throw new TypeError("arrayFormatSeparator must be single character string");
	}
	function encode$1(value, options) {
		if (options.encode) return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
		return value;
	}
	function decode$1(value, options) {
		if (options.decode) return decodeComponent(value);
		return value;
	}
	function keysSorter(input) {
		if (Array.isArray(input)) return input.sort();
		if (typeof input === "object") return keysSorter(Object.keys(input)).sort((a$1, b$1) => Number(a$1) - Number(b$1)).map((key) => input[key]);
		return input;
	}
	function removeHash(input) {
		const hashStart = input.indexOf("#");
		if (hashStart !== -1) input = input.slice(0, hashStart);
		return input;
	}
	function getHash(url$1) {
		let hash$2 = "";
		const hashStart = url$1.indexOf("#");
		if (hashStart !== -1) hash$2 = url$1.slice(hashStart);
		return hash$2;
	}
	function extract(input) {
		input = removeHash(input);
		const queryStart = input.indexOf("?");
		if (queryStart === -1) return "";
		return input.slice(queryStart + 1);
	}
	function parseValue(value, options) {
		if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === "string" && value.trim() !== "") value = Number(value);
		else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) value = value.toLowerCase() === "true";
		return value;
	}
	function parse$16(query, options) {
		options = Object.assign({
			decode: true,
			sort: true,
			arrayFormat: "none",
			arrayFormatSeparator: ",",
			parseNumbers: false,
			parseBooleans: false
		}, options);
		validateArrayFormatSeparator(options.arrayFormatSeparator);
		const formatter$1 = parserForArrayFormat(options);
		const ret$1 = Object.create(null);
		if (typeof query !== "string") return ret$1;
		query = query.trim().replace(/^[?#&]/, "");
		if (!query) return ret$1;
		for (const param of query.split("&")) {
			if (param === "") continue;
			let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
			value = value === void 0 ? null : ["comma", "separator"].includes(options.arrayFormat) ? value : decode$1(value, options);
			formatter$1(decode$1(key, options), value, ret$1);
		}
		for (const key of Object.keys(ret$1)) {
			const value = ret$1[key];
			if (typeof value === "object" && value !== null) for (const k$1 of Object.keys(value)) value[k$1] = parseValue(value[k$1], options);
			else ret$1[key] = parseValue(value, options);
		}
		if (options.sort === false) return ret$1;
		return (options.sort === true ? Object.keys(ret$1).sort() : Object.keys(ret$1).sort(options.sort)).reduce((result, key) => {
			const value = ret$1[key];
			if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) result[key] = keysSorter(value);
			else result[key] = value;
			return result;
		}, Object.create(null));
	}
	exports.extract = extract;
	exports.parse = parse$16;
	exports.stringify = (object$2, options) => {
		if (!object$2) return "";
		options = Object.assign({
			encode: true,
			strict: true,
			arrayFormat: "none",
			arrayFormatSeparator: ","
		}, options);
		validateArrayFormatSeparator(options.arrayFormatSeparator);
		const shouldFilter = (key) => options.skipNull && isNullOrUndefined(object$2[key]) || options.skipEmptyString && object$2[key] === "";
		const formatter$1 = encoderForArrayFormat(options);
		const objectCopy = {};
		for (const key of Object.keys(object$2)) if (!shouldFilter(key)) objectCopy[key] = object$2[key];
		const keys$1 = Object.keys(objectCopy);
		if (options.sort !== false) keys$1.sort(options.sort);
		return keys$1.map((key) => {
			const value = object$2[key];
			if (value === void 0) return "";
			if (value === null) return encode$1(key, options);
			if (Array.isArray(value)) return value.reduce(formatter$1(key), []).join("&");
			return encode$1(key, options) + "=" + encode$1(value, options);
		}).filter((x$1) => x$1.length > 0).join("&");
	};
	exports.parseUrl = (url$1, options) => {
		options = Object.assign({ decode: true }, options);
		const [url_, hash$2] = splitOnFirst(url$1, "#");
		return Object.assign({
			url: url_.split("?")[0] || "",
			query: parse$16(extract(url$1), options)
		}, options && options.parseFragmentIdentifier && hash$2 ? { fragmentIdentifier: decode$1(hash$2, options) } : {});
	};
	exports.stringifyUrl = (object$2, options) => {
		options = Object.assign({
			encode: true,
			strict: true
		}, options);
		const url$1 = removeHash(object$2.url).split("?")[0] || "";
		const queryFromUrl = exports.extract(object$2.url);
		const parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false });
		const query = Object.assign(parsedQueryFromUrl, object$2.query);
		let queryString = exports.stringify(query, options);
		if (queryString) queryString = `?${queryString}`;
		let hash$2 = getHash(object$2.url);
		if (object$2.fragmentIdentifier) hash$2 = `#${encode$1(object$2.fragmentIdentifier, options)}`;
		return `${url$1}${queryString}${hash$2}`;
	};
	exports.pick = (input, filter$2, options) => {
		options = Object.assign({ parseFragmentIdentifier: true }, options);
		const { url: url$1, query, fragmentIdentifier } = exports.parseUrl(input, options);
		return exports.stringifyUrl({
			url: url$1,
			query: filterObject(query, filter$2),
			fragmentIdentifier
		}, options);
	};
	exports.exclude = (input, filter$2, options) => {
		const exclusionFilter = Array.isArray(filter$2) ? (key) => !filter$2.includes(key) : (key, value) => !filter$2(key, value);
		return exports.pick(input, exclusionFilter, options);
	};
} });

//#endregion
//#region node_modules/universalify/index.js
var require_universalify = __commonJS({ "node_modules/universalify/index.js"(exports) {
	exports.fromCallback = function(fn) {
		return Object.defineProperty(function(...args) {
			if (typeof args[args.length - 1] === "function") fn.apply(this, args);
			else return new Promise((resolve$5, reject) => {
				args.push((err, res) => err != null ? reject(err) : resolve$5(res));
				fn.apply(this, args);
			});
		}, "name", { value: fn.name });
	};
	exports.fromPromise = function(fn) {
		return Object.defineProperty(function(...args) {
			const cb = args[args.length - 1];
			if (typeof cb !== "function") return fn.apply(this, args);
			else {
				args.pop();
				fn.apply(this, args).then((r$2) => cb(null, r$2), cb);
			}
		}, "name", { value: fn.name });
	};
} });

//#endregion
//#region node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({ "node_modules/graceful-fs/polyfills.js"(exports, module) {
	var constants$2 = __require("constants");
	var origCwd = process.cwd;
	var cwd = null;
	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
	process.cwd = function() {
		if (!cwd) cwd = origCwd.call(process);
		return cwd;
	};
	try {
		process.cwd();
	} catch (er) {}
	if (typeof process.chdir === "function") {
		var chdir = process.chdir;
		process.chdir = function(d$2) {
			cwd = null;
			chdir.call(process, d$2);
		};
		if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
	}
	module.exports = patch$1;
	function patch$1(fs$25) {
		if (constants$2.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) patchLchmod(fs$25);
		if (!fs$25.lutimes) patchLutimes(fs$25);
		fs$25.chown = chownFix(fs$25.chown);
		fs$25.fchown = chownFix(fs$25.fchown);
		fs$25.lchown = chownFix(fs$25.lchown);
		fs$25.chmod = chmodFix(fs$25.chmod);
		fs$25.fchmod = chmodFix(fs$25.fchmod);
		fs$25.lchmod = chmodFix(fs$25.lchmod);
		fs$25.chownSync = chownFixSync(fs$25.chownSync);
		fs$25.fchownSync = chownFixSync(fs$25.fchownSync);
		fs$25.lchownSync = chownFixSync(fs$25.lchownSync);
		fs$25.chmodSync = chmodFixSync(fs$25.chmodSync);
		fs$25.fchmodSync = chmodFixSync(fs$25.fchmodSync);
		fs$25.lchmodSync = chmodFixSync(fs$25.lchmodSync);
		fs$25.stat = statFix(fs$25.stat);
		fs$25.fstat = statFix(fs$25.fstat);
		fs$25.lstat = statFix(fs$25.lstat);
		fs$25.statSync = statFixSync(fs$25.statSync);
		fs$25.fstatSync = statFixSync(fs$25.fstatSync);
		fs$25.lstatSync = statFixSync(fs$25.lstatSync);
		if (fs$25.chmod && !fs$25.lchmod) {
			fs$25.lchmod = function(path$28, mode, cb) {
				if (cb) process.nextTick(cb);
			};
			fs$25.lchmodSync = function() {};
		}
		if (fs$25.chown && !fs$25.lchown) {
			fs$25.lchown = function(path$28, uid$1, gid, cb) {
				if (cb) process.nextTick(cb);
			};
			fs$25.lchownSync = function() {};
		}
		if (platform === "win32") fs$25.rename = typeof fs$25.rename !== "function" ? fs$25.rename : function(fs$rename) {
			function rename$2(from, to, cb) {
				var start = Date.now();
				var backoff = 0;
				fs$rename(from, to, function CB(er) {
					if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 6e4) {
						setTimeout(function() {
							fs$25.stat(to, function(stater, st) {
								if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);
								else cb(er);
							});
						}, backoff);
						if (backoff < 100) backoff += 10;
						return;
					}
					if (cb) cb(er);
				});
			}
			if (Object.setPrototypeOf) Object.setPrototypeOf(rename$2, fs$rename);
			return rename$2;
		}(fs$25.rename);
		fs$25.read = typeof fs$25.read !== "function" ? fs$25.read : function(fs$read) {
			function read$1(fd, buffer, offset, length, position, callback_) {
				var callback;
				if (callback_ && typeof callback_ === "function") {
					var eagCounter = 0;
					callback = function(er, _, __) {
						if (er && er.code === "EAGAIN" && eagCounter < 10) {
							eagCounter++;
							return fs$read.call(fs$25, fd, buffer, offset, length, position, callback);
						}
						callback_.apply(this, arguments);
					};
				}
				return fs$read.call(fs$25, fd, buffer, offset, length, position, callback);
			}
			if (Object.setPrototypeOf) Object.setPrototypeOf(read$1, fs$read);
			return read$1;
		}(fs$25.read);
		fs$25.readSync = typeof fs$25.readSync !== "function" ? fs$25.readSync : function(fs$readSync) {
			return function(fd, buffer, offset, length, position) {
				var eagCounter = 0;
				while (true) try {
					return fs$readSync.call(fs$25, fd, buffer, offset, length, position);
				} catch (er) {
					if (er.code === "EAGAIN" && eagCounter < 10) {
						eagCounter++;
						continue;
					}
					throw er;
				}
			};
		}(fs$25.readSync);
		function patchLchmod(fs$26) {
			fs$26.lchmod = function(path$28, mode, callback) {
				fs$26.open(path$28, constants$2.O_WRONLY | constants$2.O_SYMLINK, mode, function(err, fd) {
					if (err) {
						if (callback) callback(err);
						return;
					}
					fs$26.fchmod(fd, mode, function(err$1) {
						fs$26.close(fd, function(err2) {
							if (callback) callback(err$1 || err2);
						});
					});
				});
			};
			fs$26.lchmodSync = function(path$28, mode) {
				var fd = fs$26.openSync(path$28, constants$2.O_WRONLY | constants$2.O_SYMLINK, mode);
				var threw = true;
				var ret$1;
				try {
					ret$1 = fs$26.fchmodSync(fd, mode);
					threw = false;
				} finally {
					if (threw) try {
						fs$26.closeSync(fd);
					} catch (er) {}
					else fs$26.closeSync(fd);
				}
				return ret$1;
			};
		}
		function patchLutimes(fs$26) {
			if (constants$2.hasOwnProperty("O_SYMLINK") && fs$26.futimes) {
				fs$26.lutimes = function(path$28, at$3, mt, cb) {
					fs$26.open(path$28, constants$2.O_SYMLINK, function(er, fd) {
						if (er) {
							if (cb) cb(er);
							return;
						}
						fs$26.futimes(fd, at$3, mt, function(er$1) {
							fs$26.close(fd, function(er2) {
								if (cb) cb(er$1 || er2);
							});
						});
					});
				};
				fs$26.lutimesSync = function(path$28, at$3, mt) {
					var fd = fs$26.openSync(path$28, constants$2.O_SYMLINK);
					var ret$1;
					var threw = true;
					try {
						ret$1 = fs$26.futimesSync(fd, at$3, mt);
						threw = false;
					} finally {
						if (threw) try {
							fs$26.closeSync(fd);
						} catch (er) {}
						else fs$26.closeSync(fd);
					}
					return ret$1;
				};
			} else if (fs$26.futimes) {
				fs$26.lutimes = function(_a, _b, _c, cb) {
					if (cb) process.nextTick(cb);
				};
				fs$26.lutimesSync = function() {};
			}
		}
		function chmodFix(orig) {
			if (!orig) return orig;
			return function(target, mode, cb) {
				return orig.call(fs$25, target, mode, function(er) {
					if (chownErOk(er)) er = null;
					if (cb) cb.apply(this, arguments);
				});
			};
		}
		function chmodFixSync(orig) {
			if (!orig) return orig;
			return function(target, mode) {
				try {
					return orig.call(fs$25, target, mode);
				} catch (er) {
					if (!chownErOk(er)) throw er;
				}
			};
		}
		function chownFix(orig) {
			if (!orig) return orig;
			return function(target, uid$1, gid, cb) {
				return orig.call(fs$25, target, uid$1, gid, function(er) {
					if (chownErOk(er)) er = null;
					if (cb) cb.apply(this, arguments);
				});
			};
		}
		function chownFixSync(orig) {
			if (!orig) return orig;
			return function(target, uid$1, gid) {
				try {
					return orig.call(fs$25, target, uid$1, gid);
				} catch (er) {
					if (!chownErOk(er)) throw er;
				}
			};
		}
		function statFix(orig) {
			if (!orig) return orig;
			return function(target, options, cb) {
				if (typeof options === "function") {
					cb = options;
					options = null;
				}
				function callback(er, stats) {
					if (stats) {
						if (stats.uid < 0) stats.uid += 4294967296;
						if (stats.gid < 0) stats.gid += 4294967296;
					}
					if (cb) cb.apply(this, arguments);
				}
				return options ? orig.call(fs$25, target, options, callback) : orig.call(fs$25, target, callback);
			};
		}
		function statFixSync(orig) {
			if (!orig) return orig;
			return function(target, options) {
				var stats = options ? orig.call(fs$25, target, options) : orig.call(fs$25, target);
				if (stats) {
					if (stats.uid < 0) stats.uid += 4294967296;
					if (stats.gid < 0) stats.gid += 4294967296;
				}
				return stats;
			};
		}
		function chownErOk(er) {
			if (!er) return true;
			if (er.code === "ENOSYS") return true;
			var nonroot = !process.getuid || process.getuid() !== 0;
			if (nonroot) {
				if (er.code === "EINVAL" || er.code === "EPERM") return true;
			}
			return false;
		}
	}
} });

//#endregion
//#region node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({ "node_modules/graceful-fs/legacy-streams.js"(exports, module) {
	var Stream = __require("stream").Stream;
	module.exports = legacy$1;
	function legacy$1(fs$25) {
		return {
			ReadStream,
			WriteStream
		};
		function ReadStream(path$28, options) {
			if (!(this instanceof ReadStream)) return new ReadStream(path$28, options);
			Stream.call(this);
			var self$1 = this;
			this.path = path$28;
			this.fd = null;
			this.readable = true;
			this.paused = false;
			this.flags = "r";
			this.mode = 438;
			this.bufferSize = 64 * 1024;
			options = options || {};
			var keys$1 = Object.keys(options);
			for (var index$1 = 0, length = keys$1.length; index$1 < length; index$1++) {
				var key = keys$1[index$1];
				this[key] = options[key];
			}
			if (this.encoding) this.setEncoding(this.encoding);
			if (this.start !== void 0) {
				if ("number" !== typeof this.start) throw TypeError("start must be a Number");
				if (this.end === void 0) this.end = Infinity;
				else if ("number" !== typeof this.end) throw TypeError("end must be a Number");
				if (this.start > this.end) throw new Error("start must be <= end");
				this.pos = this.start;
			}
			if (this.fd !== null) {
				process.nextTick(function() {
					self$1._read();
				});
				return;
			}
			fs$25.open(this.path, this.flags, this.mode, function(err, fd) {
				if (err) {
					self$1.emit("error", err);
					self$1.readable = false;
					return;
				}
				self$1.fd = fd;
				self$1.emit("open", fd);
				self$1._read();
			});
		}
		function WriteStream(path$28, options) {
			if (!(this instanceof WriteStream)) return new WriteStream(path$28, options);
			Stream.call(this);
			this.path = path$28;
			this.fd = null;
			this.writable = true;
			this.flags = "w";
			this.encoding = "binary";
			this.mode = 438;
			this.bytesWritten = 0;
			options = options || {};
			var keys$1 = Object.keys(options);
			for (var index$1 = 0, length = keys$1.length; index$1 < length; index$1++) {
				var key = keys$1[index$1];
				this[key] = options[key];
			}
			if (this.start !== void 0) {
				if ("number" !== typeof this.start) throw TypeError("start must be a Number");
				if (this.start < 0) throw new Error("start must be >= zero");
				this.pos = this.start;
			}
			this.busy = false;
			this._queue = [];
			if (this.fd === null) {
				this._open = fs$25.open;
				this._queue.push([
					this._open,
					this.path,
					this.flags,
					this.mode,
					void 0
				]);
				this.flush();
			}
		}
	}
} });

//#endregion
//#region node_modules/graceful-fs/clone.js
var require_clone$1 = __commonJS({ "node_modules/graceful-fs/clone.js"(exports, module) {
	module.exports = clone$3;
	var getPrototypeOf = Object.getPrototypeOf || function(obj) {
		return obj.__proto__;
	};
	function clone$3(obj) {
		if (obj === null || typeof obj !== "object") return obj;
		if (obj instanceof Object) var copy$2 = { __proto__: getPrototypeOf(obj) };
		else var copy$2 = Object.create(null);
		Object.getOwnPropertyNames(obj).forEach(function(key) {
			Object.defineProperty(copy$2, key, Object.getOwnPropertyDescriptor(obj, key));
		});
		return copy$2;
	}
} });

//#endregion
//#region node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({ "node_modules/graceful-fs/graceful-fs.js"(exports, module) {
	var fs$24 = __require("fs");
	var polyfills = require_polyfills();
	var legacy = require_legacy_streams();
	var clone$2 = require_clone$1();
	var util$18 = __require("util");
	/* istanbul ignore next - node 0.x polyfill */
	var gracefulQueue;
	var previousSymbol;
	/* istanbul ignore else - node 0.x polyfill */
	if (typeof Symbol === "function" && typeof Symbol.for === "function") {
		gracefulQueue = Symbol.for("graceful-fs.queue");
		previousSymbol = Symbol.for("graceful-fs.previous");
	} else {
		gracefulQueue = "___graceful-fs.queue";
		previousSymbol = "___graceful-fs.previous";
	}
	function noop$2() {}
	function publishQueue(context, queue$1) {
		Object.defineProperty(context, gracefulQueue, { get: function() {
			return queue$1;
		} });
	}
	var debug$1 = noop$2;
	if (util$18.debuglog) debug$1 = util$18.debuglog("gfs4");
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) debug$1 = function() {
		var m$2 = util$18.format.apply(util$18, arguments);
		m$2 = "GFS4: " + m$2.split(/\n/).join("\nGFS4: ");
		console.error(m$2);
	};
	if (!fs$24[gracefulQueue]) {
		var queue = global[gracefulQueue] || [];
		publishQueue(fs$24, queue);
		fs$24.close = function(fs$close) {
			function close(fd, cb) {
				return fs$close.call(fs$24, fd, function(err) {
					if (!err) resetQueue();
					if (typeof cb === "function") cb.apply(this, arguments);
				});
			}
			Object.defineProperty(close, previousSymbol, { value: fs$close });
			return close;
		}(fs$24.close);
		fs$24.closeSync = function(fs$closeSync) {
			function closeSync(fd) {
				fs$closeSync.apply(fs$24, arguments);
				resetQueue();
			}
			Object.defineProperty(closeSync, previousSymbol, { value: fs$closeSync });
			return closeSync;
		}(fs$24.closeSync);
		if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) process.on("exit", function() {
			debug$1(fs$24[gracefulQueue]);
			__require("assert").equal(fs$24[gracefulQueue].length, 0);
		});
	}
	if (!global[gracefulQueue]) publishQueue(global, fs$24[gracefulQueue]);
	module.exports = patch(clone$2(fs$24));
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$24.__patched) {
		module.exports = patch(fs$24);
		fs$24.__patched = true;
	}
	function patch(fs$25) {
		polyfills(fs$25);
		fs$25.gracefulify = patch;
		fs$25.createReadStream = createReadStream;
		fs$25.createWriteStream = createWriteStream;
		var fs$readFile = fs$25.readFile;
		fs$25.readFile = readFile$1;
		function readFile$1(path$28, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$readFile(path$28, options, cb);
			function go$readFile(path$29, options$1, cb$1, startTime) {
				return fs$readFile(path$29, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$readFile,
						[
							path$29,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$writeFile = fs$25.writeFile;
		fs$25.writeFile = writeFile$1;
		function writeFile$1(path$28, data$2, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$writeFile(path$28, data$2, options, cb);
			function go$writeFile(path$29, data$3, options$1, cb$1, startTime) {
				return fs$writeFile(path$29, data$3, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$writeFile,
						[
							path$29,
							data$3,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$appendFile = fs$25.appendFile;
		if (fs$appendFile) fs$25.appendFile = appendFile;
		function appendFile(path$28, data$2, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			return go$appendFile(path$28, data$2, options, cb);
			function go$appendFile(path$29, data$3, options$1, cb$1, startTime) {
				return fs$appendFile(path$29, data$3, options$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$appendFile,
						[
							path$29,
							data$3,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$copyFile = fs$25.copyFile;
		if (fs$copyFile) fs$25.copyFile = copyFile$2;
		function copyFile$2(src, dest, flags, cb) {
			if (typeof flags === "function") {
				cb = flags;
				flags = 0;
			}
			return go$copyFile(src, dest, flags, cb);
			function go$copyFile(src$1, dest$1, flags$1, cb$1, startTime) {
				return fs$copyFile(src$1, dest$1, flags$1, function(err) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$copyFile,
						[
							src$1,
							dest$1,
							flags$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		var fs$readdir = fs$25.readdir;
		fs$25.readdir = readdir;
		var noReaddirOptionVersions = /^v[0-5]\./;
		function readdir(path$28, options, cb) {
			if (typeof options === "function") cb = options, options = null;
			var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir$1(path$29, options$1, cb$1, startTime) {
				return fs$readdir(path$29, fs$readdirCallback(path$29, options$1, cb$1, startTime));
			} : function go$readdir$1(path$29, options$1, cb$1, startTime) {
				return fs$readdir(path$29, options$1, fs$readdirCallback(path$29, options$1, cb$1, startTime));
			};
			return go$readdir(path$28, options, cb);
			function fs$readdirCallback(path$29, options$1, cb$1, startTime) {
				return function(err, files) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$readdir,
						[
							path$29,
							options$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else {
						if (files && files.sort) files.sort();
						if (typeof cb$1 === "function") cb$1.call(this, err, files);
					}
				};
			}
		}
		if (process.version.substr(0, 4) === "v0.8") {
			var legStreams = legacy(fs$25);
			ReadStream = legStreams.ReadStream;
			WriteStream = legStreams.WriteStream;
		}
		var fs$ReadStream = fs$25.ReadStream;
		if (fs$ReadStream) {
			ReadStream.prototype = Object.create(fs$ReadStream.prototype);
			ReadStream.prototype.open = ReadStream$open;
		}
		var fs$WriteStream = fs$25.WriteStream;
		if (fs$WriteStream) {
			WriteStream.prototype = Object.create(fs$WriteStream.prototype);
			WriteStream.prototype.open = WriteStream$open;
		}
		Object.defineProperty(fs$25, "ReadStream", {
			get: function() {
				return ReadStream;
			},
			set: function(val) {
				ReadStream = val;
			},
			enumerable: true,
			configurable: true
		});
		Object.defineProperty(fs$25, "WriteStream", {
			get: function() {
				return WriteStream;
			},
			set: function(val) {
				WriteStream = val;
			},
			enumerable: true,
			configurable: true
		});
		var FileReadStream = ReadStream;
		Object.defineProperty(fs$25, "FileReadStream", {
			get: function() {
				return FileReadStream;
			},
			set: function(val) {
				FileReadStream = val;
			},
			enumerable: true,
			configurable: true
		});
		var FileWriteStream = WriteStream;
		Object.defineProperty(fs$25, "FileWriteStream", {
			get: function() {
				return FileWriteStream;
			},
			set: function(val) {
				FileWriteStream = val;
			},
			enumerable: true,
			configurable: true
		});
		function ReadStream(path$28, options) {
			if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;
			else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
		}
		function ReadStream$open() {
			var that = this;
			open(that.path, that.flags, that.mode, function(err, fd) {
				if (err) {
					if (that.autoClose) that.destroy();
					that.emit("error", err);
				} else {
					that.fd = fd;
					that.emit("open", fd);
					that.read();
				}
			});
		}
		function WriteStream(path$28, options) {
			if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;
			else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
		}
		function WriteStream$open() {
			var that = this;
			open(that.path, that.flags, that.mode, function(err, fd) {
				if (err) {
					that.destroy();
					that.emit("error", err);
				} else {
					that.fd = fd;
					that.emit("open", fd);
				}
			});
		}
		function createReadStream(path$28, options) {
			return new fs$25.ReadStream(path$28, options);
		}
		function createWriteStream(path$28, options) {
			return new fs$25.WriteStream(path$28, options);
		}
		var fs$open = fs$25.open;
		fs$25.open = open;
		function open(path$28, flags, mode, cb) {
			if (typeof mode === "function") cb = mode, mode = null;
			return go$open(path$28, flags, mode, cb);
			function go$open(path$29, flags$1, mode$1, cb$1, startTime) {
				return fs$open(path$29, flags$1, mode$1, function(err, fd) {
					if (err && (err.code === "EMFILE" || err.code === "ENFILE")) enqueue([
						go$open,
						[
							path$29,
							flags$1,
							mode$1,
							cb$1
						],
						err,
						startTime || Date.now(),
						Date.now()
					]);
					else if (typeof cb$1 === "function") cb$1.apply(this, arguments);
				});
			}
		}
		return fs$25;
	}
	function enqueue(elem) {
		debug$1("ENQUEUE", elem[0].name, elem[1]);
		fs$24[gracefulQueue].push(elem);
		retry();
	}
	var retryTimer;
	function resetQueue() {
		var now = Date.now();
		for (var i$6 = 0; i$6 < fs$24[gracefulQueue].length; ++i$6) if (fs$24[gracefulQueue][i$6].length > 2) {
			fs$24[gracefulQueue][i$6][3] = now;
			fs$24[gracefulQueue][i$6][4] = now;
		}
		retry();
	}
	function retry() {
		clearTimeout(retryTimer);
		retryTimer = void 0;
		if (fs$24[gracefulQueue].length === 0) return;
		var elem = fs$24[gracefulQueue].shift();
		var fn = elem[0];
		var args = elem[1];
		var err = elem[2];
		var startTime = elem[3];
		var lastTime = elem[4];
		if (startTime === void 0) {
			debug$1("RETRY", fn.name, args);
			fn.apply(null, args);
		} else if (Date.now() - startTime >= 6e4) {
			debug$1("TIMEOUT", fn.name, args);
			var cb = args.pop();
			if (typeof cb === "function") cb.call(null, err);
		} else {
			var sinceAttempt = Date.now() - lastTime;
			var sinceStart = Math.max(lastTime - startTime, 1);
			var desiredDelay = Math.min(sinceStart * 1.2, 100);
			if (sinceAttempt >= desiredDelay) {
				debug$1("RETRY", fn.name, args);
				fn.apply(null, args.concat([startTime]));
			} else fs$24[gracefulQueue].push(elem);
		}
		if (retryTimer === void 0) retryTimer = setTimeout(retry, 0);
	}
} });

//#endregion
//#region node_modules/fs-extra/lib/fs/index.js
var require_fs$1 = __commonJS({ "node_modules/fs-extra/lib/fs/index.js"(exports) {
	const u$13 = require_universalify().fromCallback;
	const fs$23 = require_graceful_fs();
	const api = [
		"access",
		"appendFile",
		"chmod",
		"chown",
		"close",
		"copyFile",
		"fchmod",
		"fchown",
		"fdatasync",
		"fstat",
		"fsync",
		"ftruncate",
		"futimes",
		"lchmod",
		"lchown",
		"link",
		"lstat",
		"mkdir",
		"mkdtemp",
		"open",
		"opendir",
		"readdir",
		"readFile",
		"readlink",
		"realpath",
		"rename",
		"rm",
		"rmdir",
		"stat",
		"symlink",
		"truncate",
		"unlink",
		"utimes",
		"writeFile"
	].filter((key) => {
		return typeof fs$23[key] === "function";
	});
	Object.keys(fs$23).forEach((key) => {
		if (key === "promises") return;
		exports[key] = fs$23[key];
	});
	api.forEach((method) => {
		exports[method] = u$13(fs$23[method]);
	});
	exports.exists = function(filename, callback) {
		if (typeof callback === "function") return fs$23.exists(filename, callback);
		return new Promise((resolve$5) => {
			return fs$23.exists(filename, resolve$5);
		});
	};
	exports.read = function(fd, buffer, offset, length, position, callback) {
		if (typeof callback === "function") return fs$23.read(fd, buffer, offset, length, position, callback);
		return new Promise((resolve$5, reject) => {
			fs$23.read(fd, buffer, offset, length, position, (err, bytesRead, buffer$1) => {
				if (err) return reject(err);
				resolve$5({
					bytesRead,
					buffer: buffer$1
				});
			});
		});
	};
	exports.write = function(fd, buffer, ...args) {
		if (typeof args[args.length - 1] === "function") return fs$23.write(fd, buffer, ...args);
		return new Promise((resolve$5, reject) => {
			fs$23.write(fd, buffer, ...args, (err, bytesWritten, buffer$1) => {
				if (err) return reject(err);
				resolve$5({
					bytesWritten,
					buffer: buffer$1
				});
			});
		});
	};
	if (typeof fs$23.writev === "function") exports.writev = function(fd, buffers, ...args) {
		if (typeof args[args.length - 1] === "function") return fs$23.writev(fd, buffers, ...args);
		return new Promise((resolve$5, reject) => {
			fs$23.writev(fd, buffers, ...args, (err, bytesWritten, buffers$1) => {
				if (err) return reject(err);
				resolve$5({
					bytesWritten,
					buffers: buffers$1
				});
			});
		});
	};
	if (typeof fs$23.realpath.native === "function") exports.realpath.native = u$13(fs$23.realpath.native);
} });

//#endregion
//#region node_modules/at-least-node/index.js
var require_at_least_node = __commonJS({ "node_modules/at-least-node/index.js"(exports, module) {
	module.exports = (r$2) => {
		const n$4 = process.versions.node.split(".").map((x$1) => parseInt(x$1, 10));
		r$2 = r$2.split(".").map((x$1) => parseInt(x$1, 10));
		return n$4[0] > r$2[0] || n$4[0] === r$2[0] && (n$4[1] > r$2[1] || n$4[1] === r$2[1] && n$4[2] >= r$2[2]);
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({ "node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports, module) {
	const fs$22 = require_fs$1();
	const path$27 = __require("path");
	const atLeastNode$1 = require_at_least_node();
	const useNativeRecursiveOption = atLeastNode$1("10.12.0");
	const checkPath = (pth) => {
		if (process.platform === "win32") {
			const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path$27.parse(pth).root, ""));
			if (pathHasInvalidWinCharacters) {
				const error = new Error(`Path contains invalid characters: ${pth}`);
				error.code = "EINVAL";
				throw error;
			}
		}
	};
	const processOptions = (options) => {
		const defaults$2 = { mode: 511 };
		if (typeof options === "number") options = { mode: options };
		return {
			...defaults$2,
			...options
		};
	};
	const permissionError = (pth) => {
		const error = new Error(`operation not permitted, mkdir '${pth}'`);
		error.code = "EPERM";
		error.errno = -4048;
		error.path = pth;
		error.syscall = "mkdir";
		return error;
	};
	module.exports.makeDir = async (input, options) => {
		checkPath(input);
		options = processOptions(options);
		if (useNativeRecursiveOption) {
			const pth = path$27.resolve(input);
			return fs$22.mkdir(pth, {
				mode: options.mode,
				recursive: true
			});
		}
		const make$1 = async (pth) => {
			try {
				await fs$22.mkdir(pth, options.mode);
			} catch (error) {
				if (error.code === "EPERM") throw error;
				if (error.code === "ENOENT") {
					if (path$27.dirname(pth) === pth) throw permissionError(pth);
					if (error.message.includes("null bytes")) throw error;
					await make$1(path$27.dirname(pth));
					return make$1(pth);
				}
				try {
					const stats = await fs$22.stat(pth);
					if (!stats.isDirectory()) throw new Error("The path is not a directory");
				} catch {
					throw error;
				}
			}
		};
		return make$1(path$27.resolve(input));
	};
	module.exports.makeDirSync = (input, options) => {
		checkPath(input);
		options = processOptions(options);
		if (useNativeRecursiveOption) {
			const pth = path$27.resolve(input);
			return fs$22.mkdirSync(pth, {
				mode: options.mode,
				recursive: true
			});
		}
		const make$1 = (pth) => {
			try {
				fs$22.mkdirSync(pth, options.mode);
			} catch (error) {
				if (error.code === "EPERM") throw error;
				if (error.code === "ENOENT") {
					if (path$27.dirname(pth) === pth) throw permissionError(pth);
					if (error.message.includes("null bytes")) throw error;
					make$1(path$27.dirname(pth));
					return make$1(pth);
				}
				try {
					if (!fs$22.statSync(pth).isDirectory()) throw new Error("The path is not a directory");
				} catch {
					throw error;
				}
			}
		};
		return make$1(path$27.resolve(input));
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({ "node_modules/fs-extra/lib/mkdirs/index.js"(exports, module) {
	const u$12 = require_universalify().fromPromise;
	const { makeDir: _makeDir, makeDirSync } = require_make_dir();
	const makeDir = u$12(_makeDir);
	module.exports = {
		mkdirs: makeDir,
		mkdirsSync: makeDirSync,
		mkdirp: makeDir,
		mkdirpSync: makeDirSync,
		ensureDir: makeDir,
		ensureDirSync: makeDirSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({ "node_modules/fs-extra/lib/util/utimes.js"(exports, module) {
	const fs$21 = require_graceful_fs();
	function utimesMillis$1(path$28, atime, mtime, callback) {
		fs$21.open(path$28, "r+", (err, fd) => {
			if (err) return callback(err);
			fs$21.futimes(fd, atime, mtime, (futimesErr) => {
				fs$21.close(fd, (closeErr) => {
					if (callback) callback(futimesErr || closeErr);
				});
			});
		});
	}
	function utimesMillisSync$1(path$28, atime, mtime) {
		const fd = fs$21.openSync(path$28, "r+");
		fs$21.futimesSync(fd, atime, mtime);
		return fs$21.closeSync(fd);
	}
	module.exports = {
		utimesMillis: utimesMillis$1,
		utimesMillisSync: utimesMillisSync$1
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({ "node_modules/fs-extra/lib/util/stat.js"(exports, module) {
	const fs$20 = require_fs$1();
	const path$26 = __require("path");
	const util$17 = __require("util");
	const atLeastNode = require_at_least_node();
	const nodeSupportsBigInt = atLeastNode("10.5.0");
	const stat$4 = (file$2) => nodeSupportsBigInt ? fs$20.stat(file$2, { bigint: true }) : fs$20.stat(file$2);
	const statSync = (file$2) => nodeSupportsBigInt ? fs$20.statSync(file$2, { bigint: true }) : fs$20.statSync(file$2);
	function getStats$2(src, dest) {
		return Promise.all([stat$4(src), stat$4(dest).catch((err) => {
			if (err.code === "ENOENT") return null;
			throw err;
		})]).then(([srcStat, destStat]) => ({
			srcStat,
			destStat
		}));
	}
	function getStatsSync(src, dest) {
		let destStat;
		const srcStat = statSync(src);
		try {
			destStat = statSync(dest);
		} catch (err) {
			if (err.code === "ENOENT") return {
				srcStat,
				destStat: null
			};
			throw err;
		}
		return {
			srcStat,
			destStat
		};
	}
	function checkPaths(src, dest, funcName, cb) {
		util$17.callbackify(getStats$2)(src, dest, (err, stats) => {
			if (err) return cb(err);
			const { srcStat, destStat } = stats;
			if (destStat && areIdentical(srcStat, destStat)) return cb(new Error("Source and destination must not be the same."));
			if (srcStat.isDirectory() && isSrcSubdir(src, dest)) return cb(new Error(errMsg(src, dest, funcName)));
			return cb(null, {
				srcStat,
				destStat
			});
		});
	}
	function checkPathsSync(src, dest, funcName) {
		const { srcStat, destStat } = getStatsSync(src, dest);
		if (destStat && areIdentical(srcStat, destStat)) throw new Error("Source and destination must not be the same.");
		if (srcStat.isDirectory() && isSrcSubdir(src, dest)) throw new Error(errMsg(src, dest, funcName));
		return {
			srcStat,
			destStat
		};
	}
	function checkParentPaths(src, srcStat, dest, funcName, cb) {
		const srcParent = path$26.resolve(path$26.dirname(src));
		const destParent = path$26.resolve(path$26.dirname(dest));
		if (destParent === srcParent || destParent === path$26.parse(destParent).root) return cb();
		const callback = (err, destStat) => {
			if (err) {
				if (err.code === "ENOENT") return cb();
				return cb(err);
			}
			if (areIdentical(srcStat, destStat)) return cb(new Error(errMsg(src, dest, funcName)));
			return checkParentPaths(src, srcStat, destParent, funcName, cb);
		};
		if (nodeSupportsBigInt) fs$20.stat(destParent, { bigint: true }, callback);
		else fs$20.stat(destParent, callback);
	}
	function checkParentPathsSync(src, srcStat, dest, funcName) {
		const srcParent = path$26.resolve(path$26.dirname(src));
		const destParent = path$26.resolve(path$26.dirname(dest));
		if (destParent === srcParent || destParent === path$26.parse(destParent).root) return;
		let destStat;
		try {
			destStat = statSync(destParent);
		} catch (err) {
			if (err.code === "ENOENT") return;
			throw err;
		}
		if (areIdentical(srcStat, destStat)) throw new Error(errMsg(src, dest, funcName));
		return checkParentPathsSync(src, srcStat, destParent, funcName);
	}
	function areIdentical(srcStat, destStat) {
		if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {
			if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) return true;
			if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) return true;
		}
		return false;
	}
	function isSrcSubdir(src, dest) {
		const srcArr = path$26.resolve(src).split(path$26.sep).filter((i$6) => i$6);
		const destArr = path$26.resolve(dest).split(path$26.sep).filter((i$6) => i$6);
		return srcArr.reduce((acc, cur, i$6) => acc && destArr[i$6] === cur, true);
	}
	function errMsg(src, dest, funcName) {
		return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
	}
	module.exports = {
		checkPaths,
		checkPathsSync,
		checkParentPaths,
		checkParentPathsSync,
		isSrcSubdir
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/copy-sync/copy-sync.js
var require_copy_sync$1 = __commonJS({ "node_modules/fs-extra/lib/copy-sync/copy-sync.js"(exports, module) {
	const fs$19 = require_graceful_fs();
	const path$25 = __require("path");
	const mkdirsSync$1 = require_mkdirs().mkdirsSync;
	const utimesMillisSync = require_utimes().utimesMillisSync;
	const stat$3 = require_stat();
	function copySync$1(src, dest, opts) {
		if (typeof opts === "function") opts = { filter: opts };
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		const { srcStat, destStat } = stat$3.checkPathsSync(src, dest, "copy");
		stat$3.checkParentPathsSync(src, srcStat, dest, "copy");
		return handleFilterAndCopy(destStat, src, dest, opts);
	}
	function handleFilterAndCopy(destStat, src, dest, opts) {
		if (opts.filter && !opts.filter(src, dest)) return;
		const destParent = path$25.dirname(dest);
		if (!fs$19.existsSync(destParent)) mkdirsSync$1(destParent);
		return startCopy$1(destStat, src, dest, opts);
	}
	function startCopy$1(destStat, src, dest, opts) {
		if (opts.filter && !opts.filter(src, dest)) return;
		return getStats$1(destStat, src, dest, opts);
	}
	function getStats$1(destStat, src, dest, opts) {
		const statSync$1 = opts.dereference ? fs$19.statSync : fs$19.lstatSync;
		const srcStat = statSync$1(src);
		if (srcStat.isDirectory()) return onDir$1(srcStat, destStat, src, dest, opts);
		else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile$1(srcStat, destStat, src, dest, opts);
		else if (srcStat.isSymbolicLink()) return onLink$1(destStat, src, dest, opts);
	}
	function onFile$1(srcStat, destStat, src, dest, opts) {
		if (!destStat) return copyFile$1(srcStat, src, dest, opts);
		return mayCopyFile$1(srcStat, src, dest, opts);
	}
	function mayCopyFile$1(srcStat, src, dest, opts) {
		if (opts.overwrite) {
			fs$19.unlinkSync(dest);
			return copyFile$1(srcStat, src, dest, opts);
		} else if (opts.errorOnExist) throw new Error(`'${dest}' already exists`);
	}
	function copyFile$1(srcStat, src, dest, opts) {
		fs$19.copyFileSync(src, dest);
		if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
		return setDestMode$1(dest, srcStat.mode);
	}
	function handleTimestamps(srcMode, src, dest) {
		if (fileIsNotWritable$1(srcMode)) makeFileWritable$1(dest, srcMode);
		return setDestTimestamps$1(src, dest);
	}
	function fileIsNotWritable$1(srcMode) {
		return (srcMode & 128) === 0;
	}
	function makeFileWritable$1(dest, srcMode) {
		return setDestMode$1(dest, srcMode | 128);
	}
	function setDestMode$1(dest, srcMode) {
		return fs$19.chmodSync(dest, srcMode);
	}
	function setDestTimestamps$1(src, dest) {
		const updatedSrcStat = fs$19.statSync(src);
		return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
	}
	function onDir$1(srcStat, destStat, src, dest, opts) {
		if (!destStat) return mkDirAndCopy$1(srcStat.mode, src, dest, opts);
		if (destStat && !destStat.isDirectory()) throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
		return copyDir$1(src, dest, opts);
	}
	function mkDirAndCopy$1(srcMode, src, dest, opts) {
		fs$19.mkdirSync(dest);
		copyDir$1(src, dest, opts);
		return setDestMode$1(dest, srcMode);
	}
	function copyDir$1(src, dest, opts) {
		fs$19.readdirSync(src).forEach((item) => copyDirItem$1(item, src, dest, opts));
	}
	function copyDirItem$1(item, src, dest, opts) {
		const srcItem = path$25.join(src, item);
		const destItem = path$25.join(dest, item);
		const { destStat } = stat$3.checkPathsSync(srcItem, destItem, "copy");
		return startCopy$1(destStat, srcItem, destItem, opts);
	}
	function onLink$1(destStat, src, dest, opts) {
		let resolvedSrc = fs$19.readlinkSync(src);
		if (opts.dereference) resolvedSrc = path$25.resolve(process.cwd(), resolvedSrc);
		if (!destStat) return fs$19.symlinkSync(resolvedSrc, dest);
		else {
			let resolvedDest;
			try {
				resolvedDest = fs$19.readlinkSync(dest);
			} catch (err) {
				if (err.code === "EINVAL" || err.code === "UNKNOWN") return fs$19.symlinkSync(resolvedSrc, dest);
				throw err;
			}
			if (opts.dereference) resolvedDest = path$25.resolve(process.cwd(), resolvedDest);
			if (stat$3.isSrcSubdir(resolvedSrc, resolvedDest)) throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
			if (fs$19.statSync(dest).isDirectory() && stat$3.isSrcSubdir(resolvedDest, resolvedSrc)) throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
			return copyLink$1(resolvedSrc, dest);
		}
	}
	function copyLink$1(resolvedSrc, dest) {
		fs$19.unlinkSync(dest);
		return fs$19.symlinkSync(resolvedSrc, dest);
	}
	module.exports = copySync$1;
} });

//#endregion
//#region node_modules/fs-extra/lib/copy-sync/index.js
var require_copy_sync = __commonJS({ "node_modules/fs-extra/lib/copy-sync/index.js"(exports, module) {
	module.exports = { copySync: require_copy_sync$1() };
} });

//#endregion
//#region node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({ "node_modules/fs-extra/lib/path-exists/index.js"(exports, module) {
	const u$11 = require_universalify().fromPromise;
	const fs$18 = require_fs$1();
	function pathExists$6(path$28) {
		return fs$18.access(path$28).then(() => true).catch(() => false);
	}
	module.exports = {
		pathExists: u$11(pathExists$6),
		pathExistsSync: fs$18.existsSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/copy/copy.js
var require_copy$1 = __commonJS({ "node_modules/fs-extra/lib/copy/copy.js"(exports, module) {
	const fs$17 = require_graceful_fs();
	const path$24 = __require("path");
	const mkdirs$1 = require_mkdirs().mkdirs;
	const pathExists$5 = require_path_exists().pathExists;
	const utimesMillis = require_utimes().utimesMillis;
	const stat$2 = require_stat();
	function copy$1(src, dest, opts, cb) {
		if (typeof opts === "function" && !cb) {
			cb = opts;
			opts = {};
		} else if (typeof opts === "function") opts = { filter: opts };
		cb = cb || function() {};
		opts = opts || {};
		opts.clobber = "clobber" in opts ? !!opts.clobber : true;
		opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
		if (opts.preserveTimestamps && process.arch === "ia32") console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
		stat$2.checkPaths(src, dest, "copy", (err, stats) => {
			if (err) return cb(err);
			const { srcStat, destStat } = stats;
			stat$2.checkParentPaths(src, srcStat, dest, "copy", (err$1) => {
				if (err$1) return cb(err$1);
				if (opts.filter) return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
				return checkParentDir(destStat, src, dest, opts, cb);
			});
		});
	}
	function checkParentDir(destStat, src, dest, opts, cb) {
		const destParent = path$24.dirname(dest);
		pathExists$5(destParent, (err, dirExists) => {
			if (err) return cb(err);
			if (dirExists) return startCopy(destStat, src, dest, opts, cb);
			mkdirs$1(destParent, (err$1) => {
				if (err$1) return cb(err$1);
				return startCopy(destStat, src, dest, opts, cb);
			});
		});
	}
	function handleFilter(onInclude, destStat, src, dest, opts, cb) {
		Promise.resolve(opts.filter(src, dest)).then((include) => {
			if (include) return onInclude(destStat, src, dest, opts, cb);
			return cb();
		}, (error) => cb(error));
	}
	function startCopy(destStat, src, dest, opts, cb) {
		if (opts.filter) return handleFilter(getStats, destStat, src, dest, opts, cb);
		return getStats(destStat, src, dest, opts, cb);
	}
	function getStats(destStat, src, dest, opts, cb) {
		const stat$5 = opts.dereference ? fs$17.stat : fs$17.lstat;
		stat$5(src, (err, srcStat) => {
			if (err) return cb(err);
			if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts, cb);
			else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts, cb);
			else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts, cb);
		});
	}
	function onFile(srcStat, destStat, src, dest, opts, cb) {
		if (!destStat) return copyFile(srcStat, src, dest, opts, cb);
		return mayCopyFile(srcStat, src, dest, opts, cb);
	}
	function mayCopyFile(srcStat, src, dest, opts, cb) {
		if (opts.overwrite) fs$17.unlink(dest, (err) => {
			if (err) return cb(err);
			return copyFile(srcStat, src, dest, opts, cb);
		});
		else if (opts.errorOnExist) return cb(new Error(`'${dest}' already exists`));
		else return cb();
	}
	function copyFile(srcStat, src, dest, opts, cb) {
		fs$17.copyFile(src, dest, (err) => {
			if (err) return cb(err);
			if (opts.preserveTimestamps) return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
			return setDestMode(dest, srcStat.mode, cb);
		});
	}
	function handleTimestampsAndMode(srcMode, src, dest, cb) {
		if (fileIsNotWritable(srcMode)) return makeFileWritable(dest, srcMode, (err) => {
			if (err) return cb(err);
			return setDestTimestampsAndMode(srcMode, src, dest, cb);
		});
		return setDestTimestampsAndMode(srcMode, src, dest, cb);
	}
	function fileIsNotWritable(srcMode) {
		return (srcMode & 128) === 0;
	}
	function makeFileWritable(dest, srcMode, cb) {
		return setDestMode(dest, srcMode | 128, cb);
	}
	function setDestTimestampsAndMode(srcMode, src, dest, cb) {
		setDestTimestamps(src, dest, (err) => {
			if (err) return cb(err);
			return setDestMode(dest, srcMode, cb);
		});
	}
	function setDestMode(dest, srcMode, cb) {
		return fs$17.chmod(dest, srcMode, cb);
	}
	function setDestTimestamps(src, dest, cb) {
		fs$17.stat(src, (err, updatedSrcStat) => {
			if (err) return cb(err);
			return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
		});
	}
	function onDir(srcStat, destStat, src, dest, opts, cb) {
		if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
		if (destStat && !destStat.isDirectory()) return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
		return copyDir(src, dest, opts, cb);
	}
	function mkDirAndCopy(srcMode, src, dest, opts, cb) {
		fs$17.mkdir(dest, (err) => {
			if (err) return cb(err);
			copyDir(src, dest, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return setDestMode(dest, srcMode, cb);
			});
		});
	}
	function copyDir(src, dest, opts, cb) {
		fs$17.readdir(src, (err, items) => {
			if (err) return cb(err);
			return copyDirItems(items, src, dest, opts, cb);
		});
	}
	function copyDirItems(items, src, dest, opts, cb) {
		const item = items.pop();
		if (!item) return cb();
		return copyDirItem(items, item, src, dest, opts, cb);
	}
	function copyDirItem(items, item, src, dest, opts, cb) {
		const srcItem = path$24.join(src, item);
		const destItem = path$24.join(dest, item);
		stat$2.checkPaths(srcItem, destItem, "copy", (err, stats) => {
			if (err) return cb(err);
			const { destStat } = stats;
			startCopy(destStat, srcItem, destItem, opts, (err$1) => {
				if (err$1) return cb(err$1);
				return copyDirItems(items, src, dest, opts, cb);
			});
		});
	}
	function onLink(destStat, src, dest, opts, cb) {
		fs$17.readlink(src, (err, resolvedSrc) => {
			if (err) return cb(err);
			if (opts.dereference) resolvedSrc = path$24.resolve(process.cwd(), resolvedSrc);
			if (!destStat) return fs$17.symlink(resolvedSrc, dest, cb);
			else fs$17.readlink(dest, (err$1, resolvedDest) => {
				if (err$1) {
					if (err$1.code === "EINVAL" || err$1.code === "UNKNOWN") return fs$17.symlink(resolvedSrc, dest, cb);
					return cb(err$1);
				}
				if (opts.dereference) resolvedDest = path$24.resolve(process.cwd(), resolvedDest);
				if (stat$2.isSrcSubdir(resolvedSrc, resolvedDest)) return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
				if (destStat.isDirectory() && stat$2.isSrcSubdir(resolvedDest, resolvedSrc)) return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
				return copyLink(resolvedSrc, dest, cb);
			});
		});
	}
	function copyLink(resolvedSrc, dest, cb) {
		fs$17.unlink(dest, (err) => {
			if (err) return cb(err);
			return fs$17.symlink(resolvedSrc, dest, cb);
		});
	}
	module.exports = copy$1;
} });

//#endregion
//#region node_modules/fs-extra/lib/copy/index.js
var require_copy = __commonJS({ "node_modules/fs-extra/lib/copy/index.js"(exports, module) {
	const u$10 = require_universalify().fromCallback;
	module.exports = { copy: u$10(require_copy$1()) };
} });

//#endregion
//#region node_modules/fs-extra/lib/remove/rimraf.js
var require_rimraf = __commonJS({ "node_modules/fs-extra/lib/remove/rimraf.js"(exports, module) {
	const fs$16 = require_graceful_fs();
	const path$23 = __require("path");
	const assert$5 = __require("assert");
	const isWindows$2 = process.platform === "win32";
	function defaults$1(options) {
		const methods$2 = [
			"unlink",
			"chmod",
			"stat",
			"lstat",
			"rmdir",
			"readdir"
		];
		methods$2.forEach((m$2) => {
			options[m$2] = options[m$2] || fs$16[m$2];
			m$2 = m$2 + "Sync";
			options[m$2] = options[m$2] || fs$16[m$2];
		});
		options.maxBusyTries = options.maxBusyTries || 3;
	}
	function rimraf$1(p$2, options, cb) {
		let busyTries = 0;
		if (typeof options === "function") {
			cb = options;
			options = {};
		}
		assert$5(p$2, "rimraf: missing path");
		assert$5.strictEqual(typeof p$2, "string", "rimraf: path should be a string");
		assert$5.strictEqual(typeof cb, "function", "rimraf: callback function required");
		assert$5(options, "rimraf: invalid options argument provided");
		assert$5.strictEqual(typeof options, "object", "rimraf: options should be object");
		defaults$1(options);
		rimraf_(p$2, options, function CB(er) {
			if (er) {
				if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
					busyTries++;
					const time = busyTries * 100;
					return setTimeout(() => rimraf_(p$2, options, CB), time);
				}
				if (er.code === "ENOENT") er = null;
			}
			cb(er);
		});
	}
	function rimraf_(p$2, options, cb) {
		assert$5(p$2);
		assert$5(options);
		assert$5(typeof cb === "function");
		options.lstat(p$2, (er, st) => {
			if (er && er.code === "ENOENT") return cb(null);
			if (er && er.code === "EPERM" && isWindows$2) return fixWinEPERM(p$2, options, er, cb);
			if (st && st.isDirectory()) return rmdir(p$2, options, er, cb);
			options.unlink(p$2, (er$1) => {
				if (er$1) {
					if (er$1.code === "ENOENT") return cb(null);
					if (er$1.code === "EPERM") return isWindows$2 ? fixWinEPERM(p$2, options, er$1, cb) : rmdir(p$2, options, er$1, cb);
					if (er$1.code === "EISDIR") return rmdir(p$2, options, er$1, cb);
				}
				return cb(er$1);
			});
		});
	}
	function fixWinEPERM(p$2, options, er, cb) {
		assert$5(p$2);
		assert$5(options);
		assert$5(typeof cb === "function");
		options.chmod(p$2, 438, (er2) => {
			if (er2) cb(er2.code === "ENOENT" ? null : er);
			else options.stat(p$2, (er3, stats) => {
				if (er3) cb(er3.code === "ENOENT" ? null : er);
				else if (stats.isDirectory()) rmdir(p$2, options, er, cb);
				else options.unlink(p$2, cb);
			});
		});
	}
	function fixWinEPERMSync(p$2, options, er) {
		let stats;
		assert$5(p$2);
		assert$5(options);
		try {
			options.chmodSync(p$2, 438);
		} catch (er2) {
			if (er2.code === "ENOENT") return;
			else throw er;
		}
		try {
			stats = options.statSync(p$2);
		} catch (er3) {
			if (er3.code === "ENOENT") return;
			else throw er;
		}
		if (stats.isDirectory()) rmdirSync(p$2, options, er);
		else options.unlinkSync(p$2);
	}
	function rmdir(p$2, options, originalEr, cb) {
		assert$5(p$2);
		assert$5(options);
		assert$5(typeof cb === "function");
		options.rmdir(p$2, (er) => {
			if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p$2, options, cb);
			else if (er && er.code === "ENOTDIR") cb(originalEr);
			else cb(er);
		});
	}
	function rmkids(p$2, options, cb) {
		assert$5(p$2);
		assert$5(options);
		assert$5(typeof cb === "function");
		options.readdir(p$2, (er, files) => {
			if (er) return cb(er);
			let n$4 = files.length;
			let errState;
			if (n$4 === 0) return options.rmdir(p$2, cb);
			files.forEach((f$1) => {
				rimraf$1(path$23.join(p$2, f$1), options, (er$1) => {
					if (errState) return;
					if (er$1) return cb(errState = er$1);
					if (--n$4 === 0) options.rmdir(p$2, cb);
				});
			});
		});
	}
	function rimrafSync(p$2, options) {
		let st;
		options = options || {};
		defaults$1(options);
		assert$5(p$2, "rimraf: missing path");
		assert$5.strictEqual(typeof p$2, "string", "rimraf: path should be a string");
		assert$5(options, "rimraf: missing options");
		assert$5.strictEqual(typeof options, "object", "rimraf: options should be object");
		try {
			st = options.lstatSync(p$2);
		} catch (er) {
			if (er.code === "ENOENT") return;
			if (er.code === "EPERM" && isWindows$2) fixWinEPERMSync(p$2, options, er);
		}
		try {
			if (st && st.isDirectory()) rmdirSync(p$2, options, null);
			else options.unlinkSync(p$2);
		} catch (er) {
			if (er.code === "ENOENT") return;
			else if (er.code === "EPERM") return isWindows$2 ? fixWinEPERMSync(p$2, options, er) : rmdirSync(p$2, options, er);
			else if (er.code !== "EISDIR") throw er;
			rmdirSync(p$2, options, er);
		}
	}
	function rmdirSync(p$2, options, originalEr) {
		assert$5(p$2);
		assert$5(options);
		try {
			options.rmdirSync(p$2);
		} catch (er) {
			if (er.code === "ENOTDIR") throw originalEr;
			else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p$2, options);
			else if (er.code !== "ENOENT") throw er;
		}
	}
	function rmkidsSync(p$2, options) {
		assert$5(p$2);
		assert$5(options);
		options.readdirSync(p$2).forEach((f$1) => rimrafSync(path$23.join(p$2, f$1), options));
		if (isWindows$2) {
			const startTime = Date.now();
			do
				try {
					const ret$1 = options.rmdirSync(p$2, options);
					return ret$1;
				} catch {}
			while (Date.now() - startTime < 500);
		} else {
			const ret$1 = options.rmdirSync(p$2, options);
			return ret$1;
		}
	}
	module.exports = rimraf$1;
	rimraf$1.sync = rimrafSync;
} });

//#endregion
//#region node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({ "node_modules/fs-extra/lib/remove/index.js"(exports, module) {
	const u$9 = require_universalify().fromCallback;
	const rimraf = require_rimraf();
	module.exports = {
		remove: u$9(rimraf),
		removeSync: rimraf.sync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({ "node_modules/fs-extra/lib/empty/index.js"(exports, module) {
	const u$8 = require_universalify().fromCallback;
	const fs$15 = require_graceful_fs();
	const path$22 = __require("path");
	const mkdir$3 = require_mkdirs();
	const remove$3 = require_remove();
	const emptyDir = u$8(function emptyDir$1(dir, callback) {
		callback = callback || function() {};
		fs$15.readdir(dir, (err, items) => {
			if (err) return mkdir$3.mkdirs(dir, callback);
			items = items.map((item) => path$22.join(dir, item));
			deleteItem();
			function deleteItem() {
				const item = items.pop();
				if (!item) return callback();
				remove$3.remove(item, (err$1) => {
					if (err$1) return callback(err$1);
					deleteItem();
				});
			}
		});
	});
	function emptyDirSync(dir) {
		let items;
		try {
			items = fs$15.readdirSync(dir);
		} catch {
			return mkdir$3.mkdirsSync(dir);
		}
		items.forEach((item) => {
			item = path$22.join(dir, item);
			remove$3.removeSync(item);
		});
	}
	module.exports = {
		emptyDirSync,
		emptydirSync: emptyDirSync,
		emptyDir,
		emptydir: emptyDir
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({ "node_modules/fs-extra/lib/ensure/file.js"(exports, module) {
	const u$7 = require_universalify().fromCallback;
	const path$21 = __require("path");
	const fs$14 = require_graceful_fs();
	const mkdir$2 = require_mkdirs();
	function createFile(file$2, callback) {
		function makeFile() {
			fs$14.writeFile(file$2, "", (err) => {
				if (err) return callback(err);
				callback();
			});
		}
		fs$14.stat(file$2, (err, stats) => {
			if (!err && stats.isFile()) return callback();
			const dir = path$21.dirname(file$2);
			fs$14.stat(dir, (err$1, stats$1) => {
				if (err$1) {
					if (err$1.code === "ENOENT") return mkdir$2.mkdirs(dir, (err$2) => {
						if (err$2) return callback(err$2);
						makeFile();
					});
					return callback(err$1);
				}
				if (stats$1.isDirectory()) makeFile();
				else fs$14.readdir(dir, (err$2) => {
					if (err$2) return callback(err$2);
				});
			});
		});
	}
	function createFileSync(file$2) {
		let stats;
		try {
			stats = fs$14.statSync(file$2);
		} catch {}
		if (stats && stats.isFile()) return;
		const dir = path$21.dirname(file$2);
		try {
			if (!fs$14.statSync(dir).isDirectory()) fs$14.readdirSync(dir);
		} catch (err) {
			if (err && err.code === "ENOENT") mkdir$2.mkdirsSync(dir);
			else throw err;
		}
		fs$14.writeFileSync(file$2, "");
	}
	module.exports = {
		createFile: u$7(createFile),
		createFileSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({ "node_modules/fs-extra/lib/ensure/link.js"(exports, module) {
	const u$6 = require_universalify().fromCallback;
	const path$20 = __require("path");
	const fs$13 = require_graceful_fs();
	const mkdir$1 = require_mkdirs();
	const pathExists$4 = require_path_exists().pathExists;
	function createLink(srcpath, dstpath, callback) {
		function makeLink(srcpath$1, dstpath$1) {
			fs$13.link(srcpath$1, dstpath$1, (err) => {
				if (err) return callback(err);
				callback(null);
			});
		}
		pathExists$4(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			fs$13.lstat(srcpath, (err$1) => {
				if (err$1) {
					err$1.message = err$1.message.replace("lstat", "ensureLink");
					return callback(err$1);
				}
				const dir = path$20.dirname(dstpath);
				pathExists$4(dir, (err$2, dirExists) => {
					if (err$2) return callback(err$2);
					if (dirExists) return makeLink(srcpath, dstpath);
					mkdir$1.mkdirs(dir, (err$3) => {
						if (err$3) return callback(err$3);
						makeLink(srcpath, dstpath);
					});
				});
			});
		});
	}
	function createLinkSync(srcpath, dstpath) {
		const destinationExists = fs$13.existsSync(dstpath);
		if (destinationExists) return void 0;
		try {
			fs$13.lstatSync(srcpath);
		} catch (err) {
			err.message = err.message.replace("lstat", "ensureLink");
			throw err;
		}
		const dir = path$20.dirname(dstpath);
		const dirExists = fs$13.existsSync(dir);
		if (dirExists) return fs$13.linkSync(srcpath, dstpath);
		mkdir$1.mkdirsSync(dir);
		return fs$13.linkSync(srcpath, dstpath);
	}
	module.exports = {
		createLink: u$6(createLink),
		createLinkSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({ "node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module) {
	const path$19 = __require("path");
	const fs$12 = require_graceful_fs();
	const pathExists$3 = require_path_exists().pathExists;
	/**
	* Function that returns two types of paths, one relative to symlink, and one
	* relative to the current working directory. Checks if path is absolute or
	* relative. If the path is relative, this function checks if the path is
	* relative to symlink or relative to current working directory. This is an
	* initiative to find a smarter `srcpath` to supply when building symlinks.
	* This allows you to determine which path to use out of one of three possible
	* types of source paths. The first is an absolute path. This is detected by
	* `path.isAbsolute()`. When an absolute path is provided, it is checked to
	* see if it exists. If it does it's used, if not an error is returned
	* (callback)/ thrown (sync). The other two options for `srcpath` are a
	* relative url. By default Node's `fs.symlink` works by creating a symlink
	* using `dstpath` and expects the `srcpath` to be relative to the newly
	* created symlink. If you provide a `srcpath` that does not exist on the file
	* system it results in a broken symlink. To minimize this, the function
	* checks to see if the 'relative to symlink' source file exists, and if it
	* does it will use it. If it does not, it checks if there's a file that
	* exists that is relative to the current working directory, if does its used.
	* This preserves the expectations of the original fs.symlink spec and adds
	* the ability to pass in `relative to current working direcotry` paths.
	*/
	function symlinkPaths$1(srcpath, dstpath, callback) {
		if (path$19.isAbsolute(srcpath)) return fs$12.lstat(srcpath, (err) => {
			if (err) {
				err.message = err.message.replace("lstat", "ensureSymlink");
				return callback(err);
			}
			return callback(null, {
				toCwd: srcpath,
				toDst: srcpath
			});
		});
		else {
			const dstdir = path$19.dirname(dstpath);
			const relativeToDst = path$19.join(dstdir, srcpath);
			return pathExists$3(relativeToDst, (err, exists) => {
				if (err) return callback(err);
				if (exists) return callback(null, {
					toCwd: relativeToDst,
					toDst: srcpath
				});
				else return fs$12.lstat(srcpath, (err$1) => {
					if (err$1) {
						err$1.message = err$1.message.replace("lstat", "ensureSymlink");
						return callback(err$1);
					}
					return callback(null, {
						toCwd: srcpath,
						toDst: path$19.relative(dstdir, srcpath)
					});
				});
			});
		}
	}
	function symlinkPathsSync$1(srcpath, dstpath) {
		let exists;
		if (path$19.isAbsolute(srcpath)) {
			exists = fs$12.existsSync(srcpath);
			if (!exists) throw new Error("absolute srcpath does not exist");
			return {
				toCwd: srcpath,
				toDst: srcpath
			};
		} else {
			const dstdir = path$19.dirname(dstpath);
			const relativeToDst = path$19.join(dstdir, srcpath);
			exists = fs$12.existsSync(relativeToDst);
			if (exists) return {
				toCwd: relativeToDst,
				toDst: srcpath
			};
			else {
				exists = fs$12.existsSync(srcpath);
				if (!exists) throw new Error("relative srcpath does not exist");
				return {
					toCwd: srcpath,
					toDst: path$19.relative(dstdir, srcpath)
				};
			}
		}
	}
	module.exports = {
		symlinkPaths: symlinkPaths$1,
		symlinkPathsSync: symlinkPathsSync$1
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({ "node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module) {
	const fs$11 = require_graceful_fs();
	function symlinkType$1(srcpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		if (type) return callback(null, type);
		fs$11.lstat(srcpath, (err, stats) => {
			if (err) return callback(null, "file");
			type = stats && stats.isDirectory() ? "dir" : "file";
			callback(null, type);
		});
	}
	function symlinkTypeSync$1(srcpath, type) {
		let stats;
		if (type) return type;
		try {
			stats = fs$11.lstatSync(srcpath);
		} catch {
			return "file";
		}
		return stats && stats.isDirectory() ? "dir" : "file";
	}
	module.exports = {
		symlinkType: symlinkType$1,
		symlinkTypeSync: symlinkTypeSync$1
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({ "node_modules/fs-extra/lib/ensure/symlink.js"(exports, module) {
	const u$5 = require_universalify().fromCallback;
	const path$18 = __require("path");
	const fs$10 = require_graceful_fs();
	const _mkdirs = require_mkdirs();
	const mkdirs = _mkdirs.mkdirs;
	const mkdirsSync = _mkdirs.mkdirsSync;
	const _symlinkPaths = require_symlink_paths();
	const symlinkPaths = _symlinkPaths.symlinkPaths;
	const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
	const _symlinkType = require_symlink_type();
	const symlinkType = _symlinkType.symlinkType;
	const symlinkTypeSync = _symlinkType.symlinkTypeSync;
	const pathExists$2 = require_path_exists().pathExists;
	function createSymlink(srcpath, dstpath, type, callback) {
		callback = typeof type === "function" ? type : callback;
		type = typeof type === "function" ? false : type;
		pathExists$2(dstpath, (err, destinationExists) => {
			if (err) return callback(err);
			if (destinationExists) return callback(null);
			symlinkPaths(srcpath, dstpath, (err$1, relative$3) => {
				if (err$1) return callback(err$1);
				srcpath = relative$3.toDst;
				symlinkType(relative$3.toCwd, type, (err$2, type$1) => {
					if (err$2) return callback(err$2);
					const dir = path$18.dirname(dstpath);
					pathExists$2(dir, (err$3, dirExists) => {
						if (err$3) return callback(err$3);
						if (dirExists) return fs$10.symlink(srcpath, dstpath, type$1, callback);
						mkdirs(dir, (err$4) => {
							if (err$4) return callback(err$4);
							fs$10.symlink(srcpath, dstpath, type$1, callback);
						});
					});
				});
			});
		});
	}
	function createSymlinkSync(srcpath, dstpath, type) {
		const destinationExists = fs$10.existsSync(dstpath);
		if (destinationExists) return void 0;
		const relative$3 = symlinkPathsSync(srcpath, dstpath);
		srcpath = relative$3.toDst;
		type = symlinkTypeSync(relative$3.toCwd, type);
		const dir = path$18.dirname(dstpath);
		const exists = fs$10.existsSync(dir);
		if (exists) return fs$10.symlinkSync(srcpath, dstpath, type);
		mkdirsSync(dir);
		return fs$10.symlinkSync(srcpath, dstpath, type);
	}
	module.exports = {
		createSymlink: u$5(createSymlink),
		createSymlinkSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({ "node_modules/fs-extra/lib/ensure/index.js"(exports, module) {
	const file$1 = require_file();
	const link$1 = require_link();
	const symlink = require_symlink();
	module.exports = {
		createFile: file$1.createFile,
		createFileSync: file$1.createFileSync,
		ensureFile: file$1.createFile,
		ensureFileSync: file$1.createFileSync,
		createLink: link$1.createLink,
		createLinkSync: link$1.createLinkSync,
		ensureLink: link$1.createLink,
		ensureLinkSync: link$1.createLinkSync,
		createSymlink: symlink.createSymlink,
		createSymlinkSync: symlink.createSymlinkSync,
		ensureSymlink: symlink.createSymlink,
		ensureSymlinkSync: symlink.createSymlinkSync
	};
} });

//#endregion
//#region node_modules/jsonfile/utils.js
var require_utils$4 = __commonJS({ "node_modules/jsonfile/utils.js"(exports, module) {
	function stringify$16(obj, { EOL = "\n", finalEOL = true, replacer: replacer$1 = null, spaces } = {}) {
		const EOF = finalEOL ? EOL : "";
		const str$4 = JSON.stringify(obj, replacer$1, spaces);
		return str$4.replace(/\n/g, EOL) + EOF;
	}
	function stripBom$1(content) {
		if (Buffer.isBuffer(content)) content = content.toString("utf8");
		return content.replace(/^\uFEFF/, "");
	}
	module.exports = {
		stringify: stringify$16,
		stripBom: stripBom$1
	};
} });

//#endregion
//#region node_modules/jsonfile/index.js
var require_jsonfile$1 = __commonJS({ "node_modules/jsonfile/index.js"(exports, module) {
	let _fs$2;
	try {
		_fs$2 = require_graceful_fs();
	} catch (_) {
		_fs$2 = __require("fs");
	}
	const universalify = require_universalify();
	const { stringify: stringify$15, stripBom } = require_utils$4();
	async function _readFile(file$2, options = {}) {
		if (typeof options === "string") options = { encoding: options };
		const fs$25 = options.fs || _fs$2;
		const shouldThrow = "throws" in options ? options.throws : true;
		let data$2 = await universalify.fromCallback(fs$25.readFile)(file$2, options);
		data$2 = stripBom(data$2);
		let obj;
		try {
			obj = JSON.parse(data$2, options ? options.reviver : null);
		} catch (err) {
			if (shouldThrow) {
				err.message = `${file$2}: ${err.message}`;
				throw err;
			} else return null;
		}
		return obj;
	}
	const readFile = universalify.fromPromise(_readFile);
	function readFileSync$1(file$2, options = {}) {
		if (typeof options === "string") options = { encoding: options };
		const fs$25 = options.fs || _fs$2;
		const shouldThrow = "throws" in options ? options.throws : true;
		try {
			let content = fs$25.readFileSync(file$2, options);
			content = stripBom(content);
			return JSON.parse(content, options.reviver);
		} catch (err) {
			if (shouldThrow) {
				err.message = `${file$2}: ${err.message}`;
				throw err;
			} else return null;
		}
	}
	async function _writeFile(file$2, obj, options = {}) {
		const fs$25 = options.fs || _fs$2;
		const str$4 = stringify$15(obj, options);
		await universalify.fromCallback(fs$25.writeFile)(file$2, str$4, options);
	}
	const writeFile = universalify.fromPromise(_writeFile);
	function writeFileSync(file$2, obj, options = {}) {
		const fs$25 = options.fs || _fs$2;
		const str$4 = stringify$15(obj, options);
		return fs$25.writeFileSync(file$2, str$4, options);
	}
	const jsonfile = {
		readFile,
		readFileSync: readFileSync$1,
		writeFile,
		writeFileSync
	};
	module.exports = jsonfile;
} });

//#endregion
//#region node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile = __commonJS({ "node_modules/fs-extra/lib/json/jsonfile.js"(exports, module) {
	const jsonFile$1 = require_jsonfile$1();
	module.exports = {
		readJson: jsonFile$1.readFile,
		readJsonSync: jsonFile$1.readFileSync,
		writeJson: jsonFile$1.writeFile,
		writeJsonSync: jsonFile$1.writeFileSync
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/output/index.js
var require_output = __commonJS({ "node_modules/fs-extra/lib/output/index.js"(exports, module) {
	const u$4 = require_universalify().fromCallback;
	const fs$9 = require_graceful_fs();
	const path$17 = __require("path");
	const mkdir = require_mkdirs();
	const pathExists$1 = require_path_exists().pathExists;
	function outputFile$1(file$2, data$2, encoding, callback) {
		if (typeof encoding === "function") {
			callback = encoding;
			encoding = "utf8";
		}
		const dir = path$17.dirname(file$2);
		pathExists$1(dir, (err, itDoes) => {
			if (err) return callback(err);
			if (itDoes) return fs$9.writeFile(file$2, data$2, encoding, callback);
			mkdir.mkdirs(dir, (err$1) => {
				if (err$1) return callback(err$1);
				fs$9.writeFile(file$2, data$2, encoding, callback);
			});
		});
	}
	function outputFileSync$1(file$2, ...args) {
		const dir = path$17.dirname(file$2);
		if (fs$9.existsSync(dir)) return fs$9.writeFileSync(file$2, ...args);
		mkdir.mkdirsSync(dir);
		fs$9.writeFileSync(file$2, ...args);
	}
	module.exports = {
		outputFile: u$4(outputFile$1),
		outputFileSync: outputFileSync$1
	};
} });

//#endregion
//#region node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({ "node_modules/fs-extra/lib/json/output-json.js"(exports, module) {
	const { stringify: stringify$14 } = require_utils$4();
	const { outputFile } = require_output();
	async function outputJson(file$2, data$2, options = {}) {
		const str$4 = stringify$14(data$2, options);
		await outputFile(file$2, str$4, options);
	}
	module.exports = outputJson;
} });

//#endregion
//#region node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({ "node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module) {
	const { stringify: stringify$13 } = require_utils$4();
	const { outputFileSync } = require_output();
	function outputJsonSync(file$2, data$2, options) {
		const str$4 = stringify$13(data$2, options);
		outputFileSync(file$2, str$4, options);
	}
	module.exports = outputJsonSync;
} });

//#endregion
//#region node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({ "node_modules/fs-extra/lib/json/index.js"(exports, module) {
	const u$3 = require_universalify().fromPromise;
	const jsonFile = require_jsonfile();
	jsonFile.outputJson = u$3(require_output_json());
	jsonFile.outputJsonSync = require_output_json_sync();
	jsonFile.outputJSON = jsonFile.outputJson;
	jsonFile.outputJSONSync = jsonFile.outputJsonSync;
	jsonFile.writeJSON = jsonFile.writeJson;
	jsonFile.writeJSONSync = jsonFile.writeJsonSync;
	jsonFile.readJSON = jsonFile.readJson;
	jsonFile.readJSONSync = jsonFile.readJsonSync;
	module.exports = jsonFile;
} });

//#endregion
//#region node_modules/fs-extra/lib/move-sync/move-sync.js
var require_move_sync$1 = __commonJS({ "node_modules/fs-extra/lib/move-sync/move-sync.js"(exports, module) {
	const fs$8 = require_graceful_fs();
	const path$16 = __require("path");
	const copySync = require_copy_sync().copySync;
	const removeSync = require_remove().removeSync;
	const mkdirpSync = require_mkdirs().mkdirpSync;
	const stat$1 = require_stat();
	function moveSync(src, dest, opts) {
		opts = opts || {};
		const overwrite = opts.overwrite || opts.clobber || false;
		const { srcStat } = stat$1.checkPathsSync(src, dest, "move");
		stat$1.checkParentPathsSync(src, srcStat, dest, "move");
		mkdirpSync(path$16.dirname(dest));
		return doRename$1(src, dest, overwrite);
	}
	function doRename$1(src, dest, overwrite) {
		if (overwrite) {
			removeSync(dest);
			return rename$1(src, dest, overwrite);
		}
		if (fs$8.existsSync(dest)) throw new Error("dest already exists.");
		return rename$1(src, dest, overwrite);
	}
	function rename$1(src, dest, overwrite) {
		try {
			fs$8.renameSync(src, dest);
		} catch (err) {
			if (err.code !== "EXDEV") throw err;
			return moveAcrossDevice$1(src, dest, overwrite);
		}
	}
	function moveAcrossDevice$1(src, dest, overwrite) {
		const opts = {
			overwrite,
			errorOnExist: true
		};
		copySync(src, dest, opts);
		return removeSync(src);
	}
	module.exports = moveSync;
} });

//#endregion
//#region node_modules/fs-extra/lib/move-sync/index.js
var require_move_sync = __commonJS({ "node_modules/fs-extra/lib/move-sync/index.js"(exports, module) {
	module.exports = { moveSync: require_move_sync$1() };
} });

//#endregion
//#region node_modules/fs-extra/lib/move/move.js
var require_move$1 = __commonJS({ "node_modules/fs-extra/lib/move/move.js"(exports, module) {
	const fs$7 = require_graceful_fs();
	const path$15 = __require("path");
	const copy = require_copy().copy;
	const remove$2 = require_remove().remove;
	const mkdirp = require_mkdirs().mkdirp;
	const pathExists = require_path_exists().pathExists;
	const stat = require_stat();
	function move(src, dest, opts, cb) {
		if (typeof opts === "function") {
			cb = opts;
			opts = {};
		}
		const overwrite = opts.overwrite || opts.clobber || false;
		stat.checkPaths(src, dest, "move", (err, stats) => {
			if (err) return cb(err);
			const { srcStat } = stats;
			stat.checkParentPaths(src, srcStat, dest, "move", (err$1) => {
				if (err$1) return cb(err$1);
				mkdirp(path$15.dirname(dest), (err$2) => {
					if (err$2) return cb(err$2);
					return doRename(src, dest, overwrite, cb);
				});
			});
		});
	}
	function doRename(src, dest, overwrite, cb) {
		if (overwrite) return remove$2(dest, (err) => {
			if (err) return cb(err);
			return rename(src, dest, overwrite, cb);
		});
		pathExists(dest, (err, destExists) => {
			if (err) return cb(err);
			if (destExists) return cb(new Error("dest already exists."));
			return rename(src, dest, overwrite, cb);
		});
	}
	function rename(src, dest, overwrite, cb) {
		fs$7.rename(src, dest, (err) => {
			if (!err) return cb();
			if (err.code !== "EXDEV") return cb(err);
			return moveAcrossDevice(src, dest, overwrite, cb);
		});
	}
	function moveAcrossDevice(src, dest, overwrite, cb) {
		const opts = {
			overwrite,
			errorOnExist: true
		};
		copy(src, dest, opts, (err) => {
			if (err) return cb(err);
			return remove$2(src, cb);
		});
	}
	module.exports = move;
} });

//#endregion
//#region node_modules/fs-extra/lib/move/index.js
var require_move = __commonJS({ "node_modules/fs-extra/lib/move/index.js"(exports, module) {
	const u$2 = require_universalify().fromCallback;
	module.exports = { move: u$2(require_move$1()) };
} });

//#endregion
//#region node_modules/fs-extra/lib/index.js
var require_lib$19 = __commonJS({ "node_modules/fs-extra/lib/index.js"(exports, module) {
	module.exports = {
		...require_fs$1(),
		...require_copy_sync(),
		...require_copy(),
		...require_empty(),
		...require_ensure(),
		...require_json(),
		...require_mkdirs(),
		...require_move_sync(),
		...require_move(),
		...require_output(),
		...require_path_exists(),
		...require_remove()
	};
	const fs$6 = __require("fs");
	if (Object.getOwnPropertyDescriptor(fs$6, "promises")) Object.defineProperty(module.exports, "promises", { get() {
		return fs$6.promises;
	} });
} });
var import_lib$3 = __toESM(require_lib$19());

//#endregion
//#region node_modules/picocolors/picocolors.js
var require_picocolors = __commonJS({ "node_modules/picocolors/picocolors.js"(exports, module) {
	let p$1 = process || {}, argv = p$1.argv || [], env$2 = p$1.env || {};
	let isColorSupported$1 = !(!!env$2.NO_COLOR || argv.includes("--no-color")) && (!!env$2.FORCE_COLOR || argv.includes("--color") || p$1.platform === "win32" || (p$1.stdout || {}).isTTY && env$2.TERM !== "dumb" || !!env$2.CI);
	let formatter = (open, close, replace = open) => (input) => {
		let string$3 = "" + input, index$1 = string$3.indexOf(close, open.length);
		return ~index$1 ? open + replaceClose(string$3, close, replace, index$1) + close : open + string$3 + close;
	};
	let replaceClose = (string$3, close, replace, index$1) => {
		let result = "", cursor = 0;
		do {
			result += string$3.substring(cursor, index$1) + replace;
			cursor = index$1 + close.length;
			index$1 = string$3.indexOf(close, cursor);
		} while (~index$1);
		return result + string$3.substring(cursor);
	};
	let createColors = (enabled = isColorSupported$1) => {
		let f$1 = enabled ? formatter : () => String;
		return {
			isColorSupported: enabled,
			reset: f$1("\x1B[0m", "\x1B[0m"),
			bold: f$1("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
			dim: f$1("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
			italic: f$1("\x1B[3m", "\x1B[23m"),
			underline: f$1("\x1B[4m", "\x1B[24m"),
			inverse: f$1("\x1B[7m", "\x1B[27m"),
			hidden: f$1("\x1B[8m", "\x1B[28m"),
			strikethrough: f$1("\x1B[9m", "\x1B[29m"),
			black: f$1("\x1B[30m", "\x1B[39m"),
			red: f$1("\x1B[31m", "\x1B[39m"),
			green: f$1("\x1B[32m", "\x1B[39m"),
			yellow: f$1("\x1B[33m", "\x1B[39m"),
			blue: f$1("\x1B[34m", "\x1B[39m"),
			magenta: f$1("\x1B[35m", "\x1B[39m"),
			cyan: f$1("\x1B[36m", "\x1B[39m"),
			white: f$1("\x1B[37m", "\x1B[39m"),
			gray: f$1("\x1B[90m", "\x1B[39m"),
			bgBlack: f$1("\x1B[40m", "\x1B[49m"),
			bgRed: f$1("\x1B[41m", "\x1B[49m"),
			bgGreen: f$1("\x1B[42m", "\x1B[49m"),
			bgYellow: f$1("\x1B[43m", "\x1B[49m"),
			bgBlue: f$1("\x1B[44m", "\x1B[49m"),
			bgMagenta: f$1("\x1B[45m", "\x1B[49m"),
			bgCyan: f$1("\x1B[46m", "\x1B[49m"),
			bgWhite: f$1("\x1B[47m", "\x1B[49m"),
			blackBright: f$1("\x1B[90m", "\x1B[39m"),
			redBright: f$1("\x1B[91m", "\x1B[39m"),
			greenBright: f$1("\x1B[92m", "\x1B[39m"),
			yellowBright: f$1("\x1B[93m", "\x1B[39m"),
			blueBright: f$1("\x1B[94m", "\x1B[39m"),
			magentaBright: f$1("\x1B[95m", "\x1B[39m"),
			cyanBright: f$1("\x1B[96m", "\x1B[39m"),
			whiteBright: f$1("\x1B[97m", "\x1B[39m"),
			bgBlackBright: f$1("\x1B[100m", "\x1B[49m"),
			bgRedBright: f$1("\x1B[101m", "\x1B[49m"),
			bgGreenBright: f$1("\x1B[102m", "\x1B[49m"),
			bgYellowBright: f$1("\x1B[103m", "\x1B[49m"),
			bgBlueBright: f$1("\x1B[104m", "\x1B[49m"),
			bgMagentaBright: f$1("\x1B[105m", "\x1B[49m"),
			bgCyanBright: f$1("\x1B[106m", "\x1B[49m"),
			bgWhiteBright: f$1("\x1B[107m", "\x1B[49m")
		};
	};
	module.exports = createColors();
	module.exports.createColors = createColors;
} });

//#endregion
//#region node_modules/postcss/lib/tokenize.js
var require_tokenize$4 = __commonJS({ "node_modules/postcss/lib/tokenize.js"(exports, module) {
	const SINGLE_QUOTE = "'".charCodeAt(0);
	const DOUBLE_QUOTE = "\"".charCodeAt(0);
	const BACKSLASH = "\\".charCodeAt(0);
	const SLASH = "/".charCodeAt(0);
	const NEWLINE$2 = "\n".charCodeAt(0);
	const SPACE = " ".charCodeAt(0);
	const FEED = "\f".charCodeAt(0);
	const TAB = "	".charCodeAt(0);
	const CR = "\r".charCodeAt(0);
	const OPEN_SQUARE = "[".charCodeAt(0);
	const CLOSE_SQUARE = "]".charCodeAt(0);
	const OPEN_PARENTHESES = "(".charCodeAt(0);
	const CLOSE_PARENTHESES = ")".charCodeAt(0);
	const OPEN_CURLY = "{".charCodeAt(0);
	const CLOSE_CURLY = "}".charCodeAt(0);
	const SEMICOLON = ";".charCodeAt(0);
	const ASTERISK = "*".charCodeAt(0);
	const COLON = ":".charCodeAt(0);
	const AT = "@".charCodeAt(0);
	const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
	const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
	const RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
	const RE_HEX_ESCAPE = /[\da-f]/i;
	module.exports = function tokenizer$3(input, options = {}) {
		let css = input.css.valueOf();
		let ignore = options.ignoreErrors;
		let code$1, content, escape$2, next, quote;
		let currentToken, escaped, escapePos, n$4, prev;
		let length = css.length;
		let pos = 0;
		let buffer = [];
		let returned = [];
		function position() {
			return pos;
		}
		function unclosed(what) {
			throw input.error("Unclosed " + what, pos);
		}
		function endOfFile() {
			return returned.length === 0 && pos >= length;
		}
		function nextToken(opts) {
			if (returned.length) return returned.pop();
			if (pos >= length) return;
			let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
			code$1 = css.charCodeAt(pos);
			switch (code$1) {
				case NEWLINE$2:
				case SPACE:
				case TAB:
				case CR:
				case FEED: {
					next = pos;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
					} while (code$1 === SPACE || code$1 === NEWLINE$2 || code$1 === TAB || code$1 === CR || code$1 === FEED);
					currentToken = ["space", css.slice(pos, next)];
					pos = next - 1;
					break;
				}
				case OPEN_SQUARE:
				case CLOSE_SQUARE:
				case OPEN_CURLY:
				case CLOSE_CURLY:
				case COLON:
				case SEMICOLON:
				case CLOSE_PARENTHESES: {
					let controlChar = String.fromCharCode(code$1);
					currentToken = [
						controlChar,
						controlChar,
						pos
					];
					break;
				}
				case OPEN_PARENTHESES: {
					prev = buffer.length ? buffer.pop()[1] : "";
					n$4 = css.charCodeAt(pos + 1);
					if (prev === "url" && n$4 !== SINGLE_QUOTE && n$4 !== DOUBLE_QUOTE && n$4 !== SPACE && n$4 !== NEWLINE$2 && n$4 !== TAB && n$4 !== FEED && n$4 !== CR) {
						next = pos;
						do {
							escaped = false;
							next = css.indexOf(")", next + 1);
							if (next === -1) if (ignore || ignoreUnclosed) {
								next = pos;
								break;
							} else unclosed("bracket");
							escapePos = next;
							while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
								escapePos -= 1;
								escaped = !escaped;
							}
						} while (escaped);
						currentToken = [
							"brackets",
							css.slice(pos, next + 1),
							pos,
							next
						];
						pos = next;
					} else {
						next = css.indexOf(")", pos + 1);
						content = css.slice(pos, next + 1);
						if (next === -1 || RE_BAD_BRACKET.test(content)) currentToken = [
							"(",
							"(",
							pos
						];
						else {
							currentToken = [
								"brackets",
								content,
								pos,
								next
							];
							pos = next;
						}
					}
					break;
				}
				case SINGLE_QUOTE:
				case DOUBLE_QUOTE: {
					quote = code$1 === SINGLE_QUOTE ? "'" : "\"";
					next = pos;
					do {
						escaped = false;
						next = css.indexOf(quote, next + 1);
						if (next === -1) if (ignore || ignoreUnclosed) {
							next = pos + 1;
							break;
						} else unclosed("string");
						escapePos = next;
						while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
							escapePos -= 1;
							escaped = !escaped;
						}
					} while (escaped);
					currentToken = [
						"string",
						css.slice(pos, next + 1),
						pos,
						next
					];
					pos = next;
					break;
				}
				case AT: {
					RE_AT_END.lastIndex = pos + 1;
					RE_AT_END.test(css);
					if (RE_AT_END.lastIndex === 0) next = css.length - 1;
					else next = RE_AT_END.lastIndex - 2;
					currentToken = [
						"at-word",
						css.slice(pos, next + 1),
						pos,
						next
					];
					pos = next;
					break;
				}
				case BACKSLASH: {
					next = pos;
					escape$2 = true;
					while (css.charCodeAt(next + 1) === BACKSLASH) {
						next += 1;
						escape$2 = !escape$2;
					}
					code$1 = css.charCodeAt(next + 1);
					if (escape$2 && code$1 !== SLASH && code$1 !== SPACE && code$1 !== NEWLINE$2 && code$1 !== TAB && code$1 !== CR && code$1 !== FEED) {
						next += 1;
						if (RE_HEX_ESCAPE.test(css.charAt(next))) {
							while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) next += 1;
							if (css.charCodeAt(next + 1) === SPACE) next += 1;
						}
					}
					currentToken = [
						"word",
						css.slice(pos, next + 1),
						pos,
						next
					];
					pos = next;
					break;
				}
				default: {
					if (code$1 === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
						next = css.indexOf("*/", pos + 2) + 1;
						if (next === 0) if (ignore || ignoreUnclosed) next = css.length;
						else unclosed("comment");
						currentToken = [
							"comment",
							css.slice(pos, next + 1),
							pos,
							next
						];
						pos = next;
					} else {
						RE_WORD_END.lastIndex = pos + 1;
						RE_WORD_END.test(css);
						if (RE_WORD_END.lastIndex === 0) next = css.length - 1;
						else next = RE_WORD_END.lastIndex - 2;
						currentToken = [
							"word",
							css.slice(pos, next + 1),
							pos,
							next
						];
						buffer.push(currentToken);
						pos = next;
					}
					break;
				}
			}
			pos++;
			return currentToken;
		}
		function back(token$1) {
			returned.push(token$1);
		}
		return {
			back,
			endOfFile,
			nextToken,
			position
		};
	};
} });

//#endregion
//#region node_modules/postcss/lib/terminal-highlight.js
var require_terminal_highlight = __commonJS({ "node_modules/postcss/lib/terminal-highlight.js"(exports, module) {
	let pico$1 = require_picocolors();
	let tokenizer$2 = require_tokenize$4();
	let Input$8;
	function registerInput(dependant) {
		Input$8 = dependant;
	}
	const HIGHLIGHT_THEME = {
		";": pico$1.yellow,
		":": pico$1.yellow,
		"(": pico$1.cyan,
		")": pico$1.cyan,
		"[": pico$1.yellow,
		"]": pico$1.yellow,
		"{": pico$1.yellow,
		"}": pico$1.yellow,
		"at-word": pico$1.cyan,
		"brackets": pico$1.cyan,
		"call": pico$1.cyan,
		"class": pico$1.yellow,
		"comment": pico$1.gray,
		"hash": pico$1.magenta,
		"string": pico$1.green
	};
	function getTokenType([type, value], processor) {
		if (type === "word") {
			if (value[0] === ".") return "class";
			if (value[0] === "#") return "hash";
		}
		if (!processor.endOfFile()) {
			let next = processor.nextToken();
			processor.back(next);
			if (next[0] === "brackets" || next[0] === "(") return "call";
		}
		return type;
	}
	function terminalHighlight$2(css) {
		let processor = tokenizer$2(new Input$8(css), { ignoreErrors: true });
		let result = "";
		while (!processor.endOfFile()) {
			let token$1 = processor.nextToken();
			let color = HIGHLIGHT_THEME[getTokenType(token$1, processor)];
			if (color) result += token$1[1].split(/\r?\n/).map((i$6) => color(i$6)).join("\n");
			else result += token$1[1];
		}
		return result;
	}
	terminalHighlight$2.registerInput = registerInput;
	module.exports = terminalHighlight$2;
} });

//#endregion
//#region node_modules/postcss/lib/css-syntax-error.js
var require_css_syntax_error = __commonJS({ "node_modules/postcss/lib/css-syntax-error.js"(exports, module) {
	let pico = require_picocolors();
	let terminalHighlight$1 = require_terminal_highlight();
	var CssSyntaxError$4 = class CssSyntaxError$4 extends Error {
		constructor(message, line, column, source, file$2, plugin$2) {
			super(message);
			this.name = "CssSyntaxError";
			this.reason = message;
			if (file$2) this.file = file$2;
			if (source) this.source = source;
			if (plugin$2) this.plugin = plugin$2;
			if (typeof line !== "undefined" && typeof column !== "undefined") if (typeof line === "number") {
				this.line = line;
				this.column = column;
			} else {
				this.line = line.line;
				this.column = line.column;
				this.endLine = column.line;
				this.endColumn = column.column;
			}
			this.setMessage();
			if (Error.captureStackTrace) Error.captureStackTrace(this, CssSyntaxError$4);
		}
		setMessage() {
			this.message = this.plugin ? this.plugin + ": " : "";
			this.message += this.file ? this.file : "<css input>";
			if (typeof this.line !== "undefined") this.message += ":" + this.line + ":" + this.column;
			this.message += ": " + this.reason;
		}
		showSourceCode(color) {
			if (!this.source) return "";
			let css = this.source;
			if (color == null) color = pico.isColorSupported;
			let aside = (text) => text;
			let mark$1 = (text) => text;
			let highlight$1 = (text) => text;
			if (color) {
				let { bold, gray, red } = pico.createColors(true);
				mark$1 = (text) => bold(red(text));
				aside = (text) => gray(text);
				if (terminalHighlight$1) highlight$1 = (text) => terminalHighlight$1(text);
			}
			let lines = css.split(/\r?\n/);
			let start = Math.max(this.line - 3, 0);
			let end = Math.min(this.line + 2, lines.length);
			let maxWidth = String(end).length;
			return lines.slice(start, end).map((line, index$1) => {
				let number = start + 1 + index$1;
				let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
				if (number === this.line) {
					if (line.length > 160) {
						let padding = 20;
						let subLineStart = Math.max(0, this.column - padding);
						let subLineEnd = Math.max(this.column + padding, this.endColumn + padding);
						let subLine = line.slice(subLineStart, subLineEnd);
						let spacing$1 = aside(gutter.replace(/\d/g, " ")) + line.slice(0, Math.min(this.column - 1, padding - 1)).replace(/[^\t]/g, " ");
						return mark$1(">") + aside(gutter) + highlight$1(subLine) + "\n " + spacing$1 + mark$1("^");
					}
					let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
					return mark$1(">") + aside(gutter) + highlight$1(line) + "\n " + spacing + mark$1("^");
				}
				return " " + aside(gutter) + highlight$1(line);
			}).join("\n");
		}
		toString() {
			let code$1 = this.showSourceCode();
			if (code$1) code$1 = "\n\n" + code$1 + "\n";
			return this.name + ": " + this.message + code$1;
		}
	};
	module.exports = CssSyntaxError$4;
	CssSyntaxError$4.default = CssSyntaxError$4;
} });

//#endregion
//#region node_modules/postcss/lib/stringifier.js
var require_stringifier = __commonJS({ "node_modules/postcss/lib/stringifier.js"(exports, module) {
	const DEFAULT_RAW = {
		after: "\n",
		beforeClose: "\n",
		beforeComment: "\n",
		beforeDecl: "\n",
		beforeOpen: " ",
		beforeRule: "\n",
		colon: ": ",
		commentLeft: " ",
		commentRight: " ",
		emptyBody: "",
		indent: "    ",
		semicolon: false
	};
	function capitalize$2(str$4) {
		return str$4[0].toUpperCase() + str$4.slice(1);
	}
	var Stringifier$3 = class {
		constructor(builder) {
			this.builder = builder;
		}
		atrule(node, semicolon$3) {
			let name = "@" + node.name;
			let params = node.params ? this.rawValue(node, "params") : "";
			if (typeof node.raws.afterName !== "undefined") name += node.raws.afterName;
			else if (params) name += " ";
			if (node.nodes) this.block(node, name + params);
			else {
				let end = (node.raws.between || "") + (semicolon$3 ? ";" : "");
				this.builder(name + params + end, node);
			}
		}
		beforeAfter(node, detect) {
			let value;
			if (node.type === "decl") value = this.raw(node, null, "beforeDecl");
			else if (node.type === "comment") value = this.raw(node, null, "beforeComment");
			else if (detect === "before") value = this.raw(node, null, "beforeRule");
			else value = this.raw(node, null, "beforeClose");
			let buf = node.parent;
			let depth$1 = 0;
			while (buf && buf.type !== "root") {
				depth$1 += 1;
				buf = buf.parent;
			}
			if (value.includes("\n")) {
				let indent = this.raw(node, null, "indent");
				if (indent.length) for (let step = 0; step < depth$1; step++) value += indent;
			}
			return value;
		}
		block(node, start) {
			let between = this.raw(node, "between", "beforeOpen");
			this.builder(start + between + "{", node, "start");
			let after;
			if (node.nodes && node.nodes.length) {
				this.body(node);
				after = this.raw(node, "after");
			} else after = this.raw(node, "after", "emptyBody");
			if (after) this.builder(after);
			this.builder("}", node, "end");
		}
		body(node) {
			let last$2 = node.nodes.length - 1;
			while (last$2 > 0) {
				if (node.nodes[last$2].type !== "comment") break;
				last$2 -= 1;
			}
			let semicolon$3 = this.raw(node, "semicolon");
			for (let i$6 = 0; i$6 < node.nodes.length; i$6++) {
				let child = node.nodes[i$6];
				let before = this.raw(child, "before");
				if (before) this.builder(before);
				this.stringify(child, last$2 !== i$6 || semicolon$3);
			}
		}
		comment(node) {
			let left = this.raw(node, "left", "commentLeft");
			let right = this.raw(node, "right", "commentRight");
			this.builder("/*" + left + node.text + right + "*/", node);
		}
		decl(node, semicolon$3) {
			let between = this.raw(node, "between", "colon");
			let string$3 = node.prop + between + this.rawValue(node, "value");
			if (node.important) string$3 += node.raws.important || " !important";
			if (semicolon$3) string$3 += ";";
			this.builder(string$3, node);
		}
		document(node) {
			this.body(node);
		}
		raw(node, own, detect) {
			let value;
			if (!detect) detect = own;
			if (own) {
				value = node.raws[own];
				if (typeof value !== "undefined") return value;
			}
			let parent = node.parent;
			if (detect === "before") {
				if (!parent || parent.type === "root" && parent.first === node) return "";
				if (parent && parent.type === "document") return "";
			}
			if (!parent) return DEFAULT_RAW[detect];
			let root$5 = node.root();
			if (!root$5.rawCache) root$5.rawCache = {};
			if (typeof root$5.rawCache[detect] !== "undefined") return root$5.rawCache[detect];
			if (detect === "before" || detect === "after") return this.beforeAfter(node, detect);
			else {
				let method = "raw" + capitalize$2(detect);
				if (this[method]) value = this[method](root$5, node);
				else root$5.walk((i$6) => {
					value = i$6.raws[own];
					if (typeof value !== "undefined") return false;
				});
			}
			if (typeof value === "undefined") value = DEFAULT_RAW[detect];
			root$5.rawCache[detect] = value;
			return value;
		}
		rawBeforeClose(root$5) {
			let value;
			root$5.walk((i$6) => {
				if (i$6.nodes && i$6.nodes.length > 0) {
					if (typeof i$6.raws.after !== "undefined") {
						value = i$6.raws.after;
						if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
						return false;
					}
				}
			});
			if (value) value = value.replace(/\S/g, "");
			return value;
		}
		rawBeforeComment(root$5, node) {
			let value;
			root$5.walkComments((i$6) => {
				if (typeof i$6.raws.before !== "undefined") {
					value = i$6.raws.before;
					if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
					return false;
				}
			});
			if (typeof value === "undefined") value = this.raw(node, null, "beforeDecl");
			else if (value) value = value.replace(/\S/g, "");
			return value;
		}
		rawBeforeDecl(root$5, node) {
			let value;
			root$5.walkDecls((i$6) => {
				if (typeof i$6.raws.before !== "undefined") {
					value = i$6.raws.before;
					if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
					return false;
				}
			});
			if (typeof value === "undefined") value = this.raw(node, null, "beforeRule");
			else if (value) value = value.replace(/\S/g, "");
			return value;
		}
		rawBeforeOpen(root$5) {
			let value;
			root$5.walk((i$6) => {
				if (i$6.type !== "decl") {
					value = i$6.raws.between;
					if (typeof value !== "undefined") return false;
				}
			});
			return value;
		}
		rawBeforeRule(root$5) {
			let value;
			root$5.walk((i$6) => {
				if (i$6.nodes && (i$6.parent !== root$5 || root$5.first !== i$6)) {
					if (typeof i$6.raws.before !== "undefined") {
						value = i$6.raws.before;
						if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
						return false;
					}
				}
			});
			if (value) value = value.replace(/\S/g, "");
			return value;
		}
		rawColon(root$5) {
			let value;
			root$5.walkDecls((i$6) => {
				if (typeof i$6.raws.between !== "undefined") {
					value = i$6.raws.between.replace(/[^\s:]/g, "");
					return false;
				}
			});
			return value;
		}
		rawEmptyBody(root$5) {
			let value;
			root$5.walk((i$6) => {
				if (i$6.nodes && i$6.nodes.length === 0) {
					value = i$6.raws.after;
					if (typeof value !== "undefined") return false;
				}
			});
			return value;
		}
		rawIndent(root$5) {
			if (root$5.raws.indent) return root$5.raws.indent;
			let value;
			root$5.walk((i$6) => {
				let p$2 = i$6.parent;
				if (p$2 && p$2 !== root$5 && p$2.parent && p$2.parent === root$5) {
					if (typeof i$6.raws.before !== "undefined") {
						let parts = i$6.raws.before.split("\n");
						value = parts[parts.length - 1];
						value = value.replace(/\S/g, "");
						return false;
					}
				}
			});
			return value;
		}
		rawSemicolon(root$5) {
			let value;
			root$5.walk((i$6) => {
				if (i$6.nodes && i$6.nodes.length && i$6.last.type === "decl") {
					value = i$6.raws.semicolon;
					if (typeof value !== "undefined") return false;
				}
			});
			return value;
		}
		rawValue(node, prop) {
			let value = node[prop];
			let raw = node.raws[prop];
			if (raw && raw.value === value) return raw.raw;
			return value;
		}
		root(node) {
			this.body(node);
			if (node.raws.after) this.builder(node.raws.after);
		}
		rule(node) {
			this.block(node, this.rawValue(node, "selector"));
			if (node.raws.ownSemicolon) this.builder(node.raws.ownSemicolon, node, "end");
		}
		stringify(node, semicolon$3) {
			/* c8 ignore start */
			if (!this[node.type]) throw new Error("Unknown AST node type " + node.type + ". Maybe you need to change PostCSS stringifier.");
			/* c8 ignore stop */
			this[node.type](node, semicolon$3);
		}
	};
	module.exports = Stringifier$3;
	Stringifier$3.default = Stringifier$3;
} });

//#endregion
//#region node_modules/postcss/lib/stringify.js
var require_stringify$2 = __commonJS({ "node_modules/postcss/lib/stringify.js"(exports, module) {
	let Stringifier$2 = require_stringifier();
	function stringify$12(node, builder) {
		let str$4 = new Stringifier$2(builder);
		str$4.stringify(node);
	}
	module.exports = stringify$12;
	stringify$12.default = stringify$12;
} });

//#endregion
//#region node_modules/postcss/lib/symbols.js
var require_symbols = __commonJS({ "node_modules/postcss/lib/symbols.js"(exports, module) {
	module.exports.isClean = Symbol("isClean");
	module.exports.my = Symbol("my");
} });

//#endregion
//#region node_modules/postcss/lib/node.js
var require_node$8 = __commonJS({ "node_modules/postcss/lib/node.js"(exports, module) {
	let CssSyntaxError$3 = require_css_syntax_error();
	let Stringifier$1 = require_stringifier();
	let stringify$11 = require_stringify$2();
	let { isClean: isClean$2, my: my$2 } = require_symbols();
	function cloneNode$12(obj, parent) {
		let cloned = new obj.constructor();
		for (let i$6 in obj) {
			if (!Object.prototype.hasOwnProperty.call(obj, i$6))
 /* c8 ignore next 2 */
			continue;
			if (i$6 === "proxyCache") continue;
			let value = obj[i$6];
			let type = typeof value;
			if (i$6 === "parent" && type === "object") {
				if (parent) cloned[i$6] = parent;
			} else if (i$6 === "source") cloned[i$6] = value;
			else if (Array.isArray(value)) cloned[i$6] = value.map((j$1) => cloneNode$12(j$1, cloned));
			else {
				if (type === "object" && value !== null) value = cloneNode$12(value);
				cloned[i$6] = value;
			}
		}
		return cloned;
	}
	function sourceOffset(inputCSS, position) {
		if (position && typeof position.offset !== "undefined") return position.offset;
		let column = 1;
		let line = 1;
		let offset = 0;
		for (let i$6 = 0; i$6 < inputCSS.length; i$6++) {
			if (line === position.line && column === position.column) {
				offset = i$6;
				break;
			}
			if (inputCSS[i$6] === "\n") {
				column = 1;
				line += 1;
			} else column += 1;
		}
		return offset;
	}
	var Node$19 = class {
		get proxyOf() {
			return this;
		}
		constructor(defaults$2 = {}) {
			this.raws = {};
			this[isClean$2] = false;
			this[my$2] = true;
			for (let name in defaults$2) if (name === "nodes") {
				this.nodes = [];
				for (let node of defaults$2[name]) if (typeof node.clone === "function") this.append(node.clone());
				else this.append(node);
			} else this[name] = defaults$2[name];
		}
		addToError(error) {
			error.postcssNode = this;
			if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
				let s$3 = this.source;
				error.stack = error.stack.replace(/\n\s{4}at /, `$&${s$3.input.from}:${s$3.start.line}:${s$3.start.column}$&`);
			}
			return error;
		}
		after(add) {
			this.parent.insertAfter(this, add);
			return this;
		}
		assign(overrides = {}) {
			for (let name in overrides) this[name] = overrides[name];
			return this;
		}
		before(add) {
			this.parent.insertBefore(this, add);
			return this;
		}
		cleanRaws(keepBetween) {
			delete this.raws.before;
			delete this.raws.after;
			if (!keepBetween) delete this.raws.between;
		}
		clone(overrides = {}) {
			let cloned = cloneNode$12(this);
			for (let name in overrides) cloned[name] = overrides[name];
			return cloned;
		}
		cloneAfter(overrides = {}) {
			let cloned = this.clone(overrides);
			this.parent.insertAfter(this, cloned);
			return cloned;
		}
		cloneBefore(overrides = {}) {
			let cloned = this.clone(overrides);
			this.parent.insertBefore(this, cloned);
			return cloned;
		}
		error(message, opts = {}) {
			if (this.source) {
				let { end, start } = this.rangeBy(opts);
				return this.source.input.error(message, {
					column: start.column,
					line: start.line
				}, {
					column: end.column,
					line: end.line
				}, opts);
			}
			return new CssSyntaxError$3(message);
		}
		getProxyProcessor() {
			return {
				get(node, prop) {
					if (prop === "proxyOf") return node;
					else if (prop === "root") return () => node.root().toProxy();
					else return node[prop];
				},
				set(node, prop, value) {
					if (node[prop] === value) return true;
					node[prop] = value;
					if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || prop === "text") node.markDirty();
					return true;
				}
			};
		}
		/* c8 ignore next 3 */
		markClean() {
			this[isClean$2] = true;
		}
		markDirty() {
			if (this[isClean$2]) {
				this[isClean$2] = false;
				let next = this;
				while (next = next.parent) next[isClean$2] = false;
			}
		}
		next() {
			if (!this.parent) return void 0;
			let index$1 = this.parent.index(this);
			return this.parent.nodes[index$1 + 1];
		}
		positionBy(opts) {
			let pos = this.source.start;
			if (opts.index) pos = this.positionInside(opts.index);
			else if (opts.word) {
				let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
				let stringRepresentation = inputString.slice(sourceOffset(inputString, this.source.start), sourceOffset(inputString, this.source.end));
				let index$1 = stringRepresentation.indexOf(opts.word);
				if (index$1 !== -1) pos = this.positionInside(index$1);
			}
			return pos;
		}
		positionInside(index$1) {
			let column = this.source.start.column;
			let line = this.source.start.line;
			let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
			let offset = sourceOffset(inputString, this.source.start);
			let end = offset + index$1;
			for (let i$6 = offset; i$6 < end; i$6++) if (inputString[i$6] === "\n") {
				column = 1;
				line += 1;
			} else column += 1;
			return {
				column,
				line
			};
		}
		prev() {
			if (!this.parent) return void 0;
			let index$1 = this.parent.index(this);
			return this.parent.nodes[index$1 - 1];
		}
		rangeBy(opts) {
			let start = {
				column: this.source.start.column,
				line: this.source.start.line
			};
			let end = this.source.end ? {
				column: this.source.end.column + 1,
				line: this.source.end.line
			} : {
				column: start.column + 1,
				line: start.line
			};
			if (opts.word) {
				let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
				let stringRepresentation = inputString.slice(sourceOffset(inputString, this.source.start), sourceOffset(inputString, this.source.end));
				let index$1 = stringRepresentation.indexOf(opts.word);
				if (index$1 !== -1) {
					start = this.positionInside(index$1);
					end = this.positionInside(index$1 + opts.word.length);
				}
			} else {
				if (opts.start) start = {
					column: opts.start.column,
					line: opts.start.line
				};
				else if (opts.index) start = this.positionInside(opts.index);
				if (opts.end) end = {
					column: opts.end.column,
					line: opts.end.line
				};
				else if (typeof opts.endIndex === "number") end = this.positionInside(opts.endIndex);
				else if (opts.index) end = this.positionInside(opts.index + 1);
			}
			if (end.line < start.line || end.line === start.line && end.column <= start.column) end = {
				column: start.column + 1,
				line: start.line
			};
			return {
				end,
				start
			};
		}
		raw(prop, defaultType) {
			let str$4 = new Stringifier$1();
			return str$4.raw(this, prop, defaultType);
		}
		remove() {
			if (this.parent) this.parent.removeChild(this);
			this.parent = void 0;
			return this;
		}
		replaceWith(...nodes$1) {
			if (this.parent) {
				let bookmark = this;
				let foundSelf = false;
				for (let node of nodes$1) if (node === this) foundSelf = true;
				else if (foundSelf) {
					this.parent.insertAfter(bookmark, node);
					bookmark = node;
				} else this.parent.insertBefore(bookmark, node);
				if (!foundSelf) this.remove();
			}
			return this;
		}
		root() {
			let result = this;
			while (result.parent && result.parent.type !== "document") result = result.parent;
			return result;
		}
		toJSON(_, inputs) {
			let fixed = {};
			let emitInputs = inputs == null;
			inputs = inputs || new Map();
			let inputsNextIndex = 0;
			for (let name in this) {
				if (!Object.prototype.hasOwnProperty.call(this, name))
 /* c8 ignore next 2 */
				continue;
				if (name === "parent" || name === "proxyCache") continue;
				let value = this[name];
				if (Array.isArray(value)) fixed[name] = value.map((i$6) => {
					if (typeof i$6 === "object" && i$6.toJSON) return i$6.toJSON(null, inputs);
					else return i$6;
				});
				else if (typeof value === "object" && value.toJSON) fixed[name] = value.toJSON(null, inputs);
				else if (name === "source") {
					let inputId = inputs.get(value.input);
					if (inputId == null) {
						inputId = inputsNextIndex;
						inputs.set(value.input, inputsNextIndex);
						inputsNextIndex++;
					}
					fixed[name] = {
						end: value.end,
						inputId,
						start: value.start
					};
				} else fixed[name] = value;
			}
			if (emitInputs) fixed.inputs = [...inputs.keys()].map((input) => input.toJSON());
			return fixed;
		}
		toProxy() {
			if (!this.proxyCache) this.proxyCache = new Proxy(this, this.getProxyProcessor());
			return this.proxyCache;
		}
		toString(stringifier = stringify$11) {
			if (stringifier.stringify) stringifier = stringifier.stringify;
			let result = "";
			stringifier(this, (i$6) => {
				result += i$6;
			});
			return result;
		}
		warn(result, text, opts) {
			let data$2 = { node: this };
			for (let i$6 in opts) data$2[i$6] = opts[i$6];
			return result.warn(text, data$2);
		}
	};
	module.exports = Node$19;
	Node$19.default = Node$19;
} });

//#endregion
//#region node_modules/postcss/lib/comment.js
var require_comment$3 = __commonJS({ "node_modules/postcss/lib/comment.js"(exports, module) {
	let Node$18 = require_node$8();
	var Comment$12 = class extends Node$18 {
		constructor(defaults$2) {
			super(defaults$2);
			this.type = "comment";
		}
	};
	module.exports = Comment$12;
	Comment$12.default = Comment$12;
} });

//#endregion
//#region node_modules/postcss/lib/declaration.js
var require_declaration = __commonJS({ "node_modules/postcss/lib/declaration.js"(exports, module) {
	let Node$17 = require_node$8();
	var Declaration$5 = class extends Node$17 {
		get variable() {
			return this.prop.startsWith("--") || this.prop[0] === "$";
		}
		constructor(defaults$2) {
			if (defaults$2 && typeof defaults$2.value !== "undefined" && typeof defaults$2.value !== "string") defaults$2 = {
				...defaults$2,
				value: String(defaults$2.value)
			};
			super(defaults$2);
			this.type = "decl";
		}
	};
	module.exports = Declaration$5;
	Declaration$5.default = Declaration$5;
} });

//#endregion
//#region node_modules/postcss/lib/container.js
var require_container$3 = __commonJS({ "node_modules/postcss/lib/container.js"(exports, module) {
	let Comment$11 = require_comment$3();
	let Declaration$4 = require_declaration();
	let Node$16 = require_node$8();
	let { isClean: isClean$1, my: my$1 } = require_symbols();
	let AtRule$6, parse$15, Root$10, Rule$5;
	function cleanSource(nodes$1) {
		return nodes$1.map((i$6) => {
			if (i$6.nodes) i$6.nodes = cleanSource(i$6.nodes);
			delete i$6.source;
			return i$6;
		});
	}
	function markTreeDirty(node) {
		node[isClean$1] = false;
		if (node.proxyOf.nodes) for (let i$6 of node.proxyOf.nodes) markTreeDirty(i$6);
	}
	var Container$15 = class Container$15 extends Node$16 {
		get first() {
			if (!this.proxyOf.nodes) return void 0;
			return this.proxyOf.nodes[0];
		}
		get last() {
			if (!this.proxyOf.nodes) return void 0;
			return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
		}
		append(...children) {
			for (let child of children) {
				let nodes$1 = this.normalize(child, this.last);
				for (let node of nodes$1) this.proxyOf.nodes.push(node);
			}
			this.markDirty();
			return this;
		}
		cleanRaws(keepBetween) {
			super.cleanRaws(keepBetween);
			if (this.nodes) for (let node of this.nodes) node.cleanRaws(keepBetween);
		}
		each(callback) {
			if (!this.proxyOf.nodes) return void 0;
			let iterator = this.getIterator();
			let index$1, result;
			while (this.indexes[iterator] < this.proxyOf.nodes.length) {
				index$1 = this.indexes[iterator];
				result = callback(this.proxyOf.nodes[index$1], index$1);
				if (result === false) break;
				this.indexes[iterator] += 1;
			}
			delete this.indexes[iterator];
			return result;
		}
		every(condition) {
			return this.nodes.every(condition);
		}
		getIterator() {
			if (!this.lastEach) this.lastEach = 0;
			if (!this.indexes) this.indexes = {};
			this.lastEach += 1;
			let iterator = this.lastEach;
			this.indexes[iterator] = 0;
			return iterator;
		}
		getProxyProcessor() {
			return {
				get(node, prop) {
					if (prop === "proxyOf") return node;
					else if (!node[prop]) return node[prop];
					else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) return (...args) => {
						return node[prop](...args.map((i$6) => {
							if (typeof i$6 === "function") return (child, index$1) => i$6(child.toProxy(), index$1);
							else return i$6;
						}));
					};
					else if (prop === "every" || prop === "some") return (cb) => {
						return node[prop]((child, ...other) => cb(child.toProxy(), ...other));
					};
					else if (prop === "root") return () => node.root().toProxy();
					else if (prop === "nodes") return node.nodes.map((i$6) => i$6.toProxy());
					else if (prop === "first" || prop === "last") return node[prop].toProxy();
					else return node[prop];
				},
				set(node, prop, value) {
					if (node[prop] === value) return true;
					node[prop] = value;
					if (prop === "name" || prop === "params" || prop === "selector") node.markDirty();
					return true;
				}
			};
		}
		index(child) {
			if (typeof child === "number") return child;
			if (child.proxyOf) child = child.proxyOf;
			return this.proxyOf.nodes.indexOf(child);
		}
		insertAfter(exist, add) {
			let existIndex = this.index(exist);
			let nodes$1 = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
			existIndex = this.index(exist);
			for (let node of nodes$1) this.proxyOf.nodes.splice(existIndex + 1, 0, node);
			let index$1;
			for (let id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (existIndex < index$1) this.indexes[id$4] = index$1 + nodes$1.length;
			}
			this.markDirty();
			return this;
		}
		insertBefore(exist, add) {
			let existIndex = this.index(exist);
			let type = existIndex === 0 ? "prepend" : false;
			let nodes$1 = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();
			existIndex = this.index(exist);
			for (let node of nodes$1) this.proxyOf.nodes.splice(existIndex, 0, node);
			let index$1;
			for (let id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (existIndex <= index$1) this.indexes[id$4] = index$1 + nodes$1.length;
			}
			this.markDirty();
			return this;
		}
		normalize(nodes$1, sample) {
			if (typeof nodes$1 === "string") nodes$1 = cleanSource(parse$15(nodes$1).nodes);
			else if (typeof nodes$1 === "undefined") nodes$1 = [];
			else if (Array.isArray(nodes$1)) {
				nodes$1 = nodes$1.slice(0);
				for (let i$6 of nodes$1) if (i$6.parent) i$6.parent.removeChild(i$6, "ignore");
			} else if (nodes$1.type === "root" && this.type !== "document") {
				nodes$1 = nodes$1.nodes.slice(0);
				for (let i$6 of nodes$1) if (i$6.parent) i$6.parent.removeChild(i$6, "ignore");
			} else if (nodes$1.type) nodes$1 = [nodes$1];
			else if (nodes$1.prop) {
				if (typeof nodes$1.value === "undefined") throw new Error("Value field is missed in node creation");
				else if (typeof nodes$1.value !== "string") nodes$1.value = String(nodes$1.value);
				nodes$1 = [new Declaration$4(nodes$1)];
			} else if (nodes$1.selector || nodes$1.selectors) nodes$1 = [new Rule$5(nodes$1)];
			else if (nodes$1.name) nodes$1 = [new AtRule$6(nodes$1)];
			else if (nodes$1.text) nodes$1 = [new Comment$11(nodes$1)];
			else throw new Error("Unknown node type in node creation");
			let processed = nodes$1.map((i$6) => {
				/* c8 ignore next */
				if (!i$6[my$1]) Container$15.rebuild(i$6);
				i$6 = i$6.proxyOf;
				if (i$6.parent) i$6.parent.removeChild(i$6);
				if (i$6[isClean$1]) markTreeDirty(i$6);
				if (!i$6.raws) i$6.raws = {};
				if (typeof i$6.raws.before === "undefined") {
					if (sample && typeof sample.raws.before !== "undefined") i$6.raws.before = sample.raws.before.replace(/\S/g, "");
				}
				i$6.parent = this.proxyOf;
				return i$6;
			});
			return processed;
		}
		prepend(...children) {
			children = children.reverse();
			for (let child of children) {
				let nodes$1 = this.normalize(child, this.first, "prepend").reverse();
				for (let node of nodes$1) this.proxyOf.nodes.unshift(node);
				for (let id$4 in this.indexes) this.indexes[id$4] = this.indexes[id$4] + nodes$1.length;
			}
			this.markDirty();
			return this;
		}
		push(child) {
			child.parent = this;
			this.proxyOf.nodes.push(child);
			return this;
		}
		removeAll() {
			for (let node of this.proxyOf.nodes) node.parent = void 0;
			this.proxyOf.nodes = [];
			this.markDirty();
			return this;
		}
		removeChild(child) {
			child = this.index(child);
			this.proxyOf.nodes[child].parent = void 0;
			this.proxyOf.nodes.splice(child, 1);
			let index$1;
			for (let id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= child) this.indexes[id$4] = index$1 - 1;
			}
			this.markDirty();
			return this;
		}
		replaceValues(pattern, opts, callback) {
			if (!callback) {
				callback = opts;
				opts = {};
			}
			this.walkDecls((decl$1) => {
				if (opts.props && !opts.props.includes(decl$1.prop)) return;
				if (opts.fast && !decl$1.value.includes(opts.fast)) return;
				decl$1.value = decl$1.value.replace(pattern, callback);
			});
			this.markDirty();
			return this;
		}
		some(condition) {
			return this.nodes.some(condition);
		}
		walk(callback) {
			return this.each((child, i$6) => {
				let result;
				try {
					result = callback(child, i$6);
				} catch (e$2) {
					throw child.addToError(e$2);
				}
				if (result !== false && child.walk) result = child.walk(callback);
				return result;
			});
		}
		walkAtRules(name, callback) {
			if (!callback) {
				callback = name;
				return this.walk((child, i$6) => {
					if (child.type === "atrule") return callback(child, i$6);
				});
			}
			if (name instanceof RegExp) return this.walk((child, i$6) => {
				if (child.type === "atrule" && name.test(child.name)) return callback(child, i$6);
			});
			return this.walk((child, i$6) => {
				if (child.type === "atrule" && child.name === name) return callback(child, i$6);
			});
		}
		walkComments(callback) {
			return this.walk((child, i$6) => {
				if (child.type === "comment") return callback(child, i$6);
			});
		}
		walkDecls(prop, callback) {
			if (!callback) {
				callback = prop;
				return this.walk((child, i$6) => {
					if (child.type === "decl") return callback(child, i$6);
				});
			}
			if (prop instanceof RegExp) return this.walk((child, i$6) => {
				if (child.type === "decl" && prop.test(child.prop)) return callback(child, i$6);
			});
			return this.walk((child, i$6) => {
				if (child.type === "decl" && child.prop === prop) return callback(child, i$6);
			});
		}
		walkRules(selector$3, callback) {
			if (!callback) {
				callback = selector$3;
				return this.walk((child, i$6) => {
					if (child.type === "rule") return callback(child, i$6);
				});
			}
			if (selector$3 instanceof RegExp) return this.walk((child, i$6) => {
				if (child.type === "rule" && selector$3.test(child.selector)) return callback(child, i$6);
			});
			return this.walk((child, i$6) => {
				if (child.type === "rule" && child.selector === selector$3) return callback(child, i$6);
			});
		}
	};
	Container$15.registerParse = (dependant) => {
		parse$15 = dependant;
	};
	Container$15.registerRule = (dependant) => {
		Rule$5 = dependant;
	};
	Container$15.registerAtRule = (dependant) => {
		AtRule$6 = dependant;
	};
	Container$15.registerRoot = (dependant) => {
		Root$10 = dependant;
	};
	module.exports = Container$15;
	Container$15.default = Container$15;
	/* c8 ignore start */
	Container$15.rebuild = (node) => {
		if (node.type === "atrule") Object.setPrototypeOf(node, AtRule$6.prototype);
		else if (node.type === "rule") Object.setPrototypeOf(node, Rule$5.prototype);
		else if (node.type === "decl") Object.setPrototypeOf(node, Declaration$4.prototype);
		else if (node.type === "comment") Object.setPrototypeOf(node, Comment$11.prototype);
		else if (node.type === "root") Object.setPrototypeOf(node, Root$10.prototype);
		node[my$1] = true;
		if (node.nodes) node.nodes.forEach((child) => {
			Container$15.rebuild(child);
		});
	};
} });
/* c8 ignore stop */

//#endregion
//#region node_modules/postcss/lib/at-rule.js
var require_at_rule = __commonJS({ "node_modules/postcss/lib/at-rule.js"(exports, module) {
	let Container$14 = require_container$3();
	var AtRule$5 = class extends Container$14 {
		constructor(defaults$2) {
			super(defaults$2);
			this.type = "atrule";
		}
		append(...children) {
			if (!this.proxyOf.nodes) this.nodes = [];
			return super.append(...children);
		}
		prepend(...children) {
			if (!this.proxyOf.nodes) this.nodes = [];
			return super.prepend(...children);
		}
	};
	module.exports = AtRule$5;
	AtRule$5.default = AtRule$5;
	Container$14.registerAtRule(AtRule$5);
} });

//#endregion
//#region node_modules/postcss/lib/document.js
var require_document = __commonJS({ "node_modules/postcss/lib/document.js"(exports, module) {
	let Container$13 = require_container$3();
	let LazyResult$4, Processor$7;
	var Document$6 = class extends Container$13 {
		constructor(defaults$2) {
			super({
				type: "document",
				...defaults$2
			});
			if (!this.nodes) this.nodes = [];
		}
		toResult(opts = {}) {
			let lazy = new LazyResult$4(new Processor$7(), this, opts);
			return lazy.stringify();
		}
	};
	Document$6.registerLazyResult = (dependant) => {
		LazyResult$4 = dependant;
	};
	Document$6.registerProcessor = (dependant) => {
		Processor$7 = dependant;
	};
	module.exports = Document$6;
	Document$6.default = Document$6;
} });

//#endregion
//#region node_modules/nanoid/non-secure/index.cjs
var require_non_secure = __commonJS({ "node_modules/nanoid/non-secure/index.cjs"(exports, module) {
	let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
	let customAlphabet = (alphabet, defaultSize = 21) => {
		return (size = defaultSize) => {
			let id$4 = "";
			let i$6 = size | 0;
			while (i$6--) id$4 += alphabet[Math.random() * alphabet.length | 0];
			return id$4;
		};
	};
	let nanoid$1 = (size = 21) => {
		let id$4 = "";
		let i$6 = size | 0;
		while (i$6--) id$4 += urlAlphabet[Math.random() * 64 | 0];
		return id$4;
	};
	module.exports = {
		nanoid: nanoid$1,
		customAlphabet
	};
} });

//#endregion
//#region node_modules/source-map-js/lib/base64.js
var require_base64$1 = __commonJS({ "node_modules/source-map-js/lib/base64.js"(exports) {
	var intToCharMap$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
	/**
	* Encode an integer in the range of 0 to 63 to a single base 64 digit.
	*/
	exports.encode = function(number) {
		if (0 <= number && number < intToCharMap$1.length) return intToCharMap$1[number];
		throw new TypeError("Must be between 0 and 63: " + number);
	};
	/**
	* Decode a single base 64 character code digit to an integer. Returns -1 on
	* failure.
	*/
	exports.decode = function(charCode) {
		var bigA = 65;
		var bigZ = 90;
		var littleA = 97;
		var littleZ = 122;
		var zero = 48;
		var nine = 57;
		var plus$5 = 43;
		var slash$4 = 47;
		var littleOffset = 26;
		var numberOffset = 52;
		if (bigA <= charCode && charCode <= bigZ) return charCode - bigA;
		if (littleA <= charCode && charCode <= littleZ) return charCode - littleA + littleOffset;
		if (zero <= charCode && charCode <= nine) return charCode - zero + numberOffset;
		if (charCode == plus$5) return 62;
		if (charCode == slash$4) return 63;
		return -1;
	};
} });

//#endregion
//#region node_modules/source-map-js/lib/base64-vlq.js
var require_base64_vlq$1 = __commonJS({ "node_modules/source-map-js/lib/base64-vlq.js"(exports) {
	var base64$1 = require_base64$1();
	var VLQ_BASE_SHIFT$1 = 5;
	var VLQ_BASE$1 = 1 << VLQ_BASE_SHIFT$1;
	var VLQ_BASE_MASK$1 = VLQ_BASE$1 - 1;
	var VLQ_CONTINUATION_BIT$1 = VLQ_BASE$1;
	/**
	* Converts from a two-complement value to a value where the sign bit is
	* placed in the least significant bit.  For example, as decimals:
	*   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	*   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	*/
	function toVLQSigned$1(aValue) {
		return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
	}
	/**
	* Converts to a two-complement value from a value where the sign bit is
	* placed in the least significant bit.  For example, as decimals:
	*   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	*   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	*/
	function fromVLQSigned$1(aValue) {
		var isNegative = (aValue & 1) === 1;
		var shifted = aValue >> 1;
		return isNegative ? -shifted : shifted;
	}
	/**
	* Returns the base 64 VLQ encoded value.
	*/
	exports.encode = function base64VLQ_encode(aValue) {
		var encoded = "";
		var digit;
		var vlq = toVLQSigned$1(aValue);
		do {
			digit = vlq & VLQ_BASE_MASK$1;
			vlq >>>= VLQ_BASE_SHIFT$1;
			if (vlq > 0) digit |= VLQ_CONTINUATION_BIT$1;
			encoded += base64$1.encode(digit);
		} while (vlq > 0);
		return encoded;
	};
	/**
	* Decodes the next base 64 VLQ value from the given string and returns the
	* value and the rest of the string via the out parameter.
	*/
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
		var strLen = aStr.length;
		var result = 0;
		var shift = 0;
		var continuation, digit;
		do {
			if (aIndex >= strLen) throw new Error("Expected more digits in base 64 VLQ value.");
			digit = base64$1.decode(aStr.charCodeAt(aIndex++));
			if (digit === -1) throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
			continuation = !!(digit & VLQ_CONTINUATION_BIT$1);
			digit &= VLQ_BASE_MASK$1;
			result = result + (digit << shift);
			shift += VLQ_BASE_SHIFT$1;
		} while (continuation);
		aOutParam.value = fromVLQSigned$1(result);
		aOutParam.rest = aIndex;
	};
} });

//#endregion
//#region node_modules/source-map-js/lib/util.js
var require_util$6 = __commonJS({ "node_modules/source-map-js/lib/util.js"(exports) {
	/**
	* This is a helper function for getting values from parameter/options
	* objects.
	*
	* @param args The object we are extracting values from
	* @param name The name of the property we are getting.
	* @param defaultValue An optional value to return if the property is missing
	* from the object. If this is not specified and the property is missing, an
	* error will be thrown.
	*/
	function getArg$1(aArgs, aName, aDefaultValue) {
		if (aName in aArgs) return aArgs[aName];
		else if (arguments.length === 3) return aDefaultValue;
		else throw new Error("\"" + aName + "\" is a required argument.");
	}
	exports.getArg = getArg$1;
	var urlRegexp$1 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp$1 = /^data:.+\,.+$/;
	function urlParse$1(aUrl) {
		var match = aUrl.match(urlRegexp$1);
		if (!match) return null;
		return {
			scheme: match[1],
			auth: match[2],
			host: match[3],
			port: match[4],
			path: match[5]
		};
	}
	exports.urlParse = urlParse$1;
	function urlGenerate$1(aParsedUrl) {
		var url$1 = "";
		if (aParsedUrl.scheme) url$1 += aParsedUrl.scheme + ":";
		url$1 += "//";
		if (aParsedUrl.auth) url$1 += aParsedUrl.auth + "@";
		if (aParsedUrl.host) url$1 += aParsedUrl.host;
		if (aParsedUrl.port) url$1 += ":" + aParsedUrl.port;
		if (aParsedUrl.path) url$1 += aParsedUrl.path;
		return url$1;
	}
	exports.urlGenerate = urlGenerate$1;
	var MAX_CACHED_INPUTS = 32;
	/**
	* Takes some function `f(input) -> result` and returns a memoized version of
	* `f`.
	*
	* We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
	* memoization is a dumb-simple, linear least-recently-used cache.
	*/
	function lruMemoize(f$1) {
		var cache$3 = [];
		return function(input) {
			for (var i$6 = 0; i$6 < cache$3.length; i$6++) if (cache$3[i$6].input === input) {
				var temp = cache$3[0];
				cache$3[0] = cache$3[i$6];
				cache$3[i$6] = temp;
				return cache$3[0].result;
			}
			var result = f$1(input);
			cache$3.unshift({
				input,
				result
			});
			if (cache$3.length > MAX_CACHED_INPUTS) cache$3.pop();
			return result;
		};
	}
	/**
	* Normalizes a path, or the path portion of a URL:
	*
	* - Replaces consecutive slashes with one slash.
	* - Removes unnecessary '.' parts.
	* - Removes unnecessary '<dir>/..' parts.
	*
	* Based on code in the Node.js 'path' core module.
	*
	* @param aPath The path or url to normalize.
	*/
	var normalize$2 = lruMemoize(function normalize$3(aPath) {
		var path$28 = aPath;
		var url$1 = urlParse$1(aPath);
		if (url$1) {
			if (!url$1.path) return aPath;
			path$28 = url$1.path;
		}
		var isAbsolute$6 = exports.isAbsolute(path$28);
		var parts = [];
		var start = 0;
		var i$6 = 0;
		while (true) {
			start = i$6;
			i$6 = path$28.indexOf("/", start);
			if (i$6 === -1) {
				parts.push(path$28.slice(start));
				break;
			} else {
				parts.push(path$28.slice(start, i$6));
				while (i$6 < path$28.length && path$28[i$6] === "/") i$6++;
			}
		}
		for (var part, up = 0, i$6 = parts.length - 1; i$6 >= 0; i$6--) {
			part = parts[i$6];
			if (part === ".") parts.splice(i$6, 1);
			else if (part === "..") up++;
			else if (up > 0) if (part === "") {
				parts.splice(i$6 + 1, up);
				up = 0;
			} else {
				parts.splice(i$6, 2);
				up--;
			}
		}
		path$28 = parts.join("/");
		if (path$28 === "") path$28 = isAbsolute$6 ? "/" : ".";
		if (url$1) {
			url$1.path = path$28;
			return urlGenerate$1(url$1);
		}
		return path$28;
	});
	exports.normalize = normalize$2;
	/**
	* Joins two paths/URLs.
	*
	* @param aRoot The root path or URL.
	* @param aPath The path or URL to be joined with the root.
	*
	* - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	*   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	*   first.
	* - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	*   is updated with the result and aRoot is returned. Otherwise the result
	*   is returned.
	*   - If aPath is absolute, the result is aPath.
	*   - Otherwise the two paths are joined with a slash.
	* - Joining for example 'http://' and 'www.example.com' is also supported.
	*/
	function join$3(aRoot, aPath) {
		if (aRoot === "") aRoot = ".";
		if (aPath === "") aPath = ".";
		var aPathUrl = urlParse$1(aPath);
		var aRootUrl = urlParse$1(aRoot);
		if (aRootUrl) aRoot = aRootUrl.path || "/";
		if (aPathUrl && !aPathUrl.scheme) {
			if (aRootUrl) aPathUrl.scheme = aRootUrl.scheme;
			return urlGenerate$1(aPathUrl);
		}
		if (aPathUrl || aPath.match(dataUrlRegexp$1)) return aPath;
		if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
			aRootUrl.host = aPath;
			return urlGenerate$1(aRootUrl);
		}
		var joined = aPath.charAt(0) === "/" ? aPath : normalize$2(aRoot.replace(/\/+$/, "") + "/" + aPath);
		if (aRootUrl) {
			aRootUrl.path = joined;
			return urlGenerate$1(aRootUrl);
		}
		return joined;
	}
	exports.join = join$3;
	exports.isAbsolute = function(aPath) {
		return aPath.charAt(0) === "/" || urlRegexp$1.test(aPath);
	};
	/**
	* Make a path relative to a URL or another path.
	*
	* @param aRoot The root path or URL.
	* @param aPath The path or URL to be made relative to aRoot.
	*/
	function relative$2(aRoot, aPath) {
		if (aRoot === "") aRoot = ".";
		aRoot = aRoot.replace(/\/$/, "");
		var level$1 = 0;
		while (aPath.indexOf(aRoot + "/") !== 0) {
			var index$1 = aRoot.lastIndexOf("/");
			if (index$1 < 0) return aPath;
			aRoot = aRoot.slice(0, index$1);
			if (aRoot.match(/^([^\/]+:\/)?\/*$/)) return aPath;
			++level$1;
		}
		return Array(level$1 + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative$2;
	var supportsNullProto$1 = function() {
		var obj = Object.create(null);
		return !("__proto__" in obj);
	}();
	function identity$1(s$3) {
		return s$3;
	}
	/**
	* Because behavior goes wacky when you set `__proto__` on objects, we
	* have to prefix all the strings in our set with an arbitrary character.
	*
	* See https://github.com/mozilla/source-map/pull/31 and
	* https://github.com/mozilla/source-map/issues/30
	*
	* @param String aStr
	*/
	function toSetString$1(aStr) {
		if (isProtoString$1(aStr)) return "$" + aStr;
		return aStr;
	}
	exports.toSetString = supportsNullProto$1 ? identity$1 : toSetString$1;
	function fromSetString$1(aStr) {
		if (isProtoString$1(aStr)) return aStr.slice(1);
		return aStr;
	}
	exports.fromSetString = supportsNullProto$1 ? identity$1 : fromSetString$1;
	function isProtoString$1(s$3) {
		if (!s$3) return false;
		var length = s$3.length;
		if (length < 9) return false;
		if (s$3.charCodeAt(length - 1) !== 95 || s$3.charCodeAt(length - 2) !== 95 || s$3.charCodeAt(length - 3) !== 111 || s$3.charCodeAt(length - 4) !== 116 || s$3.charCodeAt(length - 5) !== 111 || s$3.charCodeAt(length - 6) !== 114 || s$3.charCodeAt(length - 7) !== 112 || s$3.charCodeAt(length - 8) !== 95 || s$3.charCodeAt(length - 9) !== 95) return false;
		for (var i$6 = length - 10; i$6 >= 0; i$6--) if (s$3.charCodeAt(i$6) !== 36) return false;
		return true;
	}
	/**
	* Comparator between two mappings where the original positions are compared.
	*
	* Optionally pass in `true` as `onlyCompareGenerated` to consider two
	* mappings with the same original source/line/column, but different generated
	* line and column the same. Useful when searching for a mapping with a
	* stubbed out mapping.
	*/
	function compareByOriginalPositions$1(mappingA, mappingB, onlyCompareOriginal) {
		var cmp = strcmp$1(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0 || onlyCompareOriginal) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		return strcmp$1(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions$1;
	function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
		var cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0 || onlyCompareOriginal) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		return strcmp$1(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;
	/**
	* Comparator between two mappings with deflated source and name indices where
	* the generated positions are compared.
	*
	* Optionally pass in `true` as `onlyCompareGenerated` to consider two
	* mappings with the same generated line and column, but different
	* source/name/original line and column the same. Useful when searching for a
	* mapping with a stubbed out mapping.
	*/
	function compareByGeneratedPositionsDeflated$1(mappingA, mappingB, onlyCompareGenerated) {
		var cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0 || onlyCompareGenerated) return cmp;
		cmp = strcmp$1(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0) return cmp;
		return strcmp$1(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated$1;
	function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
		var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0 || onlyCompareGenerated) return cmp;
		cmp = strcmp$1(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0) return cmp;
		return strcmp$1(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;
	function strcmp$1(aStr1, aStr2) {
		if (aStr1 === aStr2) return 0;
		if (aStr1 === null) return 1;
		if (aStr2 === null) return -1;
		if (aStr1 > aStr2) return 1;
		return -1;
	}
	/**
	* Comparator between two mappings with inflated source and name strings where
	* the generated positions are compared.
	*/
	function compareByGeneratedPositionsInflated$1(mappingA, mappingB) {
		var cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0) return cmp;
		cmp = strcmp$1(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0) return cmp;
		return strcmp$1(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated$1;
	/**
	* Strip any JSON XSSI avoidance prefix from the string (as documented
	* in the source maps specification), and then parse the string as
	* JSON.
	*/
	function parseSourceMapInput$1(str$4) {
		return JSON.parse(str$4.replace(/^\)]}'[^\n]*\n/, ""));
	}
	exports.parseSourceMapInput = parseSourceMapInput$1;
	/**
	* Compute the URL of a source given the the source root, the source's
	* URL, and the source map's URL.
	*/
	function computeSourceURL$1(sourceRoot, sourceURL, sourceMapURL) {
		sourceURL = sourceURL || "";
		if (sourceRoot) {
			if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") sourceRoot += "/";
			sourceURL = sourceRoot + sourceURL;
		}
		if (sourceMapURL) {
			var parsed = urlParse$1(sourceMapURL);
			if (!parsed) throw new Error("sourceMapURL could not be parsed");
			if (parsed.path) {
				var index$1 = parsed.path.lastIndexOf("/");
				if (index$1 >= 0) parsed.path = parsed.path.substring(0, index$1 + 1);
			}
			sourceURL = join$3(urlGenerate$1(parsed), sourceURL);
		}
		return normalize$2(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL$1;
} });

//#endregion
//#region node_modules/source-map-js/lib/array-set.js
var require_array_set$1 = __commonJS({ "node_modules/source-map-js/lib/array-set.js"(exports) {
	var util$16 = require_util$6();
	var has$2 = Object.prototype.hasOwnProperty;
	var hasNativeMap$1 = typeof Map !== "undefined";
	/**
	* A data structure which is a combination of an array and a set. Adding a new
	* member is O(1), testing for membership is O(1), and finding the index of an
	* element is O(1). Removing elements from the set is not supported. Only
	* strings are supported for membership.
	*/
	function ArraySet$5() {
		this._array = [];
		this._set = hasNativeMap$1 ? new Map() : Object.create(null);
	}
	/**
	* Static method for creating ArraySet instances from an existing array.
	*/
	ArraySet$5.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
		var set = new ArraySet$5();
		for (var i$6 = 0, len = aArray.length; i$6 < len; i$6++) set.add(aArray[i$6], aAllowDuplicates);
		return set;
	};
	/**
	* Return how many unique items are in this ArraySet. If duplicates have been
	* added, than those do not count towards the size.
	*
	* @returns Number
	*/
	ArraySet$5.prototype.size = function ArraySet_size() {
		return hasNativeMap$1 ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};
	/**
	* Add the given string to this set.
	*
	* @param String aStr
	*/
	ArraySet$5.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
		var sStr = hasNativeMap$1 ? aStr : util$16.toSetString(aStr);
		var isDuplicate = hasNativeMap$1 ? this.has(aStr) : has$2.call(this._set, sStr);
		var idx = this._array.length;
		if (!isDuplicate || aAllowDuplicates) this._array.push(aStr);
		if (!isDuplicate) if (hasNativeMap$1) this._set.set(aStr, idx);
		else this._set[sStr] = idx;
	};
	/**
	* Is the given string a member of this set?
	*
	* @param String aStr
	*/
	ArraySet$5.prototype.has = function ArraySet_has(aStr) {
		if (hasNativeMap$1) return this._set.has(aStr);
		else {
			var sStr = util$16.toSetString(aStr);
			return has$2.call(this._set, sStr);
		}
	};
	/**
	* What is the index of the given string in the array?
	*
	* @param String aStr
	*/
	ArraySet$5.prototype.indexOf = function ArraySet_indexOf(aStr) {
		if (hasNativeMap$1) {
			var idx = this._set.get(aStr);
			if (idx >= 0) return idx;
		} else {
			var sStr = util$16.toSetString(aStr);
			if (has$2.call(this._set, sStr)) return this._set[sStr];
		}
		throw new Error("\"" + aStr + "\" is not in the set.");
	};
	/**
	* What is the element at the given index?
	*
	* @param Number aIdx
	*/
	ArraySet$5.prototype.at = function ArraySet_at(aIdx) {
		if (aIdx >= 0 && aIdx < this._array.length) return this._array[aIdx];
		throw new Error("No element indexed by " + aIdx);
	};
	/**
	* Returns the array representation of this set (which has the proper indices
	* indicated by indexOf). Note that this is a copy of the internal array used
	* for storing the members so that no one can mess with internal state.
	*/
	ArraySet$5.prototype.toArray = function ArraySet_toArray() {
		return this._array.slice();
	};
	exports.ArraySet = ArraySet$5;
} });

//#endregion
//#region node_modules/source-map-js/lib/mapping-list.js
var require_mapping_list$1 = __commonJS({ "node_modules/source-map-js/lib/mapping-list.js"(exports) {
	var util$15 = require_util$6();
	/**
	* Determine whether mappingB is after mappingA with respect to generated
	* position.
	*/
	function generatedPositionAfter$1(mappingA, mappingB) {
		var lineA = mappingA.generatedLine;
		var lineB = mappingB.generatedLine;
		var columnA = mappingA.generatedColumn;
		var columnB = mappingB.generatedColumn;
		return lineB > lineA || lineB == lineA && columnB >= columnA || util$15.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	/**
	* A data structure to provide a sorted view of accumulated mappings in a
	* performance conscious manner. It trades a neglibable overhead in general
	* case for a large speedup in case of mappings being added in order.
	*/
	function MappingList$3() {
		this._array = [];
		this._sorted = true;
		this._last = {
			generatedLine: -1,
			generatedColumn: 0
		};
	}
	/**
	* Iterate through internal items. This method takes the same arguments that
	* `Array.prototype.forEach` takes.
	*
	* NOTE: The order of the mappings is NOT guaranteed.
	*/
	MappingList$3.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
		this._array.forEach(aCallback, aThisArg);
	};
	/**
	* Add the given source mapping.
	*
	* @param Object aMapping
	*/
	MappingList$3.prototype.add = function MappingList_add(aMapping) {
		if (generatedPositionAfter$1(this._last, aMapping)) {
			this._last = aMapping;
			this._array.push(aMapping);
		} else {
			this._sorted = false;
			this._array.push(aMapping);
		}
	};
	/**
	* Returns the flat, sorted array of mappings. The mappings are sorted by
	* generated position.
	*
	* WARNING: This method returns internal data without copying, for
	* performance. The return value must NOT be mutated, and should be treated as
	* an immutable borrow. If you want to take ownership, you must make your own
	* copy.
	*/
	MappingList$3.prototype.toArray = function MappingList_toArray() {
		if (!this._sorted) {
			this._array.sort(util$15.compareByGeneratedPositionsInflated);
			this._sorted = true;
		}
		return this._array;
	};
	exports.MappingList = MappingList$3;
} });

//#endregion
//#region node_modules/source-map-js/lib/source-map-generator.js
var require_source_map_generator$1 = __commonJS({ "node_modules/source-map-js/lib/source-map-generator.js"(exports) {
	var base64VLQ$3 = require_base64_vlq$1();
	var util$14 = require_util$6();
	var ArraySet$4 = require_array_set$1().ArraySet;
	var MappingList$2 = require_mapping_list$1().MappingList;
	/**
	* An instance of the SourceMapGenerator represents a source map which is
	* being built incrementally. You may pass an object with the following
	* properties:
	*
	*   - file: The filename of the generated source.
	*   - sourceRoot: A root for all relative URLs in this source map.
	*/
	function SourceMapGenerator$7(aArgs) {
		if (!aArgs) aArgs = {};
		this._file = util$14.getArg(aArgs, "file", null);
		this._sourceRoot = util$14.getArg(aArgs, "sourceRoot", null);
		this._skipValidation = util$14.getArg(aArgs, "skipValidation", false);
		this._ignoreInvalidMapping = util$14.getArg(aArgs, "ignoreInvalidMapping", false);
		this._sources = new ArraySet$4();
		this._names = new ArraySet$4();
		this._mappings = new MappingList$2();
		this._sourcesContents = null;
	}
	SourceMapGenerator$7.prototype._version = 3;
	/**
	* Creates a new SourceMapGenerator based on a SourceMapConsumer
	*
	* @param aSourceMapConsumer The SourceMap.
	*/
	SourceMapGenerator$7.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {
		var sourceRoot = aSourceMapConsumer.sourceRoot;
		var generator$1 = new SourceMapGenerator$7(Object.assign(generatorOps || {}, {
			file: aSourceMapConsumer.file,
			sourceRoot
		}));
		aSourceMapConsumer.eachMapping(function(mapping) {
			var newMapping = { generated: {
				line: mapping.generatedLine,
				column: mapping.generatedColumn
			} };
			if (mapping.source != null) {
				newMapping.source = mapping.source;
				if (sourceRoot != null) newMapping.source = util$14.relative(sourceRoot, newMapping.source);
				newMapping.original = {
					line: mapping.originalLine,
					column: mapping.originalColumn
				};
				if (mapping.name != null) newMapping.name = mapping.name;
			}
			generator$1.addMapping(newMapping);
		});
		aSourceMapConsumer.sources.forEach(function(sourceFile) {
			var sourceRelative = sourceFile;
			if (sourceRoot !== null) sourceRelative = util$14.relative(sourceRoot, sourceFile);
			if (!generator$1._sources.has(sourceRelative)) generator$1._sources.add(sourceRelative);
			var content = aSourceMapConsumer.sourceContentFor(sourceFile);
			if (content != null) generator$1.setSourceContent(sourceFile, content);
		});
		return generator$1;
	};
	/**
	* Add a single mapping from original source line and column to the generated
	* source's line and column for this source map being created. The mapping
	* object should have the following properties:
	*
	*   - generated: An object with the generated line and column positions.
	*   - original: An object with the original line and column positions.
	*   - source: The original source file (relative to the sourceRoot).
	*   - name: An optional original token name for this mapping.
	*/
	SourceMapGenerator$7.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
		var generated = util$14.getArg(aArgs, "generated");
		var original = util$14.getArg(aArgs, "original", null);
		var source = util$14.getArg(aArgs, "source", null);
		var name = util$14.getArg(aArgs, "name", null);
		if (!this._skipValidation) {
			if (this._validateMapping(generated, original, source, name) === false) return;
		}
		if (source != null) {
			source = String(source);
			if (!this._sources.has(source)) this._sources.add(source);
		}
		if (name != null) {
			name = String(name);
			if (!this._names.has(name)) this._names.add(name);
		}
		this._mappings.add({
			generatedLine: generated.line,
			generatedColumn: generated.column,
			originalLine: original != null && original.line,
			originalColumn: original != null && original.column,
			source,
			name
		});
	};
	/**
	* Set the source content for a source file.
	*/
	SourceMapGenerator$7.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
		var source = aSourceFile;
		if (this._sourceRoot != null) source = util$14.relative(this._sourceRoot, source);
		if (aSourceContent != null) {
			if (!this._sourcesContents) this._sourcesContents = Object.create(null);
			this._sourcesContents[util$14.toSetString(source)] = aSourceContent;
		} else if (this._sourcesContents) {
			delete this._sourcesContents[util$14.toSetString(source)];
			if (Object.keys(this._sourcesContents).length === 0) this._sourcesContents = null;
		}
	};
	/**
	* Applies the mappings of a sub-source-map for a specific source file to the
	* source map being generated. Each mapping to the supplied source file is
	* rewritten using the supplied source map. Note: The resolution for the
	* resulting mappings is the minimium of this map and the supplied map.
	*
	* @param aSourceMapConsumer The source map to be applied.
	* @param aSourceFile Optional. The filename of the source file.
	*        If omitted, SourceMapConsumer's file property will be used.
	* @param aSourceMapPath Optional. The dirname of the path to the source map
	*        to be applied. If relative, it is relative to the SourceMapConsumer.
	*        This parameter is needed when the two source maps aren't in the same
	*        directory, and the source map to be applied contains relative source
	*        paths. If so, those relative source paths need to be rewritten
	*        relative to the SourceMapGenerator.
	*/
	SourceMapGenerator$7.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
		var sourceFile = aSourceFile;
		if (aSourceFile == null) {
			if (aSourceMapConsumer.file == null) throw new Error("SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.");
			sourceFile = aSourceMapConsumer.file;
		}
		var sourceRoot = this._sourceRoot;
		if (sourceRoot != null) sourceFile = util$14.relative(sourceRoot, sourceFile);
		var newSources = new ArraySet$4();
		var newNames = new ArraySet$4();
		this._mappings.unsortedForEach(function(mapping) {
			if (mapping.source === sourceFile && mapping.originalLine != null) {
				var original = aSourceMapConsumer.originalPositionFor({
					line: mapping.originalLine,
					column: mapping.originalColumn
				});
				if (original.source != null) {
					mapping.source = original.source;
					if (aSourceMapPath != null) mapping.source = util$14.join(aSourceMapPath, mapping.source);
					if (sourceRoot != null) mapping.source = util$14.relative(sourceRoot, mapping.source);
					mapping.originalLine = original.line;
					mapping.originalColumn = original.column;
					if (original.name != null) mapping.name = original.name;
				}
			}
			var source = mapping.source;
			if (source != null && !newSources.has(source)) newSources.add(source);
			var name = mapping.name;
			if (name != null && !newNames.has(name)) newNames.add(name);
		}, this);
		this._sources = newSources;
		this._names = newNames;
		aSourceMapConsumer.sources.forEach(function(sourceFile$1) {
			var content = aSourceMapConsumer.sourceContentFor(sourceFile$1);
			if (content != null) {
				if (aSourceMapPath != null) sourceFile$1 = util$14.join(aSourceMapPath, sourceFile$1);
				if (sourceRoot != null) sourceFile$1 = util$14.relative(sourceRoot, sourceFile$1);
				this.setSourceContent(sourceFile$1, content);
			}
		}, this);
	};
	/**
	* A mapping can have one of the three levels of data:
	*
	*   1. Just the generated position.
	*   2. The Generated position, original position, and original source.
	*   3. Generated and original position, original source, as well as a name
	*      token.
	*
	* To maintain consistency, we validate that any new mapping being added falls
	* in to one of these categories.
	*/
	SourceMapGenerator$7.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
		if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
			var message = "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.";
			if (this._ignoreInvalidMapping) {
				if (typeof console !== "undefined" && console.warn) console.warn(message);
				return false;
			} else throw new Error(message);
		}
		if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) return;
		else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) return;
		else {
			var message = "Invalid mapping: " + JSON.stringify({
				generated: aGenerated,
				source: aSource,
				original: aOriginal,
				name: aName
			});
			if (this._ignoreInvalidMapping) {
				if (typeof console !== "undefined" && console.warn) console.warn(message);
				return false;
			} else throw new Error(message);
		}
	};
	/**
	* Serialize the accumulated mappings in to the stream of base 64 VLQs
	* specified by the source map format.
	*/
	SourceMapGenerator$7.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
		var previousGeneratedColumn = 0;
		var previousGeneratedLine = 1;
		var previousOriginalColumn = 0;
		var previousOriginalLine = 0;
		var previousName = 0;
		var previousSource = 0;
		var result = "";
		var next;
		var mapping;
		var nameIdx;
		var sourceIdx;
		var mappings$1 = this._mappings.toArray();
		for (var i$6 = 0, len = mappings$1.length; i$6 < len; i$6++) {
			mapping = mappings$1[i$6];
			next = "";
			if (mapping.generatedLine !== previousGeneratedLine) {
				previousGeneratedColumn = 0;
				while (mapping.generatedLine !== previousGeneratedLine) {
					next += ";";
					previousGeneratedLine++;
				}
			} else if (i$6 > 0) {
				if (!util$14.compareByGeneratedPositionsInflated(mapping, mappings$1[i$6 - 1])) continue;
				next += ",";
			}
			next += base64VLQ$3.encode(mapping.generatedColumn - previousGeneratedColumn);
			previousGeneratedColumn = mapping.generatedColumn;
			if (mapping.source != null) {
				sourceIdx = this._sources.indexOf(mapping.source);
				next += base64VLQ$3.encode(sourceIdx - previousSource);
				previousSource = sourceIdx;
				next += base64VLQ$3.encode(mapping.originalLine - 1 - previousOriginalLine);
				previousOriginalLine = mapping.originalLine - 1;
				next += base64VLQ$3.encode(mapping.originalColumn - previousOriginalColumn);
				previousOriginalColumn = mapping.originalColumn;
				if (mapping.name != null) {
					nameIdx = this._names.indexOf(mapping.name);
					next += base64VLQ$3.encode(nameIdx - previousName);
					previousName = nameIdx;
				}
			}
			result += next;
		}
		return result;
	};
	SourceMapGenerator$7.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
		return aSources.map(function(source) {
			if (!this._sourcesContents) return null;
			if (aSourceRoot != null) source = util$14.relative(aSourceRoot, source);
			var key = util$14.toSetString(source);
			return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
		}, this);
	};
	/**
	* Externalize the source map.
	*/
	SourceMapGenerator$7.prototype.toJSON = function SourceMapGenerator_toJSON() {
		var map = {
			version: this._version,
			sources: this._sources.toArray(),
			names: this._names.toArray(),
			mappings: this._serializeMappings()
		};
		if (this._file != null) map.file = this._file;
		if (this._sourceRoot != null) map.sourceRoot = this._sourceRoot;
		if (this._sourcesContents) map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
		return map;
	};
	/**
	* Render the source map being generated to a string.
	*/
	SourceMapGenerator$7.prototype.toString = function SourceMapGenerator_toString() {
		return JSON.stringify(this.toJSON());
	};
	exports.SourceMapGenerator = SourceMapGenerator$7;
} });

//#endregion
//#region node_modules/source-map-js/lib/binary-search.js
var require_binary_search$1 = __commonJS({ "node_modules/source-map-js/lib/binary-search.js"(exports) {
	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;
	/**
	* Recursive implementation of binary search.
	*
	* @param aLow Indices here and lower do not contain the needle.
	* @param aHigh Indices here and higher do not contain the needle.
	* @param aNeedle The element being searched for.
	* @param aHaystack The non-empty array being searched.
	* @param aCompare Function which takes two elements and returns -1, 0, or 1.
	* @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	*     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*/
	function recursiveSearch$1(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
		var mid = Math.floor((aHigh - aLow) / 2) + aLow;
		var cmp = aCompare(aNeedle, aHaystack[mid], true);
		if (cmp === 0) return mid;
		else if (cmp > 0) {
			if (aHigh - mid > 1) return recursiveSearch$1(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
			if (aBias == exports.LEAST_UPPER_BOUND) return aHigh < aHaystack.length ? aHigh : -1;
			else return mid;
		} else {
			if (mid - aLow > 1) return recursiveSearch$1(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
			if (aBias == exports.LEAST_UPPER_BOUND) return mid;
			else return aLow < 0 ? -1 : aLow;
		}
	}
	/**
	* This is an implementation of binary search which will always try and return
	* the index of the closest element if there is no exact hit. This is because
	* mappings between original and generated line/col pairs are single points,
	* and there is an implicit region between each of them, so a miss just means
	* that you aren't on the very start of a region.
	*
	* @param aNeedle The element you are looking for.
	* @param aHaystack The array that is being searched.
	* @param aCompare A function which takes the needle and an element in the
	*     array and returns -1, 0, or 1 depending on whether the needle is less
	*     than, equal to, or greater than the element, respectively.
	* @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	*     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	*/
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
		if (aHaystack.length === 0) return -1;
		var index$1 = recursiveSearch$1(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
		if (index$1 < 0) return -1;
		while (index$1 - 1 >= 0) {
			if (aCompare(aHaystack[index$1], aHaystack[index$1 - 1], true) !== 0) break;
			--index$1;
		}
		return index$1;
	};
} });

//#endregion
//#region node_modules/source-map-js/lib/quick-sort.js
var require_quick_sort$1 = __commonJS({ "node_modules/source-map-js/lib/quick-sort.js"(exports) {
	function SortTemplate(comparator) {
		/**
		* Swap the elements indexed by `x` and `y` in the array `ary`.
		*
		* @param {Array} ary
		*        The array.
		* @param {Number} x
		*        The index of the first item.
		* @param {Number} y
		*        The index of the second item.
		*/
		function swap$1(ary, x$1, y$2) {
			var temp = ary[x$1];
			ary[x$1] = ary[y$2];
			ary[y$2] = temp;
		}
		/**
		* Returns a random integer within the range `low .. high` inclusive.
		*
		* @param {Number} low
		*        The lower bound on the range.
		* @param {Number} high
		*        The upper bound on the range.
		*/
		function randomIntInRange$1(low, high) {
			return Math.round(low + Math.random() * (high - low));
		}
		/**
		* The Quick Sort algorithm.
		*
		* @param {Array} ary
		*        An array to sort.
		* @param {function} comparator
		*        Function to use to compare two items.
		* @param {Number} p
		*        Start index of the array
		* @param {Number} r
		*        End index of the array
		*/
		function doQuickSort$1(ary, comparator$1, p$2, r$2) {
			if (p$2 < r$2) {
				var pivotIndex = randomIntInRange$1(p$2, r$2);
				var i$6 = p$2 - 1;
				swap$1(ary, pivotIndex, r$2);
				var pivot = ary[r$2];
				for (var j$1 = p$2; j$1 < r$2; j$1++) if (comparator$1(ary[j$1], pivot, false) <= 0) {
					i$6 += 1;
					swap$1(ary, i$6, j$1);
				}
				swap$1(ary, i$6 + 1, j$1);
				var q = i$6 + 1;
				doQuickSort$1(ary, comparator$1, p$2, q - 1);
				doQuickSort$1(ary, comparator$1, q + 1, r$2);
			}
		}
		return doQuickSort$1;
	}
	function cloneSort(comparator) {
		let template$1 = SortTemplate.toString();
		let templateFn = new Function(`return ${template$1}`)();
		return templateFn(comparator);
	}
	/**
	* Sort the given array in-place with the given comparator function.
	*
	* @param {Array} ary
	*        An array to sort.
	* @param {function} comparator
	*        Function to use to compare two items.
	*/
	let sortCache = new WeakMap();
	exports.quickSort = function(ary, comparator, start = 0) {
		let doQuickSort$1 = sortCache.get(comparator);
		if (doQuickSort$1 === void 0) {
			doQuickSort$1 = cloneSort(comparator);
			sortCache.set(comparator, doQuickSort$1);
		}
		doQuickSort$1(ary, comparator, start, ary.length - 1);
	};
} });

//#endregion
//#region node_modules/source-map-js/lib/source-map-consumer.js
var require_source_map_consumer$1 = __commonJS({ "node_modules/source-map-js/lib/source-map-consumer.js"(exports) {
	var util$13 = require_util$6();
	var binarySearch$1 = require_binary_search$1();
	var ArraySet$3 = require_array_set$1().ArraySet;
	var base64VLQ$2 = require_base64_vlq$1();
	var quickSort$1 = require_quick_sort$1().quickSort;
	function SourceMapConsumer$5(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$13.parseSourceMapInput(aSourceMap);
		return sourceMap$3.sections != null ? new IndexedSourceMapConsumer$1(sourceMap$3, aSourceMapURL) : new BasicSourceMapConsumer$1(sourceMap$3, aSourceMapURL);
	}
	SourceMapConsumer$5.fromSourceMap = function(aSourceMap, aSourceMapURL) {
		return BasicSourceMapConsumer$1.fromSourceMap(aSourceMap, aSourceMapURL);
	};
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	SourceMapConsumer$5.prototype._version = 3;
	SourceMapConsumer$5.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$5.prototype, "_generatedMappings", {
		configurable: true,
		enumerable: true,
		get: function() {
			if (!this.__generatedMappings) this._parseMappings(this._mappings, this.sourceRoot);
			return this.__generatedMappings;
		}
	});
	SourceMapConsumer$5.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$5.prototype, "_originalMappings", {
		configurable: true,
		enumerable: true,
		get: function() {
			if (!this.__originalMappings) this._parseMappings(this._mappings, this.sourceRoot);
			return this.__originalMappings;
		}
	});
	SourceMapConsumer$5.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index$1) {
		var c$2 = aStr.charAt(index$1);
		return c$2 === ";" || c$2 === ",";
	};
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	SourceMapConsumer$5.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		throw new Error("Subclasses must implement _parseMappings");
	};
	SourceMapConsumer$5.GENERATED_ORDER = 1;
	SourceMapConsumer$5.ORIGINAL_ORDER = 2;
	SourceMapConsumer$5.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$5.LEAST_UPPER_BOUND = 2;
	/**
	* Iterate over each mapping between an original source/line/column and a
	* generated line/column in this source map.
	*
	* @param Function aCallback
	*        The function that is called with each mapping.
	* @param Object aContext
	*        Optional. If specified, this object will be the value of `this` every
	*        time that `aCallback` is called.
	* @param aOrder
	*        Either `SourceMapConsumer.GENERATED_ORDER` or
	*        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	*        iterate over the mappings sorted by the generated file's line/column
	*        order or the original's source/line/column order, respectively. Defaults to
	*        `SourceMapConsumer.GENERATED_ORDER`.
	*/
	SourceMapConsumer$5.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
		var context = aContext || null;
		var order = aOrder || SourceMapConsumer$5.GENERATED_ORDER;
		var mappings$1;
		switch (order) {
			case SourceMapConsumer$5.GENERATED_ORDER:
				mappings$1 = this._generatedMappings;
				break;
			case SourceMapConsumer$5.ORIGINAL_ORDER:
				mappings$1 = this._originalMappings;
				break;
			default: throw new Error("Unknown order of iteration.");
		}
		var sourceRoot = this.sourceRoot;
		var boundCallback = aCallback.bind(context);
		var names = this._names;
		var sources = this._sources;
		var sourceMapURL = this._sourceMapURL;
		for (var i$6 = 0, n$4 = mappings$1.length; i$6 < n$4; i$6++) {
			var mapping = mappings$1[i$6];
			var source = mapping.source === null ? null : sources.at(mapping.source);
			if (source !== null) source = util$13.computeSourceURL(sourceRoot, source, sourceMapURL);
			boundCallback({
				source,
				generatedLine: mapping.generatedLine,
				generatedColumn: mapping.generatedColumn,
				originalLine: mapping.originalLine,
				originalColumn: mapping.originalColumn,
				name: mapping.name === null ? null : names.at(mapping.name)
			});
		}
	};
	/**
	* Returns all generated line and column information for the original source,
	* line, and column provided. If no column is provided, returns all mappings
	* corresponding to a either the line we are searching for or the next
	* closest line that has any mappings. Otherwise, returns all mappings
	* corresponding to the given line and either the column we are searching for
	* or the next closest column that has any offsets.
	*
	* The only argument is an object with the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number is 1-based.
	*   - column: Optional. the column number in the original source.
	*    The column number is 0-based.
	*
	* and an array of objects is returned, each with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*    line number is 1-based.
	*   - column: The column number in the generated source, or null.
	*    The column number is 0-based.
	*/
	SourceMapConsumer$5.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
		var line = util$13.getArg(aArgs, "line");
		var needle = {
			source: util$13.getArg(aArgs, "source"),
			originalLine: line,
			originalColumn: util$13.getArg(aArgs, "column", 0)
		};
		needle.source = this._findSourceIndex(needle.source);
		if (needle.source < 0) return [];
		var mappings$1 = [];
		var index$1 = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$13.compareByOriginalPositions, binarySearch$1.LEAST_UPPER_BOUND);
		if (index$1 >= 0) {
			var mapping = this._originalMappings[index$1];
			if (aArgs.column === void 0) {
				var originalLine = mapping.originalLine;
				while (mapping && mapping.originalLine === originalLine) {
					mappings$1.push({
						line: util$13.getArg(mapping, "generatedLine", null),
						column: util$13.getArg(mapping, "generatedColumn", null),
						lastColumn: util$13.getArg(mapping, "lastGeneratedColumn", null)
					});
					mapping = this._originalMappings[++index$1];
				}
			} else {
				var originalColumn = mapping.originalColumn;
				while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
					mappings$1.push({
						line: util$13.getArg(mapping, "generatedLine", null),
						column: util$13.getArg(mapping, "generatedColumn", null),
						lastColumn: util$13.getArg(mapping, "lastGeneratedColumn", null)
					});
					mapping = this._originalMappings[++index$1];
				}
			}
		}
		return mappings$1;
	};
	exports.SourceMapConsumer = SourceMapConsumer$5;
	/**
	* A BasicSourceMapConsumer instance represents a parsed source map which we can
	* query for information about the original file positions by giving it a file
	* position in the generated source.
	*
	* The first parameter is the raw source map (either as a JSON string, or
	* already parsed to an object). According to the spec, source maps have the
	* following attributes:
	*
	*   - version: Which version of the source map spec this map is following.
	*   - sources: An array of URLs to the original source files.
	*   - names: An array of identifiers which can be referrenced by individual mappings.
	*   - sourceRoot: Optional. The URL root from which all sources are relative.
	*   - sourcesContent: Optional. An array of contents of the original source files.
	*   - mappings: A string of base64 VLQs which contain the actual mappings.
	*   - file: Optional. The generated file this source map is associated with.
	*
	* Here is an example source map, taken from the source map spec[0]:
	*
	*     {
	*       version : 3,
	*       file: "out.js",
	*       sourceRoot : "",
	*       sources: ["foo.js", "bar.js"],
	*       names: ["src", "maps", "are", "fun"],
	*       mappings: "AA,AB;;ABCDE;"
	*     }
	*
	* The second parameter, if given, is a string whose value is the URL
	* at which the source map was found.  This URL is used to compute the
	* sources array.
	*
	* [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	*/
	function BasicSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$13.parseSourceMapInput(aSourceMap);
		var version$1 = util$13.getArg(sourceMap$3, "version");
		var sources = util$13.getArg(sourceMap$3, "sources");
		var names = util$13.getArg(sourceMap$3, "names", []);
		var sourceRoot = util$13.getArg(sourceMap$3, "sourceRoot", null);
		var sourcesContent = util$13.getArg(sourceMap$3, "sourcesContent", null);
		var mappings$1 = util$13.getArg(sourceMap$3, "mappings");
		var file$2 = util$13.getArg(sourceMap$3, "file", null);
		if (version$1 != this._version) throw new Error("Unsupported version: " + version$1);
		if (sourceRoot) sourceRoot = util$13.normalize(sourceRoot);
		sources = sources.map(String).map(util$13.normalize).map(function(source) {
			return sourceRoot && util$13.isAbsolute(sourceRoot) && util$13.isAbsolute(source) ? util$13.relative(sourceRoot, source) : source;
		});
		this._names = ArraySet$3.fromArray(names.map(String), true);
		this._sources = ArraySet$3.fromArray(sources, true);
		this._absoluteSources = this._sources.toArray().map(function(s$3) {
			return util$13.computeSourceURL(sourceRoot, s$3, aSourceMapURL);
		});
		this.sourceRoot = sourceRoot;
		this.sourcesContent = sourcesContent;
		this._mappings = mappings$1;
		this._sourceMapURL = aSourceMapURL;
		this.file = file$2;
	}
	BasicSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$5.prototype);
	BasicSourceMapConsumer$1.prototype.consumer = SourceMapConsumer$5;
	/**
	* Utility function to find the index of a source.  Returns -1 if not
	* found.
	*/
	BasicSourceMapConsumer$1.prototype._findSourceIndex = function(aSource) {
		var relativeSource = aSource;
		if (this.sourceRoot != null) relativeSource = util$13.relative(this.sourceRoot, relativeSource);
		if (this._sources.has(relativeSource)) return this._sources.indexOf(relativeSource);
		var i$6;
		for (i$6 = 0; i$6 < this._absoluteSources.length; ++i$6) if (this._absoluteSources[i$6] == aSource) return i$6;
		return -1;
	};
	/**
	* Create a BasicSourceMapConsumer from a SourceMapGenerator.
	*
	* @param SourceMapGenerator aSourceMap
	*        The source map that will be consumed.
	* @param String aSourceMapURL
	*        The URL at which the source map can be found (optional)
	* @returns BasicSourceMapConsumer
	*/
	BasicSourceMapConsumer$1.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
		var smc = Object.create(BasicSourceMapConsumer$1.prototype);
		var names = smc._names = ArraySet$3.fromArray(aSourceMap._names.toArray(), true);
		var sources = smc._sources = ArraySet$3.fromArray(aSourceMap._sources.toArray(), true);
		smc.sourceRoot = aSourceMap._sourceRoot;
		smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
		smc.file = aSourceMap._file;
		smc._sourceMapURL = aSourceMapURL;
		smc._absoluteSources = smc._sources.toArray().map(function(s$3) {
			return util$13.computeSourceURL(smc.sourceRoot, s$3, aSourceMapURL);
		});
		var generatedMappings = aSourceMap._mappings.toArray().slice();
		var destGeneratedMappings = smc.__generatedMappings = [];
		var destOriginalMappings = smc.__originalMappings = [];
		for (var i$6 = 0, length = generatedMappings.length; i$6 < length; i$6++) {
			var srcMapping = generatedMappings[i$6];
			var destMapping = new Mapping$1();
			destMapping.generatedLine = srcMapping.generatedLine;
			destMapping.generatedColumn = srcMapping.generatedColumn;
			if (srcMapping.source) {
				destMapping.source = sources.indexOf(srcMapping.source);
				destMapping.originalLine = srcMapping.originalLine;
				destMapping.originalColumn = srcMapping.originalColumn;
				if (srcMapping.name) destMapping.name = names.indexOf(srcMapping.name);
				destOriginalMappings.push(destMapping);
			}
			destGeneratedMappings.push(destMapping);
		}
		quickSort$1(smc.__originalMappings, util$13.compareByOriginalPositions);
		return smc;
	};
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	BasicSourceMapConsumer$1.prototype._version = 3;
	/**
	* The list of original sources.
	*/
	Object.defineProperty(BasicSourceMapConsumer$1.prototype, "sources", { get: function() {
		return this._absoluteSources.slice();
	} });
	/**
	* Provide the JIT with a nice shape / hidden class.
	*/
	function Mapping$1() {
		this.generatedLine = 0;
		this.generatedColumn = 0;
		this.source = null;
		this.originalLine = null;
		this.originalColumn = null;
		this.name = null;
	}
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	const compareGenerated = util$13.compareByGeneratedPositionsDeflatedNoLine;
	function sortGenerated(array, start) {
		let l$1 = array.length;
		let n$4 = array.length - start;
		if (n$4 <= 1) return;
		else if (n$4 == 2) {
			let a$1 = array[start];
			let b$1 = array[start + 1];
			if (compareGenerated(a$1, b$1) > 0) {
				array[start] = b$1;
				array[start + 1] = a$1;
			}
		} else if (n$4 < 20) for (let i$6 = start; i$6 < l$1; i$6++) for (let j$1 = i$6; j$1 > start; j$1--) {
			let a$1 = array[j$1 - 1];
			let b$1 = array[j$1];
			if (compareGenerated(a$1, b$1) <= 0) break;
			array[j$1 - 1] = b$1;
			array[j$1] = a$1;
		}
		else quickSort$1(array, compareGenerated, start);
	}
	BasicSourceMapConsumer$1.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		var generatedLine = 1;
		var previousGeneratedColumn = 0;
		var previousOriginalLine = 0;
		var previousOriginalColumn = 0;
		var previousSource = 0;
		var previousName = 0;
		var length = aStr.length;
		var index$1 = 0;
		var cachedSegments = {};
		var temp = {};
		var originalMappings = [];
		var generatedMappings = [];
		var mapping, str$4, segment, end, value;
		let subarrayStart = 0;
		while (index$1 < length) if (aStr.charAt(index$1) === ";") {
			generatedLine++;
			index$1++;
			previousGeneratedColumn = 0;
			sortGenerated(generatedMappings, subarrayStart);
			subarrayStart = generatedMappings.length;
		} else if (aStr.charAt(index$1) === ",") index$1++;
		else {
			mapping = new Mapping$1();
			mapping.generatedLine = generatedLine;
			for (end = index$1; end < length; end++) if (this._charIsMappingSeparator(aStr, end)) break;
			str$4 = aStr.slice(index$1, end);
			segment = [];
			while (index$1 < end) {
				base64VLQ$2.decode(aStr, index$1, temp);
				value = temp.value;
				index$1 = temp.rest;
				segment.push(value);
			}
			if (segment.length === 2) throw new Error("Found a source, but no line and column");
			if (segment.length === 3) throw new Error("Found a source and line, but no column");
			mapping.generatedColumn = previousGeneratedColumn + segment[0];
			previousGeneratedColumn = mapping.generatedColumn;
			if (segment.length > 1) {
				mapping.source = previousSource + segment[1];
				previousSource += segment[1];
				mapping.originalLine = previousOriginalLine + segment[2];
				previousOriginalLine = mapping.originalLine;
				mapping.originalLine += 1;
				mapping.originalColumn = previousOriginalColumn + segment[3];
				previousOriginalColumn = mapping.originalColumn;
				if (segment.length > 4) {
					mapping.name = previousName + segment[4];
					previousName += segment[4];
				}
			}
			generatedMappings.push(mapping);
			if (typeof mapping.originalLine === "number") {
				let currentSource = mapping.source;
				while (originalMappings.length <= currentSource) originalMappings.push(null);
				if (originalMappings[currentSource] === null) originalMappings[currentSource] = [];
				originalMappings[currentSource].push(mapping);
			}
		}
		sortGenerated(generatedMappings, subarrayStart);
		this.__generatedMappings = generatedMappings;
		for (var i$6 = 0; i$6 < originalMappings.length; i$6++) if (originalMappings[i$6] != null) quickSort$1(originalMappings[i$6], util$13.compareByOriginalPositionsNoSource);
		this.__originalMappings = [].concat(...originalMappings);
	};
	/**
	* Find the mapping that best matches the hypothetical "needle" mapping that
	* we are searching for in the given "haystack" of mappings.
	*/
	BasicSourceMapConsumer$1.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
		if (aNeedle[aLineName] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
		if (aNeedle[aColumnName] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
		return binarySearch$1.search(aNeedle, aMappings, aComparator, aBias);
	};
	/**
	* Compute the last column for each generated mapping. The last column is
	* inclusive.
	*/
	BasicSourceMapConsumer$1.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
		for (var index$1 = 0; index$1 < this._generatedMappings.length; ++index$1) {
			var mapping = this._generatedMappings[index$1];
			if (index$1 + 1 < this._generatedMappings.length) {
				var nextMapping = this._generatedMappings[index$1 + 1];
				if (mapping.generatedLine === nextMapping.generatedLine) {
					mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
					continue;
				}
			}
			mapping.lastGeneratedColumn = Infinity;
		}
	};
	/**
	* Returns the original source, line, and column information for the generated
	* source's line and column positions provided. The only argument is an object
	* with the following properties:
	*
	*   - line: The line number in the generated source.  The line number
	*     is 1-based.
	*   - column: The column number in the generated source.  The column
	*     number is 0-based.
	*   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	*     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	*
	* and an object is returned with the following properties:
	*
	*   - source: The original source file, or null.
	*   - line: The line number in the original source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the original source, or null.  The
	*     column number is 0-based.
	*   - name: The original identifier, or null.
	*/
	BasicSourceMapConsumer$1.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
		var needle = {
			generatedLine: util$13.getArg(aArgs, "line"),
			generatedColumn: util$13.getArg(aArgs, "column")
		};
		var index$1 = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util$13.compareByGeneratedPositionsDeflated, util$13.getArg(aArgs, "bias", SourceMapConsumer$5.GREATEST_LOWER_BOUND));
		if (index$1 >= 0) {
			var mapping = this._generatedMappings[index$1];
			if (mapping.generatedLine === needle.generatedLine) {
				var source = util$13.getArg(mapping, "source", null);
				if (source !== null) {
					source = this._sources.at(source);
					source = util$13.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
				}
				var name = util$13.getArg(mapping, "name", null);
				if (name !== null) name = this._names.at(name);
				return {
					source,
					line: util$13.getArg(mapping, "originalLine", null),
					column: util$13.getArg(mapping, "originalColumn", null),
					name
				};
			}
		}
		return {
			source: null,
			line: null,
			column: null,
			name: null
		};
	};
	/**
	* Return true if we have the source content for every source in the source
	* map, false otherwise.
	*/
	BasicSourceMapConsumer$1.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
		if (!this.sourcesContent) return false;
		return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
			return sc == null;
		});
	};
	/**
	* Returns the original source content. The only argument is the url of the
	* original source file. Returns null if no original source content is
	* available.
	*/
	BasicSourceMapConsumer$1.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		if (!this.sourcesContent) return null;
		var index$1 = this._findSourceIndex(aSource);
		if (index$1 >= 0) return this.sourcesContent[index$1];
		var relativeSource = aSource;
		if (this.sourceRoot != null) relativeSource = util$13.relative(this.sourceRoot, relativeSource);
		var url$1;
		if (this.sourceRoot != null && (url$1 = util$13.urlParse(this.sourceRoot))) {
			var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
			if (url$1.scheme == "file" && this._sources.has(fileUriAbsPath)) return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
			if ((!url$1.path || url$1.path == "/") && this._sources.has("/" + relativeSource)) return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
		}
		if (nullOnMissing) return null;
		else throw new Error("\"" + relativeSource + "\" is not in the SourceMap.");
	};
	/**
	* Returns the generated line and column information for the original source,
	* line, and column positions provided. The only argument is an object with
	* the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number
	*     is 1-based.
	*   - column: The column number in the original source.  The column
	*     number is 0-based.
	*   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	*     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	*
	* and an object is returned with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the generated source, or null.
	*     The column number is 0-based.
	*/
	BasicSourceMapConsumer$1.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
		var source = util$13.getArg(aArgs, "source");
		source = this._findSourceIndex(source);
		if (source < 0) return {
			line: null,
			column: null,
			lastColumn: null
		};
		var needle = {
			source,
			originalLine: util$13.getArg(aArgs, "line"),
			originalColumn: util$13.getArg(aArgs, "column")
		};
		var index$1 = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$13.compareByOriginalPositions, util$13.getArg(aArgs, "bias", SourceMapConsumer$5.GREATEST_LOWER_BOUND));
		if (index$1 >= 0) {
			var mapping = this._originalMappings[index$1];
			if (mapping.source === needle.source) return {
				line: util$13.getArg(mapping, "generatedLine", null),
				column: util$13.getArg(mapping, "generatedColumn", null),
				lastColumn: util$13.getArg(mapping, "lastGeneratedColumn", null)
			};
		}
		return {
			line: null,
			column: null,
			lastColumn: null
		};
	};
	exports.BasicSourceMapConsumer = BasicSourceMapConsumer$1;
	/**
	* An IndexedSourceMapConsumer instance represents a parsed source map which
	* we can query for information. It differs from BasicSourceMapConsumer in
	* that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	* input.
	*
	* The first parameter is a raw source map (either as a JSON string, or already
	* parsed to an object). According to the spec for indexed source maps, they
	* have the following attributes:
	*
	*   - version: Which version of the source map spec this map is following.
	*   - file: Optional. The generated file this source map is associated with.
	*   - sections: A list of section definitions.
	*
	* Each value under the "sections" field has two fields:
	*   - offset: The offset into the original specified at which this section
	*       begins to apply, defined as an object with a "line" and "column"
	*       field.
	*   - map: A source map definition. This source map could also be indexed,
	*       but doesn't have to be.
	*
	* Instead of the "map" field, it's also possible to have a "url" field
	* specifying a URL to retrieve a source map from, but that's currently
	* unsupported.
	*
	* Here's an example source map, taken from the source map spec[0], but
	* modified to omit a section which uses the "url" field.
	*
	*  {
	*    version : 3,
	*    file: "app.js",
	*    sections: [{
	*      offset: {line:100, column:10},
	*      map: {
	*        version : 3,
	*        file: "section.js",
	*        sources: ["foo.js", "bar.js"],
	*        names: ["src", "maps", "are", "fun"],
	*        mappings: "AAAA,E;;ABCDE;"
	*      }
	*    }],
	*  }
	*
	* The second parameter, if given, is a string whose value is the URL
	* at which the source map was found.  This URL is used to compute the
	* sources array.
	*
	* [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	*/
	function IndexedSourceMapConsumer$1(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$13.parseSourceMapInput(aSourceMap);
		var version$1 = util$13.getArg(sourceMap$3, "version");
		var sections = util$13.getArg(sourceMap$3, "sections");
		if (version$1 != this._version) throw new Error("Unsupported version: " + version$1);
		this._sources = new ArraySet$3();
		this._names = new ArraySet$3();
		var lastOffset = {
			line: -1,
			column: 0
		};
		this._sections = sections.map(function(s$3) {
			if (s$3.url) throw new Error("Support for url field in sections not implemented.");
			var offset = util$13.getArg(s$3, "offset");
			var offsetLine = util$13.getArg(offset, "line");
			var offsetColumn = util$13.getArg(offset, "column");
			if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) throw new Error("Section offsets must be ordered and non-overlapping.");
			lastOffset = offset;
			return {
				generatedOffset: {
					generatedLine: offsetLine + 1,
					generatedColumn: offsetColumn + 1
				},
				consumer: new SourceMapConsumer$5(util$13.getArg(s$3, "map"), aSourceMapURL)
			};
		});
	}
	IndexedSourceMapConsumer$1.prototype = Object.create(SourceMapConsumer$5.prototype);
	IndexedSourceMapConsumer$1.prototype.constructor = SourceMapConsumer$5;
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	IndexedSourceMapConsumer$1.prototype._version = 3;
	/**
	* The list of original sources.
	*/
	Object.defineProperty(IndexedSourceMapConsumer$1.prototype, "sources", { get: function() {
		var sources = [];
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) for (var j$1 = 0; j$1 < this._sections[i$6].consumer.sources.length; j$1++) sources.push(this._sections[i$6].consumer.sources[j$1]);
		return sources;
	} });
	/**
	* Returns the original source, line, and column information for the generated
	* source's line and column positions provided. The only argument is an object
	* with the following properties:
	*
	*   - line: The line number in the generated source.  The line number
	*     is 1-based.
	*   - column: The column number in the generated source.  The column
	*     number is 0-based.
	*
	* and an object is returned with the following properties:
	*
	*   - source: The original source file, or null.
	*   - line: The line number in the original source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the original source, or null.  The
	*     column number is 0-based.
	*   - name: The original identifier, or null.
	*/
	IndexedSourceMapConsumer$1.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
		var needle = {
			generatedLine: util$13.getArg(aArgs, "line"),
			generatedColumn: util$13.getArg(aArgs, "column")
		};
		var sectionIndex = binarySearch$1.search(needle, this._sections, function(needle$1, section$1) {
			var cmp = needle$1.generatedLine - section$1.generatedOffset.generatedLine;
			if (cmp) return cmp;
			return needle$1.generatedColumn - section$1.generatedOffset.generatedColumn;
		});
		var section = this._sections[sectionIndex];
		if (!section) return {
			source: null,
			line: null,
			column: null,
			name: null
		};
		return section.consumer.originalPositionFor({
			line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
			column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
			bias: aArgs.bias
		});
	};
	/**
	* Return true if we have the source content for every source in the source
	* map, false otherwise.
	*/
	IndexedSourceMapConsumer$1.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
		return this._sections.every(function(s$3) {
			return s$3.consumer.hasContentsOfAllSources();
		});
	};
	/**
	* Returns the original source content. The only argument is the url of the
	* original source file. Returns null if no original source content is
	* available.
	*/
	IndexedSourceMapConsumer$1.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			var content = section.consumer.sourceContentFor(aSource, true);
			if (content || content === "") return content;
		}
		if (nullOnMissing) return null;
		else throw new Error("\"" + aSource + "\" is not in the SourceMap.");
	};
	/**
	* Returns the generated line and column information for the original source,
	* line, and column positions provided. The only argument is an object with
	* the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number
	*     is 1-based.
	*   - column: The column number in the original source.  The column
	*     number is 0-based.
	*
	* and an object is returned with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*     line number is 1-based. 
	*   - column: The column number in the generated source, or null.
	*     The column number is 0-based.
	*/
	IndexedSourceMapConsumer$1.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			if (section.consumer._findSourceIndex(util$13.getArg(aArgs, "source")) === -1) continue;
			var generatedPosition = section.consumer.generatedPositionFor(aArgs);
			if (generatedPosition) {
				var ret$1 = {
					line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
					column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
				};
				return ret$1;
			}
		}
		return {
			line: null,
			column: null
		};
	};
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	IndexedSourceMapConsumer$1.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		this.__generatedMappings = [];
		this.__originalMappings = [];
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			var sectionMappings = section.consumer._generatedMappings;
			for (var j$1 = 0; j$1 < sectionMappings.length; j$1++) {
				var mapping = sectionMappings[j$1];
				var source = section.consumer._sources.at(mapping.source);
				if (source !== null) source = util$13.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
				this._sources.add(source);
				source = this._sources.indexOf(source);
				var name = null;
				if (mapping.name) {
					name = section.consumer._names.at(mapping.name);
					this._names.add(name);
					name = this._names.indexOf(name);
				}
				var adjustedMapping = {
					source,
					generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
					generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
					originalLine: mapping.originalLine,
					originalColumn: mapping.originalColumn,
					name
				};
				this.__generatedMappings.push(adjustedMapping);
				if (typeof adjustedMapping.originalLine === "number") this.__originalMappings.push(adjustedMapping);
			}
		}
		quickSort$1(this.__generatedMappings, util$13.compareByGeneratedPositionsDeflated);
		quickSort$1(this.__originalMappings, util$13.compareByOriginalPositions);
	};
	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer$1;
} });

//#endregion
//#region node_modules/source-map-js/lib/source-node.js
var require_source_node$1 = __commonJS({ "node_modules/source-map-js/lib/source-node.js"(exports) {
	var SourceMapGenerator$6 = require_source_map_generator$1().SourceMapGenerator;
	var util$12 = require_util$6();
	var REGEX_NEWLINE$1 = /(\r?\n)/;
	var NEWLINE_CODE$1 = 10;
	var isSourceNode$1 = "$$$isSourceNode$$$";
	/**
	* SourceNodes provide a way to abstract over interpolating/concatenating
	* snippets of generated JavaScript source code while maintaining the line and
	* column information associated with the original source code.
	*
	* @param aLine The original line number.
	* @param aColumn The original column number.
	* @param aSource The original source's filename.
	* @param aChunks Optional. An array of strings which are snippets of
	*        generated JS, or other SourceNodes.
	* @param aName The original identifier.
	*/
	function SourceNode$2(aLine, aColumn, aSource, aChunks, aName) {
		this.children = [];
		this.sourceContents = {};
		this.line = aLine == null ? null : aLine;
		this.column = aColumn == null ? null : aColumn;
		this.source = aSource == null ? null : aSource;
		this.name = aName == null ? null : aName;
		this[isSourceNode$1] = true;
		if (aChunks != null) this.add(aChunks);
	}
	/**
	* Creates a SourceNode from generated code and a SourceMapConsumer.
	*
	* @param aGeneratedCode The generated code
	* @param aSourceMapConsumer The SourceMap for the generated code
	* @param aRelativePath Optional. The path that relative sources in the
	*        SourceMapConsumer should be relative to.
	*/
	SourceNode$2.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
		var node = new SourceNode$2();
		var remainingLines = aGeneratedCode.split(REGEX_NEWLINE$1);
		var remainingLinesIndex = 0;
		var shiftNextLine = function() {
			var lineContents = getNextLine();
			var newLine = getNextLine() || "";
			return lineContents + newLine;
			function getNextLine() {
				return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
			}
		};
		var lastGeneratedLine = 1, lastGeneratedColumn = 0;
		var lastMapping = null;
		aSourceMapConsumer.eachMapping(function(mapping) {
			if (lastMapping !== null) if (lastGeneratedLine < mapping.generatedLine) {
				addMappingWithCode(lastMapping, shiftNextLine());
				lastGeneratedLine++;
				lastGeneratedColumn = 0;
			} else {
				var nextLine = remainingLines[remainingLinesIndex] || "";
				var code$1 = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
				remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
				lastGeneratedColumn = mapping.generatedColumn;
				addMappingWithCode(lastMapping, code$1);
				lastMapping = mapping;
				return;
			}
			while (lastGeneratedLine < mapping.generatedLine) {
				node.add(shiftNextLine());
				lastGeneratedLine++;
			}
			if (lastGeneratedColumn < mapping.generatedColumn) {
				var nextLine = remainingLines[remainingLinesIndex] || "";
				node.add(nextLine.substr(0, mapping.generatedColumn));
				remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
				lastGeneratedColumn = mapping.generatedColumn;
			}
			lastMapping = mapping;
		}, this);
		if (remainingLinesIndex < remainingLines.length) {
			if (lastMapping) addMappingWithCode(lastMapping, shiftNextLine());
			node.add(remainingLines.splice(remainingLinesIndex).join(""));
		}
		aSourceMapConsumer.sources.forEach(function(sourceFile) {
			var content = aSourceMapConsumer.sourceContentFor(sourceFile);
			if (content != null) {
				if (aRelativePath != null) sourceFile = util$12.join(aRelativePath, sourceFile);
				node.setSourceContent(sourceFile, content);
			}
		});
		return node;
		function addMappingWithCode(mapping, code$1) {
			if (mapping === null || mapping.source === void 0) node.add(code$1);
			else {
				var source = aRelativePath ? util$12.join(aRelativePath, mapping.source) : mapping.source;
				node.add(new SourceNode$2(mapping.originalLine, mapping.originalColumn, source, code$1, mapping.name));
			}
		}
	};
	/**
	* Add a chunk of generated JS to this source node.
	*
	* @param aChunk A string snippet of generated JS code, another instance of
	*        SourceNode, or an array where each member is one of those things.
	*/
	SourceNode$2.prototype.add = function SourceNode_add(aChunk) {
		if (Array.isArray(aChunk)) aChunk.forEach(function(chunk) {
			this.add(chunk);
		}, this);
		else if (aChunk[isSourceNode$1] || typeof aChunk === "string") {
			if (aChunk) this.children.push(aChunk);
		} else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		return this;
	};
	/**
	* Add a chunk of generated JS to the beginning of this source node.
	*
	* @param aChunk A string snippet of generated JS code, another instance of
	*        SourceNode, or an array where each member is one of those things.
	*/
	SourceNode$2.prototype.prepend = function SourceNode_prepend(aChunk) {
		if (Array.isArray(aChunk)) for (var i$6 = aChunk.length - 1; i$6 >= 0; i$6--) this.prepend(aChunk[i$6]);
		else if (aChunk[isSourceNode$1] || typeof aChunk === "string") this.children.unshift(aChunk);
		else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		return this;
	};
	/**
	* Walk over the tree of JS snippets in this node and its children. The
	* walking function is called once for each snippet of JS and is passed that
	* snippet and the its original associated source's line/column location.
	*
	* @param aFn The traversal function.
	*/
	SourceNode$2.prototype.walk = function SourceNode_walk(aFn) {
		var chunk;
		for (var i$6 = 0, len = this.children.length; i$6 < len; i$6++) {
			chunk = this.children[i$6];
			if (chunk[isSourceNode$1]) chunk.walk(aFn);
			else if (chunk !== "") aFn(chunk, {
				source: this.source,
				line: this.line,
				column: this.column,
				name: this.name
			});
		}
	};
	/**
	* Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	* each of `this.children`.
	*
	* @param aSep The separator.
	*/
	SourceNode$2.prototype.join = function SourceNode_join(aSep) {
		var newChildren;
		var i$6;
		var len = this.children.length;
		if (len > 0) {
			newChildren = [];
			for (i$6 = 0; i$6 < len - 1; i$6++) {
				newChildren.push(this.children[i$6]);
				newChildren.push(aSep);
			}
			newChildren.push(this.children[i$6]);
			this.children = newChildren;
		}
		return this;
	};
	/**
	* Call String.prototype.replace on the very right-most source snippet. Useful
	* for trimming whitespace from the end of a source node, etc.
	*
	* @param aPattern The pattern to replace.
	* @param aReplacement The thing to replace the pattern with.
	*/
	SourceNode$2.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
		var lastChild = this.children[this.children.length - 1];
		if (lastChild[isSourceNode$1]) lastChild.replaceRight(aPattern, aReplacement);
		else if (typeof lastChild === "string") this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
		else this.children.push("".replace(aPattern, aReplacement));
		return this;
	};
	/**
	* Set the source content for a source file. This will be added to the SourceMapGenerator
	* in the sourcesContent field.
	*
	* @param aSourceFile The filename of the source file
	* @param aSourceContent The content of the source file
	*/
	SourceNode$2.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
		this.sourceContents[util$12.toSetString(aSourceFile)] = aSourceContent;
	};
	/**
	* Walk over the tree of SourceNodes. The walking function is called for each
	* source file content and is passed the filename and source content.
	*
	* @param aFn The traversal function.
	*/
	SourceNode$2.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
		for (var i$6 = 0, len = this.children.length; i$6 < len; i$6++) if (this.children[i$6][isSourceNode$1]) this.children[i$6].walkSourceContents(aFn);
		var sources = Object.keys(this.sourceContents);
		for (var i$6 = 0, len = sources.length; i$6 < len; i$6++) aFn(util$12.fromSetString(sources[i$6]), this.sourceContents[sources[i$6]]);
	};
	/**
	* Return the string representation of this source node. Walks over the tree
	* and concatenates all the various snippets together to one string.
	*/
	SourceNode$2.prototype.toString = function SourceNode_toString() {
		var str$4 = "";
		this.walk(function(chunk) {
			str$4 += chunk;
		});
		return str$4;
	};
	/**
	* Returns the string representation of this source node along with a source
	* map.
	*/
	SourceNode$2.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
		var generated = {
			code: "",
			line: 1,
			column: 0
		};
		var map = new SourceMapGenerator$6(aArgs);
		var sourceMappingActive = false;
		var lastOriginalSource = null;
		var lastOriginalLine = null;
		var lastOriginalColumn = null;
		var lastOriginalName = null;
		this.walk(function(chunk, original) {
			generated.code += chunk;
			if (original.source !== null && original.line !== null && original.column !== null) {
				if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) map.addMapping({
					source: original.source,
					original: {
						line: original.line,
						column: original.column
					},
					generated: {
						line: generated.line,
						column: generated.column
					},
					name: original.name
				});
				lastOriginalSource = original.source;
				lastOriginalLine = original.line;
				lastOriginalColumn = original.column;
				lastOriginalName = original.name;
				sourceMappingActive = true;
			} else if (sourceMappingActive) {
				map.addMapping({ generated: {
					line: generated.line,
					column: generated.column
				} });
				lastOriginalSource = null;
				sourceMappingActive = false;
			}
			for (var idx = 0, length = chunk.length; idx < length; idx++) if (chunk.charCodeAt(idx) === NEWLINE_CODE$1) {
				generated.line++;
				generated.column = 0;
				if (idx + 1 === length) {
					lastOriginalSource = null;
					sourceMappingActive = false;
				} else if (sourceMappingActive) map.addMapping({
					source: original.source,
					original: {
						line: original.line,
						column: original.column
					},
					generated: {
						line: generated.line,
						column: generated.column
					},
					name: original.name
				});
			} else generated.column++;
		});
		this.walkSourceContents(function(sourceFile, sourceContent) {
			map.setSourceContent(sourceFile, sourceContent);
		});
		return {
			code: generated.code,
			map
		};
	};
	exports.SourceNode = SourceNode$2;
} });

//#endregion
//#region node_modules/source-map-js/source-map.js
var require_source_map$2 = __commonJS({ "node_modules/source-map-js/source-map.js"(exports) {
	exports.SourceMapGenerator = require_source_map_generator$1().SourceMapGenerator;
	exports.SourceMapConsumer = require_source_map_consumer$1().SourceMapConsumer;
	exports.SourceNode = require_source_node$1().SourceNode;
} });

//#endregion
//#region node_modules/postcss/lib/previous-map.js
var require_previous_map = __commonJS({ "node_modules/postcss/lib/previous-map.js"(exports, module) {
	let { existsSync, readFileSync } = __require("fs");
	let { dirname: dirname$2, join: join$2 } = __require("path");
	let { SourceMapConsumer: SourceMapConsumer$4, SourceMapGenerator: SourceMapGenerator$5 } = require_source_map$2();
	function fromBase64(str$4) {
		if (Buffer) return Buffer.from(str$4, "base64").toString();
		else
 /* c8 ignore next 2 */
		return window.atob(str$4);
	}
	var PreviousMap$2 = class {
		constructor(css, opts) {
			if (opts.map === false) return;
			this.loadAnnotation(css);
			this.inline = this.startWith(this.annotation, "data:");
			let prev = opts.map ? opts.map.prev : void 0;
			let text = this.loadMap(opts.from, prev);
			if (!this.mapFile && opts.from) this.mapFile = opts.from;
			if (this.mapFile) this.root = dirname$2(this.mapFile);
			if (text) this.text = text;
		}
		consumer() {
			if (!this.consumerCache) this.consumerCache = new SourceMapConsumer$4(this.text);
			return this.consumerCache;
		}
		decodeInline(text) {
			let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
			let baseUri = /^data:application\/json;base64,/;
			let charsetUri = /^data:application\/json;charset=utf-?8,/;
			let uri = /^data:application\/json,/;
			let uriMatch = text.match(charsetUri) || text.match(uri);
			if (uriMatch) return decodeURIComponent(text.substr(uriMatch[0].length));
			let baseUriMatch = text.match(baseCharsetUri) || text.match(baseUri);
			if (baseUriMatch) return fromBase64(text.substr(baseUriMatch[0].length));
			let encoding = text.match(/data:application\/json;([^,]+),/)[1];
			throw new Error("Unsupported source map encoding " + encoding);
		}
		getAnnotationURL(sourceMapString) {
			return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
		}
		isMap(map) {
			if (typeof map !== "object") return false;
			return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
		}
		loadAnnotation(css) {
			let comments = css.match(/\/\*\s*# sourceMappingURL=/g);
			if (!comments) return;
			let start = css.lastIndexOf(comments.pop());
			let end = css.indexOf("*/", start);
			if (start > -1 && end > -1) this.annotation = this.getAnnotationURL(css.substring(start, end));
		}
		loadFile(path$28) {
			this.root = dirname$2(path$28);
			if (existsSync(path$28)) {
				this.mapFile = path$28;
				return readFileSync(path$28, "utf-8").toString().trim();
			}
		}
		loadMap(file$2, prev) {
			if (prev === false) return false;
			if (prev) if (typeof prev === "string") return prev;
			else if (typeof prev === "function") {
				let prevPath = prev(file$2);
				if (prevPath) {
					let map = this.loadFile(prevPath);
					if (!map) throw new Error("Unable to load previous source map: " + prevPath.toString());
					return map;
				}
			} else if (prev instanceof SourceMapConsumer$4) return SourceMapGenerator$5.fromSourceMap(prev).toString();
			else if (prev instanceof SourceMapGenerator$5) return prev.toString();
			else if (this.isMap(prev)) return JSON.stringify(prev);
			else throw new Error("Unsupported previous source map format: " + prev.toString());
			else if (this.inline) return this.decodeInline(this.annotation);
			else if (this.annotation) {
				let map = this.annotation;
				if (file$2) map = join$2(dirname$2(file$2), map);
				return this.loadFile(map);
			}
		}
		startWith(string$3, start) {
			if (!string$3) return false;
			return string$3.substr(0, start.length) === start;
		}
		withContent() {
			return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
		}
	};
	module.exports = PreviousMap$2;
	PreviousMap$2.default = PreviousMap$2;
} });

//#endregion
//#region node_modules/postcss/lib/input.js
var require_input = __commonJS({ "node_modules/postcss/lib/input.js"(exports, module) {
	let { nanoid } = require_non_secure();
	let { isAbsolute: isAbsolute$5, resolve: resolve$4 } = __require("path");
	let { SourceMapConsumer: SourceMapConsumer$3, SourceMapGenerator: SourceMapGenerator$4 } = require_source_map$2();
	let { fileURLToPath, pathToFileURL: pathToFileURL$1 } = __require("url");
	let CssSyntaxError$2 = require_css_syntax_error();
	let PreviousMap$1 = require_previous_map();
	let terminalHighlight = require_terminal_highlight();
	let fromOffsetCache = Symbol("fromOffsetCache");
	let sourceMapAvailable$1 = Boolean(SourceMapConsumer$3 && SourceMapGenerator$4);
	let pathAvailable$1 = Boolean(resolve$4 && isAbsolute$5);
	var Input$7 = class {
		get from() {
			return this.file || this.id;
		}
		constructor(css, opts = {}) {
			if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) throw new Error(`PostCSS received ${css} instead of CSS string`);
			this.css = css.toString();
			if (this.css[0] === "﻿" || this.css[0] === "￾") {
				this.hasBOM = true;
				this.css = this.css.slice(1);
			} else this.hasBOM = false;
			this.document = this.css;
			if (opts.document) this.document = opts.document.toString();
			if (opts.from) if (!pathAvailable$1 || /^\w+:\/\//.test(opts.from) || isAbsolute$5(opts.from)) this.file = opts.from;
			else this.file = resolve$4(opts.from);
			if (pathAvailable$1 && sourceMapAvailable$1) {
				let map = new PreviousMap$1(this.css, opts);
				if (map.text) {
					this.map = map;
					let file$2 = map.consumer().file;
					if (!this.file && file$2) this.file = this.mapResolve(file$2);
				}
			}
			if (!this.file) this.id = "<input css " + nanoid(6) + ">";
			if (this.map) this.map.file = this.from;
		}
		error(message, line, column, opts = {}) {
			let endColumn, endLine, result;
			if (line && typeof line === "object") {
				let start = line;
				let end = column;
				if (typeof start.offset === "number") {
					let pos = this.fromOffset(start.offset);
					line = pos.line;
					column = pos.col;
				} else {
					line = start.line;
					column = start.column;
				}
				if (typeof end.offset === "number") {
					let pos = this.fromOffset(end.offset);
					endLine = pos.line;
					endColumn = pos.col;
				} else {
					endLine = end.line;
					endColumn = end.column;
				}
			} else if (!column) {
				let pos = this.fromOffset(line);
				line = pos.line;
				column = pos.col;
			}
			let origin = this.origin(line, column, endLine, endColumn);
			if (origin) result = new CssSyntaxError$2(message, origin.endLine === void 0 ? origin.line : {
				column: origin.column,
				line: origin.line
			}, origin.endLine === void 0 ? origin.column : {
				column: origin.endColumn,
				line: origin.endLine
			}, origin.source, origin.file, opts.plugin);
			else result = new CssSyntaxError$2(message, endLine === void 0 ? line : {
				column,
				line
			}, endLine === void 0 ? column : {
				column: endColumn,
				line: endLine
			}, this.css, this.file, opts.plugin);
			result.input = {
				column,
				endColumn,
				endLine,
				line,
				source: this.css
			};
			if (this.file) {
				if (pathToFileURL$1) result.input.url = pathToFileURL$1(this.file).toString();
				result.input.file = this.file;
			}
			return result;
		}
		fromOffset(offset) {
			let lastLine, lineToIndex;
			if (!this[fromOffsetCache]) {
				let lines = this.css.split("\n");
				lineToIndex = new Array(lines.length);
				let prevIndex = 0;
				for (let i$6 = 0, l$1 = lines.length; i$6 < l$1; i$6++) {
					lineToIndex[i$6] = prevIndex;
					prevIndex += lines[i$6].length + 1;
				}
				this[fromOffsetCache] = lineToIndex;
			} else lineToIndex = this[fromOffsetCache];
			lastLine = lineToIndex[lineToIndex.length - 1];
			let min = 0;
			if (offset >= lastLine) min = lineToIndex.length - 1;
			else {
				let max$1 = lineToIndex.length - 2;
				let mid;
				while (min < max$1) {
					mid = min + (max$1 - min >> 1);
					if (offset < lineToIndex[mid]) max$1 = mid - 1;
					else if (offset >= lineToIndex[mid + 1]) min = mid + 1;
					else {
						min = mid;
						break;
					}
				}
			}
			return {
				col: offset - lineToIndex[min] + 1,
				line: min + 1
			};
		}
		mapResolve(file$2) {
			if (/^\w+:\/\//.test(file$2)) return file$2;
			return resolve$4(this.map.consumer().sourceRoot || this.map.root || ".", file$2);
		}
		origin(line, column, endLine, endColumn) {
			if (!this.map) return false;
			let consumer = this.map.consumer();
			let from = consumer.originalPositionFor({
				column,
				line
			});
			if (!from.source) return false;
			let to;
			if (typeof endLine === "number") to = consumer.originalPositionFor({
				column: endColumn,
				line: endLine
			});
			let fromUrl;
			if (isAbsolute$5(from.source)) fromUrl = pathToFileURL$1(from.source);
			else fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL$1(this.map.mapFile));
			let result = {
				column: from.column,
				endColumn: to && to.column,
				endLine: to && to.line,
				line: from.line,
				url: fromUrl.toString()
			};
			if (fromUrl.protocol === "file:") if (fileURLToPath) result.file = fileURLToPath(fromUrl);
			else
 /* c8 ignore next 2 */
			throw new Error(`file: protocol is not available in this PostCSS build`);
			let source = consumer.sourceContentFor(from.source);
			if (source) result.source = source;
			return result;
		}
		toJSON() {
			let json = {};
			for (let name of [
				"hasBOM",
				"css",
				"file",
				"id"
			]) if (this[name] != null) json[name] = this[name];
			if (this.map) {
				json.map = { ...this.map };
				if (json.map.consumerCache) json.map.consumerCache = void 0;
			}
			return json;
		}
	};
	module.exports = Input$7;
	Input$7.default = Input$7;
	if (terminalHighlight && terminalHighlight.registerInput) terminalHighlight.registerInput(Input$7);
} });

//#endregion
//#region node_modules/postcss/lib/root.js
var require_root$3 = __commonJS({ "node_modules/postcss/lib/root.js"(exports, module) {
	let Container$12 = require_container$3();
	let LazyResult$3, Processor$6;
	var Root$9 = class extends Container$12 {
		constructor(defaults$2) {
			super(defaults$2);
			this.type = "root";
			if (!this.nodes) this.nodes = [];
		}
		normalize(child, sample, type) {
			let nodes$1 = super.normalize(child);
			if (sample) {
				if (type === "prepend") if (this.nodes.length > 1) sample.raws.before = this.nodes[1].raws.before;
				else delete sample.raws.before;
				else if (this.first !== sample) for (let node of nodes$1) node.raws.before = sample.raws.before;
			}
			return nodes$1;
		}
		removeChild(child, ignore) {
			let index$1 = this.index(child);
			if (!ignore && index$1 === 0 && this.nodes.length > 1) this.nodes[1].raws.before = this.nodes[index$1].raws.before;
			return super.removeChild(child);
		}
		toResult(opts = {}) {
			let lazy = new LazyResult$3(new Processor$6(), this, opts);
			return lazy.stringify();
		}
	};
	Root$9.registerLazyResult = (dependant) => {
		LazyResult$3 = dependant;
	};
	Root$9.registerProcessor = (dependant) => {
		Processor$6 = dependant;
	};
	module.exports = Root$9;
	Root$9.default = Root$9;
	Container$12.registerRoot(Root$9);
} });

//#endregion
//#region node_modules/postcss/lib/list.js
var require_list = __commonJS({ "node_modules/postcss/lib/list.js"(exports, module) {
	let list$3 = {
		comma(string$3) {
			return list$3.split(string$3, [","], true);
		},
		space(string$3) {
			let spaces = [
				" ",
				"\n",
				"	"
			];
			return list$3.split(string$3, spaces);
		},
		split(string$3, separators, last$2) {
			let array = [];
			let current = "";
			let split = false;
			let func = 0;
			let inQuote = false;
			let prevQuote = "";
			let escape$2 = false;
			for (let letter of string$3) {
				if (escape$2) escape$2 = false;
				else if (letter === "\\") escape$2 = true;
				else if (inQuote) {
					if (letter === prevQuote) inQuote = false;
				} else if (letter === "\"" || letter === "'") {
					inQuote = true;
					prevQuote = letter;
				} else if (letter === "(") func += 1;
				else if (letter === ")") {
					if (func > 0) func -= 1;
				} else if (func === 0) {
					if (separators.includes(letter)) split = true;
				}
				if (split) {
					if (current !== "") array.push(current.trim());
					current = "";
					split = false;
				} else current += letter;
			}
			if (last$2 || current !== "") array.push(current.trim());
			return array;
		}
	};
	module.exports = list$3;
	list$3.default = list$3;
} });

//#endregion
//#region node_modules/postcss/lib/rule.js
var require_rule = __commonJS({ "node_modules/postcss/lib/rule.js"(exports, module) {
	let Container$11 = require_container$3();
	let list$2 = require_list();
	var Rule$4 = class extends Container$11 {
		get selectors() {
			return list$2.comma(this.selector);
		}
		set selectors(values) {
			let match = this.selector ? this.selector.match(/,\s*/) : null;
			let sep$1 = match ? match[0] : "," + this.raw("between", "beforeOpen");
			this.selector = values.join(sep$1);
		}
		constructor(defaults$2) {
			super(defaults$2);
			this.type = "rule";
			if (!this.nodes) this.nodes = [];
		}
	};
	module.exports = Rule$4;
	Rule$4.default = Rule$4;
	Container$11.registerRule(Rule$4);
} });

//#endregion
//#region node_modules/postcss/lib/fromJSON.js
var require_fromJSON = __commonJS({ "node_modules/postcss/lib/fromJSON.js"(exports, module) {
	let AtRule$4 = require_at_rule();
	let Comment$10 = require_comment$3();
	let Declaration$3 = require_declaration();
	let Input$6 = require_input();
	let PreviousMap = require_previous_map();
	let Root$8 = require_root$3();
	let Rule$3 = require_rule();
	function fromJSON$2(json, inputs) {
		if (Array.isArray(json)) return json.map((n$4) => fromJSON$2(n$4));
		let { inputs: ownInputs,...defaults$2 } = json;
		if (ownInputs) {
			inputs = [];
			for (let input of ownInputs) {
				let inputHydrated = {
					...input,
					__proto__: Input$6.prototype
				};
				if (inputHydrated.map) inputHydrated.map = {
					...inputHydrated.map,
					__proto__: PreviousMap.prototype
				};
				inputs.push(inputHydrated);
			}
		}
		if (defaults$2.nodes) defaults$2.nodes = json.nodes.map((n$4) => fromJSON$2(n$4, inputs));
		if (defaults$2.source) {
			let { inputId,...source } = defaults$2.source;
			defaults$2.source = source;
			if (inputId != null) defaults$2.source.input = inputs[inputId];
		}
		if (defaults$2.type === "root") return new Root$8(defaults$2);
		else if (defaults$2.type === "decl") return new Declaration$3(defaults$2);
		else if (defaults$2.type === "rule") return new Rule$3(defaults$2);
		else if (defaults$2.type === "comment") return new Comment$10(defaults$2);
		else if (defaults$2.type === "atrule") return new AtRule$4(defaults$2);
		else throw new Error("Unknown node type: " + json.type);
	}
	module.exports = fromJSON$2;
	fromJSON$2.default = fromJSON$2;
} });

//#endregion
//#region node_modules/postcss/lib/map-generator.js
var require_map_generator = __commonJS({ "node_modules/postcss/lib/map-generator.js"(exports, module) {
	let { dirname: dirname$1, relative: relative$1, resolve: resolve$3, sep } = __require("path");
	let { SourceMapConsumer: SourceMapConsumer$2, SourceMapGenerator: SourceMapGenerator$3 } = require_source_map$2();
	let { pathToFileURL } = __require("url");
	let Input$5 = require_input();
	let sourceMapAvailable = Boolean(SourceMapConsumer$2 && SourceMapGenerator$3);
	let pathAvailable = Boolean(dirname$1 && resolve$3 && relative$1 && sep);
	var MapGenerator$2 = class {
		constructor(stringify$17, root$5, opts, cssString) {
			this.stringify = stringify$17;
			this.mapOpts = opts.map || {};
			this.root = root$5;
			this.opts = opts;
			this.css = cssString;
			this.originalCSS = cssString;
			this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
			this.memoizedFileURLs = new Map();
			this.memoizedPaths = new Map();
			this.memoizedURLs = new Map();
		}
		addAnnotation() {
			let content;
			if (this.isInline()) content = "data:application/json;base64," + this.toBase64(this.map.toString());
			else if (typeof this.mapOpts.annotation === "string") content = this.mapOpts.annotation;
			else if (typeof this.mapOpts.annotation === "function") content = this.mapOpts.annotation(this.opts.to, this.root);
			else content = this.outputFile() + ".map";
			let eol = "\n";
			if (this.css.includes("\r\n")) eol = "\r\n";
			this.css += eol + "/*# sourceMappingURL=" + content + " */";
		}
		applyPrevMaps() {
			for (let prev of this.previous()) {
				let from = this.toUrl(this.path(prev.file));
				let root$5 = prev.root || dirname$1(prev.file);
				let map;
				if (this.mapOpts.sourcesContent === false) {
					map = new SourceMapConsumer$2(prev.text);
					if (map.sourcesContent) map.sourcesContent = null;
				} else map = prev.consumer();
				this.map.applySourceMap(map, from, this.toUrl(this.path(root$5)));
			}
		}
		clearAnnotation() {
			if (this.mapOpts.annotation === false) return;
			if (this.root) {
				let node;
				for (let i$6 = this.root.nodes.length - 1; i$6 >= 0; i$6--) {
					node = this.root.nodes[i$6];
					if (node.type !== "comment") continue;
					if (node.text.startsWith("# sourceMappingURL=")) this.root.removeChild(i$6);
				}
			} else if (this.css) this.css = this.css.replace(/\n*\/\*#[\S\s]*?\*\/$/gm, "");
		}
		generate() {
			this.clearAnnotation();
			if (pathAvailable && sourceMapAvailable && this.isMap()) return this.generateMap();
			else {
				let result = "";
				this.stringify(this.root, (i$6) => {
					result += i$6;
				});
				return [result];
			}
		}
		generateMap() {
			if (this.root) this.generateString();
			else if (this.previous().length === 1) {
				let prev = this.previous()[0].consumer();
				prev.file = this.outputFile();
				this.map = SourceMapGenerator$3.fromSourceMap(prev, { ignoreInvalidMapping: true });
			} else {
				this.map = new SourceMapGenerator$3({
					file: this.outputFile(),
					ignoreInvalidMapping: true
				});
				this.map.addMapping({
					generated: {
						column: 0,
						line: 1
					},
					original: {
						column: 0,
						line: 1
					},
					source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
				});
			}
			if (this.isSourcesContent()) this.setSourcesContent();
			if (this.root && this.previous().length > 0) this.applyPrevMaps();
			if (this.isAnnotation()) this.addAnnotation();
			if (this.isInline()) return [this.css];
			else return [this.css, this.map];
		}
		generateString() {
			this.css = "";
			this.map = new SourceMapGenerator$3({
				file: this.outputFile(),
				ignoreInvalidMapping: true
			});
			let line = 1;
			let column = 1;
			let noSource = "<no source>";
			let mapping = {
				generated: {
					column: 0,
					line: 0
				},
				original: {
					column: 0,
					line: 0
				},
				source: ""
			};
			let last$2, lines;
			this.stringify(this.root, (str$4, node, type) => {
				this.css += str$4;
				if (node && type !== "end") {
					mapping.generated.line = line;
					mapping.generated.column = column - 1;
					if (node.source && node.source.start) {
						mapping.source = this.sourcePath(node);
						mapping.original.line = node.source.start.line;
						mapping.original.column = node.source.start.column - 1;
						this.map.addMapping(mapping);
					} else {
						mapping.source = noSource;
						mapping.original.line = 1;
						mapping.original.column = 0;
						this.map.addMapping(mapping);
					}
				}
				lines = str$4.match(/\n/g);
				if (lines) {
					line += lines.length;
					last$2 = str$4.lastIndexOf("\n");
					column = str$4.length - last$2;
				} else column += str$4.length;
				if (node && type !== "start") {
					let p$2 = node.parent || { raws: {} };
					let childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
					if (!childless || node !== p$2.last || p$2.raws.semicolon) if (node.source && node.source.end) {
						mapping.source = this.sourcePath(node);
						mapping.original.line = node.source.end.line;
						mapping.original.column = node.source.end.column - 1;
						mapping.generated.line = line;
						mapping.generated.column = column - 2;
						this.map.addMapping(mapping);
					} else {
						mapping.source = noSource;
						mapping.original.line = 1;
						mapping.original.column = 0;
						mapping.generated.line = line;
						mapping.generated.column = column - 1;
						this.map.addMapping(mapping);
					}
				}
			});
		}
		isAnnotation() {
			if (this.isInline()) return true;
			if (typeof this.mapOpts.annotation !== "undefined") return this.mapOpts.annotation;
			if (this.previous().length) return this.previous().some((i$6) => i$6.annotation);
			return true;
		}
		isInline() {
			if (typeof this.mapOpts.inline !== "undefined") return this.mapOpts.inline;
			let annotation = this.mapOpts.annotation;
			if (typeof annotation !== "undefined" && annotation !== true) return false;
			if (this.previous().length) return this.previous().some((i$6) => i$6.inline);
			return true;
		}
		isMap() {
			if (typeof this.opts.map !== "undefined") return !!this.opts.map;
			return this.previous().length > 0;
		}
		isSourcesContent() {
			if (typeof this.mapOpts.sourcesContent !== "undefined") return this.mapOpts.sourcesContent;
			if (this.previous().length) return this.previous().some((i$6) => i$6.withContent());
			return true;
		}
		outputFile() {
			if (this.opts.to) return this.path(this.opts.to);
			else if (this.opts.from) return this.path(this.opts.from);
			else return "to.css";
		}
		path(file$2) {
			if (this.mapOpts.absolute) return file$2;
			if (file$2.charCodeAt(0) === 60) return file$2;
			if (/^\w+:\/\//.test(file$2)) return file$2;
			let cached = this.memoizedPaths.get(file$2);
			if (cached) return cached;
			let from = this.opts.to ? dirname$1(this.opts.to) : ".";
			if (typeof this.mapOpts.annotation === "string") from = dirname$1(resolve$3(from, this.mapOpts.annotation));
			let path$28 = relative$1(from, file$2);
			this.memoizedPaths.set(file$2, path$28);
			return path$28;
		}
		previous() {
			if (!this.previousMaps) {
				this.previousMaps = [];
				if (this.root) this.root.walk((node) => {
					if (node.source && node.source.input.map) {
						let map = node.source.input.map;
						if (!this.previousMaps.includes(map)) this.previousMaps.push(map);
					}
				});
				else {
					let input = new Input$5(this.originalCSS, this.opts);
					if (input.map) this.previousMaps.push(input.map);
				}
			}
			return this.previousMaps;
		}
		setSourcesContent() {
			let already = {};
			if (this.root) this.root.walk((node) => {
				if (node.source) {
					let from = node.source.input.from;
					if (from && !already[from]) {
						already[from] = true;
						let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
						this.map.setSourceContent(fromUrl, node.source.input.css);
					}
				}
			});
			else if (this.css) {
				let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
				this.map.setSourceContent(from, this.css);
			}
		}
		sourcePath(node) {
			if (this.mapOpts.from) return this.toUrl(this.mapOpts.from);
			else if (this.usesFileUrls) return this.toFileUrl(node.source.input.from);
			else return this.toUrl(this.path(node.source.input.from));
		}
		toBase64(str$4) {
			if (Buffer) return Buffer.from(str$4).toString("base64");
			else return window.btoa(unescape(encodeURIComponent(str$4)));
		}
		toFileUrl(path$28) {
			let cached = this.memoizedFileURLs.get(path$28);
			if (cached) return cached;
			if (pathToFileURL) {
				let fileURL = pathToFileURL(path$28).toString();
				this.memoizedFileURLs.set(path$28, fileURL);
				return fileURL;
			} else throw new Error("`map.absolute` option is not available in this PostCSS build");
		}
		toUrl(path$28) {
			let cached = this.memoizedURLs.get(path$28);
			if (cached) return cached;
			if (sep === "\\") path$28 = path$28.replace(/\\/g, "/");
			let url$1 = encodeURI(path$28).replace(/[#?]/g, encodeURIComponent);
			this.memoizedURLs.set(path$28, url$1);
			return url$1;
		}
	};
	module.exports = MapGenerator$2;
} });

//#endregion
//#region node_modules/postcss/lib/parser.js
var require_parser$5 = __commonJS({ "node_modules/postcss/lib/parser.js"(exports, module) {
	let AtRule$3 = require_at_rule();
	let Comment$9 = require_comment$3();
	let Declaration$2 = require_declaration();
	let Root$7 = require_root$3();
	let Rule$2 = require_rule();
	let tokenizer$1 = require_tokenize$4();
	const SAFE_COMMENT_NEIGHBOR = {
		empty: true,
		space: true
	};
	function findLastWithPosition(tokens$3) {
		for (let i$6 = tokens$3.length - 1; i$6 >= 0; i$6--) {
			let token$1 = tokens$3[i$6];
			let pos = token$1[3] || token$1[2];
			if (pos) return pos;
		}
	}
	var Parser$9 = class {
		constructor(input) {
			this.input = input;
			this.root = new Root$7();
			this.current = this.root;
			this.spaces = "";
			this.semicolon = false;
			this.createTokenizer();
			this.root.source = {
				input,
				start: {
					column: 1,
					line: 1,
					offset: 0
				}
			};
		}
		atrule(token$1) {
			let node = new AtRule$3();
			node.name = token$1[1].slice(1);
			if (node.name === "") this.unnamedAtrule(node, token$1);
			this.init(node, token$1[2]);
			let type;
			let prev;
			let shift;
			let last$2 = false;
			let open = false;
			let params = [];
			let brackets$1 = [];
			while (!this.tokenizer.endOfFile()) {
				token$1 = this.tokenizer.nextToken();
				type = token$1[0];
				if (type === "(" || type === "[") brackets$1.push(type === "(" ? ")" : "]");
				else if (type === "{" && brackets$1.length > 0) brackets$1.push("}");
				else if (type === brackets$1[brackets$1.length - 1]) brackets$1.pop();
				if (brackets$1.length === 0) if (type === ";") {
					node.source.end = this.getPosition(token$1[2]);
					node.source.end.offset++;
					this.semicolon = true;
					break;
				} else if (type === "{") {
					open = true;
					break;
				} else if (type === "}") {
					if (params.length > 0) {
						shift = params.length - 1;
						prev = params[shift];
						while (prev && prev[0] === "space") prev = params[--shift];
						if (prev) {
							node.source.end = this.getPosition(prev[3] || prev[2]);
							node.source.end.offset++;
						}
					}
					this.end(token$1);
					break;
				} else params.push(token$1);
				else params.push(token$1);
				if (this.tokenizer.endOfFile()) {
					last$2 = true;
					break;
				}
			}
			node.raws.between = this.spacesAndCommentsFromEnd(params);
			if (params.length) {
				node.raws.afterName = this.spacesAndCommentsFromStart(params);
				this.raw(node, "params", params);
				if (last$2) {
					token$1 = params[params.length - 1];
					node.source.end = this.getPosition(token$1[3] || token$1[2]);
					node.source.end.offset++;
					this.spaces = node.raws.between;
					node.raws.between = "";
				}
			} else {
				node.raws.afterName = "";
				node.params = "";
			}
			if (open) {
				node.nodes = [];
				this.current = node;
			}
		}
		checkMissedSemicolon(tokens$3) {
			let colon$4 = this.colon(tokens$3);
			if (colon$4 === false) return;
			let founded = 0;
			let token$1;
			for (let j$1 = colon$4 - 1; j$1 >= 0; j$1--) {
				token$1 = tokens$3[j$1];
				if (token$1[0] !== "space") {
					founded += 1;
					if (founded === 2) break;
				}
			}
			throw this.input.error("Missed semicolon", token$1[0] === "word" ? token$1[3] + 1 : token$1[2]);
		}
		colon(tokens$3) {
			let brackets$1 = 0;
			let prev, token$1, type;
			for (let [i$6, element] of tokens$3.entries()) {
				token$1 = element;
				type = token$1[0];
				if (type === "(") brackets$1 += 1;
				if (type === ")") brackets$1 -= 1;
				if (brackets$1 === 0 && type === ":") if (!prev) this.doubleColon(token$1);
				else if (prev[0] === "word" && prev[1] === "progid") continue;
				else return i$6;
				prev = token$1;
			}
			return false;
		}
		comment(token$1) {
			let node = new Comment$9();
			this.init(node, token$1[2]);
			node.source.end = this.getPosition(token$1[3] || token$1[2]);
			node.source.end.offset++;
			let text = token$1[1].slice(2, -2);
			if (/^\s*$/.test(text)) {
				node.text = "";
				node.raws.left = text;
				node.raws.right = "";
			} else {
				let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
				node.text = match[2];
				node.raws.left = match[1];
				node.raws.right = match[3];
			}
		}
		createTokenizer() {
			this.tokenizer = tokenizer$1(this.input);
		}
		decl(tokens$3, customProperty) {
			let node = new Declaration$2();
			this.init(node, tokens$3[0][2]);
			let last$2 = tokens$3[tokens$3.length - 1];
			if (last$2[0] === ";") {
				this.semicolon = true;
				tokens$3.pop();
			}
			node.source.end = this.getPosition(last$2[3] || last$2[2] || findLastWithPosition(tokens$3));
			node.source.end.offset++;
			while (tokens$3[0][0] !== "word") {
				if (tokens$3.length === 1) this.unknownWord(tokens$3);
				node.raws.before += tokens$3.shift()[1];
			}
			node.source.start = this.getPosition(tokens$3[0][2]);
			node.prop = "";
			while (tokens$3.length) {
				let type = tokens$3[0][0];
				if (type === ":" || type === "space" || type === "comment") break;
				node.prop += tokens$3.shift()[1];
			}
			node.raws.between = "";
			let token$1;
			while (tokens$3.length) {
				token$1 = tokens$3.shift();
				if (token$1[0] === ":") {
					node.raws.between += token$1[1];
					break;
				} else {
					if (token$1[0] === "word" && /\w/.test(token$1[1])) this.unknownWord([token$1]);
					node.raws.between += token$1[1];
				}
			}
			if (node.prop[0] === "_" || node.prop[0] === "*") {
				node.raws.before += node.prop[0];
				node.prop = node.prop.slice(1);
			}
			let firstSpaces = [];
			let next;
			while (tokens$3.length) {
				next = tokens$3[0][0];
				if (next !== "space" && next !== "comment") break;
				firstSpaces.push(tokens$3.shift());
			}
			this.precheckMissedSemicolon(tokens$3);
			for (let i$6 = tokens$3.length - 1; i$6 >= 0; i$6--) {
				token$1 = tokens$3[i$6];
				if (token$1[1].toLowerCase() === "!important") {
					node.important = true;
					let string$3 = this.stringFrom(tokens$3, i$6);
					string$3 = this.spacesFromEnd(tokens$3) + string$3;
					if (string$3 !== " !important") node.raws.important = string$3;
					break;
				} else if (token$1[1].toLowerCase() === "important") {
					let cache$3 = tokens$3.slice(0);
					let str$4 = "";
					for (let j$1 = i$6; j$1 > 0; j$1--) {
						let type = cache$3[j$1][0];
						if (str$4.trim().startsWith("!") && type !== "space") break;
						str$4 = cache$3.pop()[1] + str$4;
					}
					if (str$4.trim().startsWith("!")) {
						node.important = true;
						node.raws.important = str$4;
						tokens$3 = cache$3;
					}
				}
				if (token$1[0] !== "space" && token$1[0] !== "comment") break;
			}
			let hasWord = tokens$3.some((i$6) => i$6[0] !== "space" && i$6[0] !== "comment");
			if (hasWord) {
				node.raws.between += firstSpaces.map((i$6) => i$6[1]).join("");
				firstSpaces = [];
			}
			this.raw(node, "value", firstSpaces.concat(tokens$3), customProperty);
			if (node.value.includes(":") && !customProperty) this.checkMissedSemicolon(tokens$3);
		}
		doubleColon(token$1) {
			throw this.input.error("Double colon", { offset: token$1[2] }, { offset: token$1[2] + token$1[1].length });
		}
		emptyRule(token$1) {
			let node = new Rule$2();
			this.init(node, token$1[2]);
			node.selector = "";
			node.raws.between = "";
			this.current = node;
		}
		end(token$1) {
			if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
			this.semicolon = false;
			this.current.raws.after = (this.current.raws.after || "") + this.spaces;
			this.spaces = "";
			if (this.current.parent) {
				this.current.source.end = this.getPosition(token$1[2]);
				this.current.source.end.offset++;
				this.current = this.current.parent;
			} else this.unexpectedClose(token$1);
		}
		endFile() {
			if (this.current.parent) this.unclosedBlock();
			if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
			this.current.raws.after = (this.current.raws.after || "") + this.spaces;
			this.root.source.end = this.getPosition(this.tokenizer.position());
		}
		freeSemicolon(token$1) {
			this.spaces += token$1[1];
			if (this.current.nodes) {
				let prev = this.current.nodes[this.current.nodes.length - 1];
				if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
					prev.raws.ownSemicolon = this.spaces;
					this.spaces = "";
					prev.source.end = this.getPosition(token$1[2]);
					prev.source.end.offset += prev.raws.ownSemicolon.length;
				}
			}
		}
		getPosition(offset) {
			let pos = this.input.fromOffset(offset);
			return {
				column: pos.col,
				line: pos.line,
				offset
			};
		}
		init(node, offset) {
			this.current.push(node);
			node.source = {
				input: this.input,
				start: this.getPosition(offset)
			};
			node.raws.before = this.spaces;
			this.spaces = "";
			if (node.type !== "comment") this.semicolon = false;
		}
		other(start) {
			let end = false;
			let type = null;
			let colon$4 = false;
			let bracket = null;
			let brackets$1 = [];
			let customProperty = start[1].startsWith("--");
			let tokens$3 = [];
			let token$1 = start;
			while (token$1) {
				type = token$1[0];
				tokens$3.push(token$1);
				if (type === "(" || type === "[") {
					if (!bracket) bracket = token$1;
					brackets$1.push(type === "(" ? ")" : "]");
				} else if (customProperty && colon$4 && type === "{") {
					if (!bracket) bracket = token$1;
					brackets$1.push("}");
				} else if (brackets$1.length === 0) {
					if (type === ";") if (colon$4) {
						this.decl(tokens$3, customProperty);
						return;
					} else break;
					else if (type === "{") {
						this.rule(tokens$3);
						return;
					} else if (type === "}") {
						this.tokenizer.back(tokens$3.pop());
						end = true;
						break;
					} else if (type === ":") colon$4 = true;
				} else if (type === brackets$1[brackets$1.length - 1]) {
					brackets$1.pop();
					if (brackets$1.length === 0) bracket = null;
				}
				token$1 = this.tokenizer.nextToken();
			}
			if (this.tokenizer.endOfFile()) end = true;
			if (brackets$1.length > 0) this.unclosedBracket(bracket);
			if (end && colon$4) {
				if (!customProperty) while (tokens$3.length) {
					token$1 = tokens$3[tokens$3.length - 1][0];
					if (token$1 !== "space" && token$1 !== "comment") break;
					this.tokenizer.back(tokens$3.pop());
				}
				this.decl(tokens$3, customProperty);
			} else this.unknownWord(tokens$3);
		}
		parse() {
			let token$1;
			while (!this.tokenizer.endOfFile()) {
				token$1 = this.tokenizer.nextToken();
				switch (token$1[0]) {
					case "space":
						this.spaces += token$1[1];
						break;
					case ";":
						this.freeSemicolon(token$1);
						break;
					case "}":
						this.end(token$1);
						break;
					case "comment":
						this.comment(token$1);
						break;
					case "at-word":
						this.atrule(token$1);
						break;
					case "{":
						this.emptyRule(token$1);
						break;
					default:
						this.other(token$1);
						break;
				}
			}
			this.endFile();
		}
		precheckMissedSemicolon() {}
		raw(node, prop, tokens$3, customProperty) {
			let token$1, type;
			let length = tokens$3.length;
			let value = "";
			let clean = true;
			let next, prev;
			for (let i$6 = 0; i$6 < length; i$6 += 1) {
				token$1 = tokens$3[i$6];
				type = token$1[0];
				if (type === "space" && i$6 === length - 1 && !customProperty) clean = false;
				else if (type === "comment") {
					prev = tokens$3[i$6 - 1] ? tokens$3[i$6 - 1][0] : "empty";
					next = tokens$3[i$6 + 1] ? tokens$3[i$6 + 1][0] : "empty";
					if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) if (value.slice(-1) === ",") clean = false;
					else value += token$1[1];
					else clean = false;
				} else value += token$1[1];
			}
			if (!clean) {
				let raw = tokens$3.reduce((all, i$6) => all + i$6[1], "");
				node.raws[prop] = {
					raw,
					value
				};
			}
			node[prop] = value;
		}
		rule(tokens$3) {
			tokens$3.pop();
			let node = new Rule$2();
			this.init(node, tokens$3[0][2]);
			node.raws.between = this.spacesAndCommentsFromEnd(tokens$3);
			this.raw(node, "selector", tokens$3);
			this.current = node;
		}
		spacesAndCommentsFromEnd(tokens$3) {
			let lastTokenType;
			let spaces = "";
			while (tokens$3.length) {
				lastTokenType = tokens$3[tokens$3.length - 1][0];
				if (lastTokenType !== "space" && lastTokenType !== "comment") break;
				spaces = tokens$3.pop()[1] + spaces;
			}
			return spaces;
		}
		spacesAndCommentsFromStart(tokens$3) {
			let next;
			let spaces = "";
			while (tokens$3.length) {
				next = tokens$3[0][0];
				if (next !== "space" && next !== "comment") break;
				spaces += tokens$3.shift()[1];
			}
			return spaces;
		}
		spacesFromEnd(tokens$3) {
			let lastTokenType;
			let spaces = "";
			while (tokens$3.length) {
				lastTokenType = tokens$3[tokens$3.length - 1][0];
				if (lastTokenType !== "space") break;
				spaces = tokens$3.pop()[1] + spaces;
			}
			return spaces;
		}
		stringFrom(tokens$3, from) {
			let result = "";
			for (let i$6 = from; i$6 < tokens$3.length; i$6++) result += tokens$3[i$6][1];
			tokens$3.splice(from, tokens$3.length - from);
			return result;
		}
		unclosedBlock() {
			let pos = this.current.source.start;
			throw this.input.error("Unclosed block", pos.line, pos.column);
		}
		unclosedBracket(bracket) {
			throw this.input.error("Unclosed bracket", { offset: bracket[2] }, { offset: bracket[2] + 1 });
		}
		unexpectedClose(token$1) {
			throw this.input.error("Unexpected }", { offset: token$1[2] }, { offset: token$1[2] + 1 });
		}
		unknownWord(tokens$3) {
			throw this.input.error("Unknown word " + tokens$3[0][1], { offset: tokens$3[0][2] }, { offset: tokens$3[0][2] + tokens$3[0][1].length });
		}
		unnamedAtrule(node, token$1) {
			throw this.input.error("At-rule without name", { offset: token$1[2] }, { offset: token$1[2] + token$1[1].length });
		}
	};
	module.exports = Parser$9;
} });

//#endregion
//#region node_modules/postcss/lib/parse.js
var require_parse$3 = __commonJS({ "node_modules/postcss/lib/parse.js"(exports, module) {
	let Container$10 = require_container$3();
	let Input$4 = require_input();
	let Parser$8 = require_parser$5();
	function parse$14(css, opts) {
		let input = new Input$4(css, opts);
		let parser$5 = new Parser$8(input);
		try {
			parser$5.parse();
		} catch (e$2) {
			throw e$2;
		}
		return parser$5.root;
	}
	module.exports = parse$14;
	parse$14.default = parse$14;
	Container$10.registerParse(parse$14);
} });

//#endregion
//#region node_modules/postcss/lib/warning.js
var require_warning = __commonJS({ "node_modules/postcss/lib/warning.js"(exports, module) {
	var Warning$4 = class {
		constructor(text, opts = {}) {
			this.type = "warning";
			this.text = text;
			if (opts.node && opts.node.source) {
				let range$2 = opts.node.rangeBy(opts);
				this.line = range$2.start.line;
				this.column = range$2.start.column;
				this.endLine = range$2.end.line;
				this.endColumn = range$2.end.column;
			}
			for (let opt in opts) this[opt] = opts[opt];
		}
		toString() {
			if (this.node) return this.node.error(this.text, {
				index: this.index,
				plugin: this.plugin,
				word: this.word
			}).message;
			if (this.plugin) return this.plugin + ": " + this.text;
			return this.text;
		}
	};
	module.exports = Warning$4;
	Warning$4.default = Warning$4;
} });

//#endregion
//#region node_modules/postcss/lib/result.js
var require_result = __commonJS({ "node_modules/postcss/lib/result.js"(exports, module) {
	let Warning$3 = require_warning();
	var Result$4 = class {
		get content() {
			return this.css;
		}
		constructor(processor, root$5, opts) {
			this.processor = processor;
			this.messages = [];
			this.root = root$5;
			this.opts = opts;
			this.css = void 0;
			this.map = void 0;
		}
		toString() {
			return this.css;
		}
		warn(text, opts = {}) {
			if (!opts.plugin) {
				if (this.lastPlugin && this.lastPlugin.postcssPlugin) opts.plugin = this.lastPlugin.postcssPlugin;
			}
			let warning = new Warning$3(text, opts);
			this.messages.push(warning);
			return warning;
		}
		warnings() {
			return this.messages.filter((i$6) => i$6.type === "warning");
		}
	};
	module.exports = Result$4;
	Result$4.default = Result$4;
} });

//#endregion
//#region node_modules/postcss/lib/warn-once.js
var require_warn_once = __commonJS({ "node_modules/postcss/lib/warn-once.js"(exports, module) {
	let printed = {};
	module.exports = function warnOnce$3(message) {
		if (printed[message]) return;
		printed[message] = true;
		if (typeof console !== "undefined" && console.warn) console.warn(message);
	};
} });

//#endregion
//#region node_modules/postcss/lib/lazy-result.js
var require_lazy_result = __commonJS({ "node_modules/postcss/lib/lazy-result.js"(exports, module) {
	let Container$9 = require_container$3();
	let Document$5 = require_document();
	let MapGenerator$1 = require_map_generator();
	let parse$13 = require_parse$3();
	let Result$3 = require_result();
	let Root$6 = require_root$3();
	let stringify$10 = require_stringify$2();
	let { isClean, my } = require_symbols();
	let warnOnce$2 = require_warn_once();
	const TYPE_TO_CLASS_NAME = {
		atrule: "AtRule",
		comment: "Comment",
		decl: "Declaration",
		document: "Document",
		root: "Root",
		rule: "Rule"
	};
	const PLUGIN_PROPS = {
		AtRule: true,
		AtRuleExit: true,
		Comment: true,
		CommentExit: true,
		Declaration: true,
		DeclarationExit: true,
		Document: true,
		DocumentExit: true,
		Once: true,
		OnceExit: true,
		postcssPlugin: true,
		prepare: true,
		Root: true,
		RootExit: true,
		Rule: true,
		RuleExit: true
	};
	const NOT_VISITORS = {
		Once: true,
		postcssPlugin: true,
		prepare: true
	};
	const CHILDREN = 0;
	function isPromise$1(obj) {
		return typeof obj === "object" && typeof obj.then === "function";
	}
	function getEvents(node) {
		let key = false;
		let type = TYPE_TO_CLASS_NAME[node.type];
		if (node.type === "decl") key = node.prop.toLowerCase();
		else if (node.type === "atrule") key = node.name.toLowerCase();
		if (key && node.append) return [
			type,
			type + "-" + key,
			CHILDREN,
			type + "Exit",
			type + "Exit-" + key
		];
		else if (key) return [
			type,
			type + "-" + key,
			type + "Exit",
			type + "Exit-" + key
		];
		else if (node.append) return [
			type,
			CHILDREN,
			type + "Exit"
		];
		else return [type, type + "Exit"];
	}
	function toStack(node) {
		let events;
		if (node.type === "document") events = [
			"Document",
			CHILDREN,
			"DocumentExit"
		];
		else if (node.type === "root") events = [
			"Root",
			CHILDREN,
			"RootExit"
		];
		else events = getEvents(node);
		return {
			eventIndex: 0,
			events,
			iterator: 0,
			node,
			visitorIndex: 0,
			visitors: []
		};
	}
	function cleanMarks(node) {
		node[isClean] = false;
		if (node.nodes) node.nodes.forEach((i$6) => cleanMarks(i$6));
		return node;
	}
	let postcss$2 = {};
	var LazyResult$2 = class LazyResult$2 {
		get content() {
			return this.stringify().content;
		}
		get css() {
			return this.stringify().css;
		}
		get map() {
			return this.stringify().map;
		}
		get messages() {
			return this.sync().messages;
		}
		get opts() {
			return this.result.opts;
		}
		get processor() {
			return this.result.processor;
		}
		get root() {
			return this.sync().root;
		}
		get [Symbol.toStringTag]() {
			return "LazyResult";
		}
		constructor(processor, css, opts) {
			this.stringified = false;
			this.processed = false;
			let root$5;
			if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) root$5 = cleanMarks(css);
			else if (css instanceof LazyResult$2 || css instanceof Result$3) {
				root$5 = cleanMarks(css.root);
				if (css.map) {
					if (typeof opts.map === "undefined") opts.map = {};
					if (!opts.map.inline) opts.map.inline = false;
					opts.map.prev = css.map;
				}
			} else {
				let parser$5 = parse$13;
				if (opts.syntax) parser$5 = opts.syntax.parse;
				if (opts.parser) parser$5 = opts.parser;
				if (parser$5.parse) parser$5 = parser$5.parse;
				try {
					root$5 = parser$5(css, opts);
				} catch (error) {
					this.processed = true;
					this.error = error;
				}
				if (root$5 && !root$5[my])
 /* c8 ignore next 2 */
				Container$9.rebuild(root$5);
			}
			this.result = new Result$3(processor, root$5, opts);
			this.helpers = {
				...postcss$2,
				postcss: postcss$2,
				result: this.result
			};
			this.plugins = this.processor.plugins.map((plugin$2) => {
				if (typeof plugin$2 === "object" && plugin$2.prepare) return {
					...plugin$2,
					...plugin$2.prepare(this.result)
				};
				else return plugin$2;
			});
		}
		async() {
			if (this.error) return Promise.reject(this.error);
			if (this.processed) return Promise.resolve(this.result);
			if (!this.processing) this.processing = this.runAsync();
			return this.processing;
		}
		catch(onRejected) {
			return this.async().catch(onRejected);
		}
		finally(onFinally) {
			return this.async().then(onFinally, onFinally);
		}
		getAsyncError() {
			throw new Error("Use process(css).then(cb) to work with async plugins");
		}
		handleError(error, node) {
			let plugin$2 = this.result.lastPlugin;
			try {
				if (node) node.addToError(error);
				this.error = error;
				if (error.name === "CssSyntaxError" && !error.plugin) {
					error.plugin = plugin$2.postcssPlugin;
					error.setMessage();
				} else if (plugin$2.postcssVersion) {}
			} catch (err) {
				/* c8 ignore next 3 */
				if (console && console.error) console.error(err);
			}
			return error;
		}
		prepareVisitors() {
			this.listeners = {};
			let add = (plugin$2, type, cb) => {
				if (!this.listeners[type]) this.listeners[type] = [];
				this.listeners[type].push([plugin$2, cb]);
			};
			for (let plugin$2 of this.plugins) if (typeof plugin$2 === "object") for (let event in plugin$2) {
				if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) throw new Error(`Unknown event ${event} in ${plugin$2.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);
				if (!NOT_VISITORS[event]) {
					if (typeof plugin$2[event] === "object") for (let filter$2 in plugin$2[event]) if (filter$2 === "*") add(plugin$2, event, plugin$2[event][filter$2]);
					else add(plugin$2, event + "-" + filter$2.toLowerCase(), plugin$2[event][filter$2]);
					else if (typeof plugin$2[event] === "function") add(plugin$2, event, plugin$2[event]);
				}
			}
			this.hasListener = Object.keys(this.listeners).length > 0;
		}
		async runAsync() {
			this.plugin = 0;
			for (let i$6 = 0; i$6 < this.plugins.length; i$6++) {
				let plugin$2 = this.plugins[i$6];
				let promise = this.runOnRoot(plugin$2);
				if (isPromise$1(promise)) try {
					await promise;
				} catch (error) {
					throw this.handleError(error);
				}
			}
			this.prepareVisitors();
			if (this.hasListener) {
				let root$5 = this.result.root;
				while (!root$5[isClean]) {
					root$5[isClean] = true;
					let stack = [toStack(root$5)];
					while (stack.length > 0) {
						let promise = this.visitTick(stack);
						if (isPromise$1(promise)) try {
							await promise;
						} catch (e$2) {
							let node = stack[stack.length - 1].node;
							throw this.handleError(e$2, node);
						}
					}
				}
				if (this.listeners.OnceExit) for (let [plugin$2, visitor] of this.listeners.OnceExit) {
					this.result.lastPlugin = plugin$2;
					try {
						if (root$5.type === "document") {
							let roots = root$5.nodes.map((subRoot) => visitor(subRoot, this.helpers));
							await Promise.all(roots);
						} else await visitor(root$5, this.helpers);
					} catch (e$2) {
						throw this.handleError(e$2);
					}
				}
			}
			this.processed = true;
			return this.stringify();
		}
		runOnRoot(plugin$2) {
			this.result.lastPlugin = plugin$2;
			try {
				if (typeof plugin$2 === "object" && plugin$2.Once) {
					if (this.result.root.type === "document") {
						let roots = this.result.root.nodes.map((root$5) => plugin$2.Once(root$5, this.helpers));
						if (isPromise$1(roots[0])) return Promise.all(roots);
						return roots;
					}
					return plugin$2.Once(this.result.root, this.helpers);
				} else if (typeof plugin$2 === "function") return plugin$2(this.result.root, this.result);
			} catch (error) {
				throw this.handleError(error);
			}
		}
		stringify() {
			if (this.error) throw this.error;
			if (this.stringified) return this.result;
			this.stringified = true;
			this.sync();
			let opts = this.result.opts;
			let str$4 = stringify$10;
			if (opts.syntax) str$4 = opts.syntax.stringify;
			if (opts.stringifier) str$4 = opts.stringifier;
			if (str$4.stringify) str$4 = str$4.stringify;
			let map = new MapGenerator$1(str$4, this.result.root, this.result.opts);
			let data$2 = map.generate();
			this.result.css = data$2[0];
			this.result.map = data$2[1];
			return this.result;
		}
		sync() {
			if (this.error) throw this.error;
			if (this.processed) return this.result;
			this.processed = true;
			if (this.processing) throw this.getAsyncError();
			for (let plugin$2 of this.plugins) {
				let promise = this.runOnRoot(plugin$2);
				if (isPromise$1(promise)) throw this.getAsyncError();
			}
			this.prepareVisitors();
			if (this.hasListener) {
				let root$5 = this.result.root;
				while (!root$5[isClean]) {
					root$5[isClean] = true;
					this.walkSync(root$5);
				}
				if (this.listeners.OnceExit) if (root$5.type === "document") for (let subRoot of root$5.nodes) this.visitSync(this.listeners.OnceExit, subRoot);
				else this.visitSync(this.listeners.OnceExit, root$5);
			}
			return this.result;
		}
		then(onFulfilled, onRejected) {
			return this.async().then(onFulfilled, onRejected);
		}
		toString() {
			return this.css;
		}
		visitSync(visitors$1, node) {
			for (let [plugin$2, visitor] of visitors$1) {
				this.result.lastPlugin = plugin$2;
				let promise;
				try {
					promise = visitor(node, this.helpers);
				} catch (e$2) {
					throw this.handleError(e$2, node.proxyOf);
				}
				if (node.type !== "root" && node.type !== "document" && !node.parent) return true;
				if (isPromise$1(promise)) throw this.getAsyncError();
			}
		}
		visitTick(stack) {
			let visit$1 = stack[stack.length - 1];
			let { node, visitors: visitors$1 } = visit$1;
			if (node.type !== "root" && node.type !== "document" && !node.parent) {
				stack.pop();
				return;
			}
			if (visitors$1.length > 0 && visit$1.visitorIndex < visitors$1.length) {
				let [plugin$2, visitor] = visitors$1[visit$1.visitorIndex];
				visit$1.visitorIndex += 1;
				if (visit$1.visitorIndex === visitors$1.length) {
					visit$1.visitors = [];
					visit$1.visitorIndex = 0;
				}
				this.result.lastPlugin = plugin$2;
				try {
					return visitor(node.toProxy(), this.helpers);
				} catch (e$2) {
					throw this.handleError(e$2, node);
				}
			}
			if (visit$1.iterator !== 0) {
				let iterator = visit$1.iterator;
				let child;
				while (child = node.nodes[node.indexes[iterator]]) {
					node.indexes[iterator] += 1;
					if (!child[isClean]) {
						child[isClean] = true;
						stack.push(toStack(child));
						return;
					}
				}
				visit$1.iterator = 0;
				delete node.indexes[iterator];
			}
			let events = visit$1.events;
			while (visit$1.eventIndex < events.length) {
				let event = events[visit$1.eventIndex];
				visit$1.eventIndex += 1;
				if (event === CHILDREN) {
					if (node.nodes && node.nodes.length) {
						node[isClean] = true;
						visit$1.iterator = node.getIterator();
					}
					return;
				} else if (this.listeners[event]) {
					visit$1.visitors = this.listeners[event];
					return;
				}
			}
			stack.pop();
		}
		walkSync(node) {
			node[isClean] = true;
			let events = getEvents(node);
			for (let event of events) if (event === CHILDREN) {
				if (node.nodes) node.each((child) => {
					if (!child[isClean]) this.walkSync(child);
				});
			} else {
				let visitors$1 = this.listeners[event];
				if (visitors$1) {
					if (this.visitSync(visitors$1, node.toProxy())) return;
				}
			}
		}
		warnings() {
			return this.sync().warnings();
		}
	};
	LazyResult$2.registerPostcss = (dependant) => {
		postcss$2 = dependant;
	};
	module.exports = LazyResult$2;
	LazyResult$2.default = LazyResult$2;
	Root$6.registerLazyResult(LazyResult$2);
	Document$5.registerLazyResult(LazyResult$2);
} });

//#endregion
//#region node_modules/postcss/lib/no-work-result.js
var require_no_work_result = __commonJS({ "node_modules/postcss/lib/no-work-result.js"(exports, module) {
	let MapGenerator = require_map_generator();
	let parse$12 = require_parse$3();
	const Result$2 = require_result();
	let stringify$9 = require_stringify$2();
	let warnOnce$1 = require_warn_once();
	var NoWorkResult$1 = class {
		get content() {
			return this.result.css;
		}
		get css() {
			return this.result.css;
		}
		get map() {
			return this.result.map;
		}
		get messages() {
			return [];
		}
		get opts() {
			return this.result.opts;
		}
		get processor() {
			return this.result.processor;
		}
		get root() {
			if (this._root) return this._root;
			let root$5;
			let parser$5 = parse$12;
			try {
				root$5 = parser$5(this._css, this._opts);
			} catch (error) {
				this.error = error;
			}
			if (this.error) throw this.error;
			else {
				this._root = root$5;
				return root$5;
			}
		}
		get [Symbol.toStringTag]() {
			return "NoWorkResult";
		}
		constructor(processor, css, opts) {
			css = css.toString();
			this.stringified = false;
			this._processor = processor;
			this._css = css;
			this._opts = opts;
			this._map = void 0;
			let root$5;
			let str$4 = stringify$9;
			this.result = new Result$2(this._processor, root$5, this._opts);
			this.result.css = css;
			let self$1 = this;
			Object.defineProperty(this.result, "root", { get() {
				return self$1.root;
			} });
			let map = new MapGenerator(str$4, root$5, this._opts, css);
			if (map.isMap()) {
				let [generatedCSS, generatedMap] = map.generate();
				if (generatedCSS) this.result.css = generatedCSS;
				if (generatedMap) this.result.map = generatedMap;
			} else {
				map.clearAnnotation();
				this.result.css = map.css;
			}
		}
		async() {
			if (this.error) return Promise.reject(this.error);
			return Promise.resolve(this.result);
		}
		catch(onRejected) {
			return this.async().catch(onRejected);
		}
		finally(onFinally) {
			return this.async().then(onFinally, onFinally);
		}
		sync() {
			if (this.error) throw this.error;
			return this.result;
		}
		then(onFulfilled, onRejected) {
			return this.async().then(onFulfilled, onRejected);
		}
		toString() {
			return this._css;
		}
		warnings() {
			return [];
		}
	};
	module.exports = NoWorkResult$1;
	NoWorkResult$1.default = NoWorkResult$1;
} });

//#endregion
//#region node_modules/postcss/lib/processor.js
var require_processor$3 = __commonJS({ "node_modules/postcss/lib/processor.js"(exports, module) {
	let Document$4 = require_document();
	let LazyResult$1 = require_lazy_result();
	let NoWorkResult = require_no_work_result();
	let Root$5 = require_root$3();
	var Processor$5 = class {
		constructor(plugins = []) {
			this.version = "8.5.3";
			this.plugins = this.normalize(plugins);
		}
		normalize(plugins) {
			let normalized = [];
			for (let i$6 of plugins) {
				if (i$6.postcss === true) i$6 = i$6();
				else if (i$6.postcss) i$6 = i$6.postcss;
				if (typeof i$6 === "object" && Array.isArray(i$6.plugins)) normalized = normalized.concat(i$6.plugins);
				else if (typeof i$6 === "object" && i$6.postcssPlugin) normalized.push(i$6);
				else if (typeof i$6 === "function") normalized.push(i$6);
				else if (typeof i$6 === "object" && (i$6.parse || i$6.stringify)) {} else throw new Error(i$6 + " is not a PostCSS plugin");
			}
			return normalized;
		}
		process(css, opts = {}) {
			if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) return new NoWorkResult(this, css, opts);
			else return new LazyResult$1(this, css, opts);
		}
		use(plugin$2) {
			this.plugins = this.plugins.concat(this.normalize([plugin$2]));
			return this;
		}
	};
	module.exports = Processor$5;
	Processor$5.default = Processor$5;
	Root$5.registerProcessor(Processor$5);
	Document$4.registerProcessor(Processor$5);
} });

//#endregion
//#region node_modules/postcss/lib/postcss.js
var require_postcss = __commonJS({ "node_modules/postcss/lib/postcss.js"(exports, module) {
	let AtRule$2 = require_at_rule();
	let Comment$8 = require_comment$3();
	let Container$8 = require_container$3();
	let CssSyntaxError$1 = require_css_syntax_error();
	let Declaration$1 = require_declaration();
	let Document$3 = require_document();
	let fromJSON$1 = require_fromJSON();
	let Input$3 = require_input();
	let LazyResult = require_lazy_result();
	let list$1 = require_list();
	let Node$15 = require_node$8();
	let parse$11 = require_parse$3();
	let Processor$4 = require_processor$3();
	let Result$1 = require_result();
	let Root$4 = require_root$3();
	let Rule$1 = require_rule();
	let stringify$8 = require_stringify$2();
	let Warning$2 = require_warning();
	function postcss$1(...plugins) {
		if (plugins.length === 1 && Array.isArray(plugins[0])) plugins = plugins[0];
		return new Processor$4(plugins);
	}
	postcss$1.plugin = function plugin$2(name, initializer) {
		let warningPrinted = false;
		function creator(...args) {
			if (console && console.warn && !warningPrinted) {
				warningPrinted = true;
				console.warn(name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration");
				if (process.env.LANG && process.env.LANG.startsWith("cn"))
 /* c8 ignore next 7 */
				console.warn(name + ": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226");
			}
			let transformer = initializer(...args);
			transformer.postcssPlugin = name;
			transformer.postcssVersion = new Processor$4().version;
			return transformer;
		}
		let cache$3;
		Object.defineProperty(creator, "postcss", { get() {
			if (!cache$3) cache$3 = creator();
			return cache$3;
		} });
		creator.process = function(css, processOpts, pluginOpts) {
			return postcss$1([creator(pluginOpts)]).process(css, processOpts);
		};
		return creator;
	};
	postcss$1.stringify = stringify$8;
	postcss$1.parse = parse$11;
	postcss$1.fromJSON = fromJSON$1;
	postcss$1.list = list$1;
	postcss$1.comment = (defaults$2) => new Comment$8(defaults$2);
	postcss$1.atRule = (defaults$2) => new AtRule$2(defaults$2);
	postcss$1.decl = (defaults$2) => new Declaration$1(defaults$2);
	postcss$1.rule = (defaults$2) => new Rule$1(defaults$2);
	postcss$1.root = (defaults$2) => new Root$4(defaults$2);
	postcss$1.document = (defaults$2) => new Document$3(defaults$2);
	postcss$1.CssSyntaxError = CssSyntaxError$1;
	postcss$1.Declaration = Declaration$1;
	postcss$1.Container = Container$8;
	postcss$1.Processor = Processor$4;
	postcss$1.Document = Document$3;
	postcss$1.Comment = Comment$8;
	postcss$1.Warning = Warning$2;
	postcss$1.AtRule = AtRule$2;
	postcss$1.Result = Result$1;
	postcss$1.Input = Input$3;
	postcss$1.Rule = Rule$1;
	postcss$1.Root = Root$4;
	postcss$1.Node = Node$15;
	LazyResult.registerPostcss(postcss$1);
	module.exports = postcss$1;
	postcss$1.default = postcss$1;
} });
var import_postcss = __toESM(require_postcss(), 1);

//#endregion
//#region node_modules/postcss/lib/postcss.mjs
var postcss_default = import_postcss.default;
const stringify$7 = import_postcss.default.stringify;
const fromJSON = import_postcss.default.fromJSON;
const plugin$1 = import_postcss.default.plugin;
const parse$10 = import_postcss.default.parse;
const list = import_postcss.default.list;
const document$1 = import_postcss.default.document;
const comment$6 = import_postcss.default.comment;
const atRule = import_postcss.default.atRule;
const rule = import_postcss.default.rule;
const decl = import_postcss.default.decl;
const root$4 = import_postcss.default.root;
const CssSyntaxError = import_postcss.default.CssSyntaxError;
const Declaration = import_postcss.default.Declaration;
const Container$7 = import_postcss.default.Container;
const Processor$3 = import_postcss.default.Processor;
const Document$2 = import_postcss.default.Document;
const Comment$7 = import_postcss.default.Comment;
const Warning$1 = import_postcss.default.Warning;
const AtRule$1 = import_postcss.default.AtRule;
const Result = import_postcss.default.Result;
const Input$2 = import_postcss.default.Input;
const Rule = import_postcss.default.Rule;
const Root$3 = import_postcss.default.Root;
const Node$14 = import_postcss.default.Node;

//#endregion
//#region node_modules/postcss-values-parser/lib/walker.js
var require_walker = __commonJS({ "node_modules/postcss-values-parser/lib/walker.js"(exports, module) {
	const Container$6 = require_container$3();
	const registerWalker$9 = (constructor) => {
		let walkerName = `walk${constructor.name}`;
		if (walkerName.lastIndexOf("s") !== walkerName.length - 1) walkerName += "s";
		/* istanbul ignore next */
		if (Container$6.prototype[walkerName]) return;
		Container$6.prototype[walkerName] = function walker(callback) {
			return this.walkType(constructor, callback);
		};
	};
	Container$6.prototype.walkType = function walkType(type, callback) {
		/* istanbul ignore next */
		if (!type || !callback) throw new Error("Parameters {type} and {callback} are required.");
		const isTypeCallable = typeof type === "function";
		return this.walk((node, index$1) => {
			if (isTypeCallable && node instanceof type || !isTypeCallable && node.type === type) return callback.call(this, node, index$1);
		});
	};
	module.exports = { registerWalker: registerWalker$9 };
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/ValuesStringifier.js
var require_ValuesStringifier = __commonJS({ "node_modules/postcss-values-parser/lib/ValuesStringifier.js"(exports, module) {
	const Stringifier = require_stringifier();
	module.exports = class ValuesStringifier extends Stringifier {
		static stringify(node, builder) {
			const stringifier = new ValuesStringifier(builder);
			stringifier.stringify(node);
		}
		basic(node, value) {
			const print$1 = value || node.value;
			const after = node.raws.after ? this.raw(node, "after") || "" : "";
			this.builder(print$1, node, "start");
			this.builder(after, node, "end");
		}
		atword(...args) {
			this.atrule(...args);
		}
		comment(node) {
			if (node.inline) {
				const left = this.raw(node, "left", "commentLeft");
				const right = this.raw(node, "right", "commentRight");
				this.builder(`//${left}${node.text}${right}`, node);
			} else super.comment(node);
		}
		func(node) {
			const after = this.raw(node, "after") || "";
			this.builder(`${node.name}(`, node, "start");
			for (const child of node.nodes) {
				const before = child.raws.before ? this.raw(child, "before") : "";
				if (before) this.builder(before);
				this.stringify(child);
			}
			this.builder(`)${after}`, node, "end");
		}
		interpolation(node) {
			this.basic(node, node.prefix + node.params);
		}
		numeric(node) {
			const print$1 = node.value + node.unit;
			this.basic(node, print$1);
		}
		operator(node) {
			this.basic(node);
		}
		punctuation(node) {
			this.basic(node);
		}
		quoted(node) {
			this.basic(node);
		}
		unicodeRange(node) {
			this.basic(node);
		}
		word(node) {
			this.basic(node);
		}
	};
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/AtWord.js
var require_AtWord = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/AtWord.js"(exports, module) {
	const AtRule = require_node$8();
	const { registerWalker: registerWalker$8 } = require_walker();
	const { stringify: stringify$6 } = require_ValuesStringifier();
	var AtWord$1 = class extends AtRule {
		toString(stringifier = stringify$6) {
			return super.toString(stringifier);
		}
	};
	registerWalker$8(AtWord$1);
	module.exports = AtWord$1;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Comment.js
var require_Comment = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Comment.js"(exports, module) {
	const PostCssComment = require_comment$3();
	const { stringify: stringify$5 } = require_ValuesStringifier();
	const inlineRegex = /(\/\/)/;
	var Comment$6 = class extends PostCssComment {
		static testInline(token$1) {
			return inlineRegex.test(token$1[1]);
		}
		static tokenizeNext(tokens$3, parser$5) {
			const [first] = tokens$3;
			const newlineIndex = tokens$3.findIndex((t$9) => /\n/.test(t$9[1]));
			let bits = tokens$3;
			let rest = [];
			if (newlineIndex >= 0) {
				bits = tokens$3.slice(0, newlineIndex);
				rest = tokens$3.slice(newlineIndex);
			}
			bits = bits.map((t$9) => t$9[1]);
			const text = bits.concat("~~").join("");
			const last$2 = bits[bits.length - 1];
			const newToken = [
				"comment",
				text,
				first[2],
				first[3],
				last$2[2],
				last$2[3]
			];
			parser$5.back([newToken, ...rest]);
		}
		static tokenizeInline(tokens$3, parser$5) {
			const [first, ...rest] = tokens$3;
			const bits = first[1].split(/(\/\/.+)/).filter((t$9) => !!t$9);
			const newTokens = [];
			const [, , startLine, , endLine] = first;
			let [, , , startChar, , endChar] = first;
			for (let bit of bits) {
				const comment$7 = bit.slice(0, 2) === "//";
				const type = comment$7 ? "comment" : "word";
				if (comment$7) bit += "~~";
				if (bit !== bits[0]) startChar = endChar + 1;
				endChar = startChar + bit.length - 1;
				newTokens.push([
					type,
					bit,
					startLine,
					startChar,
					endLine,
					endChar
				]);
			}
			parser$5.back(newTokens.concat(rest));
		}
		toString(stringifier = stringify$5) {
			return super.toString(stringifier);
		}
	};
	module.exports = Comment$6;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/tokenize.js
var require_tokenize$3 = __commonJS({ "node_modules/postcss-values-parser/lib/tokenize.js"(exports, module) {
	const Input$1 = require_input();
	const tokenizer = require_tokenize$4();
	const operators$1 = [
		"*",
		"-",
		"%",
		"+",
		"/"
	];
	const operRegex$1 = /([*/])/g;
	const brackets = (token$1, tokenize$4) => {
		const [, , startLine, startChar, endLine, endChar] = token$1;
		const part = token$1[1].slice(1, token$1[1].length - 1);
		const subTokens = getTokens$2(part);
		for (const sub of subTokens) if (sub[0] !== "space") {
			const length = sub[5] - sub[3];
			sub[2] = startLine;
			sub[3] += startChar;
			sub[4] += endLine - 1;
			sub[5] = sub[3] + length;
		}
		const tokens$3 = [[
			"(",
			"(",
			startLine,
			startChar,
			startLine,
			startChar
		], ...subTokens];
		tokens$3.push([
			")",
			")",
			startLine,
			endChar,
			endLine,
			endChar
		]);
		for (const tokn of tokens$3.reverse()) tokenize$4.back(tokn);
	};
	const comma$4 = (token$1, tokenize$4) => {
		const bits = token$1[1].split(/([,])/);
		const tokens$3 = [];
		const [, , startLine, , endLine] = token$1;
		let [, , , startChar, , endChar] = token$1;
		for (let bit of bits) {
			bit = bit || ",";
			const name = bit === "," ? "comma" : "word";
			if (bit !== bits[0]) startChar = endChar + 1;
			endChar = startChar + bit.length - 1;
			tokens$3.push([
				name,
				bit,
				startLine,
				startChar,
				endLine,
				endChar
			]);
		}
		for (const tokn of tokens$3.reverse()) tokenize$4.back(tokn);
	};
	const getTokens$2 = (what) => {
		const input = new Input$1(what, {});
		const tokenize$4 = wrapTokenizer(input);
		const result = [];
		while (!tokenize$4.endOfFile()) {
			const token$1 = tokenize$4.nextToken();
			result.push(token$1);
		}
		return result;
	};
	const operator = (token$1, tokenize$4) => {
		const [, value, startLine, , endLine, endChar] = token$1;
		const parts = value.split(operRegex$1);
		let [, , , startChar] = token$1;
		const tokens$3 = parts.map((part) => {
			const type = operators$1.includes(part) ? "operator" : "word";
			const newToken = [
				type,
				part,
				startLine,
				startChar,
				endLine,
				endChar
			];
			startChar += part.length;
			return newToken;
		});
		for (const tokn of tokens$3.reverse()) tokenize$4.back(tokn);
	};
	const wrapTokenizer = (...args) => {
		const tokenize$4 = tokenizer(...args);
		const ogNextToken = tokenize$4.nextToken;
		tokenize$4.nextToken = (...nextArgs) => {
			let token$1 = ogNextToken(...nextArgs);
			if (!token$1) return token$1;
			const [type, value] = token$1;
			if (type === "brackets") {
				brackets(token$1, tokenize$4);
				token$1 = ogNextToken(...nextArgs);
			} else if (type === "word") {
				if (operators$1.includes(value)) token$1[0] = "operator";
				else if (operRegex$1.test(value)) {
					operator(token$1, tokenize$4);
					token$1 = ogNextToken(...nextArgs);
				} else if (value.length > 1 && value.includes(",")) {
					comma$4(token$1, tokenize$4);
					token$1 = ogNextToken(...nextArgs);
				}
			}
			return token$1;
		};
		return tokenize$4;
	};
	module.exports = {
		getTokens: getTokens$2,
		tokenizer: wrapTokenizer
	};
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Container.js
var require_Container = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Container.js"(exports, module) {
	const PostCssContainer = require_container$3();
	const { stringify: stringify$4 } = require_ValuesStringifier();
	var Container$5 = class extends PostCssContainer {
		toString(stringifier = stringify$4) {
			return super.toString(stringifier);
		}
	};
	module.exports = Container$5;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Node.js
var require_Node = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Node.js"(exports, module) {
	const PostCssNode = require_node$8();
	const { stringify: stringify$3 } = require_ValuesStringifier();
	var Node$13 = class extends PostCssNode {
		toString(stringifier = stringify$3) {
			return super.toString(stringifier || {});
		}
	};
	module.exports = Node$13;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Punctuation.js
var require_Punctuation = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Punctuation.js"(exports, module) {
	const { getTokens: getTokens$1 } = require_tokenize$3();
	const { registerWalker: registerWalker$7 } = require_walker();
	const Node$12 = require_Node();
	/**
	* @desc Punctuation nodes can contain:
	*       , : ( ) { } [ ]
	*/
	var Punctuation$2 = class Punctuation$2 extends Node$12 {
		constructor(options) {
			super(options);
			this.type = "punctuation";
		}
		static get chars() {
			return [
				",",
				":",
				"(",
				")",
				"[",
				"]",
				"{",
				"}"
			];
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, Punctuation$2);
		}
		static tokenizeBrackets(tokens$3, parser$5) {
			const [first, ...rest] = tokens$3;
			const bits = first[1].split(/([()])/g).filter((t$9) => !!t$9);
			const newTokens = [];
			const [, , startLine, , endLine] = first;
			let [, , , startChar, , endChar] = first;
			for (const bit of bits) {
				let type = bit === "(" ? "(" : bit === ")" ? ")" : "word";
				if (/^\s+$/.test(bit)) type = "space";
				if (bit !== bits[0]) startChar = endChar + 1;
				endChar = startChar + bit.length - 1;
				if (type === "word") {
					const wordTokens = getTokens$1(bit);
					for (const token$1 of wordTokens) {
						token$1[3] += startChar - 1;
						newTokens.push(token$1);
					}
				} else newTokens.push([
					type,
					bit,
					startLine,
					startChar,
					endLine,
					endChar
				]);
			}
			parser$5.back(newTokens.concat(rest));
		}
		static tokenizeCommas(tokens$3, parser$5) {
			const [first, ...rest] = tokens$3;
			const bits = first[1].split(/([,])/g).filter((t$9) => !!t$9);
			const newTokens = [];
			const [, , startLine, , endLine] = first;
			let [, , , startChar, , endChar] = first;
			for (const bit of bits) {
				if (bit !== bits[0]) startChar = endChar + 1;
				endChar = startChar + bit.length - 1;
				newTokens.push([
					"word",
					bit,
					startLine,
					startChar,
					endLine,
					endChar
				]);
			}
			parser$5.back(newTokens.concat(rest));
		}
	};
	registerWalker$7(Punctuation$2);
	module.exports = Punctuation$2;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Func.js
var require_Func = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Func.js"(exports, module) {
	const { getTokens } = require_tokenize$3();
	const { registerWalker: registerWalker$6 } = require_walker();
	const Container$4 = require_Container();
	const Punctuation$1 = require_Punctuation();
	const cssFunctions = [
		"annotation",
		"attr",
		"blur",
		"brightness",
		"calc",
		"character-variant",
		"circle",
		"contrast",
		"cubic-bezier",
		"dir",
		"drop-shadow",
		"element",
		"ellipse",
		"grayscale",
		"hsl",
		"hsla",
		"hue-rotate",
		"image",
		"inset",
		"invert",
		"lang",
		"linear-gradient",
		"matrix",
		"matrix3d",
		"minmax",
		"not",
		"nth-child",
		"nth-last-child",
		"nth-last-of-type",
		"nth-of-type",
		"opacity",
		"ornaments",
		"perspective",
		"polygon",
		"radial-gradient",
		"rect",
		"repeat",
		"repeating-linear-gradient",
		"repeating-radial-gradient",
		"rgb",
		"rgba",
		"rotate",
		"rotatex",
		"rotatey",
		"rotatez",
		"rotate3d",
		"saturate",
		"scale",
		"scalex",
		"scaley",
		"scalez",
		"scale3d",
		"sepia",
		"skew",
		"skewx",
		"skewy",
		"steps",
		"styleset",
		"stylistic",
		"swash",
		"symbols",
		"translate",
		"translatex",
		"translatey",
		"translatez",
		"translate3d",
		"url",
		"var"
	];
	const vendorPrefixes = [
		"-webkit-",
		"-moz-",
		"-ms-",
		"-o-"
	];
	const reFunctions = new RegExp(`^(${vendorPrefixes.join("|")})?(${cssFunctions.join("|")})`, "i");
	const rePunctuation = new RegExp(`^(\\${Punctuation$1.chars.join("|\\")})`);
	const reColorFunctions = /^(hsla?|hwb|lab|lch|rgba?)$/i;
	const reVar = /^var$/i;
	const reVarPrefix = /^--[^\s]+$/;
	var Func$2 = class Func$2 extends Container$4 {
		constructor(options = {}) {
			super(options);
			this.type = "func";
			this.isColor = false;
			this.isVar = false;
			this.name = options.name || "";
			if (!this.nodes) this.nodes = [];
		}
		static test(tokens$3) {
			return tokens$3.length > 1 && tokens$3[0][0] === "word" && !rePunctuation.test(tokens$3[0][1]) && (tokens$3[1][0] === "brackets" || tokens$3[1][0] === "(");
		}
		static fromTokens(tokens$3, parser$5) {
			const [[, , startLine, startChar]] = tokens$3;
			const [name, brackets$1] = tokens$3.splice(0, 2);
			const node = new Func$2({ name: name[1] });
			let foundParens = 0;
			let expectedParens = 1;
			let lastToken = brackets$1;
			if (!reFunctions.test(node.name) && !/^[a-zA-Z\-]+$/.test(node.name)) {
				const nameTokens = getTokens(node.name);
				tokens$3.unshift(...nameTokens, brackets$1);
				parser$5.back(tokens$3);
				return;
			}
			parser$5.init(node, startLine, startChar);
			parser$5.current = node;
			if (brackets$1[0] === "brackets") expectedParens = brackets$1[1].match(/[(]/g).length - 1;
			const rightTokens = [];
			for (const token$1 of tokens$3) if (foundParens < expectedParens) {
				if (token$1[1] === ")") foundParens += 1;
				else if (token$1[1] === "(") expectedParens += 1;
				brackets$1[1] += token$1[1];
				lastToken = token$1;
			} else rightTokens.push(token$1);
			if (foundParens !== expectedParens) parser$5.unclosedBracket(brackets$1);
			[, node.params] = brackets$1;
			const params = brackets$1[1].slice(1, -1);
			if (params.length) {
				let opts = parser$5.options;
				if (node.name === "url") opts = Object.assign({}, parser$5.options, { ignoreUnknownWords: true });
				opts.parentNode = node;
				const { parse: parse$17 } = require_lib$18();
				const root$5 = parse$17(params, opts);
				const { nodes: children } = root$5;
				for (const child of children) node.push(child);
				if (root$5.raws.after) node.last.raws.after = root$5.raws.after;
			}
			parser$5.end(lastToken);
			parser$5.back(rightTokens);
			const { lastNode } = parser$5;
			const { nodes: nodes$1 } = node;
			lastNode.isColor = reColorFunctions.test(lastNode.name);
			lastNode.isVar = reVar.test(lastNode.name) && nodes$1.length && reVarPrefix.test(nodes$1[0].value);
		}
	};
	registerWalker$6(Func$2);
	module.exports = Func$2;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Interpolation.js
var require_Interpolation = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Interpolation.js"(exports, module) {
	const { registerWalker: registerWalker$5 } = require_walker();
	const Container$3 = require_Container();
	var Interpolation$1 = class Interpolation$1 extends Container$3 {
		constructor(options = {}) {
			super(options);
			this.type = "interpolation";
			this.prefix = options.prefix || "";
			if (!this.nodes) this.nodes = [];
		}
		static test(tokens$3, parser$5) {
			const { prefix: prefix$1 } = parser$5.options.interpolation;
			const [first, next] = tokens$3;
			return tokens$3.length > 1 && first[0] === "word" && prefix$1 === first[1] && next[0] === "{";
		}
		static fromTokens(tokens$3, parser$5) {
			const [[, , startLine, startChar]] = tokens$3;
			const [first] = tokens$3.splice(0, 2);
			const [, prefix$1] = first;
			const node = new Interpolation$1({ prefix: prefix$1 });
			const rightTokens = [];
			let closed = false;
			let lastToken;
			let brackets$1 = "{";
			parser$5.init(node, startLine, startChar);
			parser$5.current = node;
			for (const token$1 of tokens$3) if (closed) rightTokens.push(token$1);
			else {
				if (token$1[1] === "}") closed = true;
				brackets$1 += token$1[1];
				lastToken = token$1;
			}
			if (!closed) parser$5.unclosedBracket(first);
			node.params = brackets$1;
			const params = brackets$1.slice(1, -1);
			if (params.length) {
				const { parse: parse$17 } = require_lib$18();
				const { nodes: children } = parse$17(params, parser$5.options);
				for (const child of children) node.push(child);
			}
			parser$5.end(lastToken);
			parser$5.back(rightTokens);
		}
	};
	registerWalker$5(Interpolation$1);
	module.exports = Interpolation$1;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Numeric.js
var require_Numeric = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Numeric.js"(exports, module) {
	const { registerWalker: registerWalker$4 } = require_walker();
	const Node$11 = require_Node();
	/** A Number is:
	* 1. None or one plus or minus symbol; then
	* 2. Either,
	*    2.1. One or more digits; and / or,
	*    2.2. One period symbol; followed by,
	*         2.2.1. One or more digits;
	*    then,
	* 3. If one "e" letter,
	*    3.1. One "e" letter; followed by,
	*         3.1.1. None or one plus or minus symbol; followed by,
	*                3.1.1.1. One or more digits.
	* @see https://drafts.csswg.org/css-syntax/#consume-a-number
	*/
	const numberRegex = /^([+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)$/;
	/** A Unit is:
	* 1. Either,
	*    1.1. One dash; followed by,
	*         1.1.1. One letter, non-ASCII, underscore, dash; or,
	*         1.1.2. One escape slash; followed by,
	*              1.1.2.1 One non-newline;
	*         or,
	*    1.2. One letter, non-ASCII, underscore; or,
	*    1.3. One escape slash; followed by,
	*       1.3.1. One non-newline;
	*    then,
	* 2. Zero or more of;
	*    2.1 One letter, non-ASCII, underscore, dash; then / or,
	*    2.2 One escape slash; followed by,
	*        2.2.1. One non-newline.
	* @see https://drafts.csswg.org/css-syntax/#consume-numeric-token
	*/
	const unitRegex = /^(-?(?:[-A-Z_a-z]|[^\x00-\x7F]|\\[^\n\f\r])(?:[-\w]|[^\x00-\x7F]|\\[^\n\f\r])*|%)$/;
	/** A Numeric is:
	* 1. One Number; followed by,
	*    1.1 Zero or one Unit.
	*/
	const numericRegex = new RegExp(`^${numberRegex.source.slice(1, -1) + unitRegex.source.slice(1, -1)}?$`);
	var Numeric$1 = class Numeric$1 extends Node$11 {
		constructor(options = {}) {
			super(options);
			this.type = "numeric";
			this.unit = options.unit || "";
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, Numeric$1);
			const [[, rawValue]] = tokens$3;
			const [, value, unit = ""] = rawValue.match(numericRegex);
			const { lastNode } = parser$5;
			lastNode.unit = unit;
			lastNode.value = value;
		}
		static test(what) {
			return numericRegex.test(what);
		}
	};
	registerWalker$4(Numeric$1);
	module.exports = Numeric$1;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Operator.js
var require_Operator = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Operator.js"(exports, module) {
	const { registerWalker: registerWalker$3 } = require_walker();
	const Node$10 = require_Node();
	const operators = [
		"+",
		"-",
		"/",
		"*",
		"%"
	];
	const operRegex = new RegExp(`([/|*}])`);
	var Operator$1 = class Operator$1 extends Node$10 {
		constructor(options) {
			super(options);
			this.type = "operator";
		}
		static get chars() {
			return operators;
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, Operator$1);
		}
		static get regex() {
			return operRegex;
		}
		static tokenize(tokens$3, parser$5) {
			const [first, ...rest] = tokens$3;
			const [, value, startLine, , endLine, endChar] = first;
			const parts = value.split(operRegex).filter((t$9) => !!t$9);
			let [, , , startChar] = first;
			const newTokens = parts.map((part) => {
				const newToken = [
					"word",
					part,
					startLine,
					startChar,
					endLine,
					endChar
				];
				startChar += part.length;
				return newToken;
			});
			parser$5.back(newTokens.concat(rest));
		}
	};
	registerWalker$3(Operator$1);
	module.exports = Operator$1;
} });

//#endregion
//#region node_modules/quote-unquote/index.js
var require_quote_unquote = __commonJS({ "node_modules/quote-unquote/index.js"(exports) {
	var single = exports.single = function(s$3) {
		return "'" + s$3.replace(/\\|'/g, function(m$2) {
			return "\\" + m$2;
		}) + "'";
	};
	var double = exports.double = function(s$3) {
		return "\"" + s$3.replace(/\\|"/g, function(m$2) {
			return "\\" + m$2;
		}) + "\"";
	};
	exports.quote = function(s$3) {
		return /'/.test(s$3) ? double(s$3) : single(s$3);
	};
	exports.unquote = function(s$3) {
		var quote = s$3[0];
		var single$1 = quote === "'";
		return s$3.substring(1, s$3.length - 1).replace(/\\\\/g, "\\").replace(single$1 ? /\\'/g : /\\"/g, quote);
	};
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Quoted.js
var require_Quoted = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Quoted.js"(exports, module) {
	const { unquote: unquote$1 } = require_quote_unquote();
	const { registerWalker: registerWalker$2 } = require_walker();
	const Node$9 = require_Node();
	var Quoted$1 = class Quoted$1 extends Node$9 {
		constructor(options) {
			super(options);
			this.type = "quoted";
			this.contents = unquote$1(options.value);
			[this.quote] = options.value;
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, Quoted$1);
		}
	};
	registerWalker$2(Quoted$1);
	module.exports = Quoted$1;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/UnicodeRange.js
var require_UnicodeRange = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/UnicodeRange.js"(exports, module) {
	const { registerWalker: registerWalker$1 } = require_walker();
	const Node$8 = require_Node();
	var UnicodeRange$1 = class UnicodeRange$1 extends Node$8 {
		constructor(options) {
			super(options);
			this.type = "unicodeRange";
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, UnicodeRange$1);
		}
		static test(what) {
			return /U\+(\d|\w)+(-\w+)?(\?+)?/.test(what);
		}
	};
	registerWalker$1(UnicodeRange$1);
	module.exports = UnicodeRange$1;
} });

//#endregion
//#region node_modules/color-name/index.js
var require_color_name = __commonJS({ "node_modules/color-name/index.js"(exports, module) {
	module.exports = {
		"aliceblue": [
			240,
			248,
			255
		],
		"antiquewhite": [
			250,
			235,
			215
		],
		"aqua": [
			0,
			255,
			255
		],
		"aquamarine": [
			127,
			255,
			212
		],
		"azure": [
			240,
			255,
			255
		],
		"beige": [
			245,
			245,
			220
		],
		"bisque": [
			255,
			228,
			196
		],
		"black": [
			0,
			0,
			0
		],
		"blanchedalmond": [
			255,
			235,
			205
		],
		"blue": [
			0,
			0,
			255
		],
		"blueviolet": [
			138,
			43,
			226
		],
		"brown": [
			165,
			42,
			42
		],
		"burlywood": [
			222,
			184,
			135
		],
		"cadetblue": [
			95,
			158,
			160
		],
		"chartreuse": [
			127,
			255,
			0
		],
		"chocolate": [
			210,
			105,
			30
		],
		"coral": [
			255,
			127,
			80
		],
		"cornflowerblue": [
			100,
			149,
			237
		],
		"cornsilk": [
			255,
			248,
			220
		],
		"crimson": [
			220,
			20,
			60
		],
		"cyan": [
			0,
			255,
			255
		],
		"darkblue": [
			0,
			0,
			139
		],
		"darkcyan": [
			0,
			139,
			139
		],
		"darkgoldenrod": [
			184,
			134,
			11
		],
		"darkgray": [
			169,
			169,
			169
		],
		"darkgreen": [
			0,
			100,
			0
		],
		"darkgrey": [
			169,
			169,
			169
		],
		"darkkhaki": [
			189,
			183,
			107
		],
		"darkmagenta": [
			139,
			0,
			139
		],
		"darkolivegreen": [
			85,
			107,
			47
		],
		"darkorange": [
			255,
			140,
			0
		],
		"darkorchid": [
			153,
			50,
			204
		],
		"darkred": [
			139,
			0,
			0
		],
		"darksalmon": [
			233,
			150,
			122
		],
		"darkseagreen": [
			143,
			188,
			143
		],
		"darkslateblue": [
			72,
			61,
			139
		],
		"darkslategray": [
			47,
			79,
			79
		],
		"darkslategrey": [
			47,
			79,
			79
		],
		"darkturquoise": [
			0,
			206,
			209
		],
		"darkviolet": [
			148,
			0,
			211
		],
		"deeppink": [
			255,
			20,
			147
		],
		"deepskyblue": [
			0,
			191,
			255
		],
		"dimgray": [
			105,
			105,
			105
		],
		"dimgrey": [
			105,
			105,
			105
		],
		"dodgerblue": [
			30,
			144,
			255
		],
		"firebrick": [
			178,
			34,
			34
		],
		"floralwhite": [
			255,
			250,
			240
		],
		"forestgreen": [
			34,
			139,
			34
		],
		"fuchsia": [
			255,
			0,
			255
		],
		"gainsboro": [
			220,
			220,
			220
		],
		"ghostwhite": [
			248,
			248,
			255
		],
		"gold": [
			255,
			215,
			0
		],
		"goldenrod": [
			218,
			165,
			32
		],
		"gray": [
			128,
			128,
			128
		],
		"green": [
			0,
			128,
			0
		],
		"greenyellow": [
			173,
			255,
			47
		],
		"grey": [
			128,
			128,
			128
		],
		"honeydew": [
			240,
			255,
			240
		],
		"hotpink": [
			255,
			105,
			180
		],
		"indianred": [
			205,
			92,
			92
		],
		"indigo": [
			75,
			0,
			130
		],
		"ivory": [
			255,
			255,
			240
		],
		"khaki": [
			240,
			230,
			140
		],
		"lavender": [
			230,
			230,
			250
		],
		"lavenderblush": [
			255,
			240,
			245
		],
		"lawngreen": [
			124,
			252,
			0
		],
		"lemonchiffon": [
			255,
			250,
			205
		],
		"lightblue": [
			173,
			216,
			230
		],
		"lightcoral": [
			240,
			128,
			128
		],
		"lightcyan": [
			224,
			255,
			255
		],
		"lightgoldenrodyellow": [
			250,
			250,
			210
		],
		"lightgray": [
			211,
			211,
			211
		],
		"lightgreen": [
			144,
			238,
			144
		],
		"lightgrey": [
			211,
			211,
			211
		],
		"lightpink": [
			255,
			182,
			193
		],
		"lightsalmon": [
			255,
			160,
			122
		],
		"lightseagreen": [
			32,
			178,
			170
		],
		"lightskyblue": [
			135,
			206,
			250
		],
		"lightslategray": [
			119,
			136,
			153
		],
		"lightslategrey": [
			119,
			136,
			153
		],
		"lightsteelblue": [
			176,
			196,
			222
		],
		"lightyellow": [
			255,
			255,
			224
		],
		"lime": [
			0,
			255,
			0
		],
		"limegreen": [
			50,
			205,
			50
		],
		"linen": [
			250,
			240,
			230
		],
		"magenta": [
			255,
			0,
			255
		],
		"maroon": [
			128,
			0,
			0
		],
		"mediumaquamarine": [
			102,
			205,
			170
		],
		"mediumblue": [
			0,
			0,
			205
		],
		"mediumorchid": [
			186,
			85,
			211
		],
		"mediumpurple": [
			147,
			112,
			219
		],
		"mediumseagreen": [
			60,
			179,
			113
		],
		"mediumslateblue": [
			123,
			104,
			238
		],
		"mediumspringgreen": [
			0,
			250,
			154
		],
		"mediumturquoise": [
			72,
			209,
			204
		],
		"mediumvioletred": [
			199,
			21,
			133
		],
		"midnightblue": [
			25,
			25,
			112
		],
		"mintcream": [
			245,
			255,
			250
		],
		"mistyrose": [
			255,
			228,
			225
		],
		"moccasin": [
			255,
			228,
			181
		],
		"navajowhite": [
			255,
			222,
			173
		],
		"navy": [
			0,
			0,
			128
		],
		"oldlace": [
			253,
			245,
			230
		],
		"olive": [
			128,
			128,
			0
		],
		"olivedrab": [
			107,
			142,
			35
		],
		"orange": [
			255,
			165,
			0
		],
		"orangered": [
			255,
			69,
			0
		],
		"orchid": [
			218,
			112,
			214
		],
		"palegoldenrod": [
			238,
			232,
			170
		],
		"palegreen": [
			152,
			251,
			152
		],
		"paleturquoise": [
			175,
			238,
			238
		],
		"palevioletred": [
			219,
			112,
			147
		],
		"papayawhip": [
			255,
			239,
			213
		],
		"peachpuff": [
			255,
			218,
			185
		],
		"peru": [
			205,
			133,
			63
		],
		"pink": [
			255,
			192,
			203
		],
		"plum": [
			221,
			160,
			221
		],
		"powderblue": [
			176,
			224,
			230
		],
		"purple": [
			128,
			0,
			128
		],
		"rebeccapurple": [
			102,
			51,
			153
		],
		"red": [
			255,
			0,
			0
		],
		"rosybrown": [
			188,
			143,
			143
		],
		"royalblue": [
			65,
			105,
			225
		],
		"saddlebrown": [
			139,
			69,
			19
		],
		"salmon": [
			250,
			128,
			114
		],
		"sandybrown": [
			244,
			164,
			96
		],
		"seagreen": [
			46,
			139,
			87
		],
		"seashell": [
			255,
			245,
			238
		],
		"sienna": [
			160,
			82,
			45
		],
		"silver": [
			192,
			192,
			192
		],
		"skyblue": [
			135,
			206,
			235
		],
		"slateblue": [
			106,
			90,
			205
		],
		"slategray": [
			112,
			128,
			144
		],
		"slategrey": [
			112,
			128,
			144
		],
		"snow": [
			255,
			250,
			250
		],
		"springgreen": [
			0,
			255,
			127
		],
		"steelblue": [
			70,
			130,
			180
		],
		"tan": [
			210,
			180,
			140
		],
		"teal": [
			0,
			128,
			128
		],
		"thistle": [
			216,
			191,
			216
		],
		"tomato": [
			255,
			99,
			71
		],
		"turquoise": [
			64,
			224,
			208
		],
		"violet": [
			238,
			130,
			238
		],
		"wheat": [
			245,
			222,
			179
		],
		"white": [
			255,
			255,
			255
		],
		"whitesmoke": [
			245,
			245,
			245
		],
		"yellow": [
			255,
			255,
			0
		],
		"yellowgreen": [
			154,
			205,
			50
		]
	};
} });

//#endregion
//#region node_modules/is-url-superb/index.js
var require_is_url_superb = __commonJS({ "node_modules/is-url-superb/index.js"(exports, module) {
	module.exports = (string$3) => {
		if (typeof string$3 !== "string") throw new TypeError("Expected a string");
		try {
			new URL(string$3);
			return true;
		} catch {
			return false;
		}
	};
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/nodes/Word.js
var require_Word = __commonJS({ "node_modules/postcss-values-parser/lib/nodes/Word.js"(exports, module) {
	const colors$1 = require_color_name();
	const isUrl = require_is_url_superb();
	const { registerWalker } = require_walker();
	const Node$7 = require_Node();
	const escapeRegex = /^\\(.+)/;
	const hexRegex = /^#(.+)/;
	const colorRegex = /^#([0-9a-f]{3}|[0-9a-f]{4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;
	const colorNames$1 = Object.keys(colors$1);
	var Word$1 = class Word$1 extends Node$7 {
		constructor(options) {
			super(options);
			this.type = "word";
			this.isColor = false;
			this.isHex = false;
			this.isUrl = false;
			this.isVariable = false;
		}
		static fromTokens(tokens$3, parser$5) {
			parser$5.fromFirst(tokens$3, Word$1);
			const { lastNode } = parser$5;
			const { value } = lastNode;
			lastNode.isColor = colorRegex.test(value) || colorNames$1.includes(value.toLowerCase());
			lastNode.isHex = hexRegex.test(value);
			lastNode.isUrl = value.startsWith("//") ? isUrl(`http:${value}`) : isUrl(value);
			lastNode.isVariable = Word$1.testVariable(tokens$3[0], parser$5);
		}
		static testEscaped(tokens$3) {
			const [first, next] = tokens$3;
			const [type, value] = first;
			return type === "word" && (escapeRegex.test(value) || value === "\\" && next && !/^\s+$/.test(next[1]));
		}
		static testHex(token$1) {
			const [type, value] = token$1;
			return type === "word" && hexRegex.test(value);
		}
		static testVariable(token$1, parser$5) {
			const [type, value] = token$1;
			const { prefixes } = parser$5.options.variables;
			const varRegex = new RegExp(`^(${prefixes.join("|")})`);
			return type === "word" && varRegex.test(value);
		}
		static testWord(tokens$3, parser$5) {
			const [token$1] = tokens$3;
			return Word$1.testEscaped(tokens$3) || Word$1.testHex(token$1) || Word$1.testVariable(token$1, parser$5);
		}
	};
	registerWalker(Word$1);
	module.exports = Word$1;
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/ValuesParser.js
var require_ValuesParser = __commonJS({ "node_modules/postcss-values-parser/lib/ValuesParser.js"(exports, module) {
	const Parser$7 = require_parser$5();
	const AtWord = require_AtWord();
	const Comment$5 = require_Comment();
	const Func$1 = require_Func();
	const Interpolation = require_Interpolation();
	const Numeric = require_Numeric();
	const Operator = require_Operator();
	const Punctuation = require_Punctuation();
	const Quoted = require_Quoted();
	const UnicodeRange = require_UnicodeRange();
	const Word = require_Word();
	const defaults = {
		ignoreUnknownWords: false,
		interpolation: false,
		parentNode: null,
		variables: { prefixes: ["--"] }
	};
	module.exports = class ValuesParser extends Parser$7 {
		constructor(input, opts = {}) {
			super(input);
			this.lastNode = null;
			this.options = Object.assign({}, defaults, opts);
			this.parentNode = this.options.parentNode;
		}
		back(tokens$3) {
			for (const token$1 of tokens$3.reverse()) this.tokenizer.back(token$1);
		}
		comment(token$1) {
			super.comment(token$1);
			const inline = Comment$5.testInline(token$1);
			const node = this.lastNode;
			node.inline = inline;
			Object.setPrototypeOf(node, Comment$5.prototype);
		}
		fromFirst(tokens$3, Constructor) {
			const [first] = tokens$3;
			const [, value, startLine, startChar] = first;
			const node = new Constructor({ value });
			this.init(node, startLine, startChar);
			this.current = node;
			this.end(first);
			this.back(tokens$3.slice(1));
		}
		init(node, line, column) {
			super.init(node, line, column);
			this.lastNode = node;
		}
		other(start) {
			const brackets$1 = [];
			const tokens$3 = [];
			let token$1 = start;
			let type = null;
			let bracket = null;
			while (token$1) {
				[type] = token$1;
				tokens$3.push(token$1);
				if (type === "(" || type === "[") {
					if (!bracket) bracket = token$1;
					brackets$1.push(type === "(" ? ")" : "]");
				} else if (type === brackets$1[brackets$1.length - 1]) {
					brackets$1.pop();
					if (brackets$1.length === 0) bracket = null;
				}
				token$1 = this.tokenizer.nextToken();
			}
			if (brackets$1.length > 0) this.unclosedBracket(bracket);
			this.unknownWord(tokens$3);
		}
		parse() {
			let token$1;
			while (!this.tokenizer.endOfFile()) {
				token$1 = this.tokenizer.nextToken();
				switch (token$1[0]) {
					case "space":
						this.spaces += token$1[1];
						break;
					case "comment":
						this.comment(token$1);
						break;
					case "at-word":
						this.atrule(token$1);
						Object.setPrototypeOf(this.lastNode, AtWord.prototype);
						this.lastNode.type = "atword";
						break;
					default:
						this.other(token$1);
						break;
				}
			}
			this.endFile();
		}
		unknownWord(tokens$3) {
			const [first] = tokens$3;
			const [type, value] = first;
			if (Punctuation.chars.includes(type)) Punctuation.fromTokens(tokens$3, this);
			else if (Func$1.test(tokens$3)) Func$1.fromTokens(tokens$3, this);
			else if (this.options.interpolation && Interpolation.test(tokens$3, this)) Interpolation.fromTokens(tokens$3, this);
			else if (type === "brackets") Punctuation.tokenizeBrackets(tokens$3, this);
			else if (type === "comma") Punctuation.fromTokens(tokens$3, this);
			else if (type === "operator") Operator.fromTokens(tokens$3, this);
			else if (type === "string") Quoted.fromTokens(tokens$3, this);
			else if (type === "word") if (value === ",") Punctuation.fromTokens(tokens$3, this);
			else if (value === "//") Comment$5.tokenizeNext(tokens$3, this);
			else if (Comment$5.testInline(first)) {
				const { parentNode } = this;
				if (parentNode && parentNode.type === "func" && parentNode.name === "url") Word.fromTokens(tokens$3, this);
				else Comment$5.tokenizeInline(tokens$3, this);
			} else if (value.includes(",")) Punctuation.tokenizeCommas(tokens$3, this);
			else if (Word.testWord(tokens$3, this)) Word.fromTokens(tokens$3, this);
			else if (Numeric.test(value)) Numeric.fromTokens(tokens$3, this);
			else if (UnicodeRange.test(value)) UnicodeRange.fromTokens(tokens$3, this);
			else if (Operator.chars.includes(value)) Operator.fromTokens(tokens$3, this);
			else if (/^[\w-]+$/.test(value)) Word.fromTokens(tokens$3, this);
			else if (Operator.regex.test(value)) Operator.tokenize(tokens$3, this);
			else if (this.options.ignoreUnknownWords) Word.fromTokens(tokens$3, this);
			else super.unknownWord(tokens$3);
			else
 /* istanbul ignore next */
			super.unknownWord(tokens$3);
		}
	};
} });

//#endregion
//#region node_modules/postcss-values-parser/lib/index.js
var require_lib$18 = __commonJS({ "node_modules/postcss-values-parser/lib/index.js"(exports, module) {
	const Input = require_input();
	const Parser$6 = require_ValuesParser();
	const { stringify: stringify$2 } = require_ValuesStringifier();
	module.exports = {
		parse(css, options) {
			const input = new Input(css, options);
			const parser$5 = new Parser$6(input, options);
			parser$5.parse();
			const { root: root$5 } = parser$5;
			const ogToString = root$5.toString;
			function toString$5(stringifier) {
				return ogToString.bind(root$5)(stringifier || module.exports.stringify);
			}
			root$5.toString = toString$5.bind(root$5);
			return parser$5.root;
		},
		stringify: stringify$2,
		nodeToString(node) {
			let result = "";
			module.exports.stringify(node, (bit) => {
				result += bit;
			});
			return result;
		}
	};
} });

//#endregion
//#region node_modules/color-convert/conversions.js
var require_conversions = __commonJS({ "node_modules/color-convert/conversions.js"(exports, module) {
	const cssKeywords = require_color_name();
	const reverseKeywords = {};
	for (const key of Object.keys(cssKeywords)) reverseKeywords[cssKeywords[key]] = key;
	const convert$2 = {
		rgb: {
			channels: 3,
			labels: "rgb"
		},
		hsl: {
			channels: 3,
			labels: "hsl"
		},
		hsv: {
			channels: 3,
			labels: "hsv"
		},
		hwb: {
			channels: 3,
			labels: "hwb"
		},
		cmyk: {
			channels: 4,
			labels: "cmyk"
		},
		xyz: {
			channels: 3,
			labels: "xyz"
		},
		lab: {
			channels: 3,
			labels: "lab"
		},
		lch: {
			channels: 3,
			labels: "lch"
		},
		hex: {
			channels: 1,
			labels: ["hex"]
		},
		keyword: {
			channels: 1,
			labels: ["keyword"]
		},
		ansi16: {
			channels: 1,
			labels: ["ansi16"]
		},
		ansi256: {
			channels: 1,
			labels: ["ansi256"]
		},
		hcg: {
			channels: 3,
			labels: [
				"h",
				"c",
				"g"
			]
		},
		apple: {
			channels: 3,
			labels: [
				"r16",
				"g16",
				"b16"
			]
		},
		gray: {
			channels: 1,
			labels: ["gray"]
		}
	};
	module.exports = convert$2;
	for (const model of Object.keys(convert$2)) {
		if (!("channels" in convert$2[model])) throw new Error("missing channels property: " + model);
		if (!("labels" in convert$2[model])) throw new Error("missing channel labels property: " + model);
		if (convert$2[model].labels.length !== convert$2[model].channels) throw new Error("channel and label counts mismatch: " + model);
		const { channels, labels } = convert$2[model];
		delete convert$2[model].channels;
		delete convert$2[model].labels;
		Object.defineProperty(convert$2[model], "channels", { value: channels });
		Object.defineProperty(convert$2[model], "labels", { value: labels });
	}
	convert$2.rgb.hsl = function(rgb) {
		const r$2 = rgb[0] / 255;
		const g$1 = rgb[1] / 255;
		const b$1 = rgb[2] / 255;
		const min = Math.min(r$2, g$1, b$1);
		const max$1 = Math.max(r$2, g$1, b$1);
		const delta = max$1 - min;
		let h$2;
		let s$3;
		if (max$1 === min) h$2 = 0;
		else if (r$2 === max$1) h$2 = (g$1 - b$1) / delta;
		else if (g$1 === max$1) h$2 = 2 + (b$1 - r$2) / delta;
		else if (b$1 === max$1) h$2 = 4 + (r$2 - g$1) / delta;
		h$2 = Math.min(h$2 * 60, 360);
		if (h$2 < 0) h$2 += 360;
		const l$1 = (min + max$1) / 2;
		if (max$1 === min) s$3 = 0;
		else if (l$1 <= .5) s$3 = delta / (max$1 + min);
		else s$3 = delta / (2 - max$1 - min);
		return [
			h$2,
			s$3 * 100,
			l$1 * 100
		];
	};
	convert$2.rgb.hsv = function(rgb) {
		let rdif;
		let gdif;
		let bdif;
		let h$2;
		let s$3;
		const r$2 = rgb[0] / 255;
		const g$1 = rgb[1] / 255;
		const b$1 = rgb[2] / 255;
		const v$1 = Math.max(r$2, g$1, b$1);
		const diff = v$1 - Math.min(r$2, g$1, b$1);
		const diffc = function(c$2) {
			return (v$1 - c$2) / 6 / diff + 1 / 2;
		};
		if (diff === 0) {
			h$2 = 0;
			s$3 = 0;
		} else {
			s$3 = diff / v$1;
			rdif = diffc(r$2);
			gdif = diffc(g$1);
			bdif = diffc(b$1);
			if (r$2 === v$1) h$2 = bdif - gdif;
			else if (g$1 === v$1) h$2 = 1 / 3 + rdif - bdif;
			else if (b$1 === v$1) h$2 = 2 / 3 + gdif - rdif;
			if (h$2 < 0) h$2 += 1;
			else if (h$2 > 1) h$2 -= 1;
		}
		return [
			h$2 * 360,
			s$3 * 100,
			v$1 * 100
		];
	};
	convert$2.rgb.hwb = function(rgb) {
		const r$2 = rgb[0];
		const g$1 = rgb[1];
		let b$1 = rgb[2];
		const h$2 = convert$2.rgb.hsl(rgb)[0];
		const w$2 = 1 / 255 * Math.min(r$2, Math.min(g$1, b$1));
		b$1 = 1 - 1 / 255 * Math.max(r$2, Math.max(g$1, b$1));
		return [
			h$2,
			w$2 * 100,
			b$1 * 100
		];
	};
	convert$2.rgb.cmyk = function(rgb) {
		const r$2 = rgb[0] / 255;
		const g$1 = rgb[1] / 255;
		const b$1 = rgb[2] / 255;
		const k$1 = Math.min(1 - r$2, 1 - g$1, 1 - b$1);
		const c$2 = (1 - r$2 - k$1) / (1 - k$1) || 0;
		const m$2 = (1 - g$1 - k$1) / (1 - k$1) || 0;
		const y$2 = (1 - b$1 - k$1) / (1 - k$1) || 0;
		return [
			c$2 * 100,
			m$2 * 100,
			y$2 * 100,
			k$1 * 100
		];
	};
	function comparativeDistance(x$1, y$2) {
		return (x$1[0] - y$2[0]) ** 2 + (x$1[1] - y$2[1]) ** 2 + (x$1[2] - y$2[2]) ** 2;
	}
	convert$2.rgb.keyword = function(rgb) {
		const reversed = reverseKeywords[rgb];
		if (reversed) return reversed;
		let currentClosestDistance = Infinity;
		let currentClosestKeyword;
		for (const keyword of Object.keys(cssKeywords)) {
			const value = cssKeywords[keyword];
			const distance = comparativeDistance(rgb, value);
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
		return currentClosestKeyword;
	};
	convert$2.keyword.rgb = function(keyword) {
		return cssKeywords[keyword];
	};
	convert$2.rgb.xyz = function(rgb) {
		let r$2 = rgb[0] / 255;
		let g$1 = rgb[1] / 255;
		let b$1 = rgb[2] / 255;
		r$2 = r$2 > .04045 ? ((r$2 + .055) / 1.055) ** 2.4 : r$2 / 12.92;
		g$1 = g$1 > .04045 ? ((g$1 + .055) / 1.055) ** 2.4 : g$1 / 12.92;
		b$1 = b$1 > .04045 ? ((b$1 + .055) / 1.055) ** 2.4 : b$1 / 12.92;
		const x$1 = r$2 * .4124 + g$1 * .3576 + b$1 * .1805;
		const y$2 = r$2 * .2126 + g$1 * .7152 + b$1 * .0722;
		const z = r$2 * .0193 + g$1 * .1192 + b$1 * .9505;
		return [
			x$1 * 100,
			y$2 * 100,
			z * 100
		];
	};
	convert$2.rgb.lab = function(rgb) {
		const xyz = convert$2.rgb.xyz(rgb);
		let x$1 = xyz[0];
		let y$2 = xyz[1];
		let z = xyz[2];
		x$1 /= 95.047;
		y$2 /= 100;
		z /= 108.883;
		x$1 = x$1 > .008856 ? x$1 ** (1 / 3) : 7.787 * x$1 + 16 / 116;
		y$2 = y$2 > .008856 ? y$2 ** (1 / 3) : 7.787 * y$2 + 16 / 116;
		z = z > .008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
		const l$1 = 116 * y$2 - 16;
		const a$1 = 500 * (x$1 - y$2);
		const b$1 = 200 * (y$2 - z);
		return [
			l$1,
			a$1,
			b$1
		];
	};
	convert$2.hsl.rgb = function(hsl) {
		const h$2 = hsl[0] / 360;
		const s$3 = hsl[1] / 100;
		const l$1 = hsl[2] / 100;
		let t2;
		let t3;
		let val;
		if (s$3 === 0) {
			val = l$1 * 255;
			return [
				val,
				val,
				val
			];
		}
		if (l$1 < .5) t2 = l$1 * (1 + s$3);
		else t2 = l$1 + s$3 - l$1 * s$3;
		const t1 = 2 * l$1 - t2;
		const rgb = [
			0,
			0,
			0
		];
		for (let i$6 = 0; i$6 < 3; i$6++) {
			t3 = h$2 + 1 / 3 * -(i$6 - 1);
			if (t3 < 0) t3++;
			if (t3 > 1) t3--;
			if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
			else if (2 * t3 < 1) val = t2;
			else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			else val = t1;
			rgb[i$6] = val * 255;
		}
		return rgb;
	};
	convert$2.hsl.hsv = function(hsl) {
		const h$2 = hsl[0];
		let s$3 = hsl[1] / 100;
		let l$1 = hsl[2] / 100;
		let smin = s$3;
		const lmin = Math.max(l$1, .01);
		l$1 *= 2;
		s$3 *= l$1 <= 1 ? l$1 : 2 - l$1;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		const v$1 = (l$1 + s$3) / 2;
		const sv = l$1 === 0 ? 2 * smin / (lmin + smin) : 2 * s$3 / (l$1 + s$3);
		return [
			h$2,
			sv * 100,
			v$1 * 100
		];
	};
	convert$2.hsv.rgb = function(hsv) {
		const h$2 = hsv[0] / 60;
		const s$3 = hsv[1] / 100;
		let v$1 = hsv[2] / 100;
		const hi = Math.floor(h$2) % 6;
		const f$1 = h$2 - Math.floor(h$2);
		const p$2 = 255 * v$1 * (1 - s$3);
		const q = 255 * v$1 * (1 - s$3 * f$1);
		const t$9 = 255 * v$1 * (1 - s$3 * (1 - f$1));
		v$1 *= 255;
		switch (hi) {
			case 0: return [
				v$1,
				t$9,
				p$2
			];
			case 1: return [
				q,
				v$1,
				p$2
			];
			case 2: return [
				p$2,
				v$1,
				t$9
			];
			case 3: return [
				p$2,
				q,
				v$1
			];
			case 4: return [
				t$9,
				p$2,
				v$1
			];
			case 5: return [
				v$1,
				p$2,
				q
			];
		}
	};
	convert$2.hsv.hsl = function(hsv) {
		const h$2 = hsv[0];
		const s$3 = hsv[1] / 100;
		const v$1 = hsv[2] / 100;
		const vmin = Math.max(v$1, .01);
		let sl;
		let l$1;
		l$1 = (2 - s$3) * v$1;
		const lmin = (2 - s$3) * vmin;
		sl = s$3 * vmin;
		sl /= lmin <= 1 ? lmin : 2 - lmin;
		sl = sl || 0;
		l$1 /= 2;
		return [
			h$2,
			sl * 100,
			l$1 * 100
		];
	};
	convert$2.hwb.rgb = function(hwb) {
		const h$2 = hwb[0] / 360;
		let wh = hwb[1] / 100;
		let bl = hwb[2] / 100;
		const ratio = wh + bl;
		let f$1;
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}
		const i$6 = Math.floor(6 * h$2);
		const v$1 = 1 - bl;
		f$1 = 6 * h$2 - i$6;
		if ((i$6 & 1) !== 0) f$1 = 1 - f$1;
		const n$4 = wh + f$1 * (v$1 - wh);
		let r$2;
		let g$1;
		let b$1;
		switch (i$6) {
			default:
			case 6:
			case 0:
				r$2 = v$1;
				g$1 = n$4;
				b$1 = wh;
				break;
			case 1:
				r$2 = n$4;
				g$1 = v$1;
				b$1 = wh;
				break;
			case 2:
				r$2 = wh;
				g$1 = v$1;
				b$1 = n$4;
				break;
			case 3:
				r$2 = wh;
				g$1 = n$4;
				b$1 = v$1;
				break;
			case 4:
				r$2 = n$4;
				g$1 = wh;
				b$1 = v$1;
				break;
			case 5:
				r$2 = v$1;
				g$1 = wh;
				b$1 = n$4;
				break;
		}
		return [
			r$2 * 255,
			g$1 * 255,
			b$1 * 255
		];
	};
	convert$2.cmyk.rgb = function(cmyk) {
		const c$2 = cmyk[0] / 100;
		const m$2 = cmyk[1] / 100;
		const y$2 = cmyk[2] / 100;
		const k$1 = cmyk[3] / 100;
		const r$2 = 1 - Math.min(1, c$2 * (1 - k$1) + k$1);
		const g$1 = 1 - Math.min(1, m$2 * (1 - k$1) + k$1);
		const b$1 = 1 - Math.min(1, y$2 * (1 - k$1) + k$1);
		return [
			r$2 * 255,
			g$1 * 255,
			b$1 * 255
		];
	};
	convert$2.xyz.rgb = function(xyz) {
		const x$1 = xyz[0] / 100;
		const y$2 = xyz[1] / 100;
		const z = xyz[2] / 100;
		let r$2;
		let g$1;
		let b$1;
		r$2 = x$1 * 3.2406 + y$2 * -1.5372 + z * -.4986;
		g$1 = x$1 * -.9689 + y$2 * 1.8758 + z * .0415;
		b$1 = x$1 * .0557 + y$2 * -.204 + z * 1.057;
		r$2 = r$2 > .0031308 ? 1.055 * r$2 ** (1 / 2.4) - .055 : r$2 * 12.92;
		g$1 = g$1 > .0031308 ? 1.055 * g$1 ** (1 / 2.4) - .055 : g$1 * 12.92;
		b$1 = b$1 > .0031308 ? 1.055 * b$1 ** (1 / 2.4) - .055 : b$1 * 12.92;
		r$2 = Math.min(Math.max(0, r$2), 1);
		g$1 = Math.min(Math.max(0, g$1), 1);
		b$1 = Math.min(Math.max(0, b$1), 1);
		return [
			r$2 * 255,
			g$1 * 255,
			b$1 * 255
		];
	};
	convert$2.xyz.lab = function(xyz) {
		let x$1 = xyz[0];
		let y$2 = xyz[1];
		let z = xyz[2];
		x$1 /= 95.047;
		y$2 /= 100;
		z /= 108.883;
		x$1 = x$1 > .008856 ? x$1 ** (1 / 3) : 7.787 * x$1 + 16 / 116;
		y$2 = y$2 > .008856 ? y$2 ** (1 / 3) : 7.787 * y$2 + 16 / 116;
		z = z > .008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
		const l$1 = 116 * y$2 - 16;
		const a$1 = 500 * (x$1 - y$2);
		const b$1 = 200 * (y$2 - z);
		return [
			l$1,
			a$1,
			b$1
		];
	};
	convert$2.lab.xyz = function(lab) {
		const l$1 = lab[0];
		const a$1 = lab[1];
		const b$1 = lab[2];
		let x$1;
		let y$2;
		let z;
		y$2 = (l$1 + 16) / 116;
		x$1 = a$1 / 500 + y$2;
		z = y$2 - b$1 / 200;
		const y2 = y$2 ** 3;
		const x2 = x$1 ** 3;
		const z2 = z ** 3;
		y$2 = y2 > .008856 ? y2 : (y$2 - 16 / 116) / 7.787;
		x$1 = x2 > .008856 ? x2 : (x$1 - 16 / 116) / 7.787;
		z = z2 > .008856 ? z2 : (z - 16 / 116) / 7.787;
		x$1 *= 95.047;
		y$2 *= 100;
		z *= 108.883;
		return [
			x$1,
			y$2,
			z
		];
	};
	convert$2.lab.lch = function(lab) {
		const l$1 = lab[0];
		const a$1 = lab[1];
		const b$1 = lab[2];
		let h$2;
		const hr = Math.atan2(b$1, a$1);
		h$2 = hr * 360 / 2 / Math.PI;
		if (h$2 < 0) h$2 += 360;
		const c$2 = Math.sqrt(a$1 * a$1 + b$1 * b$1);
		return [
			l$1,
			c$2,
			h$2
		];
	};
	convert$2.lch.lab = function(lch) {
		const l$1 = lch[0];
		const c$2 = lch[1];
		const h$2 = lch[2];
		const hr = h$2 / 360 * 2 * Math.PI;
		const a$1 = c$2 * Math.cos(hr);
		const b$1 = c$2 * Math.sin(hr);
		return [
			l$1,
			a$1,
			b$1
		];
	};
	convert$2.rgb.ansi16 = function(args, saturation = null) {
		const [r$2, g$1, b$1] = args;
		let value = saturation === null ? convert$2.rgb.hsv(args)[2] : saturation;
		value = Math.round(value / 50);
		if (value === 0) return 30;
		let ansi = 30 + (Math.round(b$1 / 255) << 2 | Math.round(g$1 / 255) << 1 | Math.round(r$2 / 255));
		if (value === 2) ansi += 60;
		return ansi;
	};
	convert$2.hsv.ansi16 = function(args) {
		return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
	};
	convert$2.rgb.ansi256 = function(args) {
		const r$2 = args[0];
		const g$1 = args[1];
		const b$1 = args[2];
		if (r$2 === g$1 && g$1 === b$1) {
			if (r$2 < 8) return 16;
			if (r$2 > 248) return 231;
			return Math.round((r$2 - 8) / 247 * 24) + 232;
		}
		const ansi = 16 + 36 * Math.round(r$2 / 255 * 5) + 6 * Math.round(g$1 / 255 * 5) + Math.round(b$1 / 255 * 5);
		return ansi;
	};
	convert$2.ansi16.rgb = function(args) {
		let color = args % 10;
		if (color === 0 || color === 7) {
			if (args > 50) color += 3.5;
			color = color / 10.5 * 255;
			return [
				color,
				color,
				color
			];
		}
		const mult = (~~(args > 50) + 1) * .5;
		const r$2 = (color & 1) * mult * 255;
		const g$1 = (color >> 1 & 1) * mult * 255;
		const b$1 = (color >> 2 & 1) * mult * 255;
		return [
			r$2,
			g$1,
			b$1
		];
	};
	convert$2.ansi256.rgb = function(args) {
		if (args >= 232) {
			const c$2 = (args - 232) * 10 + 8;
			return [
				c$2,
				c$2,
				c$2
			];
		}
		args -= 16;
		let rem;
		const r$2 = Math.floor(args / 36) / 5 * 255;
		const g$1 = Math.floor((rem = args % 36) / 6) / 5 * 255;
		const b$1 = rem % 6 / 5 * 255;
		return [
			r$2,
			g$1,
			b$1
		];
	};
	convert$2.rgb.hex = function(args) {
		const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
		const string$3 = integer.toString(16).toUpperCase();
		return "000000".substring(string$3.length) + string$3;
	};
	convert$2.hex.rgb = function(args) {
		const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) return [
			0,
			0,
			0
		];
		let colorString = match[0];
		if (match[0].length === 3) colorString = colorString.split("").map((char) => {
			return char + char;
		}).join("");
		const integer = parseInt(colorString, 16);
		const r$2 = integer >> 16 & 255;
		const g$1 = integer >> 8 & 255;
		const b$1 = integer & 255;
		return [
			r$2,
			g$1,
			b$1
		];
	};
	convert$2.rgb.hcg = function(rgb) {
		const r$2 = rgb[0] / 255;
		const g$1 = rgb[1] / 255;
		const b$1 = rgb[2] / 255;
		const max$1 = Math.max(Math.max(r$2, g$1), b$1);
		const min = Math.min(Math.min(r$2, g$1), b$1);
		const chroma = max$1 - min;
		let grayscale;
		let hue;
		if (chroma < 1) grayscale = min / (1 - chroma);
		else grayscale = 0;
		if (chroma <= 0) hue = 0;
		else if (max$1 === r$2) hue = (g$1 - b$1) / chroma % 6;
		else if (max$1 === g$1) hue = 2 + (b$1 - r$2) / chroma;
		else hue = 4 + (r$2 - g$1) / chroma;
		hue /= 6;
		hue %= 1;
		return [
			hue * 360,
			chroma * 100,
			grayscale * 100
		];
	};
	convert$2.hsl.hcg = function(hsl) {
		const s$3 = hsl[1] / 100;
		const l$1 = hsl[2] / 100;
		const c$2 = l$1 < .5 ? 2 * s$3 * l$1 : 2 * s$3 * (1 - l$1);
		let f$1 = 0;
		if (c$2 < 1) f$1 = (l$1 - .5 * c$2) / (1 - c$2);
		return [
			hsl[0],
			c$2 * 100,
			f$1 * 100
		];
	};
	convert$2.hsv.hcg = function(hsv) {
		const s$3 = hsv[1] / 100;
		const v$1 = hsv[2] / 100;
		const c$2 = s$3 * v$1;
		let f$1 = 0;
		if (c$2 < 1) f$1 = (v$1 - c$2) / (1 - c$2);
		return [
			hsv[0],
			c$2 * 100,
			f$1 * 100
		];
	};
	convert$2.hcg.rgb = function(hcg) {
		const h$2 = hcg[0] / 360;
		const c$2 = hcg[1] / 100;
		const g$1 = hcg[2] / 100;
		if (c$2 === 0) return [
			g$1 * 255,
			g$1 * 255,
			g$1 * 255
		];
		const pure = [
			0,
			0,
			0
		];
		const hi = h$2 % 1 * 6;
		const v$1 = hi % 1;
		const w$2 = 1 - v$1;
		let mg = 0;
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1;
				pure[1] = v$1;
				pure[2] = 0;
				break;
			case 1:
				pure[0] = w$2;
				pure[1] = 1;
				pure[2] = 0;
				break;
			case 2:
				pure[0] = 0;
				pure[1] = 1;
				pure[2] = v$1;
				break;
			case 3:
				pure[0] = 0;
				pure[1] = w$2;
				pure[2] = 1;
				break;
			case 4:
				pure[0] = v$1;
				pure[1] = 0;
				pure[2] = 1;
				break;
			default:
				pure[0] = 1;
				pure[1] = 0;
				pure[2] = w$2;
		}
		mg = (1 - c$2) * g$1;
		return [
			(c$2 * pure[0] + mg) * 255,
			(c$2 * pure[1] + mg) * 255,
			(c$2 * pure[2] + mg) * 255
		];
	};
	convert$2.hcg.hsv = function(hcg) {
		const c$2 = hcg[1] / 100;
		const g$1 = hcg[2] / 100;
		const v$1 = c$2 + g$1 * (1 - c$2);
		let f$1 = 0;
		if (v$1 > 0) f$1 = c$2 / v$1;
		return [
			hcg[0],
			f$1 * 100,
			v$1 * 100
		];
	};
	convert$2.hcg.hsl = function(hcg) {
		const c$2 = hcg[1] / 100;
		const g$1 = hcg[2] / 100;
		const l$1 = g$1 * (1 - c$2) + .5 * c$2;
		let s$3 = 0;
		if (l$1 > 0 && l$1 < .5) s$3 = c$2 / (2 * l$1);
		else if (l$1 >= .5 && l$1 < 1) s$3 = c$2 / (2 * (1 - l$1));
		return [
			hcg[0],
			s$3 * 100,
			l$1 * 100
		];
	};
	convert$2.hcg.hwb = function(hcg) {
		const c$2 = hcg[1] / 100;
		const g$1 = hcg[2] / 100;
		const v$1 = c$2 + g$1 * (1 - c$2);
		return [
			hcg[0],
			(v$1 - c$2) * 100,
			(1 - v$1) * 100
		];
	};
	convert$2.hwb.hcg = function(hwb) {
		const w$2 = hwb[1] / 100;
		const b$1 = hwb[2] / 100;
		const v$1 = 1 - b$1;
		const c$2 = v$1 - w$2;
		let g$1 = 0;
		if (c$2 < 1) g$1 = (v$1 - c$2) / (1 - c$2);
		return [
			hwb[0],
			c$2 * 100,
			g$1 * 100
		];
	};
	convert$2.apple.rgb = function(apple) {
		return [
			apple[0] / 65535 * 255,
			apple[1] / 65535 * 255,
			apple[2] / 65535 * 255
		];
	};
	convert$2.rgb.apple = function(rgb) {
		return [
			rgb[0] / 255 * 65535,
			rgb[1] / 255 * 65535,
			rgb[2] / 255 * 65535
		];
	};
	convert$2.gray.rgb = function(args) {
		return [
			args[0] / 100 * 255,
			args[0] / 100 * 255,
			args[0] / 100 * 255
		];
	};
	convert$2.gray.hsl = function(args) {
		return [
			0,
			0,
			args[0]
		];
	};
	convert$2.gray.hsv = convert$2.gray.hsl;
	convert$2.gray.hwb = function(gray) {
		return [
			0,
			100,
			gray[0]
		];
	};
	convert$2.gray.cmyk = function(gray) {
		return [
			0,
			0,
			0,
			gray[0]
		];
	};
	convert$2.gray.lab = function(gray) {
		return [
			gray[0],
			0,
			0
		];
	};
	convert$2.gray.hex = function(gray) {
		const val = Math.round(gray[0] / 100 * 255) & 255;
		const integer = (val << 16) + (val << 8) + val;
		const string$3 = integer.toString(16).toUpperCase();
		return "000000".substring(string$3.length) + string$3;
	};
	convert$2.rgb.gray = function(rgb) {
		const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
} });

//#endregion
//#region node_modules/color-convert/route.js
var require_route = __commonJS({ "node_modules/color-convert/route.js"(exports, module) {
	const conversions$1 = require_conversions();
	function buildGraph() {
		const graph = {};
		const models$1 = Object.keys(conversions$1);
		for (let len = models$1.length, i$6 = 0; i$6 < len; i$6++) graph[models$1[i$6]] = {
			distance: -1,
			parent: null
		};
		return graph;
	}
	function deriveBFS(fromModel) {
		const graph = buildGraph();
		const queue$1 = [fromModel];
		graph[fromModel].distance = 0;
		while (queue$1.length) {
			const current = queue$1.pop();
			const adjacents = Object.keys(conversions$1[current]);
			for (let len = adjacents.length, i$6 = 0; i$6 < len; i$6++) {
				const adjacent = adjacents[i$6];
				const node = graph[adjacent];
				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue$1.unshift(adjacent);
				}
			}
		}
		return graph;
	}
	function link(from, to) {
		return function(args) {
			return to(from(args));
		};
	}
	function wrapConversion(toModel, graph) {
		const path$28 = [graph[toModel].parent, toModel];
		let fn = conversions$1[graph[toModel].parent][toModel];
		let cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path$28.unshift(graph[cur].parent);
			fn = link(conversions$1[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}
		fn.conversion = path$28;
		return fn;
	}
	module.exports = function(fromModel) {
		const graph = deriveBFS(fromModel);
		const conversion = {};
		const models$1 = Object.keys(graph);
		for (let len = models$1.length, i$6 = 0; i$6 < len; i$6++) {
			const toModel = models$1[i$6];
			const node = graph[toModel];
			if (node.parent === null) continue;
			conversion[toModel] = wrapConversion(toModel, graph);
		}
		return conversion;
	};
} });

//#endregion
//#region node_modules/color-convert/index.js
var require_color_convert = __commonJS({ "node_modules/color-convert/index.js"(exports, module) {
	const conversions = require_conversions();
	const route = require_route();
	const convert$1 = {};
	const models = Object.keys(conversions);
	function wrapRaw(fn) {
		const wrappedFn = function(...args) {
			const arg0 = args[0];
			if (arg0 === void 0 || arg0 === null) return arg0;
			if (arg0.length > 1) args = arg0;
			return fn(args);
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	function wrapRounded(fn) {
		const wrappedFn = function(...args) {
			const arg0 = args[0];
			if (arg0 === void 0 || arg0 === null) return arg0;
			if (arg0.length > 1) args = arg0;
			const result = fn(args);
			if (typeof result === "object") for (let len = result.length, i$6 = 0; i$6 < len; i$6++) result[i$6] = Math.round(result[i$6]);
			return result;
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	models.forEach((fromModel) => {
		convert$1[fromModel] = {};
		Object.defineProperty(convert$1[fromModel], "channels", { value: conversions[fromModel].channels });
		Object.defineProperty(convert$1[fromModel], "labels", { value: conversions[fromModel].labels });
		const routes = route(fromModel);
		const routeModels = Object.keys(routes);
		routeModels.forEach((toModel) => {
			const fn = routes[toModel];
			convert$1[fromModel][toModel] = wrapRounded(fn);
			convert$1[fromModel][toModel].raw = wrapRaw(fn);
		});
	});
	module.exports = convert$1;
} });

//#endregion
//#region node_modules/postcss-color-converter/src/constants.js
var require_constants$2 = __commonJS({ "node_modules/postcss-color-converter/src/constants.js"(exports, module) {
	module.exports = {
		DEFAULT_HEX_ALPHA: "ff",
		DEFAULT_ALPHA: 1,
		HEX_COLOR: "hex",
		RGB_COLOR: "rgb",
		HSL_COLOR: "hsl",
		KEYWORD_COLOR: "keyword"
	};
} });

//#endregion
//#region node_modules/postcss-color-converter/src/utils.js
var require_utils$3 = __commonJS({ "node_modules/postcss-color-converter/src/utils.js"(exports, module) {
	const convert = require_color_convert();
	const { DEFAULT_HEX_ALPHA: DEFAULT_HEX_ALPHA$1, HEX_COLOR: HEX_COLOR$2, RGB_COLOR: RGB_COLOR$2, HSL_COLOR: HSL_COLOR$2, KEYWORD_COLOR: KEYWORD_COLOR$2 } = require_constants$2();
	const parseHEXAColor$1 = (color) => {
		const newColor = color.slice(1);
		let hexColor;
		let hexAlpha;
		switch (newColor.length) {
			case 4:
				hexAlpha = newColor.slice(-1) + newColor.slice(-1);
				hexColor = newColor.slice(0, -1);
				break;
			case 8:
				hexAlpha = newColor.slice(-2);
				hexColor = newColor.slice(0, -2);
				break;
			case 3:
			case 6:
				hexAlpha = DEFAULT_HEX_ALPHA$1;
				hexColor = newColor;
				break;
		}
		return {
			hexColor,
			hexAlpha
		};
	};
	const convertHEXAlphaValueToNumber$1 = (value) => Number((parseInt(value, 16) / 255).toFixed(2)).toString();
	const convertNumberAlphaValueToHEX = (value) => {
		let result = Math.round(value * 255).toString(16);
		if (result == "0") result = "00";
		return result;
	};
	const getHEXColorStr$1 = (inputColorFormat, color, alpha) => alpha ? `#${convert[inputColorFormat].hex(color)}${convertNumberAlphaValueToHEX(+alpha)}`.toLowerCase() : `#${convert[inputColorFormat].hex(color)}`.toLowerCase();
	const getRGBColorArr = (color, inputColorFormat) => inputColorFormat !== RGB_COLOR$2 ? convert[inputColorFormat].rgb(color) : color;
	const getRGBColorStr$1 = (inputColorFormat, color, alpha, isUseModernSyntax) => {
		const colorStr = getRGBColorArr(color, inputColorFormat).join(isUseModernSyntax ? " " : ", ");
		if (isUseModernSyntax) return `rgb(${colorStr}${alpha ? ` / ${alpha}` : ""})`;
		return alpha ? `rgba(${colorStr}, ${alpha})` : `rgb(${colorStr})`;
	};
	const getHSLArr = (color, inputColorFormat) => {
		const colorArr = inputColorFormat !== HSL_COLOR$2 ? convert[inputColorFormat].hsl(color) : color;
		return [
			colorArr[0].toString(),
			`${colorArr[1]}%`,
			`${colorArr[2]}%`
		];
	};
	const getHSLColorStr$1 = (inputColorFormat, color, alpha, isUseModernSyntax) => {
		const colorStr = getHSLArr(color, inputColorFormat).join(isUseModernSyntax ? " " : ", ");
		if (isUseModernSyntax) return `hsl(${colorStr}${alpha ? ` / ${alpha}` : ""})`;
		return alpha ? `hsla(${colorStr}, ${alpha})` : `hsl(${colorStr})`;
	};
	module.exports = {
		parseHEXAColor: parseHEXAColor$1,
		getRGBColorStr: getRGBColorStr$1,
		getHSLColorStr: getHSLColorStr$1,
		getHEXColorStr: getHEXColorStr$1,
		convertHEXAlphaValueToNumber: convertHEXAlphaValueToNumber$1,
		convertNumberAlphaValueToHEX
	};
} });

//#endregion
//#region node_modules/postcss-color-converter/src/converts.js
var require_converts = __commonJS({ "node_modules/postcss-color-converter/src/converts.js"(exports, module) {
	const { parseHEXAColor, getRGBColorStr, getHSLColorStr, getHEXColorStr, convertHEXAlphaValueToNumber } = require_utils$3();
	const { DEFAULT_HEX_ALPHA, DEFAULT_ALPHA, HEX_COLOR: HEX_COLOR$1, RGB_COLOR: RGB_COLOR$1, HSL_COLOR: HSL_COLOR$1, KEYWORD_COLOR: KEYWORD_COLOR$1 } = require_constants$2();
	const convertingHEXColor$1 = (node, options) => {
		const colorObj = parseHEXAColor(node.value);
		if (options.outputColorFormat === RGB_COLOR$1) node.value = getRGBColorStr(HEX_COLOR$1, colorObj.hexColor, options.alwaysAlpha || colorObj.hexAlpha !== DEFAULT_HEX_ALPHA ? convertHEXAlphaValueToNumber(colorObj.hexAlpha) : false);
		else if (options.outputColorFormat === HSL_COLOR$1) node.value = getHSLColorStr(HEX_COLOR$1, colorObj.hexColor, options.alwaysAlpha || colorObj.hexAlpha !== DEFAULT_HEX_ALPHA ? convertHEXAlphaValueToNumber(colorObj.hexAlpha) : false);
		return node;
	};
	const convertingRGBColor$1 = (node, options) => {
		const newNode = node.clone({ type: "word" });
		const isModernSyntax = !node.nodes.join(" ").includes(",");
		let r$2, g$1, b$1, a$1;
		if (!isModernSyntax) [r$2, , g$1, , b$1, , a$1] = node.nodes;
		else [r$2, g$1, b$1, , a$1] = node.nodes;
		if (options.outputColorFormat === HEX_COLOR$1) newNode.value = getHEXColorStr(RGB_COLOR$1, [
			+r$2.value,
			+g$1.value,
			+b$1.value
		], a$1 && +a$1.value !== DEFAULT_ALPHA && a$1.value);
		else if (options.outputColorFormat === HSL_COLOR$1) newNode.value = getHSLColorStr(RGB_COLOR$1, [
			+r$2.value,
			+g$1.value,
			+b$1.value
		], a$1 && a$1.value || options.alwaysAlpha && DEFAULT_ALPHA, isModernSyntax);
		else if (options.outputColorFormat === RGB_COLOR$1) newNode.value = getRGBColorStr(RGB_COLOR$1, [
			+r$2.value,
			+g$1.value,
			+b$1.value
		], a$1 && a$1.value || options.alwaysAlpha && DEFAULT_ALPHA, isModernSyntax);
		node.replaceWith(newNode);
		return node;
	};
	const convertingHSLColor$1 = (node, options) => {
		const newNode = node.clone({ type: "word" });
		let h$2, s$3, l$1, a$1;
		const isModernSyntax = !node.nodes.join(" ").includes(",");
		if (!isModernSyntax) [h$2, , s$3, , l$1, , a$1] = node.nodes;
		else [h$2, s$3, l$1, , a$1] = node.nodes;
		if (options.outputColorFormat === HEX_COLOR$1) newNode.value = getHEXColorStr(HSL_COLOR$1, [
			+h$2.value,
			+s$3.value,
			+l$1.value
		], a$1 && +a$1.value !== DEFAULT_ALPHA && a$1.value);
		else if (options.outputColorFormat === RGB_COLOR$1) newNode.value = getRGBColorStr(HSL_COLOR$1, [
			+h$2.value,
			+s$3.value,
			+l$1.value
		], a$1 && a$1.value || options.alwaysAlpha && DEFAULT_ALPHA, isModernSyntax);
		else if (options.outputColorFormat === HSL_COLOR$1) newNode.value = getHSLColorStr(HSL_COLOR$1, [
			+h$2.value,
			+s$3.value,
			+l$1.value
		], a$1 && a$1.value || options.alwaysAlpha && DEFAULT_ALPHA, isModernSyntax);
		node.replaceWith(newNode);
		return node;
	};
	const convertingKeywordColor$1 = (node, options) => {
		if (options.outputColorFormat === HEX_COLOR$1) node.value = getHEXColorStr(KEYWORD_COLOR$1, node.value);
		else if (options.outputColorFormat === RGB_COLOR$1) node.value = getRGBColorStr(KEYWORD_COLOR$1, node.value, options.alwaysAlpha && DEFAULT_ALPHA, options.isUseModernSyntax);
		else if (options.outputColorFormat === HSL_COLOR$1) node.value = getHSLColorStr(KEYWORD_COLOR$1, node.value, options.alwaysAlpha && DEFAULT_ALPHA, options.isUseModernSyntax);
		return node;
	};
	module.exports = {
		convertingHEXColor: convertingHEXColor$1,
		convertingRGBColor: convertingRGBColor$1,
		convertingHSLColor: convertingHSLColor$1,
		convertingKeywordColor: convertingKeywordColor$1
	};
} });

//#endregion
//#region node_modules/postcss-color-converter/index.js
var require_postcss_color_converter = __commonJS({ "node_modules/postcss-color-converter/index.js"(exports, module) {
	const valueParser$1 = require_lib$18();
	const colors = require_color_name();
	const { convertingHEXColor, convertingRGBColor, convertingHSLColor, convertingKeywordColor } = require_converts();
	const { HEX_COLOR, RGB_COLOR, HSL_COLOR, KEYWORD_COLOR } = require_constants$2();
	const colorNames = Object.keys(colors);
	const colorFormats = [
		HEX_COLOR,
		RGB_COLOR,
		HSL_COLOR,
		KEYWORD_COLOR
	];
	const propsWithColorRegExp = /(background|border|shadow|color|fill|outline|@|--|\$)/;
	const ignoredValuesRegExp = /(url)/;
	const specValuesInParamsRegExp = /(\$|calc|var)/;
	const defaultOptions = {
		outputColorFormat: "",
		alwaysAlpha: false,
		ignore: []
	};
	module.exports = (options = {}) => {
		const currentOptions = {
			...defaultOptions,
			...options
		};
		if (!currentOptions.outputColorFormat) throw new Error(`'outputColorFormat' option is undefined.`);
		if (!colorFormats.includes(currentOptions.outputColorFormat)) throw new Error(`The specified value of 'outputColorFormat' is not contained in [${colorFormats.join()}].`);
		return {
			postcssPlugin: "postcss-color-converter",
			Declaration(decl$1) {
				if (decl$1.prop && propsWithColorRegExp.test(decl$1.prop) && decl$1.value && !ignoredValuesRegExp.test(decl$1.value)) {
					let valueObj = valueParser$1.parse(decl$1.value, { ignoreUnknownWords: true });
					valueObj.walk((node) => {
						if (node.isColor) {
							if (!currentOptions.ignore.includes(HEX_COLOR) && currentOptions.outputColorFormat !== HEX_COLOR && node.isHex) node = convertingHEXColor(node, currentOptions);
							else if (!currentOptions.ignore.includes(RGB_COLOR) && (currentOptions.alwaysAlpha || currentOptions.outputColorFormat !== RGB_COLOR) && (node.name === "rgb" || node.name === "rgba") && !specValuesInParamsRegExp.test(node.params)) node = convertingRGBColor(node, currentOptions);
							else if (!currentOptions.ignore.includes(HSL_COLOR) && (currentOptions.alwaysAlpha || currentOptions.outputColorFormat !== HSL_COLOR) && (node.name === "hsl" || node.name === "hsla") && !specValuesInParamsRegExp.test(node.params)) node = convertingHSLColor(node, currentOptions);
							else if (!currentOptions.ignore.includes(KEYWORD_COLOR) && colorNames.includes(node.value)) node = convertingKeywordColor(node, currentOptions);
						}
					});
					decl$1.value = valueObj.toString();
				}
			}
		};
	};
	module.exports.postcss = true;
} });
var import_postcss_color_converter = __toESM(require_postcss_color_converter());

//#endregion
//#region node_modules/resolve/lib/homedir.js
var require_homedir = __commonJS({ "node_modules/resolve/lib/homedir.js"(exports, module) {
	var os$1 = __require("os");
	module.exports = os$1.homedir || function homedir$2() {
		var home = process.env.HOME;
		var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;
		if (process.platform === "win32") return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;
		if (process.platform === "darwin") return home || (user ? "/Users/" + user : null);
		if (process.platform === "linux") return home || (process.getuid() === 0 ? "/root" : user ? "/home/" + user : null);
		return home || null;
	};
} });

//#endregion
//#region node_modules/resolve/lib/caller.js
var require_caller = __commonJS({ "node_modules/resolve/lib/caller.js"(exports, module) {
	module.exports = function() {
		var origPrepareStackTrace = Error.prepareStackTrace;
		Error.prepareStackTrace = function(_, stack$1) {
			return stack$1;
		};
		var stack = new Error().stack;
		Error.prepareStackTrace = origPrepareStackTrace;
		return stack[2].getFileName();
	};
} });

//#endregion
//#region node_modules/path-parse/index.js
var require_path_parse = __commonJS({ "node_modules/path-parse/index.js"(exports, module) {
	var isWindows$1 = process.platform === "win32";
	var splitWindowsRe = /^(((?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?[\\\/]?)(?:[^\\\/]*[\\\/])*)((\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))[\\\/]*$/;
	var win32$3 = {};
	function win32SplitPath(filename) {
		return splitWindowsRe.exec(filename).slice(1);
	}
	win32$3.parse = function(pathString) {
		if (typeof pathString !== "string") throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
		var allParts = win32SplitPath(pathString);
		if (!allParts || allParts.length !== 5) throw new TypeError("Invalid path '" + pathString + "'");
		return {
			root: allParts[1],
			dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),
			base: allParts[2],
			ext: allParts[4],
			name: allParts[3]
		};
	};
	var splitPathRe = /^((\/?)(?:[^\/]*\/)*)((\.{1,2}|[^\/]+?|)(\.[^.\/]*|))[\/]*$/;
	var posix$2 = {};
	function posixSplitPath(filename) {
		return splitPathRe.exec(filename).slice(1);
	}
	posix$2.parse = function(pathString) {
		if (typeof pathString !== "string") throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
		var allParts = posixSplitPath(pathString);
		if (!allParts || allParts.length !== 5) throw new TypeError("Invalid path '" + pathString + "'");
		return {
			root: allParts[1],
			dir: allParts[0].slice(0, -1),
			base: allParts[2],
			ext: allParts[4],
			name: allParts[3]
		};
	};
	if (isWindows$1) module.exports = win32$3.parse;
	else module.exports = posix$2.parse;
	module.exports.posix = posix$2.parse;
	module.exports.win32 = win32$3.parse;
} });

//#endregion
//#region node_modules/resolve/lib/node-modules-paths.js
var require_node_modules_paths = __commonJS({ "node_modules/resolve/lib/node-modules-paths.js"(exports, module) {
	var path$14 = __require("path");
	var parse$9 = path$14.parse || require_path_parse();
	var getNodeModulesDirs = function getNodeModulesDirs$1(absoluteStart, modules) {
		var prefix$1 = "/";
		if (/^([A-Za-z]:)/.test(absoluteStart)) prefix$1 = "";
		else if (/^\\\\/.test(absoluteStart)) prefix$1 = "\\\\";
		var paths = [absoluteStart];
		var parsed = parse$9(absoluteStart);
		while (parsed.dir !== paths[paths.length - 1]) {
			paths.push(parsed.dir);
			parsed = parse$9(parsed.dir);
		}
		return paths.reduce(function(dirs, aPath) {
			return dirs.concat(modules.map(function(moduleDir) {
				return path$14.resolve(prefix$1, aPath, moduleDir);
			}));
		}, []);
	};
	module.exports = function nodeModulesPaths$2(start, opts, request) {
		var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : ["node_modules"];
		if (opts && typeof opts.paths === "function") return opts.paths(request, start, function() {
			return getNodeModulesDirs(start, modules);
		}, opts);
		var dirs = getNodeModulesDirs(start, modules);
		return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
	};
} });

//#endregion
//#region node_modules/resolve/lib/normalize-options.js
var require_normalize_options = __commonJS({ "node_modules/resolve/lib/normalize-options.js"(exports, module) {
	module.exports = function(x$1, opts) {
		/**
		* This file is purposefully a passthrough. It's expected that third-party
		* environments will override it at runtime in order to inject special logic
		* into `resolve` (by manipulating the options). One such example is the PnP
		* code path in Yarn.
		*/
		return opts || {};
	};
} });

//#endregion
//#region node_modules/function-bind/implementation.js
var require_implementation = __commonJS({ "node_modules/function-bind/implementation.js"(exports, module) {
	var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
	var toStr = Object.prototype.toString;
	var max = Math.max;
	var funcType = "[object Function]";
	var concatty = function concatty$1(a$1, b$1) {
		var arr = [];
		for (var i$6 = 0; i$6 < a$1.length; i$6 += 1) arr[i$6] = a$1[i$6];
		for (var j$1 = 0; j$1 < b$1.length; j$1 += 1) arr[j$1 + a$1.length] = b$1[j$1];
		return arr;
	};
	var slicy = function slicy$1(arrLike, offset) {
		var arr = [];
		for (var i$6 = offset || 0, j$1 = 0; i$6 < arrLike.length; i$6 += 1, j$1 += 1) arr[j$1] = arrLike[i$6];
		return arr;
	};
	var joiny = function(arr, joiner) {
		var str$4 = "";
		for (var i$6 = 0; i$6 < arr.length; i$6 += 1) {
			str$4 += arr[i$6];
			if (i$6 + 1 < arr.length) str$4 += joiner;
		}
		return str$4;
	};
	module.exports = function bind$1(that) {
		var target = this;
		if (typeof target !== "function" || toStr.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
		var args = slicy(arguments, 1);
		var bound;
		var binder = function() {
			if (this instanceof bound) {
				var result = target.apply(this, concatty(args, arguments));
				if (Object(result) === result) return result;
				return this;
			}
			return target.apply(that, concatty(args, arguments));
		};
		var boundLength = max(0, target.length - args.length);
		var boundArgs = [];
		for (var i$6 = 0; i$6 < boundLength; i$6++) boundArgs[i$6] = "$" + i$6;
		bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
		if (target.prototype) {
			var Empty = function Empty$1() {};
			Empty.prototype = target.prototype;
			bound.prototype = new Empty();
			Empty.prototype = null;
		}
		return bound;
	};
} });

//#endregion
//#region node_modules/function-bind/index.js
var require_function_bind = __commonJS({ "node_modules/function-bind/index.js"(exports, module) {
	var implementation = require_implementation();
	module.exports = Function.prototype.bind || implementation;
} });

//#endregion
//#region node_modules/hasown/index.js
var require_hasown = __commonJS({ "node_modules/hasown/index.js"(exports, module) {
	var call$1 = Function.prototype.call;
	var $hasOwn = Object.prototype.hasOwnProperty;
	var bind = require_function_bind();
	/** @type {import('.')} */
	module.exports = bind.call(call$1, $hasOwn);
} });

//#endregion
//#region node_modules/is-core-module/core.json
var require_core$3 = __commonJS({ "node_modules/is-core-module/core.json"(exports, module) {
	module.exports = {
		"assert": true,
		"node:assert": [">= 14.18 && < 15", ">= 16"],
		"assert/strict": ">= 15",
		"node:assert/strict": ">= 16",
		"async_hooks": ">= 8",
		"node:async_hooks": [">= 14.18 && < 15", ">= 16"],
		"buffer_ieee754": ">= 0.5 && < 0.9.7",
		"buffer": true,
		"node:buffer": [">= 14.18 && < 15", ">= 16"],
		"child_process": true,
		"node:child_process": [">= 14.18 && < 15", ">= 16"],
		"cluster": ">= 0.5",
		"node:cluster": [">= 14.18 && < 15", ">= 16"],
		"console": true,
		"node:console": [">= 14.18 && < 15", ">= 16"],
		"constants": true,
		"node:constants": [">= 14.18 && < 15", ">= 16"],
		"crypto": true,
		"node:crypto": [">= 14.18 && < 15", ">= 16"],
		"_debug_agent": ">= 1 && < 8",
		"_debugger": "< 8",
		"dgram": true,
		"node:dgram": [">= 14.18 && < 15", ">= 16"],
		"diagnostics_channel": [">= 14.17 && < 15", ">= 15.1"],
		"node:diagnostics_channel": [">= 14.18 && < 15", ">= 16"],
		"dns": true,
		"node:dns": [">= 14.18 && < 15", ">= 16"],
		"dns/promises": ">= 15",
		"node:dns/promises": ">= 16",
		"domain": ">= 0.7.12",
		"node:domain": [">= 14.18 && < 15", ">= 16"],
		"events": true,
		"node:events": [">= 14.18 && < 15", ">= 16"],
		"freelist": "< 6",
		"fs": true,
		"node:fs": [">= 14.18 && < 15", ">= 16"],
		"fs/promises": [">= 10 && < 10.1", ">= 14"],
		"node:fs/promises": [">= 14.18 && < 15", ">= 16"],
		"_http_agent": ">= 0.11.1",
		"node:_http_agent": [">= 14.18 && < 15", ">= 16"],
		"_http_client": ">= 0.11.1",
		"node:_http_client": [">= 14.18 && < 15", ">= 16"],
		"_http_common": ">= 0.11.1",
		"node:_http_common": [">= 14.18 && < 15", ">= 16"],
		"_http_incoming": ">= 0.11.1",
		"node:_http_incoming": [">= 14.18 && < 15", ">= 16"],
		"_http_outgoing": ">= 0.11.1",
		"node:_http_outgoing": [">= 14.18 && < 15", ">= 16"],
		"_http_server": ">= 0.11.1",
		"node:_http_server": [">= 14.18 && < 15", ">= 16"],
		"http": true,
		"node:http": [">= 14.18 && < 15", ">= 16"],
		"http2": ">= 8.8",
		"node:http2": [">= 14.18 && < 15", ">= 16"],
		"https": true,
		"node:https": [">= 14.18 && < 15", ">= 16"],
		"inspector": ">= 8",
		"node:inspector": [">= 14.18 && < 15", ">= 16"],
		"inspector/promises": [">= 19"],
		"node:inspector/promises": [">= 19"],
		"_linklist": "< 8",
		"module": true,
		"node:module": [">= 14.18 && < 15", ">= 16"],
		"net": true,
		"node:net": [">= 14.18 && < 15", ">= 16"],
		"node-inspect/lib/_inspect": ">= 7.6 && < 12",
		"node-inspect/lib/internal/inspect_client": ">= 7.6 && < 12",
		"node-inspect/lib/internal/inspect_repl": ">= 7.6 && < 12",
		"os": true,
		"node:os": [">= 14.18 && < 15", ">= 16"],
		"path": true,
		"node:path": [">= 14.18 && < 15", ">= 16"],
		"path/posix": ">= 15.3",
		"node:path/posix": ">= 16",
		"path/win32": ">= 15.3",
		"node:path/win32": ">= 16",
		"perf_hooks": ">= 8.5",
		"node:perf_hooks": [">= 14.18 && < 15", ">= 16"],
		"process": ">= 1",
		"node:process": [">= 14.18 && < 15", ">= 16"],
		"punycode": ">= 0.5",
		"node:punycode": [">= 14.18 && < 15", ">= 16"],
		"querystring": true,
		"node:querystring": [">= 14.18 && < 15", ">= 16"],
		"readline": true,
		"node:readline": [">= 14.18 && < 15", ">= 16"],
		"readline/promises": ">= 17",
		"node:readline/promises": ">= 17",
		"repl": true,
		"node:repl": [">= 14.18 && < 15", ">= 16"],
		"node:sea": [">= 20.12 && < 21", ">= 21.7"],
		"smalloc": ">= 0.11.5 && < 3",
		"node:sqlite": [">= 22.13 && < 23", ">= 23.4"],
		"_stream_duplex": ">= 0.9.4",
		"node:_stream_duplex": [">= 14.18 && < 15", ">= 16"],
		"_stream_transform": ">= 0.9.4",
		"node:_stream_transform": [">= 14.18 && < 15", ">= 16"],
		"_stream_wrap": ">= 1.4.1",
		"node:_stream_wrap": [">= 14.18 && < 15", ">= 16"],
		"_stream_passthrough": ">= 0.9.4",
		"node:_stream_passthrough": [">= 14.18 && < 15", ">= 16"],
		"_stream_readable": ">= 0.9.4",
		"node:_stream_readable": [">= 14.18 && < 15", ">= 16"],
		"_stream_writable": ">= 0.9.4",
		"node:_stream_writable": [">= 14.18 && < 15", ">= 16"],
		"stream": true,
		"node:stream": [">= 14.18 && < 15", ">= 16"],
		"stream/consumers": ">= 16.7",
		"node:stream/consumers": ">= 16.7",
		"stream/promises": ">= 15",
		"node:stream/promises": ">= 16",
		"stream/web": ">= 16.5",
		"node:stream/web": ">= 16.5",
		"string_decoder": true,
		"node:string_decoder": [">= 14.18 && < 15", ">= 16"],
		"sys": [">= 0.4 && < 0.7", ">= 0.8"],
		"node:sys": [">= 14.18 && < 15", ">= 16"],
		"test/reporters": ">= 19.9 && < 20.2",
		"node:test/reporters": [
			">= 18.17 && < 19",
			">= 19.9",
			">= 20"
		],
		"test/mock_loader": ">= 22.3 && < 22.7",
		"node:test/mock_loader": ">= 22.3 && < 22.7",
		"node:test": [">= 16.17 && < 17", ">= 18"],
		"timers": true,
		"node:timers": [">= 14.18 && < 15", ">= 16"],
		"timers/promises": ">= 15",
		"node:timers/promises": ">= 16",
		"_tls_common": ">= 0.11.13",
		"node:_tls_common": [">= 14.18 && < 15", ">= 16"],
		"_tls_legacy": ">= 0.11.3 && < 10",
		"_tls_wrap": ">= 0.11.3",
		"node:_tls_wrap": [">= 14.18 && < 15", ">= 16"],
		"tls": true,
		"node:tls": [">= 14.18 && < 15", ">= 16"],
		"trace_events": ">= 10",
		"node:trace_events": [">= 14.18 && < 15", ">= 16"],
		"tty": true,
		"node:tty": [">= 14.18 && < 15", ">= 16"],
		"url": true,
		"node:url": [">= 14.18 && < 15", ">= 16"],
		"util": true,
		"node:util": [">= 14.18 && < 15", ">= 16"],
		"util/types": ">= 15.3",
		"node:util/types": ">= 16",
		"v8/tools/arguments": ">= 10 && < 12",
		"v8/tools/codemap": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/consarray": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/csvparser": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/logreader": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/profile_view": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/splaytree": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8": ">= 1",
		"node:v8": [">= 14.18 && < 15", ">= 16"],
		"vm": true,
		"node:vm": [">= 14.18 && < 15", ">= 16"],
		"wasi": [
			">= 13.4 && < 13.5",
			">= 18.17 && < 19",
			">= 20"
		],
		"node:wasi": [">= 18.17 && < 19", ">= 20"],
		"worker_threads": ">= 11.7",
		"node:worker_threads": [">= 14.18 && < 15", ">= 16"],
		"zlib": ">= 0.5",
		"node:zlib": [">= 14.18 && < 15", ">= 16"]
	};
} });

//#endregion
//#region node_modules/is-core-module/index.js
var require_is_core_module = __commonJS({ "node_modules/is-core-module/index.js"(exports, module) {
	var hasOwn$2 = require_hasown();
	function specifierIncluded(current, specifier) {
		var nodeParts = current.split(".");
		var parts = specifier.split(" ");
		var op = parts.length > 1 ? parts[0] : "=";
		var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
		for (var i$6 = 0; i$6 < 3; ++i$6) {
			var cur = parseInt(nodeParts[i$6] || 0, 10);
			var ver = parseInt(versionParts[i$6] || 0, 10);
			if (cur === ver) continue;
			if (op === "<") return cur < ver;
			if (op === ">=") return cur >= ver;
			return false;
		}
		return op === ">=";
	}
	function matchesRange(current, range$2) {
		var specifiers = range$2.split(/ ?&& ?/);
		if (specifiers.length === 0) return false;
		for (var i$6 = 0; i$6 < specifiers.length; ++i$6) if (!specifierIncluded(current, specifiers[i$6])) return false;
		return true;
	}
	function versionIncluded(nodeVersion, specifierValue) {
		if (typeof specifierValue === "boolean") return specifierValue;
		var current = typeof nodeVersion === "undefined" ? process.versions && process.versions.node : nodeVersion;
		if (typeof current !== "string") throw new TypeError(typeof nodeVersion === "undefined" ? "Unable to determine current node version" : "If provided, a valid node version is required");
		if (specifierValue && typeof specifierValue === "object") {
			for (var i$6 = 0; i$6 < specifierValue.length; ++i$6) if (matchesRange(current, specifierValue[i$6])) return true;
			return false;
		}
		return matchesRange(current, specifierValue);
	}
	var data$1 = require_core$3();
	module.exports = function isCore$2(x$1, nodeVersion) {
		return hasOwn$2(data$1, x$1) && versionIncluded(nodeVersion, data$1[x$1]);
	};
} });

//#endregion
//#region node_modules/resolve/lib/async.js
var require_async$1 = __commonJS({ "node_modules/resolve/lib/async.js"(exports, module) {
	var fs$5 = __require("fs");
	var getHomedir$1 = require_homedir();
	var path$13 = __require("path");
	var caller$1 = require_caller();
	var nodeModulesPaths$1 = require_node_modules_paths();
	var normalizeOptions$3 = require_normalize_options();
	var isCore$1 = require_is_core_module();
	var realpathFS$1 = process.platform !== "win32" && fs$5.realpath && typeof fs$5.realpath.native === "function" ? fs$5.realpath.native : fs$5.realpath;
	var homedir$1 = getHomedir$1();
	var defaultPaths$1 = function() {
		return [path$13.join(homedir$1, ".node_modules"), path$13.join(homedir$1, ".node_libraries")];
	};
	var defaultIsFile$1 = function isFile$1(file$2, cb) {
		fs$5.stat(file$2, function(err, stat$5) {
			if (!err) return cb(null, stat$5.isFile() || stat$5.isFIFO());
			if (err.code === "ENOENT" || err.code === "ENOTDIR") return cb(null, false);
			return cb(err);
		});
	};
	var defaultIsDir$1 = function isDirectory(dir, cb) {
		fs$5.stat(dir, function(err, stat$5) {
			if (!err) return cb(null, stat$5.isDirectory());
			if (err.code === "ENOENT" || err.code === "ENOTDIR") return cb(null, false);
			return cb(err);
		});
	};
	var defaultRealpath = function realpath$1(x$1, cb) {
		realpathFS$1(x$1, function(realpathErr, realPath) {
			if (realpathErr && realpathErr.code !== "ENOENT") cb(realpathErr);
			else cb(null, realpathErr ? x$1 : realPath);
		});
	};
	var maybeRealpath = function maybeRealpath$1(realpath$1, x$1, opts, cb) {
		if (opts && opts.preserveSymlinks === false) realpath$1(x$1, cb);
		else cb(null, x$1);
	};
	var defaultReadPackage = function defaultReadPackage$1(readFile$1, pkgfile, cb) {
		readFile$1(pkgfile, function(readFileErr, body) {
			if (readFileErr) cb(readFileErr);
			else try {
				var pkg = JSON.parse(body);
				cb(null, pkg);
			} catch (jsonErr) {
				cb(null);
			}
		});
	};
	var getPackageCandidates$1 = function getPackageCandidates$2(x$1, start, opts) {
		var dirs = nodeModulesPaths$1(start, opts, x$1);
		for (var i$6 = 0; i$6 < dirs.length; i$6++) dirs[i$6] = path$13.join(dirs[i$6], x$1);
		return dirs;
	};
	module.exports = function resolve$5(x$1, options, callback) {
		var cb = callback;
		var opts = options;
		if (typeof options === "function") {
			cb = opts;
			opts = {};
		}
		if (typeof x$1 !== "string") {
			var err = new TypeError("Path must be a string.");
			return process.nextTick(function() {
				cb(err);
			});
		}
		opts = normalizeOptions$3(x$1, opts);
		var isFile$1 = opts.isFile || defaultIsFile$1;
		var isDirectory = opts.isDirectory || defaultIsDir$1;
		var readFile$1 = opts.readFile || fs$5.readFile;
		var realpath$1 = opts.realpath || defaultRealpath;
		var readPackage = opts.readPackage || defaultReadPackage;
		if (opts.readFile && opts.readPackage) {
			var conflictErr = new TypeError("`readFile` and `readPackage` are mutually exclusive.");
			return process.nextTick(function() {
				cb(conflictErr);
			});
		}
		var packageIterator = opts.packageIterator;
		var extensions = opts.extensions || [".js"];
		var includeCoreModules = opts.includeCoreModules !== false;
		var basedir = opts.basedir || path$13.dirname(caller$1());
		var parent = opts.filename || basedir;
		opts.paths = opts.paths || defaultPaths$1();
		var absoluteStart = path$13.resolve(basedir);
		maybeRealpath(realpath$1, absoluteStart, opts, function(err$1, realStart) {
			if (err$1) cb(err$1);
			else init$1(realStart);
		});
		var res;
		function init$1(basedir$1) {
			if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x$1)) {
				res = path$13.resolve(basedir$1, x$1);
				if (x$1 === "." || x$1 === ".." || x$1.slice(-1) === "/") res += "/";
				if (/\/$/.test(x$1) && res === basedir$1) loadAsDirectory(res, opts.package, onfile);
				else loadAsFile(res, opts.package, onfile);
			} else if (includeCoreModules && isCore$1(x$1)) return cb(null, x$1);
			else loadNodeModules(x$1, basedir$1, function(err$1, n$4, pkg) {
				if (err$1) cb(err$1);
				else if (n$4) return maybeRealpath(realpath$1, n$4, opts, function(err$2, realN) {
					if (err$2) cb(err$2);
					else cb(null, realN, pkg);
				});
				else {
					var moduleError = new Error("Cannot find module '" + x$1 + "' from '" + parent + "'");
					moduleError.code = "MODULE_NOT_FOUND";
					cb(moduleError);
				}
			});
		}
		function onfile(err$1, m$2, pkg) {
			if (err$1) cb(err$1);
			else if (m$2) cb(null, m$2, pkg);
			else loadAsDirectory(res, function(err$2, d$2, pkg$1) {
				if (err$2) cb(err$2);
				else if (d$2) maybeRealpath(realpath$1, d$2, opts, function(err$3, realD) {
					if (err$3) cb(err$3);
					else cb(null, realD, pkg$1);
				});
				else {
					var moduleError = new Error("Cannot find module '" + x$1 + "' from '" + parent + "'");
					moduleError.code = "MODULE_NOT_FOUND";
					cb(moduleError);
				}
			});
		}
		function loadAsFile(x$2, thePackage, callback$1) {
			var loadAsFilePackage = thePackage;
			var cb$1 = callback$1;
			if (typeof loadAsFilePackage === "function") {
				cb$1 = loadAsFilePackage;
				loadAsFilePackage = void 0;
			}
			var exts = [""].concat(extensions);
			load$2(exts, x$2, loadAsFilePackage);
			function load$2(exts$1, x$3, loadPackage) {
				if (exts$1.length === 0) return cb$1(null, void 0, loadPackage);
				var file$2 = x$3 + exts$1[0];
				var pkg = loadPackage;
				if (pkg) onpkg(null, pkg);
				else loadpkg(path$13.dirname(file$2), onpkg);
				function onpkg(err$1, pkg_, dir) {
					pkg = pkg_;
					if (err$1) return cb$1(err$1);
					if (dir && pkg && opts.pathFilter) {
						var rfile = path$13.relative(dir, file$2);
						var rel = rfile.slice(0, rfile.length - exts$1[0].length);
						var r$2 = opts.pathFilter(pkg, x$3, rel);
						if (r$2) return load$2([""].concat(extensions.slice()), path$13.resolve(dir, r$2), pkg);
					}
					isFile$1(file$2, onex);
				}
				function onex(err$1, ex) {
					if (err$1) return cb$1(err$1);
					if (ex) return cb$1(null, file$2, pkg);
					load$2(exts$1.slice(1), x$3, pkg);
				}
			}
		}
		function loadpkg(dir, cb$1) {
			if (dir === "" || dir === "/") return cb$1(null);
			if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) return cb$1(null);
			if (/[/\\]node_modules[/\\]*$/.test(dir)) return cb$1(null);
			maybeRealpath(realpath$1, dir, opts, function(unwrapErr, pkgdir) {
				if (unwrapErr) return loadpkg(path$13.dirname(dir), cb$1);
				var pkgfile = path$13.join(pkgdir, "package.json");
				isFile$1(pkgfile, function(err$1, ex) {
					if (!ex) return loadpkg(path$13.dirname(dir), cb$1);
					readPackage(readFile$1, pkgfile, function(err$2, pkgParam) {
						if (err$2) cb$1(err$2);
						var pkg = pkgParam;
						if (pkg && opts.packageFilter) pkg = opts.packageFilter(pkg, pkgfile);
						cb$1(null, pkg, dir);
					});
				});
			});
		}
		function loadAsDirectory(x$2, loadAsDirectoryPackage, callback$1) {
			var cb$1 = callback$1;
			var fpkg = loadAsDirectoryPackage;
			if (typeof fpkg === "function") {
				cb$1 = fpkg;
				fpkg = opts.package;
			}
			maybeRealpath(realpath$1, x$2, opts, function(unwrapErr, pkgdir) {
				if (unwrapErr) return cb$1(unwrapErr);
				var pkgfile = path$13.join(pkgdir, "package.json");
				isFile$1(pkgfile, function(err$1, ex) {
					if (err$1) return cb$1(err$1);
					if (!ex) return loadAsFile(path$13.join(x$2, "index"), fpkg, cb$1);
					readPackage(readFile$1, pkgfile, function(err$2, pkgParam) {
						if (err$2) return cb$1(err$2);
						var pkg = pkgParam;
						if (pkg && opts.packageFilter) pkg = opts.packageFilter(pkg, pkgfile);
						if (pkg && pkg.main) {
							if (typeof pkg.main !== "string") {
								var mainError = new TypeError("package “" + pkg.name + "” `main` must be a string");
								mainError.code = "INVALID_PACKAGE_MAIN";
								return cb$1(mainError);
							}
							if (pkg.main === "." || pkg.main === "./") pkg.main = "index";
							loadAsFile(path$13.resolve(x$2, pkg.main), pkg, function(err$3, m$2, pkg$1) {
								if (err$3) return cb$1(err$3);
								if (m$2) return cb$1(null, m$2, pkg$1);
								if (!pkg$1) return loadAsFile(path$13.join(x$2, "index"), pkg$1, cb$1);
								var dir = path$13.resolve(x$2, pkg$1.main);
								loadAsDirectory(dir, pkg$1, function(err$4, n$4, pkg$2) {
									if (err$4) return cb$1(err$4);
									if (n$4) return cb$1(null, n$4, pkg$2);
									loadAsFile(path$13.join(x$2, "index"), pkg$2, cb$1);
								});
							});
							return;
						}
						loadAsFile(path$13.join(x$2, "/index"), pkg, cb$1);
					});
				});
			});
		}
		function processDirs(cb$1, dirs) {
			if (dirs.length === 0) return cb$1(null, void 0);
			var dir = dirs[0];
			isDirectory(path$13.dirname(dir), isdir);
			function isdir(err$1, isdir$1) {
				if (err$1) return cb$1(err$1);
				if (!isdir$1) return processDirs(cb$1, dirs.slice(1));
				loadAsFile(dir, opts.package, onfile$1);
			}
			function onfile$1(err$1, m$2, pkg) {
				if (err$1) return cb$1(err$1);
				if (m$2) return cb$1(null, m$2, pkg);
				loadAsDirectory(dir, opts.package, ondir);
			}
			function ondir(err$1, n$4, pkg) {
				if (err$1) return cb$1(err$1);
				if (n$4) return cb$1(null, n$4, pkg);
				processDirs(cb$1, dirs.slice(1));
			}
		}
		function loadNodeModules(x$2, start, cb$1) {
			var thunk = function() {
				return getPackageCandidates$1(x$2, start, opts);
			};
			processDirs(cb$1, packageIterator ? packageIterator(x$2, start, thunk, opts) : thunk());
		}
	};
} });

//#endregion
//#region node_modules/resolve/lib/core.json
var require_core$2 = __commonJS({ "node_modules/resolve/lib/core.json"(exports, module) {
	module.exports = {
		"assert": true,
		"node:assert": [">= 14.18 && < 15", ">= 16"],
		"assert/strict": ">= 15",
		"node:assert/strict": ">= 16",
		"async_hooks": ">= 8",
		"node:async_hooks": [">= 14.18 && < 15", ">= 16"],
		"buffer_ieee754": ">= 0.5 && < 0.9.7",
		"buffer": true,
		"node:buffer": [">= 14.18 && < 15", ">= 16"],
		"child_process": true,
		"node:child_process": [">= 14.18 && < 15", ">= 16"],
		"cluster": ">= 0.5",
		"node:cluster": [">= 14.18 && < 15", ">= 16"],
		"console": true,
		"node:console": [">= 14.18 && < 15", ">= 16"],
		"constants": true,
		"node:constants": [">= 14.18 && < 15", ">= 16"],
		"crypto": true,
		"node:crypto": [">= 14.18 && < 15", ">= 16"],
		"_debug_agent": ">= 1 && < 8",
		"_debugger": "< 8",
		"dgram": true,
		"node:dgram": [">= 14.18 && < 15", ">= 16"],
		"diagnostics_channel": [">= 14.17 && < 15", ">= 15.1"],
		"node:diagnostics_channel": [">= 14.18 && < 15", ">= 16"],
		"dns": true,
		"node:dns": [">= 14.18 && < 15", ">= 16"],
		"dns/promises": ">= 15",
		"node:dns/promises": ">= 16",
		"domain": ">= 0.7.12",
		"node:domain": [">= 14.18 && < 15", ">= 16"],
		"events": true,
		"node:events": [">= 14.18 && < 15", ">= 16"],
		"freelist": "< 6",
		"fs": true,
		"node:fs": [">= 14.18 && < 15", ">= 16"],
		"fs/promises": [">= 10 && < 10.1", ">= 14"],
		"node:fs/promises": [">= 14.18 && < 15", ">= 16"],
		"_http_agent": ">= 0.11.1",
		"node:_http_agent": [">= 14.18 && < 15", ">= 16"],
		"_http_client": ">= 0.11.1",
		"node:_http_client": [">= 14.18 && < 15", ">= 16"],
		"_http_common": ">= 0.11.1",
		"node:_http_common": [">= 14.18 && < 15", ">= 16"],
		"_http_incoming": ">= 0.11.1",
		"node:_http_incoming": [">= 14.18 && < 15", ">= 16"],
		"_http_outgoing": ">= 0.11.1",
		"node:_http_outgoing": [">= 14.18 && < 15", ">= 16"],
		"_http_server": ">= 0.11.1",
		"node:_http_server": [">= 14.18 && < 15", ">= 16"],
		"http": true,
		"node:http": [">= 14.18 && < 15", ">= 16"],
		"http2": ">= 8.8",
		"node:http2": [">= 14.18 && < 15", ">= 16"],
		"https": true,
		"node:https": [">= 14.18 && < 15", ">= 16"],
		"inspector": ">= 8",
		"node:inspector": [">= 14.18 && < 15", ">= 16"],
		"inspector/promises": [">= 19"],
		"node:inspector/promises": [">= 19"],
		"_linklist": "< 8",
		"module": true,
		"node:module": [">= 14.18 && < 15", ">= 16"],
		"net": true,
		"node:net": [">= 14.18 && < 15", ">= 16"],
		"node-inspect/lib/_inspect": ">= 7.6 && < 12",
		"node-inspect/lib/internal/inspect_client": ">= 7.6 && < 12",
		"node-inspect/lib/internal/inspect_repl": ">= 7.6 && < 12",
		"os": true,
		"node:os": [">= 14.18 && < 15", ">= 16"],
		"path": true,
		"node:path": [">= 14.18 && < 15", ">= 16"],
		"path/posix": ">= 15.3",
		"node:path/posix": ">= 16",
		"path/win32": ">= 15.3",
		"node:path/win32": ">= 16",
		"perf_hooks": ">= 8.5",
		"node:perf_hooks": [">= 14.18 && < 15", ">= 16"],
		"process": ">= 1",
		"node:process": [">= 14.18 && < 15", ">= 16"],
		"punycode": ">= 0.5",
		"node:punycode": [">= 14.18 && < 15", ">= 16"],
		"querystring": true,
		"node:querystring": [">= 14.18 && < 15", ">= 16"],
		"readline": true,
		"node:readline": [">= 14.18 && < 15", ">= 16"],
		"readline/promises": ">= 17",
		"node:readline/promises": ">= 17",
		"repl": true,
		"node:repl": [">= 14.18 && < 15", ">= 16"],
		"node:sea": [">= 20.12 && < 21", ">= 21.7"],
		"smalloc": ">= 0.11.5 && < 3",
		"node:sqlite": ">= 23.4",
		"_stream_duplex": ">= 0.9.4",
		"node:_stream_duplex": [">= 14.18 && < 15", ">= 16"],
		"_stream_transform": ">= 0.9.4",
		"node:_stream_transform": [">= 14.18 && < 15", ">= 16"],
		"_stream_wrap": ">= 1.4.1",
		"node:_stream_wrap": [">= 14.18 && < 15", ">= 16"],
		"_stream_passthrough": ">= 0.9.4",
		"node:_stream_passthrough": [">= 14.18 && < 15", ">= 16"],
		"_stream_readable": ">= 0.9.4",
		"node:_stream_readable": [">= 14.18 && < 15", ">= 16"],
		"_stream_writable": ">= 0.9.4",
		"node:_stream_writable": [">= 14.18 && < 15", ">= 16"],
		"stream": true,
		"node:stream": [">= 14.18 && < 15", ">= 16"],
		"stream/consumers": ">= 16.7",
		"node:stream/consumers": ">= 16.7",
		"stream/promises": ">= 15",
		"node:stream/promises": ">= 16",
		"stream/web": ">= 16.5",
		"node:stream/web": ">= 16.5",
		"string_decoder": true,
		"node:string_decoder": [">= 14.18 && < 15", ">= 16"],
		"sys": [">= 0.4 && < 0.7", ">= 0.8"],
		"node:sys": [">= 14.18 && < 15", ">= 16"],
		"test/reporters": ">= 19.9 && < 20.2",
		"node:test/reporters": [
			">= 18.17 && < 19",
			">= 19.9",
			">= 20"
		],
		"test/mock_loader": ">= 22.3 && < 22.7",
		"node:test/mock_loader": ">= 22.3 && < 22.7",
		"node:test": [">= 16.17 && < 17", ">= 18"],
		"timers": true,
		"node:timers": [">= 14.18 && < 15", ">= 16"],
		"timers/promises": ">= 15",
		"node:timers/promises": ">= 16",
		"_tls_common": ">= 0.11.13",
		"node:_tls_common": [">= 14.18 && < 15", ">= 16"],
		"_tls_legacy": ">= 0.11.3 && < 10",
		"_tls_wrap": ">= 0.11.3",
		"node:_tls_wrap": [">= 14.18 && < 15", ">= 16"],
		"tls": true,
		"node:tls": [">= 14.18 && < 15", ">= 16"],
		"trace_events": ">= 10",
		"node:trace_events": [">= 14.18 && < 15", ">= 16"],
		"tty": true,
		"node:tty": [">= 14.18 && < 15", ">= 16"],
		"url": true,
		"node:url": [">= 14.18 && < 15", ">= 16"],
		"util": true,
		"node:util": [">= 14.18 && < 15", ">= 16"],
		"util/types": ">= 15.3",
		"node:util/types": ">= 16",
		"v8/tools/arguments": ">= 10 && < 12",
		"v8/tools/codemap": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/consarray": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/csvparser": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/logreader": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/profile_view": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8/tools/splaytree": [">= 4.4 && < 5", ">= 5.2 && < 12"],
		"v8": ">= 1",
		"node:v8": [">= 14.18 && < 15", ">= 16"],
		"vm": true,
		"node:vm": [">= 14.18 && < 15", ">= 16"],
		"wasi": [
			">= 13.4 && < 13.5",
			">= 18.17 && < 19",
			">= 20"
		],
		"node:wasi": [">= 18.17 && < 19", ">= 20"],
		"worker_threads": ">= 11.7",
		"node:worker_threads": [">= 14.18 && < 15", ">= 16"],
		"zlib": ">= 0.5",
		"node:zlib": [">= 14.18 && < 15", ">= 16"]
	};
} });

//#endregion
//#region node_modules/resolve/lib/core.js
var require_core$1 = __commonJS({ "node_modules/resolve/lib/core.js"(exports, module) {
	var isCoreModule$1 = require_is_core_module();
	var data = require_core$2();
	var core = {};
	for (var mod in data) if (Object.prototype.hasOwnProperty.call(data, mod)) core[mod] = isCoreModule$1(mod);
	module.exports = core;
} });

//#endregion
//#region node_modules/resolve/lib/is-core.js
var require_is_core = __commonJS({ "node_modules/resolve/lib/is-core.js"(exports, module) {
	var isCoreModule = require_is_core_module();
	module.exports = function isCore$2(x$1) {
		return isCoreModule(x$1);
	};
} });

//#endregion
//#region node_modules/resolve/lib/sync.js
var require_sync$1 = __commonJS({ "node_modules/resolve/lib/sync.js"(exports, module) {
	var isCore = require_is_core_module();
	var fs$4 = __require("fs");
	var path$12 = __require("path");
	var getHomedir = require_homedir();
	var caller = require_caller();
	var nodeModulesPaths = require_node_modules_paths();
	var normalizeOptions$2 = require_normalize_options();
	var realpathFS = process.platform !== "win32" && fs$4.realpathSync && typeof fs$4.realpathSync.native === "function" ? fs$4.realpathSync.native : fs$4.realpathSync;
	var homedir = getHomedir();
	var defaultPaths = function() {
		return [path$12.join(homedir, ".node_modules"), path$12.join(homedir, ".node_libraries")];
	};
	var defaultIsFile = function isFile$1(file$2) {
		try {
			var stat$5 = fs$4.statSync(file$2, { throwIfNoEntry: false });
		} catch (e$2) {
			if (e$2 && (e$2.code === "ENOENT" || e$2.code === "ENOTDIR")) return false;
			throw e$2;
		}
		return !!stat$5 && (stat$5.isFile() || stat$5.isFIFO());
	};
	var defaultIsDir = function isDirectory(dir) {
		try {
			var stat$5 = fs$4.statSync(dir, { throwIfNoEntry: false });
		} catch (e$2) {
			if (e$2 && (e$2.code === "ENOENT" || e$2.code === "ENOTDIR")) return false;
			throw e$2;
		}
		return !!stat$5 && stat$5.isDirectory();
	};
	var defaultRealpathSync = function realpathSync$1(x$1) {
		try {
			return realpathFS(x$1);
		} catch (realpathErr) {
			if (realpathErr.code !== "ENOENT") throw realpathErr;
		}
		return x$1;
	};
	var maybeRealpathSync = function maybeRealpathSync$1(realpathSync$1, x$1, opts) {
		if (opts && opts.preserveSymlinks === false) return realpathSync$1(x$1);
		return x$1;
	};
	var defaultReadPackageSync = function defaultReadPackageSync$1(readFileSync$2, pkgfile) {
		var body = readFileSync$2(pkgfile);
		try {
			var pkg = JSON.parse(body);
			return pkg;
		} catch (jsonErr) {}
	};
	var getPackageCandidates = function getPackageCandidates$2(x$1, start, opts) {
		var dirs = nodeModulesPaths(start, opts, x$1);
		for (var i$6 = 0; i$6 < dirs.length; i$6++) dirs[i$6] = path$12.join(dirs[i$6], x$1);
		return dirs;
	};
	module.exports = function resolveSync(x$1, options) {
		if (typeof x$1 !== "string") throw new TypeError("Path must be a string.");
		var opts = normalizeOptions$2(x$1, options);
		var isFile$1 = opts.isFile || defaultIsFile;
		var readFileSync$2 = opts.readFileSync || fs$4.readFileSync;
		var isDirectory = opts.isDirectory || defaultIsDir;
		var realpathSync$1 = opts.realpathSync || defaultRealpathSync;
		var readPackageSync = opts.readPackageSync || defaultReadPackageSync;
		if (opts.readFileSync && opts.readPackageSync) throw new TypeError("`readFileSync` and `readPackageSync` are mutually exclusive.");
		var packageIterator = opts.packageIterator;
		var extensions = opts.extensions || [".js"];
		var includeCoreModules = opts.includeCoreModules !== false;
		var basedir = opts.basedir || path$12.dirname(caller());
		var parent = opts.filename || basedir;
		opts.paths = opts.paths || defaultPaths();
		var absoluteStart = maybeRealpathSync(realpathSync$1, path$12.resolve(basedir), opts);
		if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x$1)) {
			var res = path$12.resolve(absoluteStart, x$1);
			if (x$1 === "." || x$1 === ".." || x$1.slice(-1) === "/") res += "/";
			var m$2 = loadAsFileSync(res) || loadAsDirectorySync(res);
			if (m$2) return maybeRealpathSync(realpathSync$1, m$2, opts);
		} else if (includeCoreModules && isCore(x$1)) return x$1;
		else {
			var n$4 = loadNodeModulesSync(x$1, absoluteStart);
			if (n$4) return maybeRealpathSync(realpathSync$1, n$4, opts);
		}
		var err = new Error("Cannot find module '" + x$1 + "' from '" + parent + "'");
		err.code = "MODULE_NOT_FOUND";
		throw err;
		function loadAsFileSync(x$2) {
			var pkg = loadpkg(path$12.dirname(x$2));
			if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
				var rfile = path$12.relative(pkg.dir, x$2);
				var r$2 = opts.pathFilter(pkg.pkg, x$2, rfile);
				if (r$2) x$2 = path$12.resolve(pkg.dir, r$2);
			}
			if (isFile$1(x$2)) return x$2;
			for (var i$6 = 0; i$6 < extensions.length; i$6++) {
				var file$2 = x$2 + extensions[i$6];
				if (isFile$1(file$2)) return file$2;
			}
		}
		function loadpkg(dir) {
			if (dir === "" || dir === "/") return;
			if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) return;
			if (/[/\\]node_modules[/\\]*$/.test(dir)) return;
			var pkgfile = path$12.join(maybeRealpathSync(realpathSync$1, dir, opts), "package.json");
			if (!isFile$1(pkgfile)) return loadpkg(path$12.dirname(dir));
			var pkg = readPackageSync(readFileSync$2, pkgfile);
			if (pkg && opts.packageFilter) pkg = opts.packageFilter(
				pkg,
				/*pkgfile,*/
				dir
);
			return {
				pkg,
				dir
			};
		}
		function loadAsDirectorySync(x$2) {
			var pkgfile = path$12.join(maybeRealpathSync(realpathSync$1, x$2, opts), "/package.json");
			if (isFile$1(pkgfile)) {
				try {
					var pkg = readPackageSync(readFileSync$2, pkgfile);
				} catch (e$2) {}
				if (pkg && opts.packageFilter) pkg = opts.packageFilter(
					pkg,
					/*pkgfile,*/
					x$2
);
				if (pkg && pkg.main) {
					if (typeof pkg.main !== "string") {
						var mainError = new TypeError("package “" + pkg.name + "” `main` must be a string");
						mainError.code = "INVALID_PACKAGE_MAIN";
						throw mainError;
					}
					if (pkg.main === "." || pkg.main === "./") pkg.main = "index";
					try {
						var m$3 = loadAsFileSync(path$12.resolve(x$2, pkg.main));
						if (m$3) return m$3;
						var n$5 = loadAsDirectorySync(path$12.resolve(x$2, pkg.main));
						if (n$5) return n$5;
					} catch (e$2) {}
				}
			}
			return loadAsFileSync(path$12.join(x$2, "/index"));
		}
		function loadNodeModulesSync(x$2, start) {
			var thunk = function() {
				return getPackageCandidates(x$2, start, opts);
			};
			var dirs = packageIterator ? packageIterator(x$2, start, thunk, opts) : thunk();
			for (var i$6 = 0; i$6 < dirs.length; i$6++) {
				var dir = dirs[i$6];
				if (isDirectory(path$12.dirname(dir))) {
					var m$3 = loadAsFileSync(dir);
					if (m$3) return m$3;
					var n$5 = loadAsDirectorySync(dir);
					if (n$5) return n$5;
				}
			}
		}
	};
} });

//#endregion
//#region node_modules/resolve/index.js
var require_resolve = __commonJS({ "node_modules/resolve/index.js"(exports, module) {
	var async = require_async$1();
	async.core = require_core$1();
	async.isCore = require_is_core();
	async.sync = require_sync$1();
	module.exports = async;
} });
var import_resolve = __toESM(require_resolve());

//#endregion
//#region src/utils.ts
function normalizePath$1(...paths) {
	const f$1 = path.join(...paths).replace(/\\/g, "/");
	if (/^\.[/\\]/.test(paths[0])) return `./${f$1}`;
	return f$1;
}
const relativePath = (from, to) => normalizePath$1(path.relative(from, to));
const humanlizePath = (file$2) => relativePath(process.cwd(), file$2);
const resolveId = async (id$4, options = {}) => new Promise((resolve$5) => (0, import_resolve.default)(id$4, options, (err, res) => err ? resolve$5() : resolve$5(res)));
/** Every project is expected to have a main file which imports both vue3-ui css packages */
const isMain = (code$1) => new RegExp("import.*@bulvar/bulma/css/bulma.css").test(code$1) && new RegExp("import.*@pathscale/bulma-extensions").test(code$1);
const getDeclaredVariables = (code$1) => code$1.match(/(?<=--)(.*?)(?=:)/g) ?? [];
const isVariableUsed = (v$1, code$1) => code$1.includes(`var(--${v$1})`);
/** The imports are nuked and replaced with an import for a fake file that will be dynamically created by the plugin */
const injectFakeBundle = (code$1) => `import './vue3-ui-bundle.css';
  ${code$1.replace(/import.*@bulvar\/bulma\/css\/bulma\.css.*/gi, "").replace(/import.*@pathscale\/bulma-extensions.*/gi, "").replace(/import.*user\.css.*/gi, "")}`;
const makeVue3UiBundle = async (id$4) => {
	const bulmaCSSFile = await resolveId("@bulvar/bulma/css/bulma.css");
	if (!bulmaCSSFile) throw new Error("TRANSFORM - BULMA CSS NOT FOUND");
	const extensionsCSSFile = await resolveId("@pathscale/bulma-extensions-css-var");
	if (!extensionsCSSFile) throw new Error("TRANSFORM - EXTENSIONS CSS NOT FOUND");
	let bulmaCSS = await import_lib$3.default.readFile(bulmaCSSFile, "utf-8");
	const extensionsCSS = await import_lib$3.default.readFile(extensionsCSSFile, "utf-8");
	const userCSSFile = normalizePath$1(path.dirname(id$4), "user.css");
	if (!await import_lib$3.default.pathExists(userCSSFile)) return bulmaCSS + extensionsCSS;
	let userCSS = await import_lib$3.default.readFile(userCSSFile, "utf-8");
	console.log(`TRANSFORM - USER CSS FOUND (${humanlizePath(userCSSFile)})`);
	userCSS = postcss_default((0, import_postcss_color_converter.default)({ outputColorFormat: "hsl" })).process(userCSS).css;
	userCSS = userCSS.replace(/\/\*[^*]*\*+([^*/][^*]*\*+)*\//gi, "");
	userCSS = userCSS.replace(/--(.*):\shsl\((\d*),\s*(\d*)%,\s*(\d*)%\);?/gi, (_, name, h$2, s$3, l$1) => `${_.endsWith(";") ? _ : _.slice(0, -1)}
        --${name}-h: ${h$2};
        --${name}-s: ${s$3}%;
        --${name}-l: ${l$1}%;
        --${name}-a: 1;`);
	const vars = getDeclaredVariables(userCSS);
	for (const v$1 of vars) {
		const decl$1 = new RegExp(`.*${v$1}:.*`);
		bulmaCSS = bulmaCSS.replace(decl$1, decl$1.exec(userCSS)?.[0] ?? "");
	}
	return bulmaCSS + extensionsCSS;
};
const kebabCase = (s$3) => {
	const str$4 = s$3.slice(1).replace(/[A-Z]/g, (m$2) => `-${m$2.toLowerCase()}`);
	return s$3.charAt(0).toLowerCase() + str$4;
};
const camelCase$1 = (s$3) => {
	const str$4 = s$3.slice(1).replace(/-([a-z])/g, (_, $1) => $1.toUpperCase());
	return s$3.charAt(0).toLowerCase() + str$4;
};
const pascalCase = (s$3) => {
	const str$4 = s$3.slice(1).replace(/-([a-z])/g, (_, $1) => $1.toUpperCase());
	return s$3.charAt(0).toUpperCase() + str$4;
};

//#endregion
//#region node_modules/@vue/shared/dist/shared.cjs.prod.js
var require_shared_cjs_prod = __commonJS({ "node_modules/@vue/shared/dist/shared.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	
	* Make a map and return a function for checking if a key
	
	* is in that map.
	
	* IMPORTANT: all calls of this function must be prefixed with
	
	* \/\*#\_\_PURE\_\_\*\/
	
	* So that rollup can tree-shake them if necessary.
	
	*/
	function makeMap(str$4, expectsLowerCase) {
		const map = Object.create(null);
		const list$4 = str$4.split(",");
		for (let i$6 = 0; i$6 < list$4.length; i$6++) map[list$4[i$6]] = true;
		return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
	}
	/**
	
	* dev only flag -> name mapping
	
	*/
	const PatchFlagNames = {
		[1]: `TEXT`,
		[2]: `CLASS`,
		[4]: `STYLE`,
		[8]: `PROPS`,
		[16]: `FULL_PROPS`,
		[32]: `HYDRATE_EVENTS`,
		[64]: `STABLE_FRAGMENT`,
		[128]: `KEYED_FRAGMENT`,
		[256]: `UNKEYED_FRAGMENT`,
		[512]: `NEED_PATCH`,
		[1024]: `DYNAMIC_SLOTS`,
		[2048]: `DEV_ROOT_FRAGMENT`,
		[-1]: `HOISTED`,
		[-2]: `BAIL`
	};
	/**
	
	* Dev only
	
	*/
	const slotFlagsText = {
		[1]: "STABLE",
		[2]: "DYNAMIC",
		[3]: "FORWARDED"
	};
	const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
	const isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
	const range$1 = 2;
	function generateCodeFrame(source, start = 0, end = source.length) {
		const lines = source.split(/\r?\n/);
		let count = 0;
		const res = [];
		for (let i$6 = 0; i$6 < lines.length; i$6++) {
			count += lines[i$6].length + 1;
			if (count >= start) {
				for (let j$1 = i$6 - range$1; j$1 <= i$6 + range$1 || end > count; j$1++) {
					if (j$1 < 0 || j$1 >= lines.length) continue;
					const line = j$1 + 1;
					res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j$1]}`);
					const lineLength = lines[j$1].length;
					if (j$1 === i$6) {
						const pad$1 = start - (count - lineLength) + 1;
						const length = Math.max(1, end > count ? lineLength - pad$1 : end - start);
						res.push(`   |  ` + " ".repeat(pad$1) + "^".repeat(length));
					} else if (j$1 > i$6) {
						if (end > count) {
							const length = Math.max(Math.min(end - count, lineLength), 1);
							res.push(`   |  ` + "^".repeat(length));
						}
						count += lineLength + 1;
					}
				}
				break;
			}
		}
		return res.join("\n");
	}
	/**
	
	* On the client we only need to offer special cases for boolean attributes that
	
	* have different names from their corresponding dom properties:
	
	* - itemscope -> N/A
	
	* - allowfullscreen -> allowFullscreen
	
	* - formnovalidate -> formNoValidate
	
	* - ismap -> isMap
	
	* - nomodule -> noModule
	
	* - novalidate -> noValidate
	
	* - readonly -> readOnly
	
	*/
	const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
	const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
	/**
	
	* The full list is needed during SSR to produce the correct initial markup.
	
	*/
	const isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + ",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");
	const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
	const attrValidationCache = {};
	function isSSRSafeAttrName(name) {
		if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
		const isUnsafe = unsafeAttrCharRE.test(name);
		if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
		return attrValidationCache[name] = !isUnsafe;
	}
	const propsToAttrMap = {
		acceptCharset: "accept-charset",
		className: "class",
		htmlFor: "for",
		httpEquiv: "http-equiv"
	};
	/**
	
	* CSS properties that accept plain numbers
	
	*/
	const isNoUnitNumericStyleProp = /* @__PURE__ */ makeMap("animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width");
	/**
	
	* Known attributes, this is used for stringification of runtime static nodes
	
	* so that we don't stringify bindings that cannot be set from HTML.
	
	* Don't also forget to allow `data-*` and `aria-*`!
	
	* Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
	
	*/
	const isKnownAttr = /* @__PURE__ */ makeMap("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap");
	function normalizeStyle(value) {
		if (isArray$4(value)) {
			const res = {};
			for (let i$6 = 0; i$6 < value.length; i$6++) {
				const item = value[i$6];
				const normalized = normalizeStyle(isString$4(item) ? parseStringStyle(item) : item);
				if (normalized) for (const key in normalized) res[key] = normalized[key];
			}
			return res;
		} else if (isObject$4(value)) return value;
	}
	const listDelimiterRE = /;(?![^(]*\))/g;
	const propertyDelimiterRE = /:(.+)/;
	function parseStringStyle(cssText) {
		const ret$1 = {};
		cssText.split(listDelimiterRE).forEach((item) => {
			if (item) {
				const tmp = item.split(propertyDelimiterRE);
				tmp.length > 1 && (ret$1[tmp[0].trim()] = tmp[1].trim());
			}
		});
		return ret$1;
	}
	function stringifyStyle(styles) {
		let ret$1 = "";
		if (!styles) return ret$1;
		for (const key in styles) {
			const value = styles[key];
			const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
			if (isString$4(value) || typeof value === "number" && isNoUnitNumericStyleProp(normalizedKey)) ret$1 += `${normalizedKey}:${value};`;
		}
		return ret$1;
	}
	function normalizeClass(value) {
		let res = "";
		if (isString$4(value)) res = value;
		else if (isArray$4(value)) for (let i$6 = 0; i$6 < value.length; i$6++) {
			const normalized = normalizeClass(value[i$6]);
			if (normalized) res += normalized + " ";
		}
		else if (isObject$4(value)) {
			for (const name in value) if (value[name]) res += name + " ";
		}
		return res.trim();
	}
	const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
	const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
	const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
	const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
	const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
	const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
	const escapeRE = /["'&<>]/;
	function escapeHtml(string$3) {
		const str$4 = "" + string$3;
		const match = escapeRE.exec(str$4);
		if (!match) return str$4;
		let html = "";
		let escaped;
		let index$1;
		let lastIndex = 0;
		for (index$1 = match.index; index$1 < str$4.length; index$1++) {
			switch (str$4.charCodeAt(index$1)) {
				case 34:
					escaped = "&quot;";
					break;
				case 38:
					escaped = "&amp;";
					break;
				case 39:
					escaped = "&#39;";
					break;
				case 60:
					escaped = "&lt;";
					break;
				case 62:
					escaped = "&gt;";
					break;
				default: continue;
			}
			if (lastIndex !== index$1) html += str$4.substring(lastIndex, index$1);
			lastIndex = index$1 + 1;
			html += escaped;
		}
		return lastIndex !== index$1 ? html + str$4.substring(lastIndex, index$1) : html;
	}
	const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
	function escapeHtmlComment(src) {
		return src.replace(commentStripRE, "");
	}
	function looseCompareArrays(a$1, b$1) {
		if (a$1.length !== b$1.length) return false;
		let equal = true;
		for (let i$6 = 0; equal && i$6 < a$1.length; i$6++) equal = looseEqual(a$1[i$6], b$1[i$6]);
		return equal;
	}
	function looseEqual(a$1, b$1) {
		if (a$1 === b$1) return true;
		let aValidType = isDate(a$1);
		let bValidType = isDate(b$1);
		if (aValidType || bValidType) return aValidType && bValidType ? a$1.getTime() === b$1.getTime() : false;
		aValidType = isArray$4(a$1);
		bValidType = isArray$4(b$1);
		if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a$1, b$1) : false;
		aValidType = isObject$4(a$1);
		bValidType = isObject$4(b$1);
		if (aValidType || bValidType) {
			/* istanbul ignore if: this if will probably never be called */
			if (!aValidType || !bValidType) return false;
			const aKeysCount = Object.keys(a$1).length;
			const bKeysCount = Object.keys(b$1).length;
			if (aKeysCount !== bKeysCount) return false;
			for (const key in a$1) {
				const aHasKey = a$1.hasOwnProperty(key);
				const bHasKey = b$1.hasOwnProperty(key);
				if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a$1[key], b$1[key])) return false;
			}
		}
		return String(a$1) === String(b$1);
	}
	function looseIndexOf(arr, val) {
		return arr.findIndex((item) => looseEqual(item, val));
	}
	/**
	
	* For converting {{ interpolation }} values to displayed strings.
	
	* @private
	
	*/
	const toDisplayString = (val) => {
		return val == null ? "" : isObject$4(val) ? JSON.stringify(val, replacer, 2) : String(val);
	};
	const replacer = (_key, val) => {
		if (isMap$1(val)) return { [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val$1]) => {
			entries[`${key} =>`] = val$1;
			return entries;
		}, {}) };
		else if (isSet$1(val)) return { [`Set(${val.size})`]: [...val.values()] };
		else if (isObject$4(val) && !isArray$4(val) && !isPlainObject$1(val)) return String(val);
		return val;
	};
	/**
	
	* List of @babel/parser plugins that are used for template expression
	
	* transforms and SFC script transforms. By default we enable proposals slated
	
	* for ES2020. This will need to be updated as the spec moves forward.
	
	* Full list at https://babeljs.io/docs/en/next/babel-parser#plugins
	
	*/
	const babelParserDefaultPlugins = [
		"bigInt",
		"optionalChaining",
		"nullishCoalescingOperator"
	];
	const EMPTY_OBJ = {};
	const EMPTY_ARR = [];
	const NOOP = () => {};
	/**
	
	* Always return false.
	
	*/
	const NO = () => false;
	const onRE = /^on[^a-z]/;
	const isOn = (key) => onRE.test(key);
	const isModelListener = (key) => key.startsWith("onUpdate:");
	const extend$3 = Object.assign;
	const remove$1 = (arr, el) => {
		const i$6 = arr.indexOf(el);
		if (i$6 > -1) arr.splice(i$6, 1);
	};
	const hasOwnProperty$4 = Object.prototype.hasOwnProperty;
	const hasOwn$1 = (val, key) => hasOwnProperty$4.call(val, key);
	const isArray$4 = Array.isArray;
	const isMap$1 = (val) => toTypeString(val) === "[object Map]";
	const isSet$1 = (val) => toTypeString(val) === "[object Set]";
	const isDate = (val) => val instanceof Date;
	const isFunction$9 = (val) => typeof val === "function";
	const isString$4 = (val) => typeof val === "string";
	const isSymbol$1 = (val) => typeof val === "symbol";
	const isObject$4 = (val) => val !== null && typeof val === "object";
	const isPromise = (val) => {
		return isObject$4(val) && isFunction$9(val.then) && isFunction$9(val.catch);
	};
	const objectToString$2 = Object.prototype.toString;
	const toTypeString = (value) => objectToString$2.call(value);
	const toRawType = (value) => {
		return toTypeString(value).slice(8, -1);
	};
	const isPlainObject$1 = (val) => toTypeString(val) === "[object Object]";
	const isIntegerKey = (key) => isString$4(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
	const isReservedProp = /* @__PURE__ */ makeMap(
		// the leading comma is intentional so empty string "" is also included
		",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
	const cacheStringFunction$1 = (fn) => {
		const cache$3 = Object.create(null);
		return (str$4) => {
			const hit = cache$3[str$4];
			return hit || (cache$3[str$4] = fn(str$4));
		};
	};
	const camelizeRE$1 = /-(\w)/g;
	/**
	
	* @private
	
	*/
	const camelize$1 = cacheStringFunction$1((str$4) => {
		return str$4.replace(camelizeRE$1, (_, c$2) => c$2 ? c$2.toUpperCase() : "");
	});
	const hyphenateRE = /\B([A-Z])/g;
	/**
	
	* @private
	
	*/
	const hyphenate = cacheStringFunction$1((str$4) => str$4.replace(hyphenateRE, "-$1").toLowerCase());
	/**
	
	* @private
	
	*/
	const capitalize$1 = cacheStringFunction$1((str$4) => str$4.charAt(0).toUpperCase() + str$4.slice(1));
	/**
	
	* @private
	
	*/
	const toHandlerKey = cacheStringFunction$1((str$4) => str$4 ? `on${capitalize$1(str$4)}` : ``);
	const hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
	const invokeArrayFns = (fns, arg) => {
		for (let i$6 = 0; i$6 < fns.length; i$6++) fns[i$6](arg);
	};
	const def = (obj, key, value) => {
		Object.defineProperty(obj, key, {
			configurable: true,
			enumerable: false,
			value
		});
	};
	const toNumber = (val) => {
		const n$4 = parseFloat(val);
		return isNaN(n$4) ? val : n$4;
	};
	let _globalThis;
	const getGlobalThis = () => {
		return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
	};
	exports.EMPTY_ARR = EMPTY_ARR;
	exports.EMPTY_OBJ = EMPTY_OBJ;
	exports.NO = NO;
	exports.NOOP = NOOP;
	exports.PatchFlagNames = PatchFlagNames;
	exports.babelParserDefaultPlugins = babelParserDefaultPlugins;
	exports.camelize = camelize$1;
	exports.capitalize = capitalize$1;
	exports.def = def;
	exports.escapeHtml = escapeHtml;
	exports.escapeHtmlComment = escapeHtmlComment;
	exports.extend = extend$3;
	exports.generateCodeFrame = generateCodeFrame;
	exports.getGlobalThis = getGlobalThis;
	exports.hasChanged = hasChanged;
	exports.hasOwn = hasOwn$1;
	exports.hyphenate = hyphenate;
	exports.invokeArrayFns = invokeArrayFns;
	exports.isArray = isArray$4;
	exports.isBooleanAttr = isBooleanAttr;
	exports.isDate = isDate;
	exports.isFunction = isFunction$9;
	exports.isGloballyWhitelisted = isGloballyWhitelisted;
	exports.isHTMLTag = isHTMLTag;
	exports.isIntegerKey = isIntegerKey;
	exports.isKnownAttr = isKnownAttr;
	exports.isMap = isMap$1;
	exports.isModelListener = isModelListener;
	exports.isNoUnitNumericStyleProp = isNoUnitNumericStyleProp;
	exports.isObject = isObject$4;
	exports.isOn = isOn;
	exports.isPlainObject = isPlainObject$1;
	exports.isPromise = isPromise;
	exports.isReservedProp = isReservedProp;
	exports.isSSRSafeAttrName = isSSRSafeAttrName;
	exports.isSVGTag = isSVGTag;
	exports.isSet = isSet$1;
	exports.isSpecialBooleanAttr = isSpecialBooleanAttr;
	exports.isString = isString$4;
	exports.isSymbol = isSymbol$1;
	exports.isVoidTag = isVoidTag;
	exports.looseEqual = looseEqual;
	exports.looseIndexOf = looseIndexOf;
	exports.makeMap = makeMap;
	exports.normalizeClass = normalizeClass;
	exports.normalizeStyle = normalizeStyle;
	exports.objectToString = objectToString$2;
	exports.parseStringStyle = parseStringStyle;
	exports.propsToAttrMap = propsToAttrMap;
	exports.remove = remove$1;
	exports.slotFlagsText = slotFlagsText;
	exports.stringifyStyle = stringifyStyle;
	exports.toDisplayString = toDisplayString;
	exports.toHandlerKey = toHandlerKey;
	exports.toNumber = toNumber;
	exports.toRawType = toRawType;
	exports.toTypeString = toTypeString;
} });

//#endregion
//#region node_modules/@vue/shared/index.js
var require_shared = __commonJS({ "node_modules/@vue/shared/index.js"(exports, module) {
	module.exports = require_shared_cjs_prod();
} });

//#endregion
//#region node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({ "node_modules/source-map/lib/base64.js"(exports) {
	var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
	/**
	* Encode an integer in the range of 0 to 63 to a single base 64 digit.
	*/
	exports.encode = function(number) {
		if (0 <= number && number < intToCharMap.length) return intToCharMap[number];
		throw new TypeError("Must be between 0 and 63: " + number);
	};
	/**
	* Decode a single base 64 character code digit to an integer. Returns -1 on
	* failure.
	*/
	exports.decode = function(charCode) {
		var bigA = 65;
		var bigZ = 90;
		var littleA = 97;
		var littleZ = 122;
		var zero = 48;
		var nine = 57;
		var plus$5 = 43;
		var slash$4 = 47;
		var littleOffset = 26;
		var numberOffset = 52;
		if (bigA <= charCode && charCode <= bigZ) return charCode - bigA;
		if (littleA <= charCode && charCode <= littleZ) return charCode - littleA + littleOffset;
		if (zero <= charCode && charCode <= nine) return charCode - zero + numberOffset;
		if (charCode == plus$5) return 62;
		if (charCode == slash$4) return 63;
		return -1;
	};
} });

//#endregion
//#region node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({ "node_modules/source-map/lib/base64-vlq.js"(exports) {
	var base64 = require_base64();
	var VLQ_BASE_SHIFT = 5;
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	/**
	* Converts from a two-complement value to a value where the sign bit is
	* placed in the least significant bit.  For example, as decimals:
	*   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	*   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	*/
	function toVLQSigned(aValue) {
		return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
	}
	/**
	* Converts to a two-complement value from a value where the sign bit is
	* placed in the least significant bit.  For example, as decimals:
	*   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	*   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	*/
	function fromVLQSigned(aValue) {
		var isNegative = (aValue & 1) === 1;
		var shifted = aValue >> 1;
		return isNegative ? -shifted : shifted;
	}
	/**
	* Returns the base 64 VLQ encoded value.
	*/
	exports.encode = function base64VLQ_encode(aValue) {
		var encoded = "";
		var digit;
		var vlq = toVLQSigned(aValue);
		do {
			digit = vlq & VLQ_BASE_MASK;
			vlq >>>= VLQ_BASE_SHIFT;
			if (vlq > 0) digit |= VLQ_CONTINUATION_BIT;
			encoded += base64.encode(digit);
		} while (vlq > 0);
		return encoded;
	};
	/**
	* Decodes the next base 64 VLQ value from the given string and returns the
	* value and the rest of the string via the out parameter.
	*/
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
		var strLen = aStr.length;
		var result = 0;
		var shift = 0;
		var continuation, digit;
		do {
			if (aIndex >= strLen) throw new Error("Expected more digits in base 64 VLQ value.");
			digit = base64.decode(aStr.charCodeAt(aIndex++));
			if (digit === -1) throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
			continuation = !!(digit & VLQ_CONTINUATION_BIT);
			digit &= VLQ_BASE_MASK;
			result = result + (digit << shift);
			shift += VLQ_BASE_SHIFT;
		} while (continuation);
		aOutParam.value = fromVLQSigned(result);
		aOutParam.rest = aIndex;
	};
} });

//#endregion
//#region node_modules/source-map/lib/util.js
var require_util$5 = __commonJS({ "node_modules/source-map/lib/util.js"(exports) {
	/**
	* This is a helper function for getting values from parameter/options
	* objects.
	*
	* @param args The object we are extracting values from
	* @param name The name of the property we are getting.
	* @param defaultValue An optional value to return if the property is missing
	* from the object. If this is not specified and the property is missing, an
	* error will be thrown.
	*/
	function getArg(aArgs, aName, aDefaultValue) {
		if (aName in aArgs) return aArgs[aName];
		else if (arguments.length === 3) return aDefaultValue;
		else throw new Error("\"" + aName + "\" is a required argument.");
	}
	exports.getArg = getArg;
	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;
	function urlParse(aUrl) {
		var match = aUrl.match(urlRegexp);
		if (!match) return null;
		return {
			scheme: match[1],
			auth: match[2],
			host: match[3],
			port: match[4],
			path: match[5]
		};
	}
	exports.urlParse = urlParse;
	function urlGenerate(aParsedUrl) {
		var url$1 = "";
		if (aParsedUrl.scheme) url$1 += aParsedUrl.scheme + ":";
		url$1 += "//";
		if (aParsedUrl.auth) url$1 += aParsedUrl.auth + "@";
		if (aParsedUrl.host) url$1 += aParsedUrl.host;
		if (aParsedUrl.port) url$1 += ":" + aParsedUrl.port;
		if (aParsedUrl.path) url$1 += aParsedUrl.path;
		return url$1;
	}
	exports.urlGenerate = urlGenerate;
	/**
	* Normalizes a path, or the path portion of a URL:
	*
	* - Replaces consecutive slashes with one slash.
	* - Removes unnecessary '.' parts.
	* - Removes unnecessary '<dir>/..' parts.
	*
	* Based on code in the Node.js 'path' core module.
	*
	* @param aPath The path or url to normalize.
	*/
	function normalize$1(aPath) {
		var path$28 = aPath;
		var url$1 = urlParse(aPath);
		if (url$1) {
			if (!url$1.path) return aPath;
			path$28 = url$1.path;
		}
		var isAbsolute$6 = exports.isAbsolute(path$28);
		var parts = path$28.split(/\/+/);
		for (var part, up = 0, i$6 = parts.length - 1; i$6 >= 0; i$6--) {
			part = parts[i$6];
			if (part === ".") parts.splice(i$6, 1);
			else if (part === "..") up++;
			else if (up > 0) if (part === "") {
				parts.splice(i$6 + 1, up);
				up = 0;
			} else {
				parts.splice(i$6, 2);
				up--;
			}
		}
		path$28 = parts.join("/");
		if (path$28 === "") path$28 = isAbsolute$6 ? "/" : ".";
		if (url$1) {
			url$1.path = path$28;
			return urlGenerate(url$1);
		}
		return path$28;
	}
	exports.normalize = normalize$1;
	/**
	* Joins two paths/URLs.
	*
	* @param aRoot The root path or URL.
	* @param aPath The path or URL to be joined with the root.
	*
	* - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	*   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	*   first.
	* - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	*   is updated with the result and aRoot is returned. Otherwise the result
	*   is returned.
	*   - If aPath is absolute, the result is aPath.
	*   - Otherwise the two paths are joined with a slash.
	* - Joining for example 'http://' and 'www.example.com' is also supported.
	*/
	function join$1(aRoot, aPath) {
		if (aRoot === "") aRoot = ".";
		if (aPath === "") aPath = ".";
		var aPathUrl = urlParse(aPath);
		var aRootUrl = urlParse(aRoot);
		if (aRootUrl) aRoot = aRootUrl.path || "/";
		if (aPathUrl && !aPathUrl.scheme) {
			if (aRootUrl) aPathUrl.scheme = aRootUrl.scheme;
			return urlGenerate(aPathUrl);
		}
		if (aPathUrl || aPath.match(dataUrlRegexp)) return aPath;
		if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
			aRootUrl.host = aPath;
			return urlGenerate(aRootUrl);
		}
		var joined = aPath.charAt(0) === "/" ? aPath : normalize$1(aRoot.replace(/\/+$/, "") + "/" + aPath);
		if (aRootUrl) {
			aRootUrl.path = joined;
			return urlGenerate(aRootUrl);
		}
		return joined;
	}
	exports.join = join$1;
	exports.isAbsolute = function(aPath) {
		return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
	};
	/**
	* Make a path relative to a URL or another path.
	*
	* @param aRoot The root path or URL.
	* @param aPath The path or URL to be made relative to aRoot.
	*/
	function relative(aRoot, aPath) {
		if (aRoot === "") aRoot = ".";
		aRoot = aRoot.replace(/\/$/, "");
		var level$1 = 0;
		while (aPath.indexOf(aRoot + "/") !== 0) {
			var index$1 = aRoot.lastIndexOf("/");
			if (index$1 < 0) return aPath;
			aRoot = aRoot.slice(0, index$1);
			if (aRoot.match(/^([^\/]+:\/)?\/*$/)) return aPath;
			++level$1;
		}
		return Array(level$1 + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;
	var supportsNullProto = function() {
		var obj = Object.create(null);
		return !("__proto__" in obj);
	}();
	function identity(s$3) {
		return s$3;
	}
	/**
	* Because behavior goes wacky when you set `__proto__` on objects, we
	* have to prefix all the strings in our set with an arbitrary character.
	*
	* See https://github.com/mozilla/source-map/pull/31 and
	* https://github.com/mozilla/source-map/issues/30
	*
	* @param String aStr
	*/
	function toSetString(aStr) {
		if (isProtoString(aStr)) return "$" + aStr;
		return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;
	function fromSetString(aStr) {
		if (isProtoString(aStr)) return aStr.slice(1);
		return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;
	function isProtoString(s$3) {
		if (!s$3) return false;
		var length = s$3.length;
		if (length < 9) return false;
		if (s$3.charCodeAt(length - 1) !== 95 || s$3.charCodeAt(length - 2) !== 95 || s$3.charCodeAt(length - 3) !== 111 || s$3.charCodeAt(length - 4) !== 116 || s$3.charCodeAt(length - 5) !== 111 || s$3.charCodeAt(length - 6) !== 114 || s$3.charCodeAt(length - 7) !== 112 || s$3.charCodeAt(length - 8) !== 95 || s$3.charCodeAt(length - 9) !== 95) return false;
		for (var i$6 = length - 10; i$6 >= 0; i$6--) if (s$3.charCodeAt(i$6) !== 36) return false;
		return true;
	}
	/**
	* Comparator between two mappings where the original positions are compared.
	*
	* Optionally pass in `true` as `onlyCompareGenerated` to consider two
	* mappings with the same original source/line/column, but different generated
	* line and column the same. Useful when searching for a mapping with a
	* stubbed out mapping.
	*/
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
		var cmp = strcmp(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0 || onlyCompareOriginal) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;
	/**
	* Comparator between two mappings with deflated source and name indices where
	* the generated positions are compared.
	*
	* Optionally pass in `true` as `onlyCompareGenerated` to consider two
	* mappings with the same generated line and column, but different
	* source/name/original line and column the same. Useful when searching for a
	* mapping with a stubbed out mapping.
	*/
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
		var cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0 || onlyCompareGenerated) return cmp;
		cmp = strcmp(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0) return cmp;
		return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	function strcmp(aStr1, aStr2) {
		if (aStr1 === aStr2) return 0;
		if (aStr1 === null) return 1;
		if (aStr2 === null) return -1;
		if (aStr1 > aStr2) return 1;
		return -1;
	}
	/**
	* Comparator between two mappings with inflated source and name strings where
	* the generated positions are compared.
	*/
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
		var cmp = mappingA.generatedLine - mappingB.generatedLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.generatedColumn - mappingB.generatedColumn;
		if (cmp !== 0) return cmp;
		cmp = strcmp(mappingA.source, mappingB.source);
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalLine - mappingB.originalLine;
		if (cmp !== 0) return cmp;
		cmp = mappingA.originalColumn - mappingB.originalColumn;
		if (cmp !== 0) return cmp;
		return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	/**
	* Strip any JSON XSSI avoidance prefix from the string (as documented
	* in the source maps specification), and then parse the string as
	* JSON.
	*/
	function parseSourceMapInput(str$4) {
		return JSON.parse(str$4.replace(/^\)]}'[^\n]*\n/, ""));
	}
	exports.parseSourceMapInput = parseSourceMapInput;
	/**
	* Compute the URL of a source given the the source root, the source's
	* URL, and the source map's URL.
	*/
	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
		sourceURL = sourceURL || "";
		if (sourceRoot) {
			if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") sourceRoot += "/";
			sourceURL = sourceRoot + sourceURL;
		}
		if (sourceMapURL) {
			var parsed = urlParse(sourceMapURL);
			if (!parsed) throw new Error("sourceMapURL could not be parsed");
			if (parsed.path) {
				var index$1 = parsed.path.lastIndexOf("/");
				if (index$1 >= 0) parsed.path = parsed.path.substring(0, index$1 + 1);
			}
			sourceURL = join$1(urlGenerate(parsed), sourceURL);
		}
		return normalize$1(sourceURL);
	}
	exports.computeSourceURL = computeSourceURL;
} });

//#endregion
//#region node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({ "node_modules/source-map/lib/array-set.js"(exports) {
	var util$11 = require_util$5();
	var has$1 = Object.prototype.hasOwnProperty;
	var hasNativeMap = typeof Map !== "undefined";
	/**
	* A data structure which is a combination of an array and a set. Adding a new
	* member is O(1), testing for membership is O(1), and finding the index of an
	* element is O(1). Removing elements from the set is not supported. Only
	* strings are supported for membership.
	*/
	function ArraySet$2() {
		this._array = [];
		this._set = hasNativeMap ? new Map() : Object.create(null);
	}
	/**
	* Static method for creating ArraySet instances from an existing array.
	*/
	ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
		var set = new ArraySet$2();
		for (var i$6 = 0, len = aArray.length; i$6 < len; i$6++) set.add(aArray[i$6], aAllowDuplicates);
		return set;
	};
	/**
	* Return how many unique items are in this ArraySet. If duplicates have been
	* added, than those do not count towards the size.
	*
	* @returns Number
	*/
	ArraySet$2.prototype.size = function ArraySet_size() {
		return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};
	/**
	* Add the given string to this set.
	*
	* @param String aStr
	*/
	ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
		var sStr = hasNativeMap ? aStr : util$11.toSetString(aStr);
		var isDuplicate = hasNativeMap ? this.has(aStr) : has$1.call(this._set, sStr);
		var idx = this._array.length;
		if (!isDuplicate || aAllowDuplicates) this._array.push(aStr);
		if (!isDuplicate) if (hasNativeMap) this._set.set(aStr, idx);
		else this._set[sStr] = idx;
	};
	/**
	* Is the given string a member of this set?
	*
	* @param String aStr
	*/
	ArraySet$2.prototype.has = function ArraySet_has(aStr) {
		if (hasNativeMap) return this._set.has(aStr);
		else {
			var sStr = util$11.toSetString(aStr);
			return has$1.call(this._set, sStr);
		}
	};
	/**
	* What is the index of the given string in the array?
	*
	* @param String aStr
	*/
	ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
		if (hasNativeMap) {
			var idx = this._set.get(aStr);
			if (idx >= 0) return idx;
		} else {
			var sStr = util$11.toSetString(aStr);
			if (has$1.call(this._set, sStr)) return this._set[sStr];
		}
		throw new Error("\"" + aStr + "\" is not in the set.");
	};
	/**
	* What is the element at the given index?
	*
	* @param Number aIdx
	*/
	ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
		if (aIdx >= 0 && aIdx < this._array.length) return this._array[aIdx];
		throw new Error("No element indexed by " + aIdx);
	};
	/**
	* Returns the array representation of this set (which has the proper indices
	* indicated by indexOf). Note that this is a copy of the internal array used
	* for storing the members so that no one can mess with internal state.
	*/
	ArraySet$2.prototype.toArray = function ArraySet_toArray() {
		return this._array.slice();
	};
	exports.ArraySet = ArraySet$2;
} });

//#endregion
//#region node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({ "node_modules/source-map/lib/mapping-list.js"(exports) {
	var util$10 = require_util$5();
	/**
	* Determine whether mappingB is after mappingA with respect to generated
	* position.
	*/
	function generatedPositionAfter(mappingA, mappingB) {
		var lineA = mappingA.generatedLine;
		var lineB = mappingB.generatedLine;
		var columnA = mappingA.generatedColumn;
		var columnB = mappingB.generatedColumn;
		return lineB > lineA || lineB == lineA && columnB >= columnA || util$10.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	/**
	* A data structure to provide a sorted view of accumulated mappings in a
	* performance conscious manner. It trades a neglibable overhead in general
	* case for a large speedup in case of mappings being added in order.
	*/
	function MappingList$1() {
		this._array = [];
		this._sorted = true;
		this._last = {
			generatedLine: -1,
			generatedColumn: 0
		};
	}
	/**
	* Iterate through internal items. This method takes the same arguments that
	* `Array.prototype.forEach` takes.
	*
	* NOTE: The order of the mappings is NOT guaranteed.
	*/
	MappingList$1.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
		this._array.forEach(aCallback, aThisArg);
	};
	/**
	* Add the given source mapping.
	*
	* @param Object aMapping
	*/
	MappingList$1.prototype.add = function MappingList_add(aMapping) {
		if (generatedPositionAfter(this._last, aMapping)) {
			this._last = aMapping;
			this._array.push(aMapping);
		} else {
			this._sorted = false;
			this._array.push(aMapping);
		}
	};
	/**
	* Returns the flat, sorted array of mappings. The mappings are sorted by
	* generated position.
	*
	* WARNING: This method returns internal data without copying, for
	* performance. The return value must NOT be mutated, and should be treated as
	* an immutable borrow. If you want to take ownership, you must make your own
	* copy.
	*/
	MappingList$1.prototype.toArray = function MappingList_toArray() {
		if (!this._sorted) {
			this._array.sort(util$10.compareByGeneratedPositionsInflated);
			this._sorted = true;
		}
		return this._array;
	};
	exports.MappingList = MappingList$1;
} });

//#endregion
//#region node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({ "node_modules/source-map/lib/source-map-generator.js"(exports) {
	var base64VLQ$1 = require_base64_vlq();
	var util$9 = require_util$5();
	var ArraySet$1 = require_array_set().ArraySet;
	var MappingList = require_mapping_list().MappingList;
	/**
	* An instance of the SourceMapGenerator represents a source map which is
	* being built incrementally. You may pass an object with the following
	* properties:
	*
	*   - file: The filename of the generated source.
	*   - sourceRoot: A root for all relative URLs in this source map.
	*/
	function SourceMapGenerator$2(aArgs) {
		if (!aArgs) aArgs = {};
		this._file = util$9.getArg(aArgs, "file", null);
		this._sourceRoot = util$9.getArg(aArgs, "sourceRoot", null);
		this._skipValidation = util$9.getArg(aArgs, "skipValidation", false);
		this._sources = new ArraySet$1();
		this._names = new ArraySet$1();
		this._mappings = new MappingList();
		this._sourcesContents = null;
	}
	SourceMapGenerator$2.prototype._version = 3;
	/**
	* Creates a new SourceMapGenerator based on a SourceMapConsumer
	*
	* @param aSourceMapConsumer The SourceMap.
	*/
	SourceMapGenerator$2.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
		var sourceRoot = aSourceMapConsumer.sourceRoot;
		var generator$1 = new SourceMapGenerator$2({
			file: aSourceMapConsumer.file,
			sourceRoot
		});
		aSourceMapConsumer.eachMapping(function(mapping) {
			var newMapping = { generated: {
				line: mapping.generatedLine,
				column: mapping.generatedColumn
			} };
			if (mapping.source != null) {
				newMapping.source = mapping.source;
				if (sourceRoot != null) newMapping.source = util$9.relative(sourceRoot, newMapping.source);
				newMapping.original = {
					line: mapping.originalLine,
					column: mapping.originalColumn
				};
				if (mapping.name != null) newMapping.name = mapping.name;
			}
			generator$1.addMapping(newMapping);
		});
		aSourceMapConsumer.sources.forEach(function(sourceFile) {
			var sourceRelative = sourceFile;
			if (sourceRoot !== null) sourceRelative = util$9.relative(sourceRoot, sourceFile);
			if (!generator$1._sources.has(sourceRelative)) generator$1._sources.add(sourceRelative);
			var content = aSourceMapConsumer.sourceContentFor(sourceFile);
			if (content != null) generator$1.setSourceContent(sourceFile, content);
		});
		return generator$1;
	};
	/**
	* Add a single mapping from original source line and column to the generated
	* source's line and column for this source map being created. The mapping
	* object should have the following properties:
	*
	*   - generated: An object with the generated line and column positions.
	*   - original: An object with the original line and column positions.
	*   - source: The original source file (relative to the sourceRoot).
	*   - name: An optional original token name for this mapping.
	*/
	SourceMapGenerator$2.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
		var generated = util$9.getArg(aArgs, "generated");
		var original = util$9.getArg(aArgs, "original", null);
		var source = util$9.getArg(aArgs, "source", null);
		var name = util$9.getArg(aArgs, "name", null);
		if (!this._skipValidation) this._validateMapping(generated, original, source, name);
		if (source != null) {
			source = String(source);
			if (!this._sources.has(source)) this._sources.add(source);
		}
		if (name != null) {
			name = String(name);
			if (!this._names.has(name)) this._names.add(name);
		}
		this._mappings.add({
			generatedLine: generated.line,
			generatedColumn: generated.column,
			originalLine: original != null && original.line,
			originalColumn: original != null && original.column,
			source,
			name
		});
	};
	/**
	* Set the source content for a source file.
	*/
	SourceMapGenerator$2.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
		var source = aSourceFile;
		if (this._sourceRoot != null) source = util$9.relative(this._sourceRoot, source);
		if (aSourceContent != null) {
			if (!this._sourcesContents) this._sourcesContents = Object.create(null);
			this._sourcesContents[util$9.toSetString(source)] = aSourceContent;
		} else if (this._sourcesContents) {
			delete this._sourcesContents[util$9.toSetString(source)];
			if (Object.keys(this._sourcesContents).length === 0) this._sourcesContents = null;
		}
	};
	/**
	* Applies the mappings of a sub-source-map for a specific source file to the
	* source map being generated. Each mapping to the supplied source file is
	* rewritten using the supplied source map. Note: The resolution for the
	* resulting mappings is the minimium of this map and the supplied map.
	*
	* @param aSourceMapConsumer The source map to be applied.
	* @param aSourceFile Optional. The filename of the source file.
	*        If omitted, SourceMapConsumer's file property will be used.
	* @param aSourceMapPath Optional. The dirname of the path to the source map
	*        to be applied. If relative, it is relative to the SourceMapConsumer.
	*        This parameter is needed when the two source maps aren't in the same
	*        directory, and the source map to be applied contains relative source
	*        paths. If so, those relative source paths need to be rewritten
	*        relative to the SourceMapGenerator.
	*/
	SourceMapGenerator$2.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
		var sourceFile = aSourceFile;
		if (aSourceFile == null) {
			if (aSourceMapConsumer.file == null) throw new Error("SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's \"file\" property. Both were omitted.");
			sourceFile = aSourceMapConsumer.file;
		}
		var sourceRoot = this._sourceRoot;
		if (sourceRoot != null) sourceFile = util$9.relative(sourceRoot, sourceFile);
		var newSources = new ArraySet$1();
		var newNames = new ArraySet$1();
		this._mappings.unsortedForEach(function(mapping) {
			if (mapping.source === sourceFile && mapping.originalLine != null) {
				var original = aSourceMapConsumer.originalPositionFor({
					line: mapping.originalLine,
					column: mapping.originalColumn
				});
				if (original.source != null) {
					mapping.source = original.source;
					if (aSourceMapPath != null) mapping.source = util$9.join(aSourceMapPath, mapping.source);
					if (sourceRoot != null) mapping.source = util$9.relative(sourceRoot, mapping.source);
					mapping.originalLine = original.line;
					mapping.originalColumn = original.column;
					if (original.name != null) mapping.name = original.name;
				}
			}
			var source = mapping.source;
			if (source != null && !newSources.has(source)) newSources.add(source);
			var name = mapping.name;
			if (name != null && !newNames.has(name)) newNames.add(name);
		}, this);
		this._sources = newSources;
		this._names = newNames;
		aSourceMapConsumer.sources.forEach(function(sourceFile$1) {
			var content = aSourceMapConsumer.sourceContentFor(sourceFile$1);
			if (content != null) {
				if (aSourceMapPath != null) sourceFile$1 = util$9.join(aSourceMapPath, sourceFile$1);
				if (sourceRoot != null) sourceFile$1 = util$9.relative(sourceRoot, sourceFile$1);
				this.setSourceContent(sourceFile$1, content);
			}
		}, this);
	};
	/**
	* A mapping can have one of the three levels of data:
	*
	*   1. Just the generated position.
	*   2. The Generated position, original position, and original source.
	*   3. Generated and original position, original source, as well as a name
	*      token.
	*
	* To maintain consistency, we validate that any new mapping being added falls
	* in to one of these categories.
	*/
	SourceMapGenerator$2.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
		if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
		if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) return;
		else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) return;
		else throw new Error("Invalid mapping: " + JSON.stringify({
			generated: aGenerated,
			source: aSource,
			original: aOriginal,
			name: aName
		}));
	};
	/**
	* Serialize the accumulated mappings in to the stream of base 64 VLQs
	* specified by the source map format.
	*/
	SourceMapGenerator$2.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
		var previousGeneratedColumn = 0;
		var previousGeneratedLine = 1;
		var previousOriginalColumn = 0;
		var previousOriginalLine = 0;
		var previousName = 0;
		var previousSource = 0;
		var result = "";
		var next;
		var mapping;
		var nameIdx;
		var sourceIdx;
		var mappings$1 = this._mappings.toArray();
		for (var i$6 = 0, len = mappings$1.length; i$6 < len; i$6++) {
			mapping = mappings$1[i$6];
			next = "";
			if (mapping.generatedLine !== previousGeneratedLine) {
				previousGeneratedColumn = 0;
				while (mapping.generatedLine !== previousGeneratedLine) {
					next += ";";
					previousGeneratedLine++;
				}
			} else if (i$6 > 0) {
				if (!util$9.compareByGeneratedPositionsInflated(mapping, mappings$1[i$6 - 1])) continue;
				next += ",";
			}
			next += base64VLQ$1.encode(mapping.generatedColumn - previousGeneratedColumn);
			previousGeneratedColumn = mapping.generatedColumn;
			if (mapping.source != null) {
				sourceIdx = this._sources.indexOf(mapping.source);
				next += base64VLQ$1.encode(sourceIdx - previousSource);
				previousSource = sourceIdx;
				next += base64VLQ$1.encode(mapping.originalLine - 1 - previousOriginalLine);
				previousOriginalLine = mapping.originalLine - 1;
				next += base64VLQ$1.encode(mapping.originalColumn - previousOriginalColumn);
				previousOriginalColumn = mapping.originalColumn;
				if (mapping.name != null) {
					nameIdx = this._names.indexOf(mapping.name);
					next += base64VLQ$1.encode(nameIdx - previousName);
					previousName = nameIdx;
				}
			}
			result += next;
		}
		return result;
	};
	SourceMapGenerator$2.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
		return aSources.map(function(source) {
			if (!this._sourcesContents) return null;
			if (aSourceRoot != null) source = util$9.relative(aSourceRoot, source);
			var key = util$9.toSetString(source);
			return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
		}, this);
	};
	/**
	* Externalize the source map.
	*/
	SourceMapGenerator$2.prototype.toJSON = function SourceMapGenerator_toJSON() {
		var map = {
			version: this._version,
			sources: this._sources.toArray(),
			names: this._names.toArray(),
			mappings: this._serializeMappings()
		};
		if (this._file != null) map.file = this._file;
		if (this._sourceRoot != null) map.sourceRoot = this._sourceRoot;
		if (this._sourcesContents) map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
		return map;
	};
	/**
	* Render the source map being generated to a string.
	*/
	SourceMapGenerator$2.prototype.toString = function SourceMapGenerator_toString() {
		return JSON.stringify(this.toJSON());
	};
	exports.SourceMapGenerator = SourceMapGenerator$2;
} });

//#endregion
//#region node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({ "node_modules/source-map/lib/binary-search.js"(exports) {
	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;
	/**
	* Recursive implementation of binary search.
	*
	* @param aLow Indices here and lower do not contain the needle.
	* @param aHigh Indices here and higher do not contain the needle.
	* @param aNeedle The element being searched for.
	* @param aHaystack The non-empty array being searched.
	* @param aCompare Function which takes two elements and returns -1, 0, or 1.
	* @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	*     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*/
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
		var mid = Math.floor((aHigh - aLow) / 2) + aLow;
		var cmp = aCompare(aNeedle, aHaystack[mid], true);
		if (cmp === 0) return mid;
		else if (cmp > 0) {
			if (aHigh - mid > 1) return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
			if (aBias == exports.LEAST_UPPER_BOUND) return aHigh < aHaystack.length ? aHigh : -1;
			else return mid;
		} else {
			if (mid - aLow > 1) return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
			if (aBias == exports.LEAST_UPPER_BOUND) return mid;
			else return aLow < 0 ? -1 : aLow;
		}
	}
	/**
	* This is an implementation of binary search which will always try and return
	* the index of the closest element if there is no exact hit. This is because
	* mappings between original and generated line/col pairs are single points,
	* and there is an implicit region between each of them, so a miss just means
	* that you aren't on the very start of a region.
	*
	* @param aNeedle The element you are looking for.
	* @param aHaystack The array that is being searched.
	* @param aCompare A function which takes the needle and an element in the
	*     array and returns -1, 0, or 1 depending on whether the needle is less
	*     than, equal to, or greater than the element, respectively.
	* @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	*     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	*/
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
		if (aHaystack.length === 0) return -1;
		var index$1 = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
		if (index$1 < 0) return -1;
		while (index$1 - 1 >= 0) {
			if (aCompare(aHaystack[index$1], aHaystack[index$1 - 1], true) !== 0) break;
			--index$1;
		}
		return index$1;
	};
} });

//#endregion
//#region node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({ "node_modules/source-map/lib/quick-sort.js"(exports) {
	/**
	* Swap the elements indexed by `x` and `y` in the array `ary`.
	*
	* @param {Array} ary
	*        The array.
	* @param {Number} x
	*        The index of the first item.
	* @param {Number} y
	*        The index of the second item.
	*/
	function swap(ary, x$1, y$2) {
		var temp = ary[x$1];
		ary[x$1] = ary[y$2];
		ary[y$2] = temp;
	}
	/**
	* Returns a random integer within the range `low .. high` inclusive.
	*
	* @param {Number} low
	*        The lower bound on the range.
	* @param {Number} high
	*        The upper bound on the range.
	*/
	function randomIntInRange(low, high) {
		return Math.round(low + Math.random() * (high - low));
	}
	/**
	* The Quick Sort algorithm.
	*
	* @param {Array} ary
	*        An array to sort.
	* @param {function} comparator
	*        Function to use to compare two items.
	* @param {Number} p
	*        Start index of the array
	* @param {Number} r
	*        End index of the array
	*/
	function doQuickSort(ary, comparator, p$2, r$2) {
		if (p$2 < r$2) {
			var pivotIndex = randomIntInRange(p$2, r$2);
			var i$6 = p$2 - 1;
			swap(ary, pivotIndex, r$2);
			var pivot = ary[r$2];
			for (var j$1 = p$2; j$1 < r$2; j$1++) if (comparator(ary[j$1], pivot) <= 0) {
				i$6 += 1;
				swap(ary, i$6, j$1);
			}
			swap(ary, i$6 + 1, j$1);
			var q = i$6 + 1;
			doQuickSort(ary, comparator, p$2, q - 1);
			doQuickSort(ary, comparator, q + 1, r$2);
		}
	}
	/**
	* Sort the given array in-place with the given comparator function.
	*
	* @param {Array} ary
	*        An array to sort.
	* @param {function} comparator
	*        Function to use to compare two items.
	*/
	exports.quickSort = function(ary, comparator) {
		doQuickSort(ary, comparator, 0, ary.length - 1);
	};
} });

//#endregion
//#region node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({ "node_modules/source-map/lib/source-map-consumer.js"(exports) {
	var util$8 = require_util$5();
	var binarySearch = require_binary_search();
	var ArraySet = require_array_set().ArraySet;
	var base64VLQ = require_base64_vlq();
	var quickSort = require_quick_sort().quickSort;
	function SourceMapConsumer$1(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$8.parseSourceMapInput(aSourceMap);
		return sourceMap$3.sections != null ? new IndexedSourceMapConsumer(sourceMap$3, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap$3, aSourceMapURL);
	}
	SourceMapConsumer$1.fromSourceMap = function(aSourceMap, aSourceMapURL) {
		return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
	};
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	SourceMapConsumer$1.prototype._version = 3;
	SourceMapConsumer$1.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer$1.prototype, "_generatedMappings", {
		configurable: true,
		enumerable: true,
		get: function() {
			if (!this.__generatedMappings) this._parseMappings(this._mappings, this.sourceRoot);
			return this.__generatedMappings;
		}
	});
	SourceMapConsumer$1.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer$1.prototype, "_originalMappings", {
		configurable: true,
		enumerable: true,
		get: function() {
			if (!this.__originalMappings) this._parseMappings(this._mappings, this.sourceRoot);
			return this.__originalMappings;
		}
	});
	SourceMapConsumer$1.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index$1) {
		var c$2 = aStr.charAt(index$1);
		return c$2 === ";" || c$2 === ",";
	};
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	SourceMapConsumer$1.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		throw new Error("Subclasses must implement _parseMappings");
	};
	SourceMapConsumer$1.GENERATED_ORDER = 1;
	SourceMapConsumer$1.ORIGINAL_ORDER = 2;
	SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;
	/**
	* Iterate over each mapping between an original source/line/column and a
	* generated line/column in this source map.
	*
	* @param Function aCallback
	*        The function that is called with each mapping.
	* @param Object aContext
	*        Optional. If specified, this object will be the value of `this` every
	*        time that `aCallback` is called.
	* @param aOrder
	*        Either `SourceMapConsumer.GENERATED_ORDER` or
	*        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	*        iterate over the mappings sorted by the generated file's line/column
	*        order or the original's source/line/column order, respectively. Defaults to
	*        `SourceMapConsumer.GENERATED_ORDER`.
	*/
	SourceMapConsumer$1.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
		var context = aContext || null;
		var order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;
		var mappings$1;
		switch (order) {
			case SourceMapConsumer$1.GENERATED_ORDER:
				mappings$1 = this._generatedMappings;
				break;
			case SourceMapConsumer$1.ORIGINAL_ORDER:
				mappings$1 = this._originalMappings;
				break;
			default: throw new Error("Unknown order of iteration.");
		}
		var sourceRoot = this.sourceRoot;
		mappings$1.map(function(mapping) {
			var source = mapping.source === null ? null : this._sources.at(mapping.source);
			source = util$8.computeSourceURL(sourceRoot, source, this._sourceMapURL);
			return {
				source,
				generatedLine: mapping.generatedLine,
				generatedColumn: mapping.generatedColumn,
				originalLine: mapping.originalLine,
				originalColumn: mapping.originalColumn,
				name: mapping.name === null ? null : this._names.at(mapping.name)
			};
		}, this).forEach(aCallback, context);
	};
	/**
	* Returns all generated line and column information for the original source,
	* line, and column provided. If no column is provided, returns all mappings
	* corresponding to a either the line we are searching for or the next
	* closest line that has any mappings. Otherwise, returns all mappings
	* corresponding to the given line and either the column we are searching for
	* or the next closest column that has any offsets.
	*
	* The only argument is an object with the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number is 1-based.
	*   - column: Optional. the column number in the original source.
	*    The column number is 0-based.
	*
	* and an array of objects is returned, each with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*    line number is 1-based.
	*   - column: The column number in the generated source, or null.
	*    The column number is 0-based.
	*/
	SourceMapConsumer$1.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
		var line = util$8.getArg(aArgs, "line");
		var needle = {
			source: util$8.getArg(aArgs, "source"),
			originalLine: line,
			originalColumn: util$8.getArg(aArgs, "column", 0)
		};
		needle.source = this._findSourceIndex(needle.source);
		if (needle.source < 0) return [];
		var mappings$1 = [];
		var index$1 = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$8.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
		if (index$1 >= 0) {
			var mapping = this._originalMappings[index$1];
			if (aArgs.column === void 0) {
				var originalLine = mapping.originalLine;
				while (mapping && mapping.originalLine === originalLine) {
					mappings$1.push({
						line: util$8.getArg(mapping, "generatedLine", null),
						column: util$8.getArg(mapping, "generatedColumn", null),
						lastColumn: util$8.getArg(mapping, "lastGeneratedColumn", null)
					});
					mapping = this._originalMappings[++index$1];
				}
			} else {
				var originalColumn = mapping.originalColumn;
				while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
					mappings$1.push({
						line: util$8.getArg(mapping, "generatedLine", null),
						column: util$8.getArg(mapping, "generatedColumn", null),
						lastColumn: util$8.getArg(mapping, "lastGeneratedColumn", null)
					});
					mapping = this._originalMappings[++index$1];
				}
			}
		}
		return mappings$1;
	};
	exports.SourceMapConsumer = SourceMapConsumer$1;
	/**
	* A BasicSourceMapConsumer instance represents a parsed source map which we can
	* query for information about the original file positions by giving it a file
	* position in the generated source.
	*
	* The first parameter is the raw source map (either as a JSON string, or
	* already parsed to an object). According to the spec, source maps have the
	* following attributes:
	*
	*   - version: Which version of the source map spec this map is following.
	*   - sources: An array of URLs to the original source files.
	*   - names: An array of identifiers which can be referrenced by individual mappings.
	*   - sourceRoot: Optional. The URL root from which all sources are relative.
	*   - sourcesContent: Optional. An array of contents of the original source files.
	*   - mappings: A string of base64 VLQs which contain the actual mappings.
	*   - file: Optional. The generated file this source map is associated with.
	*
	* Here is an example source map, taken from the source map spec[0]:
	*
	*     {
	*       version : 3,
	*       file: "out.js",
	*       sourceRoot : "",
	*       sources: ["foo.js", "bar.js"],
	*       names: ["src", "maps", "are", "fun"],
	*       mappings: "AA,AB;;ABCDE;"
	*     }
	*
	* The second parameter, if given, is a string whose value is the URL
	* at which the source map was found.  This URL is used to compute the
	* sources array.
	*
	* [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	*/
	function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$8.parseSourceMapInput(aSourceMap);
		var version$1 = util$8.getArg(sourceMap$3, "version");
		var sources = util$8.getArg(sourceMap$3, "sources");
		var names = util$8.getArg(sourceMap$3, "names", []);
		var sourceRoot = util$8.getArg(sourceMap$3, "sourceRoot", null);
		var sourcesContent = util$8.getArg(sourceMap$3, "sourcesContent", null);
		var mappings$1 = util$8.getArg(sourceMap$3, "mappings");
		var file$2 = util$8.getArg(sourceMap$3, "file", null);
		if (version$1 != this._version) throw new Error("Unsupported version: " + version$1);
		if (sourceRoot) sourceRoot = util$8.normalize(sourceRoot);
		sources = sources.map(String).map(util$8.normalize).map(function(source) {
			return sourceRoot && util$8.isAbsolute(sourceRoot) && util$8.isAbsolute(source) ? util$8.relative(sourceRoot, source) : source;
		});
		this._names = ArraySet.fromArray(names.map(String), true);
		this._sources = ArraySet.fromArray(sources, true);
		this._absoluteSources = this._sources.toArray().map(function(s$3) {
			return util$8.computeSourceURL(sourceRoot, s$3, aSourceMapURL);
		});
		this.sourceRoot = sourceRoot;
		this.sourcesContent = sourcesContent;
		this._mappings = mappings$1;
		this._sourceMapURL = aSourceMapURL;
		this.file = file$2;
	}
	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;
	/**
	* Utility function to find the index of a source.  Returns -1 if not
	* found.
	*/
	BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
		var relativeSource = aSource;
		if (this.sourceRoot != null) relativeSource = util$8.relative(this.sourceRoot, relativeSource);
		if (this._sources.has(relativeSource)) return this._sources.indexOf(relativeSource);
		var i$6;
		for (i$6 = 0; i$6 < this._absoluteSources.length; ++i$6) if (this._absoluteSources[i$6] == aSource) return i$6;
		return -1;
	};
	/**
	* Create a BasicSourceMapConsumer from a SourceMapGenerator.
	*
	* @param SourceMapGenerator aSourceMap
	*        The source map that will be consumed.
	* @param String aSourceMapURL
	*        The URL at which the source map can be found (optional)
	* @returns BasicSourceMapConsumer
	*/
	BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
		var smc = Object.create(BasicSourceMapConsumer.prototype);
		var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
		var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
		smc.sourceRoot = aSourceMap._sourceRoot;
		smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
		smc.file = aSourceMap._file;
		smc._sourceMapURL = aSourceMapURL;
		smc._absoluteSources = smc._sources.toArray().map(function(s$3) {
			return util$8.computeSourceURL(smc.sourceRoot, s$3, aSourceMapURL);
		});
		var generatedMappings = aSourceMap._mappings.toArray().slice();
		var destGeneratedMappings = smc.__generatedMappings = [];
		var destOriginalMappings = smc.__originalMappings = [];
		for (var i$6 = 0, length = generatedMappings.length; i$6 < length; i$6++) {
			var srcMapping = generatedMappings[i$6];
			var destMapping = new Mapping();
			destMapping.generatedLine = srcMapping.generatedLine;
			destMapping.generatedColumn = srcMapping.generatedColumn;
			if (srcMapping.source) {
				destMapping.source = sources.indexOf(srcMapping.source);
				destMapping.originalLine = srcMapping.originalLine;
				destMapping.originalColumn = srcMapping.originalColumn;
				if (srcMapping.name) destMapping.name = names.indexOf(srcMapping.name);
				destOriginalMappings.push(destMapping);
			}
			destGeneratedMappings.push(destMapping);
		}
		quickSort(smc.__originalMappings, util$8.compareByOriginalPositions);
		return smc;
	};
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	BasicSourceMapConsumer.prototype._version = 3;
	/**
	* The list of original sources.
	*/
	Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", { get: function() {
		return this._absoluteSources.slice();
	} });
	/**
	* Provide the JIT with a nice shape / hidden class.
	*/
	function Mapping() {
		this.generatedLine = 0;
		this.generatedColumn = 0;
		this.source = null;
		this.originalLine = null;
		this.originalColumn = null;
		this.name = null;
	}
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		var generatedLine = 1;
		var previousGeneratedColumn = 0;
		var previousOriginalLine = 0;
		var previousOriginalColumn = 0;
		var previousSource = 0;
		var previousName = 0;
		var length = aStr.length;
		var index$1 = 0;
		var cachedSegments = {};
		var temp = {};
		var originalMappings = [];
		var generatedMappings = [];
		var mapping, str$4, segment, end, value;
		while (index$1 < length) if (aStr.charAt(index$1) === ";") {
			generatedLine++;
			index$1++;
			previousGeneratedColumn = 0;
		} else if (aStr.charAt(index$1) === ",") index$1++;
		else {
			mapping = new Mapping();
			mapping.generatedLine = generatedLine;
			for (end = index$1; end < length; end++) if (this._charIsMappingSeparator(aStr, end)) break;
			str$4 = aStr.slice(index$1, end);
			segment = cachedSegments[str$4];
			if (segment) index$1 += str$4.length;
			else {
				segment = [];
				while (index$1 < end) {
					base64VLQ.decode(aStr, index$1, temp);
					value = temp.value;
					index$1 = temp.rest;
					segment.push(value);
				}
				if (segment.length === 2) throw new Error("Found a source, but no line and column");
				if (segment.length === 3) throw new Error("Found a source and line, but no column");
				cachedSegments[str$4] = segment;
			}
			mapping.generatedColumn = previousGeneratedColumn + segment[0];
			previousGeneratedColumn = mapping.generatedColumn;
			if (segment.length > 1) {
				mapping.source = previousSource + segment[1];
				previousSource += segment[1];
				mapping.originalLine = previousOriginalLine + segment[2];
				previousOriginalLine = mapping.originalLine;
				mapping.originalLine += 1;
				mapping.originalColumn = previousOriginalColumn + segment[3];
				previousOriginalColumn = mapping.originalColumn;
				if (segment.length > 4) {
					mapping.name = previousName + segment[4];
					previousName += segment[4];
				}
			}
			generatedMappings.push(mapping);
			if (typeof mapping.originalLine === "number") originalMappings.push(mapping);
		}
		quickSort(generatedMappings, util$8.compareByGeneratedPositionsDeflated);
		this.__generatedMappings = generatedMappings;
		quickSort(originalMappings, util$8.compareByOriginalPositions);
		this.__originalMappings = originalMappings;
	};
	/**
	* Find the mapping that best matches the hypothetical "needle" mapping that
	* we are searching for in the given "haystack" of mappings.
	*/
	BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
		if (aNeedle[aLineName] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
		if (aNeedle[aColumnName] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
		return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	};
	/**
	* Compute the last column for each generated mapping. The last column is
	* inclusive.
	*/
	BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
		for (var index$1 = 0; index$1 < this._generatedMappings.length; ++index$1) {
			var mapping = this._generatedMappings[index$1];
			if (index$1 + 1 < this._generatedMappings.length) {
				var nextMapping = this._generatedMappings[index$1 + 1];
				if (mapping.generatedLine === nextMapping.generatedLine) {
					mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
					continue;
				}
			}
			mapping.lastGeneratedColumn = Infinity;
		}
	};
	/**
	* Returns the original source, line, and column information for the generated
	* source's line and column positions provided. The only argument is an object
	* with the following properties:
	*
	*   - line: The line number in the generated source.  The line number
	*     is 1-based.
	*   - column: The column number in the generated source.  The column
	*     number is 0-based.
	*   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	*     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	*
	* and an object is returned with the following properties:
	*
	*   - source: The original source file, or null.
	*   - line: The line number in the original source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the original source, or null.  The
	*     column number is 0-based.
	*   - name: The original identifier, or null.
	*/
	BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
		var needle = {
			generatedLine: util$8.getArg(aArgs, "line"),
			generatedColumn: util$8.getArg(aArgs, "column")
		};
		var index$1 = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util$8.compareByGeneratedPositionsDeflated, util$8.getArg(aArgs, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND));
		if (index$1 >= 0) {
			var mapping = this._generatedMappings[index$1];
			if (mapping.generatedLine === needle.generatedLine) {
				var source = util$8.getArg(mapping, "source", null);
				if (source !== null) {
					source = this._sources.at(source);
					source = util$8.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
				}
				var name = util$8.getArg(mapping, "name", null);
				if (name !== null) name = this._names.at(name);
				return {
					source,
					line: util$8.getArg(mapping, "originalLine", null),
					column: util$8.getArg(mapping, "originalColumn", null),
					name
				};
			}
		}
		return {
			source: null,
			line: null,
			column: null,
			name: null
		};
	};
	/**
	* Return true if we have the source content for every source in the source
	* map, false otherwise.
	*/
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
		if (!this.sourcesContent) return false;
		return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
			return sc == null;
		});
	};
	/**
	* Returns the original source content. The only argument is the url of the
	* original source file. Returns null if no original source content is
	* available.
	*/
	BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		if (!this.sourcesContent) return null;
		var index$1 = this._findSourceIndex(aSource);
		if (index$1 >= 0) return this.sourcesContent[index$1];
		var relativeSource = aSource;
		if (this.sourceRoot != null) relativeSource = util$8.relative(this.sourceRoot, relativeSource);
		var url$1;
		if (this.sourceRoot != null && (url$1 = util$8.urlParse(this.sourceRoot))) {
			var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
			if (url$1.scheme == "file" && this._sources.has(fileUriAbsPath)) return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
			if ((!url$1.path || url$1.path == "/") && this._sources.has("/" + relativeSource)) return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
		}
		if (nullOnMissing) return null;
		else throw new Error("\"" + relativeSource + "\" is not in the SourceMap.");
	};
	/**
	* Returns the generated line and column information for the original source,
	* line, and column positions provided. The only argument is an object with
	* the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number
	*     is 1-based.
	*   - column: The column number in the original source.  The column
	*     number is 0-based.
	*   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	*     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	*     closest element that is smaller than or greater than the one we are
	*     searching for, respectively, if the exact element cannot be found.
	*     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	*
	* and an object is returned with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the generated source, or null.
	*     The column number is 0-based.
	*/
	BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
		var source = util$8.getArg(aArgs, "source");
		source = this._findSourceIndex(source);
		if (source < 0) return {
			line: null,
			column: null,
			lastColumn: null
		};
		var needle = {
			source,
			originalLine: util$8.getArg(aArgs, "line"),
			originalColumn: util$8.getArg(aArgs, "column")
		};
		var index$1 = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$8.compareByOriginalPositions, util$8.getArg(aArgs, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND));
		if (index$1 >= 0) {
			var mapping = this._originalMappings[index$1];
			if (mapping.source === needle.source) return {
				line: util$8.getArg(mapping, "generatedLine", null),
				column: util$8.getArg(mapping, "generatedColumn", null),
				lastColumn: util$8.getArg(mapping, "lastGeneratedColumn", null)
			};
		}
		return {
			line: null,
			column: null,
			lastColumn: null
		};
	};
	exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	/**
	* An IndexedSourceMapConsumer instance represents a parsed source map which
	* we can query for information. It differs from BasicSourceMapConsumer in
	* that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	* input.
	*
	* The first parameter is a raw source map (either as a JSON string, or already
	* parsed to an object). According to the spec for indexed source maps, they
	* have the following attributes:
	*
	*   - version: Which version of the source map spec this map is following.
	*   - file: Optional. The generated file this source map is associated with.
	*   - sections: A list of section definitions.
	*
	* Each value under the "sections" field has two fields:
	*   - offset: The offset into the original specified at which this section
	*       begins to apply, defined as an object with a "line" and "column"
	*       field.
	*   - map: A source map definition. This source map could also be indexed,
	*       but doesn't have to be.
	*
	* Instead of the "map" field, it's also possible to have a "url" field
	* specifying a URL to retrieve a source map from, but that's currently
	* unsupported.
	*
	* Here's an example source map, taken from the source map spec[0], but
	* modified to omit a section which uses the "url" field.
	*
	*  {
	*    version : 3,
	*    file: "app.js",
	*    sections: [{
	*      offset: {line:100, column:10},
	*      map: {
	*        version : 3,
	*        file: "section.js",
	*        sources: ["foo.js", "bar.js"],
	*        names: ["src", "maps", "are", "fun"],
	*        mappings: "AAAA,E;;ABCDE;"
	*      }
	*    }],
	*  }
	*
	* The second parameter, if given, is a string whose value is the URL
	* at which the source map was found.  This URL is used to compute the
	* sources array.
	*
	* [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	*/
	function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
		var sourceMap$3 = aSourceMap;
		if (typeof aSourceMap === "string") sourceMap$3 = util$8.parseSourceMapInput(aSourceMap);
		var version$1 = util$8.getArg(sourceMap$3, "version");
		var sections = util$8.getArg(sourceMap$3, "sections");
		if (version$1 != this._version) throw new Error("Unsupported version: " + version$1);
		this._sources = new ArraySet();
		this._names = new ArraySet();
		var lastOffset = {
			line: -1,
			column: 0
		};
		this._sections = sections.map(function(s$3) {
			if (s$3.url) throw new Error("Support for url field in sections not implemented.");
			var offset = util$8.getArg(s$3, "offset");
			var offsetLine = util$8.getArg(offset, "line");
			var offsetColumn = util$8.getArg(offset, "column");
			if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) throw new Error("Section offsets must be ordered and non-overlapping.");
			lastOffset = offset;
			return {
				generatedOffset: {
					generatedLine: offsetLine + 1,
					generatedColumn: offsetColumn + 1
				},
				consumer: new SourceMapConsumer$1(util$8.getArg(s$3, "map"), aSourceMapURL)
			};
		});
	}
	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$1;
	/**
	* The version of the source mapping spec that we are consuming.
	*/
	IndexedSourceMapConsumer.prototype._version = 3;
	/**
	* The list of original sources.
	*/
	Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", { get: function() {
		var sources = [];
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) for (var j$1 = 0; j$1 < this._sections[i$6].consumer.sources.length; j$1++) sources.push(this._sections[i$6].consumer.sources[j$1]);
		return sources;
	} });
	/**
	* Returns the original source, line, and column information for the generated
	* source's line and column positions provided. The only argument is an object
	* with the following properties:
	*
	*   - line: The line number in the generated source.  The line number
	*     is 1-based.
	*   - column: The column number in the generated source.  The column
	*     number is 0-based.
	*
	* and an object is returned with the following properties:
	*
	*   - source: The original source file, or null.
	*   - line: The line number in the original source, or null.  The
	*     line number is 1-based.
	*   - column: The column number in the original source, or null.  The
	*     column number is 0-based.
	*   - name: The original identifier, or null.
	*/
	IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
		var needle = {
			generatedLine: util$8.getArg(aArgs, "line"),
			generatedColumn: util$8.getArg(aArgs, "column")
		};
		var sectionIndex = binarySearch.search(needle, this._sections, function(needle$1, section$1) {
			var cmp = needle$1.generatedLine - section$1.generatedOffset.generatedLine;
			if (cmp) return cmp;
			return needle$1.generatedColumn - section$1.generatedOffset.generatedColumn;
		});
		var section = this._sections[sectionIndex];
		if (!section) return {
			source: null,
			line: null,
			column: null,
			name: null
		};
		return section.consumer.originalPositionFor({
			line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
			column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
			bias: aArgs.bias
		});
	};
	/**
	* Return true if we have the source content for every source in the source
	* map, false otherwise.
	*/
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
		return this._sections.every(function(s$3) {
			return s$3.consumer.hasContentsOfAllSources();
		});
	};
	/**
	* Returns the original source content. The only argument is the url of the
	* original source file. Returns null if no original source content is
	* available.
	*/
	IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			var content = section.consumer.sourceContentFor(aSource, true);
			if (content) return content;
		}
		if (nullOnMissing) return null;
		else throw new Error("\"" + aSource + "\" is not in the SourceMap.");
	};
	/**
	* Returns the generated line and column information for the original source,
	* line, and column positions provided. The only argument is an object with
	* the following properties:
	*
	*   - source: The filename of the original source.
	*   - line: The line number in the original source.  The line number
	*     is 1-based.
	*   - column: The column number in the original source.  The column
	*     number is 0-based.
	*
	* and an object is returned with the following properties:
	*
	*   - line: The line number in the generated source, or null.  The
	*     line number is 1-based. 
	*   - column: The column number in the generated source, or null.
	*     The column number is 0-based.
	*/
	IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			if (section.consumer._findSourceIndex(util$8.getArg(aArgs, "source")) === -1) continue;
			var generatedPosition = section.consumer.generatedPositionFor(aArgs);
			if (generatedPosition) {
				var ret$1 = {
					line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
					column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
				};
				return ret$1;
			}
		}
		return {
			line: null,
			column: null
		};
	};
	/**
	* Parse the mappings in a string in to a data structure which we can easily
	* query (the ordered arrays in the `this.__generatedMappings` and
	* `this.__originalMappings` properties).
	*/
	IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
		this.__generatedMappings = [];
		this.__originalMappings = [];
		for (var i$6 = 0; i$6 < this._sections.length; i$6++) {
			var section = this._sections[i$6];
			var sectionMappings = section.consumer._generatedMappings;
			for (var j$1 = 0; j$1 < sectionMappings.length; j$1++) {
				var mapping = sectionMappings[j$1];
				var source = section.consumer._sources.at(mapping.source);
				source = util$8.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
				this._sources.add(source);
				source = this._sources.indexOf(source);
				var name = null;
				if (mapping.name) {
					name = section.consumer._names.at(mapping.name);
					this._names.add(name);
					name = this._names.indexOf(name);
				}
				var adjustedMapping = {
					source,
					generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
					generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
					originalLine: mapping.originalLine,
					originalColumn: mapping.originalColumn,
					name
				};
				this.__generatedMappings.push(adjustedMapping);
				if (typeof adjustedMapping.originalLine === "number") this.__originalMappings.push(adjustedMapping);
			}
		}
		quickSort(this.__generatedMappings, util$8.compareByGeneratedPositionsDeflated);
		quickSort(this.__originalMappings, util$8.compareByOriginalPositions);
	};
	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
} });

//#endregion
//#region node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({ "node_modules/source-map/lib/source-node.js"(exports) {
	var SourceMapGenerator$1 = require_source_map_generator().SourceMapGenerator;
	var util$7 = require_util$5();
	var REGEX_NEWLINE = /(\r?\n)/;
	var NEWLINE_CODE = 10;
	var isSourceNode = "$$$isSourceNode$$$";
	/**
	* SourceNodes provide a way to abstract over interpolating/concatenating
	* snippets of generated JavaScript source code while maintaining the line and
	* column information associated with the original source code.
	*
	* @param aLine The original line number.
	* @param aColumn The original column number.
	* @param aSource The original source's filename.
	* @param aChunks Optional. An array of strings which are snippets of
	*        generated JS, or other SourceNodes.
	* @param aName The original identifier.
	*/
	function SourceNode$1(aLine, aColumn, aSource, aChunks, aName) {
		this.children = [];
		this.sourceContents = {};
		this.line = aLine == null ? null : aLine;
		this.column = aColumn == null ? null : aColumn;
		this.source = aSource == null ? null : aSource;
		this.name = aName == null ? null : aName;
		this[isSourceNode] = true;
		if (aChunks != null) this.add(aChunks);
	}
	/**
	* Creates a SourceNode from generated code and a SourceMapConsumer.
	*
	* @param aGeneratedCode The generated code
	* @param aSourceMapConsumer The SourceMap for the generated code
	* @param aRelativePath Optional. The path that relative sources in the
	*        SourceMapConsumer should be relative to.
	*/
	SourceNode$1.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
		var node = new SourceNode$1();
		var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
		var remainingLinesIndex = 0;
		var shiftNextLine = function() {
			var lineContents = getNextLine();
			var newLine = getNextLine() || "";
			return lineContents + newLine;
			function getNextLine() {
				return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
			}
		};
		var lastGeneratedLine = 1, lastGeneratedColumn = 0;
		var lastMapping = null;
		aSourceMapConsumer.eachMapping(function(mapping) {
			if (lastMapping !== null) if (lastGeneratedLine < mapping.generatedLine) {
				addMappingWithCode(lastMapping, shiftNextLine());
				lastGeneratedLine++;
				lastGeneratedColumn = 0;
			} else {
				var nextLine = remainingLines[remainingLinesIndex] || "";
				var code$1 = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
				remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
				lastGeneratedColumn = mapping.generatedColumn;
				addMappingWithCode(lastMapping, code$1);
				lastMapping = mapping;
				return;
			}
			while (lastGeneratedLine < mapping.generatedLine) {
				node.add(shiftNextLine());
				lastGeneratedLine++;
			}
			if (lastGeneratedColumn < mapping.generatedColumn) {
				var nextLine = remainingLines[remainingLinesIndex] || "";
				node.add(nextLine.substr(0, mapping.generatedColumn));
				remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
				lastGeneratedColumn = mapping.generatedColumn;
			}
			lastMapping = mapping;
		}, this);
		if (remainingLinesIndex < remainingLines.length) {
			if (lastMapping) addMappingWithCode(lastMapping, shiftNextLine());
			node.add(remainingLines.splice(remainingLinesIndex).join(""));
		}
		aSourceMapConsumer.sources.forEach(function(sourceFile) {
			var content = aSourceMapConsumer.sourceContentFor(sourceFile);
			if (content != null) {
				if (aRelativePath != null) sourceFile = util$7.join(aRelativePath, sourceFile);
				node.setSourceContent(sourceFile, content);
			}
		});
		return node;
		function addMappingWithCode(mapping, code$1) {
			if (mapping === null || mapping.source === void 0) node.add(code$1);
			else {
				var source = aRelativePath ? util$7.join(aRelativePath, mapping.source) : mapping.source;
				node.add(new SourceNode$1(mapping.originalLine, mapping.originalColumn, source, code$1, mapping.name));
			}
		}
	};
	/**
	* Add a chunk of generated JS to this source node.
	*
	* @param aChunk A string snippet of generated JS code, another instance of
	*        SourceNode, or an array where each member is one of those things.
	*/
	SourceNode$1.prototype.add = function SourceNode_add(aChunk) {
		if (Array.isArray(aChunk)) aChunk.forEach(function(chunk) {
			this.add(chunk);
		}, this);
		else if (aChunk[isSourceNode] || typeof aChunk === "string") {
			if (aChunk) this.children.push(aChunk);
		} else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		return this;
	};
	/**
	* Add a chunk of generated JS to the beginning of this source node.
	*
	* @param aChunk A string snippet of generated JS code, another instance of
	*        SourceNode, or an array where each member is one of those things.
	*/
	SourceNode$1.prototype.prepend = function SourceNode_prepend(aChunk) {
		if (Array.isArray(aChunk)) for (var i$6 = aChunk.length - 1; i$6 >= 0; i$6--) this.prepend(aChunk[i$6]);
		else if (aChunk[isSourceNode] || typeof aChunk === "string") this.children.unshift(aChunk);
		else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
		return this;
	};
	/**
	* Walk over the tree of JS snippets in this node and its children. The
	* walking function is called once for each snippet of JS and is passed that
	* snippet and the its original associated source's line/column location.
	*
	* @param aFn The traversal function.
	*/
	SourceNode$1.prototype.walk = function SourceNode_walk(aFn) {
		var chunk;
		for (var i$6 = 0, len = this.children.length; i$6 < len; i$6++) {
			chunk = this.children[i$6];
			if (chunk[isSourceNode]) chunk.walk(aFn);
			else if (chunk !== "") aFn(chunk, {
				source: this.source,
				line: this.line,
				column: this.column,
				name: this.name
			});
		}
	};
	/**
	* Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	* each of `this.children`.
	*
	* @param aSep The separator.
	*/
	SourceNode$1.prototype.join = function SourceNode_join(aSep) {
		var newChildren;
		var i$6;
		var len = this.children.length;
		if (len > 0) {
			newChildren = [];
			for (i$6 = 0; i$6 < len - 1; i$6++) {
				newChildren.push(this.children[i$6]);
				newChildren.push(aSep);
			}
			newChildren.push(this.children[i$6]);
			this.children = newChildren;
		}
		return this;
	};
	/**
	* Call String.prototype.replace on the very right-most source snippet. Useful
	* for trimming whitespace from the end of a source node, etc.
	*
	* @param aPattern The pattern to replace.
	* @param aReplacement The thing to replace the pattern with.
	*/
	SourceNode$1.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
		var lastChild = this.children[this.children.length - 1];
		if (lastChild[isSourceNode]) lastChild.replaceRight(aPattern, aReplacement);
		else if (typeof lastChild === "string") this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
		else this.children.push("".replace(aPattern, aReplacement));
		return this;
	};
	/**
	* Set the source content for a source file. This will be added to the SourceMapGenerator
	* in the sourcesContent field.
	*
	* @param aSourceFile The filename of the source file
	* @param aSourceContent The content of the source file
	*/
	SourceNode$1.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
		this.sourceContents[util$7.toSetString(aSourceFile)] = aSourceContent;
	};
	/**
	* Walk over the tree of SourceNodes. The walking function is called for each
	* source file content and is passed the filename and source content.
	*
	* @param aFn The traversal function.
	*/
	SourceNode$1.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
		for (var i$6 = 0, len = this.children.length; i$6 < len; i$6++) if (this.children[i$6][isSourceNode]) this.children[i$6].walkSourceContents(aFn);
		var sources = Object.keys(this.sourceContents);
		for (var i$6 = 0, len = sources.length; i$6 < len; i$6++) aFn(util$7.fromSetString(sources[i$6]), this.sourceContents[sources[i$6]]);
	};
	/**
	* Return the string representation of this source node. Walks over the tree
	* and concatenates all the various snippets together to one string.
	*/
	SourceNode$1.prototype.toString = function SourceNode_toString() {
		var str$4 = "";
		this.walk(function(chunk) {
			str$4 += chunk;
		});
		return str$4;
	};
	/**
	* Returns the string representation of this source node along with a source
	* map.
	*/
	SourceNode$1.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
		var generated = {
			code: "",
			line: 1,
			column: 0
		};
		var map = new SourceMapGenerator$1(aArgs);
		var sourceMappingActive = false;
		var lastOriginalSource = null;
		var lastOriginalLine = null;
		var lastOriginalColumn = null;
		var lastOriginalName = null;
		this.walk(function(chunk, original) {
			generated.code += chunk;
			if (original.source !== null && original.line !== null && original.column !== null) {
				if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) map.addMapping({
					source: original.source,
					original: {
						line: original.line,
						column: original.column
					},
					generated: {
						line: generated.line,
						column: generated.column
					},
					name: original.name
				});
				lastOriginalSource = original.source;
				lastOriginalLine = original.line;
				lastOriginalColumn = original.column;
				lastOriginalName = original.name;
				sourceMappingActive = true;
			} else if (sourceMappingActive) {
				map.addMapping({ generated: {
					line: generated.line,
					column: generated.column
				} });
				lastOriginalSource = null;
				sourceMappingActive = false;
			}
			for (var idx = 0, length = chunk.length; idx < length; idx++) if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
				generated.line++;
				generated.column = 0;
				if (idx + 1 === length) {
					lastOriginalSource = null;
					sourceMappingActive = false;
				} else if (sourceMappingActive) map.addMapping({
					source: original.source,
					original: {
						line: original.line,
						column: original.column
					},
					generated: {
						line: generated.line,
						column: generated.column
					},
					name: original.name
				});
			} else generated.column++;
		});
		this.walkSourceContents(function(sourceFile, sourceContent) {
			map.setSourceContent(sourceFile, sourceContent);
		});
		return {
			code: generated.code,
			map
		};
	};
	exports.SourceNode = SourceNode$1;
} });

//#endregion
//#region node_modules/source-map/source-map.js
var require_source_map$1 = __commonJS({ "node_modules/source-map/source-map.js"(exports) {
	exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
	exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
	exports.SourceNode = require_source_node().SourceNode;
} });

//#endregion
//#region node_modules/@babel/parser/lib/index.js
var require_lib$17 = __commonJS({ "node_modules/@babel/parser/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function _objectWithoutPropertiesLoose$1(r$2, e$2) {
		if (null == r$2) return {};
		var t$9 = {};
		for (var n$4 in r$2) if ({}.hasOwnProperty.call(r$2, n$4)) {
			if (-1 !== e$2.indexOf(n$4)) continue;
			t$9[n$4] = r$2[n$4];
		}
		return t$9;
	}
	var Position = class {
		constructor(line, col, index$1) {
			this.line = void 0;
			this.column = void 0;
			this.index = void 0;
			this.line = line;
			this.column = col;
			this.index = index$1;
		}
	};
	var SourceLocation$1 = class {
		constructor(start, end) {
			this.start = void 0;
			this.end = void 0;
			this.filename = void 0;
			this.identifierName = void 0;
			this.start = start;
			this.end = end;
		}
	};
	function createPositionWithColumnOffset(position, columnOffset) {
		const { line, column, index: index$1 } = position;
		return new Position(line, column + columnOffset, index$1 + columnOffset);
	}
	const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
	var ModuleErrors = {
		ImportMetaOutsideModule: {
			message: `import.meta may appear only with 'sourceType: "module"'`,
			code
		},
		ImportOutsideModule: {
			message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
			code
		}
	};
	const NodeDescriptions = {
		ArrayPattern: "array destructuring pattern",
		AssignmentExpression: "assignment expression",
		AssignmentPattern: "assignment expression",
		ArrowFunctionExpression: "arrow function expression",
		ConditionalExpression: "conditional expression",
		CatchClause: "catch clause",
		ForOfStatement: "for-of statement",
		ForInStatement: "for-in statement",
		ForStatement: "for-loop",
		FormalParameters: "function parameter list",
		Identifier: "identifier",
		ImportSpecifier: "import specifier",
		ImportDefaultSpecifier: "import default specifier",
		ImportNamespaceSpecifier: "import namespace specifier",
		ObjectPattern: "object destructuring pattern",
		ParenthesizedExpression: "parenthesized expression",
		RestElement: "rest element",
		UpdateExpression: {
			true: "prefix operation",
			false: "postfix operation"
		},
		VariableDeclarator: "variable declaration",
		YieldExpression: "yield expression"
	};
	const toNodeDescription = (node) => node.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
	var StandardErrors = {
		AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`,
		ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
		AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
		AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
		AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
		AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
		AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
		AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
		BadGetterArity: "A 'get' accessor must not have any formal parameters.",
		BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
		BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
		ConstructorClassField: "Classes may not have a field named 'constructor'.",
		ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
		ConstructorIsAccessor: "Class constructor may not be an accessor.",
		ConstructorIsAsync: "Constructor can't be an async function.",
		ConstructorIsGenerator: "Constructor can't be a generator.",
		DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`,
		DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
		DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
		DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
		DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
		DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
		DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
		DecoratorStaticBlock: "Decorators can't be used with a static block.",
		DeferImportRequiresNamespace: "Only `import defer * as x from \"./module\"` is valid.",
		DeletePrivateField: "Deleting a private field is not allowed.",
		DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
		DuplicateConstructor: "Duplicate constructor in the same class.",
		DuplicateDefaultExport: "Only one default export allowed per module.",
		DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
		DuplicateProto: "Redefinition of __proto__ property.",
		DuplicateRegExpFlags: "Duplicate regular expression flag.",
		DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
		ElementAfterRest: "Rest element must be last element.",
		EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
		ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
		ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
		ForInOfLoopInitializer: ({ type }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
		ForInUsing: "For-in loop may not start with 'using' declaration.",
		ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
		ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
		GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
		IllegalBreakContinue: ({ type }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
		IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
		IllegalReturn: "'return' outside of function.",
		ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.",
		ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
		ImportCallArity: `\`import()\` requires exactly one or two arguments.`,
		ImportCallNotNewExpression: "Cannot use new with import(...).",
		ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
		ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
		ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
		ImportReflectionNotBinding: "Only `import module x from \"./module\"` is valid.",
		IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
		InvalidBigIntLiteral: "Invalid BigIntLiteral.",
		InvalidCodePoint: "Code point out of bounds.",
		InvalidCoverInitializedName: "Invalid shorthand property initializer.",
		InvalidDecimal: "Invalid decimal.",
		InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`,
		InvalidEscapeSequence: "Bad character escape sequence.",
		InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
		InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,
		InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`,
		InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
		InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
		InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
		InvalidNumber: "Invalid number.",
		InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
		InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`,
		InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
		InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`,
		InvalidPropertyBindingPattern: "Binding member expression.",
		InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
		InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
		LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`,
		LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
		LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
		MalformedRegExpFlags: "Invalid regular expression flag.",
		MissingClassName: "A class name is required.",
		MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
		MissingSemicolon: "Missing semicolon.",
		MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
		MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
		MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
		MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
		ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
		ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
		ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`,
		ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
		ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`,
		MultipleDefaultsInSwitch: "Multiple default clauses.",
		NewlineAfterThrow: "Illegal newline after throw.",
		NoCatchOrFinally: "Missing catch or finally clause.",
		NumberIdentifier: "Identifier directly after number.",
		NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
		ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
		OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
		OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
		OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
		ParamDupe: "Argument name clash.",
		PatternHasAccessor: "Object pattern can't contain getter or setter.",
		PatternHasMethod: "Object pattern can't contain methods.",
		PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
		PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`,
		RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
		RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
		RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
		RecordNoProto: "'__proto__' is not allowed in Record expressions.",
		RestTrailingComma: "Unexpected trailing comma after rest element.",
		SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
		SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
		SourcePhaseImportRequiresDefault: "Only `import source x from \"./module\"` is valid.",
		StaticPrototype: "Classes may not have static property named prototype.",
		SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
		SuperPrivateField: "Private fields can't be accessed on super.",
		TrailingDecorator: "Decorators must be attached to a class element.",
		TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
		TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
		TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
		UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
		UnexpectedAwaitAfterPipelineBody: "Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.",
		UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
		UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
		UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`,
		UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
		UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
		UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
		UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
		UnexpectedPrivateField: "Unexpected private name.",
		UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,
		UnexpectedSuper: "'super' is only allowed in object methods and classes.",
		UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
		UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
		UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
		UnsupportedBind: "Binding should be performed on object property.",
		UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
		UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
		UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
		UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
		UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
		UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
		UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
		UnterminatedComment: "Unterminated comment.",
		UnterminatedRegExp: "Unterminated regular expression.",
		UnterminatedString: "Unterminated string constant.",
		UnterminatedTemplate: "Unterminated template.",
		UsingDeclarationExport: "Using declaration cannot be exported.",
		UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
		VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`,
		YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
		YieldInParameter: "Yield expression is not allowed in formal parameters.",
		YieldNotInGeneratorFunction: "'yield' is only allowed within generator functions.",
		ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
	};
	var StrictModeErrors = {
		StrictDelete: "Deleting local variable in strict mode.",
		StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,
		StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,
		StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
		StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
		StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
		StrictWith: "'with' in strict mode."
	};
	const UnparenthesizedPipeBodyDescriptions = new Set([
		"ArrowFunctionExpression",
		"AssignmentExpression",
		"ConditionalExpression",
		"YieldExpression"
	]);
	var PipelineOperatorErrors = Object.assign({
		PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
		PipeTopicRequiresHackPipes: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.",
		PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
		PipeTopicUnconfiguredToken: ({ token: token$1 }) => `Invalid topic token ${token$1}. In order to use ${token$1} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token$1}" }.`,
		PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
		PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`
	}, {
		PipelineBodyNoArrow: "Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.",
		PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
		PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
		PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
		PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
		PrimaryTopicRequiresSmartPipeline: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option."
	});
	const _excluded$1 = ["message"];
	function defineHidden(obj, key, value) {
		Object.defineProperty(obj, key, {
			enumerable: false,
			configurable: true,
			value
		});
	}
	function toParseErrorConstructor({ toMessage, code: code$1, reasonCode, syntaxPlugin }) {
		const hasMissingPlugin = reasonCode === "MissingPlugin" || reasonCode === "MissingOneOfPlugins";
		{
			const oldReasonCodes = {
				AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter",
				AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters",
				ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference",
				SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter",
				SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter",
				SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType"
			};
			if (oldReasonCodes[reasonCode]) reasonCode = oldReasonCodes[reasonCode];
		}
		return function constructor(loc, details) {
			const error = new SyntaxError();
			error.code = code$1;
			error.reasonCode = reasonCode;
			error.loc = loc;
			error.pos = loc.index;
			error.syntaxPlugin = syntaxPlugin;
			if (hasMissingPlugin) error.missingPlugin = details.missingPlugin;
			defineHidden(error, "clone", function clone$4(overrides = {}) {
				var _overrides$loc;
				const { line, column, index: index$1 } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
				return constructor(new Position(line, column, index$1), Object.assign({}, details, overrides.details));
			});
			defineHidden(error, "details", details);
			Object.defineProperty(error, "message", {
				configurable: true,
				get() {
					const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
					this.message = message;
					return message;
				},
				set(value) {
					Object.defineProperty(this, "message", {
						value,
						writable: true
					});
				}
			});
			return error;
		};
	}
	function ParseErrorEnum(argument, syntaxPlugin) {
		if (Array.isArray(argument)) return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
		const ParseErrorConstructors = {};
		for (const reasonCode of Object.keys(argument)) {
			const template$1 = argument[reasonCode];
			const _ref = typeof template$1 === "string" ? { message: () => template$1 } : typeof template$1 === "function" ? { message: template$1 } : template$1, { message } = _ref, rest = _objectWithoutPropertiesLoose$1(_ref, _excluded$1);
			const toMessage = typeof message === "string" ? () => message : message;
			ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
				code: "BABEL_PARSER_SYNTAX_ERROR",
				reasonCode,
				toMessage
			}, syntaxPlugin ? { syntaxPlugin } : {}, rest));
		}
		return ParseErrorConstructors;
	}
	const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
	function createDefaultOptions() {
		return {
			sourceType: "script",
			sourceFilename: void 0,
			startIndex: 0,
			startColumn: 0,
			startLine: 1,
			allowAwaitOutsideFunction: false,
			allowReturnOutsideFunction: false,
			allowNewTargetOutsideFunction: false,
			allowImportExportEverywhere: false,
			allowSuperOutsideMethod: false,
			allowUndeclaredExports: false,
			allowYieldOutsideFunction: false,
			plugins: [],
			strictMode: null,
			ranges: false,
			tokens: false,
			createImportExpressions: false,
			createParenthesizedExpressions: false,
			errorRecovery: false,
			attachComment: true,
			annexB: true
		};
	}
	function getOptions(opts) {
		const options = createDefaultOptions();
		if (opts == null) return options;
		if (opts.annexB != null && opts.annexB !== false) throw new Error("The `annexB` option can only be set to `false`.");
		for (const key of Object.keys(options)) if (opts[key] != null) options[key] = opts[key];
		if (options.startLine === 1) {
			if (opts.startIndex == null && options.startColumn > 0) options.startIndex = options.startColumn;
			else if (opts.startColumn == null && options.startIndex > 0) options.startColumn = options.startIndex;
		} else if (opts.startColumn == null || opts.startIndex == null) {
			if (opts.startIndex != null) throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
		}
		return options;
	}
	const { defineProperty } = Object;
	const toUnenumerable = (object$2, key) => {
		if (object$2) defineProperty(object$2, key, {
			enumerable: false,
			value: object$2[key]
		});
	};
	function toESTreeLocation(node) {
		toUnenumerable(node.loc.start, "index");
		toUnenumerable(node.loc.end, "index");
		return node;
	}
	var estree = (superClass) => class ESTreeParserMixin extends superClass {
		parse() {
			const file$2 = toESTreeLocation(super.parse());
			if (this.optionFlags & 256) file$2.tokens = file$2.tokens.map(toESTreeLocation);
			return file$2;
		}
		parseRegExpLiteral({ pattern, flags }) {
			let regex = null;
			try {
				regex = new RegExp(pattern, flags);
			} catch (_) {}
			const node = this.estreeParseLiteral(regex);
			node.regex = {
				pattern,
				flags
			};
			return node;
		}
		parseBigIntLiteral(value) {
			let bigInt;
			try {
				bigInt = BigInt(value);
			} catch (_unused) {
				bigInt = null;
			}
			const node = this.estreeParseLiteral(bigInt);
			node.bigint = String(node.value || value);
			return node;
		}
		parseDecimalLiteral(value) {
			const decimal = null;
			const node = this.estreeParseLiteral(decimal);
			node.decimal = String(node.value || value);
			return node;
		}
		estreeParseLiteral(value) {
			return this.parseLiteral(value, "Literal");
		}
		parseStringLiteral(value) {
			return this.estreeParseLiteral(value);
		}
		parseNumericLiteral(value) {
			return this.estreeParseLiteral(value);
		}
		parseNullLiteral() {
			return this.estreeParseLiteral(null);
		}
		parseBooleanLiteral(value) {
			return this.estreeParseLiteral(value);
		}
		directiveToStmt(directive$1) {
			const expression$2 = directive$1.value;
			delete directive$1.value;
			expression$2.type = "Literal";
			expression$2.raw = expression$2.extra.raw;
			expression$2.value = expression$2.extra.expressionValue;
			const stmt = directive$1;
			stmt.type = "ExpressionStatement";
			stmt.expression = expression$2;
			stmt.directive = expression$2.extra.rawValue;
			delete expression$2.extra;
			return stmt;
		}
		initFunction(node, isAsync) {
			super.initFunction(node, isAsync);
			node.expression = false;
		}
		checkDeclaration(node) {
			if (node != null && this.isObjectProperty(node)) this.checkDeclaration(node.value);
			else super.checkDeclaration(node);
		}
		getObjectOrClassMethodParams(method) {
			return method.value.params;
		}
		isValidDirective(stmt) {
			var _stmt$expression$extr;
			return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
		}
		parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
			super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
			const directiveStatements = node.directives.map((d$2) => this.directiveToStmt(d$2));
			node.body = directiveStatements.concat(node.body);
			delete node.directives;
		}
		parsePrivateName() {
			const node = super.parsePrivateName();
			if (!this.getPluginOption("estree", "classFeatures")) return node;
			return this.convertPrivateNameToPrivateIdentifier(node);
		}
		convertPrivateNameToPrivateIdentifier(node) {
			const name = super.getPrivateNameSV(node);
			node = node;
			delete node.id;
			node.name = name;
			node.type = "PrivateIdentifier";
			return node;
		}
		isPrivateName(node) {
			if (!this.getPluginOption("estree", "classFeatures")) return super.isPrivateName(node);
			return node.type === "PrivateIdentifier";
		}
		getPrivateNameSV(node) {
			if (!this.getPluginOption("estree", "classFeatures")) return super.getPrivateNameSV(node);
			return node.name;
		}
		parseLiteral(value, type) {
			const node = super.parseLiteral(value, type);
			node.raw = node.extra.raw;
			delete node.extra;
			return node;
		}
		parseFunctionBody(node, allowExpression, isMethod$2 = false) {
			super.parseFunctionBody(node, allowExpression, isMethod$2);
			node.expression = node.body.type !== "BlockStatement";
		}
		parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
			let funcNode = this.startNode();
			funcNode.kind = node.kind;
			funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
			funcNode.type = "FunctionExpression";
			delete funcNode.kind;
			node.value = funcNode;
			const { typeParameters } = node;
			if (typeParameters) {
				delete node.typeParameters;
				funcNode.typeParameters = typeParameters;
				this.resetStartLocationFromNode(funcNode, typeParameters);
			}
			if (type === "ClassPrivateMethod") node.computed = false;
			return this.finishNode(node, "MethodDefinition");
		}
		nameIsConstructor(key) {
			if (key.type === "Literal") return key.value === "constructor";
			return super.nameIsConstructor(key);
		}
		parseClassProperty(...args) {
			const propertyNode = super.parseClassProperty(...args);
			if (!this.getPluginOption("estree", "classFeatures")) return propertyNode;
			propertyNode.type = "PropertyDefinition";
			return propertyNode;
		}
		parseClassPrivateProperty(...args) {
			const propertyNode = super.parseClassPrivateProperty(...args);
			if (!this.getPluginOption("estree", "classFeatures")) return propertyNode;
			propertyNode.type = "PropertyDefinition";
			propertyNode.computed = false;
			return propertyNode;
		}
		parseClassAccessorProperty(node) {
			const accessorPropertyNode = super.parseClassAccessorProperty(node);
			if (!this.getPluginOption("estree", "classFeatures")) return accessorPropertyNode;
			accessorPropertyNode.type = "AccessorProperty";
			return accessorPropertyNode;
		}
		parseObjectMethod(prop, isGenerator, isAsync, isPattern$2, isAccessor$1) {
			const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern$2, isAccessor$1);
			if (node) {
				node.type = "Property";
				if (node.kind === "method") node.kind = "init";
				node.shorthand = false;
			}
			return node;
		}
		parseObjectProperty(prop, startLoc, isPattern$2, refExpressionErrors) {
			const node = super.parseObjectProperty(prop, startLoc, isPattern$2, refExpressionErrors);
			if (node) {
				node.kind = "init";
				node.type = "Property";
			}
			return node;
		}
		isValidLVal(type, isUnparenthesizedInAssign, binding) {
			return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
		}
		isAssignable(node, isBinding$2) {
			if (node != null && this.isObjectProperty(node)) return this.isAssignable(node.value, isBinding$2);
			return super.isAssignable(node, isBinding$2);
		}
		toAssignable(node, isLHS = false) {
			if (node != null && this.isObjectProperty(node)) {
				const { key, value } = node;
				if (this.isPrivateName(key)) this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
				this.toAssignable(value, isLHS);
			} else super.toAssignable(node, isLHS);
		}
		toAssignableObjectExpressionProp(prop, isLast, isLHS) {
			if (prop.type === "Property" && (prop.kind === "get" || prop.kind === "set")) this.raise(Errors.PatternHasAccessor, prop.key);
			else if (prop.type === "Property" && prop.method) this.raise(Errors.PatternHasMethod, prop.key);
			else super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
		}
		finishCallExpression(unfinished, optional) {
			const node = super.finishCallExpression(unfinished, optional);
			if (node.callee.type === "Import") {
				var _ref, _ref2;
				node.type = "ImportExpression";
				node.source = node.arguments[0];
				node.options = (_ref = node.arguments[1]) != null ? _ref : null;
				node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null;
				delete node.arguments;
				delete node.callee;
			}
			return node;
		}
		toReferencedArguments(node) {
			if (node.type === "ImportExpression") return;
			super.toReferencedArguments(node);
		}
		parseExport(unfinished, decorators) {
			const exportStartLoc = this.state.lastTokStartLoc;
			const node = super.parseExport(unfinished, decorators);
			switch (node.type) {
				case "ExportAllDeclaration":
					node.exported = null;
					break;
				case "ExportNamedDeclaration": if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
					node.type = "ExportAllDeclaration";
					node.exported = node.specifiers[0].exported;
					delete node.specifiers;
				}
				case "ExportDefaultDeclaration":
					{
						var _declaration$decorato;
						const { declaration } = node;
						if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) this.resetStartLocation(node, exportStartLoc);
					}
					break;
			}
			return node;
		}
		parseSubscript(base$1, startLoc, noCalls, state) {
			const node = super.parseSubscript(base$1, startLoc, noCalls, state);
			if (state.optionalChainMember) {
				if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") node.type = node.type.substring(8);
				if (state.stop) {
					const chain$1 = this.startNodeAtNode(node);
					chain$1.expression = node;
					return this.finishNode(chain$1, "ChainExpression");
				}
			} else if (node.type === "MemberExpression" || node.type === "CallExpression") node.optional = false;
			return node;
		}
		isOptionalMemberExpression(node) {
			if (node.type === "ChainExpression") return node.expression.type === "MemberExpression";
			return super.isOptionalMemberExpression(node);
		}
		hasPropertyAsPrivateName(node) {
			if (node.type === "ChainExpression") node = node.expression;
			return super.hasPropertyAsPrivateName(node);
		}
		isObjectProperty(node) {
			return node.type === "Property" && node.kind === "init" && !node.method;
		}
		isObjectMethod(node) {
			return node.type === "Property" && (node.method || node.kind === "get" || node.kind === "set");
		}
		finishNodeAt(node, type, endLoc) {
			return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
		}
		resetStartLocation(node, startLoc) {
			super.resetStartLocation(node, startLoc);
			toESTreeLocation(node);
		}
		resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
			super.resetEndLocation(node, endLoc);
			toESTreeLocation(node);
		}
	};
	var TokContext = class {
		constructor(token$1, preserveSpace) {
			this.token = void 0;
			this.preserveSpace = void 0;
			this.token = token$1;
			this.preserveSpace = !!preserveSpace;
		}
	};
	const types$6 = {
		brace: new TokContext("{"),
		j_oTag: new TokContext("<tag"),
		j_cTag: new TokContext("</tag"),
		j_expr: new TokContext("<tag>...</tag>", true)
	};
	types$6.template = new TokContext("`", true);
	const beforeExpr = true;
	const startsExpr = true;
	const isLoop$1 = true;
	const isAssign = true;
	const prefix = true;
	const postfix = true;
	var ExportedTokenType = class {
		constructor(label, conf = {}) {
			this.label = void 0;
			this.keyword = void 0;
			this.beforeExpr = void 0;
			this.startsExpr = void 0;
			this.rightAssociative = void 0;
			this.isLoop = void 0;
			this.isAssign = void 0;
			this.prefix = void 0;
			this.postfix = void 0;
			this.binop = void 0;
			this.label = label;
			this.keyword = conf.keyword;
			this.beforeExpr = !!conf.beforeExpr;
			this.startsExpr = !!conf.startsExpr;
			this.rightAssociative = !!conf.rightAssociative;
			this.isLoop = !!conf.isLoop;
			this.isAssign = !!conf.isAssign;
			this.prefix = !!conf.prefix;
			this.postfix = !!conf.postfix;
			this.binop = conf.binop != null ? conf.binop : null;
			this.updateContext = null;
		}
	};
	const keywords$1 = new Map();
	function createKeyword(name, options = {}) {
		options.keyword = name;
		const token$1 = createToken(name, options);
		keywords$1.set(name, token$1);
		return token$1;
	}
	function createBinop(name, binop) {
		return createToken(name, {
			beforeExpr,
			binop
		});
	}
	let tokenTypeCounter = -1;
	const tokenTypes = [];
	const tokenLabels = [];
	const tokenBinops = [];
	const tokenBeforeExprs = [];
	const tokenStartsExprs = [];
	const tokenPrefixes = [];
	function createToken(name, options = {}) {
		var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
		++tokenTypeCounter;
		tokenLabels.push(name);
		tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
		tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
		tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
		tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
		tokenTypes.push(new ExportedTokenType(name, options));
		return tokenTypeCounter;
	}
	function createKeywordLike(name, options = {}) {
		var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
		++tokenTypeCounter;
		keywords$1.set(name, tokenTypeCounter);
		tokenLabels.push(name);
		tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
		tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
		tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
		tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
		tokenTypes.push(new ExportedTokenType("name", options));
		return tokenTypeCounter;
	}
	const tt = {
		bracketL: createToken("[", {
			beforeExpr,
			startsExpr
		}),
		bracketHashL: createToken("#[", {
			beforeExpr,
			startsExpr
		}),
		bracketBarL: createToken("[|", {
			beforeExpr,
			startsExpr
		}),
		bracketR: createToken("]"),
		bracketBarR: createToken("|]"),
		braceL: createToken("{", {
			beforeExpr,
			startsExpr
		}),
		braceBarL: createToken("{|", {
			beforeExpr,
			startsExpr
		}),
		braceHashL: createToken("#{", {
			beforeExpr,
			startsExpr
		}),
		braceR: createToken("}"),
		braceBarR: createToken("|}"),
		parenL: createToken("(", {
			beforeExpr,
			startsExpr
		}),
		parenR: createToken(")"),
		comma: createToken(",", { beforeExpr }),
		semi: createToken(";", { beforeExpr }),
		colon: createToken(":", { beforeExpr }),
		doubleColon: createToken("::", { beforeExpr }),
		dot: createToken("."),
		question: createToken("?", { beforeExpr }),
		questionDot: createToken("?."),
		arrow: createToken("=>", { beforeExpr }),
		template: createToken("template"),
		ellipsis: createToken("...", { beforeExpr }),
		backQuote: createToken("`", { startsExpr }),
		dollarBraceL: createToken("${", {
			beforeExpr,
			startsExpr
		}),
		templateTail: createToken("...`", { startsExpr }),
		templateNonTail: createToken("...${", {
			beforeExpr,
			startsExpr
		}),
		at: createToken("@"),
		hash: createToken("#", { startsExpr }),
		interpreterDirective: createToken("#!..."),
		eq: createToken("=", {
			beforeExpr,
			isAssign
		}),
		assign: createToken("_=", {
			beforeExpr,
			isAssign
		}),
		slashAssign: createToken("_=", {
			beforeExpr,
			isAssign
		}),
		xorAssign: createToken("_=", {
			beforeExpr,
			isAssign
		}),
		moduloAssign: createToken("_=", {
			beforeExpr,
			isAssign
		}),
		incDec: createToken("++/--", {
			prefix,
			postfix,
			startsExpr
		}),
		bang: createToken("!", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		tilde: createToken("~", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		doubleCaret: createToken("^^", { startsExpr }),
		doubleAt: createToken("@@", { startsExpr }),
		pipeline: createBinop("|>", 0),
		nullishCoalescing: createBinop("??", 1),
		logicalOR: createBinop("||", 1),
		logicalAND: createBinop("&&", 2),
		bitwiseOR: createBinop("|", 3),
		bitwiseXOR: createBinop("^", 4),
		bitwiseAND: createBinop("&", 5),
		equality: createBinop("==/!=/===/!==", 6),
		lt: createBinop("</>/<=/>=", 7),
		gt: createBinop("</>/<=/>=", 7),
		relational: createBinop("</>/<=/>=", 7),
		bitShift: createBinop("<</>>/>>>", 8),
		bitShiftL: createBinop("<</>>/>>>", 8),
		bitShiftR: createBinop("<</>>/>>>", 8),
		plusMin: createToken("+/-", {
			beforeExpr,
			binop: 9,
			prefix,
			startsExpr
		}),
		modulo: createToken("%", {
			binop: 10,
			startsExpr
		}),
		star: createToken("*", { binop: 10 }),
		slash: createBinop("/", 10),
		exponent: createToken("**", {
			beforeExpr,
			binop: 11,
			rightAssociative: true
		}),
		_in: createKeyword("in", {
			beforeExpr,
			binop: 7
		}),
		_instanceof: createKeyword("instanceof", {
			beforeExpr,
			binop: 7
		}),
		_break: createKeyword("break"),
		_case: createKeyword("case", { beforeExpr }),
		_catch: createKeyword("catch"),
		_continue: createKeyword("continue"),
		_debugger: createKeyword("debugger"),
		_default: createKeyword("default", { beforeExpr }),
		_else: createKeyword("else", { beforeExpr }),
		_finally: createKeyword("finally"),
		_function: createKeyword("function", { startsExpr }),
		_if: createKeyword("if"),
		_return: createKeyword("return", { beforeExpr }),
		_switch: createKeyword("switch"),
		_throw: createKeyword("throw", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		_try: createKeyword("try"),
		_var: createKeyword("var"),
		_const: createKeyword("const"),
		_with: createKeyword("with"),
		_new: createKeyword("new", {
			beforeExpr,
			startsExpr
		}),
		_this: createKeyword("this", { startsExpr }),
		_super: createKeyword("super", { startsExpr }),
		_class: createKeyword("class", { startsExpr }),
		_extends: createKeyword("extends", { beforeExpr }),
		_export: createKeyword("export"),
		_import: createKeyword("import", { startsExpr }),
		_null: createKeyword("null", { startsExpr }),
		_true: createKeyword("true", { startsExpr }),
		_false: createKeyword("false", { startsExpr }),
		_typeof: createKeyword("typeof", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		_void: createKeyword("void", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		_delete: createKeyword("delete", {
			beforeExpr,
			prefix,
			startsExpr
		}),
		_do: createKeyword("do", {
			isLoop: isLoop$1,
			beforeExpr
		}),
		_for: createKeyword("for", { isLoop: isLoop$1 }),
		_while: createKeyword("while", { isLoop: isLoop$1 }),
		_as: createKeywordLike("as", { startsExpr }),
		_assert: createKeywordLike("assert", { startsExpr }),
		_async: createKeywordLike("async", { startsExpr }),
		_await: createKeywordLike("await", { startsExpr }),
		_defer: createKeywordLike("defer", { startsExpr }),
		_from: createKeywordLike("from", { startsExpr }),
		_get: createKeywordLike("get", { startsExpr }),
		_let: createKeywordLike("let", { startsExpr }),
		_meta: createKeywordLike("meta", { startsExpr }),
		_of: createKeywordLike("of", { startsExpr }),
		_sent: createKeywordLike("sent", { startsExpr }),
		_set: createKeywordLike("set", { startsExpr }),
		_source: createKeywordLike("source", { startsExpr }),
		_static: createKeywordLike("static", { startsExpr }),
		_using: createKeywordLike("using", { startsExpr }),
		_yield: createKeywordLike("yield", { startsExpr }),
		_asserts: createKeywordLike("asserts", { startsExpr }),
		_checks: createKeywordLike("checks", { startsExpr }),
		_exports: createKeywordLike("exports", { startsExpr }),
		_global: createKeywordLike("global", { startsExpr }),
		_implements: createKeywordLike("implements", { startsExpr }),
		_intrinsic: createKeywordLike("intrinsic", { startsExpr }),
		_infer: createKeywordLike("infer", { startsExpr }),
		_is: createKeywordLike("is", { startsExpr }),
		_mixins: createKeywordLike("mixins", { startsExpr }),
		_proto: createKeywordLike("proto", { startsExpr }),
		_require: createKeywordLike("require", { startsExpr }),
		_satisfies: createKeywordLike("satisfies", { startsExpr }),
		_keyof: createKeywordLike("keyof", { startsExpr }),
		_readonly: createKeywordLike("readonly", { startsExpr }),
		_unique: createKeywordLike("unique", { startsExpr }),
		_abstract: createKeywordLike("abstract", { startsExpr }),
		_declare: createKeywordLike("declare", { startsExpr }),
		_enum: createKeywordLike("enum", { startsExpr }),
		_module: createKeywordLike("module", { startsExpr }),
		_namespace: createKeywordLike("namespace", { startsExpr }),
		_interface: createKeywordLike("interface", { startsExpr }),
		_type: createKeywordLike("type", { startsExpr }),
		_opaque: createKeywordLike("opaque", { startsExpr }),
		name: createToken("name", { startsExpr }),
		placeholder: createToken("%%", { startsExpr: true }),
		string: createToken("string", { startsExpr }),
		num: createToken("num", { startsExpr }),
		bigint: createToken("bigint", { startsExpr }),
		decimal: createToken("decimal", { startsExpr }),
		regexp: createToken("regexp", { startsExpr }),
		privateName: createToken("#name", { startsExpr }),
		eof: createToken("eof"),
		jsxName: createToken("jsxName"),
		jsxText: createToken("jsxText", { beforeExpr: true }),
		jsxTagStart: createToken("jsxTagStart", { startsExpr: true }),
		jsxTagEnd: createToken("jsxTagEnd")
	};
	function tokenIsIdentifier(token$1) {
		return token$1 >= 93 && token$1 <= 133;
	}
	function tokenKeywordOrIdentifierIsKeyword(token$1) {
		return token$1 <= 92;
	}
	function tokenIsKeywordOrIdentifier(token$1) {
		return token$1 >= 58 && token$1 <= 133;
	}
	function tokenIsLiteralPropertyName(token$1) {
		return token$1 >= 58 && token$1 <= 137;
	}
	function tokenComesBeforeExpression(token$1) {
		return tokenBeforeExprs[token$1];
	}
	function tokenCanStartExpression(token$1) {
		return tokenStartsExprs[token$1];
	}
	function tokenIsAssignment(token$1) {
		return token$1 >= 29 && token$1 <= 33;
	}
	function tokenIsFlowInterfaceOrTypeOrOpaque(token$1) {
		return token$1 >= 129 && token$1 <= 131;
	}
	function tokenIsLoop(token$1) {
		return token$1 >= 90 && token$1 <= 92;
	}
	function tokenIsKeyword(token$1) {
		return token$1 >= 58 && token$1 <= 92;
	}
	function tokenIsOperator(token$1) {
		return token$1 >= 39 && token$1 <= 59;
	}
	function tokenIsPostfix(token$1) {
		return token$1 === 34;
	}
	function tokenIsPrefix(token$1) {
		return tokenPrefixes[token$1];
	}
	function tokenIsTSTypeOperator(token$1) {
		return token$1 >= 121 && token$1 <= 123;
	}
	function tokenIsTSDeclarationStart(token$1) {
		return token$1 >= 124 && token$1 <= 130;
	}
	function tokenLabelName(token$1) {
		return tokenLabels[token$1];
	}
	function tokenOperatorPrecedence(token$1) {
		return tokenBinops[token$1];
	}
	function tokenIsRightAssociative(token$1) {
		return token$1 === 57;
	}
	function tokenIsTemplate(token$1) {
		return token$1 >= 24 && token$1 <= 25;
	}
	function getExportedToken(token$1) {
		return tokenTypes[token$1];
	}
	{
		tokenTypes[8].updateContext = (context) => {
			context.pop();
		};
		tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
			context.push(types$6.brace);
		};
		tokenTypes[22].updateContext = (context) => {
			if (context[context.length - 1] === types$6.template) context.pop();
			else context.push(types$6.template);
		};
		tokenTypes[143].updateContext = (context) => {
			context.push(types$6.j_expr, types$6.j_oTag);
		};
	}
	let nonASCIIidentifierStartChars$1 = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	let nonASCIIidentifierChars$1 = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
	const nonASCIIidentifierStart$1 = new RegExp("[" + nonASCIIidentifierStartChars$1 + "]");
	const nonASCIIidentifier$1 = new RegExp("[" + nonASCIIidentifierStartChars$1 + nonASCIIidentifierChars$1 + "]");
	nonASCIIidentifierStartChars$1 = nonASCIIidentifierChars$1 = null;
	const astralIdentifierStartCodes$1 = [
		0,
		11,
		2,
		25,
		2,
		18,
		2,
		1,
		2,
		14,
		3,
		13,
		35,
		122,
		70,
		52,
		268,
		28,
		4,
		48,
		48,
		31,
		14,
		29,
		6,
		37,
		11,
		29,
		3,
		35,
		5,
		7,
		2,
		4,
		43,
		157,
		19,
		35,
		5,
		35,
		5,
		39,
		9,
		51,
		13,
		10,
		2,
		14,
		2,
		6,
		2,
		1,
		2,
		10,
		2,
		14,
		2,
		6,
		2,
		1,
		4,
		51,
		13,
		310,
		10,
		21,
		11,
		7,
		25,
		5,
		2,
		41,
		2,
		8,
		70,
		5,
		3,
		0,
		2,
		43,
		2,
		1,
		4,
		0,
		3,
		22,
		11,
		22,
		10,
		30,
		66,
		18,
		2,
		1,
		11,
		21,
		11,
		25,
		71,
		55,
		7,
		1,
		65,
		0,
		16,
		3,
		2,
		2,
		2,
		28,
		43,
		28,
		4,
		28,
		36,
		7,
		2,
		27,
		28,
		53,
		11,
		21,
		11,
		18,
		14,
		17,
		111,
		72,
		56,
		50,
		14,
		50,
		14,
		35,
		39,
		27,
		10,
		22,
		251,
		41,
		7,
		1,
		17,
		2,
		60,
		28,
		11,
		0,
		9,
		21,
		43,
		17,
		47,
		20,
		28,
		22,
		13,
		52,
		58,
		1,
		3,
		0,
		14,
		44,
		33,
		24,
		27,
		35,
		30,
		0,
		3,
		0,
		9,
		34,
		4,
		0,
		13,
		47,
		15,
		3,
		22,
		0,
		2,
		0,
		36,
		17,
		2,
		24,
		20,
		1,
		64,
		6,
		2,
		0,
		2,
		3,
		2,
		14,
		2,
		9,
		8,
		46,
		39,
		7,
		3,
		1,
		3,
		21,
		2,
		6,
		2,
		1,
		2,
		4,
		4,
		0,
		19,
		0,
		13,
		4,
		31,
		9,
		2,
		0,
		3,
		0,
		2,
		37,
		2,
		0,
		26,
		0,
		2,
		0,
		45,
		52,
		19,
		3,
		21,
		2,
		31,
		47,
		21,
		1,
		2,
		0,
		185,
		46,
		42,
		3,
		37,
		47,
		21,
		0,
		60,
		42,
		14,
		0,
		72,
		26,
		38,
		6,
		186,
		43,
		117,
		63,
		32,
		7,
		3,
		0,
		3,
		7,
		2,
		1,
		2,
		23,
		16,
		0,
		2,
		0,
		95,
		7,
		3,
		38,
		17,
		0,
		2,
		0,
		29,
		0,
		11,
		39,
		8,
		0,
		22,
		0,
		12,
		45,
		20,
		0,
		19,
		72,
		200,
		32,
		32,
		8,
		2,
		36,
		18,
		0,
		50,
		29,
		113,
		6,
		2,
		1,
		2,
		37,
		22,
		0,
		26,
		5,
		2,
		1,
		2,
		31,
		15,
		0,
		328,
		18,
		16,
		0,
		2,
		12,
		2,
		33,
		125,
		0,
		80,
		921,
		103,
		110,
		18,
		195,
		2637,
		96,
		16,
		1071,
		18,
		5,
		26,
		3994,
		6,
		582,
		6842,
		29,
		1763,
		568,
		8,
		30,
		18,
		78,
		18,
		29,
		19,
		47,
		17,
		3,
		32,
		20,
		6,
		18,
		433,
		44,
		212,
		63,
		129,
		74,
		6,
		0,
		67,
		12,
		65,
		1,
		2,
		0,
		29,
		6135,
		9,
		1237,
		42,
		9,
		8936,
		3,
		2,
		6,
		2,
		1,
		2,
		290,
		16,
		0,
		30,
		2,
		3,
		0,
		15,
		3,
		9,
		395,
		2309,
		106,
		6,
		12,
		4,
		8,
		8,
		9,
		5991,
		84,
		2,
		70,
		2,
		1,
		3,
		0,
		3,
		1,
		3,
		3,
		2,
		11,
		2,
		0,
		2,
		6,
		2,
		64,
		2,
		3,
		3,
		7,
		2,
		6,
		2,
		27,
		2,
		3,
		2,
		4,
		2,
		0,
		4,
		6,
		2,
		339,
		3,
		24,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		7,
		1845,
		30,
		7,
		5,
		262,
		61,
		147,
		44,
		11,
		6,
		17,
		0,
		322,
		29,
		19,
		43,
		485,
		27,
		229,
		29,
		3,
		0,
		496,
		6,
		2,
		3,
		2,
		1,
		2,
		14,
		2,
		196,
		60,
		67,
		8,
		0,
		1205,
		3,
		2,
		26,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		9,
		2,
		3,
		2,
		0,
		2,
		0,
		7,
		0,
		5,
		0,
		2,
		0,
		2,
		0,
		2,
		2,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		1,
		2,
		0,
		3,
		3,
		2,
		6,
		2,
		3,
		2,
		3,
		2,
		0,
		2,
		9,
		2,
		16,
		6,
		2,
		2,
		4,
		2,
		16,
		4421,
		42719,
		33,
		4153,
		7,
		221,
		3,
		5761,
		15,
		7472,
		16,
		621,
		2467,
		541,
		1507,
		4938,
		6,
		4191
	];
	const astralIdentifierCodes$1 = [
		509,
		0,
		227,
		0,
		150,
		4,
		294,
		9,
		1368,
		2,
		2,
		1,
		6,
		3,
		41,
		2,
		5,
		0,
		166,
		1,
		574,
		3,
		9,
		9,
		7,
		9,
		32,
		4,
		318,
		1,
		80,
		3,
		71,
		10,
		50,
		3,
		123,
		2,
		54,
		14,
		32,
		10,
		3,
		1,
		11,
		3,
		46,
		10,
		8,
		0,
		46,
		9,
		7,
		2,
		37,
		13,
		2,
		9,
		6,
		1,
		45,
		0,
		13,
		2,
		49,
		13,
		9,
		3,
		2,
		11,
		83,
		11,
		7,
		0,
		3,
		0,
		158,
		11,
		6,
		9,
		7,
		3,
		56,
		1,
		2,
		6,
		3,
		1,
		3,
		2,
		10,
		0,
		11,
		1,
		3,
		6,
		4,
		4,
		68,
		8,
		2,
		0,
		3,
		0,
		2,
		3,
		2,
		4,
		2,
		0,
		15,
		1,
		83,
		17,
		10,
		9,
		5,
		0,
		82,
		19,
		13,
		9,
		214,
		6,
		3,
		8,
		28,
		1,
		83,
		16,
		16,
		9,
		82,
		12,
		9,
		9,
		7,
		19,
		58,
		14,
		5,
		9,
		243,
		14,
		166,
		9,
		71,
		5,
		2,
		1,
		3,
		3,
		2,
		0,
		2,
		1,
		13,
		9,
		120,
		6,
		3,
		6,
		4,
		0,
		29,
		9,
		41,
		6,
		2,
		3,
		9,
		0,
		10,
		10,
		47,
		15,
		343,
		9,
		54,
		7,
		2,
		7,
		17,
		9,
		57,
		21,
		2,
		13,
		123,
		5,
		4,
		0,
		2,
		1,
		2,
		6,
		2,
		0,
		9,
		9,
		49,
		4,
		2,
		1,
		2,
		4,
		9,
		9,
		330,
		3,
		10,
		1,
		2,
		0,
		49,
		6,
		4,
		4,
		14,
		10,
		5350,
		0,
		7,
		14,
		11465,
		27,
		2343,
		9,
		87,
		9,
		39,
		4,
		60,
		6,
		26,
		9,
		535,
		9,
		470,
		0,
		2,
		54,
		8,
		3,
		82,
		0,
		12,
		1,
		19628,
		1,
		4178,
		9,
		519,
		45,
		3,
		22,
		543,
		4,
		4,
		5,
		9,
		7,
		3,
		6,
		31,
		3,
		149,
		2,
		1418,
		49,
		513,
		54,
		5,
		49,
		9,
		0,
		15,
		0,
		23,
		4,
		2,
		14,
		1361,
		6,
		2,
		16,
		3,
		6,
		2,
		1,
		2,
		4,
		101,
		0,
		161,
		6,
		10,
		9,
		357,
		0,
		62,
		13,
		499,
		13,
		245,
		1,
		2,
		9,
		726,
		6,
		110,
		6,
		6,
		9,
		4759,
		9,
		787719,
		239
	];
	function isInAstralSet$1(code$1, set) {
		let pos = 65536;
		for (let i$6 = 0, length = set.length; i$6 < length; i$6 += 2) {
			pos += set[i$6];
			if (pos > code$1) return false;
			pos += set[i$6 + 1];
			if (pos >= code$1) return true;
		}
		return false;
	}
	function isIdentifierStart$1(code$1) {
		if (code$1 < 65) return code$1 === 36;
		if (code$1 <= 90) return true;
		if (code$1 < 97) return code$1 === 95;
		if (code$1 <= 122) return true;
		if (code$1 <= 65535) return code$1 >= 170 && nonASCIIidentifierStart$1.test(String.fromCharCode(code$1));
		return isInAstralSet$1(code$1, astralIdentifierStartCodes$1);
	}
	function isIdentifierChar$1(code$1) {
		if (code$1 < 48) return code$1 === 36;
		if (code$1 < 58) return true;
		if (code$1 < 65) return false;
		if (code$1 <= 90) return true;
		if (code$1 < 97) return code$1 === 95;
		if (code$1 <= 122) return true;
		if (code$1 <= 65535) return code$1 >= 170 && nonASCIIidentifier$1.test(String.fromCharCode(code$1));
		return isInAstralSet$1(code$1, astralIdentifierStartCodes$1) || isInAstralSet$1(code$1, astralIdentifierCodes$1);
	}
	const reservedWords$2 = {
		keyword: [
			"break",
			"case",
			"catch",
			"continue",
			"debugger",
			"default",
			"do",
			"else",
			"finally",
			"for",
			"function",
			"if",
			"return",
			"switch",
			"throw",
			"try",
			"var",
			"const",
			"while",
			"with",
			"new",
			"this",
			"super",
			"class",
			"extends",
			"export",
			"import",
			"null",
			"true",
			"false",
			"in",
			"instanceof",
			"typeof",
			"void",
			"delete"
		],
		strict: [
			"implements",
			"interface",
			"let",
			"package",
			"private",
			"protected",
			"public",
			"static",
			"yield"
		],
		strictBind: ["eval", "arguments"]
	};
	const keywords$2 = new Set(reservedWords$2.keyword);
	const reservedWordsStrictSet$1 = new Set(reservedWords$2.strict);
	const reservedWordsStrictBindSet$1 = new Set(reservedWords$2.strictBind);
	function isReservedWord$1(word$3, inModule) {
		return inModule && word$3 === "await" || word$3 === "enum";
	}
	function isStrictReservedWord$1(word$3, inModule) {
		return isReservedWord$1(word$3, inModule) || reservedWordsStrictSet$1.has(word$3);
	}
	function isStrictBindOnlyReservedWord$1(word$3) {
		return reservedWordsStrictBindSet$1.has(word$3);
	}
	function isStrictBindReservedWord$1(word$3, inModule) {
		return isStrictReservedWord$1(word$3, inModule) || isStrictBindOnlyReservedWord$1(word$3);
	}
	function isKeyword$1(word$3) {
		return keywords$2.has(word$3);
	}
	function isIteratorStart(current, next, next2) {
		return current === 64 && next === 64 && isIdentifierStart$1(next2);
	}
	const reservedWordLikeSet = new Set([
		"break",
		"case",
		"catch",
		"continue",
		"debugger",
		"default",
		"do",
		"else",
		"finally",
		"for",
		"function",
		"if",
		"return",
		"switch",
		"throw",
		"try",
		"var",
		"const",
		"while",
		"with",
		"new",
		"this",
		"super",
		"class",
		"extends",
		"export",
		"import",
		"null",
		"true",
		"false",
		"in",
		"instanceof",
		"typeof",
		"void",
		"delete",
		"implements",
		"interface",
		"let",
		"package",
		"private",
		"protected",
		"public",
		"static",
		"yield",
		"eval",
		"arguments",
		"enum",
		"await"
	]);
	function canBeReservedWord(word$3) {
		return reservedWordLikeSet.has(word$3);
	}
	var Scope$2 = class {
		constructor(flags) {
			this.flags = 0;
			this.names = new Map();
			this.firstLexicalName = "";
			this.flags = flags;
		}
	};
	var ScopeHandler = class {
		constructor(parser$5, inModule) {
			this.parser = void 0;
			this.scopeStack = [];
			this.inModule = void 0;
			this.undefinedExports = new Map();
			this.parser = parser$5;
			this.inModule = inModule;
		}
		get inTopLevel() {
			return (this.currentScope().flags & 1) > 0;
		}
		get inFunction() {
			return (this.currentVarScopeFlags() & 2) > 0;
		}
		get allowSuper() {
			return (this.currentThisScopeFlags() & 16) > 0;
		}
		get allowDirectSuper() {
			return (this.currentThisScopeFlags() & 32) > 0;
		}
		get inClass() {
			return (this.currentThisScopeFlags() & 64) > 0;
		}
		get inClassAndNotInNonArrowFunction() {
			const flags = this.currentThisScopeFlags();
			return (flags & 64) > 0 && (flags & 2) === 0;
		}
		get inStaticBlock() {
			for (let i$6 = this.scopeStack.length - 1;; i$6--) {
				const { flags } = this.scopeStack[i$6];
				if (flags & 128) return true;
				if (flags & 451) return false;
			}
		}
		get inNonArrowFunction() {
			return (this.currentThisScopeFlags() & 2) > 0;
		}
		get treatFunctionsAsVar() {
			return this.treatFunctionsAsVarInScope(this.currentScope());
		}
		createScope(flags) {
			return new Scope$2(flags);
		}
		enter(flags) {
			this.scopeStack.push(this.createScope(flags));
		}
		exit() {
			const scope$1 = this.scopeStack.pop();
			return scope$1.flags;
		}
		treatFunctionsAsVarInScope(scope$1) {
			return !!(scope$1.flags & 130 || !this.parser.inModule && scope$1.flags & 1);
		}
		declareName(name, bindingType, loc) {
			let scope$1 = this.currentScope();
			if (bindingType & 8 || bindingType & 16) {
				this.checkRedeclarationInScope(scope$1, name, bindingType, loc);
				let type = scope$1.names.get(name) || 0;
				if (bindingType & 16) type = type | 4;
				else {
					if (!scope$1.firstLexicalName) scope$1.firstLexicalName = name;
					type = type | 2;
				}
				scope$1.names.set(name, type);
				if (bindingType & 8) this.maybeExportDefined(scope$1, name);
			} else if (bindingType & 4) for (let i$6 = this.scopeStack.length - 1; i$6 >= 0; --i$6) {
				scope$1 = this.scopeStack[i$6];
				this.checkRedeclarationInScope(scope$1, name, bindingType, loc);
				scope$1.names.set(name, (scope$1.names.get(name) || 0) | 1);
				this.maybeExportDefined(scope$1, name);
				if (scope$1.flags & 387) break;
			}
			if (this.parser.inModule && scope$1.flags & 1) this.undefinedExports.delete(name);
		}
		maybeExportDefined(scope$1, name) {
			if (this.parser.inModule && scope$1.flags & 1) this.undefinedExports.delete(name);
		}
		checkRedeclarationInScope(scope$1, name, bindingType, loc) {
			if (this.isRedeclaredInScope(scope$1, name, bindingType)) this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
		}
		isRedeclaredInScope(scope$1, name, bindingType) {
			if (!(bindingType & 1)) return false;
			if (bindingType & 8) return scope$1.names.has(name);
			const type = scope$1.names.get(name);
			if (bindingType & 16) return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope$1) && (type & 1) > 0;
			return (type & 2) > 0 && !(scope$1.flags & 8 && scope$1.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope$1) && (type & 4) > 0;
		}
		checkLocalExport(id$4) {
			const { name } = id$4;
			const topLevelScope = this.scopeStack[0];
			if (!topLevelScope.names.has(name)) this.undefinedExports.set(name, id$4.loc.start);
		}
		currentScope() {
			return this.scopeStack[this.scopeStack.length - 1];
		}
		currentVarScopeFlags() {
			for (let i$6 = this.scopeStack.length - 1;; i$6--) {
				const { flags } = this.scopeStack[i$6];
				if (flags & 387) return flags;
			}
		}
		currentThisScopeFlags() {
			for (let i$6 = this.scopeStack.length - 1;; i$6--) {
				const { flags } = this.scopeStack[i$6];
				if (flags & 451 && !(flags & 4)) return flags;
			}
		}
	};
	var FlowScope = class extends Scope$2 {
		constructor(...args) {
			super(...args);
			this.declareFunctions = new Set();
		}
	};
	var FlowScopeHandler = class extends ScopeHandler {
		createScope(flags) {
			return new FlowScope(flags);
		}
		declareName(name, bindingType, loc) {
			const scope$1 = this.currentScope();
			if (bindingType & 2048) {
				this.checkRedeclarationInScope(scope$1, name, bindingType, loc);
				this.maybeExportDefined(scope$1, name);
				scope$1.declareFunctions.add(name);
				return;
			}
			super.declareName(name, bindingType, loc);
		}
		isRedeclaredInScope(scope$1, name, bindingType) {
			if (super.isRedeclaredInScope(scope$1, name, bindingType)) return true;
			if (bindingType & 2048 && !scope$1.declareFunctions.has(name)) {
				const type = scope$1.names.get(name);
				return (type & 4) > 0 || (type & 2) > 0;
			}
			return false;
		}
		checkLocalExport(id$4) {
			if (!this.scopeStack[0].declareFunctions.has(id$4.name)) super.checkLocalExport(id$4);
		}
	};
	var BaseParser = class {
		constructor() {
			this.sawUnambiguousESM = false;
			this.ambiguousScriptDifferentAst = false;
		}
		sourceToOffsetPos(sourcePos) {
			return sourcePos + this.startIndex;
		}
		offsetToSourcePos(offsetPos) {
			return offsetPos - this.startIndex;
		}
		hasPlugin(pluginConfig) {
			if (typeof pluginConfig === "string") return this.plugins.has(pluginConfig);
			else {
				const [pluginName, pluginOptions] = pluginConfig;
				if (!this.hasPlugin(pluginName)) return false;
				const actualOptions = this.plugins.get(pluginName);
				for (const key of Object.keys(pluginOptions)) if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) return false;
				return true;
			}
		}
		getPluginOption(plugin$2, name) {
			var _this$plugins$get;
			return (_this$plugins$get = this.plugins.get(plugin$2)) == null ? void 0 : _this$plugins$get[name];
		}
	};
	function setTrailingComments(node, comments) {
		if (node.trailingComments === void 0) node.trailingComments = comments;
		else node.trailingComments.unshift(...comments);
	}
	function setLeadingComments(node, comments) {
		if (node.leadingComments === void 0) node.leadingComments = comments;
		else node.leadingComments.unshift(...comments);
	}
	function setInnerComments(node, comments) {
		if (node.innerComments === void 0) node.innerComments = comments;
		else node.innerComments.unshift(...comments);
	}
	function adjustInnerComments(node, elements, commentWS) {
		let lastElement = null;
		let i$6 = elements.length;
		while (lastElement === null && i$6 > 0) lastElement = elements[--i$6];
		if (lastElement === null || lastElement.start > commentWS.start) setInnerComments(node, commentWS.comments);
		else setTrailingComments(lastElement, commentWS.comments);
	}
	var CommentsParser = class extends BaseParser {
		addComment(comment$7) {
			if (this.filename) comment$7.loc.filename = this.filename;
			const { commentsLen } = this.state;
			if (this.comments.length !== commentsLen) this.comments.length = commentsLen;
			this.comments.push(comment$7);
			this.state.commentsLen++;
		}
		processComment(node) {
			const { commentStack } = this.state;
			const commentStackLength = commentStack.length;
			if (commentStackLength === 0) return;
			let i$6 = commentStackLength - 1;
			const lastCommentWS = commentStack[i$6];
			if (lastCommentWS.start === node.end) {
				lastCommentWS.leadingNode = node;
				i$6--;
			}
			const { start: nodeStart } = node;
			for (; i$6 >= 0; i$6--) {
				const commentWS = commentStack[i$6];
				const commentEnd = commentWS.end;
				if (commentEnd > nodeStart) {
					commentWS.containingNode = node;
					this.finalizeComment(commentWS);
					commentStack.splice(i$6, 1);
				} else {
					if (commentEnd === nodeStart) commentWS.trailingNode = node;
					break;
				}
			}
		}
		finalizeComment(commentWS) {
			const { comments } = commentWS;
			if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
				if (commentWS.leadingNode !== null) setTrailingComments(commentWS.leadingNode, comments);
				if (commentWS.trailingNode !== null) setLeadingComments(commentWS.trailingNode, comments);
			} else {
				const { containingNode: node, start: commentStart } = commentWS;
				if (this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) === 44) switch (node.type) {
					case "ObjectExpression":
					case "ObjectPattern":
					case "RecordExpression":
						adjustInnerComments(node, node.properties, commentWS);
						break;
					case "CallExpression":
					case "OptionalCallExpression":
						adjustInnerComments(node, node.arguments, commentWS);
						break;
					case "FunctionDeclaration":
					case "FunctionExpression":
					case "ArrowFunctionExpression":
					case "ObjectMethod":
					case "ClassMethod":
					case "ClassPrivateMethod":
						adjustInnerComments(node, node.params, commentWS);
						break;
					case "ArrayExpression":
					case "ArrayPattern":
					case "TupleExpression":
						adjustInnerComments(node, node.elements, commentWS);
						break;
					case "ExportNamedDeclaration":
					case "ImportDeclaration":
						adjustInnerComments(node, node.specifiers, commentWS);
						break;
					case "TSEnumDeclaration":
						adjustInnerComments(node, node.members, commentWS);
						break;
					case "TSEnumBody":
						adjustInnerComments(node, node.members, commentWS);
						break;
					default: setInnerComments(node, comments);
				}
				else setInnerComments(node, comments);
			}
		}
		finalizeRemainingComments() {
			const { commentStack } = this.state;
			for (let i$6 = commentStack.length - 1; i$6 >= 0; i$6--) this.finalizeComment(commentStack[i$6]);
			this.state.commentStack = [];
		}
		resetPreviousNodeTrailingComments(node) {
			const { commentStack } = this.state;
			const { length } = commentStack;
			if (length === 0) return;
			const commentWS = commentStack[length - 1];
			if (commentWS.leadingNode === node) commentWS.leadingNode = null;
		}
		resetPreviousIdentifierLeadingComments(node) {
			const { commentStack } = this.state;
			const { length } = commentStack;
			if (length === 0) return;
			if (commentStack[length - 1].trailingNode === node) commentStack[length - 1].trailingNode = null;
			else if (length >= 2 && commentStack[length - 2].trailingNode === node) commentStack[length - 2].trailingNode = null;
		}
		takeSurroundingComments(node, start, end) {
			const { commentStack } = this.state;
			const commentStackLength = commentStack.length;
			if (commentStackLength === 0) return;
			let i$6 = commentStackLength - 1;
			for (; i$6 >= 0; i$6--) {
				const commentWS = commentStack[i$6];
				const commentEnd = commentWS.end;
				const commentStart = commentWS.start;
				if (commentStart === end) commentWS.leadingNode = node;
				else if (commentEnd === start) commentWS.trailingNode = node;
				else if (commentEnd < start) break;
			}
		}
	};
	const lineBreak = /\r\n|[\r\n\u2028\u2029]/;
	const lineBreakG = new RegExp(lineBreak.source, "g");
	function isNewLine(code$1) {
		switch (code$1) {
			case 10:
			case 13:
			case 8232:
			case 8233: return true;
			default: return false;
		}
	}
	function hasNewLine(input, start, end) {
		for (let i$6 = start; i$6 < end; i$6++) if (isNewLine(input.charCodeAt(i$6))) return true;
		return false;
	}
	const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
	const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
	function isWhitespace(code$1) {
		switch (code$1) {
			case 9:
			case 11:
			case 12:
			case 32:
			case 160:
			case 5760:
			case 8192:
			case 8193:
			case 8194:
			case 8195:
			case 8196:
			case 8197:
			case 8198:
			case 8199:
			case 8200:
			case 8201:
			case 8202:
			case 8239:
			case 8287:
			case 12288:
			case 65279: return true;
			default: return false;
		}
	}
	var State = class State {
		constructor() {
			this.flags = 1024;
			this.startIndex = void 0;
			this.curLine = void 0;
			this.lineStart = void 0;
			this.startLoc = void 0;
			this.endLoc = void 0;
			this.errors = [];
			this.potentialArrowAt = -1;
			this.noArrowAt = [];
			this.noArrowParamsConversionAt = [];
			this.topicContext = {
				maxNumOfResolvableTopics: 0,
				maxTopicIndex: null
			};
			this.labels = [];
			this.commentsLen = 0;
			this.commentStack = [];
			this.pos = 0;
			this.type = 140;
			this.value = null;
			this.start = 0;
			this.end = 0;
			this.lastTokEndLoc = null;
			this.lastTokStartLoc = null;
			this.context = [types$6.brace];
			this.firstInvalidTemplateEscapePos = null;
			this.strictErrors = new Map();
			this.tokensLength = 0;
		}
		get strict() {
			return (this.flags & 1) > 0;
		}
		set strict(v$1) {
			if (v$1) this.flags |= 1;
			else this.flags &= -2;
		}
		init({ strictMode, sourceType, startIndex, startLine, startColumn }) {
			this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
			this.startIndex = startIndex;
			this.curLine = startLine;
			this.lineStart = -startColumn;
			this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
		}
		get maybeInArrowParameters() {
			return (this.flags & 2) > 0;
		}
		set maybeInArrowParameters(v$1) {
			if (v$1) this.flags |= 2;
			else this.flags &= -3;
		}
		get inType() {
			return (this.flags & 4) > 0;
		}
		set inType(v$1) {
			if (v$1) this.flags |= 4;
			else this.flags &= -5;
		}
		get noAnonFunctionType() {
			return (this.flags & 8) > 0;
		}
		set noAnonFunctionType(v$1) {
			if (v$1) this.flags |= 8;
			else this.flags &= -9;
		}
		get hasFlowComment() {
			return (this.flags & 16) > 0;
		}
		set hasFlowComment(v$1) {
			if (v$1) this.flags |= 16;
			else this.flags &= -17;
		}
		get isAmbientContext() {
			return (this.flags & 32) > 0;
		}
		set isAmbientContext(v$1) {
			if (v$1) this.flags |= 32;
			else this.flags &= -33;
		}
		get inAbstractClass() {
			return (this.flags & 64) > 0;
		}
		set inAbstractClass(v$1) {
			if (v$1) this.flags |= 64;
			else this.flags &= -65;
		}
		get inDisallowConditionalTypesContext() {
			return (this.flags & 128) > 0;
		}
		set inDisallowConditionalTypesContext(v$1) {
			if (v$1) this.flags |= 128;
			else this.flags &= -129;
		}
		get soloAwait() {
			return (this.flags & 256) > 0;
		}
		set soloAwait(v$1) {
			if (v$1) this.flags |= 256;
			else this.flags &= -257;
		}
		get inFSharpPipelineDirectBody() {
			return (this.flags & 512) > 0;
		}
		set inFSharpPipelineDirectBody(v$1) {
			if (v$1) this.flags |= 512;
			else this.flags &= -513;
		}
		get canStartJSXElement() {
			return (this.flags & 1024) > 0;
		}
		set canStartJSXElement(v$1) {
			if (v$1) this.flags |= 1024;
			else this.flags &= -1025;
		}
		get containsEsc() {
			return (this.flags & 2048) > 0;
		}
		set containsEsc(v$1) {
			if (v$1) this.flags |= 2048;
			else this.flags &= -2049;
		}
		get hasTopLevelAwait() {
			return (this.flags & 4096) > 0;
		}
		set hasTopLevelAwait(v$1) {
			if (v$1) this.flags |= 4096;
			else this.flags &= -4097;
		}
		curPosition() {
			return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
		}
		clone() {
			const state = new State();
			state.flags = this.flags;
			state.startIndex = this.startIndex;
			state.curLine = this.curLine;
			state.lineStart = this.lineStart;
			state.startLoc = this.startLoc;
			state.endLoc = this.endLoc;
			state.errors = this.errors.slice();
			state.potentialArrowAt = this.potentialArrowAt;
			state.noArrowAt = this.noArrowAt.slice();
			state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
			state.topicContext = this.topicContext;
			state.labels = this.labels.slice();
			state.commentsLen = this.commentsLen;
			state.commentStack = this.commentStack.slice();
			state.pos = this.pos;
			state.type = this.type;
			state.value = this.value;
			state.start = this.start;
			state.end = this.end;
			state.lastTokEndLoc = this.lastTokEndLoc;
			state.lastTokStartLoc = this.lastTokStartLoc;
			state.context = this.context.slice();
			state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
			state.strictErrors = this.strictErrors;
			state.tokensLength = this.tokensLength;
			return state;
		}
	};
	var _isDigit$1 = function isDigit(code$1) {
		return code$1 >= 48 && code$1 <= 57;
	};
	const forbiddenNumericSeparatorSiblings$1 = {
		decBinOct: new Set([
			46,
			66,
			69,
			79,
			95,
			98,
			101,
			111
		]),
		hex: new Set([
			46,
			88,
			95,
			120
		])
	};
	const isAllowedNumericSeparatorSibling$1 = {
		bin: (ch) => ch === 48 || ch === 49,
		oct: (ch) => ch >= 48 && ch <= 55,
		dec: (ch) => ch >= 48 && ch <= 57,
		hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
	};
	function readStringContents$1(type, input, pos, lineStart, curLine, errors$1) {
		const initialPos = pos;
		const initialLineStart = lineStart;
		const initialCurLine = curLine;
		let out = "";
		let firstInvalidLoc = null;
		let chunkStart = pos;
		const { length } = input;
		for (;;) {
			if (pos >= length) {
				errors$1.unterminated(initialPos, initialLineStart, initialCurLine);
				out += input.slice(chunkStart, pos);
				break;
			}
			const ch = input.charCodeAt(pos);
			if (isStringEnd$1(type, ch, input, pos)) {
				out += input.slice(chunkStart, pos);
				break;
			}
			if (ch === 92) {
				out += input.slice(chunkStart, pos);
				const res = readEscapedChar$1(input, pos, lineStart, curLine, type === "template", errors$1);
				if (res.ch === null && !firstInvalidLoc) firstInvalidLoc = {
					pos,
					lineStart,
					curLine
				};
				else out += res.ch;
				({pos, lineStart, curLine} = res);
				chunkStart = pos;
			} else if (ch === 8232 || ch === 8233) {
				++pos;
				++curLine;
				lineStart = pos;
			} else if (ch === 10 || ch === 13) if (type === "template") {
				out += input.slice(chunkStart, pos) + "\n";
				++pos;
				if (ch === 13 && input.charCodeAt(pos) === 10) ++pos;
				++curLine;
				chunkStart = lineStart = pos;
			} else errors$1.unterminated(initialPos, initialLineStart, initialCurLine);
			else ++pos;
		}
		return {
			pos,
			str: out,
			firstInvalidLoc,
			lineStart,
			curLine,
			containsInvalid: !!firstInvalidLoc
		};
	}
	function isStringEnd$1(type, ch, input, pos) {
		if (type === "template") return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
		return ch === (type === "double" ? 34 : 39);
	}
	function readEscapedChar$1(input, pos, lineStart, curLine, inTemplate, errors$1) {
		const throwOnInvalid = !inTemplate;
		pos++;
		const res = (ch$1) => ({
			pos,
			ch: ch$1,
			lineStart,
			curLine
		});
		const ch = input.charCodeAt(pos++);
		switch (ch) {
			case 110: return res("\n");
			case 114: return res("\r");
			case 120: {
				let code$1;
				({code: code$1, pos} = readHexChar$1(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors$1));
				return res(code$1 === null ? null : String.fromCharCode(code$1));
			}
			case 117: {
				let code$1;
				({code: code$1, pos} = readCodePoint$1(input, pos, lineStart, curLine, throwOnInvalid, errors$1));
				return res(code$1 === null ? null : String.fromCodePoint(code$1));
			}
			case 116: return res("	");
			case 98: return res("\b");
			case 118: return res("\v");
			case 102: return res("\f");
			case 13: if (input.charCodeAt(pos) === 10) ++pos;
			case 10:
				lineStart = pos;
				++curLine;
			case 8232:
			case 8233: return res("");
			case 56:
			case 57: if (inTemplate) return res(null);
			else errors$1.strictNumericEscape(pos - 1, lineStart, curLine);
			default:
				if (ch >= 48 && ch <= 55) {
					const startPos = pos - 1;
					const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
					let octalStr = match[0];
					let octal = parseInt(octalStr, 8);
					if (octal > 255) {
						octalStr = octalStr.slice(0, -1);
						octal = parseInt(octalStr, 8);
					}
					pos += octalStr.length - 1;
					const next = input.charCodeAt(pos);
					if (octalStr !== "0" || next === 56 || next === 57) if (inTemplate) return res(null);
					else errors$1.strictNumericEscape(startPos, lineStart, curLine);
					return res(String.fromCharCode(octal));
				}
				return res(String.fromCharCode(ch));
		}
	}
	function readHexChar$1(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors$1) {
		const initialPos = pos;
		let n$4;
		({n: n$4, pos} = readInt$1(input, pos, lineStart, curLine, 16, len, forceLen, false, errors$1, !throwOnInvalid));
		if (n$4 === null) if (throwOnInvalid) errors$1.invalidEscapeSequence(initialPos, lineStart, curLine);
		else pos = initialPos - 1;
		return {
			code: n$4,
			pos
		};
	}
	function readInt$1(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors$1, bailOnError) {
		const start = pos;
		const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings$1.hex : forbiddenNumericSeparatorSiblings$1.decBinOct;
		const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling$1.hex : radix === 10 ? isAllowedNumericSeparatorSibling$1.dec : radix === 8 ? isAllowedNumericSeparatorSibling$1.oct : isAllowedNumericSeparatorSibling$1.bin;
		let invalid = false;
		let total = 0;
		for (let i$6 = 0, e$2 = len == null ? Infinity : len; i$6 < e$2; ++i$6) {
			const code$1 = input.charCodeAt(pos);
			let val;
			if (code$1 === 95 && allowNumSeparator !== "bail") {
				const prev = input.charCodeAt(pos - 1);
				const next = input.charCodeAt(pos + 1);
				if (!allowNumSeparator) {
					if (bailOnError) return {
						n: null,
						pos
					};
					errors$1.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
				} else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
					if (bailOnError) return {
						n: null,
						pos
					};
					errors$1.unexpectedNumericSeparator(pos, lineStart, curLine);
				}
				++pos;
				continue;
			}
			if (code$1 >= 97) val = code$1 - 97 + 10;
			else if (code$1 >= 65) val = code$1 - 65 + 10;
			else if (_isDigit$1(code$1)) val = code$1 - 48;
			else val = Infinity;
			if (val >= radix) if (val <= 9 && bailOnError) return {
				n: null,
				pos
			};
			else if (val <= 9 && errors$1.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
			else if (forceLen) {
				val = 0;
				invalid = true;
			} else break;
			++pos;
			total = total * radix + val;
		}
		if (pos === start || len != null && pos - start !== len || invalid) return {
			n: null,
			pos
		};
		return {
			n: total,
			pos
		};
	}
	function readCodePoint$1(input, pos, lineStart, curLine, throwOnInvalid, errors$1) {
		const ch = input.charCodeAt(pos);
		let code$1;
		if (ch === 123) {
			++pos;
			({code: code$1, pos} = readHexChar$1(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors$1));
			++pos;
			if (code$1 !== null && code$1 > 1114111) if (throwOnInvalid) errors$1.invalidCodePoint(pos, lineStart, curLine);
			else return {
				code: null,
				pos
			};
		} else ({code: code$1, pos} = readHexChar$1(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors$1));
		return {
			code: code$1,
			pos
		};
	}
	function buildPosition(pos, lineStart, curLine) {
		return new Position(curLine, pos - lineStart, pos);
	}
	const VALID_REGEX_FLAGS = new Set([
		103,
		109,
		115,
		105,
		121,
		117,
		100,
		118
	]);
	var Token = class {
		constructor(state) {
			const startIndex = state.startIndex || 0;
			this.type = state.type;
			this.value = state.value;
			this.start = startIndex + state.start;
			this.end = startIndex + state.end;
			this.loc = new SourceLocation$1(state.startLoc, state.endLoc);
		}
	};
	var Tokenizer$1 = class extends CommentsParser {
		constructor(options, input) {
			super();
			this.isLookahead = void 0;
			this.tokens = [];
			this.errorHandlers_readInt = {
				invalidDigit: (pos, lineStart, curLine, radix) => {
					if (!(this.optionFlags & 2048)) return false;
					this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), { radix });
					return true;
				},
				numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
				unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
			};
			this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
				invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
				invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
			});
			this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
				strictNumericEscape: (pos, lineStart, curLine) => {
					this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
				},
				unterminated: (pos, lineStart, curLine) => {
					throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
				}
			});
			this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
				strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
				unterminated: (pos, lineStart, curLine) => {
					throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
				}
			});
			this.state = new State();
			this.state.init(options);
			this.input = input;
			this.length = input.length;
			this.comments = [];
			this.isLookahead = false;
		}
		pushToken(token$1) {
			this.tokens.length = this.state.tokensLength;
			this.tokens.push(token$1);
			++this.state.tokensLength;
		}
		next() {
			this.checkKeywordEscapes();
			if (this.optionFlags & 256) this.pushToken(new Token(this.state));
			this.state.lastTokEndLoc = this.state.endLoc;
			this.state.lastTokStartLoc = this.state.startLoc;
			this.nextToken();
		}
		eat(type) {
			if (this.match(type)) {
				this.next();
				return true;
			} else return false;
		}
		match(type) {
			return this.state.type === type;
		}
		createLookaheadState(state) {
			return {
				pos: state.pos,
				value: null,
				type: state.type,
				start: state.start,
				end: state.end,
				context: [this.curContext()],
				inType: state.inType,
				startLoc: state.startLoc,
				lastTokEndLoc: state.lastTokEndLoc,
				curLine: state.curLine,
				lineStart: state.lineStart,
				curPosition: state.curPosition
			};
		}
		lookahead() {
			const old$2 = this.state;
			this.state = this.createLookaheadState(old$2);
			this.isLookahead = true;
			this.nextToken();
			this.isLookahead = false;
			const curr = this.state;
			this.state = old$2;
			return curr;
		}
		nextTokenStart() {
			return this.nextTokenStartSince(this.state.pos);
		}
		nextTokenStartSince(pos) {
			skipWhiteSpace.lastIndex = pos;
			return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
		}
		lookaheadCharCode() {
			return this.input.charCodeAt(this.nextTokenStart());
		}
		nextTokenInLineStart() {
			return this.nextTokenInLineStartSince(this.state.pos);
		}
		nextTokenInLineStartSince(pos) {
			skipWhiteSpaceInLine.lastIndex = pos;
			return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
		}
		lookaheadInLineCharCode() {
			return this.input.charCodeAt(this.nextTokenInLineStart());
		}
		codePointAtPos(pos) {
			let cp = this.input.charCodeAt(pos);
			if ((cp & 64512) === 55296 && ++pos < this.input.length) {
				const trail = this.input.charCodeAt(pos);
				if ((trail & 64512) === 56320) cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
			}
			return cp;
		}
		setStrict(strict) {
			this.state.strict = strict;
			if (strict) {
				this.state.strictErrors.forEach(([toParseError, at$3]) => this.raise(toParseError, at$3));
				this.state.strictErrors.clear();
			}
		}
		curContext() {
			return this.state.context[this.state.context.length - 1];
		}
		nextToken() {
			this.skipSpace();
			this.state.start = this.state.pos;
			if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
			if (this.state.pos >= this.length) {
				this.finishToken(140);
				return;
			}
			this.getTokenFromCode(this.codePointAtPos(this.state.pos));
		}
		skipBlockComment(commentEnd) {
			let startLoc;
			if (!this.isLookahead) startLoc = this.state.curPosition();
			const start = this.state.pos;
			const end = this.input.indexOf(commentEnd, start + 2);
			if (end === -1) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
			this.state.pos = end + commentEnd.length;
			lineBreakG.lastIndex = start + 2;
			while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
				++this.state.curLine;
				this.state.lineStart = lineBreakG.lastIndex;
			}
			if (this.isLookahead) return;
			const comment$7 = {
				type: "CommentBlock",
				value: this.input.slice(start + 2, end),
				start: this.sourceToOffsetPos(start),
				end: this.sourceToOffsetPos(end + commentEnd.length),
				loc: new SourceLocation$1(startLoc, this.state.curPosition())
			};
			if (this.optionFlags & 256) this.pushToken(comment$7);
			return comment$7;
		}
		skipLineComment(startSkip) {
			const start = this.state.pos;
			let startLoc;
			if (!this.isLookahead) startLoc = this.state.curPosition();
			let ch = this.input.charCodeAt(this.state.pos += startSkip);
			if (this.state.pos < this.length) while (!isNewLine(ch) && ++this.state.pos < this.length) ch = this.input.charCodeAt(this.state.pos);
			if (this.isLookahead) return;
			const end = this.state.pos;
			const value = this.input.slice(start + startSkip, end);
			const comment$7 = {
				type: "CommentLine",
				value,
				start: this.sourceToOffsetPos(start),
				end: this.sourceToOffsetPos(end),
				loc: new SourceLocation$1(startLoc, this.state.curPosition())
			};
			if (this.optionFlags & 256) this.pushToken(comment$7);
			return comment$7;
		}
		skipSpace() {
			const spaceStart = this.state.pos;
			const comments = this.optionFlags & 4096 ? [] : null;
			loop: while (this.state.pos < this.length) {
				const ch = this.input.charCodeAt(this.state.pos);
				switch (ch) {
					case 32:
					case 160:
					case 9:
						++this.state.pos;
						break;
					case 13: if (this.input.charCodeAt(this.state.pos + 1) === 10) ++this.state.pos;
					case 10:
					case 8232:
					case 8233:
						++this.state.pos;
						++this.state.curLine;
						this.state.lineStart = this.state.pos;
						break;
					case 47:
						switch (this.input.charCodeAt(this.state.pos + 1)) {
							case 42: {
								const comment$7 = this.skipBlockComment("*/");
								if (comment$7 !== void 0) {
									this.addComment(comment$7);
									comments?.push(comment$7);
								}
								break;
							}
							case 47: {
								const comment$7 = this.skipLineComment(2);
								if (comment$7 !== void 0) {
									this.addComment(comment$7);
									comments?.push(comment$7);
								}
								break;
							}
							default: break loop;
						}
						break;
					default: if (isWhitespace(ch)) ++this.state.pos;
					else if (ch === 45 && !this.inModule && this.optionFlags & 8192) {
						const pos = this.state.pos;
						if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
							const comment$7 = this.skipLineComment(3);
							if (comment$7 !== void 0) {
								this.addComment(comment$7);
								comments?.push(comment$7);
							}
						} else break loop;
					} else if (ch === 60 && !this.inModule && this.optionFlags & 8192) {
						const pos = this.state.pos;
						if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
							const comment$7 = this.skipLineComment(4);
							if (comment$7 !== void 0) {
								this.addComment(comment$7);
								comments?.push(comment$7);
							}
						} else break loop;
					} else break loop;
				}
			}
			if ((comments == null ? void 0 : comments.length) > 0) {
				const end = this.state.pos;
				const commentWhitespace = {
					start: this.sourceToOffsetPos(spaceStart),
					end: this.sourceToOffsetPos(end),
					comments,
					leadingNode: null,
					trailingNode: null,
					containingNode: null
				};
				this.state.commentStack.push(commentWhitespace);
			}
		}
		finishToken(type, val) {
			this.state.end = this.state.pos;
			this.state.endLoc = this.state.curPosition();
			const prevType = this.state.type;
			this.state.type = type;
			this.state.value = val;
			if (!this.isLookahead) this.updateContext(prevType);
		}
		replaceToken(type) {
			this.state.type = type;
			this.updateContext();
		}
		readToken_numberSign() {
			if (this.state.pos === 0 && this.readToken_interpreter()) return;
			const nextPos = this.state.pos + 1;
			const next = this.codePointAtPos(nextPos);
			if (next >= 48 && next <= 57) throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
			if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
				this.expectPlugin("recordAndTuple");
				if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
				this.state.pos += 2;
				if (next === 123) this.finishToken(7);
				else this.finishToken(1);
			} else if (isIdentifierStart$1(next)) {
				++this.state.pos;
				this.finishToken(139, this.readWord1(next));
			} else if (next === 92) {
				++this.state.pos;
				this.finishToken(139, this.readWord1());
			} else this.finishOp(27, 1);
		}
		readToken_dot() {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next >= 48 && next <= 57) {
				this.readNumber(true);
				return;
			}
			if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
				this.state.pos += 3;
				this.finishToken(21);
			} else {
				++this.state.pos;
				this.finishToken(16);
			}
		}
		readToken_slash() {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === 61) this.finishOp(31, 2);
			else this.finishOp(56, 1);
		}
		readToken_interpreter() {
			if (this.state.pos !== 0 || this.length < 2) return false;
			let ch = this.input.charCodeAt(this.state.pos + 1);
			if (ch !== 33) return false;
			const start = this.state.pos;
			this.state.pos += 1;
			while (!isNewLine(ch) && ++this.state.pos < this.length) ch = this.input.charCodeAt(this.state.pos);
			const value = this.input.slice(start + 2, this.state.pos);
			this.finishToken(28, value);
			return true;
		}
		readToken_mult_modulo(code$1) {
			let type = code$1 === 42 ? 55 : 54;
			let width = 1;
			let next = this.input.charCodeAt(this.state.pos + 1);
			if (code$1 === 42 && next === 42) {
				width++;
				next = this.input.charCodeAt(this.state.pos + 2);
				type = 57;
			}
			if (next === 61 && !this.state.inType) {
				width++;
				type = code$1 === 37 ? 33 : 30;
			}
			this.finishOp(type, width);
		}
		readToken_pipe_amp(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === code$1) {
				if (this.input.charCodeAt(this.state.pos + 2) === 61) this.finishOp(30, 3);
				else this.finishOp(code$1 === 124 ? 41 : 42, 2);
				return;
			}
			if (code$1 === 124) {
				if (next === 62) {
					this.finishOp(39, 2);
					return;
				}
				if (this.hasPlugin("recordAndTuple") && next === 125) {
					if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
					this.state.pos += 2;
					this.finishToken(9);
					return;
				}
				if (this.hasPlugin("recordAndTuple") && next === 93) {
					if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
					this.state.pos += 2;
					this.finishToken(4);
					return;
				}
			}
			if (next === 61) {
				this.finishOp(30, 2);
				return;
			}
			this.finishOp(code$1 === 124 ? 43 : 45, 1);
		}
		readToken_caret() {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === 61 && !this.state.inType) this.finishOp(32, 2);
			else if (next === 94 && this.hasPlugin(["pipelineOperator", {
				proposal: "hack",
				topicToken: "^^"
			}])) {
				this.finishOp(37, 2);
				const lookaheadCh = this.input.codePointAt(this.state.pos);
				if (lookaheadCh === 94) this.unexpected();
			} else this.finishOp(44, 1);
		}
		readToken_atSign() {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === 64 && this.hasPlugin(["pipelineOperator", {
				proposal: "hack",
				topicToken: "@@"
			}])) this.finishOp(38, 2);
			else this.finishOp(26, 1);
		}
		readToken_plus_min(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === code$1) {
				this.finishOp(34, 2);
				return;
			}
			if (next === 61) this.finishOp(30, 2);
			else this.finishOp(53, 1);
		}
		readToken_lt() {
			const { pos } = this.state;
			const next = this.input.charCodeAt(pos + 1);
			if (next === 60) {
				if (this.input.charCodeAt(pos + 2) === 61) {
					this.finishOp(30, 3);
					return;
				}
				this.finishOp(51, 2);
				return;
			}
			if (next === 61) {
				this.finishOp(49, 2);
				return;
			}
			this.finishOp(47, 1);
		}
		readToken_gt() {
			const { pos } = this.state;
			const next = this.input.charCodeAt(pos + 1);
			if (next === 62) {
				const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
				if (this.input.charCodeAt(pos + size) === 61) {
					this.finishOp(30, size + 1);
					return;
				}
				this.finishOp(52, size);
				return;
			}
			if (next === 61) {
				this.finishOp(49, 2);
				return;
			}
			this.finishOp(48, 1);
		}
		readToken_eq_excl(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (next === 61) {
				this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
				return;
			}
			if (code$1 === 61 && next === 62) {
				this.state.pos += 2;
				this.finishToken(19);
				return;
			}
			this.finishOp(code$1 === 61 ? 29 : 35, 1);
		}
		readToken_question() {
			const next = this.input.charCodeAt(this.state.pos + 1);
			const next2 = this.input.charCodeAt(this.state.pos + 2);
			if (next === 63) if (next2 === 61) this.finishOp(30, 3);
			else this.finishOp(40, 2);
			else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
				this.state.pos += 2;
				this.finishToken(18);
			} else {
				++this.state.pos;
				this.finishToken(17);
			}
		}
		getTokenFromCode(code$1) {
			switch (code$1) {
				case 46:
					this.readToken_dot();
					return;
				case 40:
					++this.state.pos;
					this.finishToken(10);
					return;
				case 41:
					++this.state.pos;
					this.finishToken(11);
					return;
				case 59:
					++this.state.pos;
					this.finishToken(13);
					return;
				case 44:
					++this.state.pos;
					this.finishToken(12);
					return;
				case 91:
					if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
						if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
						this.state.pos += 2;
						this.finishToken(2);
					} else {
						++this.state.pos;
						this.finishToken(0);
					}
					return;
				case 93:
					++this.state.pos;
					this.finishToken(3);
					return;
				case 123:
					if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
						if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
						this.state.pos += 2;
						this.finishToken(6);
					} else {
						++this.state.pos;
						this.finishToken(5);
					}
					return;
				case 125:
					++this.state.pos;
					this.finishToken(8);
					return;
				case 58:
					if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) this.finishOp(15, 2);
					else {
						++this.state.pos;
						this.finishToken(14);
					}
					return;
				case 63:
					this.readToken_question();
					return;
				case 96:
					this.readTemplateToken();
					return;
				case 48: {
					const next = this.input.charCodeAt(this.state.pos + 1);
					if (next === 120 || next === 88) {
						this.readRadixNumber(16);
						return;
					}
					if (next === 111 || next === 79) {
						this.readRadixNumber(8);
						return;
					}
					if (next === 98 || next === 66) {
						this.readRadixNumber(2);
						return;
					}
				}
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
					this.readNumber(false);
					return;
				case 34:
				case 39:
					this.readString(code$1);
					return;
				case 47:
					this.readToken_slash();
					return;
				case 37:
				case 42:
					this.readToken_mult_modulo(code$1);
					return;
				case 124:
				case 38:
					this.readToken_pipe_amp(code$1);
					return;
				case 94:
					this.readToken_caret();
					return;
				case 43:
				case 45:
					this.readToken_plus_min(code$1);
					return;
				case 60:
					this.readToken_lt();
					return;
				case 62:
					this.readToken_gt();
					return;
				case 61:
				case 33:
					this.readToken_eq_excl(code$1);
					return;
				case 126:
					this.finishOp(36, 1);
					return;
				case 64:
					this.readToken_atSign();
					return;
				case 35:
					this.readToken_numberSign();
					return;
				case 92:
					this.readWord();
					return;
				default: if (isIdentifierStart$1(code$1)) {
					this.readWord(code$1);
					return;
				}
			}
			throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(code$1) });
		}
		finishOp(type, size) {
			const str$4 = this.input.slice(this.state.pos, this.state.pos + size);
			this.state.pos += size;
			this.finishToken(type, str$4);
		}
		readRegexp() {
			const startLoc = this.state.startLoc;
			const start = this.state.start + 1;
			let escaped, inClass;
			let { pos } = this.state;
			for (;; ++pos) {
				if (pos >= this.length) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
				const ch = this.input.charCodeAt(pos);
				if (isNewLine(ch)) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
				if (escaped) escaped = false;
				else {
					if (ch === 91) inClass = true;
					else if (ch === 93 && inClass) inClass = false;
					else if (ch === 47 && !inClass) break;
					escaped = ch === 92;
				}
			}
			const content = this.input.slice(start, pos);
			++pos;
			let mods = "";
			const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
			while (pos < this.length) {
				const cp = this.codePointAtPos(pos);
				const char = String.fromCharCode(cp);
				if (VALID_REGEX_FLAGS.has(cp)) {
					if (cp === 118) {
						if (mods.includes("u")) this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
					} else if (cp === 117) {
						if (mods.includes("v")) this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
					}
					if (mods.includes(char)) this.raise(Errors.DuplicateRegExpFlags, nextPos());
				} else if (isIdentifierChar$1(cp) || cp === 92) this.raise(Errors.MalformedRegExpFlags, nextPos());
				else break;
				++pos;
				mods += char;
			}
			this.state.pos = pos;
			this.finishToken(138, {
				pattern: content,
				flags: mods
			});
		}
		readInt(radix, len, forceLen = false, allowNumSeparator = true) {
			const { n: n$4, pos } = readInt$1(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
			this.state.pos = pos;
			return n$4;
		}
		readRadixNumber(radix) {
			const start = this.state.pos;
			const startLoc = this.state.curPosition();
			let isBigInt$1 = false;
			this.state.pos += 2;
			const val = this.readInt(radix);
			if (val == null) this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), { radix });
			const next = this.input.charCodeAt(this.state.pos);
			if (next === 110) {
				++this.state.pos;
				isBigInt$1 = true;
			} else if (next === 109) throw this.raise(Errors.InvalidDecimal, startLoc);
			if (isIdentifierStart$1(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
			if (isBigInt$1) {
				const str$4 = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
				this.finishToken(136, str$4);
				return;
			}
			this.finishToken(135, val);
		}
		readNumber(startsWithDot) {
			const start = this.state.pos;
			const startLoc = this.state.curPosition();
			let isFloat = false;
			let isBigInt$1 = false;
			let hasExponent = false;
			let isOctal = false;
			if (!startsWithDot && this.readInt(10) === null) this.raise(Errors.InvalidNumber, this.state.curPosition());
			const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
			if (hasLeadingZero) {
				const integer = this.input.slice(start, this.state.pos);
				this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
				if (!this.state.strict) {
					const underscorePos = integer.indexOf("_");
					if (underscorePos > 0) this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
				}
				isOctal = hasLeadingZero && !/[89]/.test(integer);
			}
			let next = this.input.charCodeAt(this.state.pos);
			if (next === 46 && !isOctal) {
				++this.state.pos;
				this.readInt(10);
				isFloat = true;
				next = this.input.charCodeAt(this.state.pos);
			}
			if ((next === 69 || next === 101) && !isOctal) {
				next = this.input.charCodeAt(++this.state.pos);
				if (next === 43 || next === 45) ++this.state.pos;
				if (this.readInt(10) === null) this.raise(Errors.InvalidOrMissingExponent, startLoc);
				isFloat = true;
				hasExponent = true;
				next = this.input.charCodeAt(this.state.pos);
			}
			if (next === 110) {
				if (isFloat || hasLeadingZero) this.raise(Errors.InvalidBigIntLiteral, startLoc);
				++this.state.pos;
				isBigInt$1 = true;
			}
			if (next === 109) {
				this.expectPlugin("decimal", this.state.curPosition());
				if (hasExponent || hasLeadingZero) this.raise(Errors.InvalidDecimal, startLoc);
				++this.state.pos;
				var isDecimal = true;
			}
			if (isIdentifierStart$1(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
			const str$4 = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
			if (isBigInt$1) {
				this.finishToken(136, str$4);
				return;
			}
			if (isDecimal) {
				this.finishToken(137, str$4);
				return;
			}
			const val = isOctal ? parseInt(str$4, 8) : parseFloat(str$4);
			this.finishToken(135, val);
		}
		readCodePoint(throwOnInvalid) {
			const { code: code$1, pos } = readCodePoint$1(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
			this.state.pos = pos;
			return code$1;
		}
		readString(quote) {
			const { str: str$4, pos, curLine, lineStart } = readStringContents$1(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
			this.state.pos = pos + 1;
			this.state.lineStart = lineStart;
			this.state.curLine = curLine;
			this.finishToken(134, str$4);
		}
		readTemplateContinuation() {
			if (!this.match(8)) this.unexpected(null, 8);
			this.state.pos--;
			this.readTemplateToken();
		}
		readTemplateToken() {
			const opening = this.input[this.state.pos];
			const { str: str$4, firstInvalidLoc, pos, curLine, lineStart } = readStringContents$1("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
			this.state.pos = pos + 1;
			this.state.lineStart = lineStart;
			this.state.curLine = curLine;
			if (firstInvalidLoc) this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos));
			if (this.input.codePointAt(pos) === 96) this.finishToken(24, firstInvalidLoc ? null : opening + str$4 + "`");
			else {
				this.state.pos++;
				this.finishToken(25, firstInvalidLoc ? null : opening + str$4 + "${");
			}
		}
		recordStrictModeErrors(toParseError, at$3) {
			const index$1 = at$3.index;
			if (this.state.strict && !this.state.strictErrors.has(index$1)) this.raise(toParseError, at$3);
			else this.state.strictErrors.set(index$1, [toParseError, at$3]);
		}
		readWord1(firstCode) {
			this.state.containsEsc = false;
			let word$3 = "";
			const start = this.state.pos;
			let chunkStart = this.state.pos;
			if (firstCode !== void 0) this.state.pos += firstCode <= 65535 ? 1 : 2;
			while (this.state.pos < this.length) {
				const ch = this.codePointAtPos(this.state.pos);
				if (isIdentifierChar$1(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
				else if (ch === 92) {
					this.state.containsEsc = true;
					word$3 += this.input.slice(chunkStart, this.state.pos);
					const escStart = this.state.curPosition();
					const identifierCheck = this.state.pos === start ? isIdentifierStart$1 : isIdentifierChar$1;
					if (this.input.charCodeAt(++this.state.pos) !== 117) {
						this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
						chunkStart = this.state.pos - 1;
						continue;
					}
					++this.state.pos;
					const esc = this.readCodePoint(true);
					if (esc !== null) {
						if (!identifierCheck(esc)) this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
						word$3 += String.fromCodePoint(esc);
					}
					chunkStart = this.state.pos;
				} else break;
			}
			return word$3 + this.input.slice(chunkStart, this.state.pos);
		}
		readWord(firstCode) {
			const word$3 = this.readWord1(firstCode);
			const type = keywords$1.get(word$3);
			if (type !== void 0) this.finishToken(type, tokenLabelName(type));
			else this.finishToken(132, word$3);
		}
		checkKeywordEscapes() {
			const { type } = this.state;
			if (tokenIsKeyword(type) && this.state.containsEsc) this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: tokenLabelName(type) });
		}
		raise(toParseError, at$3, details = {}) {
			const loc = at$3 instanceof Position ? at$3 : at$3.loc.start;
			const error = toParseError(loc, details);
			if (!(this.optionFlags & 2048)) throw error;
			if (!this.isLookahead) this.state.errors.push(error);
			return error;
		}
		raiseOverwrite(toParseError, at$3, details = {}) {
			const loc = at$3 instanceof Position ? at$3 : at$3.loc.start;
			const pos = loc.index;
			const errors$1 = this.state.errors;
			for (let i$6 = errors$1.length - 1; i$6 >= 0; i$6--) {
				const error = errors$1[i$6];
				if (error.loc.index === pos) return errors$1[i$6] = toParseError(loc, details);
				if (error.loc.index < pos) break;
			}
			return this.raise(toParseError, at$3, details);
		}
		updateContext(prevType) {}
		unexpected(loc, type) {
			throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, { expected: type ? tokenLabelName(type) : null });
		}
		expectPlugin(pluginName, loc) {
			if (this.hasPlugin(pluginName)) return true;
			throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, { missingPlugin: [pluginName] });
		}
		expectOnePlugin(pluginNames) {
			if (!pluginNames.some((name) => this.hasPlugin(name))) throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: pluginNames });
		}
		errorBuilder(error) {
			return (pos, lineStart, curLine) => {
				this.raise(error, buildPosition(pos, lineStart, curLine));
			};
		}
	};
	var ClassScope = class {
		constructor() {
			this.privateNames = new Set();
			this.loneAccessors = new Map();
			this.undefinedPrivateNames = new Map();
		}
	};
	var ClassScopeHandler = class {
		constructor(parser$5) {
			this.parser = void 0;
			this.stack = [];
			this.undefinedPrivateNames = new Map();
			this.parser = parser$5;
		}
		current() {
			return this.stack[this.stack.length - 1];
		}
		enter() {
			this.stack.push(new ClassScope());
		}
		exit() {
			const oldClassScope = this.stack.pop();
			const current = this.current();
			for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) if (current) {
				if (!current.undefinedPrivateNames.has(name)) current.undefinedPrivateNames.set(name, loc);
			} else this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
		}
		declarePrivateName(name, elementType, loc) {
			const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
			let redefined = privateNames.has(name);
			if (elementType & 3) {
				const accessor = redefined && loneAccessors.get(name);
				if (accessor) {
					const oldStatic = accessor & 4;
					const newStatic = elementType & 4;
					const oldKind = accessor & 3;
					const newKind = elementType & 3;
					redefined = oldKind === newKind || oldStatic !== newStatic;
					if (!redefined) loneAccessors.delete(name);
				} else if (!redefined) loneAccessors.set(name, elementType);
			}
			if (redefined) this.parser.raise(Errors.PrivateNameRedeclaration, loc, { identifierName: name });
			privateNames.add(name);
			undefinedPrivateNames.delete(name);
		}
		usePrivateName(name, loc) {
			let classScope;
			for (classScope of this.stack) if (classScope.privateNames.has(name)) return;
			if (classScope) classScope.undefinedPrivateNames.set(name, loc);
			else this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
		}
	};
	var ExpressionScope = class {
		constructor(type = 0) {
			this.type = type;
		}
		canBeArrowParameterDeclaration() {
			return this.type === 2 || this.type === 1;
		}
		isCertainlyParameterDeclaration() {
			return this.type === 3;
		}
	};
	var ArrowHeadParsingScope = class extends ExpressionScope {
		constructor(type) {
			super(type);
			this.declarationErrors = new Map();
		}
		recordDeclarationError(ParsingErrorClass, at$3) {
			const index$1 = at$3.index;
			this.declarationErrors.set(index$1, [ParsingErrorClass, at$3]);
		}
		clearDeclarationError(index$1) {
			this.declarationErrors.delete(index$1);
		}
		iterateErrors(iterator) {
			this.declarationErrors.forEach(iterator);
		}
	};
	var ExpressionScopeHandler = class {
		constructor(parser$5) {
			this.parser = void 0;
			this.stack = [new ExpressionScope()];
			this.parser = parser$5;
		}
		enter(scope$1) {
			this.stack.push(scope$1);
		}
		exit() {
			this.stack.pop();
		}
		recordParameterInitializerError(toParseError, node) {
			const origin = node.loc.start;
			const { stack } = this;
			let i$6 = stack.length - 1;
			let scope$1 = stack[i$6];
			while (!scope$1.isCertainlyParameterDeclaration()) {
				if (scope$1.canBeArrowParameterDeclaration()) scope$1.recordDeclarationError(toParseError, origin);
				else return;
				scope$1 = stack[--i$6];
			}
			this.parser.raise(toParseError, origin);
		}
		recordArrowParameterBindingError(error, node) {
			const { stack } = this;
			const scope$1 = stack[stack.length - 1];
			const origin = node.loc.start;
			if (scope$1.isCertainlyParameterDeclaration()) this.parser.raise(error, origin);
			else if (scope$1.canBeArrowParameterDeclaration()) scope$1.recordDeclarationError(error, origin);
			else return;
		}
		recordAsyncArrowParametersError(at$3) {
			const { stack } = this;
			let i$6 = stack.length - 1;
			let scope$1 = stack[i$6];
			while (scope$1.canBeArrowParameterDeclaration()) {
				if (scope$1.type === 2) scope$1.recordDeclarationError(Errors.AwaitBindingIdentifier, at$3);
				scope$1 = stack[--i$6];
			}
		}
		validateAsPattern() {
			const { stack } = this;
			const currentScope = stack[stack.length - 1];
			if (!currentScope.canBeArrowParameterDeclaration()) return;
			currentScope.iterateErrors(([toParseError, loc]) => {
				this.parser.raise(toParseError, loc);
				let i$6 = stack.length - 2;
				let scope$1 = stack[i$6];
				while (scope$1.canBeArrowParameterDeclaration()) {
					scope$1.clearDeclarationError(loc.index);
					scope$1 = stack[--i$6];
				}
			});
		}
	};
	function newParameterDeclarationScope() {
		return new ExpressionScope(3);
	}
	function newArrowHeadScope() {
		return new ArrowHeadParsingScope(1);
	}
	function newAsyncArrowScope() {
		return new ArrowHeadParsingScope(2);
	}
	function newExpressionScope() {
		return new ExpressionScope();
	}
	var ProductionParameterHandler = class {
		constructor() {
			this.stacks = [];
		}
		enter(flags) {
			this.stacks.push(flags);
		}
		exit() {
			this.stacks.pop();
		}
		currentFlags() {
			return this.stacks[this.stacks.length - 1];
		}
		get hasAwait() {
			return (this.currentFlags() & 2) > 0;
		}
		get hasYield() {
			return (this.currentFlags() & 1) > 0;
		}
		get hasReturn() {
			return (this.currentFlags() & 4) > 0;
		}
		get hasIn() {
			return (this.currentFlags() & 8) > 0;
		}
	};
	function functionFlags(isAsync, isGenerator) {
		return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
	}
	var UtilParser = class extends Tokenizer$1 {
		addExtra(node, key, value, enumerable = true) {
			if (!node) return;
			let { extra } = node;
			if (extra == null) {
				extra = {};
				node.extra = extra;
			}
			if (enumerable) extra[key] = value;
			else Object.defineProperty(extra, key, {
				enumerable,
				value
			});
		}
		isContextual(token$1) {
			return this.state.type === token$1 && !this.state.containsEsc;
		}
		isUnparsedContextual(nameStart, name) {
			const nameEnd = nameStart + name.length;
			if (this.input.slice(nameStart, nameEnd) === name) {
				const nextCh = this.input.charCodeAt(nameEnd);
				return !(isIdentifierChar$1(nextCh) || (nextCh & 64512) === 55296);
			}
			return false;
		}
		isLookaheadContextual(name) {
			const next = this.nextTokenStart();
			return this.isUnparsedContextual(next, name);
		}
		eatContextual(token$1) {
			if (this.isContextual(token$1)) {
				this.next();
				return true;
			}
			return false;
		}
		expectContextual(token$1, toParseError) {
			if (!this.eatContextual(token$1)) {
				if (toParseError != null) throw this.raise(toParseError, this.state.startLoc);
				this.unexpected(null, token$1);
			}
		}
		canInsertSemicolon() {
			return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
		}
		hasPrecedingLineBreak() {
			return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
		}
		hasFollowingLineBreak() {
			return hasNewLine(this.input, this.state.end, this.nextTokenStart());
		}
		isLineTerminator() {
			return this.eat(13) || this.canInsertSemicolon();
		}
		semicolon(allowAsi = true) {
			if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
			this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
		}
		expect(type, loc) {
			if (!this.eat(type)) this.unexpected(loc, type);
		}
		tryParse(fn, oldState = this.state.clone()) {
			const abortSignal = { node: null };
			try {
				const node = fn((node$1 = null) => {
					abortSignal.node = node$1;
					throw abortSignal;
				});
				if (this.state.errors.length > oldState.errors.length) {
					const failState = this.state;
					this.state = oldState;
					this.state.tokensLength = failState.tokensLength;
					return {
						node,
						error: failState.errors[oldState.errors.length],
						thrown: false,
						aborted: false,
						failState
					};
				}
				return {
					node,
					error: null,
					thrown: false,
					aborted: false,
					failState: null
				};
			} catch (error) {
				const failState = this.state;
				this.state = oldState;
				if (error instanceof SyntaxError) return {
					node: null,
					error,
					thrown: true,
					aborted: false,
					failState
				};
				if (error === abortSignal) return {
					node: abortSignal.node,
					error: null,
					thrown: false,
					aborted: true,
					failState
				};
				throw error;
			}
		}
		checkExpressionErrors(refExpressionErrors, andThrow) {
			if (!refExpressionErrors) return false;
			const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
			const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
			if (!andThrow) return hasErrors;
			if (shorthandAssignLoc != null) this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
			if (doubleProtoLoc != null) this.raise(Errors.DuplicateProto, doubleProtoLoc);
			if (privateKeyLoc != null) this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
			if (optionalParametersLoc != null) this.unexpected(optionalParametersLoc);
		}
		isLiteralPropertyName() {
			return tokenIsLiteralPropertyName(this.state.type);
		}
		isPrivateName(node) {
			return node.type === "PrivateName";
		}
		getPrivateNameSV(node) {
			return node.id.name;
		}
		hasPropertyAsPrivateName(node) {
			return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
		}
		isObjectProperty(node) {
			return node.type === "ObjectProperty";
		}
		isObjectMethod(node) {
			return node.type === "ObjectMethod";
		}
		initializeScopes(inModule = this.options.sourceType === "module") {
			const oldLabels = this.state.labels;
			this.state.labels = [];
			const oldExportedIdentifiers = this.exportedIdentifiers;
			this.exportedIdentifiers = new Set();
			const oldInModule = this.inModule;
			this.inModule = inModule;
			const oldScope = this.scope;
			const ScopeHandler$1 = this.getScopeHandler();
			this.scope = new ScopeHandler$1(this, inModule);
			const oldProdParam = this.prodParam;
			this.prodParam = new ProductionParameterHandler();
			const oldClassScope = this.classScope;
			this.classScope = new ClassScopeHandler(this);
			const oldExpressionScope = this.expressionScope;
			this.expressionScope = new ExpressionScopeHandler(this);
			return () => {
				this.state.labels = oldLabels;
				this.exportedIdentifiers = oldExportedIdentifiers;
				this.inModule = oldInModule;
				this.scope = oldScope;
				this.prodParam = oldProdParam;
				this.classScope = oldClassScope;
				this.expressionScope = oldExpressionScope;
			};
		}
		enterInitialScopes() {
			let paramFlags = 0;
			if (this.inModule) paramFlags |= 2;
			if (this.optionFlags & 32) paramFlags |= 1;
			this.scope.enter(1);
			this.prodParam.enter(paramFlags);
		}
		checkDestructuringPrivate(refExpressionErrors) {
			const { privateKeyLoc } = refExpressionErrors;
			if (privateKeyLoc !== null) this.expectPlugin("destructuringPrivate", privateKeyLoc);
		}
	};
	var ExpressionErrors = class {
		constructor() {
			this.shorthandAssignLoc = null;
			this.doubleProtoLoc = null;
			this.privateKeyLoc = null;
			this.optionalParametersLoc = null;
		}
	};
	var Node$6 = class {
		constructor(parser$5, pos, loc) {
			this.type = "";
			this.start = pos;
			this.end = 0;
			this.loc = new SourceLocation$1(loc);
			if ((parser$5 == null ? void 0 : parser$5.optionFlags) & 128) this.range = [pos, 0];
			if (parser$5 != null && parser$5.filename) this.loc.filename = parser$5.filename;
		}
	};
	const NodePrototype = Node$6.prototype;
	NodePrototype.__clone = function() {
		const newNode = new Node$6(void 0, this.start, this.loc.start);
		const keys$1 = Object.keys(this);
		for (let i$6 = 0, length = keys$1.length; i$6 < length; i$6++) {
			const key = keys$1[i$6];
			if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") newNode[key] = this[key];
		}
		return newNode;
	};
	function clonePlaceholder(node) {
		return cloneIdentifier(node);
	}
	function cloneIdentifier(node) {
		const { type, start, end, loc, range: range$2, extra, name } = node;
		const cloned = Object.create(NodePrototype);
		cloned.type = type;
		cloned.start = start;
		cloned.end = end;
		cloned.loc = loc;
		cloned.range = range$2;
		cloned.extra = extra;
		cloned.name = name;
		if (type === "Placeholder") cloned.expectedNode = node.expectedNode;
		return cloned;
	}
	function cloneStringLiteral(node) {
		const { type, start, end, loc, range: range$2, extra } = node;
		if (type === "Placeholder") return clonePlaceholder(node);
		const cloned = Object.create(NodePrototype);
		cloned.type = type;
		cloned.start = start;
		cloned.end = end;
		cloned.loc = loc;
		cloned.range = range$2;
		if (node.raw !== void 0) cloned.raw = node.raw;
		else cloned.extra = extra;
		cloned.value = node.value;
		return cloned;
	}
	var NodeUtils = class extends UtilParser {
		startNode() {
			const loc = this.state.startLoc;
			return new Node$6(this, loc.index, loc);
		}
		startNodeAt(loc) {
			return new Node$6(this, loc.index, loc);
		}
		startNodeAtNode(type) {
			return this.startNodeAt(type.loc.start);
		}
		finishNode(node, type) {
			return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
		}
		finishNodeAt(node, type, endLoc) {
			node.type = type;
			node.end = endLoc.index;
			node.loc.end = endLoc;
			if (this.optionFlags & 128) node.range[1] = endLoc.index;
			if (this.optionFlags & 4096) this.processComment(node);
			return node;
		}
		resetStartLocation(node, startLoc) {
			node.start = startLoc.index;
			node.loc.start = startLoc;
			if (this.optionFlags & 128) node.range[0] = startLoc.index;
		}
		resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
			node.end = endLoc.index;
			node.loc.end = endLoc;
			if (this.optionFlags & 128) node.range[1] = endLoc.index;
		}
		resetStartLocationFromNode(node, locationNode) {
			this.resetStartLocation(node, locationNode.loc.start);
		}
	};
	const reservedTypes = new Set([
		"_",
		"any",
		"bool",
		"boolean",
		"empty",
		"extends",
		"false",
		"interface",
		"mixed",
		"null",
		"number",
		"static",
		"string",
		"true",
		"typeof",
		"void"
	]);
	const FlowErrors = ParseErrorEnum`flow`({
		AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
		AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
		AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,
		DeclareClassElement: "The `declare` modifier can only appear on class fields.",
		DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
		DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
		EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
		EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
		EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
		EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
		EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
		EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
		EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
		EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
		EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
		EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
		EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
		GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
		ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
		ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
		InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
		InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
		InexactVariance: "Explicit inexact syntax cannot have variance.",
		InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
		MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
		NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
		NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
		PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }),
		SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
		SpreadVariance: "Spread properties cannot have variance.",
		ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
		ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
		ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
		ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
		ThisParamNoDefault: "The `this` parameter may not have a default value.",
		TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
		TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
		UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
		UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,
		UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
		UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
		UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
		UnexpectedSubtractionOperand: "Unexpected token, expected \"number\" or \"bigint\".",
		UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
		UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
		UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
		UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
		UnterminatedFlowComment: "Unterminated flow-comment."
	});
	function isEsModuleType(bodyElement) {
		return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
	}
	function hasTypeImportKind(node) {
		return node.importKind === "type" || node.importKind === "typeof";
	}
	const exportSuggestions = {
		const: "declare export var",
		let: "declare export var",
		type: "export type",
		interface: "export interface"
	};
	function partition(list$4, test) {
		const list1 = [];
		const list2 = [];
		for (let i$6 = 0; i$6 < list$4.length; i$6++) (test(list$4[i$6], i$6, list$4) ? list1 : list2).push(list$4[i$6]);
		return [list1, list2];
	}
	const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
	var flow = (superClass) => class FlowParserMixin extends superClass {
		constructor(...args) {
			super(...args);
			this.flowPragma = void 0;
		}
		getScopeHandler() {
			return FlowScopeHandler;
		}
		shouldParseTypes() {
			return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
		}
		finishToken(type, val) {
			if (type !== 134 && type !== 13 && type !== 28) {
				if (this.flowPragma === void 0) this.flowPragma = null;
			}
			super.finishToken(type, val);
		}
		addComment(comment$7) {
			if (this.flowPragma === void 0) {
				const matches = FLOW_PRAGMA_REGEX.exec(comment$7.value);
				if (!matches);
				else if (matches[1] === "flow") this.flowPragma = "flow";
				else if (matches[1] === "noflow") this.flowPragma = "noflow";
				else throw new Error("Unexpected flow pragma");
			}
			super.addComment(comment$7);
		}
		flowParseTypeInitialiser(tok) {
			const oldInType = this.state.inType;
			this.state.inType = true;
			this.expect(tok || 14);
			const type = this.flowParseType();
			this.state.inType = oldInType;
			return type;
		}
		flowParsePredicate() {
			const node = this.startNode();
			const moduloLoc = this.state.startLoc;
			this.next();
			this.expectContextual(110);
			if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
			if (this.eat(10)) {
				node.value = super.parseExpression();
				this.expect(11);
				return this.finishNode(node, "DeclaredPredicate");
			} else return this.finishNode(node, "InferredPredicate");
		}
		flowParseTypeAndPredicateInitialiser() {
			const oldInType = this.state.inType;
			this.state.inType = true;
			this.expect(14);
			let type = null;
			let predicate = null;
			if (this.match(54)) {
				this.state.inType = oldInType;
				predicate = this.flowParsePredicate();
			} else {
				type = this.flowParseType();
				this.state.inType = oldInType;
				if (this.match(54)) predicate = this.flowParsePredicate();
			}
			return [type, predicate];
		}
		flowParseDeclareClass(node) {
			this.next();
			this.flowParseInterfaceish(node, true);
			return this.finishNode(node, "DeclareClass");
		}
		flowParseDeclareFunction(node) {
			this.next();
			const id$4 = node.id = this.parseIdentifier();
			const typeNode = this.startNode();
			const typeContainer = this.startNode();
			if (this.match(47)) typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
			else typeNode.typeParameters = null;
			this.expect(10);
			const tmp = this.flowParseFunctionTypeParams();
			typeNode.params = tmp.params;
			typeNode.rest = tmp.rest;
			typeNode.this = tmp._this;
			this.expect(11);
			[typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
			typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
			id$4.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
			this.resetEndLocation(id$4);
			this.semicolon();
			this.scope.declareName(node.id.name, 2048, node.id.loc.start);
			return this.finishNode(node, "DeclareFunction");
		}
		flowParseDeclare(node, insideModule) {
			if (this.match(80)) return this.flowParseDeclareClass(node);
			else if (this.match(68)) return this.flowParseDeclareFunction(node);
			else if (this.match(74)) return this.flowParseDeclareVariable(node);
			else if (this.eatContextual(127)) if (this.match(16)) return this.flowParseDeclareModuleExports(node);
			else {
				if (insideModule) this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
				return this.flowParseDeclareModule(node);
			}
			else if (this.isContextual(130)) return this.flowParseDeclareTypeAlias(node);
			else if (this.isContextual(131)) return this.flowParseDeclareOpaqueType(node);
			else if (this.isContextual(129)) return this.flowParseDeclareInterface(node);
			else if (this.match(82)) return this.flowParseDeclareExportDeclaration(node, insideModule);
			else this.unexpected();
		}
		flowParseDeclareVariable(node) {
			this.next();
			node.id = this.flowParseTypeAnnotatableIdentifier(true);
			this.scope.declareName(node.id.name, 5, node.id.loc.start);
			this.semicolon();
			return this.finishNode(node, "DeclareVariable");
		}
		flowParseDeclareModule(node) {
			this.scope.enter(0);
			if (this.match(134)) node.id = super.parseExprAtom();
			else node.id = this.parseIdentifier();
			const bodyNode = node.body = this.startNode();
			const body = bodyNode.body = [];
			this.expect(5);
			while (!this.match(8)) {
				let bodyNode$1 = this.startNode();
				if (this.match(83)) {
					this.next();
					if (!this.isContextual(130) && !this.match(87)) this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
					super.parseImport(bodyNode$1);
				} else {
					this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
					bodyNode$1 = this.flowParseDeclare(bodyNode$1, true);
				}
				body.push(bodyNode$1);
			}
			this.scope.exit();
			this.expect(8);
			this.finishNode(bodyNode, "BlockStatement");
			let kind = null;
			let hasModuleExport = false;
			body.forEach((bodyElement) => {
				if (isEsModuleType(bodyElement)) {
					if (kind === "CommonJS") this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
					kind = "ES";
				} else if (bodyElement.type === "DeclareModuleExports") {
					if (hasModuleExport) this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
					if (kind === "ES") this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
					kind = "CommonJS";
					hasModuleExport = true;
				}
			});
			node.kind = kind || "CommonJS";
			return this.finishNode(node, "DeclareModule");
		}
		flowParseDeclareExportDeclaration(node, insideModule) {
			this.expect(82);
			if (this.eat(65)) {
				if (this.match(68) || this.match(80)) node.declaration = this.flowParseDeclare(this.startNode());
				else {
					node.declaration = this.flowParseType();
					this.semicolon();
				}
				node.default = true;
				return this.finishNode(node, "DeclareExportDeclaration");
			} else {
				if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
					const label = this.state.value;
					throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
						unsupportedExportKind: label,
						suggestion: exportSuggestions[label]
					});
				}
				if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
					node.declaration = this.flowParseDeclare(this.startNode());
					node.default = false;
					return this.finishNode(node, "DeclareExportDeclaration");
				} else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
					node = this.parseExport(node, null);
					if (node.type === "ExportNamedDeclaration") {
						node.type = "ExportDeclaration";
						node.default = false;
						delete node.exportKind;
					}
					node.type = "Declare" + node.type;
					return node;
				}
			}
			this.unexpected();
		}
		flowParseDeclareModuleExports(node) {
			this.next();
			this.expectContextual(111);
			node.typeAnnotation = this.flowParseTypeAnnotation();
			this.semicolon();
			return this.finishNode(node, "DeclareModuleExports");
		}
		flowParseDeclareTypeAlias(node) {
			this.next();
			const finished = this.flowParseTypeAlias(node);
			finished.type = "DeclareTypeAlias";
			return finished;
		}
		flowParseDeclareOpaqueType(node) {
			this.next();
			const finished = this.flowParseOpaqueType(node, true);
			finished.type = "DeclareOpaqueType";
			return finished;
		}
		flowParseDeclareInterface(node) {
			this.next();
			this.flowParseInterfaceish(node, false);
			return this.finishNode(node, "DeclareInterface");
		}
		flowParseInterfaceish(node, isClass$3) {
			node.id = this.flowParseRestrictedIdentifier(!isClass$3, true);
			this.scope.declareName(node.id.name, isClass$3 ? 17 : 8201, node.id.loc.start);
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
			else node.typeParameters = null;
			node.extends = [];
			if (this.eat(81)) do
				node.extends.push(this.flowParseInterfaceExtends());
			while (!isClass$3 && this.eat(12));
			if (isClass$3) {
				node.implements = [];
				node.mixins = [];
				if (this.eatContextual(117)) do
					node.mixins.push(this.flowParseInterfaceExtends());
				while (this.eat(12));
				if (this.eatContextual(113)) do
					node.implements.push(this.flowParseInterfaceExtends());
				while (this.eat(12));
			}
			node.body = this.flowParseObjectType({
				allowStatic: isClass$3,
				allowExact: false,
				allowSpread: false,
				allowProto: isClass$3,
				allowInexact: false
			});
		}
		flowParseInterfaceExtends() {
			const node = this.startNode();
			node.id = this.flowParseQualifiedTypeIdentifier();
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterInstantiation();
			else node.typeParameters = null;
			return this.finishNode(node, "InterfaceExtends");
		}
		flowParseInterface(node) {
			this.flowParseInterfaceish(node, false);
			return this.finishNode(node, "InterfaceDeclaration");
		}
		checkNotUnderscore(word$3) {
			if (word$3 === "_") this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
		}
		checkReservedType(word$3, startLoc, declaration) {
			if (!reservedTypes.has(word$3)) return;
			this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, { reservedType: word$3 });
		}
		flowParseRestrictedIdentifier(liberal, declaration) {
			this.checkReservedType(this.state.value, this.state.startLoc, declaration);
			return this.parseIdentifier(liberal);
		}
		flowParseTypeAlias(node) {
			node.id = this.flowParseRestrictedIdentifier(false, true);
			this.scope.declareName(node.id.name, 8201, node.id.loc.start);
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
			else node.typeParameters = null;
			node.right = this.flowParseTypeInitialiser(29);
			this.semicolon();
			return this.finishNode(node, "TypeAlias");
		}
		flowParseOpaqueType(node, declare) {
			this.expectContextual(130);
			node.id = this.flowParseRestrictedIdentifier(true, true);
			this.scope.declareName(node.id.name, 8201, node.id.loc.start);
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
			else node.typeParameters = null;
			node.supertype = null;
			if (this.match(14)) node.supertype = this.flowParseTypeInitialiser(14);
			node.impltype = null;
			if (!declare) node.impltype = this.flowParseTypeInitialiser(29);
			this.semicolon();
			return this.finishNode(node, "OpaqueType");
		}
		flowParseTypeParameter(requireDefault = false) {
			const nodeStartLoc = this.state.startLoc;
			const node = this.startNode();
			const variance$1 = this.flowParseVariance();
			const ident = this.flowParseTypeAnnotatableIdentifier();
			node.name = ident.name;
			node.variance = variance$1;
			node.bound = ident.typeAnnotation;
			if (this.match(29)) {
				this.eat(29);
				node.default = this.flowParseType();
			} else if (requireDefault) this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
			return this.finishNode(node, "TypeParameter");
		}
		flowParseTypeParameterDeclaration() {
			const oldInType = this.state.inType;
			const node = this.startNode();
			node.params = [];
			this.state.inType = true;
			if (this.match(47) || this.match(143)) this.next();
			else this.unexpected();
			let defaultRequired = false;
			do {
				const typeParameter$1 = this.flowParseTypeParameter(defaultRequired);
				node.params.push(typeParameter$1);
				if (typeParameter$1.default) defaultRequired = true;
				if (!this.match(48)) this.expect(12);
			} while (!this.match(48));
			this.expect(48);
			this.state.inType = oldInType;
			return this.finishNode(node, "TypeParameterDeclaration");
		}
		flowInTopLevelContext(cb) {
			if (this.curContext() !== types$6.brace) {
				const oldContext = this.state.context;
				this.state.context = [oldContext[0]];
				try {
					return cb();
				} finally {
					this.state.context = oldContext;
				}
			} else return cb();
		}
		flowParseTypeParameterInstantiationInExpression() {
			if (this.reScan_lt() !== 47) return;
			return this.flowParseTypeParameterInstantiation();
		}
		flowParseTypeParameterInstantiation() {
			const node = this.startNode();
			const oldInType = this.state.inType;
			this.state.inType = true;
			node.params = [];
			this.flowInTopLevelContext(() => {
				this.expect(47);
				const oldNoAnonFunctionType = this.state.noAnonFunctionType;
				this.state.noAnonFunctionType = false;
				while (!this.match(48)) {
					node.params.push(this.flowParseType());
					if (!this.match(48)) this.expect(12);
				}
				this.state.noAnonFunctionType = oldNoAnonFunctionType;
			});
			this.state.inType = oldInType;
			if (!this.state.inType && this.curContext() === types$6.brace) this.reScan_lt_gt();
			this.expect(48);
			return this.finishNode(node, "TypeParameterInstantiation");
		}
		flowParseTypeParameterInstantiationCallOrNew() {
			if (this.reScan_lt() !== 47) return;
			const node = this.startNode();
			const oldInType = this.state.inType;
			node.params = [];
			this.state.inType = true;
			this.expect(47);
			while (!this.match(48)) {
				node.params.push(this.flowParseTypeOrImplicitInstantiation());
				if (!this.match(48)) this.expect(12);
			}
			this.expect(48);
			this.state.inType = oldInType;
			return this.finishNode(node, "TypeParameterInstantiation");
		}
		flowParseInterfaceType() {
			const node = this.startNode();
			this.expectContextual(129);
			node.extends = [];
			if (this.eat(81)) do
				node.extends.push(this.flowParseInterfaceExtends());
			while (this.eat(12));
			node.body = this.flowParseObjectType({
				allowStatic: false,
				allowExact: false,
				allowSpread: false,
				allowProto: false,
				allowInexact: false
			});
			return this.finishNode(node, "InterfaceTypeAnnotation");
		}
		flowParseObjectPropertyKey() {
			return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
		}
		flowParseObjectTypeIndexer(node, isStatic$1, variance$1) {
			node.static = isStatic$1;
			if (this.lookahead().type === 14) {
				node.id = this.flowParseObjectPropertyKey();
				node.key = this.flowParseTypeInitialiser();
			} else {
				node.id = null;
				node.key = this.flowParseType();
			}
			this.expect(3);
			node.value = this.flowParseTypeInitialiser();
			node.variance = variance$1;
			return this.finishNode(node, "ObjectTypeIndexer");
		}
		flowParseObjectTypeInternalSlot(node, isStatic$1) {
			node.static = isStatic$1;
			node.id = this.flowParseObjectPropertyKey();
			this.expect(3);
			this.expect(3);
			if (this.match(47) || this.match(10)) {
				node.method = true;
				node.optional = false;
				node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
			} else {
				node.method = false;
				if (this.eat(17)) node.optional = true;
				node.value = this.flowParseTypeInitialiser();
			}
			return this.finishNode(node, "ObjectTypeInternalSlot");
		}
		flowParseObjectTypeMethodish(node) {
			node.params = [];
			node.rest = null;
			node.typeParameters = null;
			node.this = null;
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
			this.expect(10);
			if (this.match(78)) {
				node.this = this.flowParseFunctionTypeParam(true);
				node.this.name = null;
				if (!this.match(11)) this.expect(12);
			}
			while (!this.match(11) && !this.match(21)) {
				node.params.push(this.flowParseFunctionTypeParam(false));
				if (!this.match(11)) this.expect(12);
			}
			if (this.eat(21)) node.rest = this.flowParseFunctionTypeParam(false);
			this.expect(11);
			node.returnType = this.flowParseTypeInitialiser();
			return this.finishNode(node, "FunctionTypeAnnotation");
		}
		flowParseObjectTypeCallProperty(node, isStatic$1) {
			const valueNode = this.startNode();
			node.static = isStatic$1;
			node.value = this.flowParseObjectTypeMethodish(valueNode);
			return this.finishNode(node, "ObjectTypeCallProperty");
		}
		flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
			const oldInType = this.state.inType;
			this.state.inType = true;
			const nodeStart = this.startNode();
			nodeStart.callProperties = [];
			nodeStart.properties = [];
			nodeStart.indexers = [];
			nodeStart.internalSlots = [];
			let endDelim;
			let exact;
			let inexact = false;
			if (allowExact && this.match(6)) {
				this.expect(6);
				endDelim = 9;
				exact = true;
			} else {
				this.expect(5);
				endDelim = 8;
				exact = false;
			}
			nodeStart.exact = exact;
			while (!this.match(endDelim)) {
				let isStatic$1 = false;
				let protoStartLoc = null;
				let inexactStartLoc = null;
				const node = this.startNode();
				if (allowProto && this.isContextual(118)) {
					const lookahead = this.lookahead();
					if (lookahead.type !== 14 && lookahead.type !== 17) {
						this.next();
						protoStartLoc = this.state.startLoc;
						allowStatic = false;
					}
				}
				if (allowStatic && this.isContextual(106)) {
					const lookahead = this.lookahead();
					if (lookahead.type !== 14 && lookahead.type !== 17) {
						this.next();
						isStatic$1 = true;
					}
				}
				const variance$1 = this.flowParseVariance();
				if (this.eat(0)) {
					if (protoStartLoc != null) this.unexpected(protoStartLoc);
					if (this.eat(0)) {
						if (variance$1) this.unexpected(variance$1.loc.start);
						nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic$1));
					} else nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic$1, variance$1));
				} else if (this.match(10) || this.match(47)) {
					if (protoStartLoc != null) this.unexpected(protoStartLoc);
					if (variance$1) this.unexpected(variance$1.loc.start);
					nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic$1));
				} else {
					let kind = "init";
					if (this.isContextual(99) || this.isContextual(104)) {
						const lookahead = this.lookahead();
						if (tokenIsLiteralPropertyName(lookahead.type)) {
							kind = this.state.value;
							this.next();
						}
					}
					const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic$1, protoStartLoc, variance$1, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
					if (propOrInexact === null) {
						inexact = true;
						inexactStartLoc = this.state.lastTokStartLoc;
					} else nodeStart.properties.push(propOrInexact);
				}
				this.flowObjectTypeSemicolon();
				if (inexactStartLoc && !this.match(8) && !this.match(9)) this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
			}
			this.expect(endDelim);
			if (allowSpread) nodeStart.inexact = inexact;
			const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
			this.state.inType = oldInType;
			return out;
		}
		flowParseObjectTypeProperty(node, isStatic$1, protoStartLoc, variance$1, kind, allowSpread, allowInexact) {
			if (this.eat(21)) {
				const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
				if (isInexactToken) {
					if (!allowSpread) this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
					else if (!allowInexact) this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
					if (variance$1) this.raise(FlowErrors.InexactVariance, variance$1);
					return null;
				}
				if (!allowSpread) this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
				if (protoStartLoc != null) this.unexpected(protoStartLoc);
				if (variance$1) this.raise(FlowErrors.SpreadVariance, variance$1);
				node.argument = this.flowParseType();
				return this.finishNode(node, "ObjectTypeSpreadProperty");
			} else {
				node.key = this.flowParseObjectPropertyKey();
				node.static = isStatic$1;
				node.proto = protoStartLoc != null;
				node.kind = kind;
				let optional = false;
				if (this.match(47) || this.match(10)) {
					node.method = true;
					if (protoStartLoc != null) this.unexpected(protoStartLoc);
					if (variance$1) this.unexpected(variance$1.loc.start);
					node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
					if (kind === "get" || kind === "set") this.flowCheckGetterSetterParams(node);
					if (!allowSpread && node.key.name === "constructor" && node.value.this) this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);
				} else {
					if (kind !== "init") this.unexpected();
					node.method = false;
					if (this.eat(17)) optional = true;
					node.value = this.flowParseTypeInitialiser();
					node.variance = variance$1;
				}
				node.optional = optional;
				return this.finishNode(node, "ObjectTypeProperty");
			}
		}
		flowCheckGetterSetterParams(property) {
			const paramCount = property.kind === "get" ? 0 : 1;
			const length = property.value.params.length + (property.value.rest ? 1 : 0);
			if (property.value.this) this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
			if (length !== paramCount) this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
			if (property.kind === "set" && property.value.rest) this.raise(Errors.BadSetterRestParameter, property);
		}
		flowObjectTypeSemicolon() {
			if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) this.unexpected();
		}
		flowParseQualifiedTypeIdentifier(startLoc, id$4) {
			startLoc != null || (startLoc = this.state.startLoc);
			let node = id$4 || this.flowParseRestrictedIdentifier(true);
			while (this.eat(16)) {
				const node2 = this.startNodeAt(startLoc);
				node2.qualification = node;
				node2.id = this.flowParseRestrictedIdentifier(true);
				node = this.finishNode(node2, "QualifiedTypeIdentifier");
			}
			return node;
		}
		flowParseGenericType(startLoc, id$4) {
			const node = this.startNodeAt(startLoc);
			node.typeParameters = null;
			node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id$4);
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterInstantiation();
			return this.finishNode(node, "GenericTypeAnnotation");
		}
		flowParseTypeofType() {
			const node = this.startNode();
			this.expect(87);
			node.argument = this.flowParsePrimaryType();
			return this.finishNode(node, "TypeofTypeAnnotation");
		}
		flowParseTupleType() {
			const node = this.startNode();
			node.types = [];
			this.expect(0);
			while (this.state.pos < this.length && !this.match(3)) {
				node.types.push(this.flowParseType());
				if (this.match(3)) break;
				this.expect(12);
			}
			this.expect(3);
			return this.finishNode(node, "TupleTypeAnnotation");
		}
		flowParseFunctionTypeParam(first) {
			let name = null;
			let optional = false;
			let typeAnnotation$1 = null;
			const node = this.startNode();
			const lh = this.lookahead();
			const isThis = this.state.type === 78;
			if (lh.type === 14 || lh.type === 17) {
				if (isThis && !first) this.raise(FlowErrors.ThisParamMustBeFirst, node);
				name = this.parseIdentifier(isThis);
				if (this.eat(17)) {
					optional = true;
					if (isThis) this.raise(FlowErrors.ThisParamMayNotBeOptional, node);
				}
				typeAnnotation$1 = this.flowParseTypeInitialiser();
			} else typeAnnotation$1 = this.flowParseType();
			node.name = name;
			node.optional = optional;
			node.typeAnnotation = typeAnnotation$1;
			return this.finishNode(node, "FunctionTypeParam");
		}
		reinterpretTypeAsFunctionTypeParam(type) {
			const node = this.startNodeAt(type.loc.start);
			node.name = null;
			node.optional = false;
			node.typeAnnotation = type;
			return this.finishNode(node, "FunctionTypeParam");
		}
		flowParseFunctionTypeParams(params = []) {
			let rest = null;
			let _this = null;
			if (this.match(78)) {
				_this = this.flowParseFunctionTypeParam(true);
				_this.name = null;
				if (!this.match(11)) this.expect(12);
			}
			while (!this.match(11) && !this.match(21)) {
				params.push(this.flowParseFunctionTypeParam(false));
				if (!this.match(11)) this.expect(12);
			}
			if (this.eat(21)) rest = this.flowParseFunctionTypeParam(false);
			return {
				params,
				rest,
				_this
			};
		}
		flowIdentToTypeAnnotation(startLoc, node, id$4) {
			switch (id$4.name) {
				case "any": return this.finishNode(node, "AnyTypeAnnotation");
				case "bool":
				case "boolean": return this.finishNode(node, "BooleanTypeAnnotation");
				case "mixed": return this.finishNode(node, "MixedTypeAnnotation");
				case "empty": return this.finishNode(node, "EmptyTypeAnnotation");
				case "number": return this.finishNode(node, "NumberTypeAnnotation");
				case "string": return this.finishNode(node, "StringTypeAnnotation");
				case "symbol": return this.finishNode(node, "SymbolTypeAnnotation");
				default:
					this.checkNotUnderscore(id$4.name);
					return this.flowParseGenericType(startLoc, id$4);
			}
		}
		flowParsePrimaryType() {
			const startLoc = this.state.startLoc;
			const node = this.startNode();
			let tmp;
			let type;
			let isGroupedType = false;
			const oldNoAnonFunctionType = this.state.noAnonFunctionType;
			switch (this.state.type) {
				case 5: return this.flowParseObjectType({
					allowStatic: false,
					allowExact: false,
					allowSpread: true,
					allowProto: false,
					allowInexact: true
				});
				case 6: return this.flowParseObjectType({
					allowStatic: false,
					allowExact: true,
					allowSpread: true,
					allowProto: false,
					allowInexact: false
				});
				case 0:
					this.state.noAnonFunctionType = false;
					type = this.flowParseTupleType();
					this.state.noAnonFunctionType = oldNoAnonFunctionType;
					return type;
				case 47: {
					const node$1 = this.startNode();
					node$1.typeParameters = this.flowParseTypeParameterDeclaration();
					this.expect(10);
					tmp = this.flowParseFunctionTypeParams();
					node$1.params = tmp.params;
					node$1.rest = tmp.rest;
					node$1.this = tmp._this;
					this.expect(11);
					this.expect(19);
					node$1.returnType = this.flowParseType();
					return this.finishNode(node$1, "FunctionTypeAnnotation");
				}
				case 10: {
					const node$1 = this.startNode();
					this.next();
					if (!this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
						const token$1 = this.lookahead().type;
						isGroupedType = token$1 !== 17 && token$1 !== 14;
					} else isGroupedType = true;
					if (isGroupedType) {
						this.state.noAnonFunctionType = false;
						type = this.flowParseType();
						this.state.noAnonFunctionType = oldNoAnonFunctionType;
						if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
							this.expect(11);
							return type;
						} else this.eat(12);
					}
					if (type) tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
					else tmp = this.flowParseFunctionTypeParams();
					node$1.params = tmp.params;
					node$1.rest = tmp.rest;
					node$1.this = tmp._this;
					this.expect(11);
					this.expect(19);
					node$1.returnType = this.flowParseType();
					node$1.typeParameters = null;
					return this.finishNode(node$1, "FunctionTypeAnnotation");
				}
				case 134: return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
				case 85:
				case 86:
					node.value = this.match(85);
					this.next();
					return this.finishNode(node, "BooleanLiteralTypeAnnotation");
				case 53:
					if (this.state.value === "-") {
						this.next();
						if (this.match(135)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
						if (this.match(136)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
						throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
					}
					this.unexpected();
					return;
				case 135: return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
				case 136: return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
				case 88:
					this.next();
					return this.finishNode(node, "VoidTypeAnnotation");
				case 84:
					this.next();
					return this.finishNode(node, "NullLiteralTypeAnnotation");
				case 78:
					this.next();
					return this.finishNode(node, "ThisTypeAnnotation");
				case 55:
					this.next();
					return this.finishNode(node, "ExistsTypeAnnotation");
				case 87: return this.flowParseTypeofType();
				default: if (tokenIsKeyword(this.state.type)) {
					const label = tokenLabelName(this.state.type);
					this.next();
					return super.createIdentifier(node, label);
				} else if (tokenIsIdentifier(this.state.type)) {
					if (this.isContextual(129)) return this.flowParseInterfaceType();
					return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
				}
			}
			this.unexpected();
		}
		flowParsePostfixType() {
			const startLoc = this.state.startLoc;
			let type = this.flowParsePrimaryType();
			let seenOptionalIndexedAccess = false;
			while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
				const node = this.startNodeAt(startLoc);
				const optional = this.eat(18);
				seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
				this.expect(0);
				if (!optional && this.match(3)) {
					node.elementType = type;
					this.next();
					type = this.finishNode(node, "ArrayTypeAnnotation");
				} else {
					node.objectType = type;
					node.indexType = this.flowParseType();
					this.expect(3);
					if (seenOptionalIndexedAccess) {
						node.optional = optional;
						type = this.finishNode(node, "OptionalIndexedAccessType");
					} else type = this.finishNode(node, "IndexedAccessType");
				}
			}
			return type;
		}
		flowParsePrefixType() {
			const node = this.startNode();
			if (this.eat(17)) {
				node.typeAnnotation = this.flowParsePrefixType();
				return this.finishNode(node, "NullableTypeAnnotation");
			} else return this.flowParsePostfixType();
		}
		flowParseAnonFunctionWithoutParens() {
			const param = this.flowParsePrefixType();
			if (!this.state.noAnonFunctionType && this.eat(19)) {
				const node = this.startNodeAt(param.loc.start);
				node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
				node.rest = null;
				node.this = null;
				node.returnType = this.flowParseType();
				node.typeParameters = null;
				return this.finishNode(node, "FunctionTypeAnnotation");
			}
			return param;
		}
		flowParseIntersectionType() {
			const node = this.startNode();
			this.eat(45);
			const type = this.flowParseAnonFunctionWithoutParens();
			node.types = [type];
			while (this.eat(45)) node.types.push(this.flowParseAnonFunctionWithoutParens());
			return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
		}
		flowParseUnionType() {
			const node = this.startNode();
			this.eat(43);
			const type = this.flowParseIntersectionType();
			node.types = [type];
			while (this.eat(43)) node.types.push(this.flowParseIntersectionType());
			return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
		}
		flowParseType() {
			const oldInType = this.state.inType;
			this.state.inType = true;
			const type = this.flowParseUnionType();
			this.state.inType = oldInType;
			return type;
		}
		flowParseTypeOrImplicitInstantiation() {
			if (this.state.type === 132 && this.state.value === "_") {
				const startLoc = this.state.startLoc;
				const node = this.parseIdentifier();
				return this.flowParseGenericType(startLoc, node);
			} else return this.flowParseType();
		}
		flowParseTypeAnnotation() {
			const node = this.startNode();
			node.typeAnnotation = this.flowParseTypeInitialiser();
			return this.finishNode(node, "TypeAnnotation");
		}
		flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
			const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
			if (this.match(14)) {
				ident.typeAnnotation = this.flowParseTypeAnnotation();
				this.resetEndLocation(ident);
			}
			return ident;
		}
		typeCastToParameter(node) {
			node.expression.typeAnnotation = node.typeAnnotation;
			this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
			return node.expression;
		}
		flowParseVariance() {
			let variance$1 = null;
			if (this.match(53)) {
				variance$1 = this.startNode();
				if (this.state.value === "+") variance$1.kind = "plus";
				else variance$1.kind = "minus";
				this.next();
				return this.finishNode(variance$1, "Variance");
			}
			return variance$1;
		}
		parseFunctionBody(node, allowExpressionBody, isMethod$2 = false) {
			if (allowExpressionBody) {
				this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod$2));
				return;
			}
			super.parseFunctionBody(node, false, isMethod$2);
		}
		parseFunctionBodyAndFinish(node, type, isMethod$2 = false) {
			if (this.match(14)) {
				const typeNode = this.startNode();
				[typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
				node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
			}
			return super.parseFunctionBodyAndFinish(node, type, isMethod$2);
		}
		parseStatementLike(flags) {
			if (this.state.strict && this.isContextual(129)) {
				const lookahead = this.lookahead();
				if (tokenIsKeywordOrIdentifier(lookahead.type)) {
					const node = this.startNode();
					this.next();
					return this.flowParseInterface(node);
				}
			} else if (this.isContextual(126)) {
				const node = this.startNode();
				this.next();
				return this.flowParseEnumDeclaration(node);
			}
			const stmt = super.parseStatementLike(flags);
			if (this.flowPragma === void 0 && !this.isValidDirective(stmt)) this.flowPragma = null;
			return stmt;
		}
		parseExpressionStatement(node, expr, decorators) {
			if (expr.type === "Identifier") {
				if (expr.name === "declare") {
					if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(node);
				} else if (tokenIsIdentifier(this.state.type)) {
					if (expr.name === "interface") return this.flowParseInterface(node);
					else if (expr.name === "type") return this.flowParseTypeAlias(node);
					else if (expr.name === "opaque") return this.flowParseOpaqueType(node, false);
				}
			}
			return super.parseExpressionStatement(node, expr, decorators);
		}
		shouldParseExportDeclaration() {
			const { type } = this.state;
			if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) return !this.state.containsEsc;
			return super.shouldParseExportDeclaration();
		}
		isExportDefaultSpecifier() {
			const { type } = this.state;
			if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) return this.state.containsEsc;
			return super.isExportDefaultSpecifier();
		}
		parseExportDefaultExpression() {
			if (this.isContextual(126)) {
				const node = this.startNode();
				this.next();
				return this.flowParseEnumDeclaration(node);
			}
			return super.parseExportDefaultExpression();
		}
		parseConditional(expr, startLoc, refExpressionErrors) {
			if (!this.match(17)) return expr;
			if (this.state.maybeInArrowParameters) {
				const nextCh = this.lookaheadCharCode();
				if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
					this.setOptionalParametersError(refExpressionErrors);
					return expr;
				}
			}
			this.expect(17);
			const state = this.state.clone();
			const originalNoArrowAt = this.state.noArrowAt;
			const node = this.startNodeAt(startLoc);
			let { consequent, failed } = this.tryParseConditionalConsequent();
			let [valid, invalid] = this.getArrowLikeExpressions(consequent);
			if (failed || invalid.length > 0) {
				const noArrowAt = [...originalNoArrowAt];
				if (invalid.length > 0) {
					this.state = state;
					this.state.noArrowAt = noArrowAt;
					for (let i$6 = 0; i$6 < invalid.length; i$6++) noArrowAt.push(invalid[i$6].start);
					({consequent, failed} = this.tryParseConditionalConsequent());
					[valid, invalid] = this.getArrowLikeExpressions(consequent);
				}
				if (failed && valid.length > 1) this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);
				if (failed && valid.length === 1) {
					this.state = state;
					noArrowAt.push(valid[0].start);
					this.state.noArrowAt = noArrowAt;
					({consequent, failed} = this.tryParseConditionalConsequent());
				}
			}
			this.getArrowLikeExpressions(consequent, true);
			this.state.noArrowAt = originalNoArrowAt;
			this.expect(14);
			node.test = expr;
			node.consequent = consequent;
			node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0));
			return this.finishNode(node, "ConditionalExpression");
		}
		tryParseConditionalConsequent() {
			this.state.noArrowParamsConversionAt.push(this.state.start);
			const consequent = this.parseMaybeAssignAllowIn();
			const failed = !this.match(14);
			this.state.noArrowParamsConversionAt.pop();
			return {
				consequent,
				failed
			};
		}
		getArrowLikeExpressions(node, disallowInvalid) {
			const stack = [node];
			const arrows = [];
			while (stack.length !== 0) {
				const node$1 = stack.pop();
				if (node$1.type === "ArrowFunctionExpression" && node$1.body.type !== "BlockStatement") {
					if (node$1.typeParameters || !node$1.returnType) this.finishArrowValidation(node$1);
					else arrows.push(node$1);
					stack.push(node$1.body);
				} else if (node$1.type === "ConditionalExpression") {
					stack.push(node$1.consequent);
					stack.push(node$1.alternate);
				}
			}
			if (disallowInvalid) {
				arrows.forEach((node$1) => this.finishArrowValidation(node$1));
				return [arrows, []];
			}
			return partition(arrows, (node$1) => node$1.params.every((param) => this.isAssignable(param, true)));
		}
		finishArrowValidation(node) {
			var _node$extra;
			this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
			this.scope.enter(6);
			super.checkParams(node, false, true);
			this.scope.exit();
		}
		forwardNoArrowParamsConversionAt(node, parse$17) {
			let result;
			if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {
				this.state.noArrowParamsConversionAt.push(this.state.start);
				result = parse$17();
				this.state.noArrowParamsConversionAt.pop();
			} else result = parse$17();
			return result;
		}
		parseParenItem(node, startLoc) {
			const newNode = super.parseParenItem(node, startLoc);
			if (this.eat(17)) {
				newNode.optional = true;
				this.resetEndLocation(node);
			}
			if (this.match(14)) {
				const typeCastNode = this.startNodeAt(startLoc);
				typeCastNode.expression = newNode;
				typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
				return this.finishNode(typeCastNode, "TypeCastExpression");
			}
			return newNode;
		}
		assertModuleNodeAllowed(node) {
			if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") return;
			super.assertModuleNodeAllowed(node);
		}
		parseExportDeclaration(node) {
			if (this.isContextual(130)) {
				node.exportKind = "type";
				const declarationNode = this.startNode();
				this.next();
				if (this.match(5)) {
					node.specifiers = this.parseExportSpecifiers(true);
					super.parseExportFrom(node);
					return null;
				} else return this.flowParseTypeAlias(declarationNode);
			} else if (this.isContextual(131)) {
				node.exportKind = "type";
				const declarationNode = this.startNode();
				this.next();
				return this.flowParseOpaqueType(declarationNode, false);
			} else if (this.isContextual(129)) {
				node.exportKind = "type";
				const declarationNode = this.startNode();
				this.next();
				return this.flowParseInterface(declarationNode);
			} else if (this.isContextual(126)) {
				node.exportKind = "value";
				const declarationNode = this.startNode();
				this.next();
				return this.flowParseEnumDeclaration(declarationNode);
			} else return super.parseExportDeclaration(node);
		}
		eatExportStar(node) {
			if (super.eatExportStar(node)) return true;
			if (this.isContextual(130) && this.lookahead().type === 55) {
				node.exportKind = "type";
				this.next();
				this.next();
				return true;
			}
			return false;
		}
		maybeParseExportNamespaceSpecifier(node) {
			const { startLoc } = this.state;
			const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
			if (hasNamespace && node.exportKind === "type") this.unexpected(startLoc);
			return hasNamespace;
		}
		parseClassId(node, isStatement$10, optionalId) {
			super.parseClassId(node, isStatement$10, optionalId);
			if (this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
		}
		parseClassMember(classBody$1, member, state) {
			const { startLoc } = this.state;
			if (this.isContextual(125)) {
				if (super.parseClassMemberFromModifier(classBody$1, member)) return;
				member.declare = true;
			}
			super.parseClassMember(classBody$1, member, state);
			if (member.declare) {
				if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") this.raise(FlowErrors.DeclareClassElement, startLoc);
				else if (member.value) this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
			}
		}
		isIterator(word$3) {
			return word$3 === "iterator" || word$3 === "asyncIterator";
		}
		readIterator() {
			const word$3 = super.readWord1();
			const fullWord = "@@" + word$3;
			if (!this.isIterator(word$3) || !this.state.inType) this.raise(Errors.InvalidIdentifier, this.state.curPosition(), { identifierName: fullWord });
			this.finishToken(132, fullWord);
		}
		getTokenFromCode(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (code$1 === 123 && next === 124) this.finishOp(6, 2);
			else if (this.state.inType && (code$1 === 62 || code$1 === 60)) this.finishOp(code$1 === 62 ? 48 : 47, 1);
			else if (this.state.inType && code$1 === 63) if (next === 46) this.finishOp(18, 2);
			else this.finishOp(17, 1);
			else if (isIteratorStart(code$1, next, this.input.charCodeAt(this.state.pos + 2))) {
				this.state.pos += 2;
				this.readIterator();
			} else super.getTokenFromCode(code$1);
		}
		isAssignable(node, isBinding$2) {
			if (node.type === "TypeCastExpression") return this.isAssignable(node.expression, isBinding$2);
			else return super.isAssignable(node, isBinding$2);
		}
		toAssignable(node, isLHS = false) {
			if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") node.left = this.typeCastToParameter(node.left);
			super.toAssignable(node, isLHS);
		}
		toAssignableList(exprList, trailingCommaLoc, isLHS) {
			for (let i$6 = 0; i$6 < exprList.length; i$6++) {
				const expr = exprList[i$6];
				if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") exprList[i$6] = this.typeCastToParameter(expr);
			}
			super.toAssignableList(exprList, trailingCommaLoc, isLHS);
		}
		toReferencedList(exprList, isParenthesizedExpr) {
			for (let i$6 = 0; i$6 < exprList.length; i$6++) {
				var _expr$extra;
				const expr = exprList[i$6];
				if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
			}
			return exprList;
		}
		parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
			const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
			if (canBePattern && !this.state.maybeInArrowParameters) this.toReferencedList(node.elements);
			return node;
		}
		isValidLVal(type, isParenthesized, binding) {
			return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
		}
		parseClassProperty(node) {
			if (this.match(14)) node.typeAnnotation = this.flowParseTypeAnnotation();
			return super.parseClassProperty(node);
		}
		parseClassPrivateProperty(node) {
			if (this.match(14)) node.typeAnnotation = this.flowParseTypeAnnotation();
			return super.parseClassPrivateProperty(node);
		}
		isClassMethod() {
			return this.match(47) || super.isClassMethod();
		}
		isClassProperty() {
			return this.match(14) || super.isClassProperty();
		}
		isNonstaticConstructor(method) {
			return !this.match(14) && super.isNonstaticConstructor(method);
		}
		pushClassMethod(classBody$1, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
			if (method.variance) this.unexpected(method.variance.loc.start);
			delete method.variance;
			if (this.match(47)) method.typeParameters = this.flowParseTypeParameterDeclaration();
			super.pushClassMethod(classBody$1, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
			if (method.params && isConstructor) {
				const params = method.params;
				if (params.length > 0 && this.isThisParam(params[0])) this.raise(FlowErrors.ThisParamBannedInConstructor, method);
			} else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
				const params = method.value.params;
				if (params.length > 0 && this.isThisParam(params[0])) this.raise(FlowErrors.ThisParamBannedInConstructor, method);
			}
		}
		pushClassPrivateMethod(classBody$1, method, isGenerator, isAsync) {
			if (method.variance) this.unexpected(method.variance.loc.start);
			delete method.variance;
			if (this.match(47)) method.typeParameters = this.flowParseTypeParameterDeclaration();
			super.pushClassPrivateMethod(classBody$1, method, isGenerator, isAsync);
		}
		parseClassSuper(node) {
			super.parseClassSuper(node);
			if (node.superClass && (this.match(47) || this.match(51))) node.superTypeParameters = this.flowParseTypeParameterInstantiationInExpression();
			if (this.isContextual(113)) {
				this.next();
				const implemented = node.implements = [];
				do {
					const node$1 = this.startNode();
					node$1.id = this.flowParseRestrictedIdentifier(true);
					if (this.match(47)) node$1.typeParameters = this.flowParseTypeParameterInstantiation();
					else node$1.typeParameters = null;
					implemented.push(this.finishNode(node$1, "ClassImplements"));
				} while (this.eat(12));
			}
		}
		checkGetterSetterParams(method) {
			super.checkGetterSetterParams(method);
			const params = this.getObjectOrClassMethodParams(method);
			if (params.length > 0) {
				const param = params[0];
				if (this.isThisParam(param) && method.kind === "get") this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
				else if (this.isThisParam(param)) this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
			}
		}
		parsePropertyNamePrefixOperator(node) {
			node.variance = this.flowParseVariance();
		}
		parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern$2, isAccessor$1, refExpressionErrors) {
			if (prop.variance) this.unexpected(prop.variance.loc.start);
			delete prop.variance;
			let typeParameters;
			if (this.match(47) && !isAccessor$1) {
				typeParameters = this.flowParseTypeParameterDeclaration();
				if (!this.match(10)) this.unexpected();
			}
			const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern$2, isAccessor$1, refExpressionErrors);
			if (typeParameters) (result.value || result).typeParameters = typeParameters;
			return result;
		}
		parseFunctionParamType(param) {
			if (this.eat(17)) {
				if (param.type !== "Identifier") this.raise(FlowErrors.PatternIsOptional, param);
				if (this.isThisParam(param)) this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
				param.optional = true;
			}
			if (this.match(14)) param.typeAnnotation = this.flowParseTypeAnnotation();
			else if (this.isThisParam(param)) this.raise(FlowErrors.ThisParamAnnotationRequired, param);
			if (this.match(29) && this.isThisParam(param)) this.raise(FlowErrors.ThisParamNoDefault, param);
			this.resetEndLocation(param);
			return param;
		}
		parseMaybeDefault(startLoc, left) {
			const node = super.parseMaybeDefault(startLoc, left);
			if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);
			return node;
		}
		checkImportReflection(node) {
			super.checkImportReflection(node);
			if (node.module && node.importKind !== "value") this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
		}
		parseImportSpecifierLocal(node, specifier, type) {
			specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
			node.specifiers.push(this.finishImportSpecifier(specifier, type));
		}
		isPotentialImportPhase(isExport) {
			if (super.isPotentialImportPhase(isExport)) return true;
			if (this.isContextual(130)) {
				if (!isExport) return true;
				const ch = this.lookaheadCharCode();
				return ch === 123 || ch === 42;
			}
			return !isExport && this.isContextual(87);
		}
		applyImportPhase(node, isExport, phase, loc) {
			super.applyImportPhase(node, isExport, phase, loc);
			if (isExport) {
				if (!phase && this.match(65)) return;
				node.exportKind = phase === "type" ? phase : "value";
			} else {
				if (phase === "type" && this.match(55)) this.unexpected();
				node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
			}
		}
		parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
			const firstIdent = specifier.imported;
			let specifierTypeKind = null;
			if (firstIdent.type === "Identifier") {
				if (firstIdent.name === "type") specifierTypeKind = "type";
				else if (firstIdent.name === "typeof") specifierTypeKind = "typeof";
			}
			let isBinding$2 = false;
			if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
				const as_ident = this.parseIdentifier(true);
				if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
					specifier.imported = as_ident;
					specifier.importKind = specifierTypeKind;
					specifier.local = cloneIdentifier(as_ident);
				} else {
					specifier.imported = firstIdent;
					specifier.importKind = null;
					specifier.local = this.parseIdentifier();
				}
			} else {
				if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
					specifier.imported = this.parseIdentifier(true);
					specifier.importKind = specifierTypeKind;
				} else {
					if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: firstIdent.value });
					specifier.imported = firstIdent;
					specifier.importKind = null;
				}
				if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
				else {
					isBinding$2 = true;
					specifier.local = cloneIdentifier(specifier.imported);
				}
			}
			const specifierIsTypeImport = hasTypeImportKind(specifier);
			if (isInTypeOnlyImport && specifierIsTypeImport) this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
			if (isInTypeOnlyImport || specifierIsTypeImport) this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
			if (isBinding$2 && !isInTypeOnlyImport && !specifierIsTypeImport) this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
			return this.finishImportSpecifier(specifier, "ImportSpecifier");
		}
		parseBindingAtom() {
			switch (this.state.type) {
				case 78: return this.parseIdentifier(true);
				default: return super.parseBindingAtom();
			}
		}
		parseFunctionParams(node, isConstructor) {
			const kind = node.kind;
			if (kind !== "get" && kind !== "set" && this.match(47)) node.typeParameters = this.flowParseTypeParameterDeclaration();
			super.parseFunctionParams(node, isConstructor);
		}
		parseVarId(decl$1, kind) {
			super.parseVarId(decl$1, kind);
			if (this.match(14)) {
				decl$1.id.typeAnnotation = this.flowParseTypeAnnotation();
				this.resetEndLocation(decl$1.id);
			}
		}
		parseAsyncArrowFromCallExpression(node, call$2) {
			if (this.match(14)) {
				const oldNoAnonFunctionType = this.state.noAnonFunctionType;
				this.state.noAnonFunctionType = true;
				node.returnType = this.flowParseTypeAnnotation();
				this.state.noAnonFunctionType = oldNoAnonFunctionType;
			}
			return super.parseAsyncArrowFromCallExpression(node, call$2);
		}
		shouldParseAsyncArrow() {
			return this.match(14) || super.shouldParseAsyncArrow();
		}
		parseMaybeAssign(refExpressionErrors, afterLeftParse) {
			var _jsx$1;
			let state = null;
			let jsx$1;
			if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
				state = this.state.clone();
				jsx$1 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
				if (!jsx$1.error) return jsx$1.node;
				const { context } = this.state;
				const currentContext = context[context.length - 1];
				if (currentContext === types$6.j_oTag || currentContext === types$6.j_expr) context.pop();
			}
			if ((_jsx$1 = jsx$1) != null && _jsx$1.error || this.match(47)) {
				var _jsx2, _jsx3;
				state = state || this.state.clone();
				let typeParameters;
				const arrow = this.tryParse((abort) => {
					var _arrowExpression$extr;
					typeParameters = this.flowParseTypeParameterDeclaration();
					const arrowExpression$1 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
						const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
						this.resetStartLocationFromNode(result, typeParameters);
						return result;
					});
					if ((_arrowExpression$extr = arrowExpression$1.extra) != null && _arrowExpression$extr.parenthesized) abort();
					const expr = this.maybeUnwrapTypeCastExpression(arrowExpression$1);
					if (expr.type !== "ArrowFunctionExpression") abort();
					expr.typeParameters = typeParameters;
					this.resetStartLocationFromNode(expr, typeParameters);
					return arrowExpression$1;
				}, state);
				let arrowExpression = null;
				if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
					if (!arrow.error && !arrow.aborted) {
						if (arrow.node.async) this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
						return arrow.node;
					}
					arrowExpression = arrow.node;
				}
				if ((_jsx2 = jsx$1) != null && _jsx2.node) {
					this.state = jsx$1.failState;
					return jsx$1.node;
				}
				if (arrowExpression) {
					this.state = arrow.failState;
					return arrowExpression;
				}
				if ((_jsx3 = jsx$1) != null && _jsx3.thrown) throw jsx$1.error;
				if (arrow.thrown) throw arrow.error;
				throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
			}
			return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
		}
		parseArrow(node) {
			if (this.match(14)) {
				const result = this.tryParse(() => {
					const oldNoAnonFunctionType = this.state.noAnonFunctionType;
					this.state.noAnonFunctionType = true;
					const typeNode = this.startNode();
					[typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
					this.state.noAnonFunctionType = oldNoAnonFunctionType;
					if (this.canInsertSemicolon()) this.unexpected();
					if (!this.match(19)) this.unexpected();
					return typeNode;
				});
				if (result.thrown) return null;
				if (result.error) this.state = result.failState;
				node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
			}
			return super.parseArrow(node);
		}
		shouldParseArrow(params) {
			return this.match(14) || super.shouldParseArrow(params);
		}
		setArrowFunctionParameters(node, params) {
			if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) node.params = params;
			else super.setArrowFunctionParameters(node, params);
		}
		checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
			if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) return;
			for (let i$6 = 0; i$6 < node.params.length; i$6++) if (this.isThisParam(node.params[i$6]) && i$6 > 0) this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i$6]);
			super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
		}
		parseParenAndDistinguishExpression(canBeArrow) {
			return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
		}
		parseSubscripts(base$1, startLoc, noCalls) {
			if (base$1.type === "Identifier" && base$1.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {
				this.next();
				const node = this.startNodeAt(startLoc);
				node.callee = base$1;
				node.arguments = super.parseCallExpressionArguments(11);
				base$1 = this.finishNode(node, "CallExpression");
			} else if (base$1.type === "Identifier" && base$1.name === "async" && this.match(47)) {
				const state = this.state.clone();
				const arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
				if (!arrow.error && !arrow.aborted) return arrow.node;
				const result = this.tryParse(() => super.parseSubscripts(base$1, startLoc, noCalls), state);
				if (result.node && !result.error) return result.node;
				if (arrow.node) {
					this.state = arrow.failState;
					return arrow.node;
				}
				if (result.node) {
					this.state = result.failState;
					return result.node;
				}
				throw arrow.error || result.error;
			}
			return super.parseSubscripts(base$1, startLoc, noCalls);
		}
		parseSubscript(base$1, startLoc, noCalls, subscriptState) {
			if (this.match(18) && this.isLookaheadToken_lt()) {
				subscriptState.optionalChainMember = true;
				if (noCalls) {
					subscriptState.stop = true;
					return base$1;
				}
				this.next();
				const node = this.startNodeAt(startLoc);
				node.callee = base$1;
				node.typeArguments = this.flowParseTypeParameterInstantiationInExpression();
				this.expect(10);
				node.arguments = this.parseCallExpressionArguments(11);
				node.optional = true;
				return this.finishCallExpression(node, true);
			} else if (!noCalls && this.shouldParseTypes() && (this.match(47) || this.match(51))) {
				const node = this.startNodeAt(startLoc);
				node.callee = base$1;
				const result = this.tryParse(() => {
					node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
					this.expect(10);
					node.arguments = super.parseCallExpressionArguments(11);
					if (subscriptState.optionalChainMember) node.optional = false;
					return this.finishCallExpression(node, subscriptState.optionalChainMember);
				});
				if (result.node) {
					if (result.error) this.state = result.failState;
					return result.node;
				}
			}
			return super.parseSubscript(base$1, startLoc, noCalls, subscriptState);
		}
		parseNewCallee(node) {
			super.parseNewCallee(node);
			let targs = null;
			if (this.shouldParseTypes() && this.match(47)) targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
			node.typeArguments = targs;
		}
		parseAsyncArrowWithTypeParameters(startLoc) {
			const node = this.startNodeAt(startLoc);
			this.parseFunctionParams(node, false);
			if (!this.parseArrow(node)) return;
			return super.parseArrowExpression(node, void 0, true);
		}
		readToken_mult_modulo(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (code$1 === 42 && next === 47 && this.state.hasFlowComment) {
				this.state.hasFlowComment = false;
				this.state.pos += 2;
				this.nextToken();
				return;
			}
			super.readToken_mult_modulo(code$1);
		}
		readToken_pipe_amp(code$1) {
			const next = this.input.charCodeAt(this.state.pos + 1);
			if (code$1 === 124 && next === 125) {
				this.finishOp(9, 2);
				return;
			}
			super.readToken_pipe_amp(code$1);
		}
		parseTopLevel(file$2, program$3) {
			const fileNode = super.parseTopLevel(file$2, program$3);
			if (this.state.hasFlowComment) this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
			return fileNode;
		}
		skipBlockComment() {
			if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
				if (this.state.hasFlowComment) throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
				this.hasFlowCommentCompletion();
				const commentSkip = this.skipFlowComment();
				if (commentSkip) {
					this.state.pos += commentSkip;
					this.state.hasFlowComment = true;
				}
				return;
			}
			return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
		}
		skipFlowComment() {
			const { pos } = this.state;
			let shiftToFirstNonWhiteSpace = 2;
			while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) shiftToFirstNonWhiteSpace++;
			const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
			const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
			if (ch2 === 58 && ch3 === 58) return shiftToFirstNonWhiteSpace + 2;
			if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") return shiftToFirstNonWhiteSpace + 12;
			if (ch2 === 58 && ch3 !== 58) return shiftToFirstNonWhiteSpace;
			return false;
		}
		hasFlowCommentCompletion() {
			const end = this.input.indexOf("*/", this.state.pos);
			if (end === -1) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
		}
		flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
			this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
				memberName,
				enumName
			});
		}
		flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
			return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
		}
		flowEnumErrorNumberMemberNotInitialized(loc, details) {
			this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
		}
		flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
			this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
		}
		flowEnumMemberInit() {
			const startLoc = this.state.startLoc;
			const endOfInit = () => this.match(12) || this.match(8);
			switch (this.state.type) {
				case 135: {
					const literal = this.parseNumericLiteral(this.state.value);
					if (endOfInit()) return {
						type: "number",
						loc: literal.loc.start,
						value: literal
					};
					return {
						type: "invalid",
						loc: startLoc
					};
				}
				case 134: {
					const literal = this.parseStringLiteral(this.state.value);
					if (endOfInit()) return {
						type: "string",
						loc: literal.loc.start,
						value: literal
					};
					return {
						type: "invalid",
						loc: startLoc
					};
				}
				case 85:
				case 86: {
					const literal = this.parseBooleanLiteral(this.match(85));
					if (endOfInit()) return {
						type: "boolean",
						loc: literal.loc.start,
						value: literal
					};
					return {
						type: "invalid",
						loc: startLoc
					};
				}
				default: return {
					type: "invalid",
					loc: startLoc
				};
			}
		}
		flowEnumMemberRaw() {
			const loc = this.state.startLoc;
			const id$4 = this.parseIdentifier(true);
			const init$1 = this.eat(29) ? this.flowEnumMemberInit() : {
				type: "none",
				loc
			};
			return {
				id: id$4,
				init: init$1
			};
		}
		flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
			const { explicitType } = context;
			if (explicitType === null) return;
			if (explicitType !== expectedType) this.flowEnumErrorInvalidMemberInitializer(loc, context);
		}
		flowEnumMembers({ enumName, explicitType }) {
			const seenNames = new Set();
			const members = {
				booleanMembers: [],
				numberMembers: [],
				stringMembers: [],
				defaultedMembers: []
			};
			let hasUnknownMembers = false;
			while (!this.match(8)) {
				if (this.eat(21)) {
					hasUnknownMembers = true;
					break;
				}
				const memberNode = this.startNode();
				const { id: id$4, init: init$1 } = this.flowEnumMemberRaw();
				const memberName = id$4.name;
				if (memberName === "") continue;
				if (/^[a-z]/.test(memberName)) this.raise(FlowErrors.EnumInvalidMemberName, id$4, {
					memberName,
					suggestion: memberName[0].toUpperCase() + memberName.slice(1),
					enumName
				});
				if (seenNames.has(memberName)) this.raise(FlowErrors.EnumDuplicateMemberName, id$4, {
					memberName,
					enumName
				});
				seenNames.add(memberName);
				const context = {
					enumName,
					explicitType,
					memberName
				};
				memberNode.id = id$4;
				switch (init$1.type) {
					case "boolean": {
						this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "boolean");
						memberNode.init = init$1.value;
						members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
						break;
					}
					case "number": {
						this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "number");
						memberNode.init = init$1.value;
						members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
						break;
					}
					case "string": {
						this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "string");
						memberNode.init = init$1.value;
						members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
						break;
					}
					case "invalid": throw this.flowEnumErrorInvalidMemberInitializer(init$1.loc, context);
					case "none": switch (explicitType) {
						case "boolean":
							this.flowEnumErrorBooleanMemberNotInitialized(init$1.loc, context);
							break;
						case "number":
							this.flowEnumErrorNumberMemberNotInitialized(init$1.loc, context);
							break;
						default: members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
					}
				}
				if (!this.match(8)) this.expect(12);
			}
			return {
				members,
				hasUnknownMembers
			};
		}
		flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
			if (initializedMembers.length === 0) return defaultedMembers;
			else if (defaultedMembers.length === 0) return initializedMembers;
			else if (defaultedMembers.length > initializedMembers.length) {
				for (const member of initializedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
				return defaultedMembers;
			} else {
				for (const member of defaultedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
				return initializedMembers;
			}
		}
		flowEnumParseExplicitType({ enumName }) {
			if (!this.eatContextual(102)) return null;
			if (!tokenIsIdentifier(this.state.type)) throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName });
			const { value } = this.state;
			this.next();
			if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
				enumName,
				invalidEnumType: value
			});
			return value;
		}
		flowEnumBody(node, id$4) {
			const enumName = id$4.name;
			const nameLoc = id$4.loc.start;
			const explicitType = this.flowEnumParseExplicitType({ enumName });
			this.expect(5);
			const { members, hasUnknownMembers } = this.flowEnumMembers({
				enumName,
				explicitType
			});
			node.hasUnknownMembers = hasUnknownMembers;
			switch (explicitType) {
				case "boolean":
					node.explicitType = true;
					node.members = members.booleanMembers;
					this.expect(8);
					return this.finishNode(node, "EnumBooleanBody");
				case "number":
					node.explicitType = true;
					node.members = members.numberMembers;
					this.expect(8);
					return this.finishNode(node, "EnumNumberBody");
				case "string":
					node.explicitType = true;
					node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName });
					this.expect(8);
					return this.finishNode(node, "EnumStringBody");
				case "symbol":
					node.members = members.defaultedMembers;
					this.expect(8);
					return this.finishNode(node, "EnumSymbolBody");
				default: {
					const empty = () => {
						node.members = [];
						this.expect(8);
						return this.finishNode(node, "EnumStringBody");
					};
					node.explicitType = false;
					const boolsLen = members.booleanMembers.length;
					const numsLen = members.numberMembers.length;
					const strsLen = members.stringMembers.length;
					const defaultedLen = members.defaultedMembers.length;
					if (!boolsLen && !numsLen && !strsLen && !defaultedLen) return empty();
					else if (!boolsLen && !numsLen) {
						node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName });
						this.expect(8);
						return this.finishNode(node, "EnumStringBody");
					} else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
						for (const member of members.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
							enumName,
							memberName: member.id.name
						});
						node.members = members.booleanMembers;
						this.expect(8);
						return this.finishNode(node, "EnumBooleanBody");
					} else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
						for (const member of members.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
							enumName,
							memberName: member.id.name
						});
						node.members = members.numberMembers;
						this.expect(8);
						return this.finishNode(node, "EnumNumberBody");
					} else {
						this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, { enumName });
						return empty();
					}
				}
			}
		}
		flowParseEnumDeclaration(node) {
			const id$4 = this.parseIdentifier();
			node.id = id$4;
			node.body = this.flowEnumBody(this.startNode(), id$4);
			return this.finishNode(node, "EnumDeclaration");
		}
		jsxParseOpeningElementAfterName(node) {
			if (this.shouldParseTypes()) {
				if (this.match(47) || this.match(51)) node.typeArguments = this.flowParseTypeParameterInstantiationInExpression();
			}
			return super.jsxParseOpeningElementAfterName(node);
		}
		isLookaheadToken_lt() {
			const next = this.nextTokenStart();
			if (this.input.charCodeAt(next) === 60) {
				const afterNext = this.input.charCodeAt(next + 1);
				return afterNext !== 60 && afterNext !== 61;
			}
			return false;
		}
		reScan_lt_gt() {
			const { type } = this.state;
			if (type === 47) {
				this.state.pos -= 1;
				this.readToken_lt();
			} else if (type === 48) {
				this.state.pos -= 1;
				this.readToken_gt();
			}
		}
		reScan_lt() {
			const { type } = this.state;
			if (type === 51) {
				this.state.pos -= 2;
				this.finishOp(47, 1);
				return 47;
			}
			return type;
		}
		maybeUnwrapTypeCastExpression(node) {
			return node.type === "TypeCastExpression" ? node.expression : node;
		}
	};
	const entities = {
		__proto__: null,
		quot: "\"",
		amp: "&",
		apos: "'",
		lt: "<",
		gt: ">",
		nbsp: "\xA0",
		iexcl: "¡",
		cent: "¢",
		pound: "£",
		curren: "¤",
		yen: "¥",
		brvbar: "¦",
		sect: "§",
		uml: "¨",
		copy: "©",
		ordf: "ª",
		laquo: "«",
		not: "¬",
		shy: "­",
		reg: "®",
		macr: "¯",
		deg: "°",
		plusmn: "±",
		sup2: "²",
		sup3: "³",
		acute: "´",
		micro: "µ",
		para: "¶",
		middot: "·",
		cedil: "¸",
		sup1: "¹",
		ordm: "º",
		raquo: "»",
		frac14: "¼",
		frac12: "½",
		frac34: "¾",
		iquest: "¿",
		Agrave: "À",
		Aacute: "Á",
		Acirc: "Â",
		Atilde: "Ã",
		Auml: "Ä",
		Aring: "Å",
		AElig: "Æ",
		Ccedil: "Ç",
		Egrave: "È",
		Eacute: "É",
		Ecirc: "Ê",
		Euml: "Ë",
		Igrave: "Ì",
		Iacute: "Í",
		Icirc: "Î",
		Iuml: "Ï",
		ETH: "Ð",
		Ntilde: "Ñ",
		Ograve: "Ò",
		Oacute: "Ó",
		Ocirc: "Ô",
		Otilde: "Õ",
		Ouml: "Ö",
		times: "×",
		Oslash: "Ø",
		Ugrave: "Ù",
		Uacute: "Ú",
		Ucirc: "Û",
		Uuml: "Ü",
		Yacute: "Ý",
		THORN: "Þ",
		szlig: "ß",
		agrave: "à",
		aacute: "á",
		acirc: "â",
		atilde: "ã",
		auml: "ä",
		aring: "å",
		aelig: "æ",
		ccedil: "ç",
		egrave: "è",
		eacute: "é",
		ecirc: "ê",
		euml: "ë",
		igrave: "ì",
		iacute: "í",
		icirc: "î",
		iuml: "ï",
		eth: "ð",
		ntilde: "ñ",
		ograve: "ò",
		oacute: "ó",
		ocirc: "ô",
		otilde: "õ",
		ouml: "ö",
		divide: "÷",
		oslash: "ø",
		ugrave: "ù",
		uacute: "ú",
		ucirc: "û",
		uuml: "ü",
		yacute: "ý",
		thorn: "þ",
		yuml: "ÿ",
		OElig: "Œ",
		oelig: "œ",
		Scaron: "Š",
		scaron: "š",
		Yuml: "Ÿ",
		fnof: "ƒ",
		circ: "ˆ",
		tilde: "˜",
		Alpha: "Α",
		Beta: "Β",
		Gamma: "Γ",
		Delta: "Δ",
		Epsilon: "Ε",
		Zeta: "Ζ",
		Eta: "Η",
		Theta: "Θ",
		Iota: "Ι",
		Kappa: "Κ",
		Lambda: "Λ",
		Mu: "Μ",
		Nu: "Ν",
		Xi: "Ξ",
		Omicron: "Ο",
		Pi: "Π",
		Rho: "Ρ",
		Sigma: "Σ",
		Tau: "Τ",
		Upsilon: "Υ",
		Phi: "Φ",
		Chi: "Χ",
		Psi: "Ψ",
		Omega: "Ω",
		alpha: "α",
		beta: "β",
		gamma: "γ",
		delta: "δ",
		epsilon: "ε",
		zeta: "ζ",
		eta: "η",
		theta: "θ",
		iota: "ι",
		kappa: "κ",
		lambda: "λ",
		mu: "μ",
		nu: "ν",
		xi: "ξ",
		omicron: "ο",
		pi: "π",
		rho: "ρ",
		sigmaf: "ς",
		sigma: "σ",
		tau: "τ",
		upsilon: "υ",
		phi: "φ",
		chi: "χ",
		psi: "ψ",
		omega: "ω",
		thetasym: "ϑ",
		upsih: "ϒ",
		piv: "ϖ",
		ensp: " ",
		emsp: " ",
		thinsp: " ",
		zwnj: "‌",
		zwj: "‍",
		lrm: "‎",
		rlm: "‏",
		ndash: "–",
		mdash: "—",
		lsquo: "‘",
		rsquo: "’",
		sbquo: "‚",
		ldquo: "“",
		rdquo: "”",
		bdquo: "„",
		dagger: "†",
		Dagger: "‡",
		bull: "•",
		hellip: "…",
		permil: "‰",
		prime: "′",
		Prime: "″",
		lsaquo: "‹",
		rsaquo: "›",
		oline: "‾",
		frasl: "⁄",
		euro: "€",
		image: "ℑ",
		weierp: "℘",
		real: "ℜ",
		trade: "™",
		alefsym: "ℵ",
		larr: "←",
		uarr: "↑",
		rarr: "→",
		darr: "↓",
		harr: "↔",
		crarr: "↵",
		lArr: "⇐",
		uArr: "⇑",
		rArr: "⇒",
		dArr: "⇓",
		hArr: "⇔",
		forall: "∀",
		part: "∂",
		exist: "∃",
		empty: "∅",
		nabla: "∇",
		isin: "∈",
		notin: "∉",
		ni: "∋",
		prod: "∏",
		sum: "∑",
		minus: "−",
		lowast: "∗",
		radic: "√",
		prop: "∝",
		infin: "∞",
		ang: "∠",
		and: "∧",
		or: "∨",
		cap: "∩",
		cup: "∪",
		int: "∫",
		there4: "∴",
		sim: "∼",
		cong: "≅",
		asymp: "≈",
		ne: "≠",
		equiv: "≡",
		le: "≤",
		ge: "≥",
		sub: "⊂",
		sup: "⊃",
		nsub: "⊄",
		sube: "⊆",
		supe: "⊇",
		oplus: "⊕",
		otimes: "⊗",
		perp: "⊥",
		sdot: "⋅",
		lceil: "⌈",
		rceil: "⌉",
		lfloor: "⌊",
		rfloor: "⌋",
		lang: "〈",
		rang: "〉",
		loz: "◊",
		spades: "♠",
		clubs: "♣",
		hearts: "♥",
		diams: "♦"
	};
	const JsxErrors = ParseErrorEnum`jsx`({
		AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
		MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
		MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
		UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
		UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
		UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
		UnterminatedJsxContent: "Unterminated JSX contents.",
		UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
	});
	function isFragment(object$2) {
		return object$2 ? object$2.type === "JSXOpeningFragment" || object$2.type === "JSXClosingFragment" : false;
	}
	function getQualifiedJSXName(object$2) {
		if (object$2.type === "JSXIdentifier") return object$2.name;
		if (object$2.type === "JSXNamespacedName") return object$2.namespace.name + ":" + object$2.name.name;
		if (object$2.type === "JSXMemberExpression") return getQualifiedJSXName(object$2.object) + "." + getQualifiedJSXName(object$2.property);
		throw new Error("Node had unexpected type: " + object$2.type);
	}
	var jsx = (superClass) => class JSXParserMixin extends superClass {
		jsxReadToken() {
			let out = "";
			let chunkStart = this.state.pos;
			for (;;) {
				if (this.state.pos >= this.length) throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
				const ch = this.input.charCodeAt(this.state.pos);
				switch (ch) {
					case 60:
					case 123:
						if (this.state.pos === this.state.start) {
							if (ch === 60 && this.state.canStartJSXElement) {
								++this.state.pos;
								this.finishToken(143);
							} else super.getTokenFromCode(ch);
							return;
						}
						out += this.input.slice(chunkStart, this.state.pos);
						this.finishToken(142, out);
						return;
					case 38:
						out += this.input.slice(chunkStart, this.state.pos);
						out += this.jsxReadEntity();
						chunkStart = this.state.pos;
						break;
					case 62:
					case 125:
					default: if (isNewLine(ch)) {
						out += this.input.slice(chunkStart, this.state.pos);
						out += this.jsxReadNewLine(true);
						chunkStart = this.state.pos;
					} else ++this.state.pos;
				}
			}
		}
		jsxReadNewLine(normalizeCRLF) {
			const ch = this.input.charCodeAt(this.state.pos);
			let out;
			++this.state.pos;
			if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
				++this.state.pos;
				out = normalizeCRLF ? "\n" : "\r\n";
			} else out = String.fromCharCode(ch);
			++this.state.curLine;
			this.state.lineStart = this.state.pos;
			return out;
		}
		jsxReadString(quote) {
			let out = "";
			let chunkStart = ++this.state.pos;
			for (;;) {
				if (this.state.pos >= this.length) throw this.raise(Errors.UnterminatedString, this.state.startLoc);
				const ch = this.input.charCodeAt(this.state.pos);
				if (ch === quote) break;
				if (ch === 38) {
					out += this.input.slice(chunkStart, this.state.pos);
					out += this.jsxReadEntity();
					chunkStart = this.state.pos;
				} else if (isNewLine(ch)) {
					out += this.input.slice(chunkStart, this.state.pos);
					out += this.jsxReadNewLine(false);
					chunkStart = this.state.pos;
				} else ++this.state.pos;
			}
			out += this.input.slice(chunkStart, this.state.pos++);
			this.finishToken(134, out);
		}
		jsxReadEntity() {
			const startPos = ++this.state.pos;
			if (this.codePointAtPos(this.state.pos) === 35) {
				++this.state.pos;
				let radix = 10;
				if (this.codePointAtPos(this.state.pos) === 120) {
					radix = 16;
					++this.state.pos;
				}
				const codePoint = this.readInt(radix, void 0, false, "bail");
				if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
					++this.state.pos;
					return String.fromCodePoint(codePoint);
				}
			} else {
				let count = 0;
				let semi = false;
				while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) ++this.state.pos;
				if (semi) {
					const desc = this.input.slice(startPos, this.state.pos);
					const entity = entities[desc];
					++this.state.pos;
					if (entity) return entity;
				}
			}
			this.state.pos = startPos;
			return "&";
		}
		jsxReadWord() {
			let ch;
			const start = this.state.pos;
			do
				ch = this.input.charCodeAt(++this.state.pos);
			while (isIdentifierChar$1(ch) || ch === 45);
			this.finishToken(141, this.input.slice(start, this.state.pos));
		}
		jsxParseIdentifier() {
			const node = this.startNode();
			if (this.match(141)) node.name = this.state.value;
			else if (tokenIsKeyword(this.state.type)) node.name = tokenLabelName(this.state.type);
			else this.unexpected();
			this.next();
			return this.finishNode(node, "JSXIdentifier");
		}
		jsxParseNamespacedName() {
			const startLoc = this.state.startLoc;
			const name = this.jsxParseIdentifier();
			if (!this.eat(14)) return name;
			const node = this.startNodeAt(startLoc);
			node.namespace = name;
			node.name = this.jsxParseIdentifier();
			return this.finishNode(node, "JSXNamespacedName");
		}
		jsxParseElementName() {
			const startLoc = this.state.startLoc;
			let node = this.jsxParseNamespacedName();
			if (node.type === "JSXNamespacedName") return node;
			while (this.eat(16)) {
				const newNode = this.startNodeAt(startLoc);
				newNode.object = node;
				newNode.property = this.jsxParseIdentifier();
				node = this.finishNode(newNode, "JSXMemberExpression");
			}
			return node;
		}
		jsxParseAttributeValue() {
			let node;
			switch (this.state.type) {
				case 5:
					node = this.startNode();
					this.setContext(types$6.brace);
					this.next();
					node = this.jsxParseExpressionContainer(node, types$6.j_oTag);
					if (node.expression.type === "JSXEmptyExpression") this.raise(JsxErrors.AttributeIsEmpty, node);
					return node;
				case 143:
				case 134: return this.parseExprAtom();
				default: throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
			}
		}
		jsxParseEmptyExpression() {
			const node = this.startNodeAt(this.state.lastTokEndLoc);
			return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
		}
		jsxParseSpreadChild(node) {
			this.next();
			node.expression = this.parseExpression();
			this.setContext(types$6.j_expr);
			this.state.canStartJSXElement = true;
			this.expect(8);
			return this.finishNode(node, "JSXSpreadChild");
		}
		jsxParseExpressionContainer(node, previousContext) {
			if (this.match(8)) node.expression = this.jsxParseEmptyExpression();
			else {
				const expression$2 = this.parseExpression();
				node.expression = expression$2;
			}
			this.setContext(previousContext);
			this.state.canStartJSXElement = true;
			this.expect(8);
			return this.finishNode(node, "JSXExpressionContainer");
		}
		jsxParseAttribute() {
			const node = this.startNode();
			if (this.match(5)) {
				this.setContext(types$6.brace);
				this.next();
				this.expect(21);
				node.argument = this.parseMaybeAssignAllowIn();
				this.setContext(types$6.j_oTag);
				this.state.canStartJSXElement = true;
				this.expect(8);
				return this.finishNode(node, "JSXSpreadAttribute");
			}
			node.name = this.jsxParseNamespacedName();
			node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
			return this.finishNode(node, "JSXAttribute");
		}
		jsxParseOpeningElementAt(startLoc) {
			const node = this.startNodeAt(startLoc);
			if (this.eat(144)) return this.finishNode(node, "JSXOpeningFragment");
			node.name = this.jsxParseElementName();
			return this.jsxParseOpeningElementAfterName(node);
		}
		jsxParseOpeningElementAfterName(node) {
			const attributes = [];
			while (!this.match(56) && !this.match(144)) attributes.push(this.jsxParseAttribute());
			node.attributes = attributes;
			node.selfClosing = this.eat(56);
			this.expect(144);
			return this.finishNode(node, "JSXOpeningElement");
		}
		jsxParseClosingElementAt(startLoc) {
			const node = this.startNodeAt(startLoc);
			if (this.eat(144)) return this.finishNode(node, "JSXClosingFragment");
			node.name = this.jsxParseElementName();
			this.expect(144);
			return this.finishNode(node, "JSXClosingElement");
		}
		jsxParseElementAt(startLoc) {
			const node = this.startNodeAt(startLoc);
			const children = [];
			const openingElement = this.jsxParseOpeningElementAt(startLoc);
			let closingElement = null;
			if (!openingElement.selfClosing) {
				contents: for (;;) switch (this.state.type) {
					case 143:
						startLoc = this.state.startLoc;
						this.next();
						if (this.eat(56)) {
							closingElement = this.jsxParseClosingElementAt(startLoc);
							break contents;
						}
						children.push(this.jsxParseElementAt(startLoc));
						break;
					case 142:
						children.push(this.parseLiteral(this.state.value, "JSXText"));
						break;
					case 5: {
						const node$1 = this.startNode();
						this.setContext(types$6.brace);
						this.next();
						if (this.match(21)) children.push(this.jsxParseSpreadChild(node$1));
						else children.push(this.jsxParseExpressionContainer(node$1, types$6.j_expr));
						break;
					}
					default: this.unexpected();
				}
				if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
				else if (!isFragment(openingElement) && isFragment(closingElement)) this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
				else if (!isFragment(openingElement) && !isFragment(closingElement)) {
					if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
				}
			}
			if (isFragment(openingElement)) {
				node.openingFragment = openingElement;
				node.closingFragment = closingElement;
			} else {
				node.openingElement = openingElement;
				node.closingElement = closingElement;
			}
			node.children = children;
			if (this.match(47)) throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
			return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
		}
		jsxParseElement() {
			const startLoc = this.state.startLoc;
			this.next();
			return this.jsxParseElementAt(startLoc);
		}
		setContext(newContext) {
			const { context } = this.state;
			context[context.length - 1] = newContext;
		}
		parseExprAtom(refExpressionErrors) {
			if (this.match(143)) return this.jsxParseElement();
			else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
				this.replaceToken(143);
				return this.jsxParseElement();
			} else return super.parseExprAtom(refExpressionErrors);
		}
		skipSpace() {
			const curContext = this.curContext();
			if (!curContext.preserveSpace) super.skipSpace();
		}
		getTokenFromCode(code$1) {
			const context = this.curContext();
			if (context === types$6.j_expr) {
				this.jsxReadToken();
				return;
			}
			if (context === types$6.j_oTag || context === types$6.j_cTag) {
				if (isIdentifierStart$1(code$1)) {
					this.jsxReadWord();
					return;
				}
				if (code$1 === 62) {
					++this.state.pos;
					this.finishToken(144);
					return;
				}
				if ((code$1 === 34 || code$1 === 39) && context === types$6.j_oTag) {
					this.jsxReadString(code$1);
					return;
				}
			}
			if (code$1 === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
				++this.state.pos;
				this.finishToken(143);
				return;
			}
			super.getTokenFromCode(code$1);
		}
		updateContext(prevType) {
			const { context, type } = this.state;
			if (type === 56 && prevType === 143) {
				context.splice(-2, 2, types$6.j_cTag);
				this.state.canStartJSXElement = false;
			} else if (type === 143) context.push(types$6.j_oTag);
			else if (type === 144) {
				const out = context[context.length - 1];
				if (out === types$6.j_oTag && prevType === 56 || out === types$6.j_cTag) {
					context.pop();
					this.state.canStartJSXElement = context[context.length - 1] === types$6.j_expr;
				} else {
					this.setContext(types$6.j_expr);
					this.state.canStartJSXElement = true;
				}
			} else this.state.canStartJSXElement = tokenComesBeforeExpression(type);
		}
	};
	var TypeScriptScope = class extends Scope$2 {
		constructor(...args) {
			super(...args);
			this.tsNames = new Map();
		}
	};
	var TypeScriptScopeHandler = class extends ScopeHandler {
		constructor(...args) {
			super(...args);
			this.importsStack = [];
		}
		createScope(flags) {
			this.importsStack.push(new Set());
			return new TypeScriptScope(flags);
		}
		enter(flags) {
			if (flags === 256) this.importsStack.push(new Set());
			super.enter(flags);
		}
		exit() {
			const flags = super.exit();
			if (flags === 256) this.importsStack.pop();
			return flags;
		}
		hasImport(name, allowShadow) {
			const len = this.importsStack.length;
			if (this.importsStack[len - 1].has(name)) return true;
			if (!allowShadow && len > 1) {
				for (let i$6 = 0; i$6 < len - 1; i$6++) if (this.importsStack[i$6].has(name)) return true;
			}
			return false;
		}
		declareName(name, bindingType, loc) {
			if (bindingType & 4096) {
				if (this.hasImport(name, true)) this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
				this.importsStack[this.importsStack.length - 1].add(name);
				return;
			}
			const scope$1 = this.currentScope();
			let type = scope$1.tsNames.get(name) || 0;
			if (bindingType & 1024) {
				this.maybeExportDefined(scope$1, name);
				scope$1.tsNames.set(name, type | 16);
				return;
			}
			super.declareName(name, bindingType, loc);
			if (bindingType & 2) {
				if (!(bindingType & 1)) {
					this.checkRedeclarationInScope(scope$1, name, bindingType, loc);
					this.maybeExportDefined(scope$1, name);
				}
				type = type | 1;
			}
			if (bindingType & 256) type = type | 2;
			if (bindingType & 512) type = type | 4;
			if (bindingType & 128) type = type | 8;
			if (type) scope$1.tsNames.set(name, type);
		}
		isRedeclaredInScope(scope$1, name, bindingType) {
			const type = scope$1.tsNames.get(name);
			if ((type & 2) > 0) {
				if (bindingType & 256) {
					const isConst = !!(bindingType & 512);
					const wasConst = (type & 4) > 0;
					return isConst !== wasConst;
				}
				return true;
			}
			if (bindingType & 128 && (type & 8) > 0) if (scope$1.names.get(name) & 2) return !!(bindingType & 1);
			else return false;
			if (bindingType & 2 && (type & 1) > 0) return true;
			return super.isRedeclaredInScope(scope$1, name, bindingType);
		}
		checkLocalExport(id$4) {
			const { name } = id$4;
			if (this.hasImport(name)) return;
			const len = this.scopeStack.length;
			for (let i$6 = len - 1; i$6 >= 0; i$6--) {
				const scope$1 = this.scopeStack[i$6];
				const type = scope$1.tsNames.get(name);
				if ((type & 1) > 0 || (type & 16) > 0) return;
			}
			super.checkLocalExport(id$4);
		}
	};
	const unwrapParenthesizedExpression = (node) => {
		return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
	};
	var LValParser = class extends NodeUtils {
		toAssignable(node, isLHS = false) {
			var _node$extra, _node$extra3;
			let parenthesized = void 0;
			if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
				parenthesized = unwrapParenthesizedExpression(node);
				if (isLHS) {
					if (parenthesized.type === "Identifier") this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);
					else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) this.raise(Errors.InvalidParenthesizedAssignment, node);
				} else this.raise(Errors.InvalidParenthesizedAssignment, node);
			}
			switch (node.type) {
				case "Identifier":
				case "ObjectPattern":
				case "ArrayPattern":
				case "AssignmentPattern":
				case "RestElement": break;
				case "ObjectExpression":
					node.type = "ObjectPattern";
					for (let i$6 = 0, length = node.properties.length, last$2 = length - 1; i$6 < length; i$6++) {
						var _node$extra2;
						const prop = node.properties[i$6];
						const isLast = i$6 === last$2;
						this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
						if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
					}
					break;
				case "ObjectProperty": {
					const { key, value } = node;
					if (this.isPrivateName(key)) this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
					this.toAssignable(value, isLHS);
					break;
				}
				case "SpreadElement": throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
				case "ArrayExpression":
					node.type = "ArrayPattern";
					this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
					break;
				case "AssignmentExpression":
					if (node.operator !== "=") this.raise(Errors.MissingEqInAssignment, node.left.loc.end);
					node.type = "AssignmentPattern";
					delete node.operator;
					this.toAssignable(node.left, isLHS);
					break;
				case "ParenthesizedExpression":
					this.toAssignable(parenthesized, isLHS);
					break;
			}
		}
		toAssignableObjectExpressionProp(prop, isLast, isLHS) {
			if (prop.type === "ObjectMethod") this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
			else if (prop.type === "SpreadElement") {
				prop.type = "RestElement";
				const arg = prop.argument;
				this.checkToRestConversion(arg, false);
				this.toAssignable(arg, isLHS);
				if (!isLast) this.raise(Errors.RestTrailingComma, prop);
			} else this.toAssignable(prop, isLHS);
		}
		toAssignableList(exprList, trailingCommaLoc, isLHS) {
			const end = exprList.length - 1;
			for (let i$6 = 0; i$6 <= end; i$6++) {
				const elt = exprList[i$6];
				if (!elt) continue;
				this.toAssignableListItem(exprList, i$6, isLHS);
				if (elt.type === "RestElement") {
					if (i$6 < end) this.raise(Errors.RestTrailingComma, elt);
					else if (trailingCommaLoc) this.raise(Errors.RestTrailingComma, trailingCommaLoc);
				}
			}
		}
		toAssignableListItem(exprList, index$1, isLHS) {
			const node = exprList[index$1];
			if (node.type === "SpreadElement") {
				node.type = "RestElement";
				const arg = node.argument;
				this.checkToRestConversion(arg, true);
				this.toAssignable(arg, isLHS);
			} else this.toAssignable(node, isLHS);
		}
		isAssignable(node, isBinding$2) {
			switch (node.type) {
				case "Identifier":
				case "ObjectPattern":
				case "ArrayPattern":
				case "AssignmentPattern":
				case "RestElement": return true;
				case "ObjectExpression": {
					const last$2 = node.properties.length - 1;
					return node.properties.every((prop, i$6) => {
						return prop.type !== "ObjectMethod" && (i$6 === last$2 || prop.type !== "SpreadElement") && this.isAssignable(prop);
					});
				}
				case "ObjectProperty": return this.isAssignable(node.value);
				case "SpreadElement": return this.isAssignable(node.argument);
				case "ArrayExpression": return node.elements.every((element) => element === null || this.isAssignable(element));
				case "AssignmentExpression": return node.operator === "=";
				case "ParenthesizedExpression": return this.isAssignable(node.expression);
				case "MemberExpression":
				case "OptionalMemberExpression": return !isBinding$2;
				default: return false;
			}
		}
		toReferencedList(exprList, isParenthesizedExpr) {
			return exprList;
		}
		toReferencedListDeep(exprList, isParenthesizedExpr) {
			this.toReferencedList(exprList, isParenthesizedExpr);
			for (const expr of exprList) if ((expr == null ? void 0 : expr.type) === "ArrayExpression") this.toReferencedListDeep(expr.elements);
		}
		parseSpread(refExpressionErrors) {
			const node = this.startNode();
			this.next();
			node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0);
			return this.finishNode(node, "SpreadElement");
		}
		parseRestBinding() {
			const node = this.startNode();
			this.next();
			node.argument = this.parseBindingAtom();
			return this.finishNode(node, "RestElement");
		}
		parseBindingAtom() {
			switch (this.state.type) {
				case 0: {
					const node = this.startNode();
					this.next();
					node.elements = this.parseBindingList(3, 93, 1);
					return this.finishNode(node, "ArrayPattern");
				}
				case 5: return this.parseObjectLike(8, true);
			}
			return this.parseIdentifier();
		}
		parseBindingList(close, closeCharCode, flags) {
			const allowEmpty = flags & 1;
			const elts = [];
			let first = true;
			while (!this.eat(close)) {
				if (first) first = false;
				else this.expect(12);
				if (allowEmpty && this.match(12)) elts.push(null);
				else if (this.eat(close)) break;
				else if (this.match(21)) {
					let rest = this.parseRestBinding();
					if (this.hasPlugin("flow") || flags & 2) rest = this.parseFunctionParamType(rest);
					elts.push(rest);
					if (!this.checkCommaAfterRest(closeCharCode)) {
						this.expect(close);
						break;
					}
				} else {
					const decorators = [];
					if (flags & 2) {
						if (this.match(26) && this.hasPlugin("decorators")) this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
						while (this.match(26)) decorators.push(this.parseDecorator());
					}
					elts.push(this.parseBindingElement(flags, decorators));
				}
			}
			return elts;
		}
		parseBindingRestProperty(prop) {
			this.next();
			prop.argument = this.parseIdentifier();
			this.checkCommaAfterRest(125);
			return this.finishNode(prop, "RestElement");
		}
		parseBindingProperty() {
			const { type, startLoc } = this.state;
			if (type === 21) return this.parseBindingRestProperty(this.startNode());
			const prop = this.startNode();
			if (type === 139) {
				this.expectPlugin("destructuringPrivate", startLoc);
				this.classScope.usePrivateName(this.state.value, startLoc);
				prop.key = this.parsePrivateName();
			} else this.parsePropertyName(prop);
			prop.method = false;
			return this.parseObjPropValue(prop, startLoc, false, false, true, false);
		}
		parseBindingElement(flags, decorators) {
			const left = this.parseMaybeDefault();
			if (this.hasPlugin("flow") || flags & 2) this.parseFunctionParamType(left);
			const elt = this.parseMaybeDefault(left.loc.start, left);
			if (decorators.length) left.decorators = decorators;
			return elt;
		}
		parseFunctionParamType(param) {
			return param;
		}
		parseMaybeDefault(startLoc, left) {
			startLoc != null || (startLoc = this.state.startLoc);
			left = left != null ? left : this.parseBindingAtom();
			if (!this.eat(29)) return left;
			const node = this.startNodeAt(startLoc);
			node.left = left;
			node.right = this.parseMaybeAssignAllowIn();
			return this.finishNode(node, "AssignmentPattern");
		}
		isValidLVal(type, isUnparenthesizedInAssign, binding) {
			switch (type) {
				case "AssignmentPattern": return "left";
				case "RestElement": return "argument";
				case "ObjectProperty": return "value";
				case "ParenthesizedExpression": return "expression";
				case "ArrayPattern": return "elements";
				case "ObjectPattern": return "properties";
			}
			return false;
		}
		isOptionalMemberExpression(expression$2) {
			return expression$2.type === "OptionalMemberExpression";
		}
		checkLVal(expression$2, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
			var _expression$extra;
			const type = expression$2.type;
			if (this.isObjectMethod(expression$2)) return;
			const isOptionalMemberExpression$3 = this.isOptionalMemberExpression(expression$2);
			if (isOptionalMemberExpression$3 || type === "MemberExpression") {
				if (isOptionalMemberExpression$3) {
					this.expectPlugin("optionalChainingAssign", expression$2.loc.start);
					if (ancestor.type !== "AssignmentExpression") this.raise(Errors.InvalidLhsOptionalChaining, expression$2, { ancestor });
				}
				if (binding !== 64) this.raise(Errors.InvalidPropertyBindingPattern, expression$2);
				return;
			}
			if (type === "Identifier") {
				this.checkIdentifier(expression$2, binding, strictModeChanged);
				const { name } = expression$2;
				if (checkClashes) if (checkClashes.has(name)) this.raise(Errors.ParamDupe, expression$2);
				else checkClashes.add(name);
				return;
			}
			const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression$2.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
			if (validity === true) return;
			if (validity === false) {
				const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
				this.raise(ParseErrorClass, expression$2, { ancestor });
				return;
			}
			let key, isParenthesizedExpression$2;
			if (typeof validity === "string") {
				key = validity;
				isParenthesizedExpression$2 = type === "ParenthesizedExpression";
			} else [key, isParenthesizedExpression$2] = validity;
			const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? { type } : ancestor;
			const val = expression$2[key];
			if (Array.isArray(val)) {
				for (const child of val) if (child) this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression$2);
			} else if (val) this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression$2);
		}
		checkIdentifier(at$3, bindingType, strictModeChanged = false) {
			if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord$1(at$3.name, this.inModule) : isStrictBindOnlyReservedWord$1(at$3.name))) if (bindingType === 64) this.raise(Errors.StrictEvalArguments, at$3, { referenceName: at$3.name });
			else this.raise(Errors.StrictEvalArgumentsBinding, at$3, { bindingName: at$3.name });
			if (bindingType & 8192 && at$3.name === "let") this.raise(Errors.LetInLexicalBinding, at$3);
			if (!(bindingType & 64)) this.declareNameFromIdentifier(at$3, bindingType);
		}
		declareNameFromIdentifier(identifier$6, binding) {
			this.scope.declareName(identifier$6.name, binding, identifier$6.loc.start);
		}
		checkToRestConversion(node, allowPattern) {
			switch (node.type) {
				case "ParenthesizedExpression":
					this.checkToRestConversion(node.expression, allowPattern);
					break;
				case "Identifier":
				case "MemberExpression": break;
				case "ArrayExpression":
				case "ObjectExpression": if (allowPattern) break;
				default: this.raise(Errors.InvalidRestAssignmentPattern, node);
			}
		}
		checkCommaAfterRest(close) {
			if (!this.match(12)) return false;
			this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
			return true;
		}
	};
	function nonNull(x$1) {
		if (x$1 == null) throw new Error(`Unexpected ${x$1} value.`);
		return x$1;
	}
	function assert$4(x$1) {
		if (!x$1) throw new Error("Assert fail");
	}
	const TSErrors = ParseErrorEnum`typescript`({
		AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
		AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
		AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
		AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
		AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
		ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
		ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
		ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
		ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
		DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`,
		DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
		DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
		DuplicateAccessibilityModifier: ({ modifier }) => `Accessibility modifier already seen.`,
		DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`,
		EmptyHeritageClauseType: ({ token: token$1 }) => `'${token$1}' list cannot be empty.`,
		EmptyTypeArguments: "Type argument list cannot be empty.",
		EmptyTypeParameters: "Type parameter list cannot be empty.",
		ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
		ImportAliasHasImportType: "An import alias can not use 'import type'.",
		ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
		IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
		IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
		IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
		IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
		IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
		IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
		InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
		InvalidHeritageClauseType: ({ token: token$1 }) => `'${token$1}' list can only include identifiers or qualified-names with optional type arguments.`,
		InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,
		InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`,
		InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
		InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
		InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
		InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
		MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
		NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
		NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
		OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
		OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
		PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
		PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
		PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
		ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
		ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
		ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
		SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
		SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
		SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
		SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
		StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
		TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
		TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
		TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
		TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
		TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
		UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
		UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
		UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
		UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
		UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
		UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
		UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
	});
	function keywordTypeFromName(value) {
		switch (value) {
			case "any": return "TSAnyKeyword";
			case "boolean": return "TSBooleanKeyword";
			case "bigint": return "TSBigIntKeyword";
			case "never": return "TSNeverKeyword";
			case "number": return "TSNumberKeyword";
			case "object": return "TSObjectKeyword";
			case "string": return "TSStringKeyword";
			case "symbol": return "TSSymbolKeyword";
			case "undefined": return "TSUndefinedKeyword";
			case "unknown": return "TSUnknownKeyword";
			default: return void 0;
		}
	}
	function tsIsAccessModifier(modifier) {
		return modifier === "private" || modifier === "public" || modifier === "protected";
	}
	function tsIsVarianceAnnotations(modifier) {
		return modifier === "in" || modifier === "out";
	}
	var typescript = (superClass) => class TypeScriptParserMixin extends superClass {
		constructor(...args) {
			super(...args);
			this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
				allowedModifiers: ["in", "out"],
				disallowedModifiers: [
					"const",
					"public",
					"private",
					"protected",
					"readonly",
					"declare",
					"abstract",
					"override"
				],
				errorTemplate: TSErrors.InvalidModifierOnTypeParameter
			});
			this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
				allowedModifiers: ["const"],
				disallowedModifiers: ["in", "out"],
				errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
			});
			this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
				allowedModifiers: [
					"in",
					"out",
					"const"
				],
				disallowedModifiers: [
					"public",
					"private",
					"protected",
					"readonly",
					"declare",
					"abstract",
					"override"
				],
				errorTemplate: TSErrors.InvalidModifierOnTypeParameter
			});
		}
		getScopeHandler() {
			return TypeScriptScopeHandler;
		}
		tsIsIdentifier() {
			return tokenIsIdentifier(this.state.type);
		}
		tsTokenCanFollowModifier() {
			return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
		}
		tsNextTokenOnSameLineAndCanFollowModifier() {
			this.next();
			if (this.hasPrecedingLineBreak()) return false;
			return this.tsTokenCanFollowModifier();
		}
		tsNextTokenCanFollowModifier() {
			if (this.match(106)) {
				this.next();
				return this.tsTokenCanFollowModifier();
			}
			return this.tsNextTokenOnSameLineAndCanFollowModifier();
		}
		tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
			if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) return void 0;
			const modifier = this.state.value;
			if (allowedModifiers.includes(modifier)) {
				if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) return void 0;
				if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
			}
			return void 0;
		}
		tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
			const enforceOrder = (loc, modifier, before, after) => {
				if (modifier === before && modified[after]) this.raise(TSErrors.InvalidModifiersOrder, loc, { orderedModifiers: [before, after] });
			};
			const incompatible = (loc, modifier, mod1, mod2) => {
				if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) this.raise(TSErrors.IncompatibleModifiers, loc, { modifiers: [mod1, mod2] });
			};
			for (;;) {
				const { startLoc } = this.state;
				const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
				if (!modifier) break;
				if (tsIsAccessModifier(modifier)) if (modified.accessibility) this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, { modifier });
				else {
					enforceOrder(startLoc, modifier, modifier, "override");
					enforceOrder(startLoc, modifier, modifier, "static");
					enforceOrder(startLoc, modifier, modifier, "readonly");
					modified.accessibility = modifier;
				}
				else if (tsIsVarianceAnnotations(modifier)) {
					if (modified[modifier]) this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });
					modified[modifier] = true;
					enforceOrder(startLoc, modifier, "in", "out");
				} else {
					if (hasOwnProperty.call(modified, modifier)) this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });
					else {
						enforceOrder(startLoc, modifier, "static", "readonly");
						enforceOrder(startLoc, modifier, "static", "override");
						enforceOrder(startLoc, modifier, "override", "readonly");
						enforceOrder(startLoc, modifier, "abstract", "override");
						incompatible(startLoc, modifier, "declare", "override");
						incompatible(startLoc, modifier, "static", "abstract");
					}
					modified[modifier] = true;
				}
				if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) this.raise(errorTemplate, startLoc, { modifier });
			}
		}
		tsIsListTerminator(kind) {
			switch (kind) {
				case "EnumMembers":
				case "TypeMembers": return this.match(8);
				case "HeritageClauseElement": return this.match(5);
				case "TupleElementTypes": return this.match(3);
				case "TypeParametersOrArguments": return this.match(48);
			}
		}
		tsParseList(kind, parseElement$1) {
			const result = [];
			while (!this.tsIsListTerminator(kind)) result.push(parseElement$1());
			return result;
		}
		tsParseDelimitedList(kind, parseElement$1, refTrailingCommaPos) {
			return nonNull(this.tsParseDelimitedListWorker(kind, parseElement$1, true, refTrailingCommaPos));
		}
		tsParseDelimitedListWorker(kind, parseElement$1, expectSuccess, refTrailingCommaPos) {
			const result = [];
			let trailingCommaPos = -1;
			for (;;) {
				if (this.tsIsListTerminator(kind)) break;
				trailingCommaPos = -1;
				const element = parseElement$1();
				if (element == null) return void 0;
				result.push(element);
				if (this.eat(12)) {
					trailingCommaPos = this.state.lastTokStartLoc.index;
					continue;
				}
				if (this.tsIsListTerminator(kind)) break;
				if (expectSuccess) this.expect(12);
				return void 0;
			}
			if (refTrailingCommaPos) refTrailingCommaPos.value = trailingCommaPos;
			return result;
		}
		tsParseBracketedList(kind, parseElement$1, bracket, skipFirstToken, refTrailingCommaPos) {
			if (!skipFirstToken) if (bracket) this.expect(0);
			else this.expect(47);
			const result = this.tsParseDelimitedList(kind, parseElement$1, refTrailingCommaPos);
			if (bracket) this.expect(3);
			else this.expect(48);
			return result;
		}
		tsParseImportType() {
			const node = this.startNode();
			this.expect(83);
			this.expect(10);
			if (!this.match(134)) {
				this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
				node.argument = super.parseExprAtom();
			} else node.argument = this.parseStringLiteral(this.state.value);
			if (this.eat(12) && !this.match(11)) {
				node.options = super.parseMaybeAssignAllowIn();
				this.eat(12);
			} else node.options = null;
			this.expect(11);
			if (this.eat(16)) node.qualifier = this.tsParseEntityName(3);
			if (this.match(47)) node.typeParameters = this.tsParseTypeArguments();
			return this.finishNode(node, "TSImportType");
		}
		tsParseEntityName(flags) {
			let entity;
			if (flags & 1 && this.match(78)) if (flags & 2) entity = this.parseIdentifier(true);
			else {
				const node = this.startNode();
				this.next();
				entity = this.finishNode(node, "ThisExpression");
			}
			else entity = this.parseIdentifier(!!(flags & 1));
			while (this.eat(16)) {
				const node = this.startNodeAtNode(entity);
				node.left = entity;
				node.right = this.parseIdentifier(!!(flags & 1));
				entity = this.finishNode(node, "TSQualifiedName");
			}
			return entity;
		}
		tsParseTypeReference() {
			const node = this.startNode();
			node.typeName = this.tsParseEntityName(1);
			if (!this.hasPrecedingLineBreak() && this.match(47)) node.typeParameters = this.tsParseTypeArguments();
			return this.finishNode(node, "TSTypeReference");
		}
		tsParseThisTypePredicate(lhs) {
			this.next();
			const node = this.startNodeAtNode(lhs);
			node.parameterName = lhs;
			node.typeAnnotation = this.tsParseTypeAnnotation(false);
			node.asserts = false;
			return this.finishNode(node, "TSTypePredicate");
		}
		tsParseThisTypeNode() {
			const node = this.startNode();
			this.next();
			return this.finishNode(node, "TSThisType");
		}
		tsParseTypeQuery() {
			const node = this.startNode();
			this.expect(87);
			if (this.match(83)) node.exprName = this.tsParseImportType();
			else node.exprName = this.tsParseEntityName(3);
			if (!this.hasPrecedingLineBreak() && this.match(47)) node.typeParameters = this.tsParseTypeArguments();
			return this.finishNode(node, "TSTypeQuery");
		}
		tsParseTypeParameter(parseModifiers) {
			const node = this.startNode();
			parseModifiers(node);
			node.name = this.tsParseTypeParameterName();
			node.constraint = this.tsEatThenParseType(81);
			node.default = this.tsEatThenParseType(29);
			return this.finishNode(node, "TSTypeParameter");
		}
		tsTryParseTypeParameters(parseModifiers) {
			if (this.match(47)) return this.tsParseTypeParameters(parseModifiers);
		}
		tsParseTypeParameters(parseModifiers) {
			const node = this.startNode();
			if (this.match(47) || this.match(143)) this.next();
			else this.unexpected();
			const refTrailingCommaPos = { value: -1 };
			node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
			if (node.params.length === 0) this.raise(TSErrors.EmptyTypeParameters, node);
			if (refTrailingCommaPos.value !== -1) this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
			return this.finishNode(node, "TSTypeParameterDeclaration");
		}
		tsFillSignature(returnToken, signature) {
			const returnTokenRequired = returnToken === 19;
			const paramsKey = "parameters";
			const returnTypeKey = "typeAnnotation";
			signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
			this.expect(10);
			signature[paramsKey] = this.tsParseBindingListForSignature();
			if (returnTokenRequired) signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
			else if (this.match(returnToken)) signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
		}
		tsParseBindingListForSignature() {
			const list$4 = super.parseBindingList(11, 41, 2);
			for (const pattern of list$4) {
				const { type } = pattern;
				if (type === "AssignmentPattern" || type === "TSParameterProperty") this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, { type });
			}
			return list$4;
		}
		tsParseTypeMemberSemicolon() {
			if (!this.eat(12) && !this.isLineTerminator()) this.expect(13);
		}
		tsParseSignatureMember(kind, node) {
			this.tsFillSignature(14, node);
			this.tsParseTypeMemberSemicolon();
			return this.finishNode(node, kind);
		}
		tsIsUnambiguouslyIndexSignature() {
			this.next();
			if (tokenIsIdentifier(this.state.type)) {
				this.next();
				return this.match(14);
			}
			return false;
		}
		tsTryParseIndexSignature(node) {
			if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) return;
			this.expect(0);
			const id$4 = this.parseIdentifier();
			id$4.typeAnnotation = this.tsParseTypeAnnotation();
			this.resetEndLocation(id$4);
			this.expect(3);
			node.parameters = [id$4];
			const type = this.tsTryParseTypeAnnotation();
			if (type) node.typeAnnotation = type;
			this.tsParseTypeMemberSemicolon();
			return this.finishNode(node, "TSIndexSignature");
		}
		tsParsePropertyOrMethodSignature(node, readonly) {
			if (this.eat(17)) node.optional = true;
			const nodeAny = node;
			if (this.match(10) || this.match(47)) {
				if (readonly) this.raise(TSErrors.ReadonlyForMethodSignature, node);
				const method = nodeAny;
				if (method.kind && this.match(47)) this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition());
				this.tsFillSignature(14, method);
				this.tsParseTypeMemberSemicolon();
				const paramsKey = "parameters";
				const returnTypeKey = "typeAnnotation";
				if (method.kind === "get") {
					if (method[paramsKey].length > 0) {
						this.raise(Errors.BadGetterArity, this.state.curPosition());
						if (this.isThisParam(method[paramsKey][0])) this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());
					}
				} else if (method.kind === "set") {
					if (method[paramsKey].length !== 1) this.raise(Errors.BadSetterArity, this.state.curPosition());
					else {
						const firstParameter = method[paramsKey][0];
						if (this.isThisParam(firstParameter)) this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());
						if (firstParameter.type === "Identifier" && firstParameter.optional) this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition());
						if (firstParameter.type === "RestElement") this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
					}
					if (method[returnTypeKey]) this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
				} else method.kind = "method";
				return this.finishNode(method, "TSMethodSignature");
			} else {
				const property = nodeAny;
				if (readonly) property.readonly = true;
				const type = this.tsTryParseTypeAnnotation();
				if (type) property.typeAnnotation = type;
				this.tsParseTypeMemberSemicolon();
				return this.finishNode(property, "TSPropertySignature");
			}
		}
		tsParseTypeMember() {
			const node = this.startNode();
			if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
			if (this.match(77)) {
				const id$4 = this.startNode();
				this.next();
				if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
				else {
					node.key = this.createIdentifier(id$4, "new");
					return this.tsParsePropertyOrMethodSignature(node, false);
				}
			}
			this.tsParseModifiers({
				allowedModifiers: ["readonly"],
				disallowedModifiers: [
					"declare",
					"abstract",
					"private",
					"protected",
					"public",
					"static",
					"override"
				]
			}, node);
			const idx = this.tsTryParseIndexSignature(node);
			if (idx) return idx;
			super.parsePropertyName(node);
			if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
				node.kind = node.key.name;
				super.parsePropertyName(node);
			}
			return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
		}
		tsParseTypeLiteral() {
			const node = this.startNode();
			node.members = this.tsParseObjectTypeMembers();
			return this.finishNode(node, "TSTypeLiteral");
		}
		tsParseObjectTypeMembers() {
			this.expect(5);
			const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
			this.expect(8);
			return members;
		}
		tsIsStartOfMappedType() {
			this.next();
			if (this.eat(53)) return this.isContextual(122);
			if (this.isContextual(122)) this.next();
			if (!this.match(0)) return false;
			this.next();
			if (!this.tsIsIdentifier()) return false;
			this.next();
			return this.match(58);
		}
		tsParseMappedType() {
			const node = this.startNode();
			this.expect(5);
			if (this.match(53)) {
				node.readonly = this.state.value;
				this.next();
				this.expectContextual(122);
			} else if (this.eatContextual(122)) node.readonly = true;
			this.expect(0);
			{
				const typeParameter$1 = this.startNode();
				typeParameter$1.name = this.tsParseTypeParameterName();
				typeParameter$1.constraint = this.tsExpectThenParseType(58);
				node.typeParameter = this.finishNode(typeParameter$1, "TSTypeParameter");
			}
			node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
			this.expect(3);
			if (this.match(53)) {
				node.optional = this.state.value;
				this.next();
				this.expect(17);
			} else if (this.eat(17)) node.optional = true;
			node.typeAnnotation = this.tsTryParseType();
			this.semicolon();
			this.expect(8);
			return this.finishNode(node, "TSMappedType");
		}
		tsParseTupleType() {
			const node = this.startNode();
			node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
			let seenOptionalElement = false;
			node.elementTypes.forEach((elementNode) => {
				const { type } = elementNode;
				if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
				seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
			});
			return this.finishNode(node, "TSTupleType");
		}
		tsParseTupleElementType() {
			const restStartLoc = this.state.startLoc;
			const rest = this.eat(21);
			const { startLoc } = this.state;
			let labeled;
			let label;
			let optional;
			let type;
			const isWord = tokenIsKeywordOrIdentifier(this.state.type);
			const chAfterWord = isWord ? this.lookaheadCharCode() : null;
			if (chAfterWord === 58) {
				labeled = true;
				optional = false;
				label = this.parseIdentifier(true);
				this.expect(14);
				type = this.tsParseType();
			} else if (chAfterWord === 63) {
				optional = true;
				const wordName = this.state.value;
				const typeOrLabel = this.tsParseNonArrayType();
				if (this.lookaheadCharCode() === 58) {
					labeled = true;
					label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
					this.expect(17);
					this.expect(14);
					type = this.tsParseType();
				} else {
					labeled = false;
					type = typeOrLabel;
					this.expect(17);
				}
			} else {
				type = this.tsParseType();
				optional = this.eat(17);
				labeled = this.eat(14);
			}
			if (labeled) {
				let labeledNode;
				if (label) {
					labeledNode = this.startNodeAt(startLoc);
					labeledNode.optional = optional;
					labeledNode.label = label;
					labeledNode.elementType = type;
					if (this.eat(17)) {
						labeledNode.optional = true;
						this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
					}
				} else {
					labeledNode = this.startNodeAt(startLoc);
					labeledNode.optional = optional;
					this.raise(TSErrors.InvalidTupleMemberLabel, type);
					labeledNode.label = type;
					labeledNode.elementType = this.tsParseType();
				}
				type = this.finishNode(labeledNode, "TSNamedTupleMember");
			} else if (optional) {
				const optionalTypeNode = this.startNodeAt(startLoc);
				optionalTypeNode.typeAnnotation = type;
				type = this.finishNode(optionalTypeNode, "TSOptionalType");
			}
			if (rest) {
				const restNode = this.startNodeAt(restStartLoc);
				restNode.typeAnnotation = type;
				type = this.finishNode(restNode, "TSRestType");
			}
			return type;
		}
		tsParseParenthesizedType() {
			const node = this.startNode();
			this.expect(10);
			node.typeAnnotation = this.tsParseType();
			this.expect(11);
			return this.finishNode(node, "TSParenthesizedType");
		}
		tsParseFunctionOrConstructorType(type, abstract) {
			const node = this.startNode();
			if (type === "TSConstructorType") {
				node.abstract = !!abstract;
				if (abstract) this.next();
				this.next();
			}
			this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
			return this.finishNode(node, type);
		}
		tsParseLiteralTypeNode() {
			const node = this.startNode();
			switch (this.state.type) {
				case 135:
				case 136:
				case 134:
				case 85:
				case 86:
					node.literal = super.parseExprAtom();
					break;
				default: this.unexpected();
			}
			return this.finishNode(node, "TSLiteralType");
		}
		tsParseTemplateLiteralType() {
			{
				const node = this.startNode();
				node.literal = super.parseTemplate(false);
				return this.finishNode(node, "TSLiteralType");
			}
		}
		parseTemplateSubstitution() {
			if (this.state.inType) return this.tsParseType();
			return super.parseTemplateSubstitution();
		}
		tsParseThisTypeOrThisTypePredicate() {
			const thisKeyword = this.tsParseThisTypeNode();
			if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.tsParseThisTypePredicate(thisKeyword);
			else return thisKeyword;
		}
		tsParseNonArrayType() {
			switch (this.state.type) {
				case 134:
				case 135:
				case 136:
				case 85:
				case 86: return this.tsParseLiteralTypeNode();
				case 53:
					if (this.state.value === "-") {
						const node = this.startNode();
						const nextToken = this.lookahead();
						if (nextToken.type !== 135 && nextToken.type !== 136) this.unexpected();
						node.literal = this.parseMaybeUnary();
						return this.finishNode(node, "TSLiteralType");
					}
					break;
				case 78: return this.tsParseThisTypeOrThisTypePredicate();
				case 87: return this.tsParseTypeQuery();
				case 83: return this.tsParseImportType();
				case 5: return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
				case 0: return this.tsParseTupleType();
				case 10: return this.tsParseParenthesizedType();
				case 25:
				case 24: return this.tsParseTemplateLiteralType();
				default: {
					const { type } = this.state;
					if (tokenIsIdentifier(type) || type === 88 || type === 84) {
						const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
						if (nodeType !== void 0 && this.lookaheadCharCode() !== 46) {
							const node = this.startNode();
							this.next();
							return this.finishNode(node, nodeType);
						}
						return this.tsParseTypeReference();
					}
				}
			}
			this.unexpected();
		}
		tsParseArrayTypeOrHigher() {
			const { startLoc } = this.state;
			let type = this.tsParseNonArrayType();
			while (!this.hasPrecedingLineBreak() && this.eat(0)) if (this.match(3)) {
				const node = this.startNodeAt(startLoc);
				node.elementType = type;
				this.expect(3);
				type = this.finishNode(node, "TSArrayType");
			} else {
				const node = this.startNodeAt(startLoc);
				node.objectType = type;
				node.indexType = this.tsParseType();
				this.expect(3);
				type = this.finishNode(node, "TSIndexedAccessType");
			}
			return type;
		}
		tsParseTypeOperator() {
			const node = this.startNode();
			const operator$1 = this.state.value;
			this.next();
			node.operator = operator$1;
			node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
			if (operator$1 === "readonly") this.tsCheckTypeAnnotationForReadOnly(node);
			return this.finishNode(node, "TSTypeOperator");
		}
		tsCheckTypeAnnotationForReadOnly(node) {
			switch (node.typeAnnotation.type) {
				case "TSTupleType":
				case "TSArrayType": return;
				default: this.raise(TSErrors.UnexpectedReadonly, node);
			}
		}
		tsParseInferType() {
			const node = this.startNode();
			this.expectContextual(115);
			const typeParameter$1 = this.startNode();
			typeParameter$1.name = this.tsParseTypeParameterName();
			typeParameter$1.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
			node.typeParameter = this.finishNode(typeParameter$1, "TSTypeParameter");
			return this.finishNode(node, "TSInferType");
		}
		tsParseConstraintForInferType() {
			if (this.eat(81)) {
				const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
				if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return constraint;
			}
		}
		tsParseTypeOperatorOrHigher() {
			const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
			return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
		}
		tsParseUnionOrIntersectionType(kind, parseConstituentType, operator$1) {
			const node = this.startNode();
			const hasLeadingOperator = this.eat(operator$1);
			const types$7 = [];
			do
				types$7.push(parseConstituentType());
			while (this.eat(operator$1));
			if (types$7.length === 1 && !hasLeadingOperator) return types$7[0];
			node.types = types$7;
			return this.finishNode(node, kind);
		}
		tsParseIntersectionTypeOrHigher() {
			return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
		}
		tsParseUnionTypeOrHigher() {
			return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
		}
		tsIsStartOfFunctionType() {
			if (this.match(47)) return true;
			return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
		}
		tsSkipParameterStart() {
			if (tokenIsIdentifier(this.state.type) || this.match(78)) {
				this.next();
				return true;
			}
			if (this.match(5)) {
				const { errors: errors$1 } = this.state;
				const previousErrorCount = errors$1.length;
				try {
					this.parseObjectLike(8, true);
					return errors$1.length === previousErrorCount;
				} catch (_unused) {
					return false;
				}
			}
			if (this.match(0)) {
				this.next();
				const { errors: errors$1 } = this.state;
				const previousErrorCount = errors$1.length;
				try {
					super.parseBindingList(3, 93, 1);
					return errors$1.length === previousErrorCount;
				} catch (_unused2) {
					return false;
				}
			}
			return false;
		}
		tsIsUnambiguouslyStartOfFunctionType() {
			this.next();
			if (this.match(11) || this.match(21)) return true;
			if (this.tsSkipParameterStart()) {
				if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return true;
				if (this.match(11)) {
					this.next();
					if (this.match(19)) return true;
				}
			}
			return false;
		}
		tsParseTypeOrTypePredicateAnnotation(returnToken) {
			return this.tsInType(() => {
				const t$9 = this.startNode();
				this.expect(returnToken);
				const node = this.startNode();
				const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
				if (asserts && this.match(78)) {
					let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
					if (thisTypePredicate.type === "TSThisType") {
						node.parameterName = thisTypePredicate;
						node.asserts = true;
						node.typeAnnotation = null;
						thisTypePredicate = this.finishNode(node, "TSTypePredicate");
					} else {
						this.resetStartLocationFromNode(thisTypePredicate, node);
						thisTypePredicate.asserts = true;
					}
					t$9.typeAnnotation = thisTypePredicate;
					return this.finishNode(t$9, "TSTypeAnnotation");
				}
				const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
				if (!typePredicateVariable) {
					if (!asserts) return this.tsParseTypeAnnotation(false, t$9);
					node.parameterName = this.parseIdentifier();
					node.asserts = asserts;
					node.typeAnnotation = null;
					t$9.typeAnnotation = this.finishNode(node, "TSTypePredicate");
					return this.finishNode(t$9, "TSTypeAnnotation");
				}
				const type = this.tsParseTypeAnnotation(false);
				node.parameterName = typePredicateVariable;
				node.typeAnnotation = type;
				node.asserts = asserts;
				t$9.typeAnnotation = this.finishNode(node, "TSTypePredicate");
				return this.finishNode(t$9, "TSTypeAnnotation");
			});
		}
		tsTryParseTypeOrTypePredicateAnnotation() {
			if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
		}
		tsTryParseTypeAnnotation() {
			if (this.match(14)) return this.tsParseTypeAnnotation();
		}
		tsTryParseType() {
			return this.tsEatThenParseType(14);
		}
		tsParseTypePredicatePrefix() {
			const id$4 = this.parseIdentifier();
			if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
				this.next();
				return id$4;
			}
		}
		tsParseTypePredicateAsserts() {
			if (this.state.type !== 109) return false;
			const containsEsc = this.state.containsEsc;
			this.next();
			if (!tokenIsIdentifier(this.state.type) && !this.match(78)) return false;
			if (containsEsc) this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" });
			return true;
		}
		tsParseTypeAnnotation(eatColon = true, t$9 = this.startNode()) {
			this.tsInType(() => {
				if (eatColon) this.expect(14);
				t$9.typeAnnotation = this.tsParseType();
			});
			return this.finishNode(t$9, "TSTypeAnnotation");
		}
		tsParseType() {
			assert$4(this.state.inType);
			const type = this.tsParseNonConditionalType();
			if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return type;
			const node = this.startNodeAtNode(type);
			node.checkType = type;
			node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
			this.expect(17);
			node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
			this.expect(14);
			node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
			return this.finishNode(node, "TSConditionalType");
		}
		isAbstractConstructorSignature() {
			return this.isContextual(124) && this.lookahead().type === 77;
		}
		tsParseNonConditionalType() {
			if (this.tsIsStartOfFunctionType()) return this.tsParseFunctionOrConstructorType("TSFunctionType");
			if (this.match(77)) return this.tsParseFunctionOrConstructorType("TSConstructorType");
			else if (this.isAbstractConstructorSignature()) return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
			return this.tsParseUnionTypeOrHigher();
		}
		tsParseTypeAssertion() {
			if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
			const node = this.startNode();
			node.typeAnnotation = this.tsInType(() => {
				this.next();
				return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
			});
			this.expect(48);
			node.expression = this.parseMaybeUnary();
			return this.finishNode(node, "TSTypeAssertion");
		}
		tsParseHeritageClause(token$1) {
			const originalStartLoc = this.state.startLoc;
			const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
				{
					const node = this.startNode();
					node.expression = this.tsParseEntityName(3);
					if (this.match(47)) node.typeParameters = this.tsParseTypeArguments();
					return this.finishNode(node, "TSExpressionWithTypeArguments");
				}
			});
			if (!delimitedList.length) this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, { token: token$1 });
			return delimitedList;
		}
		tsParseInterfaceDeclaration(node, properties = {}) {
			if (this.hasFollowingLineBreak()) return null;
			this.expectContextual(129);
			if (properties.declare) node.declare = true;
			if (tokenIsIdentifier(this.state.type)) {
				node.id = this.parseIdentifier();
				this.checkIdentifier(node.id, 130);
			} else {
				node.id = null;
				this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
			}
			node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
			if (this.eat(81)) node.extends = this.tsParseHeritageClause("extends");
			const body = this.startNode();
			body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
			node.body = this.finishNode(body, "TSInterfaceBody");
			return this.finishNode(node, "TSInterfaceDeclaration");
		}
		tsParseTypeAliasDeclaration(node) {
			node.id = this.parseIdentifier();
			this.checkIdentifier(node.id, 2);
			node.typeAnnotation = this.tsInType(() => {
				node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
				this.expect(29);
				if (this.isContextual(114) && this.lookahead().type !== 16) {
					const node$1 = this.startNode();
					this.next();
					return this.finishNode(node$1, "TSIntrinsicKeyword");
				}
				return this.tsParseType();
			});
			this.semicolon();
			return this.finishNode(node, "TSTypeAliasDeclaration");
		}
		tsInTopLevelContext(cb) {
			if (this.curContext() !== types$6.brace) {
				const oldContext = this.state.context;
				this.state.context = [oldContext[0]];
				try {
					return cb();
				} finally {
					this.state.context = oldContext;
				}
			} else return cb();
		}
		tsInType(cb) {
			const oldInType = this.state.inType;
			this.state.inType = true;
			try {
				return cb();
			} finally {
				this.state.inType = oldInType;
			}
		}
		tsInDisallowConditionalTypesContext(cb) {
			const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
			this.state.inDisallowConditionalTypesContext = true;
			try {
				return cb();
			} finally {
				this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
			}
		}
		tsInAllowConditionalTypesContext(cb) {
			const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
			this.state.inDisallowConditionalTypesContext = false;
			try {
				return cb();
			} finally {
				this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
			}
		}
		tsEatThenParseType(token$1) {
			if (this.match(token$1)) return this.tsNextThenParseType();
		}
		tsExpectThenParseType(token$1) {
			return this.tsInType(() => {
				this.expect(token$1);
				return this.tsParseType();
			});
		}
		tsNextThenParseType() {
			return this.tsInType(() => {
				this.next();
				return this.tsParseType();
			});
		}
		tsParseEnumMember() {
			const node = this.startNode();
			node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
			if (this.eat(29)) node.initializer = super.parseMaybeAssignAllowIn();
			return this.finishNode(node, "TSEnumMember");
		}
		tsParseEnumDeclaration(node, properties = {}) {
			if (properties.const) node.const = true;
			if (properties.declare) node.declare = true;
			this.expectContextual(126);
			node.id = this.parseIdentifier();
			this.checkIdentifier(node.id, node.const ? 8971 : 8459);
			{
				this.expect(5);
				node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
				this.expect(8);
			}
			return this.finishNode(node, "TSEnumDeclaration");
		}
		tsParseEnumBody() {
			const node = this.startNode();
			this.expect(5);
			node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
			this.expect(8);
			return this.finishNode(node, "TSEnumBody");
		}
		tsParseModuleBlock() {
			const node = this.startNode();
			this.scope.enter(0);
			this.expect(5);
			super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8);
			this.scope.exit();
			return this.finishNode(node, "TSModuleBlock");
		}
		tsParseModuleOrNamespaceDeclaration(node, nested = false) {
			node.id = this.parseIdentifier();
			if (!nested) this.checkIdentifier(node.id, 1024);
			if (this.eat(16)) {
				const inner = this.startNode();
				this.tsParseModuleOrNamespaceDeclaration(inner, true);
				node.body = inner;
			} else {
				this.scope.enter(256);
				this.prodParam.enter(0);
				node.body = this.tsParseModuleBlock();
				this.prodParam.exit();
				this.scope.exit();
			}
			return this.finishNode(node, "TSModuleDeclaration");
		}
		tsParseAmbientExternalModuleDeclaration(node) {
			if (this.isContextual(112)) {
				node.kind = "global";
				node.global = true;
				node.id = this.parseIdentifier();
			} else if (this.match(134)) {
				node.kind = "module";
				node.id = super.parseStringLiteral(this.state.value);
			} else this.unexpected();
			if (this.match(5)) {
				this.scope.enter(256);
				this.prodParam.enter(0);
				node.body = this.tsParseModuleBlock();
				this.prodParam.exit();
				this.scope.exit();
			} else this.semicolon();
			return this.finishNode(node, "TSModuleDeclaration");
		}
		tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
			node.isExport = isExport || false;
			node.id = maybeDefaultIdentifier || this.parseIdentifier();
			this.checkIdentifier(node.id, 4096);
			this.expect(29);
			const moduleReference = this.tsParseModuleReference();
			if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
			node.moduleReference = moduleReference;
			this.semicolon();
			return this.finishNode(node, "TSImportEqualsDeclaration");
		}
		tsIsExternalModuleReference() {
			return this.isContextual(119) && this.lookaheadCharCode() === 40;
		}
		tsParseModuleReference() {
			return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(0);
		}
		tsParseExternalModuleReference() {
			const node = this.startNode();
			this.expectContextual(119);
			this.expect(10);
			if (!this.match(134)) this.unexpected();
			node.expression = super.parseExprAtom();
			this.expect(11);
			this.sawUnambiguousESM = true;
			return this.finishNode(node, "TSExternalModuleReference");
		}
		tsLookAhead(f$1) {
			const state = this.state.clone();
			const res = f$1();
			this.state = state;
			return res;
		}
		tsTryParseAndCatch(f$1) {
			const result = this.tryParse((abort) => f$1() || abort());
			if (result.aborted || !result.node) return;
			if (result.error) this.state = result.failState;
			return result.node;
		}
		tsTryParse(f$1) {
			const state = this.state.clone();
			const result = f$1();
			if (result !== void 0 && result !== false) return result;
			this.state = state;
		}
		tsTryParseDeclare(nany) {
			if (this.isLineTerminator()) return;
			let startType = this.state.type;
			let kind;
			if (this.isContextual(100)) {
				startType = 74;
				kind = "let";
			}
			return this.tsInAmbientContext(() => {
				switch (startType) {
					case 68:
						nany.declare = true;
						return super.parseFunctionStatement(nany, false, false);
					case 80:
						nany.declare = true;
						return this.parseClass(nany, true, false);
					case 126: return this.tsParseEnumDeclaration(nany, { declare: true });
					case 112: return this.tsParseAmbientExternalModuleDeclaration(nany);
					case 75:
					case 74:
						if (!this.match(75) || !this.isLookaheadContextual("enum")) {
							nany.declare = true;
							return this.parseVarStatement(nany, kind || this.state.value, true);
						}
						this.expect(75);
						return this.tsParseEnumDeclaration(nany, {
							const: true,
							declare: true
						});
					case 129: {
						const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
						if (result) return result;
					}
					default: if (tokenIsIdentifier(startType)) return this.tsParseDeclaration(nany, this.state.value, true, null);
				}
			});
		}
		tsTryParseExportDeclaration() {
			return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
		}
		tsParseExpressionStatement(node, expr, decorators) {
			switch (expr.name) {
				case "declare": {
					const declaration = this.tsTryParseDeclare(node);
					if (declaration) declaration.declare = true;
					return declaration;
				}
				case "global":
					if (this.match(5)) {
						this.scope.enter(256);
						this.prodParam.enter(0);
						const mod$1 = node;
						mod$1.kind = "global";
						node.global = true;
						mod$1.id = expr;
						mod$1.body = this.tsParseModuleBlock();
						this.scope.exit();
						this.prodParam.exit();
						return this.finishNode(mod$1, "TSModuleDeclaration");
					}
					break;
				default: return this.tsParseDeclaration(node, expr.name, false, decorators);
			}
		}
		tsParseDeclaration(node, value, next, decorators) {
			switch (value) {
				case "abstract":
					if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(node, decorators);
					break;
				case "module":
					if (this.tsCheckLineTerminator(next)) {
						if (this.match(134)) return this.tsParseAmbientExternalModuleDeclaration(node);
						else if (tokenIsIdentifier(this.state.type)) {
							node.kind = "module";
							return this.tsParseModuleOrNamespaceDeclaration(node);
						}
					}
					break;
				case "namespace":
					if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
						node.kind = "namespace";
						return this.tsParseModuleOrNamespaceDeclaration(node);
					}
					break;
				case "type":
					if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(node);
					break;
			}
		}
		tsCheckLineTerminator(next) {
			if (next) {
				if (this.hasFollowingLineBreak()) return false;
				this.next();
				return true;
			}
			return !this.isLineTerminator();
		}
		tsTryParseGenericAsyncArrowFunction(startLoc) {
			if (!this.match(47)) return;
			const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
			this.state.maybeInArrowParameters = true;
			const res = this.tsTryParseAndCatch(() => {
				const node = this.startNodeAt(startLoc);
				node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
				super.parseFunctionParams(node);
				node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
				this.expect(19);
				return node;
			});
			this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			if (!res) return;
			return super.parseArrowExpression(res, null, true);
		}
		tsParseTypeArgumentsInExpression() {
			if (this.reScan_lt() !== 47) return;
			return this.tsParseTypeArguments();
		}
		tsParseTypeArguments() {
			const node = this.startNode();
			node.params = this.tsInType(() => this.tsInTopLevelContext(() => {
				this.expect(47);
				return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
			}));
			if (node.params.length === 0) this.raise(TSErrors.EmptyTypeArguments, node);
			else if (!this.state.inType && this.curContext() === types$6.brace) this.reScan_lt_gt();
			this.expect(48);
			return this.finishNode(node, "TSTypeParameterInstantiation");
		}
		tsIsDeclarationStart() {
			return tokenIsTSDeclarationStart(this.state.type);
		}
		isExportDefaultSpecifier() {
			if (this.tsIsDeclarationStart()) return false;
			return super.isExportDefaultSpecifier();
		}
		parseBindingElement(flags, decorators) {
			const startLoc = this.state.startLoc;
			const modified = {};
			this.tsParseModifiers({ allowedModifiers: [
				"public",
				"private",
				"protected",
				"override",
				"readonly"
			] }, modified);
			const accessibility = modified.accessibility;
			const override = modified.override;
			const readonly = modified.readonly;
			if (!(flags & 4) && (accessibility || readonly || override)) this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
			const left = this.parseMaybeDefault();
			if (flags & 2) this.parseFunctionParamType(left);
			const elt = this.parseMaybeDefault(left.loc.start, left);
			if (accessibility || readonly || override) {
				const pp = this.startNodeAt(startLoc);
				if (decorators.length) pp.decorators = decorators;
				if (accessibility) pp.accessibility = accessibility;
				if (readonly) pp.readonly = readonly;
				if (override) pp.override = override;
				if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
				pp.parameter = elt;
				return this.finishNode(pp, "TSParameterProperty");
			}
			if (decorators.length) left.decorators = decorators;
			return elt;
		}
		isSimpleParameter(node) {
			return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
		}
		tsDisallowOptionalPattern(node) {
			for (const param of node.params) if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) this.raise(TSErrors.PatternIsOptional, param);
		}
		setArrowFunctionParameters(node, params, trailingCommaLoc) {
			super.setArrowFunctionParameters(node, params, trailingCommaLoc);
			this.tsDisallowOptionalPattern(node);
		}
		parseFunctionBodyAndFinish(node, type, isMethod$2 = false) {
			if (this.match(14)) node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
			const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : void 0;
			if (bodilessType && !this.match(5) && this.isLineTerminator()) return this.finishNode(node, bodilessType);
			if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
				this.raise(TSErrors.DeclareFunctionHasImplementation, node);
				if (node.declare) return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod$2);
			}
			this.tsDisallowOptionalPattern(node);
			return super.parseFunctionBodyAndFinish(node, type, isMethod$2);
		}
		registerFunctionStatementId(node) {
			if (!node.body && node.id) this.checkIdentifier(node.id, 1024);
			else super.registerFunctionStatementId(node);
		}
		tsCheckForInvalidTypeCasts(items) {
			items.forEach((node) => {
				if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
			});
		}
		toReferencedList(exprList, isInParens) {
			this.tsCheckForInvalidTypeCasts(exprList);
			return exprList;
		}
		parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
			const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
			if (node.type === "ArrayExpression") this.tsCheckForInvalidTypeCasts(node.elements);
			return node;
		}
		parseSubscript(base$1, startLoc, noCalls, state) {
			if (!this.hasPrecedingLineBreak() && this.match(35)) {
				this.state.canStartJSXElement = false;
				this.next();
				const nonNullExpression = this.startNodeAt(startLoc);
				nonNullExpression.expression = base$1;
				return this.finishNode(nonNullExpression, "TSNonNullExpression");
			}
			let isOptionalCall = false;
			if (this.match(18) && this.lookaheadCharCode() === 60) {
				if (noCalls) {
					state.stop = true;
					return base$1;
				}
				state.optionalChainMember = isOptionalCall = true;
				this.next();
			}
			if (this.match(47) || this.match(51)) {
				let missingParenErrorLoc;
				const result = this.tsTryParseAndCatch(() => {
					if (!noCalls && this.atPossibleAsyncArrow(base$1)) {
						const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
						if (asyncArrowFn) return asyncArrowFn;
					}
					const typeArguments = this.tsParseTypeArgumentsInExpression();
					if (!typeArguments) return;
					if (isOptionalCall && !this.match(10)) {
						missingParenErrorLoc = this.state.curPosition();
						return;
					}
					if (tokenIsTemplate(this.state.type)) {
						const result$1 = super.parseTaggedTemplateExpression(base$1, startLoc, state);
						result$1.typeParameters = typeArguments;
						return result$1;
					}
					if (!noCalls && this.eat(10)) {
						const node$1 = this.startNodeAt(startLoc);
						node$1.callee = base$1;
						node$1.arguments = this.parseCallExpressionArguments(11);
						this.tsCheckForInvalidTypeCasts(node$1.arguments);
						node$1.typeParameters = typeArguments;
						if (state.optionalChainMember) node$1.optional = isOptionalCall;
						return this.finishCallExpression(node$1, state.optionalChainMember);
					}
					const tokenType = this.state.type;
					if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) return;
					const node = this.startNodeAt(startLoc);
					node.expression = base$1;
					node.typeParameters = typeArguments;
					return this.finishNode(node, "TSInstantiationExpression");
				});
				if (missingParenErrorLoc) this.unexpected(missingParenErrorLoc, 10);
				if (result) {
					if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
					return result;
				}
			}
			return super.parseSubscript(base$1, startLoc, noCalls, state);
		}
		parseNewCallee(node) {
			var _callee$extra;
			super.parseNewCallee(node);
			const { callee } = node;
			if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
				node.typeParameters = callee.typeParameters;
				node.callee = callee.expression;
			}
		}
		parseExprOp(left, leftStartLoc, minPrec) {
			let isSatisfies;
			if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
				const node = this.startNodeAt(leftStartLoc);
				node.expression = left;
				node.typeAnnotation = this.tsInType(() => {
					this.next();
					if (this.match(75)) {
						if (isSatisfies) this.raise(Errors.UnexpectedKeyword, this.state.startLoc, { keyword: "const" });
						return this.tsParseTypeReference();
					}
					return this.tsParseType();
				});
				this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
				this.reScan_lt_gt();
				return this.parseExprOp(node, leftStartLoc, minPrec);
			}
			return super.parseExprOp(left, leftStartLoc, minPrec);
		}
		checkReservedWord(word$3, startLoc, checkKeywords, isBinding$2) {
			if (!this.state.isAmbientContext) super.checkReservedWord(word$3, startLoc, checkKeywords, isBinding$2);
		}
		checkImportReflection(node) {
			super.checkImportReflection(node);
			if (node.module && node.importKind !== "value") this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
		}
		checkDuplicateExports() {}
		isPotentialImportPhase(isExport) {
			if (super.isPotentialImportPhase(isExport)) return true;
			if (this.isContextual(130)) {
				const ch = this.lookaheadCharCode();
				return isExport ? ch === 123 || ch === 42 : ch !== 61;
			}
			return !isExport && this.isContextual(87);
		}
		applyImportPhase(node, isExport, phase, loc) {
			super.applyImportPhase(node, isExport, phase, loc);
			if (isExport) node.exportKind = phase === "type" ? "type" : "value";
			else node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
		}
		parseImport(node) {
			if (this.match(134)) {
				node.importKind = "value";
				return super.parseImport(node);
			}
			let importNode;
			if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
				node.importKind = "value";
				return this.tsParseImportEqualsDeclaration(node);
			} else if (this.isContextual(130)) {
				const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
				if (this.lookaheadCharCode() === 61) return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
				else importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
			} else importNode = super.parseImport(node);
			if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
			return importNode;
		}
		parseExport(node, decorators) {
			if (this.match(83)) {
				const nodeImportEquals = node;
				this.next();
				let maybeDefaultIdentifier = null;
				if (this.isContextual(130) && this.isPotentialImportPhase(false)) maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);
				else nodeImportEquals.importKind = "value";
				const declaration = this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
				return declaration;
			} else if (this.eat(29)) {
				const assign = node;
				assign.expression = super.parseExpression();
				this.semicolon();
				this.sawUnambiguousESM = true;
				return this.finishNode(assign, "TSExportAssignment");
			} else if (this.eatContextual(93)) {
				const decl$1 = node;
				this.expectContextual(128);
				decl$1.id = this.parseIdentifier();
				this.semicolon();
				return this.finishNode(decl$1, "TSNamespaceExportDeclaration");
			} else return super.parseExport(node, decorators);
		}
		isAbstractClass() {
			return this.isContextual(124) && this.lookahead().type === 80;
		}
		parseExportDefaultExpression() {
			if (this.isAbstractClass()) {
				const cls = this.startNode();
				this.next();
				cls.abstract = true;
				return this.parseClass(cls, true, true);
			}
			if (this.match(129)) {
				const result = this.tsParseInterfaceDeclaration(this.startNode());
				if (result) return result;
			}
			return super.parseExportDefaultExpression();
		}
		parseVarStatement(node, kind, allowMissingInitializer = false) {
			const { isAmbientContext } = this.state;
			const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
			if (!isAmbientContext) return declaration;
			for (const { id: id$4, init: init$1 } of declaration.declarations) {
				if (!init$1) continue;
				if (kind !== "const" || !!id$4.typeAnnotation) this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init$1);
				else if (!isValidAmbientConstInitializer(init$1, this.hasPlugin("estree"))) this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init$1);
			}
			return declaration;
		}
		parseStatementContent(flags, decorators) {
			if (this.match(75) && this.isLookaheadContextual("enum")) {
				const node = this.startNode();
				this.expect(75);
				return this.tsParseEnumDeclaration(node, { const: true });
			}
			if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
			if (this.isContextual(129)) {
				const result = this.tsParseInterfaceDeclaration(this.startNode());
				if (result) return result;
			}
			return super.parseStatementContent(flags, decorators);
		}
		parseAccessModifier() {
			return this.tsParseModifier([
				"public",
				"protected",
				"private"
			]);
		}
		tsHasSomeModifiers(member, modifiers) {
			return modifiers.some((modifier) => {
				if (tsIsAccessModifier(modifier)) return member.accessibility === modifier;
				return !!member[modifier];
			});
		}
		tsIsStartOfStaticBlocks() {
			return this.isContextual(106) && this.lookaheadCharCode() === 123;
		}
		parseClassMember(classBody$1, member, state) {
			const modifiers = [
				"declare",
				"private",
				"public",
				"protected",
				"override",
				"abstract",
				"readonly",
				"static"
			];
			this.tsParseModifiers({
				allowedModifiers: modifiers,
				disallowedModifiers: ["in", "out"],
				stopOnStartOfClassStaticBlock: true,
				errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
			}, member);
			const callParseClassMemberWithIsStatic = () => {
				if (this.tsIsStartOfStaticBlocks()) {
					this.next();
					this.next();
					if (this.tsHasSomeModifiers(member, modifiers)) this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
					super.parseClassStaticBlock(classBody$1, member);
				} else this.parseClassMemberWithIsStatic(classBody$1, member, state, !!member.static);
			};
			if (member.declare) this.tsInAmbientContext(callParseClassMemberWithIsStatic);
			else callParseClassMemberWithIsStatic();
		}
		parseClassMemberWithIsStatic(classBody$1, member, state, isStatic$1) {
			const idx = this.tsTryParseIndexSignature(member);
			if (idx) {
				classBody$1.body.push(idx);
				if (member.abstract) this.raise(TSErrors.IndexSignatureHasAbstract, member);
				if (member.accessibility) this.raise(TSErrors.IndexSignatureHasAccessibility, member, { modifier: member.accessibility });
				if (member.declare) this.raise(TSErrors.IndexSignatureHasDeclare, member);
				if (member.override) this.raise(TSErrors.IndexSignatureHasOverride, member);
				return;
			}
			if (!this.state.inAbstractClass && member.abstract) this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
			if (member.override) {
				if (!state.hadSuperClass) this.raise(TSErrors.OverrideNotInSubClass, member);
			}
			super.parseClassMemberWithIsStatic(classBody$1, member, state, isStatic$1);
		}
		parsePostMemberNameModifiers(methodOrProp) {
			const optional = this.eat(17);
			if (optional) methodOrProp.optional = true;
			if (methodOrProp.readonly && this.match(10)) this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
			if (methodOrProp.declare && this.match(10)) this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
		}
		parseExpressionStatement(node, expr, decorators) {
			const decl$1 = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : void 0;
			return decl$1 || super.parseExpressionStatement(node, expr, decorators);
		}
		shouldParseExportDeclaration() {
			if (this.tsIsDeclarationStart()) return true;
			return super.shouldParseExportDeclaration();
		}
		parseConditional(expr, startLoc, refExpressionErrors) {
			if (!this.match(17)) return expr;
			if (this.state.maybeInArrowParameters) {
				const nextCh = this.lookaheadCharCode();
				if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
					this.setOptionalParametersError(refExpressionErrors);
					return expr;
				}
			}
			return super.parseConditional(expr, startLoc, refExpressionErrors);
		}
		parseParenItem(node, startLoc) {
			const newNode = super.parseParenItem(node, startLoc);
			if (this.eat(17)) {
				newNode.optional = true;
				this.resetEndLocation(node);
			}
			if (this.match(14)) {
				const typeCastNode = this.startNodeAt(startLoc);
				typeCastNode.expression = node;
				typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
				return this.finishNode(typeCastNode, "TSTypeCastExpression");
			}
			return node;
		}
		parseExportDeclaration(node) {
			if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
			const startLoc = this.state.startLoc;
			const isDeclare = this.eatContextual(125);
			if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
			const isIdentifier$16 = tokenIsIdentifier(this.state.type);
			const declaration = isIdentifier$16 && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
			if (!declaration) return null;
			if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) node.exportKind = "type";
			if (isDeclare && declaration.type !== "TSImportEqualsDeclaration") {
				this.resetStartLocation(declaration, startLoc);
				declaration.declare = true;
			}
			return declaration;
		}
		parseClassId(node, isStatement$10, optionalId, bindingType) {
			if ((!isStatement$10 || optionalId) && this.isContextual(113)) return;
			super.parseClassId(node, isStatement$10, optionalId, node.declare ? 1024 : 8331);
			const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
			if (typeParameters) node.typeParameters = typeParameters;
		}
		parseClassPropertyAnnotation(node) {
			if (!node.optional) {
				if (this.eat(35)) node.definite = true;
				else if (this.eat(17)) node.optional = true;
			}
			const type = this.tsTryParseTypeAnnotation();
			if (type) node.typeAnnotation = type;
		}
		parseClassProperty(node) {
			this.parseClassPropertyAnnotation(node);
			if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
			if (node.abstract && this.match(29)) {
				const { key } = node;
				this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` });
			}
			return super.parseClassProperty(node);
		}
		parseClassPrivateProperty(node) {
			if (node.abstract) this.raise(TSErrors.PrivateElementHasAbstract, node);
			if (node.accessibility) this.raise(TSErrors.PrivateElementHasAccessibility, node, { modifier: node.accessibility });
			this.parseClassPropertyAnnotation(node);
			return super.parseClassPrivateProperty(node);
		}
		parseClassAccessorProperty(node) {
			this.parseClassPropertyAnnotation(node);
			if (node.optional) this.raise(TSErrors.AccessorCannotBeOptional, node);
			return super.parseClassAccessorProperty(node);
		}
		pushClassMethod(classBody$1, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
			const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
			if (typeParameters && isConstructor) this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
			const { declare = false, kind } = method;
			if (declare && (kind === "get" || kind === "set")) this.raise(TSErrors.DeclareAccessor, method, { kind });
			if (typeParameters) method.typeParameters = typeParameters;
			super.pushClassMethod(classBody$1, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
		}
		pushClassPrivateMethod(classBody$1, method, isGenerator, isAsync) {
			const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
			if (typeParameters) method.typeParameters = typeParameters;
			super.pushClassPrivateMethod(classBody$1, method, isGenerator, isAsync);
		}
		declareClassPrivateMethodInScope(node, kind) {
			if (node.type === "TSDeclareMethod") return;
			if (node.type === "MethodDefinition" && !hasOwnProperty.call(node.value, "body")) return;
			super.declareClassPrivateMethodInScope(node, kind);
		}
		parseClassSuper(node) {
			super.parseClassSuper(node);
			if (node.superClass && (this.match(47) || this.match(51))) node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
			if (this.eatContextual(113)) node.implements = this.tsParseHeritageClause("implements");
		}
		parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern$2, isAccessor$1, refExpressionErrors) {
			const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
			if (typeParameters) prop.typeParameters = typeParameters;
			return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern$2, isAccessor$1, refExpressionErrors);
		}
		parseFunctionParams(node, isConstructor) {
			const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
			if (typeParameters) node.typeParameters = typeParameters;
			super.parseFunctionParams(node, isConstructor);
		}
		parseVarId(decl$1, kind) {
			super.parseVarId(decl$1, kind);
			if (decl$1.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) decl$1.definite = true;
			const type = this.tsTryParseTypeAnnotation();
			if (type) {
				decl$1.id.typeAnnotation = type;
				this.resetEndLocation(decl$1.id);
			}
		}
		parseAsyncArrowFromCallExpression(node, call$2) {
			if (this.match(14)) node.returnType = this.tsParseTypeAnnotation();
			return super.parseAsyncArrowFromCallExpression(node, call$2);
		}
		parseMaybeAssign(refExpressionErrors, afterLeftParse) {
			var _jsx$1, _jsx2, _typeCast, _jsx3, _typeCast2;
			let state;
			let jsx$1;
			let typeCast;
			if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
				state = this.state.clone();
				jsx$1 = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
				if (!jsx$1.error) return jsx$1.node;
				const { context } = this.state;
				const currentContext = context[context.length - 1];
				if (currentContext === types$6.j_oTag || currentContext === types$6.j_expr) context.pop();
			}
			if (!((_jsx$1 = jsx$1) != null && _jsx$1.error) && !this.match(47)) return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
			if (!state || state === this.state) state = this.state.clone();
			let typeParameters;
			const arrow = this.tryParse((abort) => {
				var _expr$extra, _typeParameters;
				typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
				const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
				if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) abort();
				if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) this.resetStartLocationFromNode(expr, typeParameters);
				expr.typeParameters = typeParameters;
				return expr;
			}, state);
			if (!arrow.error && !arrow.aborted) {
				if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
				return arrow.node;
			}
			if (!jsx$1) {
				assert$4(!this.hasPlugin("jsx"));
				typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
				if (!typeCast.error) return typeCast.node;
			}
			if ((_jsx2 = jsx$1) != null && _jsx2.node) {
				this.state = jsx$1.failState;
				return jsx$1.node;
			}
			if (arrow.node) {
				this.state = arrow.failState;
				if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
				return arrow.node;
			}
			if ((_typeCast = typeCast) != null && _typeCast.node) {
				this.state = typeCast.failState;
				return typeCast.node;
			}
			throw ((_jsx3 = jsx$1) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
		}
		reportReservedArrowTypeParam(node) {
			var _node$extra2;
			if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra2 = node.extra) != null && _node$extra2.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) this.raise(TSErrors.ReservedArrowTypeParam, node);
		}
		parseMaybeUnary(refExpressionErrors, sawUnary) {
			if (!this.hasPlugin("jsx") && this.match(47)) return this.tsParseTypeAssertion();
			return super.parseMaybeUnary(refExpressionErrors, sawUnary);
		}
		parseArrow(node) {
			if (this.match(14)) {
				const result = this.tryParse((abort) => {
					const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
					if (this.canInsertSemicolon() || !this.match(19)) abort();
					return returnType;
				});
				if (result.aborted) return;
				if (!result.thrown) {
					if (result.error) this.state = result.failState;
					node.returnType = result.node;
				}
			}
			return super.parseArrow(node);
		}
		parseFunctionParamType(param) {
			if (this.eat(17)) param.optional = true;
			const type = this.tsTryParseTypeAnnotation();
			if (type) param.typeAnnotation = type;
			this.resetEndLocation(param);
			return param;
		}
		isAssignable(node, isBinding$2) {
			switch (node.type) {
				case "TSTypeCastExpression": return this.isAssignable(node.expression, isBinding$2);
				case "TSParameterProperty": return true;
				default: return super.isAssignable(node, isBinding$2);
			}
		}
		toAssignable(node, isLHS = false) {
			switch (node.type) {
				case "ParenthesizedExpression":
					this.toAssignableParenthesizedExpression(node, isLHS);
					break;
				case "TSAsExpression":
				case "TSSatisfiesExpression":
				case "TSNonNullExpression":
				case "TSTypeAssertion":
					if (isLHS) this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);
					else this.raise(TSErrors.UnexpectedTypeCastInParameter, node);
					this.toAssignable(node.expression, isLHS);
					break;
				case "AssignmentExpression": if (!isLHS && node.left.type === "TSTypeCastExpression") node.left = this.typeCastToParameter(node.left);
				default: super.toAssignable(node, isLHS);
			}
		}
		toAssignableParenthesizedExpression(node, isLHS) {
			switch (node.expression.type) {
				case "TSAsExpression":
				case "TSSatisfiesExpression":
				case "TSNonNullExpression":
				case "TSTypeAssertion":
				case "ParenthesizedExpression":
					this.toAssignable(node.expression, isLHS);
					break;
				default: super.toAssignable(node, isLHS);
			}
		}
		checkToRestConversion(node, allowPattern) {
			switch (node.type) {
				case "TSAsExpression":
				case "TSSatisfiesExpression":
				case "TSTypeAssertion":
				case "TSNonNullExpression":
					this.checkToRestConversion(node.expression, false);
					break;
				default: super.checkToRestConversion(node, allowPattern);
			}
		}
		isValidLVal(type, isUnparenthesizedInAssign, binding) {
			switch (type) {
				case "TSTypeCastExpression": return true;
				case "TSParameterProperty": return "parameter";
				case "TSNonNullExpression": return "expression";
				case "TSAsExpression":
				case "TSSatisfiesExpression":
				case "TSTypeAssertion": return (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true];
				default: return super.isValidLVal(type, isUnparenthesizedInAssign, binding);
			}
		}
		parseBindingAtom() {
			if (this.state.type === 78) return this.parseIdentifier(true);
			return super.parseBindingAtom();
		}
		parseMaybeDecoratorArguments(expr, startLoc) {
			if (this.match(47) || this.match(51)) {
				const typeArguments = this.tsParseTypeArgumentsInExpression();
				if (this.match(10)) {
					const call$2 = super.parseMaybeDecoratorArguments(expr, startLoc);
					call$2.typeParameters = typeArguments;
					return call$2;
				}
				this.unexpected(null, 10);
			}
			return super.parseMaybeDecoratorArguments(expr, startLoc);
		}
		checkCommaAfterRest(close) {
			if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
				this.next();
				return false;
			}
			return super.checkCommaAfterRest(close);
		}
		isClassMethod() {
			return this.match(47) || super.isClassMethod();
		}
		isClassProperty() {
			return this.match(35) || this.match(14) || super.isClassProperty();
		}
		parseMaybeDefault(startLoc, left) {
			const node = super.parseMaybeDefault(startLoc, left);
			if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);
			return node;
		}
		getTokenFromCode(code$1) {
			if (this.state.inType) {
				if (code$1 === 62) {
					this.finishOp(48, 1);
					return;
				}
				if (code$1 === 60) {
					this.finishOp(47, 1);
					return;
				}
			}
			super.getTokenFromCode(code$1);
		}
		reScan_lt_gt() {
			const { type } = this.state;
			if (type === 47) {
				this.state.pos -= 1;
				this.readToken_lt();
			} else if (type === 48) {
				this.state.pos -= 1;
				this.readToken_gt();
			}
		}
		reScan_lt() {
			const { type } = this.state;
			if (type === 51) {
				this.state.pos -= 2;
				this.finishOp(47, 1);
				return 47;
			}
			return type;
		}
		toAssignableListItem(exprList, index$1, isLHS) {
			const node = exprList[index$1];
			if (node.type === "TSTypeCastExpression") exprList[index$1] = this.typeCastToParameter(node);
			super.toAssignableListItem(exprList, index$1, isLHS);
		}
		typeCastToParameter(node) {
			node.expression.typeAnnotation = node.typeAnnotation;
			this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
			return node.expression;
		}
		shouldParseArrow(params) {
			if (this.match(14)) return params.every((expr) => this.isAssignable(expr, true));
			return super.shouldParseArrow(params);
		}
		shouldParseAsyncArrow() {
			return this.match(14) || super.shouldParseAsyncArrow();
		}
		canHaveLeadingDecorator() {
			return super.canHaveLeadingDecorator() || this.isAbstractClass();
		}
		jsxParseOpeningElementAfterName(node) {
			if (this.match(47) || this.match(51)) {
				const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
				if (typeArguments) node.typeParameters = typeArguments;
			}
			return super.jsxParseOpeningElementAfterName(node);
		}
		getGetterSetterExpectedParamCount(method) {
			const baseCount = super.getGetterSetterExpectedParamCount(method);
			const params = this.getObjectOrClassMethodParams(method);
			const firstParam = params[0];
			const hasContextParam = firstParam && this.isThisParam(firstParam);
			return hasContextParam ? baseCount + 1 : baseCount;
		}
		parseCatchClauseParam() {
			const param = super.parseCatchClauseParam();
			const type = this.tsTryParseTypeAnnotation();
			if (type) {
				param.typeAnnotation = type;
				this.resetEndLocation(param);
			}
			return param;
		}
		tsInAmbientContext(cb) {
			const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } = this.state;
			this.state.isAmbientContext = true;
			this.state.strict = false;
			try {
				return cb();
			} finally {
				this.state.isAmbientContext = oldIsAmbientContext;
				this.state.strict = oldStrict;
			}
		}
		parseClass(node, isStatement$10, optionalId) {
			const oldInAbstractClass = this.state.inAbstractClass;
			this.state.inAbstractClass = !!node.abstract;
			try {
				return super.parseClass(node, isStatement$10, optionalId);
			} finally {
				this.state.inAbstractClass = oldInAbstractClass;
			}
		}
		tsParseAbstractDeclaration(node, decorators) {
			if (this.match(80)) {
				node.abstract = true;
				return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
			} else if (this.isContextual(129)) {
				if (!this.hasFollowingLineBreak()) {
					node.abstract = true;
					this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);
					return this.tsParseInterfaceDeclaration(node);
				}
			} else this.unexpected(null, 80);
		}
		parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
			const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
			if (method.abstract) {
				const hasEstreePlugin = this.hasPlugin("estree");
				const methodFn = hasEstreePlugin ? method.value : method;
				if (methodFn.body) {
					const { key } = method;
					this.raise(TSErrors.AbstractMethodHasImplementation, method, { methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` });
				}
			}
			return method;
		}
		tsParseTypeParameterName() {
			const typeName = this.parseIdentifier();
			return typeName.name;
		}
		shouldParseAsAmbientContext() {
			return !!this.getPluginOption("typescript", "dts");
		}
		parse() {
			if (this.shouldParseAsAmbientContext()) this.state.isAmbientContext = true;
			return super.parse();
		}
		getExpression() {
			if (this.shouldParseAsAmbientContext()) this.state.isAmbientContext = true;
			return super.getExpression();
		}
		parseExportSpecifier(node, isString$5, isInTypeExport, isMaybeTypeOnly) {
			if (!isString$5 && isMaybeTypeOnly) {
				this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
				return this.finishNode(node, "ExportSpecifier");
			}
			node.exportKind = "value";
			return super.parseExportSpecifier(node, isString$5, isInTypeExport, isMaybeTypeOnly);
		}
		parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
			if (!importedIsString && isMaybeTypeOnly) {
				this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
				return this.finishNode(specifier, "ImportSpecifier");
			}
			specifier.importKind = "value";
			return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
		}
		parseTypeOnlyImportExportSpecifier(node, isImport$1, isInTypeOnlyImportExport) {
			const leftOfAsKey = isImport$1 ? "imported" : "local";
			const rightOfAsKey = isImport$1 ? "local" : "exported";
			let leftOfAs = node[leftOfAsKey];
			let rightOfAs;
			let hasTypeSpecifier = false;
			let canParseAsKeyword = true;
			const loc = leftOfAs.loc.start;
			if (this.isContextual(93)) {
				const firstAs = this.parseIdentifier();
				if (this.isContextual(93)) {
					const secondAs = this.parseIdentifier();
					if (tokenIsKeywordOrIdentifier(this.state.type)) {
						hasTypeSpecifier = true;
						leftOfAs = firstAs;
						rightOfAs = isImport$1 ? this.parseIdentifier() : this.parseModuleExportName();
						canParseAsKeyword = false;
					} else {
						rightOfAs = secondAs;
						canParseAsKeyword = false;
					}
				} else if (tokenIsKeywordOrIdentifier(this.state.type)) {
					canParseAsKeyword = false;
					rightOfAs = isImport$1 ? this.parseIdentifier() : this.parseModuleExportName();
				} else {
					hasTypeSpecifier = true;
					leftOfAs = firstAs;
				}
			} else if (tokenIsKeywordOrIdentifier(this.state.type)) {
				hasTypeSpecifier = true;
				if (isImport$1) {
					leftOfAs = this.parseIdentifier(true);
					if (!this.isContextual(93)) this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
				} else leftOfAs = this.parseModuleExportName();
			}
			if (hasTypeSpecifier && isInTypeOnlyImportExport) this.raise(isImport$1 ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
			node[leftOfAsKey] = leftOfAs;
			node[rightOfAsKey] = rightOfAs;
			const kindKey = isImport$1 ? "importKind" : "exportKind";
			node[kindKey] = hasTypeSpecifier ? "type" : "value";
			if (canParseAsKeyword && this.eatContextual(93)) node[rightOfAsKey] = isImport$1 ? this.parseIdentifier() : this.parseModuleExportName();
			if (!node[rightOfAsKey]) node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
			if (isImport$1) this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
		}
	};
	function isPossiblyLiteralEnum(expression$2) {
		if (expression$2.type !== "MemberExpression") return false;
		const { computed, property } = expression$2;
		if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) return false;
		return isUncomputedMemberExpressionChain(expression$2.object);
	}
	function isValidAmbientConstInitializer(expression$2, estree$1) {
		var _expression$extra;
		const { type } = expression$2;
		if ((_expression$extra = expression$2.extra) != null && _expression$extra.parenthesized) return false;
		if (estree$1) {
			if (type === "Literal") {
				const { value } = expression$2;
				if (typeof value === "string" || typeof value === "boolean") return true;
			}
		} else if (type === "StringLiteral" || type === "BooleanLiteral") return true;
		if (isNumber$1(expression$2, estree$1) || isNegativeNumber(expression$2, estree$1)) return true;
		if (type === "TemplateLiteral" && expression$2.expressions.length === 0) return true;
		if (isPossiblyLiteralEnum(expression$2)) return true;
		return false;
	}
	function isNumber$1(expression$2, estree$1) {
		if (estree$1) return expression$2.type === "Literal" && (typeof expression$2.value === "number" || "bigint" in expression$2);
		return expression$2.type === "NumericLiteral" || expression$2.type === "BigIntLiteral";
	}
	function isNegativeNumber(expression$2, estree$1) {
		if (expression$2.type === "UnaryExpression") {
			const { operator: operator$1, argument } = expression$2;
			if (operator$1 === "-" && isNumber$1(argument, estree$1)) return true;
		}
		return false;
	}
	function isUncomputedMemberExpressionChain(expression$2) {
		if (expression$2.type === "Identifier") return true;
		if (expression$2.type !== "MemberExpression" || expression$2.computed) return false;
		return isUncomputedMemberExpressionChain(expression$2.object);
	}
	const PlaceholderErrors = ParseErrorEnum`placeholders`({
		ClassNameIsRequired: "A class name is required.",
		UnexpectedSpace: "Unexpected space in placeholder."
	});
	var placeholders = (superClass) => class PlaceholdersParserMixin extends superClass {
		parsePlaceholder(expectedNode) {
			if (this.match(133)) {
				const node = this.startNode();
				this.next();
				this.assertNoSpace();
				node.name = super.parseIdentifier(true);
				this.assertNoSpace();
				this.expect(133);
				return this.finishPlaceholder(node, expectedNode);
			}
		}
		finishPlaceholder(node, expectedNode) {
			let placeholder$1 = node;
			if (!placeholder$1.expectedNode || !placeholder$1.type) placeholder$1 = this.finishNode(placeholder$1, "Placeholder");
			placeholder$1.expectedNode = expectedNode;
			return placeholder$1;
		}
		getTokenFromCode(code$1) {
			if (code$1 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) this.finishOp(133, 2);
			else super.getTokenFromCode(code$1);
		}
		parseExprAtom(refExpressionErrors) {
			return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
		}
		parseIdentifier(liberal) {
			return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
		}
		checkReservedWord(word$3, startLoc, checkKeywords, isBinding$2) {
			if (word$3 !== void 0) super.checkReservedWord(word$3, startLoc, checkKeywords, isBinding$2);
		}
		parseBindingAtom() {
			return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
		}
		isValidLVal(type, isParenthesized, binding) {
			return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
		}
		toAssignable(node, isLHS) {
			if (node && node.type === "Placeholder" && node.expectedNode === "Expression") node.expectedNode = "Pattern";
			else super.toAssignable(node, isLHS);
		}
		chStartsBindingIdentifier(ch, pos) {
			if (super.chStartsBindingIdentifier(ch, pos)) return true;
			const nextToken = this.lookahead();
			if (nextToken.type === 133) return true;
			return false;
		}
		verifyBreakContinue(node, isBreak) {
			if (node.label && node.label.type === "Placeholder") return;
			super.verifyBreakContinue(node, isBreak);
		}
		parseExpressionStatement(node, expr) {
			var _expr$extra;
			if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) return super.parseExpressionStatement(node, expr);
			if (this.match(14)) {
				const stmt = node;
				stmt.label = this.finishPlaceholder(expr, "Identifier");
				this.next();
				stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
				return this.finishNode(stmt, "LabeledStatement");
			}
			this.semicolon();
			const stmtPlaceholder = node;
			stmtPlaceholder.name = expr.name;
			return this.finishPlaceholder(stmtPlaceholder, "Statement");
		}
		parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
			return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
		}
		parseFunctionId(requireId) {
			return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
		}
		parseClass(node, isStatement$10, optionalId) {
			const type = isStatement$10 ? "ClassDeclaration" : "ClassExpression";
			this.next();
			const oldStrict = this.state.strict;
			const placeholder$1 = this.parsePlaceholder("Identifier");
			if (placeholder$1) if (this.match(81) || this.match(133) || this.match(5)) node.id = placeholder$1;
			else if (optionalId || !isStatement$10) {
				node.id = null;
				node.body = this.finishPlaceholder(placeholder$1, "ClassBody");
				return this.finishNode(node, type);
			} else throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
			else this.parseClassId(node, isStatement$10, optionalId);
			super.parseClassSuper(node);
			node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
			return this.finishNode(node, type);
		}
		parseExport(node, decorators) {
			const placeholder$1 = this.parsePlaceholder("Identifier");
			if (!placeholder$1) return super.parseExport(node, decorators);
			const node2 = node;
			if (!this.isContextual(98) && !this.match(12)) {
				node2.specifiers = [];
				node2.source = null;
				node2.declaration = this.finishPlaceholder(placeholder$1, "Declaration");
				return this.finishNode(node2, "ExportNamedDeclaration");
			}
			this.expectPlugin("exportDefaultFrom");
			const specifier = this.startNode();
			specifier.exported = placeholder$1;
			node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
			return super.parseExport(node2, decorators);
		}
		isExportDefaultSpecifier() {
			if (this.match(65)) {
				const next = this.nextTokenStart();
				if (this.isUnparsedContextual(next, "from")) {
					if (this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) return true;
				}
			}
			return super.isExportDefaultSpecifier();
		}
		maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
			var _specifiers;
			if ((_specifiers = node.specifiers) != null && _specifiers.length) return true;
			return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
		}
		checkExport(node) {
			const { specifiers } = node;
			if (specifiers != null && specifiers.length) node.specifiers = specifiers.filter((node$1) => node$1.exported.type === "Placeholder");
			super.checkExport(node);
			node.specifiers = specifiers;
		}
		parseImport(node) {
			const placeholder$1 = this.parsePlaceholder("Identifier");
			if (!placeholder$1) return super.parseImport(node);
			node.specifiers = [];
			if (!this.isContextual(98) && !this.match(12)) {
				node.source = this.finishPlaceholder(placeholder$1, "StringLiteral");
				this.semicolon();
				return this.finishNode(node, "ImportDeclaration");
			}
			const specifier = this.startNodeAtNode(placeholder$1);
			specifier.local = placeholder$1;
			node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
			if (this.eat(12)) {
				const hasStarImport = this.maybeParseStarImportSpecifier(node);
				if (!hasStarImport) this.parseNamedImportSpecifiers(node);
			}
			this.expectContextual(98);
			node.source = this.parseImportSource();
			this.semicolon();
			return this.finishNode(node, "ImportDeclaration");
		}
		parseImportSource() {
			return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
		}
		assertNoSpace() {
			if (this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index)) this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
		}
	};
	var v8intrinsic = (superClass) => class V8IntrinsicMixin extends superClass {
		parseV8Intrinsic() {
			if (this.match(54)) {
				const v8IntrinsicStartLoc = this.state.startLoc;
				const node = this.startNode();
				this.next();
				if (tokenIsIdentifier(this.state.type)) {
					const name = this.parseIdentifierName();
					const identifier$6 = this.createIdentifier(node, name);
					identifier$6.type = "V8IntrinsicIdentifier";
					if (this.match(10)) return identifier$6;
				}
				this.unexpected(v8IntrinsicStartLoc);
			}
		}
		parseExprAtom(refExpressionErrors) {
			return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
		}
	};
	const PIPELINE_PROPOSALS = [
		"minimal",
		"fsharp",
		"hack",
		"smart"
	];
	const TOPIC_TOKENS = [
		"^^",
		"@@",
		"^",
		"%",
		"#"
	];
	function validatePlugins(pluginsMap) {
		if (pluginsMap.has("decorators")) {
			if (pluginsMap.has("decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
			const decoratorsBeforeExport = pluginsMap.get("decorators").decoratorsBeforeExport;
			if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
			const allowCallParenthesized = pluginsMap.get("decorators").allowCallParenthesized;
			if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") throw new Error("'allowCallParenthesized' must be a boolean.");
		}
		if (pluginsMap.has("flow") && pluginsMap.has("typescript")) throw new Error("Cannot combine flow and typescript plugins.");
		if (pluginsMap.has("placeholders") && pluginsMap.has("v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
		if (pluginsMap.has("pipelineOperator")) {
			var _pluginsMap$get;
			const proposal = pluginsMap.get("pipelineOperator").proposal;
			if (!PIPELINE_PROPOSALS.includes(proposal)) {
				const proposalList = PIPELINE_PROPOSALS.map((p$2) => `"${p$2}"`).join(", ");
				throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
			}
			const tupleSyntaxIsHash = ((_pluginsMap$get = pluginsMap.get("recordAndTuple")) == null ? void 0 : _pluginsMap$get.syntaxType) === "hash";
			if (proposal === "hack") {
				if (pluginsMap.has("placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
				if (pluginsMap.has("v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
				const topicToken = pluginsMap.get("pipelineOperator").topicToken;
				if (!TOPIC_TOKENS.includes(topicToken)) {
					const tokenList = TOPIC_TOKENS.map((t$9) => `"${t$9}"`).join(", ");
					throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
				}
				if (topicToken === "#" && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
			} else if (proposal === "smart" && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
		}
		if (pluginsMap.has("moduleAttributes")) {
			if (pluginsMap.has("deprecatedImportAssert") || pluginsMap.has("importAssertions")) throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
			const moduleAttributesVersionPluginOption = pluginsMap.get("moduleAttributes").version;
			if (moduleAttributesVersionPluginOption !== "may-2020") throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
		}
		if (pluginsMap.has("importAssertions")) {
			if (pluginsMap.has("deprecatedImportAssert")) throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
		}
		if (!pluginsMap.has("deprecatedImportAssert") && pluginsMap.has("importAttributes") && pluginsMap.get("importAttributes").deprecatedAssertSyntax) pluginsMap.set("deprecatedImportAssert", {});
		if (pluginsMap.has("recordAndTuple")) {
			const syntaxType = pluginsMap.get("recordAndTuple").syntaxType;
			if (syntaxType != null) {
				const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
				if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p$2) => `'${p$2}'`).join(", "));
			}
		}
		if (pluginsMap.has("asyncDoExpressions") && !pluginsMap.has("doExpressions")) {
			const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
			error.missingPlugins = "doExpressions";
			throw error;
		}
		if (pluginsMap.has("optionalChainingAssign") && pluginsMap.get("optionalChainingAssign").version !== "2023-07") throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
	}
	const mixinPlugins = {
		estree,
		jsx,
		flow,
		typescript,
		v8intrinsic,
		placeholders
	};
	const mixinPluginNames = Object.keys(mixinPlugins);
	var ExpressionParser = class extends LValParser {
		checkProto(prop, isRecord, sawProto, refExpressionErrors) {
			if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return sawProto;
			const key = prop.key;
			const name = key.type === "Identifier" ? key.name : key.value;
			if (name === "__proto__") {
				if (isRecord) {
					this.raise(Errors.RecordNoProto, key);
					return true;
				}
				if (sawProto) if (refExpressionErrors) {
					if (refExpressionErrors.doubleProtoLoc === null) refExpressionErrors.doubleProtoLoc = key.loc.start;
				} else this.raise(Errors.DuplicateProto, key);
				return true;
			}
			return sawProto;
		}
		shouldExitDescending(expr, potentialArrowAt) {
			return expr.type === "ArrowFunctionExpression" && this.offsetToSourcePos(expr.start) === potentialArrowAt;
		}
		getExpression() {
			this.enterInitialScopes();
			this.nextToken();
			const expr = this.parseExpression();
			if (!this.match(140)) this.unexpected();
			this.finalizeRemainingComments();
			expr.comments = this.comments;
			expr.errors = this.state.errors;
			if (this.optionFlags & 256) expr.tokens = this.tokens;
			return expr;
		}
		parseExpression(disallowIn, refExpressionErrors) {
			if (disallowIn) return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
			return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
		}
		parseExpressionBase(refExpressionErrors) {
			const startLoc = this.state.startLoc;
			const expr = this.parseMaybeAssign(refExpressionErrors);
			if (this.match(12)) {
				const node = this.startNodeAt(startLoc);
				node.expressions = [expr];
				while (this.eat(12)) node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
				this.toReferencedList(node.expressions);
				return this.finishNode(node, "SequenceExpression");
			}
			return expr;
		}
		parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
			return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
		}
		parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
			return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
		}
		setOptionalParametersError(refExpressionErrors) {
			refExpressionErrors.optionalParametersLoc = this.state.startLoc;
		}
		parseMaybeAssign(refExpressionErrors, afterLeftParse) {
			const startLoc = this.state.startLoc;
			const isYield = this.isContextual(108);
			if (isYield) {
				if (this.prodParam.hasYield) {
					this.next();
					let left$1 = this.parseYield(startLoc);
					if (afterLeftParse) left$1 = afterLeftParse.call(this, left$1, startLoc);
					return left$1;
				}
			}
			let ownExpressionErrors;
			if (refExpressionErrors) ownExpressionErrors = false;
			else {
				refExpressionErrors = new ExpressionErrors();
				ownExpressionErrors = true;
			}
			const { type } = this.state;
			if (type === 10 || tokenIsIdentifier(type)) this.state.potentialArrowAt = this.state.start;
			let left = this.parseMaybeConditional(refExpressionErrors);
			if (afterLeftParse) left = afterLeftParse.call(this, left, startLoc);
			if (tokenIsAssignment(this.state.type)) {
				const node = this.startNodeAt(startLoc);
				const operator$1 = this.state.value;
				node.operator = operator$1;
				if (this.match(29)) {
					this.toAssignable(left, true);
					node.left = left;
					const startIndex = startLoc.index;
					if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) refExpressionErrors.doubleProtoLoc = null;
					if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) refExpressionErrors.shorthandAssignLoc = null;
					if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
						this.checkDestructuringPrivate(refExpressionErrors);
						refExpressionErrors.privateKeyLoc = null;
					}
				} else node.left = left;
				this.next();
				node.right = this.parseMaybeAssign();
				this.checkLVal(left, this.finishNode(node, "AssignmentExpression"));
				return node;
			} else if (ownExpressionErrors) this.checkExpressionErrors(refExpressionErrors, true);
			if (isYield) {
				const { type: type$1 } = this.state;
				const startsExpr$1 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type$1) : tokenCanStartExpression(type$1) && !this.match(54);
				if (startsExpr$1 && !this.isAmbiguousPrefixOrIdentifier()) {
					this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);
					return this.parseYield(startLoc);
				}
			}
			return left;
		}
		parseMaybeConditional(refExpressionErrors) {
			const startLoc = this.state.startLoc;
			const potentialArrowAt = this.state.potentialArrowAt;
			const expr = this.parseExprOps(refExpressionErrors);
			if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
			return this.parseConditional(expr, startLoc, refExpressionErrors);
		}
		parseConditional(expr, startLoc, refExpressionErrors) {
			if (this.eat(17)) {
				const node = this.startNodeAt(startLoc);
				node.test = expr;
				node.consequent = this.parseMaybeAssignAllowIn();
				this.expect(14);
				node.alternate = this.parseMaybeAssign();
				return this.finishNode(node, "ConditionalExpression");
			}
			return expr;
		}
		parseMaybeUnaryOrPrivate(refExpressionErrors) {
			return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
		}
		parseExprOps(refExpressionErrors) {
			const startLoc = this.state.startLoc;
			const potentialArrowAt = this.state.potentialArrowAt;
			const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
			if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
			return this.parseExprOp(expr, startLoc, -1);
		}
		parseExprOp(left, leftStartLoc, minPrec) {
			if (this.isPrivateName(left)) {
				const value = this.getPrivateNameSV(left);
				if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) this.raise(Errors.PrivateInExpectedIn, left, { identifierName: value });
				this.classScope.usePrivateName(value, left.loc.start);
			}
			const op = this.state.type;
			if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
				let prec = tokenOperatorPrecedence(op);
				if (prec > minPrec) {
					if (op === 39) {
						this.expectPlugin("pipelineOperator");
						if (this.state.inFSharpPipelineDirectBody) return left;
						this.checkPipelineAtInfixOperator(left, leftStartLoc);
					}
					const node = this.startNodeAt(leftStartLoc);
					node.left = left;
					node.operator = this.state.value;
					const logical = op === 41 || op === 42;
					const coalesce = op === 40;
					if (coalesce) prec = tokenOperatorPrecedence(42);
					this.next();
					if (op === 39 && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }])) {
						if (this.state.type === 96 && this.prodParam.hasAwait) throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
					}
					node.right = this.parseExprOpRightExpr(op, prec);
					const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
					const nextOp = this.state.type;
					if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
					return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
				}
			}
			return left;
		}
		parseExprOpRightExpr(op, prec) {
			const startLoc = this.state.startLoc;
			switch (op) {
				case 39:
					switch (this.getPluginOption("pipelineOperator", "proposal")) {
						case "hack": return this.withTopicBindingContext(() => {
							return this.parseHackPipeBody();
						});
						case "fsharp": return this.withSoloAwaitPermittingContext(() => {
							return this.parseFSharpPipelineBody(prec);
						});
					}
					if (this.getPluginOption("pipelineOperator", "proposal") === "smart") return this.withTopicBindingContext(() => {
						if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
						return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
					});
				default: return this.parseExprOpBaseRightExpr(op, prec);
			}
		}
		parseExprOpBaseRightExpr(op, prec) {
			const startLoc = this.state.startLoc;
			return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
		}
		parseHackPipeBody() {
			var _body$extra;
			const { startLoc } = this.state;
			const body = this.parseMaybeAssign();
			const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
			if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) this.raise(Errors.PipeUnparenthesizedBody, startLoc, { type: body.type });
			if (!this.topicReferenceWasUsedInCurrentContext()) this.raise(Errors.PipeTopicUnused, startLoc);
			return body;
		}
		checkExponentialAfterUnary(node) {
			if (this.match(57)) this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
		}
		parseMaybeUnary(refExpressionErrors, sawUnary) {
			const startLoc = this.state.startLoc;
			const isAwait = this.isContextual(96);
			if (isAwait && this.recordAwaitIfAllowed()) {
				this.next();
				const expr$1 = this.parseAwait(startLoc);
				if (!sawUnary) this.checkExponentialAfterUnary(expr$1);
				return expr$1;
			}
			const update = this.match(34);
			const node = this.startNode();
			if (tokenIsPrefix(this.state.type)) {
				node.operator = this.state.value;
				node.prefix = true;
				if (this.match(72)) this.expectPlugin("throwExpressions");
				const isDelete = this.match(89);
				this.next();
				node.argument = this.parseMaybeUnary(null, true);
				this.checkExpressionErrors(refExpressionErrors, true);
				if (this.state.strict && isDelete) {
					const arg = node.argument;
					if (arg.type === "Identifier") this.raise(Errors.StrictDelete, node);
					else if (this.hasPropertyAsPrivateName(arg)) this.raise(Errors.DeletePrivateField, node);
				}
				if (!update) {
					if (!sawUnary) this.checkExponentialAfterUnary(node);
					return this.finishNode(node, "UnaryExpression");
				}
			}
			const expr = this.parseUpdate(node, update, refExpressionErrors);
			if (isAwait) {
				const { type } = this.state;
				const startsExpr$1 = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
				if (startsExpr$1 && !this.isAmbiguousPrefixOrIdentifier()) {
					this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
					return this.parseAwait(startLoc);
				}
			}
			return expr;
		}
		parseUpdate(node, update, refExpressionErrors) {
			if (update) {
				const updateExpressionNode = node;
				this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression"));
				return node;
			}
			const startLoc = this.state.startLoc;
			let expr = this.parseExprSubscripts(refExpressionErrors);
			if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
			while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
				const node$1 = this.startNodeAt(startLoc);
				node$1.operator = this.state.value;
				node$1.prefix = false;
				node$1.argument = expr;
				this.next();
				this.checkLVal(expr, expr = this.finishNode(node$1, "UpdateExpression"));
			}
			return expr;
		}
		parseExprSubscripts(refExpressionErrors) {
			const startLoc = this.state.startLoc;
			const potentialArrowAt = this.state.potentialArrowAt;
			const expr = this.parseExprAtom(refExpressionErrors);
			if (this.shouldExitDescending(expr, potentialArrowAt)) return expr;
			return this.parseSubscripts(expr, startLoc);
		}
		parseSubscripts(base$1, startLoc, noCalls) {
			const state = {
				optionalChainMember: false,
				maybeAsyncArrow: this.atPossibleAsyncArrow(base$1),
				stop: false
			};
			do {
				base$1 = this.parseSubscript(base$1, startLoc, noCalls, state);
				state.maybeAsyncArrow = false;
			} while (!state.stop);
			return base$1;
		}
		parseSubscript(base$1, startLoc, noCalls, state) {
			const { type } = this.state;
			if (!noCalls && type === 15) return this.parseBind(base$1, startLoc, noCalls, state);
			else if (tokenIsTemplate(type)) return this.parseTaggedTemplateExpression(base$1, startLoc, state);
			let optional = false;
			if (type === 18) {
				if (noCalls) {
					this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
					if (this.lookaheadCharCode() === 40) {
						state.stop = true;
						return base$1;
					}
				}
				state.optionalChainMember = optional = true;
				this.next();
			}
			if (!noCalls && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(base$1, startLoc, state, optional);
			else {
				const computed = this.eat(0);
				if (computed || optional || this.eat(16)) return this.parseMember(base$1, startLoc, state, computed, optional);
				else {
					state.stop = true;
					return base$1;
				}
			}
		}
		parseMember(base$1, startLoc, state, computed, optional) {
			const node = this.startNodeAt(startLoc);
			node.object = base$1;
			node.computed = computed;
			if (computed) {
				node.property = this.parseExpression();
				this.expect(3);
			} else if (this.match(139)) {
				if (base$1.type === "Super") this.raise(Errors.SuperPrivateField, startLoc);
				this.classScope.usePrivateName(this.state.value, this.state.startLoc);
				node.property = this.parsePrivateName();
			} else node.property = this.parseIdentifier(true);
			if (state.optionalChainMember) {
				node.optional = optional;
				return this.finishNode(node, "OptionalMemberExpression");
			} else return this.finishNode(node, "MemberExpression");
		}
		parseBind(base$1, startLoc, noCalls, state) {
			const node = this.startNodeAt(startLoc);
			node.object = base$1;
			this.next();
			node.callee = this.parseNoCallExpr();
			state.stop = true;
			return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
		}
		parseCoverCallAndAsyncArrowHead(base$1, startLoc, state, optional) {
			const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
			let refExpressionErrors = null;
			this.state.maybeInArrowParameters = true;
			this.next();
			const node = this.startNodeAt(startLoc);
			node.callee = base$1;
			const { maybeAsyncArrow, optionalChainMember } = state;
			if (maybeAsyncArrow) {
				this.expressionScope.enter(newAsyncArrowScope());
				refExpressionErrors = new ExpressionErrors();
			}
			if (optionalChainMember) node.optional = optional;
			if (optional) node.arguments = this.parseCallExpressionArguments(11);
			else node.arguments = this.parseCallExpressionArguments(11, base$1.type !== "Super", node, refExpressionErrors);
			let finishedNode = this.finishCallExpression(node, optionalChainMember);
			if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
				state.stop = true;
				this.checkDestructuringPrivate(refExpressionErrors);
				this.expressionScope.validateAsPattern();
				this.expressionScope.exit();
				finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
			} else {
				if (maybeAsyncArrow) {
					this.checkExpressionErrors(refExpressionErrors, true);
					this.expressionScope.exit();
				}
				this.toReferencedArguments(finishedNode);
			}
			this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			return finishedNode;
		}
		toReferencedArguments(node, isParenthesizedExpr) {
			this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
		}
		parseTaggedTemplateExpression(base$1, startLoc, state) {
			const node = this.startNodeAt(startLoc);
			node.tag = base$1;
			node.quasi = this.parseTemplate(true);
			if (state.optionalChainMember) this.raise(Errors.OptionalChainingNoTemplate, startLoc);
			return this.finishNode(node, "TaggedTemplateExpression");
		}
		atPossibleAsyncArrow(base$1) {
			return base$1.type === "Identifier" && base$1.name === "async" && this.state.lastTokEndLoc.index === base$1.end && !this.canInsertSemicolon() && base$1.end - base$1.start === 5 && this.offsetToSourcePos(base$1.start) === this.state.potentialArrowAt;
		}
		finishCallExpression(node, optional) {
			if (node.callee.type === "Import") {
				if (node.arguments.length === 0 || node.arguments.length > 2) this.raise(Errors.ImportCallArity, node);
				else for (const arg of node.arguments) if (arg.type === "SpreadElement") this.raise(Errors.ImportCallSpreadArgument, arg);
			}
			return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
		}
		parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
			const elts = [];
			let first = true;
			const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
			this.state.inFSharpPipelineDirectBody = false;
			while (!this.eat(close)) {
				if (first) first = false;
				else {
					this.expect(12);
					if (this.match(close)) {
						if (nodeForExtra) this.addTrailingCommaExtraToNode(nodeForExtra);
						this.next();
						break;
					}
				}
				elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
			}
			this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
			return elts;
		}
		shouldParseAsyncArrow() {
			return this.match(19) && !this.canInsertSemicolon();
		}
		parseAsyncArrowFromCallExpression(node, call$2) {
			var _call$extra;
			this.resetPreviousNodeTrailingComments(call$2);
			this.expect(19);
			this.parseArrowExpression(node, call$2.arguments, true, (_call$extra = call$2.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
			if (call$2.innerComments) setInnerComments(node, call$2.innerComments);
			if (call$2.callee.trailingComments) setInnerComments(node, call$2.callee.trailingComments);
			return node;
		}
		parseNoCallExpr() {
			const startLoc = this.state.startLoc;
			return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
		}
		parseExprAtom(refExpressionErrors) {
			let node;
			let decorators = null;
			const { type } = this.state;
			switch (type) {
				case 79: return this.parseSuper();
				case 83:
					node = this.startNode();
					this.next();
					if (this.match(16)) return this.parseImportMetaProperty(node);
					if (this.match(10)) if (this.optionFlags & 512) return this.parseImportCall(node);
					else return this.finishNode(node, "Import");
					else {
						this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
						return this.finishNode(node, "Import");
					}
				case 78:
					node = this.startNode();
					this.next();
					return this.finishNode(node, "ThisExpression");
				case 90: return this.parseDo(this.startNode(), false);
				case 56:
				case 31: {
					this.readRegexp();
					return this.parseRegExpLiteral(this.state.value);
				}
				case 135: return this.parseNumericLiteral(this.state.value);
				case 136: return this.parseBigIntLiteral(this.state.value);
				case 134: return this.parseStringLiteral(this.state.value);
				case 84: return this.parseNullLiteral();
				case 85: return this.parseBooleanLiteral(true);
				case 86: return this.parseBooleanLiteral(false);
				case 10: {
					const canBeArrow = this.state.potentialArrowAt === this.state.start;
					return this.parseParenAndDistinguishExpression(canBeArrow);
				}
				case 2:
				case 1: return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
				case 0: return this.parseArrayLike(3, true, false, refExpressionErrors);
				case 6:
				case 7: return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
				case 5: return this.parseObjectLike(8, false, false, refExpressionErrors);
				case 68: return this.parseFunctionOrFunctionSent();
				case 26: decorators = this.parseDecorators();
				case 80: return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
				case 77: return this.parseNewOrNewTarget();
				case 25:
				case 24: return this.parseTemplate(false);
				case 15: {
					node = this.startNode();
					this.next();
					node.object = null;
					const callee = node.callee = this.parseNoCallExpr();
					if (callee.type === "MemberExpression") return this.finishNode(node, "BindExpression");
					else throw this.raise(Errors.UnsupportedBind, callee);
				}
				case 139: {
					this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value });
					return this.parsePrivateName();
				}
				case 33: return this.parseTopicReferenceThenEqualsSign(54, "%");
				case 32: return this.parseTopicReferenceThenEqualsSign(44, "^");
				case 37:
				case 38: return this.parseTopicReference("hack");
				case 44:
				case 54:
				case 27: {
					const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
					if (pipeProposal) return this.parseTopicReference(pipeProposal);
					this.unexpected();
					break;
				}
				case 47: {
					const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
					if (isIdentifierStart$1(lookaheadCh) || lookaheadCh === 62) this.expectOnePlugin([
						"jsx",
						"flow",
						"typescript"
					]);
					else this.unexpected();
					break;
				}
				default:
					if (type === 137) return this.parseDecimalLiteral(this.state.value);
					if (tokenIsIdentifier(type)) {
						if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) return this.parseModuleExpression();
						const canBeArrow = this.state.potentialArrowAt === this.state.start;
						const containsEsc = this.state.containsEsc;
						const id$4 = this.parseIdentifier();
						if (!containsEsc && id$4.name === "async" && !this.canInsertSemicolon()) {
							const { type: type$1 } = this.state;
							if (type$1 === 68) {
								this.resetPreviousNodeTrailingComments(id$4);
								this.next();
								return this.parseAsyncFunctionExpression(this.startNodeAtNode(id$4));
							} else if (tokenIsIdentifier(type$1)) if (this.lookaheadCharCode() === 61) return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id$4));
							else return id$4;
							else if (type$1 === 90) {
								this.resetPreviousNodeTrailingComments(id$4);
								return this.parseDo(this.startNodeAtNode(id$4), true);
							}
						}
						if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
							this.next();
							return this.parseArrowExpression(this.startNodeAtNode(id$4), [id$4], false);
						}
						return id$4;
					} else this.unexpected();
			}
		}
		parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
			const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
			if (pipeProposal) {
				this.state.type = topicTokenType;
				this.state.value = topicTokenValue;
				this.state.pos--;
				this.state.end--;
				this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
				return this.parseTopicReference(pipeProposal);
			} else this.unexpected();
		}
		parseTopicReference(pipeProposal) {
			const node = this.startNode();
			const startLoc = this.state.startLoc;
			const tokenType = this.state.type;
			this.next();
			return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
		}
		finishTopicReference(node, startLoc, pipeProposal, tokenType) {
			if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) if (pipeProposal === "hack") {
				if (!this.topicReferenceIsAllowedInCurrentContext()) this.raise(Errors.PipeTopicUnbound, startLoc);
				this.registerTopicReference();
				return this.finishNode(node, "TopicReference");
			} else {
				if (!this.topicReferenceIsAllowedInCurrentContext()) this.raise(Errors.PrimaryTopicNotAllowed, startLoc);
				this.registerTopicReference();
				return this.finishNode(node, "PipelinePrimaryTopicReference");
			}
			else throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, { token: tokenLabelName(tokenType) });
		}
		testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
			switch (pipeProposal) {
				case "hack": return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
				case "smart": return tokenType === 27;
				default: throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
			}
		}
		parseAsyncArrowUnaryFunction(node) {
			this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
			const params = [this.parseIdentifier()];
			this.prodParam.exit();
			if (this.hasPrecedingLineBreak()) this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
			this.expect(19);
			return this.parseArrowExpression(node, params, true);
		}
		parseDo(node, isAsync) {
			this.expectPlugin("doExpressions");
			if (isAsync) this.expectPlugin("asyncDoExpressions");
			node.async = isAsync;
			this.next();
			const oldLabels = this.state.labels;
			this.state.labels = [];
			if (isAsync) {
				this.prodParam.enter(2);
				node.body = this.parseBlock();
				this.prodParam.exit();
			} else node.body = this.parseBlock();
			this.state.labels = oldLabels;
			return this.finishNode(node, "DoExpression");
		}
		parseSuper() {
			const node = this.startNode();
			this.next();
			if (this.match(10) && !this.scope.allowDirectSuper && !(this.optionFlags & 16)) this.raise(Errors.SuperNotAllowed, node);
			else if (!this.scope.allowSuper && !(this.optionFlags & 16)) this.raise(Errors.UnexpectedSuper, node);
			if (!this.match(10) && !this.match(0) && !this.match(16)) this.raise(Errors.UnsupportedSuper, node);
			return this.finishNode(node, "Super");
		}
		parsePrivateName() {
			const node = this.startNode();
			const id$4 = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
			const name = this.state.value;
			this.next();
			node.id = this.createIdentifier(id$4, name);
			return this.finishNode(node, "PrivateName");
		}
		parseFunctionOrFunctionSent() {
			const node = this.startNode();
			this.next();
			if (this.prodParam.hasYield && this.match(16)) {
				const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
				this.next();
				if (this.match(103)) this.expectPlugin("functionSent");
				else if (!this.hasPlugin("functionSent")) this.unexpected();
				return this.parseMetaProperty(node, meta, "sent");
			}
			return this.parseFunction(node);
		}
		parseMetaProperty(node, meta, propertyName) {
			node.meta = meta;
			const containsEsc = this.state.containsEsc;
			node.property = this.parseIdentifier(true);
			if (node.property.name !== propertyName || containsEsc) this.raise(Errors.UnsupportedMetaProperty, node.property, {
				target: meta.name,
				onlyValidPropertyName: propertyName
			});
			return this.finishNode(node, "MetaProperty");
		}
		parseImportMetaProperty(node) {
			const id$4 = this.createIdentifier(this.startNodeAtNode(node), "import");
			this.next();
			if (this.isContextual(101)) {
				if (!this.inModule) this.raise(Errors.ImportMetaOutsideModule, id$4);
				this.sawUnambiguousESM = true;
			} else if (this.isContextual(105) || this.isContextual(97)) {
				const isSource = this.isContextual(105);
				this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
				if (!(this.optionFlags & 512)) throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
				this.next();
				node.phase = isSource ? "source" : "defer";
				return this.parseImportCall(node);
			}
			return this.parseMetaProperty(node, id$4, "meta");
		}
		parseLiteralAtNode(value, type, node) {
			this.addExtra(node, "rawValue", value);
			this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));
			node.value = value;
			this.next();
			return this.finishNode(node, type);
		}
		parseLiteral(value, type) {
			const node = this.startNode();
			return this.parseLiteralAtNode(value, type, node);
		}
		parseStringLiteral(value) {
			return this.parseLiteral(value, "StringLiteral");
		}
		parseNumericLiteral(value) {
			return this.parseLiteral(value, "NumericLiteral");
		}
		parseBigIntLiteral(value) {
			return this.parseLiteral(value, "BigIntLiteral");
		}
		parseDecimalLiteral(value) {
			return this.parseLiteral(value, "DecimalLiteral");
		}
		parseRegExpLiteral(value) {
			const node = this.startNode();
			this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));
			node.pattern = value.pattern;
			node.flags = value.flags;
			this.next();
			return this.finishNode(node, "RegExpLiteral");
		}
		parseBooleanLiteral(value) {
			const node = this.startNode();
			node.value = value;
			this.next();
			return this.finishNode(node, "BooleanLiteral");
		}
		parseNullLiteral() {
			const node = this.startNode();
			this.next();
			return this.finishNode(node, "NullLiteral");
		}
		parseParenAndDistinguishExpression(canBeArrow) {
			const startLoc = this.state.startLoc;
			let val;
			this.next();
			this.expressionScope.enter(newArrowHeadScope());
			const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
			const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
			this.state.maybeInArrowParameters = true;
			this.state.inFSharpPipelineDirectBody = false;
			const innerStartLoc = this.state.startLoc;
			const exprList = [];
			const refExpressionErrors = new ExpressionErrors();
			let first = true;
			let spreadStartLoc;
			let optionalCommaStartLoc;
			while (!this.match(11)) {
				if (first) first = false;
				else {
					this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
					if (this.match(11)) {
						optionalCommaStartLoc = this.state.startLoc;
						break;
					}
				}
				if (this.match(21)) {
					const spreadNodeStartLoc = this.state.startLoc;
					spreadStartLoc = this.state.startLoc;
					exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
					if (!this.checkCommaAfterRest(41)) break;
				} else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
			}
			const innerEndLoc = this.state.lastTokEndLoc;
			this.expect(11);
			this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
			let arrowNode = this.startNodeAt(startLoc);
			if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
				this.checkDestructuringPrivate(refExpressionErrors);
				this.expressionScope.validateAsPattern();
				this.expressionScope.exit();
				this.parseArrowExpression(arrowNode, exprList, false);
				return arrowNode;
			}
			this.expressionScope.exit();
			if (!exprList.length) this.unexpected(this.state.lastTokStartLoc);
			if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
			if (spreadStartLoc) this.unexpected(spreadStartLoc);
			this.checkExpressionErrors(refExpressionErrors, true);
			this.toReferencedListDeep(exprList, true);
			if (exprList.length > 1) {
				val = this.startNodeAt(innerStartLoc);
				val.expressions = exprList;
				this.finishNode(val, "SequenceExpression");
				this.resetEndLocation(val, innerEndLoc);
			} else val = exprList[0];
			return this.wrapParenthesis(startLoc, val);
		}
		wrapParenthesis(startLoc, expression$2) {
			if (!(this.optionFlags & 1024)) {
				this.addExtra(expression$2, "parenthesized", true);
				this.addExtra(expression$2, "parenStart", startLoc.index);
				this.takeSurroundingComments(expression$2, startLoc.index, this.state.lastTokEndLoc.index);
				return expression$2;
			}
			const parenExpression = this.startNodeAt(startLoc);
			parenExpression.expression = expression$2;
			return this.finishNode(parenExpression, "ParenthesizedExpression");
		}
		shouldParseArrow(params) {
			return !this.canInsertSemicolon();
		}
		parseArrow(node) {
			if (this.eat(19)) return node;
		}
		parseParenItem(node, startLoc) {
			return node;
		}
		parseNewOrNewTarget() {
			const node = this.startNode();
			this.next();
			if (this.match(16)) {
				const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
				this.next();
				const metaProp = this.parseMetaProperty(node, meta, "target");
				if (!this.scope.inNonArrowFunction && !this.scope.inClass && !(this.optionFlags & 4)) this.raise(Errors.UnexpectedNewTarget, metaProp);
				return metaProp;
			}
			return this.parseNew(node);
		}
		parseNew(node) {
			this.parseNewCallee(node);
			if (this.eat(10)) {
				const args = this.parseExprList(11);
				this.toReferencedList(args);
				node.arguments = args;
			} else node.arguments = [];
			return this.finishNode(node, "NewExpression");
		}
		parseNewCallee(node) {
			const isImport$1 = this.match(83);
			const callee = this.parseNoCallExpr();
			node.callee = callee;
			if (isImport$1 && (callee.type === "Import" || callee.type === "ImportExpression")) this.raise(Errors.ImportCallNotNewExpression, callee);
		}
		parseTemplateElement(isTagged) {
			const { start, startLoc, end, value } = this.state;
			const elemStart = start + 1;
			const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
			if (value === null) {
				if (!isTagged) this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
			}
			const isTail = this.match(24);
			const endOffset = isTail ? -1 : -2;
			const elemEnd = end + endOffset;
			elem.value = {
				raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
				cooked: value === null ? null : value.slice(1, endOffset)
			};
			elem.tail = isTail;
			this.next();
			const finishedNode = this.finishNode(elem, "TemplateElement");
			this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
			return finishedNode;
		}
		parseTemplate(isTagged) {
			const node = this.startNode();
			let curElt = this.parseTemplateElement(isTagged);
			const quasis = [curElt];
			const substitutions = [];
			while (!curElt.tail) {
				substitutions.push(this.parseTemplateSubstitution());
				this.readTemplateContinuation();
				quasis.push(curElt = this.parseTemplateElement(isTagged));
			}
			node.expressions = substitutions;
			node.quasis = quasis;
			return this.finishNode(node, "TemplateLiteral");
		}
		parseTemplateSubstitution() {
			return this.parseExpression();
		}
		parseObjectLike(close, isPattern$2, isRecord, refExpressionErrors) {
			if (isRecord) this.expectPlugin("recordAndTuple");
			const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
			this.state.inFSharpPipelineDirectBody = false;
			let sawProto = false;
			let first = true;
			const node = this.startNode();
			node.properties = [];
			this.next();
			while (!this.match(close)) {
				if (first) first = false;
				else {
					this.expect(12);
					if (this.match(close)) {
						this.addTrailingCommaExtraToNode(node);
						break;
					}
				}
				let prop;
				if (isPattern$2) prop = this.parseBindingProperty();
				else {
					prop = this.parsePropertyDefinition(refExpressionErrors);
					sawProto = this.checkProto(prop, isRecord, sawProto, refExpressionErrors);
				}
				if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") this.raise(Errors.InvalidRecordProperty, prop);
				if (prop.shorthand) this.addExtra(prop, "shorthand", true);
				node.properties.push(prop);
			}
			this.next();
			this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
			let type = "ObjectExpression";
			if (isPattern$2) type = "ObjectPattern";
			else if (isRecord) type = "RecordExpression";
			return this.finishNode(node, type);
		}
		addTrailingCommaExtraToNode(node) {
			this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index);
			this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
		}
		maybeAsyncOrAccessorProp(prop) {
			return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
		}
		parsePropertyDefinition(refExpressionErrors) {
			let decorators = [];
			if (this.match(26)) {
				if (this.hasPlugin("decorators")) this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
				while (this.match(26)) decorators.push(this.parseDecorator());
			}
			const prop = this.startNode();
			let isAsync = false;
			let isAccessor$1 = false;
			let startLoc;
			if (this.match(21)) {
				if (decorators.length) this.unexpected();
				return this.parseSpread();
			}
			if (decorators.length) {
				prop.decorators = decorators;
				decorators = [];
			}
			prop.method = false;
			if (refExpressionErrors) startLoc = this.state.startLoc;
			let isGenerator = this.eat(55);
			this.parsePropertyNamePrefixOperator(prop);
			const containsEsc = this.state.containsEsc;
			this.parsePropertyName(prop, refExpressionErrors);
			if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
				const { key } = prop;
				const keyName = key.name;
				if (keyName === "async" && !this.hasPrecedingLineBreak()) {
					isAsync = true;
					this.resetPreviousNodeTrailingComments(key);
					isGenerator = this.eat(55);
					this.parsePropertyName(prop);
				}
				if (keyName === "get" || keyName === "set") {
					isAccessor$1 = true;
					this.resetPreviousNodeTrailingComments(key);
					prop.kind = keyName;
					if (this.match(55)) {
						isGenerator = true;
						this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), { kind: keyName });
						this.next();
					}
					this.parsePropertyName(prop);
				}
			}
			return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor$1, refExpressionErrors);
		}
		getGetterSetterExpectedParamCount(method) {
			return method.kind === "get" ? 0 : 1;
		}
		getObjectOrClassMethodParams(method) {
			return method.params;
		}
		checkGetterSetterParams(method) {
			var _params$1;
			const paramCount = this.getGetterSetterExpectedParamCount(method);
			const params = this.getObjectOrClassMethodParams(method);
			if (params.length !== paramCount) this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
			if (method.kind === "set" && ((_params$1 = params[params.length - 1]) == null ? void 0 : _params$1.type) === "RestElement") this.raise(Errors.BadSetterRestParameter, method);
		}
		parseObjectMethod(prop, isGenerator, isAsync, isPattern$2, isAccessor$1) {
			if (isAccessor$1) {
				const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
				this.checkGetterSetterParams(finishedProp);
				return finishedProp;
			}
			if (isAsync || isGenerator || this.match(10)) {
				if (isPattern$2) this.unexpected();
				prop.kind = "method";
				prop.method = true;
				return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
			}
		}
		parseObjectProperty(prop, startLoc, isPattern$2, refExpressionErrors) {
			prop.shorthand = false;
			if (this.eat(14)) {
				prop.value = isPattern$2 ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
				return this.finishNode(prop, "ObjectProperty");
			}
			if (!prop.computed && prop.key.type === "Identifier") {
				this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
				if (isPattern$2) prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
				else if (this.match(29)) {
					const shorthandAssignLoc = this.state.startLoc;
					if (refExpressionErrors != null) {
						if (refExpressionErrors.shorthandAssignLoc === null) refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
					} else this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
					prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
				} else prop.value = cloneIdentifier(prop.key);
				prop.shorthand = true;
				return this.finishNode(prop, "ObjectProperty");
			}
		}
		parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern$2, isAccessor$1, refExpressionErrors) {
			const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern$2, isAccessor$1) || this.parseObjectProperty(prop, startLoc, isPattern$2, refExpressionErrors);
			if (!node) this.unexpected();
			return node;
		}
		parsePropertyName(prop, refExpressionErrors) {
			if (this.eat(0)) {
				prop.computed = true;
				prop.key = this.parseMaybeAssignAllowIn();
				this.expect(3);
			} else {
				const { type, value } = this.state;
				let key;
				if (tokenIsKeywordOrIdentifier(type)) key = this.parseIdentifier(true);
				else switch (type) {
					case 135:
						key = this.parseNumericLiteral(value);
						break;
					case 134:
						key = this.parseStringLiteral(value);
						break;
					case 136:
						key = this.parseBigIntLiteral(value);
						break;
					case 139: {
						const privateKeyLoc = this.state.startLoc;
						if (refExpressionErrors != null) {
							if (refExpressionErrors.privateKeyLoc === null) refExpressionErrors.privateKeyLoc = privateKeyLoc;
						} else this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
						key = this.parsePrivateName();
						break;
					}
					default:
						if (type === 137) {
							key = this.parseDecimalLiteral(value);
							break;
						}
						this.unexpected();
				}
				prop.key = key;
				if (type !== 139) prop.computed = false;
			}
		}
		initFunction(node, isAsync) {
			node.id = null;
			node.generator = false;
			node.async = isAsync;
		}
		parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
			this.initFunction(node, isAsync);
			node.generator = isGenerator;
			this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
			this.prodParam.enter(functionFlags(isAsync, node.generator));
			this.parseFunctionParams(node, isConstructor);
			const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
			this.prodParam.exit();
			this.scope.exit();
			return finishedNode;
		}
		parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
			if (isTuple) this.expectPlugin("recordAndTuple");
			const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
			this.state.inFSharpPipelineDirectBody = false;
			const node = this.startNode();
			this.next();
			node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
			this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
			return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
		}
		parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
			this.scope.enter(6);
			let flags = functionFlags(isAsync, false);
			if (!this.match(5) && this.prodParam.hasIn) flags |= 8;
			this.prodParam.enter(flags);
			this.initFunction(node, isAsync);
			const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
			if (params) {
				this.state.maybeInArrowParameters = true;
				this.setArrowFunctionParameters(node, params, trailingCommaLoc);
			}
			this.state.maybeInArrowParameters = false;
			this.parseFunctionBody(node, true);
			this.prodParam.exit();
			this.scope.exit();
			this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			return this.finishNode(node, "ArrowFunctionExpression");
		}
		setArrowFunctionParameters(node, params, trailingCommaLoc) {
			this.toAssignableList(params, trailingCommaLoc, false);
			node.params = params;
		}
		parseFunctionBodyAndFinish(node, type, isMethod$2 = false) {
			this.parseFunctionBody(node, false, isMethod$2);
			return this.finishNode(node, type);
		}
		parseFunctionBody(node, allowExpression, isMethod$2 = false) {
			const isExpression$6 = allowExpression && !this.match(5);
			this.expressionScope.enter(newExpressionScope());
			if (isExpression$6) {
				node.body = this.parseMaybeAssign();
				this.checkParams(node, false, allowExpression, false);
			} else {
				const oldStrict = this.state.strict;
				const oldLabels = this.state.labels;
				this.state.labels = [];
				this.prodParam.enter(this.prodParam.currentFlags() | 4);
				node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
					const nonSimple = !this.isSimpleParamList(node.params);
					if (hasStrictModeDirective && nonSimple) this.raise(Errors.IllegalLanguageModeDirective, (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node);
					const strictModeChanged = !oldStrict && this.state.strict;
					this.checkParams(node, !this.state.strict && !allowExpression && !isMethod$2 && !nonSimple, allowExpression, strictModeChanged);
					if (this.state.strict && node.id) this.checkIdentifier(node.id, 65, strictModeChanged);
				});
				this.prodParam.exit();
				this.state.labels = oldLabels;
			}
			this.expressionScope.exit();
		}
		isSimpleParameter(node) {
			return node.type === "Identifier";
		}
		isSimpleParamList(params) {
			for (let i$6 = 0, len = params.length; i$6 < len; i$6++) if (!this.isSimpleParameter(params[i$6])) return false;
			return true;
		}
		checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
			const checkClashes = !allowDuplicates && new Set();
			const formalParameters = { type: "FormalParameters" };
			for (const param of node.params) this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
		}
		parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
			const elts = [];
			let first = true;
			while (!this.eat(close)) {
				if (first) first = false;
				else {
					this.expect(12);
					if (this.match(close)) {
						if (nodeForExtra) this.addTrailingCommaExtraToNode(nodeForExtra);
						this.next();
						break;
					}
				}
				elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
			}
			return elts;
		}
		parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
			let elt;
			if (this.match(12)) {
				if (!allowEmpty) this.raise(Errors.UnexpectedToken, this.state.curPosition(), { unexpected: "," });
				elt = null;
			} else if (this.match(21)) {
				const spreadNodeStartLoc = this.state.startLoc;
				elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
			} else if (this.match(17)) {
				this.expectPlugin("partialApplication");
				if (!allowPlaceholder) this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
				const node = this.startNode();
				this.next();
				elt = this.finishNode(node, "ArgumentPlaceholder");
			} else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
			return elt;
		}
		parseIdentifier(liberal) {
			const node = this.startNode();
			const name = this.parseIdentifierName(liberal);
			return this.createIdentifier(node, name);
		}
		createIdentifier(node, name) {
			node.name = name;
			node.loc.identifierName = name;
			return this.finishNode(node, "Identifier");
		}
		parseIdentifierName(liberal) {
			let name;
			const { startLoc, type } = this.state;
			if (tokenIsKeywordOrIdentifier(type)) name = this.state.value;
			else this.unexpected();
			const tokenIsKeyword$1 = tokenKeywordOrIdentifierIsKeyword(type);
			if (liberal) {
				if (tokenIsKeyword$1) this.replaceToken(132);
			} else this.checkReservedWord(name, startLoc, tokenIsKeyword$1, false);
			this.next();
			return name;
		}
		checkReservedWord(word$3, startLoc, checkKeywords, isBinding$2) {
			if (word$3.length > 10) return;
			if (!canBeReservedWord(word$3)) return;
			if (checkKeywords && isKeyword$1(word$3)) {
				this.raise(Errors.UnexpectedKeyword, startLoc, { keyword: word$3 });
				return;
			}
			const reservedTest = !this.state.strict ? isReservedWord$1 : isBinding$2 ? isStrictBindReservedWord$1 : isStrictReservedWord$1;
			if (reservedTest(word$3, this.inModule)) {
				this.raise(Errors.UnexpectedReservedWord, startLoc, { reservedWord: word$3 });
				return;
			} else if (word$3 === "yield") {
				if (this.prodParam.hasYield) {
					this.raise(Errors.YieldBindingIdentifier, startLoc);
					return;
				}
			} else if (word$3 === "await") {
				if (this.prodParam.hasAwait) {
					this.raise(Errors.AwaitBindingIdentifier, startLoc);
					return;
				}
				if (this.scope.inStaticBlock) {
					this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
					return;
				}
				this.expressionScope.recordAsyncArrowParametersError(startLoc);
			} else if (word$3 === "arguments") {
				if (this.scope.inClassAndNotInNonArrowFunction) {
					this.raise(Errors.ArgumentsInClass, startLoc);
					return;
				}
			}
		}
		recordAwaitIfAllowed() {
			const isAwaitAllowed = this.prodParam.hasAwait || this.optionFlags & 1 && !this.scope.inFunction;
			if (isAwaitAllowed && !this.scope.inFunction) this.state.hasTopLevelAwait = true;
			return isAwaitAllowed;
		}
		parseAwait(startLoc) {
			const node = this.startNodeAt(startLoc);
			this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);
			if (this.eat(55)) this.raise(Errors.ObsoleteAwaitStar, node);
			if (!this.scope.inFunction && !(this.optionFlags & 1)) if (this.isAmbiguousPrefixOrIdentifier()) this.ambiguousScriptDifferentAst = true;
			else this.sawUnambiguousESM = true;
			if (!this.state.soloAwait) node.argument = this.parseMaybeUnary(null, true);
			return this.finishNode(node, "AwaitExpression");
		}
		isAmbiguousPrefixOrIdentifier() {
			if (this.hasPrecedingLineBreak()) return true;
			const { type } = this.state;
			return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 138 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
		}
		parseYield(startLoc) {
			const node = this.startNodeAt(startLoc);
			this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);
			let delegating = false;
			let argument = null;
			if (!this.hasPrecedingLineBreak()) {
				delegating = this.eat(55);
				switch (this.state.type) {
					case 13:
					case 140:
					case 8:
					case 11:
					case 3:
					case 9:
					case 14:
					case 12: if (!delegating) break;
					default: argument = this.parseMaybeAssign();
				}
			}
			node.delegate = delegating;
			node.argument = argument;
			return this.finishNode(node, "YieldExpression");
		}
		parseImportCall(node) {
			this.next();
			node.source = this.parseMaybeAssignAllowIn();
			node.options = null;
			if (this.eat(12)) {
				if (!this.match(11)) {
					node.options = this.parseMaybeAssignAllowIn();
					if (this.eat(12) && !this.match(11)) {
						do
							this.parseMaybeAssignAllowIn();
						while (this.eat(12) && !this.match(11));
						this.raise(Errors.ImportCallArity, node);
					}
				}
			}
			this.expect(11);
			return this.finishNode(node, "ImportExpression");
		}
		checkPipelineAtInfixOperator(left, leftStartLoc) {
			if (this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) {
				if (left.type === "SequenceExpression") this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
			}
		}
		parseSmartPipelineBodyInStyle(childExpr, startLoc) {
			if (this.isSimpleReference(childExpr)) {
				const bodyNode = this.startNodeAt(startLoc);
				bodyNode.callee = childExpr;
				return this.finishNode(bodyNode, "PipelineBareFunction");
			} else {
				const bodyNode = this.startNodeAt(startLoc);
				this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
				bodyNode.expression = childExpr;
				return this.finishNode(bodyNode, "PipelineTopicExpression");
			}
		}
		isSimpleReference(expression$2) {
			switch (expression$2.type) {
				case "MemberExpression": return !expression$2.computed && this.isSimpleReference(expression$2.object);
				case "Identifier": return true;
				default: return false;
			}
		}
		checkSmartPipeTopicBodyEarlyErrors(startLoc) {
			if (this.match(19)) throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
			if (!this.topicReferenceWasUsedInCurrentContext()) this.raise(Errors.PipelineTopicUnused, startLoc);
		}
		withTopicBindingContext(callback) {
			const outerContextTopicState = this.state.topicContext;
			this.state.topicContext = {
				maxNumOfResolvableTopics: 1,
				maxTopicIndex: null
			};
			try {
				return callback();
			} finally {
				this.state.topicContext = outerContextTopicState;
			}
		}
		withSmartMixTopicForbiddingContext(callback) {
			if (this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) {
				const outerContextTopicState = this.state.topicContext;
				this.state.topicContext = {
					maxNumOfResolvableTopics: 0,
					maxTopicIndex: null
				};
				try {
					return callback();
				} finally {
					this.state.topicContext = outerContextTopicState;
				}
			} else return callback();
		}
		withSoloAwaitPermittingContext(callback) {
			const outerContextSoloAwaitState = this.state.soloAwait;
			this.state.soloAwait = true;
			try {
				return callback();
			} finally {
				this.state.soloAwait = outerContextSoloAwaitState;
			}
		}
		allowInAnd(callback) {
			const flags = this.prodParam.currentFlags();
			const prodParamToSet = 8 & ~flags;
			if (prodParamToSet) {
				this.prodParam.enter(flags | 8);
				try {
					return callback();
				} finally {
					this.prodParam.exit();
				}
			}
			return callback();
		}
		disallowInAnd(callback) {
			const flags = this.prodParam.currentFlags();
			const prodParamToClear = 8 & flags;
			if (prodParamToClear) {
				this.prodParam.enter(flags & -9);
				try {
					return callback();
				} finally {
					this.prodParam.exit();
				}
			}
			return callback();
		}
		registerTopicReference() {
			this.state.topicContext.maxTopicIndex = 0;
		}
		topicReferenceIsAllowedInCurrentContext() {
			return this.state.topicContext.maxNumOfResolvableTopics >= 1;
		}
		topicReferenceWasUsedInCurrentContext() {
			return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
		}
		parseFSharpPipelineBody(prec) {
			const startLoc = this.state.startLoc;
			this.state.potentialArrowAt = this.state.start;
			const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
			this.state.inFSharpPipelineDirectBody = true;
			const ret$1 = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
			this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
			return ret$1;
		}
		parseModuleExpression() {
			this.expectPlugin("moduleBlocks");
			const node = this.startNode();
			this.next();
			if (!this.match(5)) this.unexpected(null, 5);
			const program$3 = this.startNodeAt(this.state.endLoc);
			this.next();
			const revertScopes = this.initializeScopes(true);
			this.enterInitialScopes();
			try {
				node.body = this.parseProgram(program$3, 8, "module");
			} finally {
				revertScopes();
			}
			return this.finishNode(node, "ModuleExpression");
		}
		parsePropertyNamePrefixOperator(prop) {}
	};
	const loopLabel = { kind: 1 }, switchLabel = { kind: 2 };
	const loneSurrogate = /[\uD800-\uDFFF]/u;
	const keywordRelationalOperator = /in(?:stanceof)?/y;
	function babel7CompatTokens(tokens$3, input, startIndex) {
		for (let i$6 = 0; i$6 < tokens$3.length; i$6++) {
			const token$1 = tokens$3[i$6];
			const { type } = token$1;
			if (typeof type === "number") {
				{
					if (type === 139) {
						const { loc, start, value, end } = token$1;
						const hashEndPos = start + 1;
						const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
						tokens$3.splice(i$6, 1, new Token({
							type: getExportedToken(27),
							value: "#",
							start,
							end: hashEndPos,
							startLoc: loc.start,
							endLoc: hashEndLoc
						}), new Token({
							type: getExportedToken(132),
							value,
							start: hashEndPos,
							end,
							startLoc: hashEndLoc,
							endLoc: loc.end
						}));
						i$6++;
						continue;
					}
					if (tokenIsTemplate(type)) {
						const { loc, start, value, end } = token$1;
						const backquoteEnd = start + 1;
						const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
						let startToken;
						if (input.charCodeAt(start - startIndex) === 96) startToken = new Token({
							type: getExportedToken(22),
							value: "`",
							start,
							end: backquoteEnd,
							startLoc: loc.start,
							endLoc: backquoteEndLoc
						});
						else startToken = new Token({
							type: getExportedToken(8),
							value: "}",
							start,
							end: backquoteEnd,
							startLoc: loc.start,
							endLoc: backquoteEndLoc
						});
						let templateValue, templateElementEnd, templateElementEndLoc, endToken;
						if (type === 24) {
							templateElementEnd = end - 1;
							templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
							templateValue = value === null ? null : value.slice(1, -1);
							endToken = new Token({
								type: getExportedToken(22),
								value: "`",
								start: templateElementEnd,
								end,
								startLoc: templateElementEndLoc,
								endLoc: loc.end
							});
						} else {
							templateElementEnd = end - 2;
							templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
							templateValue = value === null ? null : value.slice(1, -2);
							endToken = new Token({
								type: getExportedToken(23),
								value: "${",
								start: templateElementEnd,
								end,
								startLoc: templateElementEndLoc,
								endLoc: loc.end
							});
						}
						tokens$3.splice(i$6, 1, startToken, new Token({
							type: getExportedToken(20),
							value: templateValue,
							start: backquoteEnd,
							end: templateElementEnd,
							startLoc: backquoteEndLoc,
							endLoc: templateElementEndLoc
						}), endToken);
						i$6 += 2;
						continue;
					}
				}
				token$1.type = getExportedToken(type);
			}
		}
		return tokens$3;
	}
	var StatementParser = class extends ExpressionParser {
		parseTopLevel(file$2, program$3) {
			file$2.program = this.parseProgram(program$3);
			file$2.comments = this.comments;
			if (this.optionFlags & 256) file$2.tokens = babel7CompatTokens(this.tokens, this.input, this.startIndex);
			return this.finishNode(file$2, "File");
		}
		parseProgram(program$3, end = 140, sourceType = this.options.sourceType) {
			program$3.sourceType = sourceType;
			program$3.interpreter = this.parseInterpreterDirective();
			this.parseBlockBody(program$3, true, true, end);
			if (this.inModule) {
				if (!(this.optionFlags & 64) && this.scope.undefinedExports.size > 0) for (const [localName, at$3] of Array.from(this.scope.undefinedExports)) this.raise(Errors.ModuleExportUndefined, at$3, { localName });
				this.addExtra(program$3, "topLevelAwait", this.state.hasTopLevelAwait);
			}
			let finishedProgram;
			if (end === 140) finishedProgram = this.finishNode(program$3, "Program");
			else finishedProgram = this.finishNodeAt(program$3, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
			return finishedProgram;
		}
		stmtToDirective(stmt) {
			const directive$1 = stmt;
			directive$1.type = "Directive";
			directive$1.value = directive$1.expression;
			delete directive$1.expression;
			const directiveLiteral$1 = directive$1.value;
			const expressionValue = directiveLiteral$1.value;
			const raw = this.input.slice(this.offsetToSourcePos(directiveLiteral$1.start), this.offsetToSourcePos(directiveLiteral$1.end));
			const val = directiveLiteral$1.value = raw.slice(1, -1);
			this.addExtra(directiveLiteral$1, "raw", raw);
			this.addExtra(directiveLiteral$1, "rawValue", val);
			this.addExtra(directiveLiteral$1, "expressionValue", expressionValue);
			directiveLiteral$1.type = "DirectiveLiteral";
			return directive$1;
		}
		parseInterpreterDirective() {
			if (!this.match(28)) return null;
			const node = this.startNode();
			node.value = this.state.value;
			this.next();
			return this.finishNode(node, "InterpreterDirective");
		}
		isLet() {
			if (!this.isContextual(100)) return false;
			return this.hasFollowingBindingAtom();
		}
		chStartsBindingIdentifier(ch, pos) {
			if (isIdentifierStart$1(ch)) {
				keywordRelationalOperator.lastIndex = pos;
				if (keywordRelationalOperator.test(this.input)) {
					const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
					if (!isIdentifierChar$1(endCh) && endCh !== 92) return false;
				}
				return true;
			} else if (ch === 92) return true;
			else return false;
		}
		chStartsBindingPattern(ch) {
			return ch === 91 || ch === 123;
		}
		hasFollowingBindingAtom() {
			const next = this.nextTokenStart();
			const nextCh = this.codePointAtPos(next);
			return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
		}
		hasInLineFollowingBindingIdentifierOrBrace() {
			const next = this.nextTokenInLineStart();
			const nextCh = this.codePointAtPos(next);
			return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);
		}
		startsUsingForOf() {
			const { type, containsEsc } = this.lookahead();
			if (type === 102 && !containsEsc) return false;
			else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
				this.expectPlugin("explicitResourceManagement");
				return true;
			}
		}
		startsAwaitUsing() {
			let next = this.nextTokenInLineStart();
			if (this.isUnparsedContextual(next, "using")) {
				next = this.nextTokenInLineStartSince(next + 5);
				const nextCh = this.codePointAtPos(next);
				if (this.chStartsBindingIdentifier(nextCh, next)) {
					this.expectPlugin("explicitResourceManagement");
					return true;
				}
			}
			return false;
		}
		parseModuleItem() {
			return this.parseStatementLike(15);
		}
		parseStatementListItem() {
			return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
		}
		parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
			let flags = 0;
			if (this.options.annexB && !this.state.strict) {
				flags |= 4;
				if (allowLabeledFunction) flags |= 8;
			}
			return this.parseStatementLike(flags);
		}
		parseStatement() {
			return this.parseStatementLike(0);
		}
		parseStatementLike(flags) {
			let decorators = null;
			if (this.match(26)) decorators = this.parseDecorators(true);
			return this.parseStatementContent(flags, decorators);
		}
		parseStatementContent(flags, decorators) {
			const startType = this.state.type;
			const node = this.startNode();
			const allowDeclaration = !!(flags & 2);
			const allowFunctionDeclaration = !!(flags & 4);
			const topLevel = flags & 1;
			switch (startType) {
				case 60: return this.parseBreakContinueStatement(node, true);
				case 63: return this.parseBreakContinueStatement(node, false);
				case 64: return this.parseDebuggerStatement(node);
				case 90: return this.parseDoWhileStatement(node);
				case 91: return this.parseForStatement(node);
				case 68:
					if (this.lookaheadCharCode() === 46) break;
					if (!allowFunctionDeclaration) this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
					return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
				case 80:
					if (!allowDeclaration) this.unexpected();
					return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
				case 69: return this.parseIfStatement(node);
				case 70: return this.parseReturnStatement(node);
				case 71: return this.parseSwitchStatement(node);
				case 72: return this.parseThrowStatement(node);
				case 73: return this.parseTryStatement(node);
				case 96:
					if (!this.state.containsEsc && this.startsAwaitUsing()) {
						if (!this.recordAwaitIfAllowed()) this.raise(Errors.AwaitUsingNotInAsyncContext, node);
						else if (!allowDeclaration) this.raise(Errors.UnexpectedLexicalDeclaration, node);
						this.next();
						return this.parseVarStatement(node, "await using");
					}
					break;
				case 107:
					if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) break;
					this.expectPlugin("explicitResourceManagement");
					if (!this.scope.inModule && this.scope.inTopLevel) this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
					else if (!allowDeclaration) this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
					return this.parseVarStatement(node, "using");
				case 100: {
					if (this.state.containsEsc) break;
					const next = this.nextTokenStart();
					const nextCh = this.codePointAtPos(next);
					if (nextCh !== 91) {
						if (!allowDeclaration && this.hasFollowingLineBreak()) break;
						if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) break;
					}
				}
				case 75: if (!allowDeclaration) this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
				case 74: {
					const kind = this.state.value;
					return this.parseVarStatement(node, kind);
				}
				case 92: return this.parseWhileStatement(node);
				case 76: return this.parseWithStatement(node);
				case 5: return this.parseBlock();
				case 13: return this.parseEmptyStatement(node);
				case 83: {
					const nextTokenCharCode = this.lookaheadCharCode();
					if (nextTokenCharCode === 40 || nextTokenCharCode === 46) break;
				}
				case 82: {
					if (!(this.optionFlags & 8) && !topLevel) this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
					this.next();
					let result;
					if (startType === 83) result = this.parseImport(node);
					else result = this.parseExport(node, decorators);
					this.assertModuleNodeAllowed(result);
					return result;
				}
				default: if (this.isAsyncFunction()) {
					if (!allowDeclaration) this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
					this.next();
					return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
				}
			}
			const maybeName = this.state.value;
			const expr = this.parseExpression();
			if (tokenIsIdentifier(startType) && expr.type === "Identifier" && this.eat(14)) return this.parseLabeledStatement(node, maybeName, expr, flags);
			else return this.parseExpressionStatement(node, expr, decorators);
		}
		assertModuleNodeAllowed(node) {
			if (!(this.optionFlags & 8) && !this.inModule) this.raise(Errors.ImportOutsideModule, node);
		}
		decoratorsEnabledBeforeExport() {
			if (this.hasPlugin("decorators-legacy")) return true;
			return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
		}
		maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
			if (maybeDecorators) {
				var _classNode$decorators;
				if ((_classNode$decorators = classNode.decorators) != null && _classNode$decorators.length) {
					if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
					classNode.decorators.unshift(...maybeDecorators);
				} else classNode.decorators = maybeDecorators;
				this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
				if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
			}
			return classNode;
		}
		canHaveLeadingDecorator() {
			return this.match(80);
		}
		parseDecorators(allowExport) {
			const decorators = [];
			do
				decorators.push(this.parseDecorator());
			while (this.match(26));
			if (this.match(82)) {
				if (!allowExport) this.unexpected();
				if (!this.decoratorsEnabledBeforeExport()) this.raise(Errors.DecoratorExportClass, this.state.startLoc);
			} else if (!this.canHaveLeadingDecorator()) throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
			return decorators;
		}
		parseDecorator() {
			this.expectOnePlugin(["decorators", "decorators-legacy"]);
			const node = this.startNode();
			this.next();
			if (this.hasPlugin("decorators")) {
				const startLoc = this.state.startLoc;
				let expr;
				if (this.match(10)) {
					const startLoc$1 = this.state.startLoc;
					this.next();
					expr = this.parseExpression();
					this.expect(11);
					expr = this.wrapParenthesis(startLoc$1, expr);
					const paramsStartLoc = this.state.startLoc;
					node.expression = this.parseMaybeDecoratorArguments(expr, startLoc$1);
					if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
				} else {
					expr = this.parseIdentifier(false);
					while (this.eat(16)) {
						const node$1 = this.startNodeAt(startLoc);
						node$1.object = expr;
						if (this.match(139)) {
							this.classScope.usePrivateName(this.state.value, this.state.startLoc);
							node$1.property = this.parsePrivateName();
						} else node$1.property = this.parseIdentifier(true);
						node$1.computed = false;
						expr = this.finishNode(node$1, "MemberExpression");
					}
					node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);
				}
			} else node.expression = this.parseExprSubscripts();
			return this.finishNode(node, "Decorator");
		}
		parseMaybeDecoratorArguments(expr, startLoc) {
			if (this.eat(10)) {
				const node = this.startNodeAt(startLoc);
				node.callee = expr;
				node.arguments = this.parseCallExpressionArguments(11);
				this.toReferencedList(node.arguments);
				return this.finishNode(node, "CallExpression");
			}
			return expr;
		}
		parseBreakContinueStatement(node, isBreak) {
			this.next();
			if (this.isLineTerminator()) node.label = null;
			else {
				node.label = this.parseIdentifier();
				this.semicolon();
			}
			this.verifyBreakContinue(node, isBreak);
			return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
		}
		verifyBreakContinue(node, isBreak) {
			let i$6;
			for (i$6 = 0; i$6 < this.state.labels.length; ++i$6) {
				const lab = this.state.labels[i$6];
				if (node.label == null || lab.name === node.label.name) {
					if (lab.kind != null && (isBreak || lab.kind === 1)) break;
					if (node.label && isBreak) break;
				}
			}
			if (i$6 === this.state.labels.length) {
				const type = isBreak ? "BreakStatement" : "ContinueStatement";
				this.raise(Errors.IllegalBreakContinue, node, { type });
			}
		}
		parseDebuggerStatement(node) {
			this.next();
			this.semicolon();
			return this.finishNode(node, "DebuggerStatement");
		}
		parseHeaderExpression() {
			this.expect(10);
			const val = this.parseExpression();
			this.expect(11);
			return val;
		}
		parseDoWhileStatement(node) {
			this.next();
			this.state.labels.push(loopLabel);
			node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
			this.state.labels.pop();
			this.expect(92);
			node.test = this.parseHeaderExpression();
			this.eat(13);
			return this.finishNode(node, "DoWhileStatement");
		}
		parseForStatement(node) {
			this.next();
			this.state.labels.push(loopLabel);
			let awaitAt = null;
			if (this.isContextual(96) && this.recordAwaitIfAllowed()) {
				awaitAt = this.state.startLoc;
				this.next();
			}
			this.scope.enter(0);
			this.expect(10);
			if (this.match(13)) {
				if (awaitAt !== null) this.unexpected(awaitAt);
				return this.parseFor(node, null);
			}
			const startsWithLet = this.isContextual(100);
			{
				const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
				const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
				const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
				if (this.match(74) || this.match(75) || isLetOrUsing) {
					const initNode = this.startNode();
					let kind;
					if (startsWithAwaitUsing) {
						kind = "await using";
						if (!this.recordAwaitIfAllowed()) this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
						this.next();
					} else kind = this.state.value;
					this.next();
					this.parseVar(initNode, true, kind);
					const init$2 = this.finishNode(initNode, "VariableDeclaration");
					const isForIn = this.match(58);
					if (isForIn && starsWithUsingDeclaration) this.raise(Errors.ForInUsing, init$2);
					if ((isForIn || this.isContextual(102)) && init$2.declarations.length === 1) return this.parseForIn(node, init$2, awaitAt);
					if (awaitAt !== null) this.unexpected(awaitAt);
					return this.parseFor(node, init$2);
				}
			}
			const startsWithAsync = this.isContextual(95);
			const refExpressionErrors = new ExpressionErrors();
			const init$1 = this.parseExpression(true, refExpressionErrors);
			const isForOf = this.isContextual(102);
			if (isForOf) {
				if (startsWithLet) this.raise(Errors.ForOfLet, init$1);
				if (awaitAt === null && startsWithAsync && init$1.type === "Identifier") this.raise(Errors.ForOfAsync, init$1);
			}
			if (isForOf || this.match(58)) {
				this.checkDestructuringPrivate(refExpressionErrors);
				this.toAssignable(init$1, true);
				const type = isForOf ? "ForOfStatement" : "ForInStatement";
				this.checkLVal(init$1, { type });
				return this.parseForIn(node, init$1, awaitAt);
			} else this.checkExpressionErrors(refExpressionErrors, true);
			if (awaitAt !== null) this.unexpected(awaitAt);
			return this.parseFor(node, init$1);
		}
		parseFunctionStatement(node, isAsync, isHangingDeclaration) {
			this.next();
			return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
		}
		parseIfStatement(node) {
			this.next();
			node.test = this.parseHeaderExpression();
			node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
			node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
			return this.finishNode(node, "IfStatement");
		}
		parseReturnStatement(node) {
			if (!this.prodParam.hasReturn && !(this.optionFlags & 2)) this.raise(Errors.IllegalReturn, this.state.startLoc);
			this.next();
			if (this.isLineTerminator()) node.argument = null;
			else {
				node.argument = this.parseExpression();
				this.semicolon();
			}
			return this.finishNode(node, "ReturnStatement");
		}
		parseSwitchStatement(node) {
			this.next();
			node.discriminant = this.parseHeaderExpression();
			const cases = node.cases = [];
			this.expect(5);
			this.state.labels.push(switchLabel);
			this.scope.enter(0);
			let cur;
			for (let sawDefault; !this.match(8);) if (this.match(61) || this.match(65)) {
				const isCase = this.match(61);
				if (cur) this.finishNode(cur, "SwitchCase");
				cases.push(cur = this.startNode());
				cur.consequent = [];
				this.next();
				if (isCase) cur.test = this.parseExpression();
				else {
					if (sawDefault) this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
					sawDefault = true;
					cur.test = null;
				}
				this.expect(14);
			} else if (cur) cur.consequent.push(this.parseStatementListItem());
			else this.unexpected();
			this.scope.exit();
			if (cur) this.finishNode(cur, "SwitchCase");
			this.next();
			this.state.labels.pop();
			return this.finishNode(node, "SwitchStatement");
		}
		parseThrowStatement(node) {
			this.next();
			if (this.hasPrecedingLineBreak()) this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
			node.argument = this.parseExpression();
			this.semicolon();
			return this.finishNode(node, "ThrowStatement");
		}
		parseCatchClauseParam() {
			const param = this.parseBindingAtom();
			this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
			this.checkLVal(param, { type: "CatchClause" }, 9);
			return param;
		}
		parseTryStatement(node) {
			this.next();
			node.block = this.parseBlock();
			node.handler = null;
			if (this.match(62)) {
				const clause = this.startNode();
				this.next();
				if (this.match(10)) {
					this.expect(10);
					clause.param = this.parseCatchClauseParam();
					this.expect(11);
				} else {
					clause.param = null;
					this.scope.enter(0);
				}
				clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
				this.scope.exit();
				node.handler = this.finishNode(clause, "CatchClause");
			}
			node.finalizer = this.eat(67) ? this.parseBlock() : null;
			if (!node.handler && !node.finalizer) this.raise(Errors.NoCatchOrFinally, node);
			return this.finishNode(node, "TryStatement");
		}
		parseVarStatement(node, kind, allowMissingInitializer = false) {
			this.next();
			this.parseVar(node, false, kind, allowMissingInitializer);
			this.semicolon();
			return this.finishNode(node, "VariableDeclaration");
		}
		parseWhileStatement(node) {
			this.next();
			node.test = this.parseHeaderExpression();
			this.state.labels.push(loopLabel);
			node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
			this.state.labels.pop();
			return this.finishNode(node, "WhileStatement");
		}
		parseWithStatement(node) {
			if (this.state.strict) this.raise(Errors.StrictWith, this.state.startLoc);
			this.next();
			node.object = this.parseHeaderExpression();
			node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
			return this.finishNode(node, "WithStatement");
		}
		parseEmptyStatement(node) {
			this.next();
			return this.finishNode(node, "EmptyStatement");
		}
		parseLabeledStatement(node, maybeName, expr, flags) {
			for (const label of this.state.labels) if (label.name === maybeName) this.raise(Errors.LabelRedeclaration, expr, { labelName: maybeName });
			const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
			for (let i$6 = this.state.labels.length - 1; i$6 >= 0; i$6--) {
				const label = this.state.labels[i$6];
				if (label.statementStart === node.start) {
					label.statementStart = this.sourceToOffsetPos(this.state.start);
					label.kind = kind;
				} else break;
			}
			this.state.labels.push({
				name: maybeName,
				kind,
				statementStart: this.sourceToOffsetPos(this.state.start)
			});
			node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
			this.state.labels.pop();
			node.label = expr;
			return this.finishNode(node, "LabeledStatement");
		}
		parseExpressionStatement(node, expr, decorators) {
			node.expression = expr;
			this.semicolon();
			return this.finishNode(node, "ExpressionStatement");
		}
		parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
			const node = this.startNode();
			if (allowDirectives) this.state.strictErrors.clear();
			this.expect(5);
			if (createNewLexicalScope) this.scope.enter(0);
			this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
			if (createNewLexicalScope) this.scope.exit();
			return this.finishNode(node, "BlockStatement");
		}
		isValidDirective(stmt) {
			return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
		}
		parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
			const body = node.body = [];
			const directives = node.directives = [];
			this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
		}
		parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
			const oldStrict = this.state.strict;
			let hasStrictModeDirective = false;
			let parsedNonDirective = false;
			while (!this.match(end)) {
				const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
				if (directives && !parsedNonDirective) {
					if (this.isValidDirective(stmt)) {
						const directive$1 = this.stmtToDirective(stmt);
						directives.push(directive$1);
						if (!hasStrictModeDirective && directive$1.value.value === "use strict") {
							hasStrictModeDirective = true;
							this.setStrict(true);
						}
						continue;
					}
					parsedNonDirective = true;
					this.state.strictErrors.clear();
				}
				body.push(stmt);
			}
			afterBlockParse?.call(this, hasStrictModeDirective);
			if (!oldStrict) this.setStrict(false);
			this.next();
		}
		parseFor(node, init$1) {
			node.init = init$1;
			this.semicolon(false);
			node.test = this.match(13) ? null : this.parseExpression();
			this.semicolon(false);
			node.update = this.match(11) ? null : this.parseExpression();
			this.expect(11);
			node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
			this.scope.exit();
			this.state.labels.pop();
			return this.finishNode(node, "ForStatement");
		}
		parseForIn(node, init$1, awaitAt) {
			const isForIn = this.match(58);
			this.next();
			if (isForIn) {
				if (awaitAt !== null) this.unexpected(awaitAt);
			} else node.await = awaitAt !== null;
			if (init$1.type === "VariableDeclaration" && init$1.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init$1.kind !== "var" || init$1.declarations[0].id.type !== "Identifier")) this.raise(Errors.ForInOfLoopInitializer, init$1, { type: isForIn ? "ForInStatement" : "ForOfStatement" });
			if (init$1.type === "AssignmentPattern") this.raise(Errors.InvalidLhs, init$1, { ancestor: { type: "ForStatement" } });
			node.left = init$1;
			node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
			this.expect(11);
			node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
			this.scope.exit();
			this.state.labels.pop();
			return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
		}
		parseVar(node, isFor$2, kind, allowMissingInitializer = false) {
			const declarations = node.declarations = [];
			node.kind = kind;
			for (;;) {
				const decl$1 = this.startNode();
				this.parseVarId(decl$1, kind);
				decl$1.init = !this.eat(29) ? null : isFor$2 ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
				if (decl$1.init === null && !allowMissingInitializer) {
					if (decl$1.id.type !== "Identifier" && !(isFor$2 && (this.match(58) || this.isContextual(102)))) this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" });
					else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind });
				}
				declarations.push(this.finishNode(decl$1, "VariableDeclarator"));
				if (!this.eat(12)) break;
			}
			return node;
		}
		parseVarId(decl$1, kind) {
			const id$4 = this.parseBindingAtom();
			if (kind === "using" || kind === "await using") {
				if (id$4.type === "ArrayPattern" || id$4.type === "ObjectPattern") this.raise(Errors.UsingDeclarationHasBindingPattern, id$4.loc.start);
			}
			this.checkLVal(id$4, { type: "VariableDeclarator" }, kind === "var" ? 5 : 8201);
			decl$1.id = id$4;
		}
		parseAsyncFunctionExpression(node) {
			return this.parseFunction(node, 8);
		}
		parseFunction(node, flags = 0) {
			const hangingDeclaration = flags & 2;
			const isDeclaration$1 = !!(flags & 1);
			const requireId = isDeclaration$1 && !(flags & 4);
			const isAsync = !!(flags & 8);
			this.initFunction(node, isAsync);
			if (this.match(55)) {
				if (hangingDeclaration) this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
				this.next();
				node.generator = true;
			}
			if (isDeclaration$1) node.id = this.parseFunctionId(requireId);
			const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
			this.state.maybeInArrowParameters = false;
			this.scope.enter(2);
			this.prodParam.enter(functionFlags(isAsync, node.generator));
			if (!isDeclaration$1) node.id = this.parseFunctionId();
			this.parseFunctionParams(node, false);
			this.withSmartMixTopicForbiddingContext(() => {
				this.parseFunctionBodyAndFinish(node, isDeclaration$1 ? "FunctionDeclaration" : "FunctionExpression");
			});
			this.prodParam.exit();
			this.scope.exit();
			if (isDeclaration$1 && !hangingDeclaration) this.registerFunctionStatementId(node);
			this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
			return node;
		}
		parseFunctionId(requireId) {
			return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
		}
		parseFunctionParams(node, isConstructor) {
			this.expect(10);
			this.expressionScope.enter(newParameterDeclarationScope());
			node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
			this.expressionScope.exit();
		}
		registerFunctionStatementId(node) {
			if (!node.id) return;
			this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
		}
		parseClass(node, isStatement$10, optionalId) {
			this.next();
			const oldStrict = this.state.strict;
			this.state.strict = true;
			this.parseClassId(node, isStatement$10, optionalId);
			this.parseClassSuper(node);
			node.body = this.parseClassBody(!!node.superClass, oldStrict);
			return this.finishNode(node, isStatement$10 ? "ClassDeclaration" : "ClassExpression");
		}
		isClassProperty() {
			return this.match(29) || this.match(13) || this.match(8);
		}
		isClassMethod() {
			return this.match(10);
		}
		nameIsConstructor(key) {
			return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";
		}
		isNonstaticConstructor(method) {
			return !method.computed && !method.static && this.nameIsConstructor(method.key);
		}
		parseClassBody(hadSuperClass, oldStrict) {
			this.classScope.enter();
			const state = {
				hadConstructor: false,
				hadSuperClass
			};
			let decorators = [];
			const classBody$1 = this.startNode();
			classBody$1.body = [];
			this.expect(5);
			this.withSmartMixTopicForbiddingContext(() => {
				while (!this.match(8)) {
					if (this.eat(13)) {
						if (decorators.length > 0) throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
						continue;
					}
					if (this.match(26)) {
						decorators.push(this.parseDecorator());
						continue;
					}
					const member = this.startNode();
					if (decorators.length) {
						member.decorators = decorators;
						this.resetStartLocationFromNode(member, decorators[0]);
						decorators = [];
					}
					this.parseClassMember(classBody$1, member, state);
					if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) this.raise(Errors.DecoratorConstructor, member);
				}
			});
			this.state.strict = oldStrict;
			this.next();
			if (decorators.length) throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
			this.classScope.exit();
			return this.finishNode(classBody$1, "ClassBody");
		}
		parseClassMemberFromModifier(classBody$1, member) {
			const key = this.parseIdentifier(true);
			if (this.isClassMethod()) {
				const method = member;
				method.kind = "method";
				method.computed = false;
				method.key = key;
				method.static = false;
				this.pushClassMethod(classBody$1, method, false, false, false, false);
				return true;
			} else if (this.isClassProperty()) {
				const prop = member;
				prop.computed = false;
				prop.key = key;
				prop.static = false;
				classBody$1.body.push(this.parseClassProperty(prop));
				return true;
			}
			this.resetPreviousNodeTrailingComments(key);
			return false;
		}
		parseClassMember(classBody$1, member, state) {
			const isStatic$1 = this.isContextual(106);
			if (isStatic$1) {
				if (this.parseClassMemberFromModifier(classBody$1, member)) return;
				if (this.eat(5)) {
					this.parseClassStaticBlock(classBody$1, member);
					return;
				}
			}
			this.parseClassMemberWithIsStatic(classBody$1, member, state, isStatic$1);
		}
		parseClassMemberWithIsStatic(classBody$1, member, state, isStatic$1) {
			const publicMethod = member;
			const privateMethod = member;
			const publicProp = member;
			const privateProp = member;
			const accessorProp = member;
			const method = publicMethod;
			const publicMember = publicMethod;
			member.static = isStatic$1;
			this.parsePropertyNamePrefixOperator(member);
			if (this.eat(55)) {
				method.kind = "method";
				const isPrivateName$2 = this.match(139);
				this.parseClassElementName(method);
				if (isPrivateName$2) {
					this.pushClassPrivateMethod(classBody$1, privateMethod, true, false);
					return;
				}
				if (this.isNonstaticConstructor(publicMethod)) this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
				this.pushClassMethod(classBody$1, publicMethod, true, false, false, false);
				return;
			}
			const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);
			const key = this.parseClassElementName(member);
			const maybeContextualKw = isContextual ? key.name : null;
			const isPrivate$1 = this.isPrivateName(key);
			const maybeQuestionTokenStartLoc = this.state.startLoc;
			this.parsePostMemberNameModifiers(publicMember);
			if (this.isClassMethod()) {
				method.kind = "method";
				if (isPrivate$1) {
					this.pushClassPrivateMethod(classBody$1, privateMethod, false, false);
					return;
				}
				const isConstructor = this.isNonstaticConstructor(publicMethod);
				let allowsDirectSuper = false;
				if (isConstructor) {
					publicMethod.kind = "constructor";
					if (state.hadConstructor && !this.hasPlugin("typescript")) this.raise(Errors.DuplicateConstructor, key);
					if (isConstructor && this.hasPlugin("typescript") && member.override) this.raise(Errors.OverrideOnConstructor, key);
					state.hadConstructor = true;
					allowsDirectSuper = state.hadSuperClass;
				}
				this.pushClassMethod(classBody$1, publicMethod, false, false, isConstructor, allowsDirectSuper);
			} else if (this.isClassProperty()) if (isPrivate$1) this.pushClassPrivateProperty(classBody$1, privateProp);
			else this.pushClassProperty(classBody$1, publicProp);
			else if (maybeContextualKw === "async" && !this.isLineTerminator()) {
				this.resetPreviousNodeTrailingComments(key);
				const isGenerator = this.eat(55);
				if (publicMember.optional) this.unexpected(maybeQuestionTokenStartLoc);
				method.kind = "method";
				const isPrivate$2 = this.match(139);
				this.parseClassElementName(method);
				this.parsePostMemberNameModifiers(publicMember);
				if (isPrivate$2) this.pushClassPrivateMethod(classBody$1, privateMethod, isGenerator, true);
				else {
					if (this.isNonstaticConstructor(publicMethod)) this.raise(Errors.ConstructorIsAsync, publicMethod.key);
					this.pushClassMethod(classBody$1, publicMethod, isGenerator, true, false, false);
				}
			} else if ((maybeContextualKw === "get" || maybeContextualKw === "set") && !(this.match(55) && this.isLineTerminator())) {
				this.resetPreviousNodeTrailingComments(key);
				method.kind = maybeContextualKw;
				const isPrivate$2 = this.match(139);
				this.parseClassElementName(publicMethod);
				if (isPrivate$2) this.pushClassPrivateMethod(classBody$1, privateMethod, false, false);
				else {
					if (this.isNonstaticConstructor(publicMethod)) this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
					this.pushClassMethod(classBody$1, publicMethod, false, false, false, false);
				}
				this.checkGetterSetterParams(publicMethod);
			} else if (maybeContextualKw === "accessor" && !this.isLineTerminator()) {
				this.expectPlugin("decoratorAutoAccessors");
				this.resetPreviousNodeTrailingComments(key);
				const isPrivate$2 = this.match(139);
				this.parseClassElementName(publicProp);
				this.pushClassAccessorProperty(classBody$1, accessorProp, isPrivate$2);
			} else if (this.isLineTerminator()) if (isPrivate$1) this.pushClassPrivateProperty(classBody$1, privateProp);
			else this.pushClassProperty(classBody$1, publicProp);
			else this.unexpected();
		}
		parseClassElementName(member) {
			const { type, value } = this.state;
			if ((type === 132 || type === 134) && member.static && value === "prototype") this.raise(Errors.StaticPrototype, this.state.startLoc);
			if (type === 139) {
				if (value === "constructor") this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
				const key = this.parsePrivateName();
				member.key = key;
				return key;
			}
			this.parsePropertyName(member);
			return member.key;
		}
		parseClassStaticBlock(classBody$1, member) {
			var _member$decorators;
			this.scope.enter(208);
			const oldLabels = this.state.labels;
			this.state.labels = [];
			this.prodParam.enter(0);
			const body = member.body = [];
			this.parseBlockOrModuleBlockBody(body, void 0, false, 8);
			this.prodParam.exit();
			this.scope.exit();
			this.state.labels = oldLabels;
			classBody$1.body.push(this.finishNode(member, "StaticBlock"));
			if ((_member$decorators = member.decorators) != null && _member$decorators.length) this.raise(Errors.DecoratorStaticBlock, member);
		}
		pushClassProperty(classBody$1, prop) {
			if (!prop.computed && this.nameIsConstructor(prop.key)) this.raise(Errors.ConstructorClassField, prop.key);
			classBody$1.body.push(this.parseClassProperty(prop));
		}
		pushClassPrivateProperty(classBody$1, prop) {
			const node = this.parseClassPrivateProperty(prop);
			classBody$1.body.push(node);
			this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
		}
		pushClassAccessorProperty(classBody$1, prop, isPrivate$1) {
			if (!isPrivate$1 && !prop.computed && this.nameIsConstructor(prop.key)) this.raise(Errors.ConstructorClassField, prop.key);
			const node = this.parseClassAccessorProperty(prop);
			classBody$1.body.push(node);
			if (isPrivate$1) this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
		}
		pushClassMethod(classBody$1, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
			classBody$1.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
		}
		pushClassPrivateMethod(classBody$1, method, isGenerator, isAsync) {
			const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
			classBody$1.body.push(node);
			const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
			this.declareClassPrivateMethodInScope(node, kind);
		}
		declareClassPrivateMethodInScope(node, kind) {
			this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
		}
		parsePostMemberNameModifiers(methodOrProp) {}
		parseClassPrivateProperty(node) {
			this.parseInitializer(node);
			this.semicolon();
			return this.finishNode(node, "ClassPrivateProperty");
		}
		parseClassProperty(node) {
			this.parseInitializer(node);
			this.semicolon();
			return this.finishNode(node, "ClassProperty");
		}
		parseClassAccessorProperty(node) {
			this.parseInitializer(node);
			this.semicolon();
			return this.finishNode(node, "ClassAccessorProperty");
		}
		parseInitializer(node) {
			this.scope.enter(80);
			this.expressionScope.enter(newExpressionScope());
			this.prodParam.enter(0);
			node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
			this.expressionScope.exit();
			this.prodParam.exit();
			this.scope.exit();
		}
		parseClassId(node, isStatement$10, optionalId, bindingType = 8331) {
			if (tokenIsIdentifier(this.state.type)) {
				node.id = this.parseIdentifier();
				if (isStatement$10) this.declareNameFromIdentifier(node.id, bindingType);
			} else if (optionalId || !isStatement$10) node.id = null;
			else throw this.raise(Errors.MissingClassName, this.state.startLoc);
		}
		parseClassSuper(node) {
			node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
		}
		parseExport(node, decorators) {
			const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
			const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
			const parseAfterDefault = !hasDefault || this.eat(12);
			const hasStar = parseAfterDefault && this.eatExportStar(node);
			const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
			const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
			const isFromRequired = hasDefault || hasStar;
			if (hasStar && !hasNamespace) {
				if (hasDefault) this.unexpected();
				if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
				this.parseExportFrom(node, true);
				this.sawUnambiguousESM = true;
				return this.finishNode(node, "ExportAllDeclaration");
			}
			const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
			if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) this.unexpected(null, 5);
			if (hasNamespace && parseAfterNamespace) this.unexpected(null, 98);
			let hasDeclaration;
			if (isFromRequired || hasSpecifiers) {
				hasDeclaration = false;
				if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
				this.parseExportFrom(node, isFromRequired);
			} else hasDeclaration = this.maybeParseExportDeclaration(node);
			if (isFromRequired || hasSpecifiers || hasDeclaration) {
				var _node2$declaration;
				const node2 = node;
				this.checkExport(node2, true, false, !!node2.source);
				if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") this.maybeTakeDecorators(decorators, node2.declaration, node2);
				else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
				this.sawUnambiguousESM = true;
				return this.finishNode(node2, "ExportNamedDeclaration");
			}
			if (this.eat(65)) {
				const node2 = node;
				const decl$1 = this.parseExportDefaultExpression();
				node2.declaration = decl$1;
				if (decl$1.type === "ClassDeclaration") this.maybeTakeDecorators(decorators, decl$1, node2);
				else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
				this.checkExport(node2, true, true);
				this.sawUnambiguousESM = true;
				return this.finishNode(node2, "ExportDefaultDeclaration");
			}
			this.unexpected(null, 5);
		}
		eatExportStar(node) {
			return this.eat(55);
		}
		maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
			if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
				this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
				const id$4 = maybeDefaultIdentifier || this.parseIdentifier(true);
				const specifier = this.startNodeAtNode(id$4);
				specifier.exported = id$4;
				node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
				return true;
			}
			return false;
		}
		maybeParseExportNamespaceSpecifier(node) {
			if (this.isContextual(93)) {
				var _ref, _ref$specifiers;
				(_ref$specifiers = (_ref = node).specifiers) != null || (_ref.specifiers = []);
				const specifier = this.startNodeAt(this.state.lastTokStartLoc);
				this.next();
				specifier.exported = this.parseModuleExportName();
				node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
				return true;
			}
			return false;
		}
		maybeParseExportNamedSpecifiers(node) {
			if (this.match(5)) {
				const node2 = node;
				if (!node2.specifiers) node2.specifiers = [];
				const isTypeExport = node2.exportKind === "type";
				node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
				node2.source = null;
				if (this.hasPlugin("importAssertions")) node2.assertions = [];
				else node2.attributes = [];
				node2.declaration = null;
				return true;
			}
			return false;
		}
		maybeParseExportDeclaration(node) {
			if (this.shouldParseExportDeclaration()) {
				node.specifiers = [];
				node.source = null;
				if (this.hasPlugin("importAssertions")) node.assertions = [];
				else node.attributes = [];
				node.declaration = this.parseExportDeclaration(node);
				return true;
			}
			return false;
		}
		isAsyncFunction() {
			if (!this.isContextual(95)) return false;
			const next = this.nextTokenInLineStart();
			return this.isUnparsedContextual(next, "function");
		}
		parseExportDefaultExpression() {
			const expr = this.startNode();
			if (this.match(68)) {
				this.next();
				return this.parseFunction(expr, 5);
			} else if (this.isAsyncFunction()) {
				this.next();
				this.next();
				return this.parseFunction(expr, 13);
			}
			if (this.match(80)) return this.parseClass(expr, true, true);
			if (this.match(26)) {
				if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
				return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
			}
			if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
			const res = this.parseMaybeAssignAllowIn();
			this.semicolon();
			return res;
		}
		parseExportDeclaration(node) {
			if (this.match(80)) {
				const node$1 = this.parseClass(this.startNode(), true, false);
				return node$1;
			}
			return this.parseStatementListItem();
		}
		isExportDefaultSpecifier() {
			const { type } = this.state;
			if (tokenIsIdentifier(type)) {
				if (type === 95 && !this.state.containsEsc || type === 100) return false;
				if ((type === 130 || type === 129) && !this.state.containsEsc) {
					const { type: nextType } = this.lookahead();
					if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
						this.expectOnePlugin(["flow", "typescript"]);
						return false;
					}
				}
			} else if (!this.match(65)) return false;
			const next = this.nextTokenStart();
			const hasFrom = this.isUnparsedContextual(next, "from");
			if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) return true;
			if (this.match(65) && hasFrom) {
				const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
				return nextAfterFrom === 34 || nextAfterFrom === 39;
			}
			return false;
		}
		parseExportFrom(node, expect) {
			if (this.eatContextual(98)) {
				node.source = this.parseImportSource();
				this.checkExport(node);
				this.maybeParseImportAttributes(node);
				this.checkJSONModuleImport(node);
			} else if (expect) this.unexpected();
			this.semicolon();
		}
		shouldParseExportDeclaration() {
			const { type } = this.state;
			if (type === 26) {
				this.expectOnePlugin(["decorators", "decorators-legacy"]);
				if (this.hasPlugin("decorators")) {
					if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
					return true;
				}
			}
			if (this.isContextual(107)) {
				this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
				return true;
			}
			if (this.isContextual(96) && this.startsAwaitUsing()) {
				this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
				return true;
			}
			return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
		}
		checkExport(node, checkNames, isDefault, isFrom) {
			if (checkNames) {
				var _node$specifiers;
				if (isDefault) {
					this.checkDuplicateExports(node, "default");
					if (this.hasPlugin("exportDefaultFrom")) {
						var _declaration$extra;
						const declaration = node.declaration;
						if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
					}
				} else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) for (const specifier of node.specifiers) {
					const { exported } = specifier;
					const exportName = exported.type === "Identifier" ? exported.name : exported.value;
					this.checkDuplicateExports(specifier, exportName);
					if (!isFrom && specifier.local) {
						const { local } = specifier;
						if (local.type !== "Identifier") this.raise(Errors.ExportBindingIsString, specifier, {
							localName: local.value,
							exportName
						});
						else {
							this.checkReservedWord(local.name, local.loc.start, true, false);
							this.scope.checkLocalExport(local);
						}
					}
				}
				else if (node.declaration) {
					const decl$1 = node.declaration;
					if (decl$1.type === "FunctionDeclaration" || decl$1.type === "ClassDeclaration") {
						const { id: id$4 } = decl$1;
						if (!id$4) throw new Error("Assertion failure");
						this.checkDuplicateExports(node, id$4.name);
					} else if (decl$1.type === "VariableDeclaration") for (const declaration of decl$1.declarations) this.checkDeclaration(declaration.id);
				}
			}
		}
		checkDeclaration(node) {
			if (node.type === "Identifier") this.checkDuplicateExports(node, node.name);
			else if (node.type === "ObjectPattern") for (const prop of node.properties) this.checkDeclaration(prop);
			else if (node.type === "ArrayPattern") {
				for (const elem of node.elements) if (elem) this.checkDeclaration(elem);
			} else if (node.type === "ObjectProperty") this.checkDeclaration(node.value);
			else if (node.type === "RestElement") this.checkDeclaration(node.argument);
			else if (node.type === "AssignmentPattern") this.checkDeclaration(node.left);
		}
		checkDuplicateExports(node, exportName) {
			if (this.exportedIdentifiers.has(exportName)) if (exportName === "default") this.raise(Errors.DuplicateDefaultExport, node);
			else this.raise(Errors.DuplicateExport, node, { exportName });
			this.exportedIdentifiers.add(exportName);
		}
		parseExportSpecifiers(isInTypeExport) {
			const nodes$1 = [];
			let first = true;
			this.expect(5);
			while (!this.eat(8)) {
				if (first) first = false;
				else {
					this.expect(12);
					if (this.eat(8)) break;
				}
				const isMaybeTypeOnly = this.isContextual(130);
				const isString$5 = this.match(134);
				const node = this.startNode();
				node.local = this.parseModuleExportName();
				nodes$1.push(this.parseExportSpecifier(node, isString$5, isInTypeExport, isMaybeTypeOnly));
			}
			return nodes$1;
		}
		parseExportSpecifier(node, isString$5, isInTypeExport, isMaybeTypeOnly) {
			if (this.eatContextual(93)) node.exported = this.parseModuleExportName();
			else if (isString$5) node.exported = cloneStringLiteral(node.local);
			else if (!node.exported) node.exported = cloneIdentifier(node.local);
			return this.finishNode(node, "ExportSpecifier");
		}
		parseModuleExportName() {
			if (this.match(134)) {
				const result = this.parseStringLiteral(this.state.value);
				const surrogate = loneSurrogate.exec(result.value);
				if (surrogate) this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, { surrogateCharCode: surrogate[0].charCodeAt(0) });
				return result;
			}
			return this.parseIdentifier(true);
		}
		isJSONModuleImport(node) {
			if (node.assertions != null) return node.assertions.some(({ key, value }) => {
				return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
			});
			return false;
		}
		checkImportReflection(node) {
			const { specifiers } = node;
			const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
			if (node.phase === "source") {
				if (singleBindingType !== "ImportDefaultSpecifier") this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
			} else if (node.phase === "defer") {
				if (singleBindingType !== "ImportNamespaceSpecifier") this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
			} else if (node.module) {
				var _node$assertions;
				if (singleBindingType !== "ImportDefaultSpecifier") this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
				if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
			}
		}
		checkJSONModuleImport(node) {
			if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
				const { specifiers } = node;
				if (specifiers != null) {
					const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
						let imported;
						if (specifier.type === "ExportSpecifier") imported = specifier.local;
						else if (specifier.type === "ImportSpecifier") imported = specifier.imported;
						if (imported !== void 0) return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
					});
					if (nonDefaultNamedSpecifier !== void 0) this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
				}
			}
		}
		isPotentialImportPhase(isExport) {
			if (isExport) return false;
			return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
		}
		applyImportPhase(node, isExport, phase, loc) {
			if (isExport) return;
			if (phase === "module") {
				this.expectPlugin("importReflection", loc);
				node.module = true;
			} else if (this.hasPlugin("importReflection")) node.module = false;
			if (phase === "source") {
				this.expectPlugin("sourcePhaseImports", loc);
				node.phase = "source";
			} else if (phase === "defer") {
				this.expectPlugin("deferredImportEvaluation", loc);
				node.phase = "defer";
			} else if (this.hasPlugin("sourcePhaseImports")) node.phase = null;
		}
		parseMaybeImportPhase(node, isExport) {
			if (!this.isPotentialImportPhase(isExport)) {
				this.applyImportPhase(node, isExport, null);
				return null;
			}
			const phaseIdentifier = this.parseIdentifier(true);
			const { type } = this.state;
			const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
			if (isImportPhase) {
				this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
				this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
				return null;
			} else {
				this.applyImportPhase(node, isExport, null);
				return phaseIdentifier;
			}
		}
		isPrecedingIdImportPhase(phase) {
			const { type } = this.state;
			return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
		}
		parseImport(node) {
			if (this.match(134)) return this.parseImportSourceAndAttributes(node);
			return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
		}
		parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
			node.specifiers = [];
			const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
			const parseNext = !hasDefault || this.eat(12);
			const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
			if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
			this.expectContextual(98);
			return this.parseImportSourceAndAttributes(node);
		}
		parseImportSourceAndAttributes(node) {
			var _node$specifiers2;
			(_node$specifiers2 = node.specifiers) != null || (node.specifiers = []);
			node.source = this.parseImportSource();
			this.maybeParseImportAttributes(node);
			this.checkImportReflection(node);
			this.checkJSONModuleImport(node);
			this.semicolon();
			this.sawUnambiguousESM = true;
			return this.finishNode(node, "ImportDeclaration");
		}
		parseImportSource() {
			if (!this.match(134)) this.unexpected();
			return this.parseExprAtom();
		}
		parseImportSpecifierLocal(node, specifier, type) {
			specifier.local = this.parseIdentifier();
			node.specifiers.push(this.finishImportSpecifier(specifier, type));
		}
		finishImportSpecifier(specifier, type, bindingType = 8201) {
			this.checkLVal(specifier.local, { type }, bindingType);
			return this.finishNode(specifier, type);
		}
		parseImportAttributes() {
			this.expect(5);
			const attrs = [];
			const attrNames = new Set();
			do {
				if (this.match(8)) break;
				const node = this.startNode();
				const keyName = this.state.value;
				if (attrNames.has(keyName)) this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: keyName });
				attrNames.add(keyName);
				if (this.match(134)) node.key = this.parseStringLiteral(keyName);
				else node.key = this.parseIdentifier(true);
				this.expect(14);
				if (!this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
				node.value = this.parseStringLiteral(this.state.value);
				attrs.push(this.finishNode(node, "ImportAttribute"));
			} while (this.eat(12));
			this.expect(8);
			return attrs;
		}
		parseModuleAttributes() {
			const attrs = [];
			const attributes = new Set();
			do {
				const node = this.startNode();
				node.key = this.parseIdentifier(true);
				if (node.key.name !== "type") this.raise(Errors.ModuleAttributeDifferentFromType, node.key);
				if (attributes.has(node.key.name)) this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, { key: node.key.name });
				attributes.add(node.key.name);
				this.expect(14);
				if (!this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
				node.value = this.parseStringLiteral(this.state.value);
				attrs.push(this.finishNode(node, "ImportAttribute"));
			} while (this.eat(12));
			return attrs;
		}
		maybeParseImportAttributes(node) {
			let attributes;
			var useWith = false;
			if (this.match(76)) {
				if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) return;
				this.next();
				if (this.hasPlugin("moduleAttributes")) {
					attributes = this.parseModuleAttributes();
					this.addExtra(node, "deprecatedWithLegacySyntax", true);
				} else attributes = this.parseImportAttributes();
				useWith = true;
			} else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
				if (!this.hasPlugin("deprecatedImportAssert") && !this.hasPlugin("importAssertions")) this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
				if (!this.hasPlugin("importAssertions")) this.addExtra(node, "deprecatedAssertSyntax", true);
				this.next();
				attributes = this.parseImportAttributes();
			} else attributes = [];
			if (!useWith && this.hasPlugin("importAssertions")) node.assertions = attributes;
			else node.attributes = attributes;
		}
		maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
			if (maybeDefaultIdentifier) {
				const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
				specifier.local = maybeDefaultIdentifier;
				node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
				return true;
			} else if (tokenIsKeywordOrIdentifier(this.state.type)) {
				this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
				return true;
			}
			return false;
		}
		maybeParseStarImportSpecifier(node) {
			if (this.match(55)) {
				const specifier = this.startNode();
				this.next();
				this.expectContextual(93);
				this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
				return true;
			}
			return false;
		}
		parseNamedImportSpecifiers(node) {
			let first = true;
			this.expect(5);
			while (!this.eat(8)) {
				if (first) first = false;
				else {
					if (this.eat(14)) throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
					this.expect(12);
					if (this.eat(8)) break;
				}
				const specifier = this.startNode();
				const importedIsString = this.match(134);
				const isMaybeTypeOnly = this.isContextual(130);
				specifier.imported = this.parseModuleExportName();
				const importSpecifier$1 = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, void 0);
				node.specifiers.push(importSpecifier$1);
			}
		}
		parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
			if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
			else {
				const { imported } = specifier;
				if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: imported.value });
				this.checkReservedWord(imported.name, specifier.loc.start, true, true);
				if (!specifier.local) specifier.local = cloneIdentifier(imported);
			}
			return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
		}
		isThisParam(param) {
			return param.type === "Identifier" && param.name === "this";
		}
	};
	var Parser$5 = class extends StatementParser {
		constructor(options, input, pluginsMap) {
			options = getOptions(options);
			super(options, input);
			this.options = options;
			this.initializeScopes();
			this.plugins = pluginsMap;
			this.filename = options.sourceFilename;
			this.startIndex = options.startIndex;
			let optionFlags = 0;
			if (options.allowAwaitOutsideFunction) optionFlags |= 1;
			if (options.allowReturnOutsideFunction) optionFlags |= 2;
			if (options.allowImportExportEverywhere) optionFlags |= 8;
			if (options.allowSuperOutsideMethod) optionFlags |= 16;
			if (options.allowUndeclaredExports) optionFlags |= 64;
			if (options.allowNewTargetOutsideFunction) optionFlags |= 4;
			if (options.allowYieldOutsideFunction) optionFlags |= 32;
			if (options.ranges) optionFlags |= 128;
			if (options.tokens) optionFlags |= 256;
			if (options.createImportExpressions) optionFlags |= 512;
			if (options.createParenthesizedExpressions) optionFlags |= 1024;
			if (options.errorRecovery) optionFlags |= 2048;
			if (options.attachComment) optionFlags |= 4096;
			if (options.annexB) optionFlags |= 8192;
			this.optionFlags = optionFlags;
		}
		getScopeHandler() {
			return ScopeHandler;
		}
		parse() {
			this.enterInitialScopes();
			const file$2 = this.startNode();
			const program$3 = this.startNode();
			this.nextToken();
			file$2.errors = null;
			this.parseTopLevel(file$2, program$3);
			file$2.errors = this.state.errors;
			file$2.comments.length = this.state.commentsLen;
			return file$2;
		}
	};
	function parse$8(input, options) {
		var _options$3;
		if (((_options$3 = options) == null ? void 0 : _options$3.sourceType) === "unambiguous") {
			options = Object.assign({}, options);
			try {
				options.sourceType = "module";
				const parser$5 = getParser(options, input);
				const ast = parser$5.parse();
				if (parser$5.sawUnambiguousESM) return ast;
				if (parser$5.ambiguousScriptDifferentAst) try {
					options.sourceType = "script";
					return getParser(options, input).parse();
				} catch (_unused) {}
				else ast.program.sourceType = "script";
				return ast;
			} catch (moduleError) {
				try {
					options.sourceType = "script";
					return getParser(options, input).parse();
				} catch (_unused2) {}
				throw moduleError;
			}
		} else return getParser(options, input).parse();
	}
	function parseExpression(input, options) {
		const parser$5 = getParser(options, input);
		if (parser$5.options.strictMode) parser$5.state.strict = true;
		return parser$5.getExpression();
	}
	function generateExportedTokenTypes(internalTokenTypes) {
		const tokenTypes$1 = {};
		for (const typeName of Object.keys(internalTokenTypes)) tokenTypes$1[typeName] = getExportedToken(internalTokenTypes[typeName]);
		return tokenTypes$1;
	}
	const tokTypes = generateExportedTokenTypes(tt);
	function getParser(options, input) {
		let cls = Parser$5;
		const pluginsMap = new Map();
		if (options != null && options.plugins) {
			for (const plugin$2 of options.plugins) {
				let name, opts;
				if (typeof plugin$2 === "string") name = plugin$2;
				else [name, opts] = plugin$2;
				if (!pluginsMap.has(name)) pluginsMap.set(name, opts || {});
			}
			validatePlugins(pluginsMap);
			cls = getParserClass(pluginsMap);
		}
		return new cls(options, input, pluginsMap);
	}
	const parserClassCache = new Map();
	function getParserClass(pluginsMap) {
		const pluginList = [];
		for (const name of mixinPluginNames) if (pluginsMap.has(name)) pluginList.push(name);
		const key = pluginList.join("|");
		let cls = parserClassCache.get(key);
		if (!cls) {
			cls = Parser$5;
			for (const plugin$2 of pluginList) cls = mixinPlugins[plugin$2](cls);
			parserClassCache.set(key, cls);
		}
		return cls;
	}
	exports.parse = parse$8;
	exports.parseExpression = parseExpression;
	exports.tokTypes = tokTypes;
} });
var import_lib$2 = __toESM(require_lib$17());

//#endregion
//#region node_modules/estree-walker/dist/umd/estree-walker.js
var require_estree_walker = __commonJS({ "node_modules/estree-walker/dist/umd/estree-walker.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global$1 = global$1 || self, factory(global$1.estreeWalker = {}));
	})(exports, function(exports$1) {
		"use strict";
		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef {{
		skip: () => void;
		remove: () => void;
		replace: (node: BaseNode) => void;
		}} WalkerContext */
		class WalkerBase {
			constructor() {
				/** @type {boolean} */
				this.should_skip = false;
				/** @type {boolean} */
				this.should_remove = false;
				/** @type {BaseNode | null} */
				this.replacement = null;
				/** @type {WalkerContext} */
				this.context = {
					skip: () => this.should_skip = true,
					remove: () => this.should_remove = true,
					replace: (node) => this.replacement = node
				};
			}
			/**
			*
			* @param {any} parent
			* @param {string} prop
			* @param {number} index
			* @param {BaseNode} node
			*/
			replace(parent, prop, index$1, node) {
				if (parent) if (index$1 !== null) parent[prop][index$1] = node;
				else parent[prop] = node;
			}
			/**
			*
			* @param {any} parent
			* @param {string} prop
			* @param {number} index
			*/
			remove(parent, prop, index$1) {
				if (parent) if (index$1 !== null) parent[prop].splice(index$1, 1);
				else delete parent[prop];
			}
		}
		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./walker.js').WalkerContext} WalkerContext */
		/** @typedef {(
		*    this: WalkerContext,
		*    node: BaseNode,
		*    parent: BaseNode,
		*    key: string,
		*    index: number
		* ) => void} SyncHandler */
		class SyncWalker extends WalkerBase {
			/**
			*
			* @param {SyncHandler} enter
			* @param {SyncHandler} leave
			*/
			constructor(enter, leave) {
				super();
				/** @type {SyncHandler} */
				this.enter = enter;
				/** @type {SyncHandler} */
				this.leave = leave;
			}
			/**
			*
			* @param {BaseNode} node
			* @param {BaseNode} parent
			* @param {string} [prop]
			* @param {number} [index]
			* @returns {BaseNode}
			*/
			visit(node, parent, prop, index$1) {
				if (node) {
					if (this.enter) {
						const _should_skip = this.should_skip;
						const _should_remove = this.should_remove;
						const _replacement$1 = this.replacement;
						this.should_skip = false;
						this.should_remove = false;
						this.replacement = null;
						this.enter.call(this.context, node, parent, prop, index$1);
						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index$1, node);
						}
						if (this.should_remove) this.remove(parent, prop, index$1);
						const skipped = this.should_skip;
						const removed = this.should_remove;
						this.should_skip = _should_skip;
						this.should_remove = _should_remove;
						this.replacement = _replacement$1;
						if (skipped) return node;
						if (removed) return null;
					}
					for (const key in node) {
						const value = node[key];
						if (typeof value !== "object") continue;
						else if (Array.isArray(value)) {
							for (let i$6 = 0; i$6 < value.length; i$6 += 1) if (value[i$6] !== null && typeof value[i$6].type === "string") {
								if (!this.visit(value[i$6], node, key, i$6)) i$6--;
							}
						} else if (value !== null && typeof value.type === "string") this.visit(value, node, key, null);
					}
					if (this.leave) {
						const _replacement$1 = this.replacement;
						const _should_remove = this.should_remove;
						this.replacement = null;
						this.should_remove = false;
						this.leave.call(this.context, node, parent, prop, index$1);
						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index$1, node);
						}
						if (this.should_remove) this.remove(parent, prop, index$1);
						const removed = this.should_remove;
						this.replacement = _replacement$1;
						this.should_remove = _should_remove;
						if (removed) return null;
					}
				}
				return node;
			}
		}
		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./walker').WalkerContext} WalkerContext */
		/** @typedef {(
		*    this: WalkerContext,
		*    node: BaseNode,
		*    parent: BaseNode,
		*    key: string,
		*    index: number
		* ) => Promise<void>} AsyncHandler */
		class AsyncWalker extends WalkerBase {
			/**
			*
			* @param {AsyncHandler} enter
			* @param {AsyncHandler} leave
			*/
			constructor(enter, leave) {
				super();
				/** @type {AsyncHandler} */
				this.enter = enter;
				/** @type {AsyncHandler} */
				this.leave = leave;
			}
			/**
			*
			* @param {BaseNode} node
			* @param {BaseNode} parent
			* @param {string} [prop]
			* @param {number} [index]
			* @returns {Promise<BaseNode>}
			*/
			async visit(node, parent, prop, index$1) {
				if (node) {
					if (this.enter) {
						const _should_skip = this.should_skip;
						const _should_remove = this.should_remove;
						const _replacement$1 = this.replacement;
						this.should_skip = false;
						this.should_remove = false;
						this.replacement = null;
						await this.enter.call(this.context, node, parent, prop, index$1);
						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index$1, node);
						}
						if (this.should_remove) this.remove(parent, prop, index$1);
						const skipped = this.should_skip;
						const removed = this.should_remove;
						this.should_skip = _should_skip;
						this.should_remove = _should_remove;
						this.replacement = _replacement$1;
						if (skipped) return node;
						if (removed) return null;
					}
					for (const key in node) {
						const value = node[key];
						if (typeof value !== "object") continue;
						else if (Array.isArray(value)) {
							for (let i$6 = 0; i$6 < value.length; i$6 += 1) if (value[i$6] !== null && typeof value[i$6].type === "string") {
								if (!await this.visit(value[i$6], node, key, i$6)) i$6--;
							}
						} else if (value !== null && typeof value.type === "string") await this.visit(value, node, key, null);
					}
					if (this.leave) {
						const _replacement$1 = this.replacement;
						const _should_remove = this.should_remove;
						this.replacement = null;
						this.should_remove = false;
						await this.leave.call(this.context, node, parent, prop, index$1);
						if (this.replacement) {
							node = this.replacement;
							this.replace(parent, prop, index$1, node);
						}
						if (this.should_remove) this.remove(parent, prop, index$1);
						const removed = this.should_remove;
						this.replacement = _replacement$1;
						this.should_remove = _should_remove;
						if (removed) return null;
					}
				}
				return node;
			}
		}
		/** @typedef { import('estree').BaseNode} BaseNode */
		/** @typedef { import('./sync.js').SyncHandler} SyncHandler */
		/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */
		/**
		*
		* @param {BaseNode} ast
		* @param {{
		*   enter?: SyncHandler
		*   leave?: SyncHandler
		* }} walker
		* @returns {BaseNode}
		*/
		function walk$2(ast, { enter, leave }) {
			const instance = new SyncWalker(enter, leave);
			return instance.visit(ast, null);
		}
		/**
		*
		* @param {BaseNode} ast
		* @param {{
		*   enter?: AsyncHandler
		*   leave?: AsyncHandler
		* }} walker
		* @returns {Promise<BaseNode>}
		*/
		async function asyncWalk(ast, { enter, leave }) {
			const instance = new AsyncWalker(enter, leave);
			return await instance.visit(ast, null);
		}
		exports$1.asyncWalk = asyncWalk;
		exports$1.walk = walk$2;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/@vue/compiler-core/dist/compiler-core.cjs.prod.js
var require_compiler_core_cjs_prod = __commonJS({ "node_modules/@vue/compiler-core/dist/compiler-core.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var shared$3 = require_shared();
	var sourceMap$2 = require_source_map$1();
	var parser$4 = require_lib$17();
	var estreeWalker$1 = require_estree_walker();
	function defaultOnError(error) {
		throw error;
	}
	function createCompilerError(code$1, loc, messages, additionalMessage) {
		const msg = (messages || errorMessages)[code$1] + (additionalMessage || ``);
		const error = new SyntaxError(String(msg));
		error.code = code$1;
		error.loc = loc;
		return error;
	}
	const errorMessages = {
		[0]: "Illegal comment.",
		[1]: "CDATA section is allowed only in XML context.",
		[2]: "Duplicate attribute.",
		[3]: "End tag cannot have attributes.",
		[4]: "Illegal '/' in tags.",
		[5]: "Unexpected EOF in tag.",
		[6]: "Unexpected EOF in CDATA section.",
		[7]: "Unexpected EOF in comment.",
		[8]: "Unexpected EOF in script.",
		[9]: "Unexpected EOF in tag.",
		[10]: "Incorrectly closed comment.",
		[11]: "Incorrectly opened comment.",
		[12]: "Illegal tag name. Use '&lt;' to print '<'.",
		[13]: "Attribute value was expected.",
		[14]: "End tag name was expected.",
		[15]: "Whitespace was expected.",
		[16]: "Unexpected '<!--' in comment.",
		[17]: "Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).",
		[18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
		[19]: "Attribute name cannot start with '='.",
		[21]: "'<?' is allowed only in XML context.",
		[22]: "Illegal '/' in tags.",
		[23]: "Invalid end tag.",
		[24]: "Element is missing end tag.",
		[25]: "Interpolation end sign was not found.",
		[26]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
		[27]: `v-if/v-else-if is missing expression.`,
		[28]: `v-if/else branches must use unique keys.`,
		[29]: `v-else/v-else-if has no adjacent v-if.`,
		[30]: `v-for is missing expression.`,
		[31]: `v-for has invalid expression.`,
		[32]: `<template v-for> key should be placed on the <template> tag.`,
		[33]: `v-bind is missing expression.`,
		[34]: `v-on is missing expression.`,
		[35]: `Unexpected custom directive on <slot> outlet.`,
		[36]: "Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.",
		[37]: `Duplicate slot names found. `,
		[38]: "Extraneous children found when component already has explicitly named default slot. These children will be ignored.",
		[39]: `v-slot can only be used on components or <template> tags.`,
		[40]: `v-model is missing expression.`,
		[41]: `v-model value must be a valid JavaScript member expression.`,
		[42]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
		[43]: `Error parsing JavaScript expression: `,
		[44]: `<KeepAlive> expects exactly one child component.`,
		[45]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
		[46]: `ES module mode is not supported in this build of compiler.`,
		[47]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
		[48]: `"scopeId" option is only supported in module mode.`
	};
	const FRAGMENT = Symbol(``);
	const TELEPORT = Symbol(``);
	const SUSPENSE = Symbol(``);
	const KEEP_ALIVE = Symbol(``);
	const BASE_TRANSITION = Symbol(``);
	const OPEN_BLOCK = Symbol(``);
	const CREATE_BLOCK = Symbol(``);
	const CREATE_VNODE = Symbol(``);
	const CREATE_COMMENT = Symbol(``);
	const CREATE_TEXT = Symbol(``);
	const CREATE_STATIC = Symbol(``);
	const RESOLVE_COMPONENT = Symbol(``);
	const RESOLVE_DYNAMIC_COMPONENT = Symbol(``);
	const RESOLVE_DIRECTIVE = Symbol(``);
	const WITH_DIRECTIVES = Symbol(``);
	const RENDER_LIST = Symbol(``);
	const RENDER_SLOT = Symbol(``);
	const CREATE_SLOTS = Symbol(``);
	const TO_DISPLAY_STRING = Symbol(``);
	const MERGE_PROPS = Symbol(``);
	const TO_HANDLERS = Symbol(``);
	const CAMELIZE = Symbol(``);
	const CAPITALIZE = Symbol(``);
	const TO_HANDLER_KEY = Symbol(``);
	const SET_BLOCK_TRACKING = Symbol(``);
	const PUSH_SCOPE_ID = Symbol(``);
	const POP_SCOPE_ID = Symbol(``);
	const WITH_SCOPE_ID = Symbol(``);
	const WITH_CTX = Symbol(``);
	const UNREF = Symbol(``);
	const IS_REF = Symbol(``);
	const helperNameMap = {
		[FRAGMENT]: `Fragment`,
		[TELEPORT]: `Teleport`,
		[SUSPENSE]: `Suspense`,
		[KEEP_ALIVE]: `KeepAlive`,
		[BASE_TRANSITION]: `BaseTransition`,
		[OPEN_BLOCK]: `openBlock`,
		[CREATE_BLOCK]: `createBlock`,
		[CREATE_VNODE]: `createVNode`,
		[CREATE_COMMENT]: `createCommentVNode`,
		[CREATE_TEXT]: `createTextVNode`,
		[CREATE_STATIC]: `createStaticVNode`,
		[RESOLVE_COMPONENT]: `resolveComponent`,
		[RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
		[RESOLVE_DIRECTIVE]: `resolveDirective`,
		[WITH_DIRECTIVES]: `withDirectives`,
		[RENDER_LIST]: `renderList`,
		[RENDER_SLOT]: `renderSlot`,
		[CREATE_SLOTS]: `createSlots`,
		[TO_DISPLAY_STRING]: `toDisplayString`,
		[MERGE_PROPS]: `mergeProps`,
		[TO_HANDLERS]: `toHandlers`,
		[CAMELIZE]: `camelize`,
		[CAPITALIZE]: `capitalize`,
		[TO_HANDLER_KEY]: `toHandlerKey`,
		[SET_BLOCK_TRACKING]: `setBlockTracking`,
		[PUSH_SCOPE_ID]: `pushScopeId`,
		[POP_SCOPE_ID]: `popScopeId`,
		[WITH_SCOPE_ID]: `withScopeId`,
		[WITH_CTX]: `withCtx`,
		[UNREF]: `unref`,
		[IS_REF]: `isRef`
	};
	function registerRuntimeHelpers(helpers) {
		Object.getOwnPropertySymbols(helpers).forEach((s$3) => {
			helperNameMap[s$3] = helpers[s$3];
		});
	}
	const locStub = {
		source: "",
		start: {
			line: 1,
			column: 1,
			offset: 0
		},
		end: {
			line: 1,
			column: 1,
			offset: 0
		}
	};
	function createRoot(children, loc = locStub) {
		return {
			type: 0,
			children,
			helpers: [],
			components: [],
			directives: [],
			hoists: [],
			imports: [],
			cached: 0,
			temps: 0,
			codegenNode: void 0,
			loc
		};
	}
	function createVNodeCall(context, tag$3, props, children, patchFlag, dynamicProps, directives, isBlock$1 = false, disableTracking = false, loc = locStub) {
		if (context) {
			if (isBlock$1) {
				context.helper(OPEN_BLOCK);
				context.helper(CREATE_BLOCK);
			} else context.helper(CREATE_VNODE);
			if (directives) context.helper(WITH_DIRECTIVES);
		}
		return {
			type: 13,
			tag: tag$3,
			props,
			children,
			patchFlag,
			dynamicProps,
			directives,
			isBlock: isBlock$1,
			disableTracking,
			loc
		};
	}
	function createArrayExpression(elements, loc = locStub) {
		return {
			type: 17,
			loc,
			elements
		};
	}
	function createObjectExpression(properties, loc = locStub) {
		return {
			type: 15,
			loc,
			properties
		};
	}
	function createObjectProperty(key, value) {
		return {
			type: 16,
			loc: locStub,
			key: shared$3.isString(key) ? createSimpleExpression(key, true) : key,
			value
		};
	}
	function createSimpleExpression(content, isStatic$1, loc = locStub, constType = 0) {
		return {
			type: 4,
			loc,
			content,
			isStatic: isStatic$1,
			constType: isStatic$1 ? 3 : constType
		};
	}
	function createInterpolation(content, loc) {
		return {
			type: 5,
			loc,
			content: shared$3.isString(content) ? createSimpleExpression(content, false, loc) : content
		};
	}
	function createCompoundExpression(children, loc = locStub) {
		return {
			type: 8,
			loc,
			children
		};
	}
	function createCallExpression(callee, args = [], loc = locStub) {
		return {
			type: 14,
			loc,
			callee,
			arguments: args
		};
	}
	function createFunctionExpression(params, returns = void 0, newline$3 = false, isSlot = false, loc = locStub) {
		return {
			type: 18,
			params,
			returns,
			newline: newline$3,
			isSlot,
			loc
		};
	}
	function createConditionalExpression(test, consequent, alternate, newline$3 = true) {
		return {
			type: 19,
			test,
			consequent,
			alternate,
			newline: newline$3,
			loc: locStub
		};
	}
	function createCacheExpression(index$1, value, isVNode = false) {
		return {
			type: 20,
			index: index$1,
			value,
			isVNode,
			loc: locStub
		};
	}
	function createBlockStatement(body) {
		return {
			type: 21,
			body,
			loc: locStub
		};
	}
	function createTemplateLiteral(elements) {
		return {
			type: 22,
			elements,
			loc: locStub
		};
	}
	function createIfStatement(test, consequent, alternate) {
		return {
			type: 23,
			test,
			consequent,
			alternate,
			loc: locStub
		};
	}
	function createAssignmentExpression(left, right) {
		return {
			type: 24,
			left,
			right,
			loc: locStub
		};
	}
	function createSequenceExpression(expressions) {
		return {
			type: 25,
			expressions,
			loc: locStub
		};
	}
	function createReturnStatement(returns) {
		return {
			type: 26,
			returns,
			loc: locStub
		};
	}
	const isStaticExp = (p$2) => p$2.type === 4 && p$2.isStatic;
	const isBuiltInType = (tag$3, expected) => tag$3 === expected || tag$3 === shared$3.hyphenate(expected);
	function isCoreComponent(tag$3) {
		if (isBuiltInType(tag$3, "Teleport")) return TELEPORT;
		else if (isBuiltInType(tag$3, "Suspense")) return SUSPENSE;
		else if (isBuiltInType(tag$3, "KeepAlive")) return KEEP_ALIVE;
		else if (isBuiltInType(tag$3, "BaseTransition")) return BASE_TRANSITION;
	}
	const nonIdentifierRE = /^\d|[^\$\w]/;
	const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
	const memberExpRE = /^[A-Za-z_$][\w$]*(?:\s*\.\s*[A-Za-z_$][\w$]*|\[[^\]]+\])*$/;
	const isMemberExpression$7 = (path$28) => {
		if (!path$28) return false;
		return memberExpRE.test(path$28.trim());
	};
	function getInnerRange(loc, offset, length) {
		const source = loc.source.substr(offset, length);
		const newLoc = {
			source,
			start: advancePositionWithClone(loc.start, loc.source, offset),
			end: loc.end
		};
		if (length != null) newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
		return newLoc;
	}
	function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
		return advancePositionWithMutation(shared$3.extend({}, pos), source, numberOfCharacters);
	}
	function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
		let linesCount = 0;
		let lastNewLinePos = -1;
		for (let i$6 = 0; i$6 < numberOfCharacters; i$6++) if (source.charCodeAt(i$6) === 10) {
			linesCount++;
			lastNewLinePos = i$6;
		}
		pos.offset += numberOfCharacters;
		pos.line += linesCount;
		pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
		return pos;
	}
	function assert$3(condition, msg) {
		/* istanbul ignore if */
		if (!condition) throw new Error(msg || `unexpected compiler condition`);
	}
	function findDir(node, name, allowEmpty = false) {
		for (let i$6 = 0; i$6 < node.props.length; i$6++) {
			const p$2 = node.props[i$6];
			if (p$2.type === 7 && (allowEmpty || p$2.exp) && (shared$3.isString(name) ? p$2.name === name : name.test(p$2.name))) return p$2;
		}
	}
	function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
		for (let i$6 = 0; i$6 < node.props.length; i$6++) {
			const p$2 = node.props[i$6];
			if (p$2.type === 6) {
				if (dynamicOnly) continue;
				if (p$2.name === name && (p$2.value || allowEmpty)) return p$2;
			} else if (p$2.name === "bind" && (p$2.exp || allowEmpty) && isBindKey(p$2.arg, name)) return p$2;
		}
	}
	function isBindKey(arg, name) {
		return !!(arg && isStaticExp(arg) && arg.content === name);
	}
	function hasDynamicKeyVBind(node) {
		return node.props.some((p$2) => p$2.type === 7 && p$2.name === "bind" && (!p$2.arg || p$2.arg.type !== 4 || !p$2.arg.isStatic));
	}
	function isText$2(node) {
		return node.type === 5 || node.type === 2;
	}
	function isVSlot(p$2) {
		return p$2.type === 7 && p$2.name === "slot";
	}
	function isTemplateNode(node) {
		return node.type === 1 && node.tagType === 3;
	}
	function isSlotOutlet(node) {
		return node.type === 1 && node.tagType === 2;
	}
	function injectProp(node, prop, context) {
		let propsWithInjection;
		const props = node.type === 13 ? node.props : node.arguments[2];
		if (props == null || shared$3.isString(props)) propsWithInjection = createObjectExpression([prop]);
		else if (props.type === 14) {
			const first = props.arguments[0];
			if (!shared$3.isString(first) && first.type === 15) first.properties.unshift(prop);
			else if (props.callee === TO_HANDLERS) propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [createObjectExpression([prop]), props]);
			else props.arguments.unshift(createObjectExpression([prop]));
			!propsWithInjection && (propsWithInjection = props);
		} else if (props.type === 15) {
			let alreadyExists = false;
			if (prop.key.type === 4) {
				const propKeyName = prop.key.content;
				alreadyExists = props.properties.some((p$2) => p$2.key.type === 4 && p$2.key.content === propKeyName);
			}
			if (!alreadyExists) props.properties.unshift(prop);
			propsWithInjection = props;
		} else propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [createObjectExpression([prop]), props]);
		if (node.type === 13) node.props = propsWithInjection;
		else node.arguments[2] = propsWithInjection;
	}
	function toValidAssetId(name, type) {
		return `_${type}_${name.replace(/[^\w]/g, "_")}`;
	}
	function hasScopeRef(node, ids) {
		if (!node || Object.keys(ids).length === 0) return false;
		switch (node.type) {
			case 1:
				for (let i$6 = 0; i$6 < node.props.length; i$6++) {
					const p$2 = node.props[i$6];
					if (p$2.type === 7 && (hasScopeRef(p$2.arg, ids) || hasScopeRef(p$2.exp, ids))) return true;
				}
				return node.children.some((c$2) => hasScopeRef(c$2, ids));
			case 11:
				if (hasScopeRef(node.source, ids)) return true;
				return node.children.some((c$2) => hasScopeRef(c$2, ids));
			case 9: return node.branches.some((b$1) => hasScopeRef(b$1, ids));
			case 10:
				if (hasScopeRef(node.condition, ids)) return true;
				return node.children.some((c$2) => hasScopeRef(c$2, ids));
			case 4: return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];
			case 8: return node.children.some((c$2) => shared$3.isObject(c$2) && hasScopeRef(c$2, ids));
			case 5:
			case 12: return hasScopeRef(node.content, ids);
			case 2:
			case 3: return false;
			default: return false;
		}
	}
	const decodeRE = /&(gt|lt|amp|apos|quot);/g;
	const decodeMap = {
		gt: ">",
		lt: "<",
		amp: "&",
		apos: "'",
		quot: "\""
	};
	const defaultParserOptions = {
		delimiters: [`{{`, `}}`],
		getNamespace: () => 0,
		getTextMode: () => 0,
		isVoidTag: shared$3.NO,
		isPreTag: shared$3.NO,
		isCustomElement: shared$3.NO,
		decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
		onError: defaultOnError,
		comments: false
	};
	function baseParse(content, options = {}) {
		const context = createParserContext(content, options);
		const start = getCursor(context);
		return createRoot(parseChildren(context, 0, []), getSelection(context, start));
	}
	function createParserContext(content, rawOptions) {
		const options = shared$3.extend({}, defaultParserOptions);
		for (const key in rawOptions) options[key] = rawOptions[key] || defaultParserOptions[key];
		return {
			options,
			column: 1,
			line: 1,
			offset: 0,
			originalSource: content,
			source: content,
			inPre: false,
			inVPre: false
		};
	}
	function parseChildren(context, mode, ancestors) {
		const parent = last$1(ancestors);
		const ns = parent ? parent.ns : 0;
		const nodes$1 = [];
		while (!isEnd(context, mode, ancestors)) {
			const s$3 = context.source;
			let node = void 0;
			if (mode === 0 || mode === 1) {
				if (!context.inVPre && startsWith(s$3, context.options.delimiters[0])) node = parseInterpolation(context, mode);
				else if (mode === 0 && s$3[0] === "<") if (s$3.length === 1) emitError(context, 5, 1);
				else if (s$3[1] === "!") if (startsWith(s$3, "<!--")) node = parseComment(context);
				else if (startsWith(s$3, "<!DOCTYPE")) node = parseBogusComment(context);
				else if (startsWith(s$3, "<![CDATA[")) if (ns !== 0) node = parseCDATA(context, ancestors);
				else {
					emitError(
						context,
						1
						/* CDATA_IN_HTML_CONTENT */
);
					node = parseBogusComment(context);
				}
				else {
					emitError(
						context,
						11
						/* INCORRECTLY_OPENED_COMMENT */
);
					node = parseBogusComment(context);
				}
				else if (s$3[1] === "/") if (s$3.length === 2) emitError(context, 5, 2);
				else if (s$3[2] === ">") {
					emitError(context, 14, 2);
					advanceBy(context, 3);
					continue;
				} else if (/[a-z]/i.test(s$3[2])) {
					emitError(
						context,
						23
						/* X_INVALID_END_TAG */
);
					parseTag(context, 1, parent);
					continue;
				} else {
					emitError(context, 12, 2);
					node = parseBogusComment(context);
				}
				else if (/[a-z]/i.test(s$3[1])) node = parseElement(context, ancestors);
				else if (s$3[1] === "?") {
					emitError(context, 21, 1);
					node = parseBogusComment(context);
				} else emitError(context, 12, 1);
			}
			if (!node) node = parseText(context, mode);
			if (shared$3.isArray(node)) for (let i$6 = 0; i$6 < node.length; i$6++) pushNode(nodes$1, node[i$6]);
			else pushNode(nodes$1, node);
		}
		let removedWhitespace = false;
		if (mode !== 2) {
			for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
				const node = nodes$1[i$6];
				if (!context.inPre && node.type === 2) if (!/[^\t\r\n\f ]/.test(node.content)) {
					const prev = nodes$1[i$6 - 1];
					const next = nodes$1[i$6 + 1];
					if (!prev || !next || prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content)) {
						removedWhitespace = true;
						nodes$1[i$6] = null;
					} else node.content = " ";
				} else node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
				if (node.type === 3 && !context.options.comments) {
					removedWhitespace = true;
					nodes$1[i$6] = null;
				}
			}
			if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
				const first = nodes$1[0];
				if (first && first.type === 2) first.content = first.content.replace(/^\r?\n/, "");
			}
		}
		return removedWhitespace ? nodes$1.filter(Boolean) : nodes$1;
	}
	function pushNode(nodes$1, node) {
		if (node.type === 2) {
			const prev = last$1(nodes$1);
			if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
				prev.content += node.content;
				prev.loc.end = node.loc.end;
				prev.loc.source += node.loc.source;
				return;
			}
		}
		nodes$1.push(node);
	}
	function parseCDATA(context, ancestors) {
		advanceBy(context, 9);
		const nodes$1 = parseChildren(context, 3, ancestors);
		if (context.source.length === 0) emitError(
			context,
			6
			/* EOF_IN_CDATA */
);
		else advanceBy(context, 3);
		return nodes$1;
	}
	function parseComment(context) {
		const start = getCursor(context);
		let content;
		const match = /--(\!)?>/.exec(context.source);
		if (!match) {
			content = context.source.slice(4);
			advanceBy(context, context.source.length);
			emitError(
				context,
				7
				/* EOF_IN_COMMENT */
);
		} else {
			if (match.index <= 3) emitError(
				context,
				0
				/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */
);
			if (match[1]) emitError(
				context,
				10
				/* INCORRECTLY_CLOSED_COMMENT */
);
			content = context.source.slice(4, match.index);
			const s$3 = context.source.slice(0, match.index);
			let prevIndex = 1, nestedIndex = 0;
			while ((nestedIndex = s$3.indexOf("<!--", prevIndex)) !== -1) {
				advanceBy(context, nestedIndex - prevIndex + 1);
				if (nestedIndex + 4 < s$3.length) emitError(
					context,
					16
					/* NESTED_COMMENT */
);
				prevIndex = nestedIndex + 1;
			}
			advanceBy(context, match.index + match[0].length - prevIndex + 1);
		}
		return {
			type: 3,
			content,
			loc: getSelection(context, start)
		};
	}
	function parseBogusComment(context) {
		const start = getCursor(context);
		const contentStart = context.source[1] === "?" ? 1 : 2;
		let content;
		const closeIndex = context.source.indexOf(">");
		if (closeIndex === -1) {
			content = context.source.slice(contentStart);
			advanceBy(context, context.source.length);
		} else {
			content = context.source.slice(contentStart, closeIndex);
			advanceBy(context, closeIndex + 1);
		}
		return {
			type: 3,
			content,
			loc: getSelection(context, start)
		};
	}
	function parseElement(context, ancestors) {
		const wasInPre = context.inPre;
		const wasInVPre = context.inVPre;
		const parent = last$1(ancestors);
		const element = parseTag(context, 0, parent);
		const isPreBoundary = context.inPre && !wasInPre;
		const isVPreBoundary = context.inVPre && !wasInVPre;
		if (element.isSelfClosing || context.options.isVoidTag(element.tag)) return element;
		ancestors.push(element);
		const mode = context.options.getTextMode(element, parent);
		const children = parseChildren(context, mode, ancestors);
		ancestors.pop();
		element.children = children;
		if (startsWithEndTagOpen(context.source, element.tag)) parseTag(context, 1, parent);
		else {
			emitError(context, 24, 0, element.loc.start);
			if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
				const first = children[0];
				if (first && startsWith(first.loc.source, "<!--")) emitError(
					context,
					8
					/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */
);
			}
		}
		element.loc = getSelection(context, element.loc.start);
		if (isPreBoundary) context.inPre = false;
		if (isVPreBoundary) context.inVPre = false;
		return element;
	}
	const isSpecialTemplateDirective = /* @__PURE__ */ shared$3.makeMap(`if,else,else-if,for,slot`);
	/**
	
	* Parse a tag (E.g. `<div id=a>`) with that type (start tag or end tag).
	
	*/
	function parseTag(context, type, parent) {
		const start = getCursor(context);
		const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
		const tag$3 = match[1];
		const ns = context.options.getNamespace(tag$3, parent);
		advanceBy(context, match[0].length);
		advanceSpaces(context);
		const cursor = getCursor(context);
		const currentSource = context.source;
		let props = parseAttributes(context, type);
		if (context.options.isPreTag(tag$3)) context.inPre = true;
		if (!context.inVPre && props.some((p$2) => p$2.type === 7 && p$2.name === "pre")) {
			context.inVPre = true;
			shared$3.extend(context, cursor);
			context.source = currentSource;
			props = parseAttributes(context, type).filter((p$2) => p$2.name !== "v-pre");
		}
		let isSelfClosing = false;
		if (context.source.length === 0) emitError(
			context,
			9
			/* EOF_IN_TAG */
);
		else {
			isSelfClosing = startsWith(context.source, "/>");
			if (type === 1 && isSelfClosing) emitError(
				context,
				4
				/* END_TAG_WITH_TRAILING_SOLIDUS */
);
			advanceBy(context, isSelfClosing ? 2 : 1);
		}
		let tagType = 0;
		const options = context.options;
		if (!context.inVPre && !options.isCustomElement(tag$3)) {
			const hasVIs = props.some((p$2) => p$2.type === 7 && p$2.name === "is");
			if (options.isNativeTag && !hasVIs) {
				if (!options.isNativeTag(tag$3)) tagType = 1;
			} else if (hasVIs || isCoreComponent(tag$3) || options.isBuiltInComponent && options.isBuiltInComponent(tag$3) || /^[A-Z]/.test(tag$3) || tag$3 === "component") tagType = 1;
			if (tag$3 === "slot") tagType = 2;
			else if (tag$3 === "template" && props.some((p$2) => {
				return p$2.type === 7 && isSpecialTemplateDirective(p$2.name);
			})) tagType = 3;
		}
		return {
			type: 1,
			ns,
			tag: tag$3,
			tagType,
			props,
			isSelfClosing,
			children: [],
			loc: getSelection(context, start),
			codegenNode: void 0
		};
	}
	function parseAttributes(context, type) {
		const props = [];
		const attributeNames = new Set();
		while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
			if (startsWith(context.source, "/")) {
				emitError(
					context,
					22
					/* UNEXPECTED_SOLIDUS_IN_TAG */
);
				advanceBy(context, 1);
				advanceSpaces(context);
				continue;
			}
			if (type === 1) emitError(
				context,
				3
				/* END_TAG_WITH_ATTRIBUTES */
);
			const attr = parseAttribute(context, attributeNames);
			if (type === 0) props.push(attr);
			if (/^[^\t\r\n\f />]/.test(context.source)) emitError(
				context,
				15
				/* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */
);
			advanceSpaces(context);
		}
		return props;
	}
	function parseAttribute(context, nameSet) {
		const start = getCursor(context);
		const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
		const name = match[0];
		if (nameSet.has(name)) emitError(
			context,
			2
			/* DUPLICATE_ATTRIBUTE */
);
		nameSet.add(name);
		if (name[0] === "=") emitError(
			context,
			19
			/* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */
);
		{
			const pattern = /["'<]/g;
			let m$2;
			while (m$2 = pattern.exec(name)) emitError(context, 17, m$2.index);
		}
		advanceBy(context, name.length);
		let value = void 0;
		if (/^[\t\r\n\f ]*=/.test(context.source)) {
			advanceSpaces(context);
			advanceBy(context, 1);
			advanceSpaces(context);
			value = parseAttributeValue(context);
			if (!value) emitError(
				context,
				13
				/* MISSING_ATTRIBUTE_VALUE */
);
		}
		const loc = getSelection(context, start);
		if (!context.inVPre && /^(v-|:|@|#)/.test(name)) {
			const match$1 = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
			const dirName = match$1[1] || (startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
			let arg;
			if (match$1[2]) {
				const isSlot = dirName === "slot";
				const startOffset = name.indexOf(match$1[2]);
				const loc$1 = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match$1[2].length + (isSlot && match$1[3] || "").length));
				let content = match$1[2];
				let isStatic$1 = true;
				if (content.startsWith("[")) {
					isStatic$1 = false;
					if (!content.endsWith("]")) emitError(
						context,
						26
						/* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */
);
					content = content.substr(1, content.length - 2);
				} else if (isSlot) content += match$1[3] || "";
				arg = {
					type: 4,
					content,
					isStatic: isStatic$1,
					constType: isStatic$1 ? 3 : 0,
					loc: loc$1
				};
			}
			if (value && value.isQuoted) {
				const valueLoc = value.loc;
				valueLoc.start.offset++;
				valueLoc.start.column++;
				valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
				valueLoc.source = valueLoc.source.slice(1, -1);
			}
			return {
				type: 7,
				name: dirName,
				exp: value && {
					type: 4,
					content: value.content,
					isStatic: false,
					constType: 0,
					loc: value.loc
				},
				arg,
				modifiers: match$1[3] ? match$1[3].substr(1).split(".") : [],
				loc
			};
		}
		return {
			type: 6,
			name,
			value: value && {
				type: 2,
				content: value.content,
				loc: value.loc
			},
			loc
		};
	}
	function parseAttributeValue(context) {
		const start = getCursor(context);
		let content;
		const quote = context.source[0];
		const isQuoted = quote === `"` || quote === `'`;
		if (isQuoted) {
			advanceBy(context, 1);
			const endIndex = context.source.indexOf(quote);
			if (endIndex === -1) content = parseTextData(
				context,
				context.source.length,
				4
				/* ATTRIBUTE_VALUE */
);
			else {
				content = parseTextData(
					context,
					endIndex,
					4
					/* ATTRIBUTE_VALUE */
);
				advanceBy(context, 1);
			}
		} else {
			const match = /^[^\t\r\n\f >]+/.exec(context.source);
			if (!match) return void 0;
			const unexpectedChars = /["'<=`]/g;
			let m$2;
			while (m$2 = unexpectedChars.exec(match[0])) emitError(context, 18, m$2.index);
			content = parseTextData(
				context,
				match[0].length,
				4
				/* ATTRIBUTE_VALUE */
);
		}
		return {
			content,
			isQuoted,
			loc: getSelection(context, start)
		};
	}
	function parseInterpolation(context, mode) {
		const [open, close] = context.options.delimiters;
		const closeIndex = context.source.indexOf(close, open.length);
		if (closeIndex === -1) {
			emitError(
				context,
				25
				/* X_MISSING_INTERPOLATION_END */
);
			return void 0;
		}
		const start = getCursor(context);
		advanceBy(context, open.length);
		const innerStart = getCursor(context);
		const innerEnd = getCursor(context);
		const rawContentLength = closeIndex - open.length;
		const rawContent = context.source.slice(0, rawContentLength);
		const preTrimContent = parseTextData(context, rawContentLength, mode);
		const content = preTrimContent.trim();
		const startOffset = preTrimContent.indexOf(content);
		if (startOffset > 0) advancePositionWithMutation(innerStart, rawContent, startOffset);
		const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
		advancePositionWithMutation(innerEnd, rawContent, endOffset);
		advanceBy(context, close.length);
		return {
			type: 5,
			content: {
				type: 4,
				isStatic: false,
				constType: 0,
				content,
				loc: getSelection(context, innerStart, innerEnd)
			},
			loc: getSelection(context, start)
		};
	}
	function parseText(context, mode) {
		const endTokens = ["<", context.options.delimiters[0]];
		if (mode === 3) endTokens.push("]]>");
		let endIndex = context.source.length;
		for (let i$6 = 0; i$6 < endTokens.length; i$6++) {
			const index$1 = context.source.indexOf(endTokens[i$6], 1);
			if (index$1 !== -1 && endIndex > index$1) endIndex = index$1;
		}
		const start = getCursor(context);
		const content = parseTextData(context, endIndex, mode);
		return {
			type: 2,
			content,
			loc: getSelection(context, start)
		};
	}
	/**
	
	* Get text data with a given length from the current location.
	
	* This translates HTML entities in the text data.
	
	*/
	function parseTextData(context, length, mode) {
		const rawText = context.source.slice(0, length);
		advanceBy(context, length);
		if (mode === 2 || mode === 3 || rawText.indexOf("&") === -1) return rawText;
		else return context.options.decodeEntities(
			rawText,
			mode === 4
			/* ATTRIBUTE_VALUE */
);
	}
	function getCursor(context) {
		const { column, line, offset } = context;
		return {
			column,
			line,
			offset
		};
	}
	function getSelection(context, start, end) {
		end = end || getCursor(context);
		return {
			start,
			end,
			source: context.originalSource.slice(start.offset, end.offset)
		};
	}
	function last$1(xs) {
		return xs[xs.length - 1];
	}
	function startsWith(source, searchString) {
		return source.startsWith(searchString);
	}
	function advanceBy(context, numberOfCharacters) {
		const { source } = context;
		advancePositionWithMutation(context, source, numberOfCharacters);
		context.source = source.slice(numberOfCharacters);
	}
	function advanceSpaces(context) {
		const match = /^[\t\r\n\f ]+/.exec(context.source);
		if (match) advanceBy(context, match[0].length);
	}
	function getNewPosition(context, start, numberOfCharacters) {
		return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
	}
	function emitError(context, code$1, offset, loc = getCursor(context)) {
		if (offset) {
			loc.offset += offset;
			loc.column += offset;
		}
		context.options.onError(createCompilerError(code$1, {
			start: loc,
			end: loc,
			source: ""
		}));
	}
	function isEnd(context, mode, ancestors) {
		const s$3 = context.source;
		switch (mode) {
			case 0:
				if (startsWith(s$3, "</")) {
					for (let i$6 = ancestors.length - 1; i$6 >= 0; --i$6) if (startsWithEndTagOpen(s$3, ancestors[i$6].tag)) return true;
				}
				break;
			case 1:
			case 2: {
				const parent = last$1(ancestors);
				if (parent && startsWithEndTagOpen(s$3, parent.tag)) return true;
				break;
			}
			case 3:
				if (startsWith(s$3, "]]>")) return true;
				break;
		}
		return !s$3;
	}
	function startsWithEndTagOpen(source, tag$3) {
		return startsWith(source, "</") && source.substr(2, tag$3.length).toLowerCase() === tag$3.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag$3.length] || ">");
	}
	function hoistStatic(root$5, context) {
		walk$1(
			root$5,
			context,
			// Root node is unfortunately non-hoistable due to potential parent
			// fallthrough attributes.
			isSingleElementRoot(root$5, root$5.children[0])
);
	}
	function isSingleElementRoot(root$5, child) {
		const { children } = root$5;
		return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
	}
	function walk$1(node, context, doNotHoistNode = false) {
		let hasHoistedNode = false;
		let canStringify = true;
		const { children } = node;
		for (let i$6 = 0; i$6 < children.length; i$6++) {
			const child = children[i$6];
			if (child.type === 1 && child.tagType === 0) {
				const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
				if (constantType > 0) {
					if (constantType < 3) canStringify = false;
					if (constantType >= 2) {
						child.codegenNode.patchFlag = "-1";
						child.codegenNode = context.hoist(child.codegenNode);
						hasHoistedNode = true;
						continue;
					}
				} else {
					const codegenNode = child.codegenNode;
					if (codegenNode.type === 13) {
						const flag = getPatchFlag(codegenNode);
						if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
							const props = getNodeProps(child);
							if (props) codegenNode.props = context.hoist(props);
						}
					}
				}
			} else if (child.type === 12) {
				const contentType = getConstantType(child.content, context);
				if (contentType > 0) {
					if (contentType < 3) canStringify = false;
					if (contentType >= 2) {
						child.codegenNode = context.hoist(child.codegenNode);
						hasHoistedNode = true;
					}
				}
			}
			if (child.type === 1) walk$1(child, context);
			else if (child.type === 11) walk$1(child, context, child.children.length === 1);
			else if (child.type === 9) for (let i$7 = 0; i$7 < child.branches.length; i$7++) walk$1(child.branches[i$7], context, child.branches[i$7].children.length === 1);
		}
		if (canStringify && hasHoistedNode && context.transformHoist) context.transformHoist(children, context, node);
	}
	function getConstantType(node, context) {
		const { constantCache } = context;
		switch (node.type) {
			case 1:
				if (node.tagType !== 0) return 0;
				const cached = constantCache.get(node);
				if (cached !== void 0) return cached;
				const codegenNode = node.codegenNode;
				if (codegenNode.type !== 13) return 0;
				const flag = getPatchFlag(codegenNode);
				if (!flag) {
					let returnType$1 = 3;
					const generatedPropsType = getGeneratedPropsConstantType(node, context);
					if (generatedPropsType === 0) {
						constantCache.set(
							node,
							0
							/* NOT_CONSTANT */
);
						return 0;
					}
					if (generatedPropsType < returnType$1) returnType$1 = generatedPropsType;
					for (let i$6 = 0; i$6 < node.children.length; i$6++) {
						const childType = getConstantType(node.children[i$6], context);
						if (childType === 0) {
							constantCache.set(
								node,
								0
								/* NOT_CONSTANT */
);
							return 0;
						}
						if (childType < returnType$1) returnType$1 = childType;
					}
					if (returnType$1 > 1) for (let i$6 = 0; i$6 < node.props.length; i$6++) {
						const p$2 = node.props[i$6];
						if (p$2.type === 7 && p$2.name === "bind" && p$2.exp) {
							const expType = getConstantType(p$2.exp, context);
							if (expType === 0) {
								constantCache.set(
									node,
									0
									/* NOT_CONSTANT */
);
								return 0;
							}
							if (expType < returnType$1) returnType$1 = expType;
						}
					}
					if (codegenNode.isBlock) {
						codegenNode.isBlock = false;
						context.helper(CREATE_VNODE);
					}
					constantCache.set(node, returnType$1);
					return returnType$1;
				} else {
					constantCache.set(
						node,
						0
						/* NOT_CONSTANT */
);
					return 0;
				}
			case 2:
			case 3: return 3;
			case 9:
			case 11:
			case 10: return 0;
			case 5:
			case 12: return getConstantType(node.content, context);
			case 4: return node.constType;
			case 8:
				let returnType = 3;
				for (let i$6 = 0; i$6 < node.children.length; i$6++) {
					const child = node.children[i$6];
					if (shared$3.isString(child) || shared$3.isSymbol(child)) continue;
					const childType = getConstantType(child, context);
					if (childType === 0) return 0;
					else if (childType < returnType) returnType = childType;
				}
				return returnType;
			default: return 0;
		}
	}
	function getGeneratedPropsConstantType(node, context) {
		let returnType = 3;
		const props = getNodeProps(node);
		if (props && props.type === 15) {
			const { properties } = props;
			for (let i$6 = 0; i$6 < properties.length; i$6++) {
				const { key, value } = properties[i$6];
				const keyType = getConstantType(key, context);
				if (keyType === 0) return keyType;
				if (keyType < returnType) returnType = keyType;
				if (value.type !== 4) return 0;
				const valueType = getConstantType(value, context);
				if (valueType === 0) return valueType;
				if (valueType < returnType) returnType = valueType;
			}
		}
		return returnType;
	}
	function getNodeProps(node) {
		const codegenNode = node.codegenNode;
		if (codegenNode.type === 13) return codegenNode.props;
	}
	function getPatchFlag(node) {
		const flag = node.patchFlag;
		return flag ? parseInt(flag, 10) : void 0;
	}
	function createTransformContext(root$5, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic$1 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = shared$3.NOOP, isCustomElement = shared$3.NOOP, expressionPlugins = [], scopeId = null, ssr = false, ssrCssVars = ``, bindingMetadata = shared$3.EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError }) {
		const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
		const context = {
			selfName: nameMatch && shared$3.capitalize(shared$3.camelize(nameMatch[1])),
			prefixIdentifiers,
			hoistStatic: hoistStatic$1,
			cacheHandlers,
			nodeTransforms,
			directiveTransforms,
			transformHoist,
			isBuiltInComponent,
			isCustomElement,
			expressionPlugins,
			scopeId,
			ssr,
			ssrCssVars,
			bindingMetadata,
			inline,
			isTS,
			onError,
			root: root$5,
			helpers: new Set(),
			components: new Set(),
			directives: new Set(),
			hoists: [],
			imports: [],
			constantCache: new Map(),
			temps: 0,
			cached: 0,
			identifiers: Object.create(null),
			scopes: {
				vFor: 0,
				vSlot: 0,
				vPre: 0,
				vOnce: 0
			},
			parent: null,
			currentNode: root$5,
			childIndex: 0,
			helper(name) {
				context.helpers.add(name);
				return name;
			},
			helperString(name) {
				return `_${helperNameMap[context.helper(name)]}`;
			},
			replaceNode(node) {
				context.parent.children[context.childIndex] = context.currentNode = node;
			},
			removeNode(node) {
				const list$4 = context.parent.children;
				const removalIndex = node ? list$4.indexOf(node) : context.currentNode ? context.childIndex : -1;
				if (!node || node === context.currentNode) {
					context.currentNode = null;
					context.onNodeRemoved();
				} else if (context.childIndex > removalIndex) {
					context.childIndex--;
					context.onNodeRemoved();
				}
				context.parent.children.splice(removalIndex, 1);
			},
			onNodeRemoved: () => {},
			addIdentifiers(exp$1) {
				if (shared$3.isString(exp$1)) addId(exp$1);
				else if (exp$1.identifiers) exp$1.identifiers.forEach(addId);
				else if (exp$1.type === 4) addId(exp$1.content);
			},
			removeIdentifiers(exp$1) {
				if (shared$3.isString(exp$1)) removeId(exp$1);
				else if (exp$1.identifiers) exp$1.identifiers.forEach(removeId);
				else if (exp$1.type === 4) removeId(exp$1.content);
			},
			hoist(exp$1) {
				context.hoists.push(exp$1);
				const identifier$6 = createSimpleExpression(
					`_hoisted_${context.hoists.length}`,
					false,
					exp$1.loc,
					2
					/* CAN_HOIST */
);
				identifier$6.hoisted = exp$1;
				return identifier$6;
			},
			cache(exp$1, isVNode = false) {
				return createCacheExpression(++context.cached, exp$1, isVNode);
			}
		};
		function addId(id$4) {
			const { identifiers } = context;
			if (identifiers[id$4] === void 0) identifiers[id$4] = 0;
			identifiers[id$4]++;
		}
		function removeId(id$4) {
			context.identifiers[id$4]--;
		}
		return context;
	}
	function transform(root$5, options) {
		const context = createTransformContext(root$5, options);
		traverseNode$1(root$5, context);
		if (options.hoistStatic) hoistStatic(root$5, context);
		if (!options.ssr) createRootCodegen(root$5, context);
		root$5.helpers = [...context.helpers];
		root$5.components = [...context.components];
		root$5.directives = [...context.directives];
		root$5.imports = context.imports;
		root$5.hoists = context.hoists;
		root$5.temps = context.temps;
		root$5.cached = context.cached;
	}
	function createRootCodegen(root$5, context) {
		const { helper } = context;
		const { children } = root$5;
		if (children.length === 1) {
			const child = children[0];
			if (isSingleElementRoot(root$5, child) && child.codegenNode) {
				const codegenNode = child.codegenNode;
				if (codegenNode.type === 13) {
					codegenNode.isBlock = true;
					helper(OPEN_BLOCK);
					helper(CREATE_BLOCK);
				}
				root$5.codegenNode = codegenNode;
			} else root$5.codegenNode = child;
		} else if (children.length > 1) {
			let patchFlag = 64;
			shared$3.PatchFlagNames[64];
			root$5.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, root$5.children, patchFlag + ``, void 0, void 0, true);
		}
	}
	function traverseChildren(parent, context) {
		let i$6 = 0;
		const nodeRemoved = () => {
			i$6--;
		};
		for (; i$6 < parent.children.length; i$6++) {
			const child = parent.children[i$6];
			if (shared$3.isString(child)) continue;
			context.parent = parent;
			context.childIndex = i$6;
			context.onNodeRemoved = nodeRemoved;
			traverseNode$1(child, context);
		}
	}
	function traverseNode$1(node, context) {
		context.currentNode = node;
		const { nodeTransforms } = context;
		const exitFns = [];
		for (let i$7 = 0; i$7 < nodeTransforms.length; i$7++) {
			const onExit = nodeTransforms[i$7](node, context);
			if (onExit) if (shared$3.isArray(onExit)) exitFns.push(...onExit);
			else exitFns.push(onExit);
			if (!context.currentNode) return;
			else node = context.currentNode;
		}
		switch (node.type) {
			case 3:
				if (!context.ssr) context.helper(CREATE_COMMENT);
				break;
			case 5:
				if (!context.ssr) context.helper(TO_DISPLAY_STRING);
				break;
			case 9:
				for (let i$7 = 0; i$7 < node.branches.length; i$7++) traverseNode$1(node.branches[i$7], context);
				break;
			case 10:
			case 11:
			case 1:
			case 0:
				traverseChildren(node, context);
				break;
		}
		context.currentNode = node;
		let i$6 = exitFns.length;
		while (i$6--) exitFns[i$6]();
	}
	function createStructuralDirectiveTransform(name, fn) {
		const matches = shared$3.isString(name) ? (n$4) => n$4 === name : (n$4) => name.test(n$4);
		return (node, context) => {
			if (node.type === 1) {
				const { props } = node;
				if (node.tagType === 3 && props.some(isVSlot)) return;
				const exitFns = [];
				for (let i$6 = 0; i$6 < props.length; i$6++) {
					const prop = props[i$6];
					if (prop.type === 7 && matches(prop.name)) {
						props.splice(i$6, 1);
						i$6--;
						const onExit = fn(node, prop, context);
						if (onExit) exitFns.push(onExit);
					}
				}
				return exitFns;
			}
		};
	}
	const PURE_ANNOTATION = `/*#__PURE__*/`;
	function createCodegenContext(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap: sourceMap$1$1 = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssr = false }) {
		const context = {
			mode,
			prefixIdentifiers,
			sourceMap: sourceMap$1$1,
			filename,
			scopeId,
			optimizeImports,
			runtimeGlobalName,
			runtimeModuleName,
			ssr,
			source: ast.loc.source,
			code: ``,
			column: 1,
			line: 1,
			offset: 0,
			indentLevel: 0,
			pure: false,
			map: void 0,
			helper(key) {
				return `_${helperNameMap[key]}`;
			},
			push(code$1, node) {
				context.code += code$1;
				if (context.map) {
					if (node) {
						let name;
						if (node.type === 4 && !node.isStatic) {
							const content = node.content.replace(/^_ctx\./, "");
							if (content !== node.content && isSimpleIdentifier(content)) name = content;
						}
						addMapping(node.loc.start, name);
					}
					advancePositionWithMutation(context, code$1);
					if (node && node.loc !== locStub) addMapping(node.loc.end);
				}
			},
			indent() {
				newline$3(++context.indentLevel);
			},
			deindent(withoutNewLine = false) {
				if (withoutNewLine) --context.indentLevel;
				else newline$3(--context.indentLevel);
			},
			newline() {
				newline$3(context.indentLevel);
			}
		};
		function newline$3(n$4) {
			context.push("\n" + `  `.repeat(n$4));
		}
		function addMapping(loc, name) {
			context.map.addMapping({
				name,
				source: context.filename,
				original: {
					line: loc.line,
					column: loc.column - 1
				},
				generated: {
					line: context.line,
					column: context.column - 1
				}
			});
		}
		if (sourceMap$1$1) {
			context.map = new sourceMap$2.SourceMapGenerator();
			context.map.setSourceContent(filename, context.source);
		}
		return context;
	}
	function generate$1(ast, options = {}) {
		const context = createCodegenContext(ast, options);
		if (options.onContextCreated) options.onContextCreated(context);
		const { mode, push: push$1, prefixIdentifiers, indent, deindent, newline: newline$3, scopeId, ssr } = context;
		const hasHelpers = ast.helpers.length > 0;
		const useWithBlock = !prefixIdentifiers && mode !== "module";
		const genScopeId = scopeId != null && mode === "module";
		const isSetupInlined = !!options.inline;
		const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
		if (mode === "module") genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);
		else genFunctionPreamble(ast, preambleContext);
		const functionName = ssr ? `ssrRender` : `render`;
		const args = ssr ? [
			"_ctx",
			"_push",
			"_parent",
			"_attrs"
		] : ["_ctx", "_cache"];
		if (options.bindingMetadata && !options.inline) args.push("$props", "$setup", "$data", "$options");
		const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(",") : args.join(", ");
		if (genScopeId) if (isSetupInlined) push$1(`${PURE_ANNOTATION}_withId(`);
		else push$1(`const ${functionName} = ${PURE_ANNOTATION}_withId(`);
		if (isSetupInlined || genScopeId) push$1(`(${signature}) => {`);
		else push$1(`function ${functionName}(${signature}) {`);
		indent();
		if (useWithBlock) {
			push$1(`with (_ctx) {`);
			indent();
			if (hasHelpers) {
				push$1(`const { ${ast.helpers.map((s$3) => `${helperNameMap[s$3]}: _${helperNameMap[s$3]}`).join(", ")} } = _Vue`);
				push$1(`\n`);
				newline$3();
			}
		}
		if (ast.components.length) {
			genAssets(ast.components, "component", context);
			if (ast.directives.length || ast.temps > 0) newline$3();
		}
		if (ast.directives.length) {
			genAssets(ast.directives, "directive", context);
			if (ast.temps > 0) newline$3();
		}
		if (ast.temps > 0) {
			push$1(`let `);
			for (let i$6 = 0; i$6 < ast.temps; i$6++) push$1(`${i$6 > 0 ? `, ` : ``}_temp${i$6}`);
		}
		if (ast.components.length || ast.directives.length || ast.temps) {
			push$1(`\n`);
			newline$3();
		}
		if (!ssr) push$1(`return `);
		if (ast.codegenNode) genNode(ast.codegenNode, context);
		else push$1(`null`);
		if (useWithBlock) {
			deindent();
			push$1(`}`);
		}
		deindent();
		push$1(`}`);
		if (genScopeId) push$1(`)`);
		return {
			ast,
			code: context.code,
			preamble: isSetupInlined ? preambleContext.code : ``,
			map: context.map ? context.map.toJSON() : void 0
		};
	}
	function genFunctionPreamble(ast, context) {
		const { ssr, prefixIdentifiers, push: push$1, newline: newline$3, runtimeModuleName, runtimeGlobalName } = context;
		const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;
		const aliasHelper = (s$3) => `${helperNameMap[s$3]}: _${helperNameMap[s$3]}`;
		if (ast.helpers.length > 0) if (prefixIdentifiers) push$1(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = ${VueBinding}\n`);
		else {
			push$1(`const _Vue = ${VueBinding}\n`);
			if (ast.hoists.length) {
				const staticHelpers = [
					CREATE_VNODE,
					CREATE_COMMENT,
					CREATE_TEXT,
					CREATE_STATIC
				].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
				push$1(`const { ${staticHelpers} } = _Vue\n`);
			}
		}
		if (ast.ssrHelpers && ast.ssrHelpers.length) push$1(`const { ${ast.ssrHelpers.map(aliasHelper).join(", ")} } = require("@vue/server-renderer")\n`);
		genHoists(ast.hoists, context);
		newline$3();
		push$1(`return `);
	}
	function genModulePreamble(ast, context, genScopeId, inline) {
		const { push: push$1, helper, newline: newline$3, scopeId, optimizeImports, runtimeModuleName } = context;
		if (genScopeId) {
			ast.helpers.push(WITH_SCOPE_ID);
			if (ast.hoists.length) ast.helpers.push(PUSH_SCOPE_ID, POP_SCOPE_ID);
		}
		if (ast.helpers.length) if (optimizeImports) {
			push$1(`import { ${ast.helpers.map((s$3) => helperNameMap[s$3]).join(", ")} } from ${JSON.stringify(runtimeModuleName)}\n`);
			push$1(`\n// Binding optimization for webpack code-split\nconst ${ast.helpers.map((s$3) => `_${helperNameMap[s$3]} = ${helperNameMap[s$3]}`).join(", ")}\n`);
		} else push$1(`import { ${ast.helpers.map((s$3) => `${helperNameMap[s$3]} as _${helperNameMap[s$3]}`).join(", ")} } from ${JSON.stringify(runtimeModuleName)}\n`);
		if (ast.ssrHelpers && ast.ssrHelpers.length) push$1(`import { ${ast.ssrHelpers.map((s$3) => `${helperNameMap[s$3]} as _${helperNameMap[s$3]}`).join(", ")} } from "@vue/server-renderer"\n`);
		if (ast.imports.length) {
			genImports(ast.imports, context);
			newline$3();
		}
		if (genScopeId) {
			push$1(`const _withId = ${PURE_ANNOTATION}${helper(WITH_SCOPE_ID)}("${scopeId}")`);
			newline$3();
		}
		genHoists(ast.hoists, context);
		newline$3();
		if (!inline) push$1(`export `);
	}
	function genAssets(assets, type, { helper, push: push$1, newline: newline$3 }) {
		const resolver = helper(type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
		for (let i$6 = 0; i$6 < assets.length; i$6++) {
			const id$4 = assets[i$6];
			push$1(`const ${toValidAssetId(id$4, type)} = ${resolver}(${JSON.stringify(id$4)})`);
			if (i$6 < assets.length - 1) newline$3();
		}
	}
	function genHoists(hoists, context) {
		if (!hoists.length) return;
		context.pure = true;
		const { push: push$1, newline: newline$3, helper, scopeId, mode } = context;
		const genScopeId = scopeId != null && mode !== "function";
		newline$3();
		if (genScopeId) {
			push$1(`${helper(PUSH_SCOPE_ID)}("${scopeId}")`);
			newline$3();
		}
		hoists.forEach((exp$1, i$6) => {
			if (exp$1) {
				push$1(`const _hoisted_${i$6 + 1} = `);
				genNode(exp$1, context);
				newline$3();
			}
		});
		if (genScopeId) {
			push$1(`${helper(POP_SCOPE_ID)}()`);
			newline$3();
		}
		context.pure = false;
	}
	function genImports(importsOptions, context) {
		if (!importsOptions.length) return;
		importsOptions.forEach((imports) => {
			context.push(`import `);
			genNode(imports.exp, context);
			context.push(` from '${imports.path}'`);
			context.newline();
		});
	}
	function isText$1$1(n$4) {
		return shared$3.isString(n$4) || n$4.type === 4 || n$4.type === 2 || n$4.type === 5 || n$4.type === 8;
	}
	function genNodeListAsArray(nodes$1, context) {
		const multilines = nodes$1.length > 3 || nodes$1.some((n$4) => shared$3.isArray(n$4) || !isText$1$1(n$4));
		context.push(`[`);
		multilines && context.indent();
		genNodeList(nodes$1, context, multilines);
		multilines && context.deindent();
		context.push(`]`);
	}
	function genNodeList(nodes$1, context, multilines = false, comma$5 = true) {
		const { push: push$1, newline: newline$3 } = context;
		for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
			const node = nodes$1[i$6];
			if (shared$3.isString(node)) push$1(node);
			else if (shared$3.isArray(node)) genNodeListAsArray(node, context);
			else genNode(node, context);
			if (i$6 < nodes$1.length - 1) if (multilines) {
				comma$5 && push$1(",");
				newline$3();
			} else comma$5 && push$1(", ");
		}
	}
	function genNode(node, context) {
		if (shared$3.isString(node)) {
			context.push(node);
			return;
		}
		if (shared$3.isSymbol(node)) {
			context.push(context.helper(node));
			return;
		}
		switch (node.type) {
			case 1:
			case 9:
			case 11:
				genNode(node.codegenNode, context);
				break;
			case 2:
				genText(node, context);
				break;
			case 4:
				genExpression(node, context);
				break;
			case 5:
				genInterpolation(node, context);
				break;
			case 12:
				genNode(node.codegenNode, context);
				break;
			case 8:
				genCompoundExpression(node, context);
				break;
			case 3: break;
			case 13:
				genVNodeCall(node, context);
				break;
			case 14:
				genCallExpression(node, context);
				break;
			case 15:
				genObjectExpression(node, context);
				break;
			case 17:
				genArrayExpression(node, context);
				break;
			case 18:
				genFunctionExpression(node, context);
				break;
			case 19:
				genConditionalExpression(node, context);
				break;
			case 20:
				genCacheExpression(node, context);
				break;
			case 21:
				genNodeList(node.body, context, true, false);
				break;
			case 22:
				genTemplateLiteral(node, context);
				break;
			case 23:
				genIfStatement(node, context);
				break;
			case 24:
				genAssignmentExpression(node, context);
				break;
			case 25:
				genSequenceExpression(node, context);
				break;
			case 26:
				genReturnStatement(node, context);
				break;
		}
	}
	function genText(node, context) {
		context.push(JSON.stringify(node.content), node);
	}
	function genExpression(node, context) {
		const { content, isStatic: isStatic$1 } = node;
		context.push(isStatic$1 ? JSON.stringify(content) : content, node);
	}
	function genInterpolation(node, context) {
		const { push: push$1, helper, pure } = context;
		if (pure) push$1(PURE_ANNOTATION);
		push$1(`${helper(TO_DISPLAY_STRING)}(`);
		genNode(node.content, context);
		push$1(`)`);
	}
	function genCompoundExpression(node, context) {
		for (let i$6 = 0; i$6 < node.children.length; i$6++) {
			const child = node.children[i$6];
			if (shared$3.isString(child)) context.push(child);
			else genNode(child, context);
		}
	}
	function genExpressionAsPropertyKey(node, context) {
		const { push: push$1 } = context;
		if (node.type === 8) {
			push$1(`[`);
			genCompoundExpression(node, context);
			push$1(`]`);
		} else if (node.isStatic) {
			const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
			push$1(text, node);
		} else push$1(`[${node.content}]`, node);
	}
	function genVNodeCall(node, context) {
		const { push: push$1, helper, pure } = context;
		const { tag: tag$3, props, children, patchFlag, dynamicProps, directives, isBlock: isBlock$1, disableTracking } = node;
		if (directives) push$1(helper(WITH_DIRECTIVES) + `(`);
		if (isBlock$1) push$1(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
		if (pure) push$1(PURE_ANNOTATION);
		push$1(helper(isBlock$1 ? CREATE_BLOCK : CREATE_VNODE) + `(`, node);
		genNodeList(genNullableArgs([
			tag$3,
			props,
			children,
			patchFlag,
			dynamicProps
		]), context);
		push$1(`)`);
		if (isBlock$1) push$1(`)`);
		if (directives) {
			push$1(`, `);
			genNode(directives, context);
			push$1(`)`);
		}
	}
	function genNullableArgs(args) {
		let i$6 = args.length;
		while (i$6--) if (args[i$6] != null) break;
		return args.slice(0, i$6 + 1).map((arg) => arg || `null`);
	}
	function genCallExpression(node, context) {
		const { push: push$1, helper, pure } = context;
		const callee = shared$3.isString(node.callee) ? node.callee : helper(node.callee);
		if (pure) push$1(PURE_ANNOTATION);
		push$1(callee + `(`, node);
		genNodeList(node.arguments, context);
		push$1(`)`);
	}
	function genObjectExpression(node, context) {
		const { push: push$1, indent, deindent, newline: newline$3 } = context;
		const { properties } = node;
		if (!properties.length) {
			push$1(`{}`, node);
			return;
		}
		const multilines = properties.length > 1 || properties.some(
			(p$2) => p$2.value.type !== 4
			/* SIMPLE_EXPRESSION */
);
		push$1(multilines ? `{` : `{ `);
		multilines && indent();
		for (let i$6 = 0; i$6 < properties.length; i$6++) {
			const { key, value } = properties[i$6];
			genExpressionAsPropertyKey(key, context);
			push$1(`: `);
			genNode(value, context);
			if (i$6 < properties.length - 1) {
				push$1(`,`);
				newline$3();
			}
		}
		multilines && deindent();
		push$1(multilines ? `}` : ` }`);
	}
	function genArrayExpression(node, context) {
		genNodeListAsArray(node.elements, context);
	}
	function genFunctionExpression(node, context) {
		const { push: push$1, indent, deindent, scopeId, mode } = context;
		const { params, returns, body, newline: newline$3, isSlot } = node;
		const genScopeId = isSlot && scopeId != null && mode !== "function";
		if (genScopeId) push$1(`_withId(`);
		else if (isSlot) push$1(`_${helperNameMap[WITH_CTX]}(`);
		push$1(`(`, node);
		if (shared$3.isArray(params)) genNodeList(params, context);
		else if (params) genNode(params, context);
		push$1(`) => `);
		if (newline$3 || body) {
			push$1(`{`);
			indent();
		}
		if (returns) {
			if (newline$3) push$1(`return `);
			if (shared$3.isArray(returns)) genNodeListAsArray(returns, context);
			else genNode(returns, context);
		} else if (body) genNode(body, context);
		if (newline$3 || body) {
			deindent();
			push$1(`}`);
		}
		if (genScopeId || isSlot) push$1(`)`);
	}
	function genConditionalExpression(node, context) {
		const { test, consequent, alternate, newline: needNewline } = node;
		const { push: push$1, indent, deindent, newline: newline$3 } = context;
		if (test.type === 4) {
			const needsParens$2 = !isSimpleIdentifier(test.content);
			needsParens$2 && push$1(`(`);
			genExpression(test, context);
			needsParens$2 && push$1(`)`);
		} else {
			push$1(`(`);
			genNode(test, context);
			push$1(`)`);
		}
		needNewline && indent();
		context.indentLevel++;
		needNewline || push$1(` `);
		push$1(`? `);
		genNode(consequent, context);
		context.indentLevel--;
		needNewline && newline$3();
		needNewline || push$1(` `);
		push$1(`: `);
		const isNested = alternate.type === 19;
		if (!isNested) context.indentLevel++;
		genNode(alternate, context);
		if (!isNested) context.indentLevel--;
		needNewline && deindent(
			true
			/* without newline */
);
	}
	function genCacheExpression(node, context) {
		const { push: push$1, helper, indent, deindent, newline: newline$3 } = context;
		push$1(`_cache[${node.index}] || (`);
		if (node.isVNode) {
			indent();
			push$1(`${helper(SET_BLOCK_TRACKING)}(-1),`);
			newline$3();
		}
		push$1(`_cache[${node.index}] = `);
		genNode(node.value, context);
		if (node.isVNode) {
			push$1(`,`);
			newline$3();
			push$1(`${helper(SET_BLOCK_TRACKING)}(1),`);
			newline$3();
			push$1(`_cache[${node.index}]`);
			deindent();
		}
		push$1(`)`);
	}
	function genTemplateLiteral(node, context) {
		const { push: push$1, indent, deindent } = context;
		push$1("`");
		const l$1 = node.elements.length;
		const multilines = l$1 > 3;
		for (let i$6 = 0; i$6 < l$1; i$6++) {
			const e$2 = node.elements[i$6];
			if (shared$3.isString(e$2)) push$1(e$2.replace(/(`|\$|\\)/g, "\\$1"));
			else {
				push$1("${");
				if (multilines) indent();
				genNode(e$2, context);
				if (multilines) deindent();
				push$1("}");
			}
		}
		push$1("`");
	}
	function genIfStatement(node, context) {
		const { push: push$1, indent, deindent } = context;
		const { test, consequent, alternate } = node;
		push$1(`if (`);
		genNode(test, context);
		push$1(`) {`);
		indent();
		genNode(consequent, context);
		deindent();
		push$1(`}`);
		if (alternate) {
			push$1(` else `);
			if (alternate.type === 23) genIfStatement(alternate, context);
			else {
				push$1(`{`);
				indent();
				genNode(alternate, context);
				deindent();
				push$1(`}`);
			}
		}
	}
	function genAssignmentExpression(node, context) {
		genNode(node.left, context);
		context.push(` = `);
		genNode(node.right, context);
	}
	function genSequenceExpression(node, context) {
		context.push(`(`);
		genNodeList(node.expressions, context);
		context.push(`)`);
	}
	function genReturnStatement({ returns }, context) {
		context.push(`return `);
		if (shared$3.isArray(returns)) genNodeListAsArray(returns, context);
		else genNode(returns, context);
	}
	const isLiteralWhitelisted = /* @__PURE__ */ shared$3.makeMap("true,false,null,this");
	const transformExpression = (node, context) => {
		if (node.type === 5) node.content = processExpression(node.content, context);
		else if (node.type === 1) for (let i$6 = 0; i$6 < node.props.length; i$6++) {
			const dir = node.props[i$6];
			if (dir.type === 7 && dir.name !== "for") {
				const exp$1 = dir.exp;
				const arg = dir.arg;
				if (exp$1 && exp$1.type === 4 && !(dir.name === "on" && arg)) dir.exp = processExpression(
					exp$1,
					context,
					// slot args must be processed as function params
					dir.name === "slot"
);
				if (arg && arg.type === 4 && !arg.isStatic) dir.arg = processExpression(arg, context);
			}
		}
	};
	function processExpression(node, context, asParams = false, asRawStatements = false) {
		if (!context.prefixIdentifiers || !node.content.trim()) return node;
		const { inline, bindingMetadata } = context;
		const rewriteIdentifier = (raw, parent, id$4) => {
			const type = shared$3.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];
			if (inline) {
				const isAssignmentLVal = parent && parent.type === "AssignmentExpression" && parent.left === id$4;
				const isUpdateArg = parent && parent.type === "UpdateExpression" && parent.argument === id$4;
				const isDestructureAssignment = parent && isInDestructureAssignment$1(parent, parentStack);
				if (type === "setup-const") return raw;
				else if (type === "setup-ref") return `${raw}.value`;
				else if (type === "setup-maybe-ref") return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : `${context.helperString(UNREF)}(${raw})`;
				else if (type === "setup-let") if (isAssignmentLVal) {
					const rVal = parent.right;
					const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);
					const rExpString = stringifyExpression(processExpression(createSimpleExpression(rExp, false), context));
					return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${raw}.value = ${rExpString} : ${raw}`;
				} else if (isUpdateArg) {
					id$4.start = parent.start;
					id$4.end = parent.end;
					const { prefix: isPrefix, operator: operator$1 } = parent;
					const prefix$1 = isPrefix ? operator$1 : ``;
					const postfix$1 = isPrefix ? `` : operator$1;
					return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${prefix$1}${raw}.value${postfix$1} : ${prefix$1}${raw}${postfix$1}`;
				} else if (isDestructureAssignment) return raw;
				else return `${context.helperString(UNREF)}(${raw})`;
				else if (type === "props") return `__props.${raw}`;
			} else if (type && type.startsWith("setup")) return `$setup.${raw}`;
			else if (type) return `$${type}.${raw}`;
			return `_ctx.${raw}`;
		};
		const rawExp = node.content;
		const bailConstant = rawExp.indexOf(`(`) > -1 || rawExp.indexOf(".") > 0;
		if (isSimpleIdentifier(rawExp)) {
			const isScopeVarReference = context.identifiers[rawExp];
			const isAllowedGlobal = shared$3.isGloballyWhitelisted(rawExp);
			const isLiteral$5 = isLiteralWhitelisted(rawExp);
			if (!asParams && !isScopeVarReference && !isAllowedGlobal && !isLiteral$5) {
				if (bindingMetadata[node.content] === "setup-const") node.constType = 1;
				node.content = rewriteIdentifier(rawExp);
			} else if (!isScopeVarReference) if (isLiteral$5) node.constType = 3;
			else node.constType = 2;
			return node;
		}
		let ast;
		const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;
		try {
			ast = parser$4.parse(source, { plugins: [...context.expressionPlugins, ...shared$3.babelParserDefaultPlugins] }).program;
		} catch (e$2) {
			context.onError(createCompilerError(43, node.loc, void 0, e$2.message));
			return node;
		}
		const ids = [];
		const knownIds = Object.create(context.identifiers);
		const isDuplicate = (node$1) => ids.some((id$4) => id$4.start === node$1.start);
		const parentStack = [];
		estreeWalker$1.walk(ast, {
			enter(node$1, parent) {
				parent && parentStack.push(parent);
				if (node$1.type === "Identifier") {
					if (!isDuplicate(node$1)) {
						const needPrefix = shouldPrefix(node$1, parent, parentStack);
						if (!knownIds[node$1.name] && needPrefix) {
							if (isStaticProperty$1(parent) && parent.shorthand) node$1.prefix = `${node$1.name}: `;
							node$1.name = rewriteIdentifier(node$1.name, parent, node$1);
							ids.push(node$1);
						} else if (!isStaticPropertyKey$1(node$1, parent)) {
							if (!(needPrefix && knownIds[node$1.name]) && !bailConstant) node$1.isConstant = true;
							ids.push(node$1);
						}
					}
				} else if (isFunction$8(node$1)) node$1.params.forEach((p$2) => estreeWalker$1.walk(p$2, { enter(child, parent$1) {
					if (child.type === "Identifier" && !isStaticPropertyKey$1(child, parent$1) && !(parent$1 && parent$1.type === "AssignmentPattern" && parent$1.right === child)) {
						const { name } = child;
						if (node$1.scopeIds && node$1.scopeIds.has(name)) return;
						if (name in knownIds) knownIds[name]++;
						else knownIds[name] = 1;
						(node$1.scopeIds || (node$1.scopeIds = new Set())).add(name);
					}
				} }));
			},
			leave(node$1, parent) {
				parent && parentStack.pop();
				if (node$1 !== ast.body[0].expression && node$1.scopeIds) node$1.scopeIds.forEach((id$4) => {
					knownIds[id$4]--;
					if (knownIds[id$4] === 0) delete knownIds[id$4];
				});
			}
		});
		const children = [];
		ids.sort((a$1, b$1) => a$1.start - b$1.start);
		ids.forEach((id$4, i$6) => {
			const start = id$4.start - 1;
			const end = id$4.end - 1;
			const last$2 = ids[i$6 - 1];
			const leadingText = rawExp.slice(last$2 ? last$2.end - 1 : 0, start);
			if (leadingText.length || id$4.prefix) children.push(leadingText + (id$4.prefix || ``));
			const source$1 = rawExp.slice(start, end);
			children.push(createSimpleExpression(
				id$4.name,
				false,
				{
					source: source$1,
					start: advancePositionWithClone(node.loc.start, source$1, start),
					end: advancePositionWithClone(node.loc.start, source$1, end)
				},
				id$4.isConstant ? 3 : 0
				/* NOT_CONSTANT */
));
			if (i$6 === ids.length - 1 && end < rawExp.length) children.push(rawExp.slice(end));
		});
		let ret$1;
		if (children.length) ret$1 = createCompoundExpression(children, node.loc);
		else {
			ret$1 = node;
			ret$1.constType = bailConstant ? 0 : 3;
		}
		ret$1.identifiers = Object.keys(knownIds);
		return ret$1;
	}
	const isFunction$8 = (node) => {
		return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
	};
	const isStaticProperty$1 = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
	const isStaticPropertyKey$1 = (node, parent) => isStaticProperty$1(parent) && parent.key === node;
	function shouldPrefix(id$4, parent, parentStack) {
		if ((parent.type === "VariableDeclarator" || parent.type === "ClassDeclaration") && parent.id === id$4) return false;
		if (isFunction$8(parent)) {
			if (parent.id === id$4) return false;
			if (parent.params.includes(id$4)) return false;
		}
		if (isStaticPropertyKey$1(id$4, parent)) return false;
		if (parent.type === "ArrayPattern" && !isInDestructureAssignment$1(parent, parentStack)) return false;
		if ((parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression") && parent.property === id$4 && !parent.computed) return false;
		if (id$4.name === "arguments") return false;
		if (shared$3.isGloballyWhitelisted(id$4.name)) return false;
		if (id$4.name === "require") return false;
		return true;
	}
	function isInDestructureAssignment$1(parent, parentStack) {
		if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
			let i$6 = parentStack.length;
			while (i$6--) {
				const p$2 = parentStack[i$6];
				if (p$2.type === "AssignmentExpression") return true;
				else if (p$2.type !== "ObjectProperty" && !p$2.type.endsWith("Pattern")) break;
			}
		}
		return false;
	}
	function stringifyExpression(exp$1) {
		if (shared$3.isString(exp$1)) return exp$1;
		else if (exp$1.type === 4) return exp$1.content;
		else return exp$1.children.map(stringifyExpression).join("");
	}
	const transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {
		return processIf(node, dir, context, (ifNode, branch, isRoot$3) => {
			const siblings = context.parent.children;
			let i$6 = siblings.indexOf(ifNode);
			let key = 0;
			while (i$6-- >= 0) {
				const sibling = siblings[i$6];
				if (sibling && sibling.type === 9) key += sibling.branches.length;
			}
			return () => {
				if (isRoot$3) ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
				else {
					const parentCondition = getParentCondition(ifNode.codegenNode);
					parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
				}
			};
		});
	});
	function processIf(node, dir, context, processCodegen) {
		if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
			const loc = dir.exp ? dir.exp.loc : node.loc;
			context.onError(createCompilerError(27, dir.loc));
			dir.exp = createSimpleExpression(`true`, false, loc);
		}
		if (context.prefixIdentifiers && dir.exp) dir.exp = processExpression(dir.exp, context);
		if (dir.name === "if") {
			const branch = createIfBranch(node, dir);
			const ifNode = {
				type: 9,
				loc: node.loc,
				branches: [branch]
			};
			context.replaceNode(ifNode);
			if (processCodegen) return processCodegen(ifNode, branch, true);
		} else {
			const siblings = context.parent.children;
			let i$6 = siblings.indexOf(node);
			while (i$6-- >= -1) {
				const sibling = siblings[i$6];
				if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
					context.removeNode(sibling);
					continue;
				}
				if (sibling && sibling.type === 9) {
					context.removeNode();
					const branch = createIfBranch(node, dir);
					{
						const key = branch.userKey;
						if (key) sibling.branches.forEach(({ userKey }) => {
							if (isSameKey(userKey, key)) context.onError(createCompilerError(28, branch.userKey.loc));
						});
					}
					sibling.branches.push(branch);
					const onExit = processCodegen && processCodegen(sibling, branch, false);
					traverseNode$1(branch, context);
					if (onExit) onExit();
					context.currentNode = null;
				} else context.onError(createCompilerError(29, node.loc));
				break;
			}
		}
	}
	function createIfBranch(node, dir) {
		return {
			type: 10,
			loc: node.loc,
			condition: dir.name === "else" ? void 0 : dir.exp,
			children: node.tagType === 3 && !findDir(node, "for") ? node.children : [node],
			userKey: findProp(node, `key`)
		};
	}
	function createCodegenNodeForBranch(branch, keyIndex, context) {
		if (branch.condition) return createConditionalExpression(
			branch.condition,
			createChildrenCodegenNode(branch, keyIndex, context),
			// make sure to pass in asBlock: true so that the comment node call
			// closes the current block.
			createCallExpression(context.helper(CREATE_COMMENT), ["\"\"", "true"])
);
		else return createChildrenCodegenNode(branch, keyIndex, context);
	}
	function createChildrenCodegenNode(branch, keyIndex, context) {
		const { helper } = context;
		const keyProperty = createObjectProperty(`key`, createSimpleExpression(
			`${keyIndex}`,
			false,
			locStub,
			2
			/* CAN_HOIST */
));
		const { children } = branch;
		const firstChild = children[0];
		const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
		if (needFragmentWrapper) if (children.length === 1 && firstChild.type === 11) {
			const vnodeCall = firstChild.codegenNode;
			injectProp(vnodeCall, keyProperty, context);
			return vnodeCall;
		} else return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, "64", void 0, void 0, true, false, branch.loc);
		else {
			const vnodeCall = firstChild.codegenNode;
			if (vnodeCall.type === 13) {
				vnodeCall.isBlock = true;
				helper(OPEN_BLOCK);
				helper(CREATE_BLOCK);
			}
			injectProp(vnodeCall, keyProperty, context);
			return vnodeCall;
		}
	}
	function isSameKey(a$1, b$1) {
		if (!a$1 || a$1.type !== b$1.type) return false;
		if (a$1.type === 6) {
			if (a$1.value.content !== b$1.value.content) return false;
		} else {
			const exp$1 = a$1.exp;
			const branchExp = b$1.exp;
			if (exp$1.type !== branchExp.type) return false;
			if (exp$1.type !== 4 || exp$1.isStatic !== branchExp.isStatic || exp$1.content !== branchExp.content) return false;
		}
		return true;
	}
	function getParentCondition(node) {
		while (true) if (node.type === 19) if (node.alternate.type === 19) node = node.alternate;
		else return node;
		else if (node.type === 20) node = node.value;
	}
	const transformFor = createStructuralDirectiveTransform("for", (node, dir, context) => {
		const { helper } = context;
		return processFor(node, dir, context, (forNode) => {
			const renderExp = createCallExpression(helper(RENDER_LIST), [forNode.source]);
			const keyProp = findProp(node, `key`);
			const keyProperty = keyProp ? createObjectProperty(`key`, keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp) : null;
			if (context.prefixIdentifiers && keyProperty) keyProperty.value = processExpression(keyProperty.value, context);
			const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
			const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
			forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, renderExp, fragmentFlag + ``, void 0, void 0, true, !isStableFragment, node.loc);
			return () => {
				let childBlock;
				const isTemplate = isTemplateNode(node);
				const { children } = forNode;
				if (isTemplate) node.children.some((c$2) => {
					if (c$2.type === 1) {
						const key = findProp(c$2, "key");
						if (key) {
							context.onError(createCompilerError(32, key.loc));
							return true;
						}
					}
				});
				const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
				const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
				if (slotOutlet) {
					childBlock = slotOutlet.codegenNode;
					if (isTemplate && keyProperty) injectProp(childBlock, keyProperty, context);
				} else if (needFragmentWrapper) childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : void 0, node.children, "64", void 0, void 0, true);
				else {
					childBlock = children[0].codegenNode;
					if (isTemplate && keyProperty) injectProp(childBlock, keyProperty, context);
					childBlock.isBlock = !isStableFragment;
					if (childBlock.isBlock) {
						helper(OPEN_BLOCK);
						helper(CREATE_BLOCK);
					} else helper(CREATE_VNODE);
				}
				renderExp.arguments.push(createFunctionExpression(
					createForLoopParams(forNode.parseResult),
					childBlock,
					true
					/* force newline */
));
			};
		});
	});
	function processFor(node, dir, context, processCodegen) {
		if (!dir.exp) {
			context.onError(createCompilerError(30, dir.loc));
			return;
		}
		const parseResult = parseForExpression(
			// can only be simple expression because vFor transform is applied
			// before expression transform.
			dir.exp,
			context
);
		if (!parseResult) {
			context.onError(createCompilerError(31, dir.loc));
			return;
		}
		const { addIdentifiers, removeIdentifiers, scopes } = context;
		const { source, value, key, index: index$1 } = parseResult;
		const forNode = {
			type: 11,
			loc: dir.loc,
			source,
			valueAlias: value,
			keyAlias: key,
			objectIndexAlias: index$1,
			parseResult,
			children: isTemplateNode(node) ? node.children : [node]
		};
		context.replaceNode(forNode);
		scopes.vFor++;
		if (context.prefixIdentifiers) {
			value && addIdentifiers(value);
			key && addIdentifiers(key);
			index$1 && addIdentifiers(index$1);
		}
		const onExit = processCodegen && processCodegen(forNode);
		return () => {
			scopes.vFor--;
			if (context.prefixIdentifiers) {
				value && removeIdentifiers(value);
				key && removeIdentifiers(key);
				index$1 && removeIdentifiers(index$1);
			}
			if (onExit) onExit();
		};
	}
	const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
	const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
	const stripParensRE = /^\(|\)$/g;
	function parseForExpression(input, context) {
		const loc = input.loc;
		const exp$1 = input.content;
		const inMatch = exp$1.match(forAliasRE);
		if (!inMatch) return;
		const [, LHS, RHS] = inMatch;
		const result = {
			source: createAliasExpression(loc, RHS.trim(), exp$1.indexOf(RHS, LHS.length)),
			value: void 0,
			key: void 0,
			index: void 0
		};
		if (context.prefixIdentifiers) result.source = processExpression(result.source, context);
		let valueContent = LHS.trim().replace(stripParensRE, "").trim();
		const trimmedOffset = LHS.indexOf(valueContent);
		const iteratorMatch = valueContent.match(forIteratorRE);
		if (iteratorMatch) {
			valueContent = valueContent.replace(forIteratorRE, "").trim();
			const keyContent = iteratorMatch[1].trim();
			let keyOffset;
			if (keyContent) {
				keyOffset = exp$1.indexOf(keyContent, trimmedOffset + valueContent.length);
				result.key = createAliasExpression(loc, keyContent, keyOffset);
				if (context.prefixIdentifiers) result.key = processExpression(result.key, context, true);
			}
			if (iteratorMatch[2]) {
				const indexContent = iteratorMatch[2].trim();
				if (indexContent) {
					result.index = createAliasExpression(loc, indexContent, exp$1.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
					if (context.prefixIdentifiers) result.index = processExpression(result.index, context, true);
				}
			}
		}
		if (valueContent) {
			result.value = createAliasExpression(loc, valueContent, trimmedOffset);
			if (context.prefixIdentifiers) result.value = processExpression(result.value, context, true);
		}
		return result;
	}
	function createAliasExpression(range$2, content, offset) {
		return createSimpleExpression(content, false, getInnerRange(range$2, offset, content.length));
	}
	function createForLoopParams({ value, key, index: index$1 }) {
		const params = [];
		if (value) params.push(value);
		if (key) {
			if (!value) params.push(createSimpleExpression(`_`, false));
			params.push(key);
		}
		if (index$1) {
			if (!key) {
				if (!value) params.push(createSimpleExpression(`_`, false));
				params.push(createSimpleExpression(`__`, false));
			}
			params.push(index$1);
		}
		return params;
	}
	const defaultFallback = createSimpleExpression(`undefined`, false);
	const trackSlotScopes = (node, context) => {
		if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
			const vSlot = findDir(node, "slot");
			if (vSlot) {
				const slotProps = vSlot.exp;
				if (context.prefixIdentifiers) slotProps && context.addIdentifiers(slotProps);
				context.scopes.vSlot++;
				return () => {
					if (context.prefixIdentifiers) slotProps && context.removeIdentifiers(slotProps);
					context.scopes.vSlot--;
				};
			}
		}
	};
	const trackVForSlotScopes = (node, context) => {
		let vFor;
		if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, "for"))) {
			const result = vFor.parseResult = parseForExpression(vFor.exp, context);
			if (result) {
				const { value, key, index: index$1 } = result;
				const { addIdentifiers, removeIdentifiers } = context;
				value && addIdentifiers(value);
				key && addIdentifiers(key);
				index$1 && addIdentifiers(index$1);
				return () => {
					value && removeIdentifiers(value);
					key && removeIdentifiers(key);
					index$1 && removeIdentifiers(index$1);
				};
			}
		}
	};
	const buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc);
	function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
		context.helper(WITH_CTX);
		const { children, loc } = node;
		const slotsProperties = [];
		const dynamicSlots = [];
		const buildDefaultSlotProperty = (props, children$1) => createObjectProperty(`default`, buildSlotFn(props, children$1, loc));
		let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
		if (!context.ssr && context.prefixIdentifiers) hasDynamicSlots = hasScopeRef(node, context.identifiers);
		const onComponentSlot = findDir(node, "slot", true);
		if (onComponentSlot) {
			const { arg, exp: exp$1 } = onComponentSlot;
			if (arg && !isStaticExp(arg)) hasDynamicSlots = true;
			slotsProperties.push(createObjectProperty(arg || createSimpleExpression("default", true), buildSlotFn(exp$1, children, loc)));
		}
		let hasTemplateSlots = false;
		let hasNamedDefaultSlot = false;
		const implicitDefaultChildren = [];
		const seenSlotNames = new Set();
		for (let i$6 = 0; i$6 < children.length; i$6++) {
			const slotElement = children[i$6];
			let slotDir;
			if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
				if (slotElement.type !== 3) implicitDefaultChildren.push(slotElement);
				continue;
			}
			if (onComponentSlot) {
				context.onError(createCompilerError(36, slotDir.loc));
				break;
			}
			hasTemplateSlots = true;
			const { children: slotChildren, loc: slotLoc } = slotElement;
			const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
			let staticSlotName;
			if (isStaticExp(slotName)) staticSlotName = slotName ? slotName.content : `default`;
			else hasDynamicSlots = true;
			const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
			let vIf;
			let vElse;
			let vFor;
			if (vIf = findDir(slotElement, "if")) {
				hasDynamicSlots = true;
				dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
			} else if (vElse = findDir(
				slotElement,
				/^else(-if)?$/,
				true
				/* allowEmpty */
)) {
				let j$1 = i$6;
				let prev;
				while (j$1--) {
					prev = children[j$1];
					if (prev.type !== 3) break;
				}
				if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
					children.splice(i$6, 1);
					i$6--;
					let conditional = dynamicSlots[dynamicSlots.length - 1];
					while (conditional.alternate.type === 19) conditional = conditional.alternate;
					conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
				} else context.onError(createCompilerError(29, vElse.loc));
			} else if (vFor = findDir(slotElement, "for")) {
				hasDynamicSlots = true;
				const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
				if (parseResult) dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [parseResult.source, createFunctionExpression(
					createForLoopParams(parseResult),
					buildDynamicSlot(slotName, slotFunction),
					true
					/* force newline */
)]));
				else context.onError(createCompilerError(31, vFor.loc));
			} else {
				if (staticSlotName) {
					if (seenSlotNames.has(staticSlotName)) {
						context.onError(createCompilerError(37, dirLoc));
						continue;
					}
					seenSlotNames.add(staticSlotName);
					if (staticSlotName === "default") hasNamedDefaultSlot = true;
				}
				slotsProperties.push(createObjectProperty(slotName, slotFunction));
			}
		}
		if (!onComponentSlot) {
			if (!hasTemplateSlots) slotsProperties.push(buildDefaultSlotProperty(void 0, children));
			else if (implicitDefaultChildren.length) if (hasNamedDefaultSlot) context.onError(createCompilerError(38, implicitDefaultChildren[0].loc));
			else slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
		}
		const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
		let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(
			`_`,
			// 2 = compiled but dynamic = can skip normalization, but must run diff
			// 1 = compiled and static = can skip normalization AND diff as optimized
			createSimpleExpression(slotFlag + ``, false)
)), loc);
		if (dynamicSlots.length) slots = createCallExpression(context.helper(CREATE_SLOTS), [slots, createArrayExpression(dynamicSlots)]);
		return {
			slots,
			hasDynamicSlots
		};
	}
	function buildDynamicSlot(name, fn) {
		return createObjectExpression([createObjectProperty(`name`, name), createObjectProperty(`fn`, fn)]);
	}
	function hasForwardedSlots(children) {
		for (let i$6 = 0; i$6 < children.length; i$6++) {
			const child = children[i$6];
			if (child.type === 1) {
				if (child.tagType === 2 || child.tagType === 0 && hasForwardedSlots(child.children)) return true;
			}
		}
		return false;
	}
	const directiveImportMap = new WeakMap();
	const transformElement = (node, context) => {
		if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) return;
		return function postTransformElement() {
			const { tag: tag$3, props } = node;
			const isComponent = node.tagType === 1;
			const vnodeTag = isComponent ? resolveComponentType(node, context) : `"${tag$3}"`;
			const isDynamicComponent = shared$3.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
			let vnodeProps;
			let vnodeChildren;
			let vnodePatchFlag;
			let patchFlag = 0;
			let vnodeDynamicProps;
			let dynamicPropNames;
			let vnodeDirectives;
			let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent && (tag$3 === "svg" || tag$3 === "foreignObject" || findProp(node, "key", true));
			if (props.length > 0) {
				const propsBuildResult = buildProps(node, context);
				vnodeProps = propsBuildResult.props;
				patchFlag = propsBuildResult.patchFlag;
				dynamicPropNames = propsBuildResult.dynamicPropNames;
				const directives = propsBuildResult.directives;
				vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir) => buildDirectiveArgs(dir, context))) : void 0;
			}
			if (node.children.length > 0) {
				if (vnodeTag === KEEP_ALIVE) {
					shouldUseBlock = true;
					patchFlag |= 1024;
				}
				const shouldBuildAsSlots = isComponent && vnodeTag !== TELEPORT && vnodeTag !== KEEP_ALIVE;
				if (shouldBuildAsSlots) {
					const { slots, hasDynamicSlots } = buildSlots(node, context);
					vnodeChildren = slots;
					if (hasDynamicSlots) patchFlag |= 1024;
				} else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
					const child = node.children[0];
					const type = child.type;
					const hasDynamicTextChild = type === 5 || type === 8;
					if (hasDynamicTextChild && getConstantType(child, context) === 0) patchFlag |= 1;
					if (hasDynamicTextChild || type === 2) vnodeChildren = child;
					else vnodeChildren = node.children;
				} else vnodeChildren = node.children;
			}
			if (patchFlag !== 0) {
				vnodePatchFlag = String(patchFlag);
				if (dynamicPropNames && dynamicPropNames.length) vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
			}
			node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, node.loc);
		};
	};
	function resolveComponentType(node, context, ssr = false) {
		const { tag: tag$3 } = node;
		const isProp = node.tag === "component" ? findProp(node, "is") : findDir(node, "is");
		if (isProp) {
			const exp$1 = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
			if (exp$1) return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [exp$1]);
		}
		const builtIn = isCoreComponent(tag$3) || context.isBuiltInComponent(tag$3);
		if (builtIn) {
			if (!ssr) context.helper(builtIn);
			return builtIn;
		}
		{
			const fromSetup = resolveSetupReference(tag$3, context);
			if (fromSetup) return fromSetup;
		}
		if (context.selfName) {
			if (shared$3.capitalize(shared$3.camelize(tag$3)) === context.selfName) {
				context.helper(RESOLVE_COMPONENT);
				context.components.add(`_self`);
				return toValidAssetId(`_self`, `component`);
			}
		}
		context.helper(RESOLVE_COMPONENT);
		context.components.add(tag$3);
		return toValidAssetId(tag$3, `component`);
	}
	function resolveSetupReference(name, context) {
		const bindings = context.bindingMetadata;
		if (!bindings) return;
		const camelName = shared$3.camelize(name);
		const PascalName = shared$3.capitalize(camelName);
		const checkType = (type) => {
			if (bindings[name] === type) return name;
			if (bindings[camelName] === type) return camelName;
			if (bindings[PascalName] === type) return PascalName;
		};
		const fromConst = checkType(
			"setup-const"
			/* SETUP_CONST */
);
		if (fromConst) return context.inline ? fromConst : `$setup[${JSON.stringify(fromConst)}]`;
		const fromMaybeRef = checkType(
			"setup-let"
			/* SETUP_LET */
) || checkType(
			"setup-ref"
			/* SETUP_REF */
) || checkType(
			"setup-maybe-ref"
			/* SETUP_MAYBE_REF */
);
		if (fromMaybeRef) return context.inline ? `${context.helperString(UNREF)}(${fromMaybeRef})` : `$setup[${JSON.stringify(fromMaybeRef)}]`;
	}
	function buildProps(node, context, props = node.props, ssr = false) {
		const { tag: tag$3, loc: elementLoc } = node;
		const isComponent = node.tagType === 1;
		let properties = [];
		const mergeArgs = [];
		const runtimeDirectives = [];
		let patchFlag = 0;
		let hasRef = false;
		let hasClassBinding = false;
		let hasStyleBinding = false;
		let hasHydrationEventBinding = false;
		let hasDynamicKeys = false;
		let hasVnodeHook = false;
		const dynamicPropNames = [];
		const analyzePatchFlag = ({ key, value }) => {
			if (isStaticExp(key)) {
				const name = key.content;
				const isEventHandler = shared$3.isOn(name);
				if (!isComponent && isEventHandler && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !shared$3.isReservedProp(name)) hasHydrationEventBinding = true;
				if (isEventHandler && shared$3.isReservedProp(name)) hasVnodeHook = true;
				if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) return;
				if (name === "ref") hasRef = true;
				else if (name === "class" && !isComponent) hasClassBinding = true;
				else if (name === "style" && !isComponent) hasStyleBinding = true;
				else if (name !== "key" && !dynamicPropNames.includes(name)) dynamicPropNames.push(name);
			} else hasDynamicKeys = true;
		};
		for (let i$6 = 0; i$6 < props.length; i$6++) {
			const prop = props[i$6];
			if (prop.type === 6) {
				const { loc, name, value } = prop;
				let isStatic$1 = true;
				if (name === "ref") {
					hasRef = true;
					if (context.inline) isStatic$1 = false;
				}
				if (name === "is" && tag$3 === "component") continue;
				properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : "", isStatic$1, value ? value.loc : loc)));
			} else {
				const { name, arg, exp: exp$1, loc } = prop;
				const isBind = name === "bind";
				const isOn$1 = name === "on";
				if (name === "slot") {
					if (!isComponent) context.onError(createCompilerError(39, loc));
					continue;
				}
				if (name === "once") continue;
				if (name === "is" || isBind && tag$3 === "component" && isBindKey(arg, "is")) continue;
				if (isOn$1 && ssr) continue;
				if (!arg && (isBind || isOn$1)) {
					hasDynamicKeys = true;
					if (exp$1) {
						if (properties.length) {
							mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
							properties = [];
						}
						if (isBind) mergeArgs.push(exp$1);
						else mergeArgs.push({
							type: 14,
							loc,
							callee: context.helper(TO_HANDLERS),
							arguments: [exp$1]
						});
					} else context.onError(createCompilerError(isBind ? 33 : 34, loc));
					continue;
				}
				const directiveTransform = context.directiveTransforms[name];
				if (directiveTransform) {
					const { props: props$1, needRuntime } = directiveTransform(prop, node, context);
					!ssr && props$1.forEach(analyzePatchFlag);
					properties.push(...props$1);
					if (needRuntime) {
						runtimeDirectives.push(prop);
						if (shared$3.isSymbol(needRuntime)) directiveImportMap.set(prop, needRuntime);
					}
				} else runtimeDirectives.push(prop);
			}
		}
		let propsExpression = void 0;
		if (mergeArgs.length) {
			if (properties.length) mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
			if (mergeArgs.length > 1) propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
			else propsExpression = mergeArgs[0];
		} else if (properties.length) propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
		if (hasDynamicKeys) patchFlag |= 16;
		else {
			if (hasClassBinding) patchFlag |= 2;
			if (hasStyleBinding) patchFlag |= 4;
			if (dynamicPropNames.length) patchFlag |= 8;
			if (hasHydrationEventBinding) patchFlag |= 32;
		}
		if ((patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) patchFlag |= 512;
		return {
			props: propsExpression,
			directives: runtimeDirectives,
			patchFlag,
			dynamicPropNames
		};
	}
	function dedupeProperties(properties) {
		const knownProps = new Map();
		const deduped = [];
		for (let i$6 = 0; i$6 < properties.length; i$6++) {
			const prop = properties[i$6];
			if (prop.key.type === 8 || !prop.key.isStatic) {
				deduped.push(prop);
				continue;
			}
			const name = prop.key.content;
			const existing = knownProps.get(name);
			if (existing) {
				if (name === "style" || name === "class" || name.startsWith("on")) mergeAsArray(existing, prop);
			} else {
				knownProps.set(name, prop);
				deduped.push(prop);
			}
		}
		return deduped;
	}
	function mergeAsArray(existing, incoming) {
		if (existing.value.type === 17) existing.value.elements.push(incoming.value);
		else existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);
	}
	function buildDirectiveArgs(dir, context) {
		const dirArgs = [];
		const runtime$1 = directiveImportMap.get(dir);
		if (runtime$1) dirArgs.push(context.helperString(runtime$1));
		else {
			const fromSetup = resolveSetupReference(dir.name, context);
			if (fromSetup) dirArgs.push(fromSetup);
			else {
				context.helper(RESOLVE_DIRECTIVE);
				context.directives.add(dir.name);
				dirArgs.push(toValidAssetId(dir.name, `directive`));
			}
		}
		const { loc } = dir;
		if (dir.exp) dirArgs.push(dir.exp);
		if (dir.arg) {
			if (!dir.exp) dirArgs.push(`void 0`);
			dirArgs.push(dir.arg);
		}
		if (Object.keys(dir.modifiers).length) {
			if (!dir.arg) {
				if (!dir.exp) dirArgs.push(`void 0`);
				dirArgs.push(`void 0`);
			}
			const trueExpression = createSimpleExpression(`true`, false, loc);
			dirArgs.push(createObjectExpression(dir.modifiers.map((modifier) => createObjectProperty(modifier, trueExpression)), loc));
		}
		return createArrayExpression(dirArgs, dir.loc);
	}
	function stringifyDynamicPropNames(props) {
		let propsNamesString = `[`;
		for (let i$6 = 0, l$1 = props.length; i$6 < l$1; i$6++) {
			propsNamesString += JSON.stringify(props[i$6]);
			if (i$6 < l$1 - 1) propsNamesString += ", ";
		}
		return propsNamesString + `]`;
	}
	const cacheStringFunction = (fn) => {
		const cache$3 = Object.create(null);
		return (str$4) => {
			const hit = cache$3[str$4];
			return hit || (cache$3[str$4] = fn(str$4));
		};
	};
	const camelizeRE = /-(\w)/g;
	/**
	
	* @private
	
	*/
	const camelize = cacheStringFunction((str$4) => {
		return str$4.replace(camelizeRE, (_, c$2) => c$2 ? c$2.toUpperCase() : "");
	});
	const transformSlotOutlet = (node, context) => {
		if (isSlotOutlet(node)) {
			const { children, loc } = node;
			const { slotName, slotProps } = processSlotOutlet(node, context);
			const slotArgs = [context.prefixIdentifiers ? `_ctx.$slots` : `$slots`, slotName];
			if (slotProps) slotArgs.push(slotProps);
			if (children.length) {
				if (!slotProps) slotArgs.push(`{}`);
				slotArgs.push(createFunctionExpression([], children, false, false, loc));
			}
			node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
		}
	};
	function processSlotOutlet(node, context) {
		let slotName = `"default"`;
		let slotProps = void 0;
		const nonNameProps = [];
		for (let i$6 = 0; i$6 < node.props.length; i$6++) {
			const p$2 = node.props[i$6];
			if (p$2.type === 6) {
				if (p$2.value) if (p$2.name === "name") slotName = JSON.stringify(p$2.value.content);
				else {
					p$2.name = camelize(p$2.name);
					nonNameProps.push(p$2);
				}
			} else if (p$2.name === "bind" && isBindKey(p$2.arg, "name")) {
				if (p$2.exp) slotName = p$2.exp;
			} else {
				if (p$2.name === "bind" && p$2.arg && isStaticExp(p$2.arg)) p$2.arg.content = camelize(p$2.arg.content);
				nonNameProps.push(p$2);
			}
		}
		if (nonNameProps.length > 0) {
			const { props, directives } = buildProps(node, context, nonNameProps);
			slotProps = props;
			if (directives.length) context.onError(createCompilerError(35, directives[0].loc));
		}
		return {
			slotName,
			slotProps
		};
	}
	const fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^\s*function(?:\s+[\w$]+)?\s*\(/;
	const transformOn$1 = (dir, node, context, augmentor) => {
		const { loc, modifiers, arg } = dir;
		if (!dir.exp && !modifiers.length) context.onError(createCompilerError(34, loc));
		let eventName;
		if (arg.type === 4) if (arg.isStatic) {
			const rawName = arg.content;
			eventName = createSimpleExpression(shared$3.toHandlerKey(shared$3.camelize(rawName)), true, arg.loc);
		} else eventName = createCompoundExpression([
			`${context.helperString(TO_HANDLER_KEY)}(`,
			arg,
			`)`
		]);
		else {
			eventName = arg;
			eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
			eventName.children.push(`)`);
		}
		let exp$1 = dir.exp;
		if (exp$1 && !exp$1.content.trim()) exp$1 = void 0;
		let shouldCache = context.cacheHandlers && !exp$1;
		if (exp$1) {
			const isMemberExp = isMemberExpression$7(exp$1.content);
			const isInlineStatement = !(isMemberExp || fnExpRE.test(exp$1.content));
			const hasMultipleStatements = exp$1.content.includes(`;`);
			if (context.prefixIdentifiers) {
				isInlineStatement && context.addIdentifiers(`$event`);
				exp$1 = dir.exp = processExpression(exp$1, context, false, hasMultipleStatements);
				isInlineStatement && context.removeIdentifiers(`$event`);
				shouldCache = context.cacheHandlers && !(exp$1.type === 4 && exp$1.constType > 0) && !(isMemberExp && node.tagType === 1) && !hasScopeRef(exp$1, context.identifiers);
				if (shouldCache && isMemberExp) if (exp$1.type === 4) exp$1.content = `${exp$1.content} && ${exp$1.content}(...args)`;
				else exp$1.children = [
					...exp$1.children,
					` && `,
					...exp$1.children,
					`(...args)`
				];
			}
			if (isInlineStatement || shouldCache && isMemberExp) exp$1 = createCompoundExpression([
				`${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `\n//@ts-ignore\n` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
				exp$1,
				hasMultipleStatements ? `}` : `)`
			]);
		}
		let ret$1 = { props: [createObjectProperty(eventName, exp$1 || createSimpleExpression(`() => {}`, false, loc))] };
		if (augmentor) ret$1 = augmentor(ret$1);
		if (shouldCache) ret$1.props[0].value = context.cache(ret$1.props[0].value);
		return ret$1;
	};
	const transformBind = (dir, node, context) => {
		const { exp: exp$1, modifiers, loc } = dir;
		const arg = dir.arg;
		if (arg.type !== 4) {
			arg.children.unshift(`(`);
			arg.children.push(`) || ""`);
		} else if (!arg.isStatic) arg.content = `${arg.content} || ""`;
		if (modifiers.includes("camel")) if (arg.type === 4) if (arg.isStatic) arg.content = shared$3.camelize(arg.content);
		else arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
		else {
			arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
			arg.children.push(`)`);
		}
		if (!exp$1 || exp$1.type === 4 && !exp$1.content.trim()) {
			context.onError(createCompilerError(33, loc));
			return { props: [createObjectProperty(arg, createSimpleExpression("", true, loc))] };
		}
		return { props: [createObjectProperty(arg, exp$1)] };
	};
	const transformText = (node, context) => {
		if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) return () => {
			const children = node.children;
			let currentContainer = void 0;
			let hasText = false;
			for (let i$6 = 0; i$6 < children.length; i$6++) {
				const child = children[i$6];
				if (isText$2(child)) {
					hasText = true;
					for (let j$1 = i$6 + 1; j$1 < children.length; j$1++) {
						const next = children[j$1];
						if (isText$2(next)) {
							if (!currentContainer) currentContainer = children[i$6] = {
								type: 8,
								loc: child.loc,
								children: [child]
							};
							currentContainer.children.push(` + `, next);
							children.splice(j$1, 1);
							j$1--;
						} else {
							currentContainer = void 0;
							break;
						}
					}
				}
			}
			if (!hasText || children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0)) return;
			for (let i$6 = 0; i$6 < children.length; i$6++) {
				const child = children[i$6];
				if (isText$2(child) || child.type === 8) {
					const callArgs = [];
					if (child.type !== 2 || child.content !== " ") callArgs.push(child);
					if (!context.ssr && getConstantType(child, context) === 0) callArgs.push("1");
					children[i$6] = {
						type: 12,
						content: child,
						loc: child.loc,
						codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
					};
				}
			}
		};
	};
	const seen = new WeakSet();
	const transformOnce = (node, context) => {
		if (node.type === 1 && findDir(node, "once", true)) {
			if (seen.has(node)) return;
			seen.add(node);
			context.helper(SET_BLOCK_TRACKING);
			return () => {
				const cur = context.currentNode;
				if (cur.codegenNode) cur.codegenNode = context.cache(
					cur.codegenNode,
					true
					/* isVNode */
);
			};
		}
	};
	const transformModel$1 = (dir, node, context) => {
		const { exp: exp$1, arg } = dir;
		if (!exp$1) {
			context.onError(createCompilerError(40, dir.loc));
			return createTransformProps();
		}
		const rawExp = exp$1.loc.source;
		const expString = exp$1.type === 4 ? exp$1.content : rawExp;
		const bindingType = context.bindingMetadata[rawExp];
		const maybeRef = context.inline && bindingType && bindingType !== "setup-const";
		if (!isMemberExpression$7(expString) && !maybeRef) {
			context.onError(createCompilerError(41, exp$1.loc));
			return createTransformProps();
		}
		if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {
			context.onError(createCompilerError(42, exp$1.loc));
			return createTransformProps();
		}
		const propName = arg ? arg : createSimpleExpression("modelValue", true);
		const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression(["\"onUpdate:\" + ", arg]) : `onUpdate:modelValue`;
		let assignmentExp;
		const eventArg = context.isTS ? `($event: any)` : `$event`;
		if (maybeRef) if (bindingType === "setup-ref") assignmentExp = createCompoundExpression([
			`${eventArg} => (`,
			createSimpleExpression(rawExp, false, exp$1.loc),
			`.value = $event)`
		]);
		else {
			const altAssignment = bindingType === "setup-let" ? `${rawExp} = $event` : `null`;
			assignmentExp = createCompoundExpression([
				`${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? `,
				createSimpleExpression(rawExp, false, exp$1.loc),
				`.value = $event : ${altAssignment})`
			]);
		}
		else assignmentExp = createCompoundExpression([
			`${eventArg} => (`,
			exp$1,
			` = $event)`
		]);
		const props = [createObjectProperty(propName, dir.exp), createObjectProperty(eventName, assignmentExp)];
		if (context.prefixIdentifiers && context.cacheHandlers && !hasScopeRef(exp$1, context.identifiers)) props[1].value = context.cache(props[1].value);
		if (dir.modifiers.length && node.tagType === 1) {
			const modifiers = dir.modifiers.map((m$2) => (isSimpleIdentifier(m$2) ? m$2 : JSON.stringify(m$2)) + `: true`).join(`, `);
			const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, " + \"Modifiers\""]) : `modelModifiers`;
			props.push(createObjectProperty(modifiersKey, createSimpleExpression(
				`{ ${modifiers} }`,
				false,
				dir.loc,
				2
				/* CAN_HOIST */
)));
		}
		return createTransformProps(props);
	};
	function createTransformProps(props = []) {
		return { props };
	}
	function getBaseTransformPreset(prefixIdentifiers) {
		return [[
			transformOnce,
			transformIf,
			transformFor,
			...prefixIdentifiers ? [trackVForSlotScopes, transformExpression] : [],
			transformSlotOutlet,
			transformElement,
			trackSlotScopes,
			transformText
		], {
			on: transformOn$1,
			bind: transformBind,
			model: transformModel$1
		}];
	}
	function baseCompile(template$1, options = {}) {
		const onError = options.onError || defaultOnError;
		const isModuleMode = options.mode === "module";
		const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;
		if (!prefixIdentifiers && options.cacheHandlers) onError(createCompilerError(
			47
			/* X_CACHE_HANDLER_NOT_SUPPORTED */
));
		if (options.scopeId && !isModuleMode) onError(createCompilerError(
			48
			/* X_SCOPE_ID_NOT_SUPPORTED */
));
		const ast = shared$3.isString(template$1) ? baseParse(template$1, options) : template$1;
		const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);
		transform(ast, shared$3.extend({}, options, {
			prefixIdentifiers,
			nodeTransforms: [...nodeTransforms, ...options.nodeTransforms || []],
			directiveTransforms: shared$3.extend({}, directiveTransforms, options.directiveTransforms || {})
		}));
		return generate$1(ast, shared$3.extend({}, options, { prefixIdentifiers }));
	}
	const noopDirectiveTransform = () => ({ props: [] });
	exports.generateCodeFrame = shared$3.generateCodeFrame;
	exports.BASE_TRANSITION = BASE_TRANSITION;
	exports.CAMELIZE = CAMELIZE;
	exports.CAPITALIZE = CAPITALIZE;
	exports.CREATE_BLOCK = CREATE_BLOCK;
	exports.CREATE_COMMENT = CREATE_COMMENT;
	exports.CREATE_SLOTS = CREATE_SLOTS;
	exports.CREATE_STATIC = CREATE_STATIC;
	exports.CREATE_TEXT = CREATE_TEXT;
	exports.CREATE_VNODE = CREATE_VNODE;
	exports.FRAGMENT = FRAGMENT;
	exports.IS_REF = IS_REF;
	exports.KEEP_ALIVE = KEEP_ALIVE;
	exports.MERGE_PROPS = MERGE_PROPS;
	exports.OPEN_BLOCK = OPEN_BLOCK;
	exports.POP_SCOPE_ID = POP_SCOPE_ID;
	exports.PUSH_SCOPE_ID = PUSH_SCOPE_ID;
	exports.RENDER_LIST = RENDER_LIST;
	exports.RENDER_SLOT = RENDER_SLOT;
	exports.RESOLVE_COMPONENT = RESOLVE_COMPONENT;
	exports.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;
	exports.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;
	exports.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;
	exports.SUSPENSE = SUSPENSE;
	exports.TELEPORT = TELEPORT;
	exports.TO_DISPLAY_STRING = TO_DISPLAY_STRING;
	exports.TO_HANDLERS = TO_HANDLERS;
	exports.TO_HANDLER_KEY = TO_HANDLER_KEY;
	exports.UNREF = UNREF;
	exports.WITH_CTX = WITH_CTX;
	exports.WITH_DIRECTIVES = WITH_DIRECTIVES;
	exports.WITH_SCOPE_ID = WITH_SCOPE_ID;
	exports.advancePositionWithClone = advancePositionWithClone;
	exports.advancePositionWithMutation = advancePositionWithMutation;
	exports.assert = assert$3;
	exports.baseCompile = baseCompile;
	exports.baseParse = baseParse;
	exports.buildProps = buildProps;
	exports.buildSlots = buildSlots;
	exports.createArrayExpression = createArrayExpression;
	exports.createAssignmentExpression = createAssignmentExpression;
	exports.createBlockStatement = createBlockStatement;
	exports.createCacheExpression = createCacheExpression;
	exports.createCallExpression = createCallExpression;
	exports.createCompilerError = createCompilerError;
	exports.createCompoundExpression = createCompoundExpression;
	exports.createConditionalExpression = createConditionalExpression;
	exports.createForLoopParams = createForLoopParams;
	exports.createFunctionExpression = createFunctionExpression;
	exports.createIfStatement = createIfStatement;
	exports.createInterpolation = createInterpolation;
	exports.createObjectExpression = createObjectExpression;
	exports.createObjectProperty = createObjectProperty;
	exports.createReturnStatement = createReturnStatement;
	exports.createRoot = createRoot;
	exports.createSequenceExpression = createSequenceExpression;
	exports.createSimpleExpression = createSimpleExpression;
	exports.createStructuralDirectiveTransform = createStructuralDirectiveTransform;
	exports.createTemplateLiteral = createTemplateLiteral;
	exports.createTransformContext = createTransformContext;
	exports.createVNodeCall = createVNodeCall;
	exports.findDir = findDir;
	exports.findProp = findProp;
	exports.generate = generate$1;
	exports.getBaseTransformPreset = getBaseTransformPreset;
	exports.getInnerRange = getInnerRange;
	exports.hasDynamicKeyVBind = hasDynamicKeyVBind;
	exports.hasScopeRef = hasScopeRef;
	exports.helperNameMap = helperNameMap;
	exports.injectProp = injectProp;
	exports.isBindKey = isBindKey;
	exports.isBuiltInType = isBuiltInType;
	exports.isCoreComponent = isCoreComponent;
	exports.isMemberExpression = isMemberExpression$7;
	exports.isSimpleIdentifier = isSimpleIdentifier;
	exports.isSlotOutlet = isSlotOutlet;
	exports.isStaticExp = isStaticExp;
	exports.isTemplateNode = isTemplateNode;
	exports.isText = isText$2;
	exports.isVSlot = isVSlot;
	exports.locStub = locStub;
	exports.noopDirectiveTransform = noopDirectiveTransform;
	exports.processExpression = processExpression;
	exports.processFor = processFor;
	exports.processIf = processIf;
	exports.processSlotOutlet = processSlotOutlet;
	exports.registerRuntimeHelpers = registerRuntimeHelpers;
	exports.resolveComponentType = resolveComponentType;
	exports.toValidAssetId = toValidAssetId;
	exports.trackSlotScopes = trackSlotScopes;
	exports.trackVForSlotScopes = trackVForSlotScopes;
	exports.transform = transform;
	exports.transformBind = transformBind;
	exports.transformElement = transformElement;
	exports.transformExpression = transformExpression;
	exports.transformModel = transformModel$1;
	exports.transformOn = transformOn$1;
	exports.traverseNode = traverseNode$1;
} });

//#endregion
//#region node_modules/@vue/compiler-core/index.js
var require_compiler_core = __commonJS({ "node_modules/@vue/compiler-core/index.js"(exports, module) {
	module.exports = require_compiler_core_cjs_prod();
} });

//#endregion
//#region node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.prod.js
var require_compiler_dom_cjs_prod = __commonJS({ "node_modules/@vue/compiler-dom/dist/compiler-dom.cjs.prod.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var compilerCore$1 = require_compiler_core();
	var shared$2 = require_shared();
	const V_MODEL_RADIO = Symbol(``);
	const V_MODEL_CHECKBOX = Symbol(``);
	const V_MODEL_TEXT = Symbol(``);
	const V_MODEL_SELECT = Symbol(``);
	const V_MODEL_DYNAMIC = Symbol(``);
	const V_ON_WITH_MODIFIERS = Symbol(``);
	const V_ON_WITH_KEYS = Symbol(``);
	const V_SHOW = Symbol(``);
	const TRANSITION = Symbol(``);
	const TRANSITION_GROUP = Symbol(``);
	compilerCore$1.registerRuntimeHelpers({
		[V_MODEL_RADIO]: `vModelRadio`,
		[V_MODEL_CHECKBOX]: `vModelCheckbox`,
		[V_MODEL_TEXT]: `vModelText`,
		[V_MODEL_SELECT]: `vModelSelect`,
		[V_MODEL_DYNAMIC]: `vModelDynamic`,
		[V_ON_WITH_MODIFIERS]: `withModifiers`,
		[V_ON_WITH_KEYS]: `withKeys`,
		[V_SHOW]: `vShow`,
		[TRANSITION]: `Transition`,
		[TRANSITION_GROUP]: `TransitionGroup`
	});
	var namedCharacterReferences = {
		GT: ">",
		gt: ">",
		LT: "<",
		lt: "<",
		"ac;": "∾",
		"af;": "⁡",
		AMP: "&",
		amp: "&",
		"ap;": "≈",
		"DD;": "ⅅ",
		"dd;": "ⅆ",
		deg: "°",
		"ee;": "ⅇ",
		"eg;": "⪚",
		"el;": "⪙",
		ETH: "Ð",
		eth: "ð",
		"gE;": "≧",
		"ge;": "≥",
		"Gg;": "⋙",
		"gg;": "≫",
		"gl;": "≷",
		"GT;": ">",
		"Gt;": "≫",
		"gt;": ">",
		"ic;": "⁣",
		"ii;": "ⅈ",
		"Im;": "ℑ",
		"in;": "∈",
		"it;": "⁢",
		"lE;": "≦",
		"le;": "≤",
		"lg;": "≶",
		"Ll;": "⋘",
		"ll;": "≪",
		"LT;": "<",
		"Lt;": "≪",
		"lt;": "<",
		"mp;": "∓",
		"Mu;": "Μ",
		"mu;": "μ",
		"ne;": "≠",
		"ni;": "∋",
		not: "¬",
		"Nu;": "Ν",
		"nu;": "ν",
		"Or;": "⩔",
		"or;": "∨",
		"oS;": "Ⓢ",
		"Pi;": "Π",
		"pi;": "π",
		"pm;": "±",
		"Pr;": "⪻",
		"pr;": "≺",
		"Re;": "ℜ",
		REG: "®",
		reg: "®",
		"rx;": "℞",
		"Sc;": "⪼",
		"sc;": "≻",
		shy: "­",
		uml: "¨",
		"wp;": "℘",
		"wr;": "≀",
		"Xi;": "Ξ",
		"xi;": "ξ",
		yen: "¥",
		"acd;": "∿",
		"acE;": "∾̳",
		"Acy;": "А",
		"acy;": "а",
		"Afr;": "𝔄",
		"afr;": "𝔞",
		"AMP;": "&",
		"amp;": "&",
		"And;": "⩓",
		"and;": "∧",
		"ang;": "∠",
		"apE;": "⩰",
		"ape;": "≊",
		"ast;": "*",
		Auml: "Ä",
		auml: "ä",
		"Bcy;": "Б",
		"bcy;": "б",
		"Bfr;": "𝔅",
		"bfr;": "𝔟",
		"bne;": "=⃥",
		"bot;": "⊥",
		"Cap;": "⋒",
		"cap;": "∩",
		cent: "¢",
		"Cfr;": "ℭ",
		"cfr;": "𝔠",
		"Chi;": "Χ",
		"chi;": "χ",
		"cir;": "○",
		COPY: "©",
		copy: "©",
		"Cup;": "⋓",
		"cup;": "∪",
		"Dcy;": "Д",
		"dcy;": "д",
		"deg;": "°",
		"Del;": "∇",
		"Dfr;": "𝔇",
		"dfr;": "𝔡",
		"die;": "¨",
		"div;": "÷",
		"Dot;": "¨",
		"dot;": "˙",
		"Ecy;": "Э",
		"ecy;": "э",
		"Efr;": "𝔈",
		"efr;": "𝔢",
		"egs;": "⪖",
		"ell;": "ℓ",
		"els;": "⪕",
		"ENG;": "Ŋ",
		"eng;": "ŋ",
		"Eta;": "Η",
		"eta;": "η",
		"ETH;": "Ð",
		"eth;": "ð",
		Euml: "Ë",
		euml: "ë",
		"Fcy;": "Ф",
		"fcy;": "ф",
		"Ffr;": "𝔉",
		"ffr;": "𝔣",
		"gap;": "⪆",
		"Gcy;": "Г",
		"gcy;": "г",
		"gEl;": "⪌",
		"gel;": "⋛",
		"geq;": "≥",
		"ges;": "⩾",
		"Gfr;": "𝔊",
		"gfr;": "𝔤",
		"ggg;": "⋙",
		"gla;": "⪥",
		"glE;": "⪒",
		"glj;": "⪤",
		"gnE;": "≩",
		"gne;": "⪈",
		"Hat;": "^",
		"Hfr;": "ℌ",
		"hfr;": "𝔥",
		"Icy;": "И",
		"icy;": "и",
		"iff;": "⇔",
		"Ifr;": "ℑ",
		"ifr;": "𝔦",
		"Int;": "∬",
		"int;": "∫",
		Iuml: "Ï",
		iuml: "ï",
		"Jcy;": "Й",
		"jcy;": "й",
		"Jfr;": "𝔍",
		"jfr;": "𝔧",
		"Kcy;": "К",
		"kcy;": "к",
		"Kfr;": "𝔎",
		"kfr;": "𝔨",
		"lap;": "⪅",
		"lat;": "⪫",
		"Lcy;": "Л",
		"lcy;": "л",
		"lEg;": "⪋",
		"leg;": "⋚",
		"leq;": "≤",
		"les;": "⩽",
		"Lfr;": "𝔏",
		"lfr;": "𝔩",
		"lgE;": "⪑",
		"lnE;": "≨",
		"lne;": "⪇",
		"loz;": "◊",
		"lrm;": "‎",
		"Lsh;": "↰",
		"lsh;": "↰",
		macr: "¯",
		"Map;": "⤅",
		"map;": "↦",
		"Mcy;": "М",
		"mcy;": "м",
		"Mfr;": "𝔐",
		"mfr;": "𝔪",
		"mho;": "℧",
		"mid;": "∣",
		"nap;": "≉",
		nbsp: "\xA0",
		"Ncy;": "Н",
		"ncy;": "н",
		"Nfr;": "𝔑",
		"nfr;": "𝔫",
		"ngE;": "≧̸",
		"nge;": "≱",
		"nGg;": "⋙̸",
		"nGt;": "≫⃒",
		"ngt;": "≯",
		"nis;": "⋼",
		"niv;": "∋",
		"nlE;": "≦̸",
		"nle;": "≰",
		"nLl;": "⋘̸",
		"nLt;": "≪⃒",
		"nlt;": "≮",
		"Not;": "⫬",
		"not;": "¬",
		"npr;": "⊀",
		"nsc;": "⊁",
		"num;": "#",
		"Ocy;": "О",
		"ocy;": "о",
		"Ofr;": "𝔒",
		"ofr;": "𝔬",
		"ogt;": "⧁",
		"ohm;": "Ω",
		"olt;": "⧀",
		"ord;": "⩝",
		ordf: "ª",
		ordm: "º",
		"orv;": "⩛",
		Ouml: "Ö",
		ouml: "ö",
		"par;": "∥",
		para: "¶",
		"Pcy;": "П",
		"pcy;": "п",
		"Pfr;": "𝔓",
		"pfr;": "𝔭",
		"Phi;": "Φ",
		"phi;": "φ",
		"piv;": "ϖ",
		"prE;": "⪳",
		"pre;": "⪯",
		"Psi;": "Ψ",
		"psi;": "ψ",
		"Qfr;": "𝔔",
		"qfr;": "𝔮",
		QUOT: "\"",
		quot: "\"",
		"Rcy;": "Р",
		"rcy;": "р",
		"REG;": "®",
		"reg;": "®",
		"Rfr;": "ℜ",
		"rfr;": "𝔯",
		"Rho;": "Ρ",
		"rho;": "ρ",
		"rlm;": "‏",
		"Rsh;": "↱",
		"rsh;": "↱",
		"scE;": "⪴",
		"sce;": "⪰",
		"Scy;": "С",
		"scy;": "с",
		sect: "§",
		"Sfr;": "𝔖",
		"sfr;": "𝔰",
		"shy;": "­",
		"sim;": "∼",
		"smt;": "⪪",
		"sol;": "/",
		"squ;": "□",
		"Sub;": "⋐",
		"sub;": "⊂",
		"Sum;": "∑",
		"sum;": "∑",
		"Sup;": "⋑",
		"sup;": "⊃",
		sup1: "¹",
		sup2: "²",
		sup3: "³",
		"Tab;": "	",
		"Tau;": "Τ",
		"tau;": "τ",
		"Tcy;": "Т",
		"tcy;": "т",
		"Tfr;": "𝔗",
		"tfr;": "𝔱",
		"top;": "⊤",
		"Ucy;": "У",
		"ucy;": "у",
		"Ufr;": "𝔘",
		"ufr;": "𝔲",
		"uml;": "¨",
		Uuml: "Ü",
		uuml: "ü",
		"Vcy;": "В",
		"vcy;": "в",
		"Vee;": "⋁",
		"vee;": "∨",
		"Vfr;": "𝔙",
		"vfr;": "𝔳",
		"Wfr;": "𝔚",
		"wfr;": "𝔴",
		"Xfr;": "𝔛",
		"xfr;": "𝔵",
		"Ycy;": "Ы",
		"ycy;": "ы",
		"yen;": "¥",
		"Yfr;": "𝔜",
		"yfr;": "𝔶",
		yuml: "ÿ",
		"Zcy;": "З",
		"zcy;": "з",
		"Zfr;": "ℨ",
		"zfr;": "𝔷",
		"zwj;": "‍",
		Acirc: "Â",
		acirc: "â",
		acute: "´",
		AElig: "Æ",
		aelig: "æ",
		"andd;": "⩜",
		"andv;": "⩚",
		"ange;": "⦤",
		"Aopf;": "𝔸",
		"aopf;": "𝕒",
		"apid;": "≋",
		"apos;": "'",
		Aring: "Å",
		aring: "å",
		"Ascr;": "𝒜",
		"ascr;": "𝒶",
		"Auml;": "Ä",
		"auml;": "ä",
		"Barv;": "⫧",
		"bbrk;": "⎵",
		"Beta;": "Β",
		"beta;": "β",
		"beth;": "ℶ",
		"bNot;": "⫭",
		"bnot;": "⌐",
		"Bopf;": "𝔹",
		"bopf;": "𝕓",
		"boxH;": "═",
		"boxh;": "─",
		"boxV;": "║",
		"boxv;": "│",
		"Bscr;": "ℬ",
		"bscr;": "𝒷",
		"bsim;": "∽",
		"bsol;": "\\",
		"bull;": "•",
		"bump;": "≎",
		"caps;": "∩︀",
		"Cdot;": "Ċ",
		"cdot;": "ċ",
		cedil: "¸",
		"cent;": "¢",
		"CHcy;": "Ч",
		"chcy;": "ч",
		"circ;": "ˆ",
		"cirE;": "⧃",
		"cire;": "≗",
		"comp;": "∁",
		"cong;": "≅",
		"Copf;": "ℂ",
		"copf;": "𝕔",
		"COPY;": "©",
		"copy;": "©",
		"Cscr;": "𝒞",
		"cscr;": "𝒸",
		"csub;": "⫏",
		"csup;": "⫐",
		"cups;": "∪︀",
		"Darr;": "↡",
		"dArr;": "⇓",
		"darr;": "↓",
		"dash;": "‐",
		"dHar;": "⥥",
		"diam;": "⋄",
		"DJcy;": "Ђ",
		"djcy;": "ђ",
		"Dopf;": "𝔻",
		"dopf;": "𝕕",
		"Dscr;": "𝒟",
		"dscr;": "𝒹",
		"DScy;": "Ѕ",
		"dscy;": "ѕ",
		"dsol;": "⧶",
		"dtri;": "▿",
		"DZcy;": "Џ",
		"dzcy;": "џ",
		"ecir;": "≖",
		Ecirc: "Ê",
		ecirc: "ê",
		"Edot;": "Ė",
		"eDot;": "≑",
		"edot;": "ė",
		"emsp;": " ",
		"ensp;": " ",
		"Eopf;": "𝔼",
		"eopf;": "𝕖",
		"epar;": "⋕",
		"epsi;": "ε",
		"Escr;": "ℰ",
		"escr;": "ℯ",
		"Esim;": "⩳",
		"esim;": "≂",
		"Euml;": "Ë",
		"euml;": "ë",
		"euro;": "€",
		"excl;": "!",
		"flat;": "♭",
		"fnof;": "ƒ",
		"Fopf;": "𝔽",
		"fopf;": "𝕗",
		"fork;": "⋔",
		"Fscr;": "ℱ",
		"fscr;": "𝒻",
		"Gdot;": "Ġ",
		"gdot;": "ġ",
		"geqq;": "≧",
		"gesl;": "⋛︀",
		"GJcy;": "Ѓ",
		"gjcy;": "ѓ",
		"gnap;": "⪊",
		"gneq;": "⪈",
		"Gopf;": "𝔾",
		"gopf;": "𝕘",
		"Gscr;": "𝒢",
		"gscr;": "ℊ",
		"gsim;": "≳",
		"gtcc;": "⪧",
		"gvnE;": "≩︀",
		"half;": "½",
		"hArr;": "⇔",
		"harr;": "↔",
		"hbar;": "ℏ",
		"Hopf;": "ℍ",
		"hopf;": "𝕙",
		"Hscr;": "ℋ",
		"hscr;": "𝒽",
		Icirc: "Î",
		icirc: "î",
		"Idot;": "İ",
		"IEcy;": "Е",
		"iecy;": "е",
		iexcl: "¡",
		"imof;": "⊷",
		"IOcy;": "Ё",
		"iocy;": "ё",
		"Iopf;": "𝕀",
		"iopf;": "𝕚",
		"Iota;": "Ι",
		"iota;": "ι",
		"Iscr;": "ℐ",
		"iscr;": "𝒾",
		"isin;": "∈",
		"Iuml;": "Ï",
		"iuml;": "ï",
		"Jopf;": "𝕁",
		"jopf;": "𝕛",
		"Jscr;": "𝒥",
		"jscr;": "𝒿",
		"KHcy;": "Х",
		"khcy;": "х",
		"KJcy;": "Ќ",
		"kjcy;": "ќ",
		"Kopf;": "𝕂",
		"kopf;": "𝕜",
		"Kscr;": "𝒦",
		"kscr;": "𝓀",
		"Lang;": "⟪",
		"lang;": "⟨",
		laquo: "«",
		"Larr;": "↞",
		"lArr;": "⇐",
		"larr;": "←",
		"late;": "⪭",
		"lcub;": "{",
		"ldca;": "⤶",
		"ldsh;": "↲",
		"leqq;": "≦",
		"lesg;": "⋚︀",
		"lHar;": "⥢",
		"LJcy;": "Љ",
		"ljcy;": "љ",
		"lnap;": "⪉",
		"lneq;": "⪇",
		"Lopf;": "𝕃",
		"lopf;": "𝕝",
		"lozf;": "⧫",
		"lpar;": "(",
		"Lscr;": "ℒ",
		"lscr;": "𝓁",
		"lsim;": "≲",
		"lsqb;": "[",
		"ltcc;": "⪦",
		"ltri;": "◃",
		"lvnE;": "≨︀",
		"macr;": "¯",
		"male;": "♂",
		"malt;": "✠",
		micro: "µ",
		"mlcp;": "⫛",
		"mldr;": "…",
		"Mopf;": "𝕄",
		"mopf;": "𝕞",
		"Mscr;": "ℳ",
		"mscr;": "𝓂",
		"nang;": "∠⃒",
		"napE;": "⩰̸",
		"nbsp;": "\xA0",
		"ncap;": "⩃",
		"ncup;": "⩂",
		"ngeq;": "≱",
		"nges;": "⩾̸",
		"ngtr;": "≯",
		"nGtv;": "≫̸",
		"nisd;": "⋺",
		"NJcy;": "Њ",
		"njcy;": "њ",
		"nldr;": "‥",
		"nleq;": "≰",
		"nles;": "⩽̸",
		"nLtv;": "≪̸",
		"nmid;": "∤",
		"Nopf;": "ℕ",
		"nopf;": "𝕟",
		"npar;": "∦",
		"npre;": "⪯̸",
		"nsce;": "⪰̸",
		"Nscr;": "𝒩",
		"nscr;": "𝓃",
		"nsim;": "≁",
		"nsub;": "⊄",
		"nsup;": "⊅",
		"ntgl;": "≹",
		"ntlg;": "≸",
		"nvap;": "≍⃒",
		"nvge;": "≥⃒",
		"nvgt;": ">⃒",
		"nvle;": "≤⃒",
		"nvlt;": "<⃒",
		"oast;": "⊛",
		"ocir;": "⊚",
		Ocirc: "Ô",
		ocirc: "ô",
		"odiv;": "⨸",
		"odot;": "⊙",
		"ogon;": "˛",
		"oint;": "∮",
		"omid;": "⦶",
		"Oopf;": "𝕆",
		"oopf;": "𝕠",
		"opar;": "⦷",
		"ordf;": "ª",
		"ordm;": "º",
		"oror;": "⩖",
		"Oscr;": "𝒪",
		"oscr;": "ℴ",
		"osol;": "⊘",
		"Ouml;": "Ö",
		"ouml;": "ö",
		"para;": "¶",
		"part;": "∂",
		"perp;": "⊥",
		"phiv;": "ϕ",
		"plus;": "+",
		"Popf;": "ℙ",
		"popf;": "𝕡",
		pound: "£",
		"prap;": "⪷",
		"prec;": "≺",
		"prnE;": "⪵",
		"prod;": "∏",
		"prop;": "∝",
		"Pscr;": "𝒫",
		"pscr;": "𝓅",
		"qint;": "⨌",
		"Qopf;": "ℚ",
		"qopf;": "𝕢",
		"Qscr;": "𝒬",
		"qscr;": "𝓆",
		"QUOT;": "\"",
		"quot;": "\"",
		"race;": "∽̱",
		"Rang;": "⟫",
		"rang;": "⟩",
		raquo: "»",
		"Rarr;": "↠",
		"rArr;": "⇒",
		"rarr;": "→",
		"rcub;": "}",
		"rdca;": "⤷",
		"rdsh;": "↳",
		"real;": "ℜ",
		"rect;": "▭",
		"rHar;": "⥤",
		"rhov;": "ϱ",
		"ring;": "˚",
		"Ropf;": "ℝ",
		"ropf;": "𝕣",
		"rpar;": ")",
		"Rscr;": "ℛ",
		"rscr;": "𝓇",
		"rsqb;": "]",
		"rtri;": "▹",
		"scap;": "⪸",
		"scnE;": "⪶",
		"sdot;": "⋅",
		"sect;": "§",
		"semi;": ";",
		"sext;": "✶",
		"SHcy;": "Ш",
		"shcy;": "ш",
		"sime;": "≃",
		"simg;": "⪞",
		"siml;": "⪝",
		"smid;": "∣",
		"smte;": "⪬",
		"solb;": "⧄",
		"Sopf;": "𝕊",
		"sopf;": "𝕤",
		"spar;": "∥",
		"Sqrt;": "√",
		"squf;": "▪",
		"Sscr;": "𝒮",
		"sscr;": "𝓈",
		"Star;": "⋆",
		"star;": "☆",
		"subE;": "⫅",
		"sube;": "⊆",
		"succ;": "≻",
		"sung;": "♪",
		"sup1;": "¹",
		"sup2;": "²",
		"sup3;": "³",
		"supE;": "⫆",
		"supe;": "⊇",
		szlig: "ß",
		"tbrk;": "⎴",
		"tdot;": "⃛",
		THORN: "Þ",
		thorn: "þ",
		times: "×",
		"tint;": "∭",
		"toea;": "⤨",
		"Topf;": "𝕋",
		"topf;": "𝕥",
		"tosa;": "⤩",
		"trie;": "≜",
		"Tscr;": "𝒯",
		"tscr;": "𝓉",
		"TScy;": "Ц",
		"tscy;": "ц",
		"Uarr;": "↟",
		"uArr;": "⇑",
		"uarr;": "↑",
		Ucirc: "Û",
		ucirc: "û",
		"uHar;": "⥣",
		"Uopf;": "𝕌",
		"uopf;": "𝕦",
		"Upsi;": "ϒ",
		"upsi;": "υ",
		"Uscr;": "𝒰",
		"uscr;": "𝓊",
		"utri;": "▵",
		"Uuml;": "Ü",
		"uuml;": "ü",
		"vArr;": "⇕",
		"varr;": "↕",
		"Vbar;": "⫫",
		"vBar;": "⫨",
		"Vert;": "‖",
		"vert;": "|",
		"Vopf;": "𝕍",
		"vopf;": "𝕧",
		"Vscr;": "𝒱",
		"vscr;": "𝓋",
		"Wopf;": "𝕎",
		"wopf;": "𝕨",
		"Wscr;": "𝒲",
		"wscr;": "𝓌",
		"xcap;": "⋂",
		"xcup;": "⋃",
		"xmap;": "⟼",
		"xnis;": "⋻",
		"Xopf;": "𝕏",
		"xopf;": "𝕩",
		"Xscr;": "𝒳",
		"xscr;": "𝓍",
		"xvee;": "⋁",
		"YAcy;": "Я",
		"yacy;": "я",
		"YIcy;": "Ї",
		"yicy;": "ї",
		"Yopf;": "𝕐",
		"yopf;": "𝕪",
		"Yscr;": "𝒴",
		"yscr;": "𝓎",
		"YUcy;": "Ю",
		"yucy;": "ю",
		"Yuml;": "Ÿ",
		"yuml;": "ÿ",
		"Zdot;": "Ż",
		"zdot;": "ż",
		"Zeta;": "Ζ",
		"zeta;": "ζ",
		"ZHcy;": "Ж",
		"zhcy;": "ж",
		"Zopf;": "ℤ",
		"zopf;": "𝕫",
		"Zscr;": "𝒵",
		"zscr;": "𝓏",
		"zwnj;": "‌",
		Aacute: "Á",
		aacute: "á",
		"Acirc;": "Â",
		"acirc;": "â",
		"acute;": "´",
		"AElig;": "Æ",
		"aelig;": "æ",
		Agrave: "À",
		agrave: "à",
		"aleph;": "ℵ",
		"Alpha;": "Α",
		"alpha;": "α",
		"Amacr;": "Ā",
		"amacr;": "ā",
		"amalg;": "⨿",
		"angle;": "∠",
		"angrt;": "∟",
		"angst;": "Å",
		"Aogon;": "Ą",
		"aogon;": "ą",
		"Aring;": "Å",
		"aring;": "å",
		"asymp;": "≈",
		Atilde: "Ã",
		atilde: "ã",
		"awint;": "⨑",
		"bcong;": "≌",
		"bdquo;": "„",
		"bepsi;": "϶",
		"blank;": "␣",
		"blk12;": "▒",
		"blk14;": "░",
		"blk34;": "▓",
		"block;": "█",
		"boxDL;": "╗",
		"boxDl;": "╖",
		"boxdL;": "╕",
		"boxdl;": "┐",
		"boxDR;": "╔",
		"boxDr;": "╓",
		"boxdR;": "╒",
		"boxdr;": "┌",
		"boxHD;": "╦",
		"boxHd;": "╤",
		"boxhD;": "╥",
		"boxhd;": "┬",
		"boxHU;": "╩",
		"boxHu;": "╧",
		"boxhU;": "╨",
		"boxhu;": "┴",
		"boxUL;": "╝",
		"boxUl;": "╜",
		"boxuL;": "╛",
		"boxul;": "┘",
		"boxUR;": "╚",
		"boxUr;": "╙",
		"boxuR;": "╘",
		"boxur;": "└",
		"boxVH;": "╬",
		"boxVh;": "╫",
		"boxvH;": "╪",
		"boxvh;": "┼",
		"boxVL;": "╣",
		"boxVl;": "╢",
		"boxvL;": "╡",
		"boxvl;": "┤",
		"boxVR;": "╠",
		"boxVr;": "╟",
		"boxvR;": "╞",
		"boxvr;": "├",
		"Breve;": "˘",
		"breve;": "˘",
		brvbar: "¦",
		"bsemi;": "⁏",
		"bsime;": "⋍",
		"bsolb;": "⧅",
		"bumpE;": "⪮",
		"bumpe;": "≏",
		"caret;": "⁁",
		"caron;": "ˇ",
		"ccaps;": "⩍",
		Ccedil: "Ç",
		ccedil: "ç",
		"Ccirc;": "Ĉ",
		"ccirc;": "ĉ",
		"ccups;": "⩌",
		"cedil;": "¸",
		"check;": "✓",
		"clubs;": "♣",
		"Colon;": "∷",
		"colon;": ":",
		"comma;": ",",
		"crarr;": "↵",
		"Cross;": "⨯",
		"cross;": "✗",
		"csube;": "⫑",
		"csupe;": "⫒",
		"ctdot;": "⋯",
		"cuepr;": "⋞",
		"cuesc;": "⋟",
		"cupor;": "⩅",
		curren: "¤",
		"cuvee;": "⋎",
		"cuwed;": "⋏",
		"cwint;": "∱",
		"Dashv;": "⫤",
		"dashv;": "⊣",
		"dblac;": "˝",
		"ddarr;": "⇊",
		"Delta;": "Δ",
		"delta;": "δ",
		"dharl;": "⇃",
		"dharr;": "⇂",
		"diams;": "♦",
		"disin;": "⋲",
		divide: "÷",
		"doteq;": "≐",
		"dtdot;": "⋱",
		"dtrif;": "▾",
		"duarr;": "⇵",
		"duhar;": "⥯",
		Eacute: "É",
		eacute: "é",
		"Ecirc;": "Ê",
		"ecirc;": "ê",
		"eDDot;": "⩷",
		"efDot;": "≒",
		Egrave: "È",
		egrave: "è",
		"Emacr;": "Ē",
		"emacr;": "ē",
		"empty;": "∅",
		"Eogon;": "Ę",
		"eogon;": "ę",
		"eplus;": "⩱",
		"epsiv;": "ϵ",
		"eqsim;": "≂",
		"Equal;": "⩵",
		"equiv;": "≡",
		"erarr;": "⥱",
		"erDot;": "≓",
		"esdot;": "≐",
		"exist;": "∃",
		"fflig;": "ﬀ",
		"filig;": "ﬁ",
		"fjlig;": "fj",
		"fllig;": "ﬂ",
		"fltns;": "▱",
		"forkv;": "⫙",
		frac12: "½",
		frac14: "¼",
		frac34: "¾",
		"frasl;": "⁄",
		"frown;": "⌢",
		"Gamma;": "Γ",
		"gamma;": "γ",
		"Gcirc;": "Ĝ",
		"gcirc;": "ĝ",
		"gescc;": "⪩",
		"gimel;": "ℷ",
		"gneqq;": "≩",
		"gnsim;": "⋧",
		"grave;": "`",
		"gsime;": "⪎",
		"gsiml;": "⪐",
		"gtcir;": "⩺",
		"gtdot;": "⋗",
		"Hacek;": "ˇ",
		"harrw;": "↭",
		"Hcirc;": "Ĥ",
		"hcirc;": "ĥ",
		"hoarr;": "⇿",
		Iacute: "Í",
		iacute: "í",
		"Icirc;": "Î",
		"icirc;": "î",
		"iexcl;": "¡",
		Igrave: "Ì",
		igrave: "ì",
		"iiint;": "∭",
		"iiota;": "℩",
		"IJlig;": "Ĳ",
		"ijlig;": "ĳ",
		"Imacr;": "Ī",
		"imacr;": "ī",
		"image;": "ℑ",
		"imath;": "ı",
		"imped;": "Ƶ",
		"infin;": "∞",
		"Iogon;": "Į",
		"iogon;": "į",
		"iprod;": "⨼",
		iquest: "¿",
		"isinE;": "⋹",
		"isins;": "⋴",
		"isinv;": "∈",
		"Iukcy;": "І",
		"iukcy;": "і",
		"Jcirc;": "Ĵ",
		"jcirc;": "ĵ",
		"jmath;": "ȷ",
		"Jukcy;": "Є",
		"jukcy;": "є",
		"Kappa;": "Κ",
		"kappa;": "κ",
		"lAarr;": "⇚",
		"langd;": "⦑",
		"laquo;": "«",
		"larrb;": "⇤",
		"lates;": "⪭︀",
		"lBarr;": "⤎",
		"lbarr;": "⤌",
		"lbbrk;": "❲",
		"lbrke;": "⦋",
		"lceil;": "⌈",
		"ldquo;": "“",
		"lescc;": "⪨",
		"lhard;": "↽",
		"lharu;": "↼",
		"lhblk;": "▄",
		"llarr;": "⇇",
		"lltri;": "◺",
		"lneqq;": "≨",
		"lnsim;": "⋦",
		"loang;": "⟬",
		"loarr;": "⇽",
		"lobrk;": "⟦",
		"lopar;": "⦅",
		"lrarr;": "⇆",
		"lrhar;": "⇋",
		"lrtri;": "⊿",
		"lsime;": "⪍",
		"lsimg;": "⪏",
		"lsquo;": "‘",
		"ltcir;": "⩹",
		"ltdot;": "⋖",
		"ltrie;": "⊴",
		"ltrif;": "◂",
		"mdash;": "—",
		"mDDot;": "∺",
		"micro;": "µ",
		middot: "·",
		"minus;": "−",
		"mumap;": "⊸",
		"nabla;": "∇",
		"napid;": "≋̸",
		"napos;": "ŉ",
		"natur;": "♮",
		"nbump;": "≎̸",
		"ncong;": "≇",
		"ndash;": "–",
		"neArr;": "⇗",
		"nearr;": "↗",
		"nedot;": "≐̸",
		"nesim;": "≂̸",
		"ngeqq;": "≧̸",
		"ngsim;": "≵",
		"nhArr;": "⇎",
		"nharr;": "↮",
		"nhpar;": "⫲",
		"nlArr;": "⇍",
		"nlarr;": "↚",
		"nleqq;": "≦̸",
		"nless;": "≮",
		"nlsim;": "≴",
		"nltri;": "⋪",
		"notin;": "∉",
		"notni;": "∌",
		"npart;": "∂̸",
		"nprec;": "⊀",
		"nrArr;": "⇏",
		"nrarr;": "↛",
		"nrtri;": "⋫",
		"nsime;": "≄",
		"nsmid;": "∤",
		"nspar;": "∦",
		"nsubE;": "⫅̸",
		"nsube;": "⊈",
		"nsucc;": "⊁",
		"nsupE;": "⫆̸",
		"nsupe;": "⊉",
		Ntilde: "Ñ",
		ntilde: "ñ",
		"numsp;": " ",
		"nvsim;": "∼⃒",
		"nwArr;": "⇖",
		"nwarr;": "↖",
		Oacute: "Ó",
		oacute: "ó",
		"Ocirc;": "Ô",
		"ocirc;": "ô",
		"odash;": "⊝",
		"OElig;": "Œ",
		"oelig;": "œ",
		"ofcir;": "⦿",
		Ograve: "Ò",
		ograve: "ò",
		"ohbar;": "⦵",
		"olarr;": "↺",
		"olcir;": "⦾",
		"oline;": "‾",
		"Omacr;": "Ō",
		"omacr;": "ō",
		"Omega;": "Ω",
		"omega;": "ω",
		"operp;": "⦹",
		"oplus;": "⊕",
		"orarr;": "↻",
		"order;": "ℴ",
		Oslash: "Ø",
		oslash: "ø",
		Otilde: "Õ",
		otilde: "õ",
		"ovbar;": "⌽",
		"parsl;": "⫽",
		"phone;": "☎",
		"plusb;": "⊞",
		"pluse;": "⩲",
		plusmn: "±",
		"pound;": "£",
		"prcue;": "≼",
		"Prime;": "″",
		"prime;": "′",
		"prnap;": "⪹",
		"prsim;": "≾",
		"quest;": "?",
		"rAarr;": "⇛",
		"radic;": "√",
		"rangd;": "⦒",
		"range;": "⦥",
		"raquo;": "»",
		"rarrb;": "⇥",
		"rarrc;": "⤳",
		"rarrw;": "↝",
		"ratio;": "∶",
		"RBarr;": "⤐",
		"rBarr;": "⤏",
		"rbarr;": "⤍",
		"rbbrk;": "❳",
		"rbrke;": "⦌",
		"rceil;": "⌉",
		"rdquo;": "”",
		"reals;": "ℝ",
		"rhard;": "⇁",
		"rharu;": "⇀",
		"rlarr;": "⇄",
		"rlhar;": "⇌",
		"rnmid;": "⫮",
		"roang;": "⟭",
		"roarr;": "⇾",
		"robrk;": "⟧",
		"ropar;": "⦆",
		"rrarr;": "⇉",
		"rsquo;": "’",
		"rtrie;": "⊵",
		"rtrif;": "▸",
		"sbquo;": "‚",
		"sccue;": "≽",
		"Scirc;": "Ŝ",
		"scirc;": "ŝ",
		"scnap;": "⪺",
		"scsim;": "≿",
		"sdotb;": "⊡",
		"sdote;": "⩦",
		"seArr;": "⇘",
		"searr;": "↘",
		"setmn;": "∖",
		"sharp;": "♯",
		"Sigma;": "Σ",
		"sigma;": "σ",
		"simeq;": "≃",
		"simgE;": "⪠",
		"simlE;": "⪟",
		"simne;": "≆",
		"slarr;": "←",
		"smile;": "⌣",
		"smtes;": "⪬︀",
		"sqcap;": "⊓",
		"sqcup;": "⊔",
		"sqsub;": "⊏",
		"sqsup;": "⊐",
		"srarr;": "→",
		"starf;": "★",
		"strns;": "¯",
		"subnE;": "⫋",
		"subne;": "⊊",
		"supnE;": "⫌",
		"supne;": "⊋",
		"swArr;": "⇙",
		"swarr;": "↙",
		"szlig;": "ß",
		"Theta;": "Θ",
		"theta;": "θ",
		"thkap;": "≈",
		"THORN;": "Þ",
		"thorn;": "þ",
		"Tilde;": "∼",
		"tilde;": "˜",
		"times;": "×",
		"TRADE;": "™",
		"trade;": "™",
		"trisb;": "⧍",
		"TSHcy;": "Ћ",
		"tshcy;": "ћ",
		"twixt;": "≬",
		Uacute: "Ú",
		uacute: "ú",
		"Ubrcy;": "Ў",
		"ubrcy;": "ў",
		"Ucirc;": "Û",
		"ucirc;": "û",
		"udarr;": "⇅",
		"udhar;": "⥮",
		Ugrave: "Ù",
		ugrave: "ù",
		"uharl;": "↿",
		"uharr;": "↾",
		"uhblk;": "▀",
		"ultri;": "◸",
		"Umacr;": "Ū",
		"umacr;": "ū",
		"Union;": "⋃",
		"Uogon;": "Ų",
		"uogon;": "ų",
		"uplus;": "⊎",
		"upsih;": "ϒ",
		"UpTee;": "⊥",
		"Uring;": "Ů",
		"uring;": "ů",
		"urtri;": "◹",
		"utdot;": "⋰",
		"utrif;": "▴",
		"uuarr;": "⇈",
		"varpi;": "ϖ",
		"vBarv;": "⫩",
		"VDash;": "⊫",
		"Vdash;": "⊩",
		"vDash;": "⊨",
		"vdash;": "⊢",
		"veeeq;": "≚",
		"vltri;": "⊲",
		"vnsub;": "⊂⃒",
		"vnsup;": "⊃⃒",
		"vprop;": "∝",
		"vrtri;": "⊳",
		"Wcirc;": "Ŵ",
		"wcirc;": "ŵ",
		"Wedge;": "⋀",
		"wedge;": "∧",
		"xcirc;": "◯",
		"xdtri;": "▽",
		"xhArr;": "⟺",
		"xharr;": "⟷",
		"xlArr;": "⟸",
		"xlarr;": "⟵",
		"xodot;": "⨀",
		"xrArr;": "⟹",
		"xrarr;": "⟶",
		"xutri;": "△",
		Yacute: "Ý",
		yacute: "ý",
		"Ycirc;": "Ŷ",
		"ycirc;": "ŷ",
		"Aacute;": "Á",
		"aacute;": "á",
		"Abreve;": "Ă",
		"abreve;": "ă",
		"Agrave;": "À",
		"agrave;": "à",
		"andand;": "⩕",
		"angmsd;": "∡",
		"angsph;": "∢",
		"apacir;": "⩯",
		"approx;": "≈",
		"Assign;": "≔",
		"Atilde;": "Ã",
		"atilde;": "ã",
		"barvee;": "⊽",
		"Barwed;": "⌆",
		"barwed;": "⌅",
		"becaus;": "∵",
		"bernou;": "ℬ",
		"bigcap;": "⋂",
		"bigcup;": "⋃",
		"bigvee;": "⋁",
		"bkarow;": "⤍",
		"bottom;": "⊥",
		"bowtie;": "⋈",
		"boxbox;": "⧉",
		"bprime;": "‵",
		"brvbar;": "¦",
		"bullet;": "•",
		"Bumpeq;": "≎",
		"bumpeq;": "≏",
		"Cacute;": "Ć",
		"cacute;": "ć",
		"capand;": "⩄",
		"capcap;": "⩋",
		"capcup;": "⩇",
		"capdot;": "⩀",
		"Ccaron;": "Č",
		"ccaron;": "č",
		"Ccedil;": "Ç",
		"ccedil;": "ç",
		"circeq;": "≗",
		"cirmid;": "⫯",
		"Colone;": "⩴",
		"colone;": "≔",
		"commat;": "@",
		"compfn;": "∘",
		"Conint;": "∯",
		"conint;": "∮",
		"coprod;": "∐",
		"copysr;": "℗",
		"cularr;": "↶",
		"CupCap;": "≍",
		"cupcap;": "⩆",
		"cupcup;": "⩊",
		"cupdot;": "⊍",
		"curarr;": "↷",
		"curren;": "¤",
		"cylcty;": "⌭",
		"Dagger;": "‡",
		"dagger;": "†",
		"daleth;": "ℸ",
		"Dcaron;": "Ď",
		"dcaron;": "ď",
		"dfisht;": "⥿",
		"divide;": "÷",
		"divonx;": "⋇",
		"dlcorn;": "⌞",
		"dlcrop;": "⌍",
		"dollar;": "$",
		"DotDot;": "⃜",
		"drcorn;": "⌟",
		"drcrop;": "⌌",
		"Dstrok;": "Đ",
		"dstrok;": "đ",
		"Eacute;": "É",
		"eacute;": "é",
		"easter;": "⩮",
		"Ecaron;": "Ě",
		"ecaron;": "ě",
		"ecolon;": "≕",
		"Egrave;": "È",
		"egrave;": "è",
		"egsdot;": "⪘",
		"elsdot;": "⪗",
		"emptyv;": "∅",
		"emsp13;": " ",
		"emsp14;": " ",
		"eparsl;": "⧣",
		"eqcirc;": "≖",
		"equals;": "=",
		"equest;": "≟",
		"Exists;": "∃",
		"female;": "♀",
		"ffilig;": "ﬃ",
		"ffllig;": "ﬄ",
		"ForAll;": "∀",
		"forall;": "∀",
		"frac12;": "½",
		"frac13;": "⅓",
		"frac14;": "¼",
		"frac15;": "⅕",
		"frac16;": "⅙",
		"frac18;": "⅛",
		"frac23;": "⅔",
		"frac25;": "⅖",
		"frac34;": "¾",
		"frac35;": "⅗",
		"frac38;": "⅜",
		"frac45;": "⅘",
		"frac56;": "⅚",
		"frac58;": "⅝",
		"frac78;": "⅞",
		"gacute;": "ǵ",
		"Gammad;": "Ϝ",
		"gammad;": "ϝ",
		"Gbreve;": "Ğ",
		"gbreve;": "ğ",
		"Gcedil;": "Ģ",
		"gesdot;": "⪀",
		"gesles;": "⪔",
		"gtlPar;": "⦕",
		"gtrarr;": "⥸",
		"gtrdot;": "⋗",
		"gtrsim;": "≳",
		"hairsp;": " ",
		"hamilt;": "ℋ",
		"HARDcy;": "Ъ",
		"hardcy;": "ъ",
		"hearts;": "♥",
		"hellip;": "…",
		"hercon;": "⊹",
		"homtht;": "∻",
		"horbar;": "―",
		"hslash;": "ℏ",
		"Hstrok;": "Ħ",
		"hstrok;": "ħ",
		"hybull;": "⁃",
		"hyphen;": "‐",
		"Iacute;": "Í",
		"iacute;": "í",
		"Igrave;": "Ì",
		"igrave;": "ì",
		"iiiint;": "⨌",
		"iinfin;": "⧜",
		"incare;": "℅",
		"inodot;": "ı",
		"intcal;": "⊺",
		"iquest;": "¿",
		"isinsv;": "⋳",
		"Itilde;": "Ĩ",
		"itilde;": "ĩ",
		"Jsercy;": "Ј",
		"jsercy;": "ј",
		"kappav;": "ϰ",
		"Kcedil;": "Ķ",
		"kcedil;": "ķ",
		"kgreen;": "ĸ",
		"Lacute;": "Ĺ",
		"lacute;": "ĺ",
		"lagran;": "ℒ",
		"Lambda;": "Λ",
		"lambda;": "λ",
		"langle;": "⟨",
		"larrfs;": "⤝",
		"larrhk;": "↩",
		"larrlp;": "↫",
		"larrpl;": "⤹",
		"larrtl;": "↢",
		"lAtail;": "⤛",
		"latail;": "⤙",
		"lbrace;": "{",
		"lbrack;": "[",
		"Lcaron;": "Ľ",
		"lcaron;": "ľ",
		"Lcedil;": "Ļ",
		"lcedil;": "ļ",
		"ldquor;": "„",
		"lesdot;": "⩿",
		"lesges;": "⪓",
		"lfisht;": "⥼",
		"lfloor;": "⌊",
		"lharul;": "⥪",
		"llhard;": "⥫",
		"Lmidot;": "Ŀ",
		"lmidot;": "ŀ",
		"lmoust;": "⎰",
		"loplus;": "⨭",
		"lowast;": "∗",
		"lowbar;": "_",
		"lparlt;": "⦓",
		"lrhard;": "⥭",
		"lsaquo;": "‹",
		"lsquor;": "‚",
		"Lstrok;": "Ł",
		"lstrok;": "ł",
		"lthree;": "⋋",
		"ltimes;": "⋉",
		"ltlarr;": "⥶",
		"ltrPar;": "⦖",
		"mapsto;": "↦",
		"marker;": "▮",
		"mcomma;": "⨩",
		"midast;": "*",
		"midcir;": "⫰",
		"middot;": "·",
		"minusb;": "⊟",
		"minusd;": "∸",
		"mnplus;": "∓",
		"models;": "⊧",
		"mstpos;": "∾",
		"Nacute;": "Ń",
		"nacute;": "ń",
		"nbumpe;": "≏̸",
		"Ncaron;": "Ň",
		"ncaron;": "ň",
		"Ncedil;": "Ņ",
		"ncedil;": "ņ",
		"nearhk;": "⤤",
		"nequiv;": "≢",
		"nesear;": "⤨",
		"nexist;": "∄",
		"nltrie;": "⋬",
		"notinE;": "⋹̸",
		"nparsl;": "⫽⃥",
		"nprcue;": "⋠",
		"nrarrc;": "⤳̸",
		"nrarrw;": "↝̸",
		"nrtrie;": "⋭",
		"nsccue;": "⋡",
		"nsimeq;": "≄",
		"Ntilde;": "Ñ",
		"ntilde;": "ñ",
		"numero;": "№",
		"nVDash;": "⊯",
		"nVdash;": "⊮",
		"nvDash;": "⊭",
		"nvdash;": "⊬",
		"nvHarr;": "⤄",
		"nvlArr;": "⤂",
		"nvrArr;": "⤃",
		"nwarhk;": "⤣",
		"nwnear;": "⤧",
		"Oacute;": "Ó",
		"oacute;": "ó",
		"Odblac;": "Ő",
		"odblac;": "ő",
		"odsold;": "⦼",
		"Ograve;": "Ò",
		"ograve;": "ò",
		"ominus;": "⊖",
		"origof;": "⊶",
		"Oslash;": "Ø",
		"oslash;": "ø",
		"Otilde;": "Õ",
		"otilde;": "õ",
		"Otimes;": "⨷",
		"otimes;": "⊗",
		"parsim;": "⫳",
		"percnt;": "%",
		"period;": ".",
		"permil;": "‰",
		"phmmat;": "ℳ",
		"planck;": "ℏ",
		"plankv;": "ℏ",
		"plusdo;": "∔",
		"plusdu;": "⨥",
		"plusmn;": "±",
		"preceq;": "⪯",
		"primes;": "ℙ",
		"prnsim;": "⋨",
		"propto;": "∝",
		"prurel;": "⊰",
		"puncsp;": " ",
		"qprime;": "⁗",
		"Racute;": "Ŕ",
		"racute;": "ŕ",
		"rangle;": "⟩",
		"rarrap;": "⥵",
		"rarrfs;": "⤞",
		"rarrhk;": "↪",
		"rarrlp;": "↬",
		"rarrpl;": "⥅",
		"Rarrtl;": "⤖",
		"rarrtl;": "↣",
		"rAtail;": "⤜",
		"ratail;": "⤚",
		"rbrace;": "}",
		"rbrack;": "]",
		"Rcaron;": "Ř",
		"rcaron;": "ř",
		"Rcedil;": "Ŗ",
		"rcedil;": "ŗ",
		"rdquor;": "”",
		"rfisht;": "⥽",
		"rfloor;": "⌋",
		"rharul;": "⥬",
		"rmoust;": "⎱",
		"roplus;": "⨮",
		"rpargt;": "⦔",
		"rsaquo;": "›",
		"rsquor;": "’",
		"rthree;": "⋌",
		"rtimes;": "⋊",
		"Sacute;": "Ś",
		"sacute;": "ś",
		"Scaron;": "Š",
		"scaron;": "š",
		"Scedil;": "Ş",
		"scedil;": "ş",
		"scnsim;": "⋩",
		"searhk;": "⤥",
		"seswar;": "⤩",
		"sfrown;": "⌢",
		"SHCHcy;": "Щ",
		"shchcy;": "щ",
		"sigmaf;": "ς",
		"sigmav;": "ς",
		"simdot;": "⩪",
		"smashp;": "⨳",
		"SOFTcy;": "Ь",
		"softcy;": "ь",
		"solbar;": "⌿",
		"spades;": "♠",
		"sqcaps;": "⊓︀",
		"sqcups;": "⊔︀",
		"sqsube;": "⊑",
		"sqsupe;": "⊒",
		"Square;": "□",
		"square;": "□",
		"squarf;": "▪",
		"ssetmn;": "∖",
		"ssmile;": "⌣",
		"sstarf;": "⋆",
		"subdot;": "⪽",
		"Subset;": "⋐",
		"subset;": "⊂",
		"subsim;": "⫇",
		"subsub;": "⫕",
		"subsup;": "⫓",
		"succeq;": "⪰",
		"supdot;": "⪾",
		"Supset;": "⋑",
		"supset;": "⊃",
		"supsim;": "⫈",
		"supsub;": "⫔",
		"supsup;": "⫖",
		"swarhk;": "⤦",
		"swnwar;": "⤪",
		"target;": "⌖",
		"Tcaron;": "Ť",
		"tcaron;": "ť",
		"Tcedil;": "Ţ",
		"tcedil;": "ţ",
		"telrec;": "⌕",
		"there4;": "∴",
		"thetav;": "ϑ",
		"thinsp;": " ",
		"thksim;": "∼",
		"timesb;": "⊠",
		"timesd;": "⨰",
		"topbot;": "⌶",
		"topcir;": "⫱",
		"tprime;": "‴",
		"tridot;": "◬",
		"Tstrok;": "Ŧ",
		"tstrok;": "ŧ",
		"Uacute;": "Ú",
		"uacute;": "ú",
		"Ubreve;": "Ŭ",
		"ubreve;": "ŭ",
		"Udblac;": "Ű",
		"udblac;": "ű",
		"ufisht;": "⥾",
		"Ugrave;": "Ù",
		"ugrave;": "ù",
		"ulcorn;": "⌜",
		"ulcrop;": "⌏",
		"urcorn;": "⌝",
		"urcrop;": "⌎",
		"Utilde;": "Ũ",
		"utilde;": "ũ",
		"vangrt;": "⦜",
		"varphi;": "ϕ",
		"varrho;": "ϱ",
		"Vdashl;": "⫦",
		"veebar;": "⊻",
		"vellip;": "⋮",
		"Verbar;": "‖",
		"verbar;": "|",
		"vsubnE;": "⫋︀",
		"vsubne;": "⊊︀",
		"vsupnE;": "⫌︀",
		"vsupne;": "⊋︀",
		"Vvdash;": "⊪",
		"wedbar;": "⩟",
		"wedgeq;": "≙",
		"weierp;": "℘",
		"wreath;": "≀",
		"xoplus;": "⨁",
		"xotime;": "⨂",
		"xsqcup;": "⨆",
		"xuplus;": "⨄",
		"xwedge;": "⋀",
		"Yacute;": "Ý",
		"yacute;": "ý",
		"Zacute;": "Ź",
		"zacute;": "ź",
		"Zcaron;": "Ž",
		"zcaron;": "ž",
		"zeetrf;": "ℨ",
		"alefsym;": "ℵ",
		"angrtvb;": "⊾",
		"angzarr;": "⍼",
		"asympeq;": "≍",
		"backsim;": "∽",
		"Because;": "∵",
		"because;": "∵",
		"bemptyv;": "⦰",
		"between;": "≬",
		"bigcirc;": "◯",
		"bigodot;": "⨀",
		"bigstar;": "★",
		"bnequiv;": "≡⃥",
		"boxplus;": "⊞",
		"Cayleys;": "ℭ",
		"Cconint;": "∰",
		"ccupssm;": "⩐",
		"Cedilla;": "¸",
		"cemptyv;": "⦲",
		"cirscir;": "⧂",
		"coloneq;": "≔",
		"congdot;": "⩭",
		"cudarrl;": "⤸",
		"cudarrr;": "⤵",
		"cularrp;": "⤽",
		"curarrm;": "⤼",
		"dbkarow;": "⤏",
		"ddagger;": "‡",
		"ddotseq;": "⩷",
		"demptyv;": "⦱",
		"Diamond;": "⋄",
		"diamond;": "⋄",
		"digamma;": "ϝ",
		"dotplus;": "∔",
		"DownTee;": "⊤",
		"dwangle;": "⦦",
		"Element;": "∈",
		"Epsilon;": "Ε",
		"epsilon;": "ε",
		"eqcolon;": "≕",
		"equivDD;": "⩸",
		"gesdoto;": "⪂",
		"gtquest;": "⩼",
		"gtrless;": "≷",
		"harrcir;": "⥈",
		"Implies;": "⇒",
		"intprod;": "⨼",
		"isindot;": "⋵",
		"larrbfs;": "⤟",
		"larrsim;": "⥳",
		"lbrksld;": "⦏",
		"lbrkslu;": "⦍",
		"ldrdhar;": "⥧",
		"LeftTee;": "⊣",
		"lesdoto;": "⪁",
		"lessdot;": "⋖",
		"lessgtr;": "≶",
		"lesssim;": "≲",
		"lotimes;": "⨴",
		"lozenge;": "◊",
		"ltquest;": "⩻",
		"luruhar;": "⥦",
		"maltese;": "✠",
		"minusdu;": "⨪",
		"napprox;": "≉",
		"natural;": "♮",
		"nearrow;": "↗",
		"NewLine;": "\n",
		"nexists;": "∄",
		"NoBreak;": "⁠",
		"notinva;": "∉",
		"notinvb;": "⋷",
		"notinvc;": "⋶",
		"NotLess;": "≮",
		"notniva;": "∌",
		"notnivb;": "⋾",
		"notnivc;": "⋽",
		"npolint;": "⨔",
		"npreceq;": "⪯̸",
		"nsqsube;": "⋢",
		"nsqsupe;": "⋣",
		"nsubset;": "⊂⃒",
		"nsucceq;": "⪰̸",
		"nsupset;": "⊃⃒",
		"nvinfin;": "⧞",
		"nvltrie;": "⊴⃒",
		"nvrtrie;": "⊵⃒",
		"nwarrow;": "↖",
		"olcross;": "⦻",
		"Omicron;": "Ο",
		"omicron;": "ο",
		"orderof;": "ℴ",
		"orslope;": "⩗",
		"OverBar;": "‾",
		"pertenk;": "‱",
		"planckh;": "ℎ",
		"pluscir;": "⨢",
		"plussim;": "⨦",
		"plustwo;": "⨧",
		"precsim;": "≾",
		"Product;": "∏",
		"quatint;": "⨖",
		"questeq;": "≟",
		"rarrbfs;": "⤠",
		"rarrsim;": "⥴",
		"rbrksld;": "⦎",
		"rbrkslu;": "⦐",
		"rdldhar;": "⥩",
		"realine;": "ℛ",
		"rotimes;": "⨵",
		"ruluhar;": "⥨",
		"searrow;": "↘",
		"simplus;": "⨤",
		"simrarr;": "⥲",
		"subedot;": "⫃",
		"submult;": "⫁",
		"subplus;": "⪿",
		"subrarr;": "⥹",
		"succsim;": "≿",
		"supdsub;": "⫘",
		"supedot;": "⫄",
		"suphsol;": "⟉",
		"suphsub;": "⫗",
		"suplarr;": "⥻",
		"supmult;": "⫂",
		"supplus;": "⫀",
		"swarrow;": "↙",
		"topfork;": "⫚",
		"triplus;": "⨹",
		"tritime;": "⨻",
		"UpArrow;": "↑",
		"Uparrow;": "⇑",
		"uparrow;": "↑",
		"Upsilon;": "Υ",
		"upsilon;": "υ",
		"uwangle;": "⦧",
		"vzigzag;": "⦚",
		"zigrarr;": "⇝",
		"andslope;": "⩘",
		"angmsdaa;": "⦨",
		"angmsdab;": "⦩",
		"angmsdac;": "⦪",
		"angmsdad;": "⦫",
		"angmsdae;": "⦬",
		"angmsdaf;": "⦭",
		"angmsdag;": "⦮",
		"angmsdah;": "⦯",
		"angrtvbd;": "⦝",
		"approxeq;": "≊",
		"awconint;": "∳",
		"backcong;": "≌",
		"barwedge;": "⌅",
		"bbrktbrk;": "⎶",
		"bigoplus;": "⨁",
		"bigsqcup;": "⨆",
		"biguplus;": "⨄",
		"bigwedge;": "⋀",
		"boxminus;": "⊟",
		"boxtimes;": "⊠",
		"bsolhsub;": "⟈",
		"capbrcup;": "⩉",
		"circledR;": "®",
		"circledS;": "Ⓢ",
		"cirfnint;": "⨐",
		"clubsuit;": "♣",
		"cupbrcap;": "⩈",
		"curlyvee;": "⋎",
		"cwconint;": "∲",
		"DDotrahd;": "⤑",
		"doteqdot;": "≑",
		"DotEqual;": "≐",
		"dotminus;": "∸",
		"drbkarow;": "⤐",
		"dzigrarr;": "⟿",
		"elinters;": "⏧",
		"emptyset;": "∅",
		"eqvparsl;": "⧥",
		"fpartint;": "⨍",
		"geqslant;": "⩾",
		"gesdotol;": "⪄",
		"gnapprox;": "⪊",
		"hksearow;": "⤥",
		"hkswarow;": "⤦",
		"imagline;": "ℐ",
		"imagpart;": "ℑ",
		"infintie;": "⧝",
		"integers;": "ℤ",
		"Integral;": "∫",
		"intercal;": "⊺",
		"intlarhk;": "⨗",
		"laemptyv;": "⦴",
		"ldrushar;": "⥋",
		"leqslant;": "⩽",
		"lesdotor;": "⪃",
		"LessLess;": "⪡",
		"llcorner;": "⌞",
		"lnapprox;": "⪉",
		"lrcorner;": "⌟",
		"lurdshar;": "⥊",
		"mapstoup;": "↥",
		"multimap;": "⊸",
		"naturals;": "ℕ",
		"ncongdot;": "⩭̸",
		"NotEqual;": "≠",
		"notindot;": "⋵̸",
		"NotTilde;": "≁",
		"otimesas;": "⨶",
		"parallel;": "∥",
		"PartialD;": "∂",
		"plusacir;": "⨣",
		"pointint;": "⨕",
		"Precedes;": "≺",
		"precneqq;": "⪵",
		"precnsim;": "⋨",
		"profalar;": "⌮",
		"profline;": "⌒",
		"profsurf;": "⌓",
		"raemptyv;": "⦳",
		"realpart;": "ℜ",
		"RightTee;": "⊢",
		"rppolint;": "⨒",
		"rtriltri;": "⧎",
		"scpolint;": "⨓",
		"setminus;": "∖",
		"shortmid;": "∣",
		"smeparsl;": "⧤",
		"sqsubset;": "⊏",
		"sqsupset;": "⊐",
		"subseteq;": "⊆",
		"Succeeds;": "≻",
		"succneqq;": "⪶",
		"succnsim;": "⋩",
		"SuchThat;": "∋",
		"Superset;": "⊃",
		"supseteq;": "⊇",
		"thetasym;": "ϑ",
		"thicksim;": "∼",
		"timesbar;": "⨱",
		"triangle;": "▵",
		"triminus;": "⨺",
		"trpezium;": "⏢",
		"Uarrocir;": "⥉",
		"ulcorner;": "⌜",
		"UnderBar;": "_",
		"urcorner;": "⌝",
		"varkappa;": "ϰ",
		"varsigma;": "ς",
		"vartheta;": "ϑ",
		"backprime;": "‵",
		"backsimeq;": "⋍",
		"Backslash;": "∖",
		"bigotimes;": "⨂",
		"CenterDot;": "·",
		"centerdot;": "·",
		"checkmark;": "✓",
		"CircleDot;": "⊙",
		"complexes;": "ℂ",
		"Congruent;": "≡",
		"Coproduct;": "∐",
		"dotsquare;": "⊡",
		"DoubleDot;": "¨",
		"DownArrow;": "↓",
		"Downarrow;": "⇓",
		"downarrow;": "↓",
		"DownBreve;": "̑",
		"gtrapprox;": "⪆",
		"gtreqless;": "⋛",
		"gvertneqq;": "≩︀",
		"heartsuit;": "♥",
		"HumpEqual;": "≏",
		"LeftArrow;": "←",
		"Leftarrow;": "⇐",
		"leftarrow;": "←",
		"LeftFloor;": "⌊",
		"lesseqgtr;": "⋚",
		"LessTilde;": "≲",
		"lvertneqq;": "≨︀",
		"Mellintrf;": "ℳ",
		"MinusPlus;": "∓",
		"ngeqslant;": "⩾̸",
		"nleqslant;": "⩽̸",
		"NotCupCap;": "≭",
		"NotExists;": "∄",
		"NotSubset;": "⊂⃒",
		"nparallel;": "∦",
		"nshortmid;": "∤",
		"nsubseteq;": "⊈",
		"nsupseteq;": "⊉",
		"OverBrace;": "⏞",
		"pitchfork;": "⋔",
		"PlusMinus;": "±",
		"rationals;": "ℚ",
		"spadesuit;": "♠",
		"subseteqq;": "⫅",
		"subsetneq;": "⊊",
		"supseteqq;": "⫆",
		"supsetneq;": "⊋",
		"Therefore;": "∴",
		"therefore;": "∴",
		"ThinSpace;": " ",
		"triangleq;": "≜",
		"TripleDot;": "⃛",
		"UnionPlus;": "⊎",
		"varpropto;": "∝",
		"Bernoullis;": "ℬ",
		"circledast;": "⊛",
		"CirclePlus;": "⊕",
		"complement;": "∁",
		"curlywedge;": "⋏",
		"eqslantgtr;": "⪖",
		"EqualTilde;": "≂",
		"Fouriertrf;": "ℱ",
		"gtreqqless;": "⪌",
		"ImaginaryI;": "ⅈ",
		"Laplacetrf;": "ℒ",
		"LeftVector;": "↼",
		"lessapprox;": "⪅",
		"lesseqqgtr;": "⪋",
		"Lleftarrow;": "⇚",
		"lmoustache;": "⎰",
		"longmapsto;": "⟼",
		"mapstodown;": "↧",
		"mapstoleft;": "↤",
		"nLeftarrow;": "⇍",
		"nleftarrow;": "↚",
		"NotElement;": "∉",
		"NotGreater;": "≯",
		"nsubseteqq;": "⫅̸",
		"nsupseteqq;": "⫆̸",
		"precapprox;": "⪷",
		"Proportion;": "∷",
		"RightArrow;": "→",
		"Rightarrow;": "⇒",
		"rightarrow;": "→",
		"RightFloor;": "⌋",
		"rmoustache;": "⎱",
		"sqsubseteq;": "⊑",
		"sqsupseteq;": "⊒",
		"subsetneqq;": "⫋",
		"succapprox;": "⪸",
		"supsetneqq;": "⫌",
		"ThickSpace;": "  ",
		"TildeEqual;": "≃",
		"TildeTilde;": "≈",
		"UnderBrace;": "⏟",
		"UpArrowBar;": "⤒",
		"UpTeeArrow;": "↥",
		"upuparrows;": "⇈",
		"varepsilon;": "ϵ",
		"varnothing;": "∅",
		"backepsilon;": "϶",
		"blacksquare;": "▪",
		"circledcirc;": "⊚",
		"circleddash;": "⊝",
		"CircleMinus;": "⊖",
		"CircleTimes;": "⊗",
		"curlyeqprec;": "⋞",
		"curlyeqsucc;": "⋟",
		"diamondsuit;": "♦",
		"eqslantless;": "⪕",
		"Equilibrium;": "⇌",
		"expectation;": "ℰ",
		"GreaterLess;": "≷",
		"LeftCeiling;": "⌈",
		"LessGreater;": "≶",
		"MediumSpace;": " ",
		"NotLessLess;": "≪̸",
		"NotPrecedes;": "⊀",
		"NotSucceeds;": "⊁",
		"NotSuperset;": "⊃⃒",
		"nRightarrow;": "⇏",
		"nrightarrow;": "↛",
		"OverBracket;": "⎴",
		"preccurlyeq;": "≼",
		"precnapprox;": "⪹",
		"quaternions;": "ℍ",
		"RightVector;": "⇀",
		"Rrightarrow;": "⇛",
		"RuleDelayed;": "⧴",
		"SmallCircle;": "∘",
		"SquareUnion;": "⊔",
		"straightphi;": "ϕ",
		"SubsetEqual;": "⊆",
		"succcurlyeq;": "≽",
		"succnapprox;": "⪺",
		"thickapprox;": "≈",
		"UpDownArrow;": "↕",
		"Updownarrow;": "⇕",
		"updownarrow;": "↕",
		"VerticalBar;": "∣",
		"blacklozenge;": "⧫",
		"DownArrowBar;": "⤓",
		"DownTeeArrow;": "↧",
		"ExponentialE;": "ⅇ",
		"exponentiale;": "ⅇ",
		"GreaterEqual;": "≥",
		"GreaterTilde;": "≳",
		"HilbertSpace;": "ℋ",
		"HumpDownHump;": "≎",
		"Intersection;": "⋂",
		"LeftArrowBar;": "⇤",
		"LeftTeeArrow;": "↤",
		"LeftTriangle;": "⊲",
		"LeftUpVector;": "↿",
		"NotCongruent;": "≢",
		"NotHumpEqual;": "≏̸",
		"NotLessEqual;": "≰",
		"NotLessTilde;": "≴",
		"Proportional;": "∝",
		"RightCeiling;": "⌉",
		"risingdotseq;": "≓",
		"RoundImplies;": "⥰",
		"ShortUpArrow;": "↑",
		"SquareSubset;": "⊏",
		"triangledown;": "▿",
		"triangleleft;": "◃",
		"UnderBracket;": "⎵",
		"varsubsetneq;": "⊊︀",
		"varsupsetneq;": "⊋︀",
		"VerticalLine;": "|",
		"ApplyFunction;": "⁡",
		"bigtriangleup;": "△",
		"blacktriangle;": "▴",
		"DifferentialD;": "ⅆ",
		"divideontimes;": "⋇",
		"DoubleLeftTee;": "⫤",
		"DoubleUpArrow;": "⇑",
		"fallingdotseq;": "≒",
		"hookleftarrow;": "↩",
		"leftarrowtail;": "↢",
		"leftharpoonup;": "↼",
		"LeftTeeVector;": "⥚",
		"LeftVectorBar;": "⥒",
		"LessFullEqual;": "≦",
		"LongLeftArrow;": "⟵",
		"Longleftarrow;": "⟸",
		"longleftarrow;": "⟵",
		"looparrowleft;": "↫",
		"measuredangle;": "∡",
		"NotEqualTilde;": "≂̸",
		"NotTildeEqual;": "≄",
		"NotTildeTilde;": "≉",
		"ntriangleleft;": "⋪",
		"Poincareplane;": "ℌ",
		"PrecedesEqual;": "⪯",
		"PrecedesTilde;": "≾",
		"RightArrowBar;": "⇥",
		"RightTeeArrow;": "↦",
		"RightTriangle;": "⊳",
		"RightUpVector;": "↾",
		"shortparallel;": "∥",
		"smallsetminus;": "∖",
		"SucceedsEqual;": "⪰",
		"SucceedsTilde;": "≿",
		"SupersetEqual;": "⊇",
		"triangleright;": "▹",
		"UpEquilibrium;": "⥮",
		"upharpoonleft;": "↿",
		"varsubsetneqq;": "⫋︀",
		"varsupsetneqq;": "⫌︀",
		"VerticalTilde;": "≀",
		"VeryThinSpace;": " ",
		"curvearrowleft;": "↶",
		"DiacriticalDot;": "˙",
		"doublebarwedge;": "⌆",
		"DoubleRightTee;": "⊨",
		"downdownarrows;": "⇊",
		"DownLeftVector;": "↽",
		"GreaterGreater;": "⪢",
		"hookrightarrow;": "↪",
		"HorizontalLine;": "─",
		"InvisibleComma;": "⁣",
		"InvisibleTimes;": "⁢",
		"LeftDownVector;": "⇃",
		"leftleftarrows;": "⇇",
		"LeftRightArrow;": "↔",
		"Leftrightarrow;": "⇔",
		"leftrightarrow;": "↔",
		"leftthreetimes;": "⋋",
		"LessSlantEqual;": "⩽",
		"LongRightArrow;": "⟶",
		"Longrightarrow;": "⟹",
		"longrightarrow;": "⟶",
		"looparrowright;": "↬",
		"LowerLeftArrow;": "↙",
		"NestedLessLess;": "≪",
		"NotGreaterLess;": "≹",
		"NotLessGreater;": "≸",
		"NotSubsetEqual;": "⊈",
		"NotVerticalBar;": "∤",
		"nshortparallel;": "∦",
		"ntriangleright;": "⋫",
		"OpenCurlyQuote;": "‘",
		"ReverseElement;": "∋",
		"rightarrowtail;": "↣",
		"rightharpoonup;": "⇀",
		"RightTeeVector;": "⥛",
		"RightVectorBar;": "⥓",
		"ShortDownArrow;": "↓",
		"ShortLeftArrow;": "←",
		"SquareSuperset;": "⊐",
		"TildeFullEqual;": "≅",
		"trianglelefteq;": "⊴",
		"upharpoonright;": "↾",
		"UpperLeftArrow;": "↖",
		"ZeroWidthSpace;": "​",
		"bigtriangledown;": "▽",
		"circlearrowleft;": "↺",
		"CloseCurlyQuote;": "’",
		"ContourIntegral;": "∮",
		"curvearrowright;": "↷",
		"DoubleDownArrow;": "⇓",
		"DoubleLeftArrow;": "⇐",
		"downharpoonleft;": "⇃",
		"DownRightVector;": "⇁",
		"leftharpoondown;": "↽",
		"leftrightarrows;": "⇆",
		"LeftRightVector;": "⥎",
		"LeftTriangleBar;": "⧏",
		"LeftUpTeeVector;": "⥠",
		"LeftUpVectorBar;": "⥘",
		"LowerRightArrow;": "↘",
		"nLeftrightarrow;": "⇎",
		"nleftrightarrow;": "↮",
		"NotGreaterEqual;": "≱",
		"NotGreaterTilde;": "≵",
		"NotHumpDownHump;": "≎̸",
		"NotLeftTriangle;": "⋪",
		"NotSquareSubset;": "⊏̸",
		"ntrianglelefteq;": "⋬",
		"OverParenthesis;": "⏜",
		"RightDownVector;": "⇂",
		"rightleftarrows;": "⇄",
		"rightsquigarrow;": "↝",
		"rightthreetimes;": "⋌",
		"ShortRightArrow;": "→",
		"straightepsilon;": "ϵ",
		"trianglerighteq;": "⊵",
		"UpperRightArrow;": "↗",
		"vartriangleleft;": "⊲",
		"circlearrowright;": "↻",
		"DiacriticalAcute;": "´",
		"DiacriticalGrave;": "`",
		"DiacriticalTilde;": "˜",
		"DoubleRightArrow;": "⇒",
		"DownArrowUpArrow;": "⇵",
		"downharpoonright;": "⇂",
		"EmptySmallSquare;": "◻",
		"GreaterEqualLess;": "⋛",
		"GreaterFullEqual;": "≧",
		"LeftAngleBracket;": "⟨",
		"LeftUpDownVector;": "⥑",
		"LessEqualGreater;": "⋚",
		"NonBreakingSpace;": "\xA0",
		"NotPrecedesEqual;": "⪯̸",
		"NotRightTriangle;": "⋫",
		"NotSucceedsEqual;": "⪰̸",
		"NotSucceedsTilde;": "≿̸",
		"NotSupersetEqual;": "⊉",
		"ntrianglerighteq;": "⋭",
		"rightharpoondown;": "⇁",
		"rightrightarrows;": "⇉",
		"RightTriangleBar;": "⧐",
		"RightUpTeeVector;": "⥜",
		"RightUpVectorBar;": "⥔",
		"twoheadleftarrow;": "↞",
		"UnderParenthesis;": "⏝",
		"UpArrowDownArrow;": "⇅",
		"vartriangleright;": "⊳",
		"blacktriangledown;": "▾",
		"blacktriangleleft;": "◂",
		"DoubleUpDownArrow;": "⇕",
		"DoubleVerticalBar;": "∥",
		"DownLeftTeeVector;": "⥞",
		"DownLeftVectorBar;": "⥖",
		"FilledSmallSquare;": "◼",
		"GreaterSlantEqual;": "⩾",
		"LeftDoubleBracket;": "⟦",
		"LeftDownTeeVector;": "⥡",
		"LeftDownVectorBar;": "⥙",
		"leftrightharpoons;": "⇋",
		"LeftTriangleEqual;": "⊴",
		"NegativeThinSpace;": "​",
		"NotGreaterGreater;": "≫̸",
		"NotLessSlantEqual;": "⩽̸",
		"NotNestedLessLess;": "⪡̸",
		"NotReverseElement;": "∌",
		"NotSquareSuperset;": "⊐̸",
		"NotTildeFullEqual;": "≇",
		"RightAngleBracket;": "⟩",
		"rightleftharpoons;": "⇌",
		"RightUpDownVector;": "⥏",
		"SquareSubsetEqual;": "⊑",
		"twoheadrightarrow;": "↠",
		"VerticalSeparator;": "❘",
		"blacktriangleright;": "▸",
		"DownRightTeeVector;": "⥟",
		"DownRightVectorBar;": "⥗",
		"LongLeftRightArrow;": "⟷",
		"Longleftrightarrow;": "⟺",
		"longleftrightarrow;": "⟷",
		"NegativeThickSpace;": "​",
		"NotLeftTriangleBar;": "⧏̸",
		"PrecedesSlantEqual;": "≼",
		"ReverseEquilibrium;": "⇋",
		"RightDoubleBracket;": "⟧",
		"RightDownTeeVector;": "⥝",
		"RightDownVectorBar;": "⥕",
		"RightTriangleEqual;": "⊵",
		"SquareIntersection;": "⊓",
		"SucceedsSlantEqual;": "≽",
		"DoubleLongLeftArrow;": "⟸",
		"DownLeftRightVector;": "⥐",
		"LeftArrowRightArrow;": "⇆",
		"leftrightsquigarrow;": "↭",
		"NegativeMediumSpace;": "​",
		"NotGreaterFullEqual;": "≧̸",
		"NotRightTriangleBar;": "⧐̸",
		"RightArrowLeftArrow;": "⇄",
		"SquareSupersetEqual;": "⊒",
		"CapitalDifferentialD;": "ⅅ",
		"DoubleLeftRightArrow;": "⇔",
		"DoubleLongRightArrow;": "⟹",
		"EmptyVerySmallSquare;": "▫",
		"NestedGreaterGreater;": "≫",
		"NotDoubleVerticalBar;": "∦",
		"NotGreaterSlantEqual;": "⩾̸",
		"NotLeftTriangleEqual;": "⋬",
		"NotSquareSubsetEqual;": "⋢",
		"OpenCurlyDoubleQuote;": "“",
		"ReverseUpEquilibrium;": "⥯",
		"CloseCurlyDoubleQuote;": "”",
		"DoubleContourIntegral;": "∯",
		"FilledVerySmallSquare;": "▪",
		"NegativeVeryThinSpace;": "​",
		"NotPrecedesSlantEqual;": "⋠",
		"NotRightTriangleEqual;": "⋭",
		"NotSucceedsSlantEqual;": "⋡",
		"DiacriticalDoubleAcute;": "˝",
		"NotSquareSupersetEqual;": "⋣",
		"NotNestedGreaterGreater;": "⪢̸",
		"ClockwiseContourIntegral;": "∲",
		"DoubleLongLeftRightArrow;": "⟺",
		"CounterClockwiseContourIntegral;": "∳"
	};
	let maxCRNameLength;
	const decodeHtml = (rawText, asAttr) => {
		let offset = 0;
		const end = rawText.length;
		let decodedText = "";
		function advance(length) {
			offset += length;
			rawText = rawText.slice(length);
		}
		while (offset < end) {
			const head = /&(?:#x?)?/i.exec(rawText);
			if (!head || offset + head.index >= end) {
				const remaining = end - offset;
				decodedText += rawText.slice(0, remaining);
				advance(remaining);
				break;
			}
			decodedText += rawText.slice(0, head.index);
			advance(head.index);
			if (head[0] === "&") {
				let name = "";
				let value = void 0;
				if (/[0-9a-z]/i.test(rawText[1])) {
					if (!maxCRNameLength) maxCRNameLength = Object.keys(namedCharacterReferences).reduce((max$1, name$1) => Math.max(max$1, name$1.length), 0);
					for (let length = maxCRNameLength; !value && length > 0; --length) {
						name = rawText.substr(1, length);
						value = namedCharacterReferences[name];
					}
					if (value) {
						const semi = name.endsWith(";");
						if (asAttr && !semi && /[=a-z0-9]/i.test(rawText[name.length + 1] || "")) {
							decodedText += "&" + name;
							advance(1 + name.length);
						} else {
							decodedText += value;
							advance(1 + name.length);
						}
					} else {
						decodedText += "&" + name;
						advance(1 + name.length);
					}
				} else {
					decodedText += "&";
					advance(1);
				}
			} else {
				const hex$3 = head[0] === "&#x";
				const pattern = hex$3 ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;
				const body = pattern.exec(rawText);
				if (!body) {
					decodedText += head[0];
					advance(head[0].length);
				} else {
					let cp = Number.parseInt(body[1], hex$3 ? 16 : 10);
					if (cp === 0) cp = 65533;
					else if (cp > 1114111) cp = 65533;
					else if (cp >= 55296 && cp <= 57343) cp = 65533;
					else if (cp >= 64976 && cp <= 65007 || (cp & 65534) === 65534);
					else if (cp >= 1 && cp <= 8 || cp === 11 || cp >= 13 && cp <= 31 || cp >= 127 && cp <= 159) cp = CCR_REPLACEMENTS[cp] || cp;
					decodedText += String.fromCodePoint(cp);
					advance(body[0].length);
				}
			}
		}
		return decodedText;
	};
	const CCR_REPLACEMENTS = {
		128: 8364,
		130: 8218,
		131: 402,
		132: 8222,
		133: 8230,
		134: 8224,
		135: 8225,
		136: 710,
		137: 8240,
		138: 352,
		139: 8249,
		140: 338,
		142: 381,
		145: 8216,
		146: 8217,
		147: 8220,
		148: 8221,
		149: 8226,
		150: 8211,
		151: 8212,
		152: 732,
		153: 8482,
		154: 353,
		155: 8250,
		156: 339,
		158: 382,
		159: 376
	};
	const isRawTextContainer = /* @__PURE__ */ shared$2.makeMap("style,iframe,script,noscript", true);
	const parserOptions = {
		isVoidTag: shared$2.isVoidTag,
		isNativeTag: (tag$3) => shared$2.isHTMLTag(tag$3) || shared$2.isSVGTag(tag$3),
		isPreTag: (tag$3) => tag$3 === "pre",
		decodeEntities: decodeHtml,
		isBuiltInComponent: (tag$3) => {
			if (compilerCore$1.isBuiltInType(tag$3, `Transition`)) return TRANSITION;
			else if (compilerCore$1.isBuiltInType(tag$3, `TransitionGroup`)) return TRANSITION_GROUP;
		},
		getNamespace(tag$3, parent) {
			let ns = parent ? parent.ns : 0;
			if (parent && ns === 2) {
				if (parent.tag === "annotation-xml") {
					if (tag$3 === "svg") return 1;
					if (parent.props.some((a$1) => a$1.type === 6 && a$1.name === "encoding" && a$1.value != null && (a$1.value.content === "text/html" || a$1.value.content === "application/xhtml+xml"))) ns = 0;
				} else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag$3 !== "mglyph" && tag$3 !== "malignmark") ns = 0;
			} else if (parent && ns === 1) {
				if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") ns = 0;
			}
			if (ns === 0) {
				if (tag$3 === "svg") return 1;
				if (tag$3 === "math") return 2;
			}
			return ns;
		},
		getTextMode({ tag: tag$3, ns }) {
			if (ns === 0) {
				if (tag$3 === "textarea" || tag$3 === "title") return 1;
				if (isRawTextContainer(tag$3)) return 2;
			}
			return 0;
		}
	};
	const transformStyle = (node) => {
		if (node.type === 1) node.props.forEach((p$2, i$6) => {
			if (p$2.type === 6 && p$2.name === "style" && p$2.value) node.props[i$6] = {
				type: 7,
				name: `bind`,
				arg: compilerCore$1.createSimpleExpression(`style`, true, p$2.loc),
				exp: parseInlineCSS(p$2.value.content, p$2.loc),
				modifiers: [],
				loc: p$2.loc
			};
		});
	};
	const parseInlineCSS = (cssText, loc) => {
		const normalized = shared$2.parseStringStyle(cssText);
		return compilerCore$1.createSimpleExpression(
			JSON.stringify(normalized),
			false,
			loc,
			3
			/* CAN_STRINGIFY */
);
	};
	function createDOMCompilerError(code$1, loc) {
		return compilerCore$1.createCompilerError(code$1, loc, DOMErrorMessages);
	}
	const DOMErrorMessages = {
		[49]: `v-html is missing expression.`,
		[50]: `v-html will override element children.`,
		[51]: `v-text is missing expression.`,
		[52]: `v-text will override element children.`,
		[53]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
		[54]: `v-model argument is not supported on plain elements.`,
		[55]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
		[56]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
		[57]: `v-show is missing expression.`,
		[58]: `<Transition> expects exactly one child element or component.`,
		[59]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
	};
	const transformVHtml = (dir, node, context) => {
		const { exp: exp$1, loc } = dir;
		if (!exp$1) context.onError(createDOMCompilerError(49, loc));
		if (node.children.length) {
			context.onError(createDOMCompilerError(50, loc));
			node.children.length = 0;
		}
		return { props: [compilerCore$1.createObjectProperty(compilerCore$1.createSimpleExpression(`innerHTML`, true, loc), exp$1 || compilerCore$1.createSimpleExpression("", true))] };
	};
	const transformVText = (dir, node, context) => {
		const { exp: exp$1, loc } = dir;
		if (!exp$1) context.onError(createDOMCompilerError(51, loc));
		if (node.children.length) {
			context.onError(createDOMCompilerError(52, loc));
			node.children.length = 0;
		}
		return { props: [compilerCore$1.createObjectProperty(compilerCore$1.createSimpleExpression(`textContent`, true), exp$1 ? compilerCore$1.createCallExpression(context.helperString(compilerCore$1.TO_DISPLAY_STRING), [exp$1], loc) : compilerCore$1.createSimpleExpression("", true))] };
	};
	const transformModel = (dir, node, context) => {
		const baseResult = compilerCore$1.transformModel(dir, node, context);
		if (!baseResult.props.length || node.tagType === 1) return baseResult;
		if (dir.arg) context.onError(createDOMCompilerError(54, dir.arg.loc));
		const { tag: tag$3 } = node;
		const isCustomElement = context.isCustomElement(tag$3);
		if (tag$3 === "input" || tag$3 === "textarea" || tag$3 === "select" || isCustomElement) {
			let directiveToUse = V_MODEL_TEXT;
			let isInvalidType = false;
			if (tag$3 === "input" || isCustomElement) {
				const type = compilerCore$1.findProp(node, `type`);
				if (type) {
					if (type.type === 7) directiveToUse = V_MODEL_DYNAMIC;
					else if (type.value) switch (type.value.content) {
						case "radio":
							directiveToUse = V_MODEL_RADIO;
							break;
						case "checkbox":
							directiveToUse = V_MODEL_CHECKBOX;
							break;
						case "file":
							isInvalidType = true;
							context.onError(createDOMCompilerError(55, dir.loc));
							break;
					}
				} else if (compilerCore$1.hasDynamicKeyVBind(node)) directiveToUse = V_MODEL_DYNAMIC;
			} else if (tag$3 === "select") directiveToUse = V_MODEL_SELECT;
			if (!isInvalidType) baseResult.needRuntime = context.helper(directiveToUse);
		} else context.onError(createDOMCompilerError(53, dir.loc));
		baseResult.props = baseResult.props.filter((p$2) => !(p$2.key.type === 4 && p$2.key.content === "modelValue"));
		return baseResult;
	};
	const isEventOptionModifier = /* @__PURE__ */ shared$2.makeMap(`passive,once,capture`);
	const isNonKeyModifier = /* @__PURE__ */ shared$2.makeMap(
		// event propagation management
		"stop,prevent,self,ctrl,shift,alt,meta,exact,middle"
);
	const maybeKeyModifier = /* @__PURE__ */ shared$2.makeMap("left,right");
	const isKeyboardEvent = /* @__PURE__ */ shared$2.makeMap(`onkeyup,onkeydown,onkeypress`, true);
	const resolveModifiers = (key, modifiers) => {
		const keyModifiers = [];
		const nonKeyModifiers = [];
		const eventOptionModifiers = [];
		for (let i$6 = 0; i$6 < modifiers.length; i$6++) {
			const modifier = modifiers[i$6];
			if (isEventOptionModifier(modifier)) eventOptionModifiers.push(modifier);
			else if (maybeKeyModifier(modifier)) if (compilerCore$1.isStaticExp(key)) if (isKeyboardEvent(key.content)) keyModifiers.push(modifier);
			else nonKeyModifiers.push(modifier);
			else {
				keyModifiers.push(modifier);
				nonKeyModifiers.push(modifier);
			}
			else if (isNonKeyModifier(modifier)) nonKeyModifiers.push(modifier);
			else keyModifiers.push(modifier);
		}
		return {
			keyModifiers,
			nonKeyModifiers,
			eventOptionModifiers
		};
	};
	const transformClick = (key, event) => {
		const isStaticClick = compilerCore$1.isStaticExp(key) && key.content.toLowerCase() === "onclick";
		return isStaticClick ? compilerCore$1.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore$1.createCompoundExpression([
			`(`,
			key,
			`) === "onClick" ? "${event}" : (`,
			key,
			`)`
		]) : key;
	};
	const transformOn = (dir, node, context) => {
		return compilerCore$1.transformOn(dir, node, context, (baseResult) => {
			const { modifiers } = dir;
			if (!modifiers.length) return baseResult;
			let { key, value: handlerExp } = baseResult.props[0];
			const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers);
			if (nonKeyModifiers.includes("right")) key = transformClick(key, `onContextmenu`);
			if (nonKeyModifiers.includes("middle")) key = transformClick(key, `onMouseup`);
			if (nonKeyModifiers.length) handlerExp = compilerCore$1.createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [handlerExp, JSON.stringify(nonKeyModifiers)]);
			if (keyModifiers.length && (!compilerCore$1.isStaticExp(key) || isKeyboardEvent(key.content))) handlerExp = compilerCore$1.createCallExpression(context.helper(V_ON_WITH_KEYS), [handlerExp, JSON.stringify(keyModifiers)]);
			if (eventOptionModifiers.length) {
				const modifierPostfix = eventOptionModifiers.map(shared$2.capitalize).join("");
				key = compilerCore$1.isStaticExp(key) ? compilerCore$1.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore$1.createCompoundExpression([
					`(`,
					key,
					`) + "${modifierPostfix}"`
				]);
			}
			return { props: [compilerCore$1.createObjectProperty(key, handlerExp)] };
		});
	};
	const transformShow = (dir, node, context) => {
		const { exp: exp$1, loc } = dir;
		if (!exp$1) context.onError(createDOMCompilerError(57, loc));
		return {
			props: [],
			needRuntime: context.helper(V_SHOW)
		};
	};
	/**
	
	* This module is Node-only.
	
	*/
	/**
	
	* Turn eligible hoisted static trees into stringified static nodes, e.g.
	
	*
	
	* ```js
	
	* const _hoisted_1 = createStaticVNode(`<div class="foo">bar</div>`)
	
	* ```
	
	*
	
	* A single static vnode can contain stringified content for **multiple**
	
	* consecutive nodes (element and plain text), called a "chunk".
	
	* `@vue/runtime-dom` will create the content via innerHTML in a hidden
	
	* container element and insert all the nodes in place. The call must also
	
	* provide the number of nodes contained in the chunk so that during hydration
	
	* we can know how many nodes the static vnode should adopt.
	
	*
	
	* The optimization scans a children list that contains hoisted nodes, and
	
	* tries to find the largest chunk of consecutive hoisted nodes before running
	
	* into a non-hoisted node or the end of the list. A chunk is then converted
	
	* into a single static vnode and replaces the hoisted expression of the first
	
	* node in the chunk. Other nodes in the chunk are considered "merged" and
	
	* therefore removed from both the hoist list and the children array.
	
	*
	
	* This optimization is only performed in Node.js.
	
	*/
	const stringifyStatic = (children, context, parent) => {
		if (parent.type === 1 && (parent.tagType === 1 || parent.tagType === 3)) return;
		let nc = 0;
		let ec = 0;
		const currentChunk = [];
		const stringifyCurrentChunk = (currentIndex) => {
			if (nc >= 20 || ec >= 5) {
				const staticCall = compilerCore$1.createCallExpression(context.helper(compilerCore$1.CREATE_STATIC), [JSON.stringify(currentChunk.map((node) => stringifyNode$1(node, context)).join("")), String(currentChunk.length)]);
				replaceHoist(currentChunk[0], staticCall, context);
				if (currentChunk.length > 1) {
					for (let i$7 = 1; i$7 < currentChunk.length; i$7++) replaceHoist(currentChunk[i$7], null, context);
					const deleteCount = currentChunk.length - 1;
					children.splice(currentIndex - currentChunk.length + 1, deleteCount);
					return deleteCount;
				}
			}
			return 0;
		};
		let i$6 = 0;
		for (; i$6 < children.length; i$6++) {
			const child = children[i$6];
			const hoisted = getHoistedNode(child);
			if (hoisted) {
				const node = child;
				const result = analyzeNode(node);
				if (result) {
					nc += result[0];
					ec += result[1];
					currentChunk.push(node);
					continue;
				}
			}
			i$6 -= stringifyCurrentChunk(i$6);
			nc = 0;
			ec = 0;
			currentChunk.length = 0;
		}
		stringifyCurrentChunk(i$6);
	};
	const getHoistedNode = (node) => (node.type === 1 && node.tagType === 0 || node.type == 12) && node.codegenNode && node.codegenNode.type === 4 && node.codegenNode.hoisted;
	const dataAriaRE = /^(data|aria)-/;
	const isStringifiableAttr = (name) => {
		return shared$2.isKnownAttr(name) || dataAriaRE.test(name);
	};
	const replaceHoist = (node, replacement, context) => {
		const hoistToReplace = node.codegenNode.hoisted;
		context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;
	};
	const isNonStringifiable = /* @__PURE__ */ shared$2.makeMap(`caption,thead,tr,th,tbody,td,tfoot,colgroup,col`);
	/**
	
	* for a hoisted node, analyze it and return:
	
	* - false: bailed (contains runtime constant)
	
	* - [nc, ec] where
	
	*   - nc is the number of nodes inside
	
	*   - ec is the number of element with bindings inside
	
	*/
	function analyzeNode(node) {
		if (node.type === 1 && isNonStringifiable(node.tag)) return false;
		if (node.type === 12) return [1, 0];
		let nc = 1;
		let ec = node.props.length > 0 ? 1 : 0;
		let bailed = false;
		const bail = () => {
			bailed = true;
			return false;
		};
		function walk$2(node$1) {
			for (let i$6 = 0; i$6 < node$1.props.length; i$6++) {
				const p$2 = node$1.props[i$6];
				if (p$2.type === 6 && !isStringifiableAttr(p$2.name)) return bail();
				if (p$2.type === 7 && p$2.name === "bind") {
					if (p$2.arg && (p$2.arg.type === 8 || p$2.arg.isStatic && !isStringifiableAttr(p$2.arg.content))) return bail();
				}
			}
			for (let i$6 = 0; i$6 < node$1.children.length; i$6++) {
				nc++;
				const child = node$1.children[i$6];
				if (child.type === 1) {
					if (child.props.length > 0) ec++;
					walk$2(child);
					if (bailed) return false;
				}
			}
			return true;
		}
		return walk$2(node) ? [nc, ec] : false;
	}
	function stringifyNode$1(node, context) {
		if (shared$2.isString(node)) return node;
		if (shared$2.isSymbol(node)) return ``;
		switch (node.type) {
			case 1: return stringifyElement(node, context);
			case 2: return shared$2.escapeHtml(node.content);
			case 3: return `<!--${shared$2.escapeHtml(node.content)}-->`;
			case 5: return shared$2.escapeHtml(shared$2.toDisplayString(evaluateConstant(node.content)));
			case 8: return shared$2.escapeHtml(evaluateConstant(node));
			case 12: return stringifyNode$1(node.content, context);
			default: return "";
		}
	}
	function stringifyElement(node, context) {
		let res = `<${node.tag}`;
		for (let i$6 = 0; i$6 < node.props.length; i$6++) {
			const p$2 = node.props[i$6];
			if (p$2.type === 6) {
				res += ` ${p$2.name}`;
				if (p$2.value) res += `="${shared$2.escapeHtml(p$2.value.content)}"`;
			} else if (p$2.type === 7 && p$2.name === "bind") {
				let evaluated = evaluateConstant(p$2.exp);
				const arg = p$2.arg && p$2.arg.content;
				if (arg === "class") evaluated = shared$2.normalizeClass(evaluated);
				else if (arg === "style") evaluated = shared$2.stringifyStyle(shared$2.normalizeStyle(evaluated));
				res += ` ${p$2.arg.content}="${shared$2.escapeHtml(evaluated)}"`;
			}
		}
		if (context.scopeId) res += ` ${context.scopeId}`;
		res += `>`;
		for (let i$6 = 0; i$6 < node.children.length; i$6++) res += stringifyNode$1(node.children[i$6], context);
		if (!shared$2.isVoidTag(node.tag)) res += `</${node.tag}>`;
		return res;
	}
	function evaluateConstant(exp$1) {
		if (exp$1.type === 4) return new Function(`return ${exp$1.content}`)();
		else {
			let res = ``;
			exp$1.children.forEach((c$2) => {
				if (shared$2.isString(c$2) || shared$2.isSymbol(c$2)) return;
				if (c$2.type === 2) res += c$2.content;
				else if (c$2.type === 5) res += shared$2.toDisplayString(evaluateConstant(c$2.content));
				else res += evaluateConstant(c$2);
			});
			return res;
		}
	}
	const ignoreSideEffectTags = (node, context) => {
		if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
			context.onError(createDOMCompilerError(59, node.loc));
			context.removeNode();
		}
	};
	const DOMNodeTransforms = [transformStyle, ...[]];
	const DOMDirectiveTransforms = {
		cloak: compilerCore$1.noopDirectiveTransform,
		html: transformVHtml,
		text: transformVText,
		model: transformModel,
		on: transformOn,
		show: transformShow
	};
	function compile$2(template$1, options = {}) {
		return compilerCore$1.baseCompile(template$1, shared$2.extend({}, parserOptions, options, {
			nodeTransforms: [
				ignoreSideEffectTags,
				...DOMNodeTransforms,
				...options.nodeTransforms || []
			],
			directiveTransforms: shared$2.extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
			transformHoist: stringifyStatic
		}));
	}
	function parse$7(template$1, options = {}) {
		return compilerCore$1.baseParse(template$1, shared$2.extend({}, parserOptions, options));
	}
	Object.keys(compilerCore$1).forEach(function(k$1) {
		if (k$1 !== "default") exports[k$1] = compilerCore$1[k$1];
	});
	exports.DOMDirectiveTransforms = DOMDirectiveTransforms;
	exports.DOMNodeTransforms = DOMNodeTransforms;
	exports.TRANSITION = TRANSITION;
	exports.TRANSITION_GROUP = TRANSITION_GROUP;
	exports.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX;
	exports.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC;
	exports.V_MODEL_RADIO = V_MODEL_RADIO;
	exports.V_MODEL_SELECT = V_MODEL_SELECT;
	exports.V_MODEL_TEXT = V_MODEL_TEXT;
	exports.V_ON_WITH_KEYS = V_ON_WITH_KEYS;
	exports.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS;
	exports.V_SHOW = V_SHOW;
	exports.compile = compile$2;
	exports.createDOMCompilerError = createDOMCompilerError;
	exports.parse = parse$7;
	exports.parserOptions = parserOptions;
	exports.transformStyle = transformStyle;
} });

//#endregion
//#region node_modules/@vue/compiler-dom/index.js
var require_compiler_dom = __commonJS({ "node_modules/@vue/compiler-dom/index.js"(exports, module) {
	module.exports = require_compiler_dom_cjs_prod();
} });

//#endregion
//#region node_modules/hash-sum/hash-sum.js
var require_hash_sum = __commonJS({ "node_modules/hash-sum/hash-sum.js"(exports, module) {
	function pad(hash$2, len) {
		while (hash$2.length < len) hash$2 = "0" + hash$2;
		return hash$2;
	}
	function fold(hash$2, text) {
		var i$6;
		var chr;
		var len;
		if (text.length === 0) return hash$2;
		for (i$6 = 0, len = text.length; i$6 < len; i$6++) {
			chr = text.charCodeAt(i$6);
			hash$2 = (hash$2 << 5) - hash$2 + chr;
			hash$2 |= 0;
		}
		return hash$2 < 0 ? hash$2 * -2 : hash$2;
	}
	function foldObject(hash$2, o$2, seen$1) {
		return Object.keys(o$2).sort().reduce(foldKey, hash$2);
		function foldKey(hash$3, key) {
			return foldValue(hash$3, o$2[key], key, seen$1);
		}
	}
	function foldValue(input, value, key, seen$1) {
		var hash$2 = fold(fold(fold(input, key), toString$4(value)), typeof value);
		if (value === null) return fold(hash$2, "null");
		if (value === void 0) return fold(hash$2, "undefined");
		if (typeof value === "object" || typeof value === "function") {
			if (seen$1.indexOf(value) !== -1) return fold(hash$2, "[Circular]" + key);
			seen$1.push(value);
			var objHash = foldObject(hash$2, value, seen$1);
			if (!("valueOf" in value) || typeof value.valueOf !== "function") return objHash;
			try {
				return fold(objHash, String(value.valueOf()));
			} catch (err) {
				return fold(objHash, "[valueOf exception]" + (err.stack || err.message));
			}
		}
		return fold(hash$2, value.toString());
	}
	function toString$4(o$2) {
		return Object.prototype.toString.call(o$2);
	}
	function sum(o$2) {
		return pad(foldValue(0, o$2, "", []).toString(16), 8);
	}
	module.exports = sum;
} });

//#endregion
//#region node_modules/@vue/compiler-ssr/dist/compiler-ssr.cjs.js
var require_compiler_ssr_cjs = __commonJS({ "node_modules/@vue/compiler-ssr/dist/compiler-ssr.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var compilerDom = require_compiler_dom();
	var shared$1 = require_shared();
	const SSR_INTERPOLATE = Symbol(`ssrInterpolate`);
	const SSR_RENDER_VNODE = Symbol(`ssrRenderVNode`);
	const SSR_RENDER_COMPONENT = Symbol(`ssrRenderComponent`);
	const SSR_RENDER_SLOT = Symbol(`ssrRenderSlot`);
	const SSR_RENDER_CLASS = Symbol(`ssrRenderClass`);
	const SSR_RENDER_STYLE = Symbol(`ssrRenderStyle`);
	const SSR_RENDER_ATTRS = Symbol(`ssrRenderAttrs`);
	const SSR_RENDER_ATTR = Symbol(`ssrRenderAttr`);
	const SSR_RENDER_DYNAMIC_ATTR = Symbol(`ssrRenderDynamicAttr`);
	const SSR_RENDER_LIST = Symbol(`ssrRenderList`);
	const SSR_LOOSE_EQUAL = Symbol(`ssrLooseEqual`);
	const SSR_LOOSE_CONTAIN = Symbol(`ssrLooseContain`);
	const SSR_RENDER_DYNAMIC_MODEL = Symbol(`ssrRenderDynamicModel`);
	const SSR_GET_DYNAMIC_MODEL_PROPS = Symbol(`ssrGetDynamicModelProps`);
	const SSR_RENDER_TELEPORT = Symbol(`ssrRenderTeleport`);
	const SSR_RENDER_SUSPENSE = Symbol(`ssrRenderSuspense`);
	const ssrHelpers = {
		[SSR_INTERPOLATE]: `ssrInterpolate`,
		[SSR_RENDER_VNODE]: `ssrRenderVNode`,
		[SSR_RENDER_COMPONENT]: `ssrRenderComponent`,
		[SSR_RENDER_SLOT]: `ssrRenderSlot`,
		[SSR_RENDER_CLASS]: `ssrRenderClass`,
		[SSR_RENDER_STYLE]: `ssrRenderStyle`,
		[SSR_RENDER_ATTRS]: `ssrRenderAttrs`,
		[SSR_RENDER_ATTR]: `ssrRenderAttr`,
		[SSR_RENDER_DYNAMIC_ATTR]: `ssrRenderDynamicAttr`,
		[SSR_RENDER_LIST]: `ssrRenderList`,
		[SSR_LOOSE_EQUAL]: `ssrLooseEqual`,
		[SSR_LOOSE_CONTAIN]: `ssrLooseContain`,
		[SSR_RENDER_DYNAMIC_MODEL]: `ssrRenderDynamicModel`,
		[SSR_GET_DYNAMIC_MODEL_PROPS]: `ssrGetDynamicModelProps`,
		[SSR_RENDER_TELEPORT]: `ssrRenderTeleport`,
		[SSR_RENDER_SUSPENSE]: `ssrRenderSuspense`
	};
	compilerDom.registerRuntimeHelpers(ssrHelpers);
	const ssrTransformIf = compilerDom.createStructuralDirectiveTransform(/^(if|else|else-if)$/, compilerDom.processIf);
	function ssrProcessIf(node, context, disableNestedFragments = false) {
		const [rootBranch] = node.branches;
		const ifStatement$1 = compilerDom.createIfStatement(rootBranch.condition, processIfBranch(rootBranch, context, disableNestedFragments));
		context.pushStatement(ifStatement$1);
		let currentIf = ifStatement$1;
		for (let i$6 = 1; i$6 < node.branches.length; i$6++) {
			const branch = node.branches[i$6];
			const branchBlockStatement = processIfBranch(branch, context, disableNestedFragments);
			if (branch.condition) currentIf = currentIf.alternate = compilerDom.createIfStatement(branch.condition, branchBlockStatement);
			else currentIf.alternate = branchBlockStatement;
		}
		if (!currentIf.alternate) currentIf.alternate = compilerDom.createBlockStatement([compilerDom.createCallExpression(`_push`, ["`<!---->`"])]);
	}
	function processIfBranch(branch, context, disableNestedFragments = false) {
		const { children } = branch;
		const needFragmentWrapper = !disableNestedFragments && (children.length !== 1 || children[0].type !== 1) && !(children.length === 1 && children[0].type === 11);
		return processChildrenAsStatement(children, context, needFragmentWrapper);
	}
	const ssrTransformFor = compilerDom.createStructuralDirectiveTransform("for", compilerDom.processFor);
	function ssrProcessFor(node, context, disableNestedFragments = false) {
		const needFragmentWrapper = !disableNestedFragments && (node.children.length !== 1 || node.children[0].type !== 1);
		const renderLoop = compilerDom.createFunctionExpression(compilerDom.createForLoopParams(node.parseResult));
		renderLoop.body = processChildrenAsStatement(node.children, context, needFragmentWrapper);
		if (!disableNestedFragments) context.pushStringPart(`<!--[-->`);
		context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_LIST), [node.source, renderLoop]));
		if (!disableNestedFragments) context.pushStringPart(`<!--]-->`);
	}
	const ssrTransformSlotOutlet = (node, context) => {
		if (compilerDom.isSlotOutlet(node)) {
			const { slotName, slotProps } = compilerDom.processSlotOutlet(node, context);
			node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_SLOT), [
				`_ctx.$slots`,
				slotName,
				slotProps || `{}`,
				`null`,
				`_push`,
				`_parent`
			]);
		}
	};
	function ssrProcessSlotOutlet(node, context) {
		const renderCall = node.ssrCodegenNode;
		if (node.children.length) {
			const fallbackRenderFn = compilerDom.createFunctionExpression([]);
			fallbackRenderFn.body = processChildrenAsStatement(node.children, context);
			renderCall.arguments[3] = fallbackRenderFn;
		}
		context.pushStatement(node.ssrCodegenNode);
	}
	function createSSRCompilerError(code$1, loc) {
		return compilerDom.createCompilerError(code$1, loc, SSRErrorMessages);
	}
	const SSRErrorMessages = {
		[60]: `Custom directive is missing corresponding SSR transform and will be ignored.`,
		[61]: `Unsafe attribute name for SSR.`,
		[62]: `Missing the 'to' prop on teleport element.`,
		[63]: `Invalid AST node during SSR transform.`
	};
	function ssrProcessTeleport(node, context) {
		const targetProp = compilerDom.findProp(node, "to");
		if (!targetProp) {
			context.onError(createSSRCompilerError(62, node.loc));
			return;
		}
		let target;
		if (targetProp.type === 6) target = targetProp.value && compilerDom.createSimpleExpression(targetProp.value.content, true);
		else target = targetProp.exp;
		if (!target) {
			context.onError(createSSRCompilerError(62, targetProp.loc));
			return;
		}
		const disabledProp = compilerDom.findProp(
			node,
			"disabled",
			false,
			true
			/* allow empty */
);
		const disabled = disabledProp ? disabledProp.type === 6 ? `true` : disabledProp.exp || `false` : `false`;
		const contentRenderFn = compilerDom.createFunctionExpression([`_push`], void 0, true, false, node.loc);
		contentRenderFn.body = processChildrenAsStatement(node.children, context);
		context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_TELEPORT), [
			`_push`,
			contentRenderFn,
			target,
			disabled,
			`_parent`
		]));
	}
	const wipMap = new WeakMap();
	function ssrTransformSuspense(node, context) {
		return () => {
			if (node.children.length) {
				const wipEntry = {
					slotsExp: null,
					wipSlots: []
				};
				wipMap.set(node, wipEntry);
				wipEntry.slotsExp = compilerDom.buildSlots(node, context, (_props, children, loc) => {
					const fn = compilerDom.createFunctionExpression([], void 0, true, false, loc);
					wipEntry.wipSlots.push({
						fn,
						children
					});
					return fn;
				}).slots;
			}
		};
	}
	function ssrProcessSuspense(node, context) {
		const wipEntry = wipMap.get(node);
		if (!wipEntry) return;
		const { slotsExp, wipSlots } = wipEntry;
		for (let i$6 = 0; i$6 < wipSlots.length; i$6++) {
			const { fn, children } = wipSlots[i$6];
			fn.body = processChildrenAsStatement(children, context);
		}
		context.pushStatement(compilerDom.createCallExpression(context.helper(SSR_RENDER_SUSPENSE), [`_push`, slotsExp]));
	}
	function ssrProcessTransitionGroup(node, context) {
		const tag$3 = compilerDom.findProp(node, "tag");
		if (tag$3) if (tag$3.type === 7) {
			context.pushStringPart(`<`);
			context.pushStringPart(tag$3.exp);
			context.pushStringPart(`>`);
			processChildren(
				node.children,
				context,
				false,
				/**
				
				* TransitionGroup has the special runtime behavior of flattening and
				
				* concatenating all children into a single fragment (in order for them to
				
				* be pathced using the same key map) so we need to account for that here
				
				* by disabling nested fragment wrappers from being generated.
				
				*/
				true
);
			context.pushStringPart(`</`);
			context.pushStringPart(tag$3.exp);
			context.pushStringPart(`>`);
		} else {
			context.pushStringPart(`<${tag$3.value.content}>`);
			processChildren(node.children, context, false, true);
			context.pushStringPart(`</${tag$3.value.content}>`);
		}
		else processChildren(node.children, context, true, true);
	}
	const wipMap$1 = new WeakMap();
	const componentTypeMap = new WeakMap();
	const ssrTransformComponent = (node, context) => {
		if (node.type !== 1 || node.tagType !== 1) return;
		const component = compilerDom.resolveComponentType(
			node,
			context,
			true
			/* ssr */
);
		componentTypeMap.set(node, component);
		if (shared$1.isSymbol(component)) {
			if (component === compilerDom.SUSPENSE) return ssrTransformSuspense(node, context);
			return;
		}
		const vnodeBranches = [];
		const clonedNode = clone$1(node);
		return function ssrPostTransformComponent() {
			if (clonedNode.children.length) compilerDom.buildSlots(clonedNode, context, (props$1, children) => {
				vnodeBranches.push(createVNodeSlotBranch(props$1, children, context));
				return compilerDom.createFunctionExpression(void 0);
			});
			const props = node.props.length > 0 ? compilerDom.buildProps(node, context).props || `null` : `null`;
			const wipEntries = [];
			wipMap$1.set(node, wipEntries);
			const buildSSRSlotFn = (props$1, children, loc) => {
				const fn = compilerDom.createFunctionExpression([
					props$1 || `_`,
					`_push`,
					`_parent`,
					`_scopeId`
				], void 0, true, true, loc);
				wipEntries.push({
					fn,
					children,
					vnodeBranch: vnodeBranches[wipEntries.length]
				});
				return fn;
			};
			const slots = node.children.length ? compilerDom.buildSlots(node, context, buildSSRSlotFn).slots : `null`;
			if (typeof component !== "string") node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_VNODE), [
				`_push`,
				compilerDom.createCallExpression(context.helper(compilerDom.CREATE_VNODE), [
					component,
					props,
					slots
				]),
				`_parent`
			]);
			else node.ssrCodegenNode = compilerDom.createCallExpression(context.helper(SSR_RENDER_COMPONENT), [
				component,
				props,
				slots,
				`_parent`
			]);
		};
	};
	function ssrProcessComponent(node, context) {
		const component = componentTypeMap.get(node);
		if (!node.ssrCodegenNode) if (component === compilerDom.TELEPORT) return ssrProcessTeleport(node, context);
		else if (component === compilerDom.SUSPENSE) return ssrProcessSuspense(node, context);
		else if (component === compilerDom.TRANSITION_GROUP) return ssrProcessTransitionGroup(node, context);
		else processChildren(node.children, context);
		else {
			const wipEntries = wipMap$1.get(node) || [];
			for (let i$6 = 0; i$6 < wipEntries.length; i$6++) {
				const { fn, children, vnodeBranch } = wipEntries[i$6];
				fn.body = compilerDom.createIfStatement(compilerDom.createSimpleExpression(`_push`, false), processChildrenAsStatement(
					children,
					context,
					false,
					true
					/* withSlotScopeId */
), vnodeBranch);
			}
			if (typeof component === "string") context.pushStatement(compilerDom.createCallExpression(`_push`, [node.ssrCodegenNode]));
			else context.pushStatement(node.ssrCodegenNode);
		}
	}
	const rawOptionsMap = new WeakMap();
	const [baseNodeTransforms, baseDirectiveTransforms] = compilerDom.getBaseTransformPreset(true);
	const vnodeNodeTransforms = [...baseNodeTransforms, ...compilerDom.DOMNodeTransforms];
	const vnodeDirectiveTransforms = {
		...baseDirectiveTransforms,
		...compilerDom.DOMDirectiveTransforms
	};
	function createVNodeSlotBranch(props, children, parentContext) {
		const rawOptions = rawOptionsMap.get(parentContext.root);
		const subOptions = {
			...rawOptions,
			nodeTransforms: [...vnodeNodeTransforms, ...rawOptions.nodeTransforms || []],
			directiveTransforms: {
				...vnodeDirectiveTransforms,
				...rawOptions.directiveTransforms || {}
			}
		};
		const wrapperNode = {
			type: 1,
			ns: 0,
			tag: "template",
			tagType: 3,
			isSelfClosing: false,
			props: [{
				type: 7,
				name: "slot",
				exp: props,
				arg: void 0,
				modifiers: [],
				loc: compilerDom.locStub
			}],
			children,
			loc: compilerDom.locStub,
			codegenNode: void 0
		};
		subTransform(wrapperNode, subOptions, parentContext);
		return compilerDom.createReturnStatement(children);
	}
	function subTransform(node, options, parentContext) {
		const childRoot = compilerDom.createRoot([node]);
		const childContext = compilerDom.createTransformContext(childRoot, options);
		childContext.ssr = false;
		childContext.scopes = { ...parentContext.scopes };
		childContext.identifiers = { ...parentContext.identifiers };
		compilerDom.traverseNode(childRoot, childContext);
		[
			"helpers",
			"components",
			"directives"
		].forEach((key) => {
			childContext[key].forEach((value) => {
				parentContext[key].add(value);
			});
		});
	}
	function clone$1(v$1) {
		if (shared$1.isArray(v$1)) return v$1.map(clone$1);
		else if (shared$1.isObject(v$1)) {
			const res = {};
			for (const key in v$1) res[key] = clone$1(v$1[key]);
			return res;
		} else return v$1;
	}
	const rawChildrenMap = new WeakMap();
	const ssrTransformElement = (node, context) => {
		if (node.type !== 1 || node.tagType !== 0) return;
		return function ssrPostTransformElement() {
			const openTag = [`<${node.tag}`];
			const needTagForRuntime = node.tag === "textarea" || node.tag.indexOf("-") > 0;
			const hasDynamicVBind = compilerDom.hasDynamicKeyVBind(node);
			if (hasDynamicVBind) {
				const { props } = compilerDom.buildProps(
					node,
					context,
					node.props,
					true
					/* ssr */
);
				if (props) {
					const propsExp = compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTRS), [props]);
					if (node.tag === "textarea") {
						const existingText = node.children[0];
						if (!existingText || existingText.type !== 5) {
							const tempId = `_temp${context.temps++}`;
							propsExp.arguments = [compilerDom.createAssignmentExpression(compilerDom.createSimpleExpression(tempId, false), props)];
							rawChildrenMap.set(node, compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [compilerDom.createConditionalExpression(compilerDom.createSimpleExpression(`"value" in ${tempId}`, false), compilerDom.createSimpleExpression(`${tempId}.value`, false), compilerDom.createSimpleExpression(existingText ? existingText.content : ``, true), false)]));
						}
					} else if (node.tag === "input") {
						const vModel = findVModel(node);
						if (vModel) {
							const tempId = `_temp${context.temps++}`;
							const tempExp = compilerDom.createSimpleExpression(tempId, false);
							propsExp.arguments = [compilerDom.createSequenceExpression([compilerDom.createAssignmentExpression(tempExp, props), compilerDom.createCallExpression(context.helper(compilerDom.MERGE_PROPS), [tempExp, compilerDom.createCallExpression(context.helper(SSR_GET_DYNAMIC_MODEL_PROPS), [tempExp, vModel.exp])])])];
						}
					}
					if (needTagForRuntime) propsExp.arguments.push(`"${node.tag}"`);
					openTag.push(propsExp);
				}
			}
			let dynamicClassBinding = void 0;
			let staticClassBinding = void 0;
			let dynamicStyleBinding = void 0;
			for (let i$6 = 0; i$6 < node.props.length; i$6++) {
				const prop = node.props[i$6];
				if (node.tag === "input" && isTrueFalseValue(prop)) continue;
				if (prop.type === 7) if (prop.name === "html" && prop.exp) rawChildrenMap.set(node, prop.exp);
				else if (prop.name === "text" && prop.exp) node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
				else if (prop.name === "slot") context.onError(compilerDom.createCompilerError(39, prop.loc));
				else if (isTextareaWithValue(node, prop) && prop.exp) {
					if (!hasDynamicVBind) node.children = [compilerDom.createInterpolation(prop.exp, prop.loc)];
				} else {
					const directiveTransform = context.directiveTransforms[prop.name];
					if (!directiveTransform) context.onError(createSSRCompilerError(60, prop.loc));
					else if (!hasDynamicVBind) {
						const { props, ssrTagParts } = directiveTransform(prop, node, context);
						if (ssrTagParts) openTag.push(...ssrTagParts);
						for (let j$1 = 0; j$1 < props.length; j$1++) {
							const { key, value } = props[j$1];
							if (compilerDom.isStaticExp(key)) {
								let attrName = key.content;
								if (attrName === "key" || attrName === "ref") continue;
								if (attrName === "class") openTag.push(` class="`, dynamicClassBinding = compilerDom.createCallExpression(context.helper(SSR_RENDER_CLASS), [value]), `"`);
								else if (attrName === "style") if (dynamicStyleBinding) mergeCall(dynamicStyleBinding, value);
								else openTag.push(` style="`, dynamicStyleBinding = compilerDom.createCallExpression(context.helper(SSR_RENDER_STYLE), [value]), `"`);
								else {
									attrName = node.tag.indexOf("-") > 0 ? attrName : shared$1.propsToAttrMap[attrName] || attrName.toLowerCase();
									if (shared$1.isBooleanAttr(attrName)) openTag.push(compilerDom.createConditionalExpression(
										value,
										compilerDom.createSimpleExpression(" " + attrName, true),
										compilerDom.createSimpleExpression("", true),
										false
										/* no newline */
));
									else if (shared$1.isSSRSafeAttrName(attrName)) openTag.push(compilerDom.createCallExpression(context.helper(SSR_RENDER_ATTR), [key, value]));
									else context.onError(createSSRCompilerError(61, key.loc));
								}
							} else {
								const args = [key, value];
								if (needTagForRuntime) args.push(`"${node.tag}"`);
								openTag.push(compilerDom.createCallExpression(context.helper(SSR_RENDER_DYNAMIC_ATTR), args));
							}
						}
					}
				}
				else if (node.tag === "textarea" && prop.name === "value" && prop.value) rawChildrenMap.set(node, shared$1.escapeHtml(prop.value.content));
				else if (!hasDynamicVBind) {
					if (prop.name === "key" || prop.name === "ref") continue;
					if (prop.name === "class" && prop.value) staticClassBinding = JSON.stringify(prop.value.content);
					openTag.push(` ${prop.name}` + (prop.value ? `="${shared$1.escapeHtml(prop.value.content)}"` : ``));
				}
			}
			if (dynamicClassBinding && staticClassBinding) {
				mergeCall(dynamicClassBinding, staticClassBinding);
				removeStaticBinding(openTag, "class");
			}
			if (context.scopeId) openTag.push(` ${context.scopeId}`);
			node.ssrCodegenNode = compilerDom.createTemplateLiteral(openTag);
		};
	};
	function isTrueFalseValue(prop) {
		if (prop.type === 7) return prop.name === "bind" && prop.arg && compilerDom.isStaticExp(prop.arg) && (prop.arg.content === "true-value" || prop.arg.content === "false-value");
		else return prop.name === "true-value" || prop.name === "false-value";
	}
	function isTextareaWithValue(node, prop) {
		return !!(node.tag === "textarea" && prop.name === "bind" && compilerDom.isBindKey(prop.arg, "value"));
	}
	function mergeCall(call$2, arg) {
		const existing = call$2.arguments[0];
		if (existing.type === 17) existing.elements.push(arg);
		else call$2.arguments[0] = compilerDom.createArrayExpression([existing, arg]);
	}
	function removeStaticBinding(tag$3, binding) {
		const regExp = new RegExp(`^ ${binding}=".+"$`);
		const i$6 = tag$3.findIndex((e$2) => typeof e$2 === "string" && regExp.test(e$2));
		if (i$6 > -1) tag$3.splice(i$6, 1);
	}
	function findVModel(node) {
		return node.props.find((p$2) => p$2.type === 7 && p$2.name === "model" && p$2.exp);
	}
	function ssrProcessElement(node, context) {
		const isVoidTag$1 = context.options.isVoidTag || shared$1.NO;
		const elementsToAdd = node.ssrCodegenNode.elements;
		for (let j$1 = 0; j$1 < elementsToAdd.length; j$1++) context.pushStringPart(elementsToAdd[j$1]);
		if (context.withSlotScopeId) context.pushStringPart(compilerDom.createSimpleExpression(`_scopeId`, false));
		context.pushStringPart(`>`);
		const rawChildren = rawChildrenMap.get(node);
		if (rawChildren) context.pushStringPart(rawChildren);
		else if (node.children.length) processChildren(node.children, context);
		if (!isVoidTag$1(node.tag)) context.pushStringPart(`</${node.tag}>`);
	}
	function ssrCodegenTransform(ast, options) {
		const context = createSSRTransformContext(ast, options);
		if (options.ssrCssVars) {
			const varsExp = compilerDom.processExpression(compilerDom.createSimpleExpression(options.ssrCssVars, false), compilerDom.createTransformContext(compilerDom.createRoot([]), options));
			context.body.push(compilerDom.createCompoundExpression([
				`const _cssVars = { style: `,
				varsExp,
				`}`
			]));
		}
		const isFragment$1 = ast.children.length > 1 && ast.children.some((c$2) => !compilerDom.isText(c$2));
		processChildren(ast.children, context, isFragment$1);
		ast.codegenNode = compilerDom.createBlockStatement(context.body);
		ast.ssrHelpers = Array.from(new Set([...ast.helpers.filter((h$2) => h$2 in ssrHelpers), ...context.helpers]));
		ast.helpers = ast.helpers.filter((h$2) => !(h$2 in ssrHelpers));
	}
	function createSSRTransformContext(root$5, options, helpers = new Set(), withSlotScopeId = false) {
		const body = [];
		let currentString = null;
		return {
			root: root$5,
			options,
			body,
			helpers,
			withSlotScopeId,
			onError: options.onError || ((e$2) => {
				throw e$2;
			}),
			helper(name) {
				helpers.add(name);
				return name;
			},
			pushStringPart(part) {
				if (!currentString) {
					const currentCall = compilerDom.createCallExpression(`_push`);
					body.push(currentCall);
					currentString = compilerDom.createTemplateLiteral([]);
					currentCall.arguments.push(currentString);
				}
				const bufferedElements = currentString.elements;
				const lastItem = bufferedElements[bufferedElements.length - 1];
				if (shared$1.isString(part) && shared$1.isString(lastItem)) bufferedElements[bufferedElements.length - 1] += part;
				else bufferedElements.push(part);
			},
			pushStatement(statement$2) {
				currentString = null;
				body.push(statement$2);
			}
		};
	}
	function createChildContext(parent, withSlotScopeId = parent.withSlotScopeId) {
		return createSSRTransformContext(parent.root, parent.options, parent.helpers, withSlotScopeId);
	}
	function processChildren(children, context, asFragment = false, disableNestedFragments = false) {
		if (asFragment) context.pushStringPart(`<!--[-->`);
		for (let i$6 = 0; i$6 < children.length; i$6++) {
			const child = children[i$6];
			switch (child.type) {
				case 1:
					switch (child.tagType) {
						case 0:
							ssrProcessElement(child, context);
							break;
						case 1:
							ssrProcessComponent(child, context);
							break;
						case 2:
							ssrProcessSlotOutlet(child, context);
							break;
						case 3: break;
						default:
							context.onError(createSSRCompilerError(63, child.loc));
							const exhaustiveCheck$1 = child;
							return exhaustiveCheck$1;
					}
					break;
				case 2:
					context.pushStringPart(shared$1.escapeHtml(child.content));
					break;
				case 3:
					context.pushStringPart(`<!--${child.content}-->`);
					break;
				case 5:
					context.pushStringPart(compilerDom.createCallExpression(context.helper(SSR_INTERPOLATE), [child.content]));
					break;
				case 9:
					ssrProcessIf(child, context, disableNestedFragments);
					break;
				case 11:
					ssrProcessFor(child, context, disableNestedFragments);
					break;
				case 10: break;
				case 12:
				case 8: break;
				default:
					context.onError(createSSRCompilerError(63, child.loc));
					const exhaustiveCheck = child;
					return exhaustiveCheck;
			}
		}
		if (asFragment) context.pushStringPart(`<!--]-->`);
	}
	function processChildrenAsStatement(children, parentContext, asFragment = false, withSlotScopeId = parentContext.withSlotScopeId) {
		const childContext = createChildContext(parentContext, withSlotScopeId);
		processChildren(children, childContext, asFragment);
		return compilerDom.createBlockStatement(childContext.body);
	}
	const ssrTransformModel = (dir, node, context) => {
		const model = dir.exp;
		function checkDuplicatedValue() {
			const value = compilerDom.findProp(node, "value");
			if (value) context.onError(compilerDom.createDOMCompilerError(56, value.loc));
		}
		if (node.tagType === 0) {
			const res = { props: [] };
			const defaultProps = [compilerDom.createObjectProperty(`value`, model)];
			if (node.tag === "input") {
				const type = compilerDom.findProp(node, "type");
				if (type) {
					const value = findValueBinding(node);
					if (type.type === 7) res.ssrTagParts = [compilerDom.createCallExpression(context.helper(SSR_RENDER_DYNAMIC_MODEL), [
						type.exp,
						model,
						value
					])];
					else if (type.value) switch (type.value.content) {
						case "radio":
							res.props = [compilerDom.createObjectProperty(`checked`, compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [model, value]))];
							break;
						case "checkbox":
							const trueValueBinding = compilerDom.findProp(node, "true-value");
							if (trueValueBinding) {
								const trueValue = trueValueBinding.type === 6 ? JSON.stringify(trueValueBinding.value.content) : trueValueBinding.exp;
								res.props = [compilerDom.createObjectProperty(`checked`, compilerDom.createCallExpression(context.helper(SSR_LOOSE_EQUAL), [model, trueValue]))];
							} else res.props = [compilerDom.createObjectProperty(`checked`, compilerDom.createConditionalExpression(compilerDom.createCallExpression(`Array.isArray`, [model]), compilerDom.createCallExpression(context.helper(SSR_LOOSE_CONTAIN), [model, value]), model))];
							break;
						case "file":
							context.onError(compilerDom.createDOMCompilerError(55, dir.loc));
							break;
						default:
							checkDuplicatedValue();
							res.props = defaultProps;
							break;
					}
				} else if (compilerDom.hasDynamicKeyVBind(node));
				else {
					checkDuplicatedValue();
					res.props = defaultProps;
				}
			} else if (node.tag === "textarea") {
				checkDuplicatedValue();
				node.children = [compilerDom.createInterpolation(model, model.loc)];
			} else if (node.tag === "select");
			else context.onError(compilerDom.createDOMCompilerError(53, dir.loc));
			return res;
		} else return compilerDom.transformModel(dir, node, context);
	};
	function findValueBinding(node) {
		const valueBinding = compilerDom.findProp(node, "value");
		return valueBinding ? valueBinding.type === 7 ? valueBinding.exp : compilerDom.createSimpleExpression(valueBinding.value.content, true) : compilerDom.createSimpleExpression(`null`, false);
	}
	const ssrTransformShow = (dir, node, context) => {
		if (!dir.exp) context.onError(compilerDom.createDOMCompilerError(
			57
			/* X_V_SHOW_NO_EXPRESSION */
));
		return { props: [compilerDom.createObjectProperty(`style`, compilerDom.createConditionalExpression(
			dir.exp,
			compilerDom.createSimpleExpression(`null`, false),
			compilerDom.createObjectExpression([compilerDom.createObjectProperty(`display`, compilerDom.createSimpleExpression(`none`, true))]),
			false
			/* no newline */
))] };
	};
	const hasSingleChild = (node) => node.children.filter(
		(n$4) => n$4.type !== 3
		/* COMMENT */
).length === 1;
	const ssrInjectFallthroughAttrs = (node, context) => {
		if (node.type === 0) context.identifiers._attrs = 1;
		const parent = context.parent;
		if (!parent || parent.type !== 0) return;
		if (node.type === 10 && hasSingleChild(node)) injectFallthroughAttrs(node.children[0]);
		else if (hasSingleChild(parent)) injectFallthroughAttrs(node);
	};
	function injectFallthroughAttrs(node) {
		if (node.type === 1 && (node.tagType === 0 || node.tagType === 1) && !compilerDom.findDir(node, "for")) node.props.push({
			type: 7,
			name: "bind",
			arg: void 0,
			exp: compilerDom.createSimpleExpression(`_attrs`, false),
			modifiers: [],
			loc: compilerDom.locStub
		});
	}
	const ssrInjectCssVars = (node, context) => {
		if (!context.ssrCssVars) return;
		if (node.type === 0) context.identifiers._cssVars = 1;
		const parent = context.parent;
		if (!parent || parent.type !== 0) return;
		if (node.type === 10) for (const child of node.children) injectCssVars(child);
		else injectCssVars(node);
	};
	function injectCssVars(node) {
		if (node.type === 1 && (node.tagType === 0 || node.tagType === 1) && !compilerDom.findDir(node, "for")) if (compilerDom.isBuiltInType(node.tag, "Suspense")) for (const child of node.children) if (child.type === 1 && child.tagType === 3) child.children.forEach(injectCssVars);
		else injectCssVars(child);
		else node.props.push({
			type: 7,
			name: "bind",
			arg: void 0,
			exp: compilerDom.createSimpleExpression(`_cssVars`, false),
			modifiers: [],
			loc: compilerDom.locStub
		});
	}
	function compile$1(template$1, options = {}) {
		options = {
			...options,
			...compilerDom.parserOptions,
			ssr: true,
			scopeId: options.mode === "function" ? null : options.scopeId,
			prefixIdentifiers: true,
			cacheHandlers: false,
			hoistStatic: false
		};
		const ast = compilerDom.baseParse(template$1, options);
		rawOptionsMap.set(ast, options);
		compilerDom.transform(ast, {
			...options,
			nodeTransforms: [
				ssrTransformIf,
				ssrTransformFor,
				compilerDom.trackVForSlotScopes,
				compilerDom.transformExpression,
				ssrTransformSlotOutlet,
				ssrInjectFallthroughAttrs,
				ssrInjectCssVars,
				ssrTransformElement,
				ssrTransformComponent,
				compilerDom.trackSlotScopes,
				compilerDom.transformStyle,
				...options.nodeTransforms || []
			],
			directiveTransforms: {
				bind: compilerDom.transformBind,
				model: ssrTransformModel,
				show: ssrTransformShow,
				on: compilerDom.noopDirectiveTransform,
				cloak: compilerDom.noopDirectiveTransform,
				once: compilerDom.noopDirectiveTransform,
				...options.directiveTransforms || {}
			}
		});
		ssrCodegenTransform(ast, options);
		return compilerDom.generate(ast, options);
	}
	exports.compile = compile$1;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/util/unesc.js
var require_unesc$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/util/unesc.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = unesc$2;
	/**
	* 
	* @param {string} str 
	* @returns {[string, number]|undefined}
	*/
	function gobbleHex$2(str$4) {
		var lower = str$4.toLowerCase();
		var hex$3 = "";
		var spaceTerminated = false;
		for (var i$6 = 0; i$6 < 6 && lower[i$6] !== void 0; i$6++) {
			var code$1 = lower.charCodeAt(i$6);
			var valid = code$1 >= 97 && code$1 <= 102 || code$1 >= 48 && code$1 <= 57;
			spaceTerminated = code$1 === 32;
			if (!valid) break;
			hex$3 += lower[i$6];
		}
		if (hex$3.length === 0) return void 0;
		var codePoint = parseInt(hex$3, 16);
		var isSurrogate = codePoint >= 55296 && codePoint <= 57343;
		if (isSurrogate || codePoint === 0 || codePoint > 1114111) return ["�", hex$3.length + (spaceTerminated ? 1 : 0)];
		return [String.fromCodePoint(codePoint), hex$3.length + (spaceTerminated ? 1 : 0)];
	}
	var CONTAINS_ESCAPE$2 = /\\/;
	function unesc$2(str$4) {
		var needToProcess = CONTAINS_ESCAPE$2.test(str$4);
		if (!needToProcess) return str$4;
		var ret$1 = "";
		for (var i$6 = 0; i$6 < str$4.length; i$6++) {
			if (str$4[i$6] === "\\") {
				var gobbled = gobbleHex$2(str$4.slice(i$6 + 1, i$6 + 7));
				if (gobbled !== void 0) {
					ret$1 += gobbled[0];
					i$6 += gobbled[1];
					continue;
				}
				if (str$4[i$6 + 1] === "\\") {
					ret$1 += "\\";
					i$6++;
					continue;
				}
				if (str$4.length === i$6 + 1) ret$1 += str$4[i$6];
				continue;
			}
			ret$1 += str$4[i$6];
		}
		return ret$1;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/util/getProp.js
var require_getProp$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/util/getProp.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = getProp$2;
	function getProp$2(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) return void 0;
			obj = obj[prop];
		}
		return obj;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/util/ensureObject.js
var require_ensureObject$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/util/ensureObject.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = ensureObject$2;
	function ensureObject$2(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) obj[prop] = {};
			obj = obj[prop];
		}
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/util/stripComments.js
var require_stripComments$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/util/stripComments.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = stripComments$2;
	function stripComments$2(str$4) {
		var s$3 = "";
		var commentStart = str$4.indexOf("/*");
		var lastEnd = 0;
		while (commentStart >= 0) {
			s$3 = s$3 + str$4.slice(lastEnd, commentStart);
			var commentEnd = str$4.indexOf("*/", commentStart + 2);
			if (commentEnd < 0) return s$3;
			lastEnd = commentEnd + 2;
			commentStart = str$4.indexOf("/*", lastEnd);
		}
		s$3 = s$3 + str$4.slice(lastEnd);
		return s$3;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/util/index.js
var require_util$4 = __commonJS({ "node_modules/postcss-selector-parser/dist/util/index.js"(exports) {
	exports.__esModule = true;
	exports.unesc = exports.stripComments = exports.getProp = exports.ensureObject = void 0;
	var _unesc$5 = _interopRequireDefault$79(require_unesc$2());
	exports.unesc = _unesc$5["default"];
	var _getProp$2 = _interopRequireDefault$79(require_getProp$2());
	exports.getProp = _getProp$2["default"];
	var _ensureObject$2 = _interopRequireDefault$79(require_ensureObject$2());
	exports.ensureObject = _ensureObject$2["default"];
	var _stripComments$2 = _interopRequireDefault$79(require_stripComments$2());
	exports.stripComments = _stripComments$2["default"];
	function _interopRequireDefault$79(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/node.js
var require_node$7 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/node.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _util$13 = require_util$4();
	function _defineProperties$20(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$20(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$20(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$20(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var cloneNode$11 = function cloneNode$13(obj, parent) {
		if (typeof obj !== "object" || obj === null) return obj;
		var cloned = new obj.constructor();
		for (var i$6 in obj) {
			if (!obj.hasOwnProperty(i$6)) continue;
			var value = obj[i$6];
			var type = typeof value;
			if (i$6 === "parent" && type === "object") {
				if (parent) cloned[i$6] = parent;
			} else if (value instanceof Array) cloned[i$6] = value.map(function(j$1) {
				return cloneNode$13(j$1, cloned);
			});
			else cloned[i$6] = cloneNode$13(value, cloned);
		}
		return cloned;
	};
	var Node$5 = /* @__PURE__ */ function() {
		function Node$20(opts) {
			if (opts === void 0) opts = {};
			Object.assign(this, opts);
			this.spaces = this.spaces || {};
			this.spaces.before = this.spaces.before || "";
			this.spaces.after = this.spaces.after || "";
		}
		var _proto = Node$20.prototype;
		_proto.remove = function remove$4() {
			if (this.parent) this.parent.removeChild(this);
			this.parent = void 0;
			return this;
		};
		_proto.replaceWith = function replaceWith$1() {
			if (this.parent) {
				for (var index$1 in arguments) this.parent.insertBefore(this, arguments[index$1]);
				this.remove();
			}
			return this;
		};
		_proto.next = function next() {
			return this.parent.at(this.parent.index(this) + 1);
		};
		_proto.prev = function prev() {
			return this.parent.at(this.parent.index(this) - 1);
		};
		_proto.clone = function clone$4(overrides) {
			if (overrides === void 0) overrides = {};
			var cloned = cloneNode$11(this);
			for (var name in overrides) cloned[name] = overrides[name];
			return cloned;
		};
		_proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			var originalValue = this[name];
			var originalEscaped = this.raws[name];
			this[name] = originalValue + value;
			if (originalEscaped || valueEscaped !== value) this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
			else delete this.raws[name];
		};
		_proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			this[name] = value;
			this.raws[name] = valueEscaped;
		};
		_proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
			this[name] = value;
			if (this.raws) delete this.raws[name];
		};
		_proto.isAtPosition = function isAtPosition(line, column) {
			if (this.source && this.source.start && this.source.end) {
				if (this.source.start.line > line) return false;
				if (this.source.end.line < line) return false;
				if (this.source.start.line === line && this.source.start.column > column) return false;
				if (this.source.end.line === line && this.source.end.column < column) return false;
				return true;
			}
			return void 0;
		};
		_proto.stringifyProperty = function stringifyProperty(name) {
			return this.raws && this.raws[name] || this[name];
		};
		_proto.valueToString = function valueToString() {
			return String(this.stringifyProperty("value"));
		};
		_proto.toString = function toString$5() {
			return [
				this.rawSpaceBefore,
				this.valueToString(),
				this.rawSpaceAfter
			].join("");
		};
		_createClass$20(Node$20, [{
			key: "rawSpaceBefore",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;
				if (rawSpace === void 0) rawSpace = this.spaces && this.spaces.before;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$13.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.before = raw;
			}
		}, {
			key: "rawSpaceAfter",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;
				if (rawSpace === void 0) rawSpace = this.spaces.after;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$13.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.after = raw;
			}
		}]);
		return Node$20;
	}();
	exports["default"] = Node$5;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/types.js
var require_types$3 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/types.js"(exports) {
	exports.__esModule = true;
	exports.UNIVERSAL = exports.TAG = exports.STRING = exports.SELECTOR = exports.ROOT = exports.PSEUDO = exports.NESTING = exports.ID = exports.COMMENT = exports.COMBINATOR = exports.CLASS = exports.ATTRIBUTE = void 0;
	var TAG$2 = "tag";
	exports.TAG = TAG$2;
	var STRING$2 = "string";
	exports.STRING = STRING$2;
	var SELECTOR$2 = "selector";
	exports.SELECTOR = SELECTOR$2;
	var ROOT$2 = "root";
	exports.ROOT = ROOT$2;
	var PSEUDO$2 = "pseudo";
	exports.PSEUDO = PSEUDO$2;
	var NESTING$2 = "nesting";
	exports.NESTING = NESTING$2;
	var ID$5 = "id";
	exports.ID = ID$5;
	var COMMENT$2 = "comment";
	exports.COMMENT = COMMENT$2;
	var COMBINATOR$2 = "combinator";
	exports.COMBINATOR = COMBINATOR$2;
	var CLASS$2 = "class";
	exports.CLASS = CLASS$2;
	var ATTRIBUTE$2 = "attribute";
	exports.ATTRIBUTE = ATTRIBUTE$2;
	var UNIVERSAL$2 = "universal";
	exports.UNIVERSAL = UNIVERSAL$2;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/container.js
var require_container$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/container.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$23 = _interopRequireDefault$78(require_node$7());
	var types$5 = _interopRequireWildcard$14(require_types$3());
	function _getRequireWildcardCache$11(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$11 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$14(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$11(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$78(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _createForOfIteratorHelperLoose$2(o$2, allowArrayLike) {
		var it = typeof Symbol !== "undefined" && o$2[Symbol.iterator] || o$2["@@iterator"];
		if (it) return (it = it.call(o$2)).next.bind(it);
		if (Array.isArray(o$2) || (it = _unsupportedIterableToArray$2(o$2)) || allowArrayLike && o$2 && typeof o$2.length === "number") {
			if (it) o$2 = it;
			var i$6 = 0;
			return function() {
				if (i$6 >= o$2.length) return { done: true };
				return {
					done: false,
					value: o$2[i$6++]
				};
			};
		}
		throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _unsupportedIterableToArray$2(o$2, minLen) {
		if (!o$2) return;
		if (typeof o$2 === "string") return _arrayLikeToArray$2(o$2, minLen);
		var n$4 = Object.prototype.toString.call(o$2).slice(8, -1);
		if (n$4 === "Object" && o$2.constructor) n$4 = o$2.constructor.name;
		if (n$4 === "Map" || n$4 === "Set") return Array.from(o$2);
		if (n$4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n$4)) return _arrayLikeToArray$2(o$2, minLen);
	}
	function _arrayLikeToArray$2(arr, len) {
		if (len == null || len > arr.length) len = arr.length;
		for (var i$6 = 0, arr2 = new Array(len); i$6 < len; i$6++) arr2[i$6] = arr[i$6];
		return arr2;
	}
	function _defineProperties$19(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$19(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$19(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$19(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$41(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$41(subClass, superClass);
	}
	function _setPrototypeOf$41(o$2, p$2) {
		_setPrototypeOf$41 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$41(o$2, p$2);
	}
	var Container$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$41(Container$16, _Node);
		function Container$16(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			if (!_this.nodes) _this.nodes = [];
			return _this;
		}
		var _proto = Container$16.prototype;
		_proto.append = function append$1(selector$3) {
			selector$3.parent = this;
			this.nodes.push(selector$3);
			return this;
		};
		_proto.prepend = function prepend$1(selector$3) {
			selector$3.parent = this;
			this.nodes.unshift(selector$3);
			return this;
		};
		_proto.at = function at$3(index$1) {
			return this.nodes[index$1];
		};
		_proto.index = function index$1(child) {
			if (typeof child === "number") return child;
			return this.nodes.indexOf(child);
		};
		_proto.removeChild = function removeChild(child) {
			child = this.index(child);
			this.at(child).parent = void 0;
			this.nodes.splice(child, 1);
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= child) this.indexes[id$4] = index$1 - 1;
			}
			return this;
		};
		_proto.removeAll = function removeAll() {
			for (var _iterator = _createForOfIteratorHelperLoose$2(this.nodes), _step; !(_step = _iterator()).done;) {
				var node = _step.value;
				node.parent = void 0;
			}
			this.nodes = [];
			return this;
		};
		_proto.empty = function empty() {
			return this.removeAll();
		};
		_proto.insertAfter = function insertAfter$1(oldNode, newNode) {
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			this.nodes.splice(oldIndex + 1, 0, newNode);
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (oldIndex <= index$1) this.indexes[id$4] = index$1 + 1;
			}
			return this;
		};
		_proto.insertBefore = function insertBefore$1(oldNode, newNode) {
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			this.nodes.splice(oldIndex, 0, newNode);
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 <= oldIndex) this.indexes[id$4] = index$1 + 1;
			}
			return this;
		};
		_proto._findChildAtPosition = function _findChildAtPosition(line, col) {
			var found = void 0;
			this.each(function(node) {
				if (node.atPosition) {
					var foundChild = node.atPosition(line, col);
					if (foundChild) {
						found = foundChild;
						return false;
					}
				} else if (node.isAtPosition(line, col)) {
					found = node;
					return false;
				}
			});
			return found;
		};
		_proto.atPosition = function atPosition(line, col) {
			if (this.isAtPosition(line, col)) return this._findChildAtPosition(line, col) || this;
			else return void 0;
		};
		_proto._inferEndPosition = function _inferEndPosition() {
			if (this.last && this.last.source && this.last.source.end) {
				this.source = this.source || {};
				this.source.end = this.source.end || {};
				Object.assign(this.source.end, this.last.source.end);
			}
		};
		_proto.each = function each(callback) {
			if (!this.lastEach) this.lastEach = 0;
			if (!this.indexes) this.indexes = {};
			this.lastEach++;
			var id$4 = this.lastEach;
			this.indexes[id$4] = 0;
			if (!this.length) return void 0;
			var index$1, result;
			while (this.indexes[id$4] < this.length) {
				index$1 = this.indexes[id$4];
				result = callback(this.at(index$1), index$1);
				if (result === false) break;
				this.indexes[id$4] += 1;
			}
			delete this.indexes[id$4];
			if (result === false) return false;
		};
		_proto.walk = function walk$2(callback) {
			return this.each(function(node, i$6) {
				var result = callback(node, i$6);
				if (result !== false && node.length) result = node.walk(callback);
				if (result === false) return false;
			});
		};
		_proto.walkAttributes = function walkAttributes(callback) {
			var _this2 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.ATTRIBUTE) return callback.call(_this2, selector$3);
			});
		};
		_proto.walkClasses = function walkClasses(callback) {
			var _this3 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.CLASS) return callback.call(_this3, selector$3);
			});
		};
		_proto.walkCombinators = function walkCombinators(callback) {
			var _this4 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.COMBINATOR) return callback.call(_this4, selector$3);
			});
		};
		_proto.walkComments = function walkComments(callback) {
			var _this5 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.COMMENT) return callback.call(_this5, selector$3);
			});
		};
		_proto.walkIds = function walkIds(callback) {
			var _this6 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.ID) return callback.call(_this6, selector$3);
			});
		};
		_proto.walkNesting = function walkNesting(callback) {
			var _this7 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.NESTING) return callback.call(_this7, selector$3);
			});
		};
		_proto.walkPseudos = function walkPseudos(callback) {
			var _this8 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.PSEUDO) return callback.call(_this8, selector$3);
			});
		};
		_proto.walkTags = function walkTags(callback) {
			var _this9 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.TAG) return callback.call(_this9, selector$3);
			});
		};
		_proto.walkUniversals = function walkUniversals(callback) {
			var _this10 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$5.UNIVERSAL) return callback.call(_this10, selector$3);
			});
		};
		_proto.split = function split(callback) {
			var _this11 = this;
			var current = [];
			return this.reduce(function(memo, node, index$1) {
				var split$1 = callback.call(_this11, node);
				current.push(node);
				if (split$1) {
					memo.push(current);
					current = [];
				} else if (index$1 === _this11.length - 1) memo.push(current);
				return memo;
			}, []);
		};
		_proto.map = function map(callback) {
			return this.nodes.map(callback);
		};
		_proto.reduce = function reduce(callback, memo) {
			return this.nodes.reduce(callback, memo);
		};
		_proto.every = function every(callback) {
			return this.nodes.every(callback);
		};
		_proto.some = function some(callback) {
			return this.nodes.some(callback);
		};
		_proto.filter = function filter$2(callback) {
			return this.nodes.filter(callback);
		};
		_proto.sort = function sort(callback) {
			return this.nodes.sort(callback);
		};
		_proto.toString = function toString$5() {
			return this.map(String).join("");
		};
		_createClass$19(Container$16, [
			{
				key: "first",
				get: function get$2() {
					return this.at(0);
				}
			},
			{
				key: "last",
				get: function get$2() {
					return this.at(this.length - 1);
				}
			},
			{
				key: "length",
				get: function get$2() {
					return this.nodes.length;
				}
			}
		]);
		return Container$16;
	}(_node$23["default"]);
	exports["default"] = Container$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/root.js
var require_root$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/root.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$8 = _interopRequireDefault$77(require_container$2());
	var _types$42 = require_types$3();
	function _interopRequireDefault$77(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$18(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$18(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$18(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$18(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$40(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$40(subClass, superClass);
	}
	function _setPrototypeOf$40(o$2, p$2) {
		_setPrototypeOf$40 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$40(o$2, p$2);
	}
	var Root$2 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$40(Root$11, _Container);
		function Root$11(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$42.ROOT;
			return _this;
		}
		var _proto = Root$11.prototype;
		_proto.toString = function toString$5() {
			var str$4 = this.reduce(function(memo, selector$3) {
				memo.push(String(selector$3));
				return memo;
			}, []).join(",");
			return this.trailingComma ? str$4 + "," : str$4;
		};
		_proto.error = function error(message, options) {
			if (this._error) return this._error(message, options);
			else return new Error(message);
		};
		_createClass$18(Root$11, [{
			key: "errorGenerator",
			set: function set(handler) {
				this._error = handler;
			}
		}]);
		return Root$11;
	}(_container$8["default"]);
	exports["default"] = Root$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/selector.js
var require_selector$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/selector.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$7 = _interopRequireDefault$76(require_container$2());
	var _types$41 = require_types$3();
	function _interopRequireDefault$76(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$39(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$39(subClass, superClass);
	}
	function _setPrototypeOf$39(o$2, p$2) {
		_setPrototypeOf$39 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$39(o$2, p$2);
	}
	var Selector$2 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$39(Selector$3, _Container);
		function Selector$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$41.SELECTOR;
			return _this;
		}
		return Selector$3;
	}(_container$7["default"]);
	exports["default"] = Selector$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/cssesc/cssesc.js
var require_cssesc = __commonJS({ "node_modules/cssesc/cssesc.js"(exports, module) {
	var object$1 = {};
	var hasOwnProperty$3 = object$1.hasOwnProperty;
	var merge$4 = function merge$5(options, defaults$2) {
		if (!options) return defaults$2;
		var result = {};
		for (var key in defaults$2) result[key] = hasOwnProperty$3.call(options, key) ? options[key] : defaults$2[key];
		return result;
	};
	var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
	var regexSingleEscape$1 = /[ -,\.\/:-@\[\]\^`\{-~]/;
	var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
	var cssesc = function cssesc$1(string$3, options) {
		options = merge$4(options, cssesc$1.options);
		if (options.quotes != "single" && options.quotes != "double") options.quotes = "single";
		var quote = options.quotes == "double" ? "\"" : "'";
		var isIdentifier$16 = options.isIdentifier;
		var firstChar = string$3.charAt(0);
		var output = "";
		var counter = 0;
		var length = string$3.length;
		while (counter < length) {
			var character = string$3.charAt(counter++);
			var codePoint = character.charCodeAt();
			var value = void 0;
			if (codePoint < 32 || codePoint > 126) {
				if (codePoint >= 55296 && codePoint <= 56319 && counter < length) {
					var extra = string$3.charCodeAt(counter++);
					if ((extra & 64512) == 56320) codePoint = ((codePoint & 1023) << 10) + (extra & 1023) + 65536;
					else counter--;
				}
				value = "\\" + codePoint.toString(16).toUpperCase() + " ";
			} else if (options.escapeEverything) if (regexAnySingleEscape.test(character)) value = "\\" + character;
			else value = "\\" + codePoint.toString(16).toUpperCase() + " ";
			else if (/[\t\n\f\r\x0B]/.test(character)) value = "\\" + codePoint.toString(16).toUpperCase() + " ";
			else if (character == "\\" || !isIdentifier$16 && (character == "\"" && quote == character || character == "'" && quote == character) || isIdentifier$16 && regexSingleEscape$1.test(character)) value = "\\" + character;
			else value = character;
			output += value;
		}
		if (isIdentifier$16) {
			if (/^-[-\d]/.test(output)) output = "\\-" + output.slice(1);
			else if (/\d/.test(firstChar)) output = "\\3" + firstChar + " " + output.slice(1);
		}
		output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {
			if ($1 && $1.length % 2) return $0;
			return ($1 || "") + $2;
		});
		if (!isIdentifier$16 && options.wrap) return quote + output + quote;
		return output;
	};
	cssesc.options = {
		"escapeEverything": false,
		"isIdentifier": false,
		"quotes": "single",
		"wrap": false
	};
	cssesc.version = "3.0.0";
	module.exports = cssesc;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/className.js
var require_className$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/className.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$8 = _interopRequireDefault$75(require_cssesc());
	var _util$12 = require_util$4();
	var _node$22 = _interopRequireDefault$75(require_node$7());
	var _types$40 = require_types$3();
	function _interopRequireDefault$75(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$17(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$17(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$17(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$17(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$38(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$38(subClass, superClass);
	}
	function _setPrototypeOf$38(o$2, p$2) {
		_setPrototypeOf$38 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$38(o$2, p$2);
	}
	var ClassName$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$38(ClassName$3, _Node);
		function ClassName$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$40.CLASS;
			_this._constructed = true;
			return _this;
		}
		var _proto = ClassName$3.prototype;
		_proto.valueToString = function valueToString() {
			return "." + _Node.prototype.valueToString.call(this);
		};
		_createClass$17(ClassName$3, [{
			key: "value",
			get: function get$2() {
				return this._value;
			},
			set: function set(v$1) {
				if (this._constructed) {
					var escaped = (0, _cssesc$8["default"])(v$1, { isIdentifier: true });
					if (escaped !== v$1) {
						(0, _util$12.ensureObject)(this, "raws");
						this.raws.value = escaped;
					} else if (this.raws) delete this.raws.value;
				}
				this._value = v$1;
			}
		}]);
		return ClassName$3;
	}(_node$22["default"]);
	exports["default"] = ClassName$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/comment.js
var require_comment$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/comment.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$21 = _interopRequireDefault$74(require_node$7());
	var _types$39 = require_types$3();
	function _interopRequireDefault$74(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$37(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$37(subClass, superClass);
	}
	function _setPrototypeOf$37(o$2, p$2) {
		_setPrototypeOf$37 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$37(o$2, p$2);
	}
	var Comment$4 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$37(Comment$13, _Node);
		function Comment$13(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$39.COMMENT;
			return _this;
		}
		return Comment$13;
	}(_node$21["default"]);
	exports["default"] = Comment$4;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/id.js
var require_id$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/id.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$20 = _interopRequireDefault$73(require_node$7());
	var _types$38 = require_types$3();
	function _interopRequireDefault$73(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$36(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$36(subClass, superClass);
	}
	function _setPrototypeOf$36(o$2, p$2) {
		_setPrototypeOf$36 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$36(o$2, p$2);
	}
	var ID$4 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$36(ID$6, _Node);
		function ID$6(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$38.ID;
			return _this;
		}
		var _proto = ID$6.prototype;
		_proto.valueToString = function valueToString() {
			return "#" + _Node.prototype.valueToString.call(this);
		};
		return ID$6;
	}(_node$20["default"]);
	exports["default"] = ID$4;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/namespace.js
var require_namespace$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/namespace.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$7 = _interopRequireDefault$72(require_cssesc());
	var _util$11 = require_util$4();
	var _node$19 = _interopRequireDefault$72(require_node$7());
	function _interopRequireDefault$72(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$16(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$16(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$16(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$16(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$35(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$35(subClass, superClass);
	}
	function _setPrototypeOf$35(o$2, p$2) {
		_setPrototypeOf$35 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$35(o$2, p$2);
	}
	var Namespace$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$35(Namespace$3, _Node);
		function Namespace$3() {
			return _Node.apply(this, arguments) || this;
		}
		var _proto = Namespace$3.prototype;
		_proto.qualifiedName = function qualifiedName(value) {
			if (this.namespace) return this.namespaceString + "|" + value;
			else return value;
		};
		_proto.valueToString = function valueToString() {
			return this.qualifiedName(_Node.prototype.valueToString.call(this));
		};
		_createClass$16(Namespace$3, [
			{
				key: "namespace",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					if (namespace === true || namespace === "*" || namespace === "&") {
						this._namespace = namespace;
						if (this.raws) delete this.raws.namespace;
						return;
					}
					var escaped = (0, _cssesc$7["default"])(namespace, { isIdentifier: true });
					this._namespace = namespace;
					if (escaped !== namespace) {
						(0, _util$11.ensureObject)(this, "raws");
						this.raws.namespace = escaped;
					} else if (this.raws) delete this.raws.namespace;
				}
			},
			{
				key: "ns",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					this.namespace = namespace;
				}
			},
			{
				key: "namespaceString",
				get: function get$2() {
					if (this.namespace) {
						var ns = this.stringifyProperty("namespace");
						if (ns === true) return "";
						else return ns;
					} else return "";
				}
			}
		]);
		return Namespace$3;
	}(_node$19["default"]);
	exports["default"] = Namespace$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/tag.js
var require_tag$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/tag.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace$8 = _interopRequireDefault$71(require_namespace$2());
	var _types$37 = require_types$3();
	function _interopRequireDefault$71(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$34(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$34(subClass, superClass);
	}
	function _setPrototypeOf$34(o$2, p$2) {
		_setPrototypeOf$34 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$34(o$2, p$2);
	}
	var Tag$2 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$34(Tag$3, _Namespace);
		function Tag$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$37.TAG;
			return _this;
		}
		return Tag$3;
	}(_namespace$8["default"]);
	exports["default"] = Tag$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/string.js
var require_string$3 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/string.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$18 = _interopRequireDefault$70(require_node$7());
	var _types$36 = require_types$3();
	function _interopRequireDefault$70(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$33(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$33(subClass, superClass);
	}
	function _setPrototypeOf$33(o$2, p$2) {
		_setPrototypeOf$33 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$33(o$2, p$2);
	}
	var String$3 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$33(String$4, _Node);
		function String$4(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$36.STRING;
			return _this;
		}
		return String$4;
	}(_node$18["default"]);
	exports["default"] = String$3;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/pseudo.js
var require_pseudo$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/pseudo.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$6 = _interopRequireDefault$69(require_container$2());
	var _types$35 = require_types$3();
	function _interopRequireDefault$69(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$32(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$32(subClass, superClass);
	}
	function _setPrototypeOf$32(o$2, p$2) {
		_setPrototypeOf$32 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$32(o$2, p$2);
	}
	var Pseudo$2 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$32(Pseudo$3, _Container);
		function Pseudo$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$35.PSEUDO;
			return _this;
		}
		var _proto = Pseudo$3.prototype;
		_proto.toString = function toString$5() {
			var params = this.length ? "(" + this.map(String).join(",") + ")" : "";
			return [
				this.rawSpaceBefore,
				this.stringifyProperty("value"),
				params,
				this.rawSpaceAfter
			].join("");
		};
		return Pseudo$3;
	}(_container$6["default"]);
	exports["default"] = Pseudo$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/util-deprecate/node.js
var require_node$6 = __commonJS({ "node_modules/util-deprecate/node.js"(exports, module) {
	/**
	* For Node.js, simply re-export the core `util.deprecate` function.
	*/
	module.exports = __require("util").deprecate;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/attribute.js
var require_attribute$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/attribute.js"(exports) {
	exports.__esModule = true;
	exports["default"] = void 0;
	exports.unescapeValue = unescapeValue$2;
	var _cssesc$6 = _interopRequireDefault$68(require_cssesc());
	var _unesc$4 = _interopRequireDefault$68(require_unesc$2());
	var _namespace$7 = _interopRequireDefault$68(require_namespace$2());
	var _types$34 = require_types$3();
	var _CSSESC_QUOTE_OPTIONS$2;
	function _interopRequireDefault$68(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$15(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$15(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$15(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$15(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$31(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$31(subClass, superClass);
	}
	function _setPrototypeOf$31(o$2, p$2) {
		_setPrototypeOf$31 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$31(o$2, p$2);
	}
	var deprecate$2 = require_node$6();
	var WRAPPED_IN_QUOTES$2 = /^('|")([^]*)\1$/;
	var warnOfDeprecatedValueAssignment$2 = deprecate$2(function() {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.");
	var warnOfDeprecatedQuotedAssignment$2 = deprecate$2(function() {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
	var warnOfDeprecatedConstructor$2 = deprecate$2(function() {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
	function unescapeValue$2(value) {
		var deprecatedUsage = false;
		var quoteMark = null;
		var unescaped = value;
		var m$2 = unescaped.match(WRAPPED_IN_QUOTES$2);
		if (m$2) {
			quoteMark = m$2[1];
			unescaped = m$2[2];
		}
		unescaped = (0, _unesc$4["default"])(unescaped);
		if (unescaped !== value) deprecatedUsage = true;
		return {
			deprecatedUsage,
			unescaped,
			quoteMark
		};
	}
	function handleDeprecatedContructorOpts$2(opts) {
		if (opts.quoteMark !== void 0) return opts;
		if (opts.value === void 0) return opts;
		warnOfDeprecatedConstructor$2();
		var _unescapeValue = unescapeValue$2(opts.value), quoteMark = _unescapeValue.quoteMark, unescaped = _unescapeValue.unescaped;
		if (!opts.raws) opts.raws = {};
		if (opts.raws.value === void 0) opts.raws.value = opts.value;
		opts.value = unescaped;
		opts.quoteMark = quoteMark;
		return opts;
	}
	var Attribute$2 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$31(Attribute$3, _Namespace);
		function Attribute$3(opts) {
			var _this;
			if (opts === void 0) opts = {};
			_this = _Namespace.call(this, handleDeprecatedContructorOpts$2(opts)) || this;
			_this.type = _types$34.ATTRIBUTE;
			_this.raws = _this.raws || {};
			Object.defineProperty(_this.raws, "unquoted", {
				get: deprecate$2(function() {
					return _this.value;
				}, "attr.raws.unquoted is deprecated. Call attr.value instead."),
				set: deprecate$2(function() {
					return _this.value;
				}, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
			});
			_this._constructed = true;
			return _this;
		}
		/**
		* Returns the Attribute's value quoted such that it would be legal to use
		* in the value of a css file. The original value's quotation setting
		* used for stringification is left unchanged. See `setValue(value, options)`
		* if you want to control the quote settings of a new value for the attribute.
		*
		* You can also change the quotation used for the current value by setting quoteMark.
		*
		* Options:
		*   * quoteMark {'"' | "'" | null} - Use this value to quote the value. If this
		*     option is not set, the original value for quoteMark will be used. If
		*     indeterminate, a double quote is used. The legal values are:
		*     * `null` - the value will be unquoted and characters will be escaped as necessary.
		*     * `'` - the value will be quoted with a single quote and single quotes are escaped.
		*     * `"` - the value will be quoted with a double quote and double quotes are escaped.
		*   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark
		*     over the quoteMark option value.
		*   * smart {boolean} - if true, will select a quote mark based on the value
		*     and the other options specified here. See the `smartQuoteMark()`
		*     method.
		**/
		var _proto = Attribute$3.prototype;
		_proto.getQuotedValue = function getQuotedValue(options) {
			if (options === void 0) options = {};
			var quoteMark = this._determineQuoteMark(options);
			var cssescopts = CSSESC_QUOTE_OPTIONS$2[quoteMark];
			var escaped = (0, _cssesc$6["default"])(this._value, cssescopts);
			return escaped;
		};
		_proto._determineQuoteMark = function _determineQuoteMark(options) {
			return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
		};
		_proto.setValue = function setValue(value, options) {
			if (options === void 0) options = {};
			this._value = value;
			this._quoteMark = this._determineQuoteMark(options);
			this._syncRawValue();
		};
		_proto.smartQuoteMark = function smartQuoteMark(options) {
			var v$1 = this.value;
			var numSingleQuotes = v$1.replace(/[^']/g, "").length;
			var numDoubleQuotes = v$1.replace(/[^"]/g, "").length;
			if (numSingleQuotes + numDoubleQuotes === 0) {
				var escaped = (0, _cssesc$6["default"])(v$1, { isIdentifier: true });
				if (escaped === v$1) return Attribute$3.NO_QUOTE;
				else {
					var pref = this.preferredQuoteMark(options);
					if (pref === Attribute$3.NO_QUOTE) {
						var quote = this.quoteMark || options.quoteMark || Attribute$3.DOUBLE_QUOTE;
						var opts = CSSESC_QUOTE_OPTIONS$2[quote];
						var quoteValue = (0, _cssesc$6["default"])(v$1, opts);
						if (quoteValue.length < escaped.length) return quote;
					}
					return pref;
				}
			} else if (numDoubleQuotes === numSingleQuotes) return this.preferredQuoteMark(options);
			else if (numDoubleQuotes < numSingleQuotes) return Attribute$3.DOUBLE_QUOTE;
			else return Attribute$3.SINGLE_QUOTE;
		};
		_proto.preferredQuoteMark = function preferredQuoteMark(options) {
			var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;
			if (quoteMark === void 0) quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
			if (quoteMark === void 0) quoteMark = Attribute$3.DOUBLE_QUOTE;
			return quoteMark;
		};
		_proto._syncRawValue = function _syncRawValue() {
			var rawValue = (0, _cssesc$6["default"])(this._value, CSSESC_QUOTE_OPTIONS$2[this.quoteMark]);
			if (rawValue === this._value) {
				if (this.raws) delete this.raws.value;
			} else this.raws.value = rawValue;
		};
		_proto._handleEscapes = function _handleEscapes(prop, value) {
			if (this._constructed) {
				var escaped = (0, _cssesc$6["default"])(value, { isIdentifier: true });
				if (escaped !== value) this.raws[prop] = escaped;
				else delete this.raws[prop];
			}
		};
		_proto._spacesFor = function _spacesFor(name) {
			var attrSpaces = {
				before: "",
				after: ""
			};
			var spaces = this.spaces[name] || {};
			var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
			return Object.assign(attrSpaces, spaces, rawSpaces);
		};
		_proto._stringFor = function _stringFor(name, spaceName, concat) {
			if (spaceName === void 0) spaceName = name;
			if (concat === void 0) concat = defaultAttrConcat$2;
			var attrSpaces = this._spacesFor(spaceName);
			return concat(this.stringifyProperty(name), attrSpaces);
		};
		_proto.offsetOf = function offsetOf(name) {
			var count = 1;
			var attributeSpaces = this._spacesFor("attribute");
			count += attributeSpaces.before.length;
			if (name === "namespace" || name === "ns") return this.namespace ? count : -1;
			if (name === "attributeNS") return count;
			count += this.namespaceString.length;
			if (this.namespace) count += 1;
			if (name === "attribute") return count;
			count += this.stringifyProperty("attribute").length;
			count += attributeSpaces.after.length;
			var operatorSpaces = this._spacesFor("operator");
			count += operatorSpaces.before.length;
			var operator$1 = this.stringifyProperty("operator");
			if (name === "operator") return operator$1 ? count : -1;
			count += operator$1.length;
			count += operatorSpaces.after.length;
			var valueSpaces = this._spacesFor("value");
			count += valueSpaces.before.length;
			var value = this.stringifyProperty("value");
			if (name === "value") return value ? count : -1;
			count += value.length;
			count += valueSpaces.after.length;
			var insensitiveSpaces = this._spacesFor("insensitive");
			count += insensitiveSpaces.before.length;
			if (name === "insensitive") return this.insensitive ? count : -1;
			return -1;
		};
		_proto.toString = function toString$5() {
			var _this2 = this;
			var selector$3 = [this.rawSpaceBefore, "["];
			selector$3.push(this._stringFor("qualifiedAttribute", "attribute"));
			if (this.operator && (this.value || this.value === "")) {
				selector$3.push(this._stringFor("operator"));
				selector$3.push(this._stringFor("value"));
				selector$3.push(this._stringFor("insensitiveFlag", "insensitive", function(attrValue, attrSpaces) {
					if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) attrSpaces.before = " ";
					return defaultAttrConcat$2(attrValue, attrSpaces);
				}));
			}
			selector$3.push("]");
			selector$3.push(this.rawSpaceAfter);
			return selector$3.join("");
		};
		_createClass$15(Attribute$3, [
			{
				key: "quoted",
				get: function get$2() {
					var qm = this.quoteMark;
					return qm === "'" || qm === "\"";
				},
				set: function set(value) {
					warnOfDeprecatedQuotedAssignment$2();
				}
			},
			{
				key: "quoteMark",
				get: function get$2() {
					return this._quoteMark;
				},
				set: function set(quoteMark) {
					if (!this._constructed) {
						this._quoteMark = quoteMark;
						return;
					}
					if (this._quoteMark !== quoteMark) {
						this._quoteMark = quoteMark;
						this._syncRawValue();
					}
				}
			},
			{
				key: "qualifiedAttribute",
				get: function get$2() {
					return this.qualifiedName(this.raws.attribute || this.attribute);
				}
			},
			{
				key: "insensitiveFlag",
				get: function get$2() {
					return this.insensitive ? "i" : "";
				}
			},
			{
				key: "value",
				get: function get$2() {
					return this._value;
				},
				set: function set(v$1) {
					if (this._constructed) {
						var _unescapeValue2 = unescapeValue$2(v$1), deprecatedUsage = _unescapeValue2.deprecatedUsage, unescaped = _unescapeValue2.unescaped, quoteMark = _unescapeValue2.quoteMark;
						if (deprecatedUsage) warnOfDeprecatedValueAssignment$2();
						if (unescaped === this._value && quoteMark === this._quoteMark) return;
						this._value = unescaped;
						this._quoteMark = quoteMark;
						this._syncRawValue();
					} else this._value = v$1;
				}
			},
			{
				key: "insensitive",
				get: function get$2() {
					return this._insensitive;
				},
				set: function set(insensitive) {
					if (!insensitive) {
						this._insensitive = false;
						if (this.raws && (this.raws.insensitiveFlag === "I" || this.raws.insensitiveFlag === "i")) this.raws.insensitiveFlag = void 0;
					}
					this._insensitive = insensitive;
				}
			},
			{
				key: "attribute",
				get: function get$2() {
					return this._attribute;
				},
				set: function set(name) {
					this._handleEscapes("attribute", name);
					this._attribute = name;
				}
			}
		]);
		return Attribute$3;
	}(_namespace$7["default"]);
	exports["default"] = Attribute$2;
	Attribute$2.NO_QUOTE = null;
	Attribute$2.SINGLE_QUOTE = "'";
	Attribute$2.DOUBLE_QUOTE = "\"";
	var CSSESC_QUOTE_OPTIONS$2 = (_CSSESC_QUOTE_OPTIONS$2 = {
		"'": {
			quotes: "single",
			wrap: true
		},
		"\"": {
			quotes: "double",
			wrap: true
		}
	}, _CSSESC_QUOTE_OPTIONS$2[null] = { isIdentifier: true }, _CSSESC_QUOTE_OPTIONS$2);
	function defaultAttrConcat$2(attrValue, attrSpaces) {
		return "" + attrSpaces.before + attrValue + attrSpaces.after;
	}
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/universal.js
var require_universal$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/universal.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace$6 = _interopRequireDefault$67(require_namespace$2());
	var _types$33 = require_types$3();
	function _interopRequireDefault$67(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$30(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$30(subClass, superClass);
	}
	function _setPrototypeOf$30(o$2, p$2) {
		_setPrototypeOf$30 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$30(o$2, p$2);
	}
	var Universal$2 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$30(Universal$3, _Namespace);
		function Universal$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$33.UNIVERSAL;
			_this.value = "*";
			return _this;
		}
		return Universal$3;
	}(_namespace$6["default"]);
	exports["default"] = Universal$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/combinator.js
var require_combinator$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/combinator.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$17 = _interopRequireDefault$66(require_node$7());
	var _types$32 = require_types$3();
	function _interopRequireDefault$66(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$29(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$29(subClass, superClass);
	}
	function _setPrototypeOf$29(o$2, p$2) {
		_setPrototypeOf$29 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$29(o$2, p$2);
	}
	var Combinator$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$29(Combinator$3, _Node);
		function Combinator$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$32.COMBINATOR;
			return _this;
		}
		return Combinator$3;
	}(_node$17["default"]);
	exports["default"] = Combinator$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/nesting.js
var require_nesting$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/nesting.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$16 = _interopRequireDefault$65(require_node$7());
	var _types$31 = require_types$3();
	function _interopRequireDefault$65(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$28(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$28(subClass, superClass);
	}
	function _setPrototypeOf$28(o$2, p$2) {
		_setPrototypeOf$28 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$28(o$2, p$2);
	}
	var Nesting$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$28(Nesting$3, _Node);
		function Nesting$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$31.NESTING;
			_this.value = "&";
			return _this;
		}
		return Nesting$3;
	}(_node$16["default"]);
	exports["default"] = Nesting$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/sortAscending.js
var require_sortAscending$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/sortAscending.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = sortAscending$2;
	function sortAscending$2(list$4) {
		return list$4.sort(function(a$1, b$1) {
			return a$1 - b$1;
		});
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/tokenTypes.js
var require_tokenTypes$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/tokenTypes.js"(exports) {
	exports.__esModule = true;
	exports.word = exports.tilde = exports.tab = exports.str = exports.space = exports.slash = exports.singleQuote = exports.semicolon = exports.plus = exports.pipe = exports.openSquare = exports.openParenthesis = exports.newline = exports.greaterThan = exports.feed = exports.equals = exports.doubleQuote = exports.dollar = exports.cr = exports.comment = exports.comma = exports.combinator = exports.colon = exports.closeSquare = exports.closeParenthesis = exports.caret = exports.bang = exports.backslash = exports.at = exports.asterisk = exports.ampersand = void 0;
	var ampersand$2 = 38;
	exports.ampersand = ampersand$2;
	var asterisk$2 = 42;
	exports.asterisk = asterisk$2;
	var at$2 = 64;
	exports.at = at$2;
	var comma$3 = 44;
	exports.comma = comma$3;
	var colon$3 = 58;
	exports.colon = colon$3;
	var semicolon$2 = 59;
	exports.semicolon = semicolon$2;
	var openParenthesis$2 = 40;
	exports.openParenthesis = openParenthesis$2;
	var closeParenthesis$2 = 41;
	exports.closeParenthesis = closeParenthesis$2;
	var openSquare$2 = 91;
	exports.openSquare = openSquare$2;
	var closeSquare$2 = 93;
	exports.closeSquare = closeSquare$2;
	var dollar$2 = 36;
	exports.dollar = dollar$2;
	var tilde$2 = 126;
	exports.tilde = tilde$2;
	var caret$2 = 94;
	exports.caret = caret$2;
	var plus$4 = 43;
	exports.plus = plus$4;
	var equals$2 = 61;
	exports.equals = equals$2;
	var pipe$2 = 124;
	exports.pipe = pipe$2;
	var greaterThan$2 = 62;
	exports.greaterThan = greaterThan$2;
	var space$2 = 32;
	exports.space = space$2;
	var singleQuote$3 = 39;
	exports.singleQuote = singleQuote$3;
	var doubleQuote$3 = 34;
	exports.doubleQuote = doubleQuote$3;
	var slash$3 = 47;
	exports.slash = slash$3;
	var bang$2 = 33;
	exports.bang = bang$2;
	var backslash$3 = 92;
	exports.backslash = backslash$3;
	var cr$3 = 13;
	exports.cr = cr$3;
	var feed$2 = 12;
	exports.feed = feed$2;
	var newline$2 = 10;
	exports.newline = newline$2;
	var tab$2 = 9;
	exports.tab = tab$2;
	var str$3 = singleQuote$3;
	exports.str = str$3;
	var comment$5 = -1;
	exports.comment = comment$5;
	var word$2 = -2;
	exports.word = word$2;
	var combinator$5 = -3;
	exports.combinator = combinator$5;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/tokenize.js
var require_tokenize$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/tokenize.js"(exports) {
	exports.__esModule = true;
	exports.FIELDS = void 0;
	exports["default"] = tokenize$3;
	var t$8 = _interopRequireWildcard$13(require_tokenTypes$2());
	var _unescapable$2, _wordDelimiters$2;
	function _getRequireWildcardCache$10(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$10 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$13(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$10(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	var unescapable$2 = (_unescapable$2 = {}, _unescapable$2[t$8.tab] = true, _unescapable$2[t$8.newline] = true, _unescapable$2[t$8.cr] = true, _unescapable$2[t$8.feed] = true, _unescapable$2);
	var wordDelimiters$2 = (_wordDelimiters$2 = {}, _wordDelimiters$2[t$8.space] = true, _wordDelimiters$2[t$8.tab] = true, _wordDelimiters$2[t$8.newline] = true, _wordDelimiters$2[t$8.cr] = true, _wordDelimiters$2[t$8.feed] = true, _wordDelimiters$2[t$8.ampersand] = true, _wordDelimiters$2[t$8.asterisk] = true, _wordDelimiters$2[t$8.bang] = true, _wordDelimiters$2[t$8.comma] = true, _wordDelimiters$2[t$8.colon] = true, _wordDelimiters$2[t$8.semicolon] = true, _wordDelimiters$2[t$8.openParenthesis] = true, _wordDelimiters$2[t$8.closeParenthesis] = true, _wordDelimiters$2[t$8.openSquare] = true, _wordDelimiters$2[t$8.closeSquare] = true, _wordDelimiters$2[t$8.singleQuote] = true, _wordDelimiters$2[t$8.doubleQuote] = true, _wordDelimiters$2[t$8.plus] = true, _wordDelimiters$2[t$8.pipe] = true, _wordDelimiters$2[t$8.tilde] = true, _wordDelimiters$2[t$8.greaterThan] = true, _wordDelimiters$2[t$8.equals] = true, _wordDelimiters$2[t$8.dollar] = true, _wordDelimiters$2[t$8.caret] = true, _wordDelimiters$2[t$8.slash] = true, _wordDelimiters$2);
	var hex$2 = {};
	var hexChars$2 = "0123456789abcdefABCDEF";
	for (var i$5 = 0; i$5 < hexChars$2.length; i$5++) hex$2[hexChars$2.charCodeAt(i$5)] = true;
	/**
	*  Returns the last index of the bar css word
	* @param {string} css The string in which the word begins
	* @param {number} start The index into the string where word's first letter occurs
	*/
	function consumeWord$2(css, start) {
		var next = start;
		var code$1;
		do {
			code$1 = css.charCodeAt(next);
			if (wordDelimiters$2[code$1]) return next - 1;
			else if (code$1 === t$8.backslash) next = consumeEscape$2(css, next) + 1;
			else next++;
		} while (next < css.length);
		return next - 1;
	}
	/**
	*  Returns the last index of the escape sequence
	* @param {string} css The string in which the sequence begins
	* @param {number} start The index into the string where escape character (`\`) occurs.
	*/
	function consumeEscape$2(css, start) {
		var next = start;
		var code$1 = css.charCodeAt(next + 1);
		if (unescapable$2[code$1]) {} else if (hex$2[code$1]) {
			var hexDigits = 0;
			do {
				next++;
				hexDigits++;
				code$1 = css.charCodeAt(next + 1);
			} while (hex$2[code$1] && hexDigits < 6);
			if (hexDigits < 6 && code$1 === t$8.space) next++;
		} else next++;
		return next;
	}
	var FIELDS$2 = {
		TYPE: 0,
		START_LINE: 1,
		START_COL: 2,
		END_LINE: 3,
		END_COL: 4,
		START_POS: 5,
		END_POS: 6
	};
	exports.FIELDS = FIELDS$2;
	function tokenize$3(input) {
		var tokens$3 = [];
		var css = input.css.valueOf();
		var _css = css, length = _css.length;
		var offset = -1;
		var line = 1;
		var start = 0;
		var end = 0;
		var code$1, content, endColumn, endLine, escaped, escapePos, last$2, lines, next, nextLine, nextOffset, quote, tokenType;
		function unclosed(what, fix) {
			if (input.safe) {
				css += fix;
				next = css.length - 1;
			} else throw input.error("Unclosed " + what, line, start - offset, start);
		}
		while (start < length) {
			code$1 = css.charCodeAt(start);
			if (code$1 === t$8.newline) {
				offset = start;
				line += 1;
			}
			switch (code$1) {
				case t$8.space:
				case t$8.tab:
				case t$8.newline:
				case t$8.cr:
				case t$8.feed:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
						if (code$1 === t$8.newline) {
							offset = next;
							line += 1;
						}
					} while (code$1 === t$8.space || code$1 === t$8.newline || code$1 === t$8.tab || code$1 === t$8.cr || code$1 === t$8.feed);
					tokenType = t$8.space;
					endLine = line;
					endColumn = next - offset - 1;
					end = next;
					break;
				case t$8.plus:
				case t$8.greaterThan:
				case t$8.tilde:
				case t$8.pipe:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
					} while (code$1 === t$8.plus || code$1 === t$8.greaterThan || code$1 === t$8.tilde || code$1 === t$8.pipe);
					tokenType = t$8.combinator;
					endLine = line;
					endColumn = start - offset;
					end = next;
					break;
				case t$8.asterisk:
				case t$8.ampersand:
				case t$8.bang:
				case t$8.comma:
				case t$8.equals:
				case t$8.dollar:
				case t$8.caret:
				case t$8.openSquare:
				case t$8.closeSquare:
				case t$8.colon:
				case t$8.semicolon:
				case t$8.openParenthesis:
				case t$8.closeParenthesis:
					next = start;
					tokenType = code$1;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				case t$8.singleQuote:
				case t$8.doubleQuote:
					quote = code$1 === t$8.singleQuote ? "'" : "\"";
					next = start;
					do {
						escaped = false;
						next = css.indexOf(quote, next + 1);
						if (next === -1) unclosed("quote", quote);
						escapePos = next;
						while (css.charCodeAt(escapePos - 1) === t$8.backslash) {
							escapePos -= 1;
							escaped = !escaped;
						}
					} while (escaped);
					tokenType = t$8.str;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				default:
					if (code$1 === t$8.slash && css.charCodeAt(start + 1) === t$8.asterisk) {
						next = css.indexOf("*/", start + 2) + 1;
						if (next === 0) unclosed("comment", "*/");
						content = css.slice(start, next + 1);
						lines = content.split("\n");
						last$2 = lines.length - 1;
						if (last$2 > 0) {
							nextLine = line + last$2;
							nextOffset = next - lines[last$2].length;
						} else {
							nextLine = line;
							nextOffset = offset;
						}
						tokenType = t$8.comment;
						line = nextLine;
						endLine = nextLine;
						endColumn = next - nextOffset;
					} else if (code$1 === t$8.slash) {
						next = start;
						tokenType = code$1;
						endLine = line;
						endColumn = start - offset;
						end = next + 1;
					} else {
						next = consumeWord$2(css, start);
						tokenType = t$8.word;
						endLine = line;
						endColumn = next - offset;
					}
					end = next + 1;
					break;
			}
			tokens$3.push([
				tokenType,
				line,
				start - offset,
				endLine,
				endColumn,
				start,
				end
			]);
			if (nextOffset) {
				offset = nextOffset;
				nextOffset = null;
			}
			start = end;
		}
		return tokens$3;
	}
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/parser.js
var require_parser$4 = __commonJS({ "node_modules/postcss-selector-parser/dist/parser.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _root$5 = _interopRequireDefault$64(require_root$2());
	var _selector$5 = _interopRequireDefault$64(require_selector$2());
	var _className$5 = _interopRequireDefault$64(require_className$2());
	var _comment$5 = _interopRequireDefault$64(require_comment$2());
	var _id$5 = _interopRequireDefault$64(require_id$2());
	var _tag$5 = _interopRequireDefault$64(require_tag$2());
	var _string$6 = _interopRequireDefault$64(require_string$3());
	var _pseudo$5 = _interopRequireDefault$64(require_pseudo$2());
	var _attribute$5 = _interopRequireWildcard$12(require_attribute$2());
	var _universal$5 = _interopRequireDefault$64(require_universal$2());
	var _combinator$5 = _interopRequireDefault$64(require_combinator$2());
	var _nesting$5 = _interopRequireDefault$64(require_nesting$2());
	var _sortAscending$2 = _interopRequireDefault$64(require_sortAscending$2());
	var _tokenize$2 = _interopRequireWildcard$12(require_tokenize$2());
	var tokens$2 = _interopRequireWildcard$12(require_tokenTypes$2());
	var types$4 = _interopRequireWildcard$12(require_types$3());
	var _util$10 = require_util$4();
	var _WHITESPACE_TOKENS$2, _Object$assign$2;
	function _getRequireWildcardCache$9(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$9 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$12(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$9(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$64(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$14(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$14(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$14(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$14(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var WHITESPACE_TOKENS$2 = (_WHITESPACE_TOKENS$2 = {}, _WHITESPACE_TOKENS$2[tokens$2.space] = true, _WHITESPACE_TOKENS$2[tokens$2.cr] = true, _WHITESPACE_TOKENS$2[tokens$2.feed] = true, _WHITESPACE_TOKENS$2[tokens$2.newline] = true, _WHITESPACE_TOKENS$2[tokens$2.tab] = true, _WHITESPACE_TOKENS$2);
	var WHITESPACE_EQUIV_TOKENS$2 = Object.assign({}, WHITESPACE_TOKENS$2, (_Object$assign$2 = {}, _Object$assign$2[tokens$2.comment] = true, _Object$assign$2));
	function tokenStart$2(token$1) {
		return {
			line: token$1[_tokenize$2.FIELDS.START_LINE],
			column: token$1[_tokenize$2.FIELDS.START_COL]
		};
	}
	function tokenEnd$2(token$1) {
		return {
			line: token$1[_tokenize$2.FIELDS.END_LINE],
			column: token$1[_tokenize$2.FIELDS.END_COL]
		};
	}
	function getSource$4(startLine, startColumn, endLine, endColumn) {
		return {
			start: {
				line: startLine,
				column: startColumn
			},
			end: {
				line: endLine,
				column: endColumn
			}
		};
	}
	function getTokenSource$2(token$1) {
		return getSource$4(token$1[_tokenize$2.FIELDS.START_LINE], token$1[_tokenize$2.FIELDS.START_COL], token$1[_tokenize$2.FIELDS.END_LINE], token$1[_tokenize$2.FIELDS.END_COL]);
	}
	function getTokenSourceSpan$2(startToken, endToken) {
		if (!startToken) return void 0;
		return getSource$4(startToken[_tokenize$2.FIELDS.START_LINE], startToken[_tokenize$2.FIELDS.START_COL], endToken[_tokenize$2.FIELDS.END_LINE], endToken[_tokenize$2.FIELDS.END_COL]);
	}
	function unescapeProp$2(node, prop) {
		var value = node[prop];
		if (typeof value !== "string") return;
		if (value.indexOf("\\") !== -1) {
			(0, _util$10.ensureObject)(node, "raws");
			node[prop] = (0, _util$10.unesc)(value);
			if (node.raws[prop] === void 0) node.raws[prop] = value;
		}
		return node;
	}
	function indexesOf$2(array, item) {
		var i$6 = -1;
		var indexes = [];
		while ((i$6 = array.indexOf(item, i$6 + 1)) !== -1) indexes.push(i$6);
		return indexes;
	}
	function uniqs$2() {
		var list$4 = Array.prototype.concat.apply([], arguments);
		return list$4.filter(function(item, i$6) {
			return i$6 === list$4.indexOf(item);
		});
	}
	var Parser$4 = /* @__PURE__ */ function() {
		function Parser$10(rule$1, options) {
			if (options === void 0) options = {};
			this.rule = rule$1;
			this.options = Object.assign({
				lossy: false,
				safe: false
			}, options);
			this.position = 0;
			this.css = typeof this.rule === "string" ? this.rule : this.rule.selector;
			this.tokens = (0, _tokenize$2["default"])({
				css: this.css,
				error: this._errorGenerator(),
				safe: this.options.safe
			});
			var rootSource = getTokenSourceSpan$2(this.tokens[0], this.tokens[this.tokens.length - 1]);
			this.root = new _root$5["default"]({ source: rootSource });
			this.root.errorGenerator = this._errorGenerator();
			var selector$3 = new _selector$5["default"]({
				source: { start: {
					line: 1,
					column: 1
				} },
				sourceIndex: 0
			});
			this.root.append(selector$3);
			this.current = selector$3;
			this.loop();
		}
		var _proto = Parser$10.prototype;
		_proto._errorGenerator = function _errorGenerator() {
			var _this = this;
			return function(message, errorOptions) {
				if (typeof _this.rule === "string") return new Error(message);
				return _this.rule.error(message, errorOptions);
			};
		};
		_proto.attribute = function attribute$3() {
			var attr = [];
			var startingToken = this.currToken;
			this.position++;
			while (this.position < this.tokens.length && this.currToken[_tokenize$2.FIELDS.TYPE] !== tokens$2.closeSquare) {
				attr.push(this.currToken);
				this.position++;
			}
			if (this.currToken[_tokenize$2.FIELDS.TYPE] !== tokens$2.closeSquare) return this.expected("closing square bracket", this.currToken[_tokenize$2.FIELDS.START_POS]);
			var len = attr.length;
			var node = {
				source: getSource$4(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
				sourceIndex: startingToken[_tokenize$2.FIELDS.START_POS]
			};
			if (len === 1 && !~[tokens$2.word].indexOf(attr[0][_tokenize$2.FIELDS.TYPE])) return this.expected("attribute", attr[0][_tokenize$2.FIELDS.START_POS]);
			var pos = 0;
			var spaceBefore = "";
			var commentBefore = "";
			var lastAdded = null;
			var spaceAfterMeaningfulToken = false;
			while (pos < len) {
				var token$1 = attr[pos];
				var content = this.content(token$1);
				var next = attr[pos + 1];
				switch (token$1[_tokenize$2.FIELDS.TYPE]) {
					case tokens$2.space:
						spaceAfterMeaningfulToken = true;
						if (this.options.lossy) break;
						if (lastAdded) {
							(0, _util$10.ensureObject)(node, "spaces", lastAdded);
							var prevContent = node.spaces[lastAdded].after || "";
							node.spaces[lastAdded].after = prevContent + content;
							var existingComment = (0, _util$10.getProp)(node, "raws", "spaces", lastAdded, "after") || null;
							if (existingComment) node.raws.spaces[lastAdded].after = existingComment + content;
						} else {
							spaceBefore = spaceBefore + content;
							commentBefore = commentBefore + content;
						}
						break;
					case tokens$2.asterisk:
						if (next[_tokenize$2.FIELDS.TYPE] === tokens$2.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
							if (spaceBefore) {
								(0, _util$10.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$10.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = spaceBefore;
								commentBefore = "";
							}
							node.namespace = (node.namespace || "") + content;
							var rawValue = (0, _util$10.getProp)(node, "raws", "namespace") || null;
							if (rawValue) node.raws.namespace += content;
							lastAdded = "namespace";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.dollar: if (lastAdded === "value") {
						var oldRawValue = (0, _util$10.getProp)(node, "raws", "value");
						node.value += "$";
						if (oldRawValue) node.raws.value = oldRawValue + "$";
						break;
					}
					case tokens$2.caret:
						if (next[_tokenize$2.FIELDS.TYPE] === tokens$2.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.combinator:
						if (content === "~" && next[_tokenize$2.FIELDS.TYPE] === tokens$2.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						if (content !== "|") {
							spaceAfterMeaningfulToken = false;
							break;
						}
						if (next[_tokenize$2.FIELDS.TYPE] === tokens$2.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if (!node.namespace && !node.attribute) node.namespace = true;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.word:
						if (next && this.content(next) === "|" && attr[pos + 2] && attr[pos + 2][_tokenize$2.FIELDS.TYPE] !== tokens$2.equals && !node.operator && !node.namespace) {
							node.namespace = content;
							lastAdded = "namespace";
						} else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
							if (spaceBefore) {
								(0, _util$10.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$10.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = commentBefore;
								commentBefore = "";
							}
							node.attribute = (node.attribute || "") + content;
							var _rawValue = (0, _util$10.getProp)(node, "raws", "attribute") || null;
							if (_rawValue) node.raws.attribute += content;
							lastAdded = "attribute";
						} else if (!node.value && node.value !== "" || lastAdded === "value" && !(spaceAfterMeaningfulToken || node.quoteMark)) {
							var _unescaped = (0, _util$10.unesc)(content);
							var _oldRawValue = (0, _util$10.getProp)(node, "raws", "value") || "";
							var oldValue = node.value || "";
							node.value = oldValue + _unescaped;
							node.quoteMark = null;
							if (_unescaped !== content || _oldRawValue) {
								(0, _util$10.ensureObject)(node, "raws");
								node.raws.value = (_oldRawValue || oldValue) + content;
							}
							lastAdded = "value";
						} else {
							var insensitive = content === "i" || content === "I";
							if ((node.value || node.value === "") && (node.quoteMark || spaceAfterMeaningfulToken)) {
								node.insensitive = insensitive;
								if (!insensitive || content === "I") {
									(0, _util$10.ensureObject)(node, "raws");
									node.raws.insensitiveFlag = content;
								}
								lastAdded = "insensitive";
								if (spaceBefore) {
									(0, _util$10.ensureObject)(node, "spaces", "insensitive");
									node.spaces.insensitive.before = spaceBefore;
									spaceBefore = "";
								}
								if (commentBefore) {
									(0, _util$10.ensureObject)(node, "raws", "spaces", "insensitive");
									node.raws.spaces.insensitive.before = commentBefore;
									commentBefore = "";
								}
							} else if (node.value || node.value === "") {
								lastAdded = "value";
								node.value += content;
								if (node.raws.value) node.raws.value += content;
							}
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.str:
						if (!node.attribute || !node.operator) return this.error("Expected an attribute followed by an operator preceding the string.", { index: token$1[_tokenize$2.FIELDS.START_POS] });
						var _unescapeValue = (0, _attribute$5.unescapeValue)(content), unescaped = _unescapeValue.unescaped, quoteMark = _unescapeValue.quoteMark;
						node.value = unescaped;
						node.quoteMark = quoteMark;
						lastAdded = "value";
						(0, _util$10.ensureObject)(node, "raws");
						node.raws.value = content;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.equals:
						if (!node.attribute) return this.expected("attribute", token$1[_tokenize$2.FIELDS.START_POS], content);
						if (node.value) return this.error("Unexpected \"=\" found; an operator was already defined.", { index: token$1[_tokenize$2.FIELDS.START_POS] });
						node.operator = node.operator ? node.operator + content : content;
						lastAdded = "operator";
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$2.comment:
						if (lastAdded) if (spaceAfterMeaningfulToken || next && next[_tokenize$2.FIELDS.TYPE] === tokens$2.space || lastAdded === "insensitive") {
							var lastComment = (0, _util$10.getProp)(node, "spaces", lastAdded, "after") || "";
							var rawLastComment = (0, _util$10.getProp)(node, "raws", "spaces", lastAdded, "after") || lastComment;
							(0, _util$10.ensureObject)(node, "raws", "spaces", lastAdded);
							node.raws.spaces[lastAdded].after = rawLastComment + content;
						} else {
							var lastValue = node[lastAdded] || "";
							var rawLastValue = (0, _util$10.getProp)(node, "raws", lastAdded) || lastValue;
							(0, _util$10.ensureObject)(node, "raws");
							node.raws[lastAdded] = rawLastValue + content;
						}
						else commentBefore = commentBefore + content;
						break;
					default: return this.error("Unexpected \"" + content + "\" found.", { index: token$1[_tokenize$2.FIELDS.START_POS] });
				}
				pos++;
			}
			unescapeProp$2(node, "attribute");
			unescapeProp$2(node, "namespace");
			this.newNode(new _attribute$5["default"](node));
			this.position++;
		};
		_proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
			if (stopPosition < 0) stopPosition = this.tokens.length;
			var startPosition = this.position;
			var nodes$1 = [];
			var space$3 = "";
			var lastComment = void 0;
			do
				if (WHITESPACE_TOKENS$2[this.currToken[_tokenize$2.FIELDS.TYPE]]) {
					if (!this.options.lossy) space$3 += this.content();
				} else if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.comment) {
					var spaces = {};
					if (space$3) {
						spaces.before = space$3;
						space$3 = "";
					}
					lastComment = new _comment$5["default"]({
						value: this.content(),
						source: getTokenSource$2(this.currToken),
						sourceIndex: this.currToken[_tokenize$2.FIELDS.START_POS],
						spaces
					});
					nodes$1.push(lastComment);
				}
			while (++this.position < stopPosition);
			if (space$3) {
				if (lastComment) lastComment.spaces.after = space$3;
				else if (!this.options.lossy) {
					var firstToken = this.tokens[startPosition];
					var lastToken = this.tokens[this.position - 1];
					nodes$1.push(new _string$6["default"]({
						value: "",
						source: getSource$4(firstToken[_tokenize$2.FIELDS.START_LINE], firstToken[_tokenize$2.FIELDS.START_COL], lastToken[_tokenize$2.FIELDS.END_LINE], lastToken[_tokenize$2.FIELDS.END_COL]),
						sourceIndex: firstToken[_tokenize$2.FIELDS.START_POS],
						spaces: {
							before: space$3,
							after: ""
						}
					}));
				}
			}
			return nodes$1;
		};
		_proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes$1, requiredSpace) {
			var _this2 = this;
			if (requiredSpace === void 0) requiredSpace = false;
			var space$3 = "";
			var rawSpace = "";
			nodes$1.forEach(function(n$4) {
				var spaceBefore = _this2.lossySpace(n$4.spaces.before, requiredSpace);
				var rawSpaceBefore = _this2.lossySpace(n$4.rawSpaceBefore, requiredSpace);
				space$3 += spaceBefore + _this2.lossySpace(n$4.spaces.after, requiredSpace && spaceBefore.length === 0);
				rawSpace += spaceBefore + n$4.value + _this2.lossySpace(n$4.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
			});
			if (rawSpace === space$3) rawSpace = void 0;
			var result = {
				space: space$3,
				rawSpace
			};
			return result;
		};
		_proto.isNamedCombinator = function isNamedCombinator(position) {
			if (position === void 0) position = this.position;
			return this.tokens[position + 0] && this.tokens[position + 0][_tokenize$2.FIELDS.TYPE] === tokens$2.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize$2.FIELDS.TYPE] === tokens$2.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize$2.FIELDS.TYPE] === tokens$2.slash;
		};
		_proto.namedCombinator = function namedCombinator() {
			if (this.isNamedCombinator()) {
				var nameRaw = this.content(this.tokens[this.position + 1]);
				var name = (0, _util$10.unesc)(nameRaw).toLowerCase();
				var raws = {};
				if (name !== nameRaw) raws.value = "/" + nameRaw + "/";
				var node = new _combinator$5["default"]({
					value: "/" + name + "/",
					source: getSource$4(this.currToken[_tokenize$2.FIELDS.START_LINE], this.currToken[_tokenize$2.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize$2.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize$2.FIELDS.END_COL]),
					sourceIndex: this.currToken[_tokenize$2.FIELDS.START_POS],
					raws
				});
				this.position = this.position + 3;
				return node;
			} else this.unexpected();
		};
		_proto.combinator = function combinator$6() {
			var _this3 = this;
			if (this.content() === "|") return this.namespace();
			var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);
			if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize$2.FIELDS.TYPE] === tokens$2.comma || this.tokens[nextSigTokenPos][_tokenize$2.FIELDS.TYPE] === tokens$2.closeParenthesis) {
				var nodes$1 = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
				if (nodes$1.length > 0) {
					var last$2 = this.current.last;
					if (last$2) {
						var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes$1), space$3 = _this$convertWhitespa.space, rawSpace = _this$convertWhitespa.rawSpace;
						if (rawSpace !== void 0) last$2.rawSpaceAfter += rawSpace;
						last$2.spaces.after += space$3;
					} else nodes$1.forEach(function(n$4) {
						return _this3.newNode(n$4);
					});
				}
				return;
			}
			var firstToken = this.currToken;
			var spaceOrDescendantSelectorNodes = void 0;
			if (nextSigTokenPos > this.position) spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
			var node;
			if (this.isNamedCombinator()) node = this.namedCombinator();
			else if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.combinator) {
				node = new _combinator$5["default"]({
					value: this.content(),
					source: getTokenSource$2(this.currToken),
					sourceIndex: this.currToken[_tokenize$2.FIELDS.START_POS]
				});
				this.position++;
			} else if (WHITESPACE_TOKENS$2[this.currToken[_tokenize$2.FIELDS.TYPE]]) {} else if (!spaceOrDescendantSelectorNodes) this.unexpected();
			if (node) {
				if (spaceOrDescendantSelectorNodes) {
					var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes), _space = _this$convertWhitespa2.space, _rawSpace = _this$convertWhitespa2.rawSpace;
					node.spaces.before = _space;
					node.rawSpaceBefore = _rawSpace;
				}
			} else {
				var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true), _space2 = _this$convertWhitespa3.space, _rawSpace2 = _this$convertWhitespa3.rawSpace;
				if (!_rawSpace2) _rawSpace2 = _space2;
				var spaces = {};
				var raws = { spaces: {} };
				if (_space2.endsWith(" ") && _rawSpace2.endsWith(" ")) {
					spaces.before = _space2.slice(0, _space2.length - 1);
					raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
				} else if (_space2.startsWith(" ") && _rawSpace2.startsWith(" ")) {
					spaces.after = _space2.slice(1);
					raws.spaces.after = _rawSpace2.slice(1);
				} else raws.value = _rawSpace2;
				node = new _combinator$5["default"]({
					value: " ",
					source: getTokenSourceSpan$2(firstToken, this.tokens[this.position - 1]),
					sourceIndex: firstToken[_tokenize$2.FIELDS.START_POS],
					spaces,
					raws
				});
			}
			if (this.currToken && this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.space) {
				node.spaces.after = this.optionalSpace(this.content());
				this.position++;
			}
			return this.newNode(node);
		};
		_proto.comma = function comma$5() {
			if (this.position === this.tokens.length - 1) {
				this.root.trailingComma = true;
				this.position++;
				return;
			}
			this.current._inferEndPosition();
			var selector$3 = new _selector$5["default"]({
				source: { start: tokenStart$2(this.tokens[this.position + 1]) },
				sourceIndex: this.tokens[this.position + 1][_tokenize$2.FIELDS.START_POS]
			});
			this.current.parent.append(selector$3);
			this.current = selector$3;
			this.position++;
		};
		_proto.comment = function comment$7() {
			var current = this.currToken;
			this.newNode(new _comment$5["default"]({
				value: this.content(),
				source: getTokenSource$2(current),
				sourceIndex: current[_tokenize$2.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.error = function error(message, opts) {
			throw this.root.error(message, opts);
		};
		_proto.missingBackslash = function missingBackslash() {
			return this.error("Expected a backslash preceding the semicolon.", { index: this.currToken[_tokenize$2.FIELDS.START_POS] });
		};
		_proto.missingParenthesis = function missingParenthesis() {
			return this.expected("opening parenthesis", this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.missingSquareBracket = function missingSquareBracket() {
			return this.expected("opening square bracket", this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.unexpected = function unexpected() {
			return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.unexpectedPipe = function unexpectedPipe() {
			return this.error("Unexpected '|'.", this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.namespace = function namespace() {
			var before = this.prevToken && this.content(this.prevToken) || true;
			if (this.nextToken[_tokenize$2.FIELDS.TYPE] === tokens$2.word) {
				this.position++;
				return this.word(before);
			} else if (this.nextToken[_tokenize$2.FIELDS.TYPE] === tokens$2.asterisk) {
				this.position++;
				return this.universal(before);
			}
			this.unexpectedPipe();
		};
		_proto.nesting = function nesting$3() {
			if (this.nextToken) {
				var nextContent = this.content(this.nextToken);
				if (nextContent === "|") {
					this.position++;
					return;
				}
			}
			var current = this.currToken;
			this.newNode(new _nesting$5["default"]({
				value: this.content(),
				source: getTokenSource$2(current),
				sourceIndex: current[_tokenize$2.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.parentheses = function parentheses() {
			var last$2 = this.current.last;
			var unbalanced = 1;
			this.position++;
			if (last$2 && last$2.type === types$4.PSEUDO) {
				var selector$3 = new _selector$5["default"]({
					source: { start: tokenStart$2(this.tokens[this.position]) },
					sourceIndex: this.tokens[this.position][_tokenize$2.FIELDS.START_POS]
				});
				var cache$3 = this.current;
				last$2.append(selector$3);
				this.current = selector$3;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.closeParenthesis) unbalanced--;
					if (unbalanced) this.parse();
					else {
						this.current.source.end = tokenEnd$2(this.currToken);
						this.current.parent.source.end = tokenEnd$2(this.currToken);
						this.position++;
					}
				}
				this.current = cache$3;
			} else {
				var parenStart = this.currToken;
				var parenValue = "(";
				var parenEnd;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.closeParenthesis) unbalanced--;
					parenEnd = this.currToken;
					parenValue += this.parseParenthesisToken(this.currToken);
					this.position++;
				}
				if (last$2) last$2.appendToPropertyAndEscape("value", parenValue, parenValue);
				else this.newNode(new _string$6["default"]({
					value: parenValue,
					source: getSource$4(parenStart[_tokenize$2.FIELDS.START_LINE], parenStart[_tokenize$2.FIELDS.START_COL], parenEnd[_tokenize$2.FIELDS.END_LINE], parenEnd[_tokenize$2.FIELDS.END_COL]),
					sourceIndex: parenStart[_tokenize$2.FIELDS.START_POS]
				}));
			}
			if (unbalanced) return this.expected("closing parenthesis", this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.pseudo = function pseudo$3() {
			var _this4 = this;
			var pseudoStr = "";
			var startingToken = this.currToken;
			while (this.currToken && this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.colon) {
				pseudoStr += this.content();
				this.position++;
			}
			if (!this.currToken) return this.expected(["pseudo-class", "pseudo-element"], this.position - 1);
			if (this.currToken[_tokenize$2.FIELDS.TYPE] === tokens$2.word) this.splitWord(false, function(first, length) {
				pseudoStr += first;
				_this4.newNode(new _pseudo$5["default"]({
					value: pseudoStr,
					source: getTokenSourceSpan$2(startingToken, _this4.currToken),
					sourceIndex: startingToken[_tokenize$2.FIELDS.START_POS]
				}));
				if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize$2.FIELDS.TYPE] === tokens$2.openParenthesis) _this4.error("Misplaced parenthesis.", { index: _this4.nextToken[_tokenize$2.FIELDS.START_POS] });
			});
			else return this.expected(["pseudo-class", "pseudo-element"], this.currToken[_tokenize$2.FIELDS.START_POS]);
		};
		_proto.space = function space$3() {
			var content = this.content();
			if (this.position === 0 || this.prevToken[_tokenize$2.FIELDS.TYPE] === tokens$2.comma || this.prevToken[_tokenize$2.FIELDS.TYPE] === tokens$2.openParenthesis || this.current.nodes.every(function(node) {
				return node.type === "comment";
			})) {
				this.spaces = this.optionalSpace(content);
				this.position++;
			} else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize$2.FIELDS.TYPE] === tokens$2.comma || this.nextToken[_tokenize$2.FIELDS.TYPE] === tokens$2.closeParenthesis) {
				this.current.last.spaces.after = this.optionalSpace(content);
				this.position++;
			} else this.combinator();
		};
		_proto.string = function string$3() {
			var current = this.currToken;
			this.newNode(new _string$6["default"]({
				value: this.content(),
				source: getTokenSource$2(current),
				sourceIndex: current[_tokenize$2.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.universal = function universal$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			var current = this.currToken;
			this.newNode(new _universal$5["default"]({
				value: this.content(),
				source: getTokenSource$2(current),
				sourceIndex: current[_tokenize$2.FIELDS.START_POS]
			}), namespace);
			this.position++;
		};
		_proto.splitWord = function splitWord(namespace, firstCallback) {
			var _this5 = this;
			var nextToken = this.nextToken;
			var word$3 = this.content();
			while (nextToken && ~[
				tokens$2.dollar,
				tokens$2.caret,
				tokens$2.equals,
				tokens$2.word
			].indexOf(nextToken[_tokenize$2.FIELDS.TYPE])) {
				this.position++;
				var current = this.content();
				word$3 += current;
				if (current.lastIndexOf("\\") === current.length - 1) {
					var next = this.nextToken;
					if (next && next[_tokenize$2.FIELDS.TYPE] === tokens$2.space) {
						word$3 += this.requiredSpace(this.content(next));
						this.position++;
					}
				}
				nextToken = this.nextToken;
			}
			var hasClass = indexesOf$2(word$3, ".").filter(function(i$6) {
				var escapedDot = word$3[i$6 - 1] === "\\";
				var isKeyframesPercent = /^\d+\.\d+%$/.test(word$3);
				return !escapedDot && !isKeyframesPercent;
			});
			var hasId = indexesOf$2(word$3, "#").filter(function(i$6) {
				return word$3[i$6 - 1] !== "\\";
			});
			var interpolations = indexesOf$2(word$3, "#{");
			if (interpolations.length) hasId = hasId.filter(function(hashIndex) {
				return !~interpolations.indexOf(hashIndex);
			});
			var indices = (0, _sortAscending$2["default"])(uniqs$2([0].concat(hasClass, hasId)));
			indices.forEach(function(ind, i$6) {
				var index$1 = indices[i$6 + 1] || word$3.length;
				var value = word$3.slice(ind, index$1);
				if (i$6 === 0 && firstCallback) return firstCallback.call(_this5, value, indices.length);
				var node;
				var current$1 = _this5.currToken;
				var sourceIndex = current$1[_tokenize$2.FIELDS.START_POS] + indices[i$6];
				var source = getSource$4(current$1[1], current$1[2] + ind, current$1[3], current$1[2] + (index$1 - 1));
				if (~hasClass.indexOf(ind)) {
					var classNameOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _className$5["default"](unescapeProp$2(classNameOpts, "value"));
				} else if (~hasId.indexOf(ind)) {
					var idOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _id$5["default"](unescapeProp$2(idOpts, "value"));
				} else {
					var tagOpts = {
						value,
						source,
						sourceIndex
					};
					unescapeProp$2(tagOpts, "value");
					node = new _tag$5["default"](tagOpts);
				}
				_this5.newNode(node, namespace);
				namespace = null;
			});
			this.position++;
		};
		_proto.word = function word$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			return this.splitWord(namespace);
		};
		_proto.loop = function loop() {
			while (this.position < this.tokens.length) this.parse(true);
			this.current._inferEndPosition();
			return this.root;
		};
		_proto.parse = function parse$17(throwOnParenthesis) {
			switch (this.currToken[_tokenize$2.FIELDS.TYPE]) {
				case tokens$2.space:
					this.space();
					break;
				case tokens$2.comment:
					this.comment();
					break;
				case tokens$2.openParenthesis:
					this.parentheses();
					break;
				case tokens$2.closeParenthesis:
					if (throwOnParenthesis) this.missingParenthesis();
					break;
				case tokens$2.openSquare:
					this.attribute();
					break;
				case tokens$2.dollar:
				case tokens$2.caret:
				case tokens$2.equals:
				case tokens$2.word:
					this.word();
					break;
				case tokens$2.colon:
					this.pseudo();
					break;
				case tokens$2.comma:
					this.comma();
					break;
				case tokens$2.asterisk:
					this.universal();
					break;
				case tokens$2.ampersand:
					this.nesting();
					break;
				case tokens$2.slash:
				case tokens$2.combinator:
					this.combinator();
					break;
				case tokens$2.str:
					this.string();
					break;
				case tokens$2.closeSquare: this.missingSquareBracket();
				case tokens$2.semicolon: this.missingBackslash();
				default: this.unexpected();
			}
		};
		_proto.expected = function expected(description, index$1, found) {
			if (Array.isArray(description)) {
				var last$2 = description.pop();
				description = description.join(", ") + " or " + last$2;
			}
			var an = /^[aeiou]/.test(description[0]) ? "an" : "a";
			if (!found) return this.error("Expected " + an + " " + description + ".", { index: index$1 });
			return this.error("Expected " + an + " " + description + ", found \"" + found + "\" instead.", { index: index$1 });
		};
		_proto.requiredSpace = function requiredSpace(space$3) {
			return this.options.lossy ? " " : space$3;
		};
		_proto.optionalSpace = function optionalSpace(space$3) {
			return this.options.lossy ? "" : space$3;
		};
		_proto.lossySpace = function lossySpace(space$3, required) {
			if (this.options.lossy) return required ? " " : "";
			else return space$3;
		};
		_proto.parseParenthesisToken = function parseParenthesisToken(token$1) {
			var content = this.content(token$1);
			if (token$1[_tokenize$2.FIELDS.TYPE] === tokens$2.space) return this.requiredSpace(content);
			else return content;
		};
		_proto.newNode = function newNode(node, namespace) {
			if (namespace) {
				if (/^ +$/.test(namespace)) {
					if (!this.options.lossy) this.spaces = (this.spaces || "") + namespace;
					namespace = true;
				}
				node.namespace = namespace;
				unescapeProp$2(node, "namespace");
			}
			if (this.spaces) {
				node.spaces.before = this.spaces;
				this.spaces = "";
			}
			return this.current.append(node);
		};
		_proto.content = function content(token$1) {
			if (token$1 === void 0) token$1 = this.currToken;
			return this.css.slice(token$1[_tokenize$2.FIELDS.START_POS], token$1[_tokenize$2.FIELDS.END_POS]);
		};
		/**
		* returns the index of the next non-whitespace, non-comment token.
		* returns -1 if no meaningful token is found.
		*/
		_proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
			if (startPosition === void 0) startPosition = this.position + 1;
			var searchPosition = startPosition;
			while (searchPosition < this.tokens.length) if (WHITESPACE_EQUIV_TOKENS$2[this.tokens[searchPosition][_tokenize$2.FIELDS.TYPE]]) {
				searchPosition++;
				continue;
			} else return searchPosition;
			return -1;
		};
		_createClass$14(Parser$10, [
			{
				key: "currToken",
				get: function get$2() {
					return this.tokens[this.position];
				}
			},
			{
				key: "nextToken",
				get: function get$2() {
					return this.tokens[this.position + 1];
				}
			},
			{
				key: "prevToken",
				get: function get$2() {
					return this.tokens[this.position - 1];
				}
			}
		]);
		return Parser$10;
	}();
	exports["default"] = Parser$4;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/processor.js
var require_processor$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/processor.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _parser$7 = _interopRequireDefault$63(require_parser$4());
	function _interopRequireDefault$63(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var Processor$2 = /* @__PURE__ */ function() {
		function Processor$8(func, options) {
			this.func = func || function noop$3() {};
			this.funcRes = null;
			this.options = options;
		}
		var _proto = Processor$8.prototype;
		_proto._shouldUpdateSelector = function _shouldUpdateSelector(rule$1, options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.updateSelector === false) return false;
			else return typeof rule$1 !== "string";
		};
		_proto._isLossy = function _isLossy(options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.lossless === false) return true;
			else return false;
		};
		_proto._root = function _root$6(rule$1, options) {
			if (options === void 0) options = {};
			var parser$5 = new _parser$7["default"](rule$1, this._parseOptions(options));
			return parser$5.root;
		};
		_proto._parseOptions = function _parseOptions(options) {
			return { lossy: this._isLossy(options) };
		};
		_proto._run = function _run(rule$1, options) {
			var _this = this;
			if (options === void 0) options = {};
			return new Promise(function(resolve$5, reject) {
				try {
					var root$5 = _this._root(rule$1, options);
					Promise.resolve(_this.func(root$5)).then(function(transform$1) {
						var string$3 = void 0;
						if (_this._shouldUpdateSelector(rule$1, options)) {
							string$3 = root$5.toString();
							rule$1.selector = string$3;
						}
						return {
							transform: transform$1,
							root: root$5,
							string: string$3
						};
					}).then(resolve$5, reject);
				} catch (e$2) {
					reject(e$2);
					return;
				}
			});
		};
		_proto._runSync = function _runSync(rule$1, options) {
			if (options === void 0) options = {};
			var root$5 = this._root(rule$1, options);
			var transform$1 = this.func(root$5);
			if (transform$1 && typeof transform$1.then === "function") throw new Error("Selector processor returned a promise to a synchronous call.");
			var string$3 = void 0;
			if (options.updateSelector && typeof rule$1 !== "string") {
				string$3 = root$5.toString();
				rule$1.selector = string$3;
			}
			return {
				transform: transform$1,
				root: root$5,
				string: string$3
			};
		};
		_proto.ast = function ast(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.root;
			});
		};
		_proto.astSync = function astSync(rule$1, options) {
			return this._runSync(rule$1, options).root;
		};
		_proto.transform = function transform$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.transform;
			});
		};
		_proto.transformSync = function transformSync(rule$1, options) {
			return this._runSync(rule$1, options).transform;
		};
		_proto.process = function process$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.string || result.root.toString();
			});
		};
		_proto.processSync = function processSync(rule$1, options) {
			var result = this._runSync(rule$1, options);
			return result.string || result.root.toString();
		};
		return Processor$8;
	}();
	exports["default"] = Processor$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/constructors.js
var require_constructors$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/constructors.js"(exports) {
	exports.__esModule = true;
	exports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;
	var _attribute$4 = _interopRequireDefault$62(require_attribute$2());
	var _className$4 = _interopRequireDefault$62(require_className$2());
	var _combinator$4 = _interopRequireDefault$62(require_combinator$2());
	var _comment$4 = _interopRequireDefault$62(require_comment$2());
	var _id$4 = _interopRequireDefault$62(require_id$2());
	var _nesting$4 = _interopRequireDefault$62(require_nesting$2());
	var _pseudo$4 = _interopRequireDefault$62(require_pseudo$2());
	var _root$4 = _interopRequireDefault$62(require_root$2());
	var _selector$4 = _interopRequireDefault$62(require_selector$2());
	var _string$5 = _interopRequireDefault$62(require_string$3());
	var _tag$4 = _interopRequireDefault$62(require_tag$2());
	var _universal$4 = _interopRequireDefault$62(require_universal$2());
	function _interopRequireDefault$62(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var attribute$2 = function attribute$3(opts) {
		return new _attribute$4["default"](opts);
	};
	exports.attribute = attribute$2;
	var className$2 = function className$3(opts) {
		return new _className$4["default"](opts);
	};
	exports.className = className$2;
	var combinator$4 = function combinator$6(opts) {
		return new _combinator$4["default"](opts);
	};
	exports.combinator = combinator$4;
	var comment$4 = function comment$7(opts) {
		return new _comment$4["default"](opts);
	};
	exports.comment = comment$4;
	var id$3 = function id$4(opts) {
		return new _id$4["default"](opts);
	};
	exports.id = id$3;
	var nesting$2 = function nesting$3(opts) {
		return new _nesting$4["default"](opts);
	};
	exports.nesting = nesting$2;
	var pseudo$2 = function pseudo$3(opts) {
		return new _pseudo$4["default"](opts);
	};
	exports.pseudo = pseudo$2;
	var root$3 = function root$5(opts) {
		return new _root$4["default"](opts);
	};
	exports.root = root$3;
	var selector$2 = function selector$3(opts) {
		return new _selector$4["default"](opts);
	};
	exports.selector = selector$2;
	var string$2 = function string$3(opts) {
		return new _string$5["default"](opts);
	};
	exports.string = string$2;
	var tag$2 = function tag$3(opts) {
		return new _tag$4["default"](opts);
	};
	exports.tag = tag$2;
	var universal$2 = function universal$3(opts) {
		return new _universal$4["default"](opts);
	};
	exports.universal = universal$2;
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/guards.js
var require_guards$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/guards.js"(exports) {
	exports.__esModule = true;
	exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;
	exports.isContainer = isContainer$2;
	exports.isIdentifier = void 0;
	exports.isNamespace = isNamespace$2;
	exports.isNesting = void 0;
	exports.isNode = isNode$4;
	exports.isPseudo = void 0;
	exports.isPseudoClass = isPseudoClass$2;
	exports.isPseudoElement = isPseudoElement$2;
	exports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = void 0;
	var _types$30 = require_types$3();
	var _IS_TYPE$2;
	var IS_TYPE$2 = (_IS_TYPE$2 = {}, _IS_TYPE$2[_types$30.ATTRIBUTE] = true, _IS_TYPE$2[_types$30.CLASS] = true, _IS_TYPE$2[_types$30.COMBINATOR] = true, _IS_TYPE$2[_types$30.COMMENT] = true, _IS_TYPE$2[_types$30.ID] = true, _IS_TYPE$2[_types$30.NESTING] = true, _IS_TYPE$2[_types$30.PSEUDO] = true, _IS_TYPE$2[_types$30.ROOT] = true, _IS_TYPE$2[_types$30.SELECTOR] = true, _IS_TYPE$2[_types$30.STRING] = true, _IS_TYPE$2[_types$30.TAG] = true, _IS_TYPE$2[_types$30.UNIVERSAL] = true, _IS_TYPE$2);
	function isNode$4(node) {
		return typeof node === "object" && IS_TYPE$2[node.type];
	}
	function isNodeType$3(type, node) {
		return isNode$4(node) && node.type === type;
	}
	var isAttribute$2 = isNodeType$3.bind(null, _types$30.ATTRIBUTE);
	exports.isAttribute = isAttribute$2;
	var isClassName$2 = isNodeType$3.bind(null, _types$30.CLASS);
	exports.isClassName = isClassName$2;
	var isCombinator$2 = isNodeType$3.bind(null, _types$30.COMBINATOR);
	exports.isCombinator = isCombinator$2;
	var isComment$4 = isNodeType$3.bind(null, _types$30.COMMENT);
	exports.isComment = isComment$4;
	var isIdentifier$15 = isNodeType$3.bind(null, _types$30.ID);
	exports.isIdentifier = isIdentifier$15;
	var isNesting$2 = isNodeType$3.bind(null, _types$30.NESTING);
	exports.isNesting = isNesting$2;
	var isPseudo$2 = isNodeType$3.bind(null, _types$30.PSEUDO);
	exports.isPseudo = isPseudo$2;
	var isRoot$2 = isNodeType$3.bind(null, _types$30.ROOT);
	exports.isRoot = isRoot$2;
	var isSelector$2 = isNodeType$3.bind(null, _types$30.SELECTOR);
	exports.isSelector = isSelector$2;
	var isString$3 = isNodeType$3.bind(null, _types$30.STRING);
	exports.isString = isString$3;
	var isTag$5 = isNodeType$3.bind(null, _types$30.TAG);
	exports.isTag = isTag$5;
	var isUniversal$2 = isNodeType$3.bind(null, _types$30.UNIVERSAL);
	exports.isUniversal = isUniversal$2;
	function isPseudoElement$2(node) {
		return isPseudo$2(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after" || node.value.toLowerCase() === ":first-letter" || node.value.toLowerCase() === ":first-line");
	}
	function isPseudoClass$2(node) {
		return isPseudo$2(node) && !isPseudoElement$2(node);
	}
	function isContainer$2(node) {
		return !!(isNode$4(node) && node.walk);
	}
	function isNamespace$2(node) {
		return isAttribute$2(node) || isTag$5(node);
	}
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/selectors/index.js
var require_selectors$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/selectors/index.js"(exports) {
	exports.__esModule = true;
	var _types$29 = require_types$3();
	Object.keys(_types$29).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _types$29[key]) return;
		exports[key] = _types$29[key];
	});
	var _constructors$2 = require_constructors$2();
	Object.keys(_constructors$2).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _constructors$2[key]) return;
		exports[key] = _constructors$2[key];
	});
	var _guards$2 = require_guards$2();
	Object.keys(_guards$2).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _guards$2[key]) return;
		exports[key] = _guards$2[key];
	});
} });

//#endregion
//#region node_modules/postcss-selector-parser/dist/index.js
var require_dist$2 = __commonJS({ "node_modules/postcss-selector-parser/dist/index.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _processor$2 = _interopRequireDefault$61(require_processor$2());
	var selectors$2 = _interopRequireWildcard$11(require_selectors$2());
	function _getRequireWildcardCache$8(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$8 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$11(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$8(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$61(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var parser$3 = function parser$5(processor) {
		return new _processor$2["default"](processor);
	};
	Object.assign(parser$3, selectors$2);
	delete parser$3.__esModule;
	var _default$13 = parser$3;
	exports["default"] = _default$13;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/merge-source-map/index.js
var require_merge_source_map = __commonJS({ "node_modules/merge-source-map/index.js"(exports, module) {
	var sourceMap$1 = require_source_map$1();
	var SourceMapConsumer = sourceMap$1.SourceMapConsumer;
	var SourceMapGenerator = sourceMap$1.SourceMapGenerator;
	module.exports = merge$3;
	/**
	* Merge old source map and new source map and return merged.
	* If old or new source map value is falsy, return another one as it is.
	*
	* @param {object|string} [oldMap] old source map object
	* @param {object|string} [newmap] new source map object
	* @return {object|undefined} merged source map object, or undefined when both old and new source map are undefined
	*/
	function merge$3(oldMap, newMap) {
		if (!oldMap) return newMap;
		if (!newMap) return oldMap;
		var oldMapConsumer = new SourceMapConsumer(oldMap);
		var newMapConsumer = new SourceMapConsumer(newMap);
		var mergedMapGenerator = new SourceMapGenerator();
		newMapConsumer.eachMapping(function(m$2) {
			if (m$2.originalLine == null) return;
			var origPosInOldMap = oldMapConsumer.originalPositionFor({
				line: m$2.originalLine,
				column: m$2.originalColumn
			});
			if (origPosInOldMap.source == null) return;
			mergedMapGenerator.addMapping({
				original: {
					line: origPosInOldMap.line,
					column: origPosInOldMap.column
				},
				generated: {
					line: m$2.generatedLine,
					column: m$2.generatedColumn
				},
				source: origPosInOldMap.source,
				name: origPosInOldMap.name
			});
		});
		var consumers = [oldMapConsumer, newMapConsumer];
		consumers.forEach(function(consumer) {
			consumer.sources.forEach(function(sourceFile) {
				mergedMapGenerator._sources.add(sourceFile);
				var sourceContent = consumer.sourceContentFor(sourceFile);
				if (sourceContent != null) mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
			});
		});
		mergedMapGenerator._sourceRoot = oldMap.sourceRoot;
		mergedMapGenerator._file = oldMap.file;
		return JSON.parse(mergedMapGenerator.toString());
	}
} });

//#endregion
//#region node_modules/sourcemap-codec/dist/sourcemap-codec.umd.js
var require_sourcemap_codec_umd$1 = __commonJS({ "node_modules/sourcemap-codec/dist/sourcemap-codec.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global$1 = global$1 || self, factory(global$1.sourcemapCodec = {}));
	})(exports, function(exports$1) {
		"use strict";
		var charToInteger = {};
		var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		for (var i$6 = 0; i$6 < chars.length; i$6++) charToInteger[chars.charCodeAt(i$6)] = i$6;
		function decode$3(mappings$1) {
			var decoded = [];
			var line = [];
			var segment = [
				0,
				0,
				0,
				0,
				0
			];
			var j$1 = 0;
			for (var i$7 = 0, shift = 0, value = 0; i$7 < mappings$1.length; i$7++) {
				var c$2 = mappings$1.charCodeAt(i$7);
				if (c$2 === 44) {
					segmentify(line, segment, j$1);
					j$1 = 0;
				} else if (c$2 === 59) {
					segmentify(line, segment, j$1);
					j$1 = 0;
					decoded.push(line);
					line = [];
					segment[0] = 0;
				} else {
					var integer = charToInteger[c$2];
					if (integer === void 0) throw new Error("Invalid character (" + String.fromCharCode(c$2) + ")");
					var hasContinuationBit = integer & 32;
					integer &= 31;
					value += integer << shift;
					if (hasContinuationBit) shift += 5;
					else {
						var shouldNegate = value & 1;
						value >>>= 1;
						if (shouldNegate) value = value === 0 ? -2147483648 : -value;
						segment[j$1] += value;
						j$1++;
						value = shift = 0;
					}
				}
			}
			segmentify(line, segment, j$1);
			decoded.push(line);
			return decoded;
		}
		function segmentify(line, segment, j$1) {
			if (j$1 === 4) line.push([
				segment[0],
				segment[1],
				segment[2],
				segment[3]
			]);
			else if (j$1 === 5) line.push([
				segment[0],
				segment[1],
				segment[2],
				segment[3],
				segment[4]
			]);
			else if (j$1 === 1) line.push([segment[0]]);
		}
		function encode$2(decoded) {
			var sourceFileIndex = 0;
			var sourceCodeLine = 0;
			var sourceCodeColumn = 0;
			var nameIndex = 0;
			var mappings$1 = "";
			for (var i$7 = 0; i$7 < decoded.length; i$7++) {
				var line = decoded[i$7];
				if (i$7 > 0) mappings$1 += ";";
				if (line.length === 0) continue;
				var generatedCodeColumn = 0;
				var lineMappings = [];
				for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {
					var segment = line_1[_i];
					var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);
					generatedCodeColumn = segment[0];
					if (segment.length > 1) {
						segmentMappings += encodeInteger(segment[1] - sourceFileIndex) + encodeInteger(segment[2] - sourceCodeLine) + encodeInteger(segment[3] - sourceCodeColumn);
						sourceFileIndex = segment[1];
						sourceCodeLine = segment[2];
						sourceCodeColumn = segment[3];
					}
					if (segment.length === 5) {
						segmentMappings += encodeInteger(segment[4] - nameIndex);
						nameIndex = segment[4];
					}
					lineMappings.push(segmentMappings);
				}
				mappings$1 += lineMappings.join(",");
			}
			return mappings$1;
		}
		function encodeInteger(num) {
			var result = "";
			num = num < 0 ? -num << 1 | 1 : num << 1;
			do {
				var clamped = num & 31;
				num >>>= 5;
				if (num > 0) clamped |= 32;
				result += chars[clamped];
			} while (num > 0);
			return result;
		}
		exports$1.decode = decode$3;
		exports$1.encode = encode$2;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/magic-string/dist/magic-string.cjs.js
var require_magic_string_cjs = __commonJS({ "node_modules/magic-string/dist/magic-string.cjs.js"(exports, module) {
	var sourcemapCodec = require_sourcemap_codec_umd$1();
	var BitSet = function BitSet$1(arg) {
		this.bits = arg instanceof BitSet$1 ? arg.bits.slice() : [];
	};
	BitSet.prototype.add = function add(n$4) {
		this.bits[n$4 >> 5] |= 1 << (n$4 & 31);
	};
	BitSet.prototype.has = function has$3(n$4) {
		return !!(this.bits[n$4 >> 5] & 1 << (n$4 & 31));
	};
	var Chunk = function Chunk$1(start, end, content) {
		this.start = start;
		this.end = end;
		this.original = content;
		this.intro = "";
		this.outro = "";
		this.content = content;
		this.storeName = false;
		this.edited = false;
		Object.defineProperties(this, {
			previous: {
				writable: true,
				value: null
			},
			next: {
				writable: true,
				value: null
			}
		});
	};
	Chunk.prototype.appendLeft = function appendLeft(content) {
		this.outro += content;
	};
	Chunk.prototype.appendRight = function appendRight(content) {
		this.intro = this.intro + content;
	};
	Chunk.prototype.clone = function clone$4() {
		var chunk = new Chunk(this.start, this.end, this.original);
		chunk.intro = this.intro;
		chunk.outro = this.outro;
		chunk.content = this.content;
		chunk.storeName = this.storeName;
		chunk.edited = this.edited;
		return chunk;
	};
	Chunk.prototype.contains = function contains(index$1) {
		return this.start < index$1 && index$1 < this.end;
	};
	Chunk.prototype.eachNext = function eachNext(fn) {
		var chunk = this;
		while (chunk) {
			fn(chunk);
			chunk = chunk.next;
		}
	};
	Chunk.prototype.eachPrevious = function eachPrevious(fn) {
		var chunk = this;
		while (chunk) {
			fn(chunk);
			chunk = chunk.previous;
		}
	};
	Chunk.prototype.edit = function edit(content, storeName, contentOnly) {
		this.content = content;
		if (!contentOnly) {
			this.intro = "";
			this.outro = "";
		}
		this.storeName = storeName;
		this.edited = true;
		return this;
	};
	Chunk.prototype.prependLeft = function prependLeft(content) {
		this.outro = content + this.outro;
	};
	Chunk.prototype.prependRight = function prependRight(content) {
		this.intro = content + this.intro;
	};
	Chunk.prototype.split = function split(index$1) {
		var sliceIndex = index$1 - this.start;
		var originalBefore = this.original.slice(0, sliceIndex);
		var originalAfter = this.original.slice(sliceIndex);
		this.original = originalBefore;
		var newChunk = new Chunk(index$1, this.end, originalAfter);
		newChunk.outro = this.outro;
		this.outro = "";
		this.end = index$1;
		if (this.edited) {
			newChunk.edit("", false);
			this.content = "";
		} else this.content = originalBefore;
		newChunk.next = this.next;
		if (newChunk.next) newChunk.next.previous = newChunk;
		newChunk.previous = this;
		this.next = newChunk;
		return newChunk;
	};
	Chunk.prototype.toString = function toString$5() {
		return this.intro + this.content + this.outro;
	};
	Chunk.prototype.trimEnd = function trimEnd(rx) {
		this.outro = this.outro.replace(rx, "");
		if (this.outro.length) return true;
		var trimmed = this.content.replace(rx, "");
		if (trimmed.length) {
			if (trimmed !== this.content) this.split(this.start + trimmed.length).edit("", void 0, true);
			return true;
		} else {
			this.edit("", void 0, true);
			this.intro = this.intro.replace(rx, "");
			if (this.intro.length) return true;
		}
	};
	Chunk.prototype.trimStart = function trimStart(rx) {
		this.intro = this.intro.replace(rx, "");
		if (this.intro.length) return true;
		var trimmed = this.content.replace(rx, "");
		if (trimmed.length) {
			if (trimmed !== this.content) {
				this.split(this.end - trimmed.length);
				this.edit("", void 0, true);
			}
			return true;
		} else {
			this.edit("", void 0, true);
			this.outro = this.outro.replace(rx, "");
			if (this.outro.length) return true;
		}
	};
	var btoa = function() {
		throw new Error("Unsupported environment: `window.btoa` or `Buffer` should be supported.");
	};
	if (typeof window !== "undefined" && typeof window.btoa === "function") btoa = function(str$4) {
		return window.btoa(unescape(encodeURIComponent(str$4)));
	};
	else if (typeof Buffer === "function") btoa = function(str$4) {
		return Buffer.from(str$4, "utf-8").toString("base64");
	};
	var SourceMap$2 = function SourceMap$3(properties) {
		this.version = 3;
		this.file = properties.file;
		this.sources = properties.sources;
		this.sourcesContent = properties.sourcesContent;
		this.names = properties.names;
		this.mappings = sourcemapCodec.encode(properties.mappings);
	};
	SourceMap$2.prototype.toString = function toString$5() {
		return JSON.stringify(this);
	};
	SourceMap$2.prototype.toUrl = function toUrl() {
		return "data:application/json;charset=utf-8;base64," + btoa(this.toString());
	};
	function guessIndent(code$1) {
		var lines = code$1.split("\n");
		var tabbed = lines.filter(function(line) {
			return /^\t+/.test(line);
		});
		var spaced = lines.filter(function(line) {
			return /^ {2,}/.test(line);
		});
		if (tabbed.length === 0 && spaced.length === 0) return null;
		if (tabbed.length >= spaced.length) return "	";
		var min = spaced.reduce(function(previous, current) {
			var numSpaces = /^ +/.exec(current)[0].length;
			return Math.min(numSpaces, previous);
		}, Infinity);
		return new Array(min + 1).join(" ");
	}
	function getRelativePath(from, to) {
		var fromParts = from.split(/[/\\]/);
		var toParts = to.split(/[/\\]/);
		fromParts.pop();
		while (fromParts[0] === toParts[0]) {
			fromParts.shift();
			toParts.shift();
		}
		if (fromParts.length) {
			var i$6 = fromParts.length;
			while (i$6--) fromParts[i$6] = "..";
		}
		return fromParts.concat(toParts).join("/");
	}
	var toString$3 = Object.prototype.toString;
	function isObject$3(thing) {
		return toString$3.call(thing) === "[object Object]";
	}
	function getLocator(source) {
		var originalLines = source.split("\n");
		var lineOffsets = [];
		for (var i$6 = 0, pos = 0; i$6 < originalLines.length; i$6++) {
			lineOffsets.push(pos);
			pos += originalLines[i$6].length + 1;
		}
		return function locate(index$1) {
			var i$7 = 0;
			var j$1 = lineOffsets.length;
			while (i$7 < j$1) {
				var m$2 = i$7 + j$1 >> 1;
				if (index$1 < lineOffsets[m$2]) j$1 = m$2;
				else i$7 = m$2 + 1;
			}
			var line = i$7 - 1;
			var column = index$1 - lineOffsets[line];
			return {
				line,
				column
			};
		};
	}
	var Mappings = function Mappings$1(hires) {
		this.hires = hires;
		this.generatedCodeLine = 0;
		this.generatedCodeColumn = 0;
		this.raw = [];
		this.rawSegments = this.raw[this.generatedCodeLine] = [];
		this.pending = null;
	};
	Mappings.prototype.addEdit = function addEdit(sourceIndex, content, loc, nameIndex) {
		if (content.length) {
			var segment = [
				this.generatedCodeColumn,
				sourceIndex,
				loc.line,
				loc.column
			];
			if (nameIndex >= 0) segment.push(nameIndex);
			this.rawSegments.push(segment);
		} else if (this.pending) this.rawSegments.push(this.pending);
		this.advance(content);
		this.pending = null;
	};
	Mappings.prototype.addUneditedChunk = function addUneditedChunk(sourceIndex, chunk, original, loc, sourcemapLocations) {
		var originalCharIndex = chunk.start;
		var first = true;
		while (originalCharIndex < chunk.end) {
			if (this.hires || first || sourcemapLocations.has(originalCharIndex)) this.rawSegments.push([
				this.generatedCodeColumn,
				sourceIndex,
				loc.line,
				loc.column
			]);
			if (original[originalCharIndex] === "\n") {
				loc.line += 1;
				loc.column = 0;
				this.generatedCodeLine += 1;
				this.raw[this.generatedCodeLine] = this.rawSegments = [];
				this.generatedCodeColumn = 0;
				first = true;
			} else {
				loc.column += 1;
				this.generatedCodeColumn += 1;
				first = false;
			}
			originalCharIndex += 1;
		}
		this.pending = null;
	};
	Mappings.prototype.advance = function advance(str$4) {
		if (!str$4) return;
		var lines = str$4.split("\n");
		if (lines.length > 1) {
			for (var i$6 = 0; i$6 < lines.length - 1; i$6++) {
				this.generatedCodeLine++;
				this.raw[this.generatedCodeLine] = this.rawSegments = [];
			}
			this.generatedCodeColumn = 0;
		}
		this.generatedCodeColumn += lines[lines.length - 1].length;
	};
	var n$3 = "\n";
	var warned = {
		insertLeft: false,
		insertRight: false,
		storeName: false
	};
	var MagicString$1 = function MagicString$2(string$3, options) {
		if (options === void 0) options = {};
		var chunk = new Chunk(0, string$3.length, string$3);
		Object.defineProperties(this, {
			original: {
				writable: true,
				value: string$3
			},
			outro: {
				writable: true,
				value: ""
			},
			intro: {
				writable: true,
				value: ""
			},
			firstChunk: {
				writable: true,
				value: chunk
			},
			lastChunk: {
				writable: true,
				value: chunk
			},
			lastSearchedChunk: {
				writable: true,
				value: chunk
			},
			byStart: {
				writable: true,
				value: {}
			},
			byEnd: {
				writable: true,
				value: {}
			},
			filename: {
				writable: true,
				value: options.filename
			},
			indentExclusionRanges: {
				writable: true,
				value: options.indentExclusionRanges
			},
			sourcemapLocations: {
				writable: true,
				value: new BitSet()
			},
			storedNames: {
				writable: true,
				value: {}
			},
			indentStr: {
				writable: true,
				value: guessIndent(string$3)
			}
		});
		this.byStart[0] = chunk;
		this.byEnd[string$3.length] = chunk;
	};
	MagicString$1.prototype.addSourcemapLocation = function addSourcemapLocation(char) {
		this.sourcemapLocations.add(char);
	};
	MagicString$1.prototype.append = function append$1(content) {
		if (typeof content !== "string") throw new TypeError("outro content must be a string");
		this.outro += content;
		return this;
	};
	MagicString$1.prototype.appendLeft = function appendLeft(index$1, content) {
		if (typeof content !== "string") throw new TypeError("inserted content must be a string");
		this._split(index$1);
		var chunk = this.byEnd[index$1];
		if (chunk) chunk.appendLeft(content);
		else this.intro += content;
		return this;
	};
	MagicString$1.prototype.appendRight = function appendRight(index$1, content) {
		if (typeof content !== "string") throw new TypeError("inserted content must be a string");
		this._split(index$1);
		var chunk = this.byStart[index$1];
		if (chunk) chunk.appendRight(content);
		else this.outro += content;
		return this;
	};
	MagicString$1.prototype.clone = function clone$4() {
		var cloned = new MagicString$1(this.original, { filename: this.filename });
		var originalChunk = this.firstChunk;
		var clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();
		while (originalChunk) {
			cloned.byStart[clonedChunk.start] = clonedChunk;
			cloned.byEnd[clonedChunk.end] = clonedChunk;
			var nextOriginalChunk = originalChunk.next;
			var nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();
			if (nextClonedChunk) {
				clonedChunk.next = nextClonedChunk;
				nextClonedChunk.previous = clonedChunk;
				clonedChunk = nextClonedChunk;
			}
			originalChunk = nextOriginalChunk;
		}
		cloned.lastChunk = clonedChunk;
		if (this.indentExclusionRanges) cloned.indentExclusionRanges = this.indentExclusionRanges.slice();
		cloned.sourcemapLocations = new BitSet(this.sourcemapLocations);
		cloned.intro = this.intro;
		cloned.outro = this.outro;
		return cloned;
	};
	MagicString$1.prototype.generateDecodedMap = function generateDecodedMap(options) {
		var this$1$1 = this;
		options = options || {};
		var sourceIndex = 0;
		var names = Object.keys(this.storedNames);
		var mappings$1 = new Mappings(options.hires);
		var locate = getLocator(this.original);
		if (this.intro) mappings$1.advance(this.intro);
		this.firstChunk.eachNext(function(chunk) {
			var loc = locate(chunk.start);
			if (chunk.intro.length) mappings$1.advance(chunk.intro);
			if (chunk.edited) mappings$1.addEdit(sourceIndex, chunk.content, loc, chunk.storeName ? names.indexOf(chunk.original) : -1);
			else mappings$1.addUneditedChunk(sourceIndex, chunk, this$1$1.original, loc, this$1$1.sourcemapLocations);
			if (chunk.outro.length) mappings$1.advance(chunk.outro);
		});
		return {
			file: options.file ? options.file.split(/[/\\]/).pop() : null,
			sources: [options.source ? getRelativePath(options.file || "", options.source) : null],
			sourcesContent: options.includeContent ? [this.original] : [null],
			names,
			mappings: mappings$1.raw
		};
	};
	MagicString$1.prototype.generateMap = function generateMap(options) {
		return new SourceMap$2(this.generateDecodedMap(options));
	};
	MagicString$1.prototype.getIndentString = function getIndentString() {
		return this.indentStr === null ? "	" : this.indentStr;
	};
	MagicString$1.prototype.indent = function indent(indentStr, options) {
		var pattern = /^[^\r\n]/gm;
		if (isObject$3(indentStr)) {
			options = indentStr;
			indentStr = void 0;
		}
		indentStr = indentStr !== void 0 ? indentStr : this.indentStr || "	";
		if (indentStr === "") return this;
		options = options || {};
		var isExcluded = {};
		if (options.exclude) {
			var exclusions = typeof options.exclude[0] === "number" ? [options.exclude] : options.exclude;
			exclusions.forEach(function(exclusion) {
				for (var i$6 = exclusion[0]; i$6 < exclusion[1]; i$6 += 1) isExcluded[i$6] = true;
			});
		}
		var shouldIndentNextCharacter = options.indentStart !== false;
		var replacer$1 = function(match) {
			if (shouldIndentNextCharacter) return "" + indentStr + match;
			shouldIndentNextCharacter = true;
			return match;
		};
		this.intro = this.intro.replace(pattern, replacer$1);
		var charIndex = 0;
		var chunk = this.firstChunk;
		while (chunk) {
			var end = chunk.end;
			if (chunk.edited) {
				if (!isExcluded[charIndex]) {
					chunk.content = chunk.content.replace(pattern, replacer$1);
					if (chunk.content.length) shouldIndentNextCharacter = chunk.content[chunk.content.length - 1] === "\n";
				}
			} else {
				charIndex = chunk.start;
				while (charIndex < end) {
					if (!isExcluded[charIndex]) {
						var char = this.original[charIndex];
						if (char === "\n") shouldIndentNextCharacter = true;
						else if (char !== "\r" && shouldIndentNextCharacter) {
							shouldIndentNextCharacter = false;
							if (charIndex === chunk.start) chunk.prependRight(indentStr);
							else {
								this._splitChunk(chunk, charIndex);
								chunk = chunk.next;
								chunk.prependRight(indentStr);
							}
						}
					}
					charIndex += 1;
				}
			}
			charIndex = chunk.end;
			chunk = chunk.next;
		}
		this.outro = this.outro.replace(pattern, replacer$1);
		return this;
	};
	MagicString$1.prototype.insert = function insert$1() {
		throw new Error("magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)");
	};
	MagicString$1.prototype.insertLeft = function insertLeft(index$1, content) {
		if (!warned.insertLeft) {
			console.warn("magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead");
			warned.insertLeft = true;
		}
		return this.appendLeft(index$1, content);
	};
	MagicString$1.prototype.insertRight = function insertRight(index$1, content) {
		if (!warned.insertRight) {
			console.warn("magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead");
			warned.insertRight = true;
		}
		return this.prependRight(index$1, content);
	};
	MagicString$1.prototype.move = function move$1(start, end, index$1) {
		if (index$1 >= start && index$1 <= end) throw new Error("Cannot move a selection inside itself");
		this._split(start);
		this._split(end);
		this._split(index$1);
		var first = this.byStart[start];
		var last$2 = this.byEnd[end];
		var oldLeft = first.previous;
		var oldRight = last$2.next;
		var newRight = this.byStart[index$1];
		if (!newRight && last$2 === this.lastChunk) return this;
		var newLeft = newRight ? newRight.previous : this.lastChunk;
		if (oldLeft) oldLeft.next = oldRight;
		if (oldRight) oldRight.previous = oldLeft;
		if (newLeft) newLeft.next = first;
		if (newRight) newRight.previous = last$2;
		if (!first.previous) this.firstChunk = last$2.next;
		if (!last$2.next) {
			this.lastChunk = first.previous;
			this.lastChunk.next = null;
		}
		first.previous = newLeft;
		last$2.next = newRight || null;
		if (!newLeft) this.firstChunk = first;
		if (!newRight) this.lastChunk = last$2;
		return this;
	};
	MagicString$1.prototype.overwrite = function overwrite(start, end, content, options) {
		if (typeof content !== "string") throw new TypeError("replacement content must be a string");
		while (start < 0) start += this.original.length;
		while (end < 0) end += this.original.length;
		if (end > this.original.length) throw new Error("end is out of bounds");
		if (start === end) throw new Error("Cannot overwrite a zero-length range – use appendLeft or prependRight instead");
		this._split(start);
		this._split(end);
		if (options === true) {
			if (!warned.storeName) {
				console.warn("The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string");
				warned.storeName = true;
			}
			options = { storeName: true };
		}
		var storeName = options !== void 0 ? options.storeName : false;
		var contentOnly = options !== void 0 ? options.contentOnly : false;
		if (storeName) {
			var original = this.original.slice(start, end);
			Object.defineProperty(this.storedNames, original, {
				writable: true,
				value: true,
				enumerable: true
			});
		}
		var first = this.byStart[start];
		var last$2 = this.byEnd[end];
		if (first) {
			var chunk = first;
			while (chunk !== last$2) {
				if (chunk.next !== this.byStart[chunk.end]) throw new Error("Cannot overwrite across a split point");
				chunk = chunk.next;
				chunk.edit("", false);
			}
			first.edit(content, storeName, contentOnly);
		} else {
			var newChunk = new Chunk(start, end, "").edit(content, storeName);
			last$2.next = newChunk;
			newChunk.previous = last$2;
		}
		return this;
	};
	MagicString$1.prototype.prepend = function prepend$1(content) {
		if (typeof content !== "string") throw new TypeError("outro content must be a string");
		this.intro = content + this.intro;
		return this;
	};
	MagicString$1.prototype.prependLeft = function prependLeft(index$1, content) {
		if (typeof content !== "string") throw new TypeError("inserted content must be a string");
		this._split(index$1);
		var chunk = this.byEnd[index$1];
		if (chunk) chunk.prependLeft(content);
		else this.intro = content + this.intro;
		return this;
	};
	MagicString$1.prototype.prependRight = function prependRight(index$1, content) {
		if (typeof content !== "string") throw new TypeError("inserted content must be a string");
		this._split(index$1);
		var chunk = this.byStart[index$1];
		if (chunk) chunk.prependRight(content);
		else this.outro = content + this.outro;
		return this;
	};
	MagicString$1.prototype.remove = function remove$4(start, end) {
		while (start < 0) start += this.original.length;
		while (end < 0) end += this.original.length;
		if (start === end) return this;
		if (start < 0 || end > this.original.length) throw new Error("Character is out of bounds");
		if (start > end) throw new Error("end must be greater than start");
		this._split(start);
		this._split(end);
		var chunk = this.byStart[start];
		while (chunk) {
			chunk.intro = "";
			chunk.outro = "";
			chunk.edit("");
			chunk = end > chunk.end ? this.byStart[chunk.end] : null;
		}
		return this;
	};
	MagicString$1.prototype.lastChar = function lastChar() {
		if (this.outro.length) return this.outro[this.outro.length - 1];
		var chunk = this.lastChunk;
		do {
			if (chunk.outro.length) return chunk.outro[chunk.outro.length - 1];
			if (chunk.content.length) return chunk.content[chunk.content.length - 1];
			if (chunk.intro.length) return chunk.intro[chunk.intro.length - 1];
		} while (chunk = chunk.previous);
		if (this.intro.length) return this.intro[this.intro.length - 1];
		return "";
	};
	MagicString$1.prototype.lastLine = function lastLine() {
		var lineIndex = this.outro.lastIndexOf(n$3);
		if (lineIndex !== -1) return this.outro.substr(lineIndex + 1);
		var lineStr = this.outro;
		var chunk = this.lastChunk;
		do {
			if (chunk.outro.length > 0) {
				lineIndex = chunk.outro.lastIndexOf(n$3);
				if (lineIndex !== -1) return chunk.outro.substr(lineIndex + 1) + lineStr;
				lineStr = chunk.outro + lineStr;
			}
			if (chunk.content.length > 0) {
				lineIndex = chunk.content.lastIndexOf(n$3);
				if (lineIndex !== -1) return chunk.content.substr(lineIndex + 1) + lineStr;
				lineStr = chunk.content + lineStr;
			}
			if (chunk.intro.length > 0) {
				lineIndex = chunk.intro.lastIndexOf(n$3);
				if (lineIndex !== -1) return chunk.intro.substr(lineIndex + 1) + lineStr;
				lineStr = chunk.intro + lineStr;
			}
		} while (chunk = chunk.previous);
		lineIndex = this.intro.lastIndexOf(n$3);
		if (lineIndex !== -1) return this.intro.substr(lineIndex + 1) + lineStr;
		return this.intro + lineStr;
	};
	MagicString$1.prototype.slice = function slice$2(start, end) {
		if (start === void 0) start = 0;
		if (end === void 0) end = this.original.length;
		while (start < 0) start += this.original.length;
		while (end < 0) end += this.original.length;
		var result = "";
		var chunk = this.firstChunk;
		while (chunk && (chunk.start > start || chunk.end <= start)) {
			if (chunk.start < end && chunk.end >= end) return result;
			chunk = chunk.next;
		}
		if (chunk && chunk.edited && chunk.start !== start) throw new Error("Cannot use replaced character " + start + " as slice start anchor.");
		var startChunk = chunk;
		while (chunk) {
			if (chunk.intro && (startChunk !== chunk || chunk.start === start)) result += chunk.intro;
			var containsEnd = chunk.start < end && chunk.end >= end;
			if (containsEnd && chunk.edited && chunk.end !== end) throw new Error("Cannot use replaced character " + end + " as slice end anchor.");
			var sliceStart = startChunk === chunk ? start - chunk.start : 0;
			var sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;
			result += chunk.content.slice(sliceStart, sliceEnd);
			if (chunk.outro && (!containsEnd || chunk.end === end)) result += chunk.outro;
			if (containsEnd) break;
			chunk = chunk.next;
		}
		return result;
	};
	MagicString$1.prototype.snip = function snip(start, end) {
		var clone$4 = this.clone();
		clone$4.remove(0, start);
		clone$4.remove(end, clone$4.original.length);
		return clone$4;
	};
	MagicString$1.prototype._split = function _split(index$1) {
		if (this.byStart[index$1] || this.byEnd[index$1]) return;
		var chunk = this.lastSearchedChunk;
		var searchForward = index$1 > chunk.end;
		while (chunk) {
			if (chunk.contains(index$1)) return this._splitChunk(chunk, index$1);
			chunk = searchForward ? this.byStart[chunk.end] : this.byEnd[chunk.start];
		}
	};
	MagicString$1.prototype._splitChunk = function _splitChunk(chunk, index$1) {
		if (chunk.edited && chunk.content.length) {
			var loc = getLocator(this.original)(index$1);
			throw new Error("Cannot split a chunk that has already been edited (" + loc.line + ":" + loc.column + " – \"" + chunk.original + "\")");
		}
		var newChunk = chunk.split(index$1);
		this.byEnd[index$1] = chunk;
		this.byStart[index$1] = newChunk;
		this.byEnd[newChunk.end] = newChunk;
		if (chunk === this.lastChunk) this.lastChunk = newChunk;
		this.lastSearchedChunk = chunk;
		return true;
	};
	MagicString$1.prototype.toString = function toString$5() {
		var str$4 = this.intro;
		var chunk = this.firstChunk;
		while (chunk) {
			str$4 += chunk.toString();
			chunk = chunk.next;
		}
		return str$4 + this.outro;
	};
	MagicString$1.prototype.isEmpty = function isEmpty$1() {
		var chunk = this.firstChunk;
		do
			if (chunk.intro.length && chunk.intro.trim() || chunk.content.length && chunk.content.trim() || chunk.outro.length && chunk.outro.trim()) return false;
		while (chunk = chunk.next);
		return true;
	};
	MagicString$1.prototype.length = function length() {
		var chunk = this.firstChunk;
		var length$1 = 0;
		do
			length$1 += chunk.intro.length + chunk.content.length + chunk.outro.length;
		while (chunk = chunk.next);
		return length$1;
	};
	MagicString$1.prototype.trimLines = function trimLines() {
		return this.trim("[\\r\\n]");
	};
	MagicString$1.prototype.trim = function trim$1(charType) {
		return this.trimStart(charType).trimEnd(charType);
	};
	MagicString$1.prototype.trimEndAborted = function trimEndAborted(charType) {
		var rx = new RegExp((charType || "\\s") + "+$");
		this.outro = this.outro.replace(rx, "");
		if (this.outro.length) return true;
		var chunk = this.lastChunk;
		do {
			var end = chunk.end;
			var aborted = chunk.trimEnd(rx);
			if (chunk.end !== end) {
				if (this.lastChunk === chunk) this.lastChunk = chunk.next;
				this.byEnd[chunk.end] = chunk;
				this.byStart[chunk.next.start] = chunk.next;
				this.byEnd[chunk.next.end] = chunk.next;
			}
			if (aborted) return true;
			chunk = chunk.previous;
		} while (chunk);
		return false;
	};
	MagicString$1.prototype.trimEnd = function trimEnd(charType) {
		this.trimEndAborted(charType);
		return this;
	};
	MagicString$1.prototype.trimStartAborted = function trimStartAborted(charType) {
		var rx = new RegExp("^" + (charType || "\\s") + "+");
		this.intro = this.intro.replace(rx, "");
		if (this.intro.length) return true;
		var chunk = this.firstChunk;
		do {
			var end = chunk.end;
			var aborted = chunk.trimStart(rx);
			if (chunk.end !== end) {
				if (chunk === this.lastChunk) this.lastChunk = chunk.next;
				this.byEnd[chunk.end] = chunk;
				this.byStart[chunk.next.start] = chunk.next;
				this.byEnd[chunk.next.end] = chunk.next;
			}
			if (aborted) return true;
			chunk = chunk.next;
		} while (chunk);
		return false;
	};
	MagicString$1.prototype.trimStart = function trimStart(charType) {
		this.trimStartAborted(charType);
		return this;
	};
	var hasOwnProp = Object.prototype.hasOwnProperty;
	var Bundle = function Bundle$1(options) {
		if (options === void 0) options = {};
		this.intro = options.intro || "";
		this.separator = options.separator !== void 0 ? options.separator : "\n";
		this.sources = [];
		this.uniqueSources = [];
		this.uniqueSourceIndexByFilename = {};
	};
	Bundle.prototype.addSource = function addSource(source) {
		if (source instanceof MagicString$1) return this.addSource({
			content: source,
			filename: source.filename,
			separator: this.separator
		});
		if (!isObject$3(source) || !source.content) throw new Error("bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`");
		[
			"filename",
			"indentExclusionRanges",
			"separator"
		].forEach(function(option) {
			if (!hasOwnProp.call(source, option)) source[option] = source.content[option];
		});
		if (source.separator === void 0) source.separator = this.separator;
		if (source.filename) if (!hasOwnProp.call(this.uniqueSourceIndexByFilename, source.filename)) {
			this.uniqueSourceIndexByFilename[source.filename] = this.uniqueSources.length;
			this.uniqueSources.push({
				filename: source.filename,
				content: source.content.original
			});
		} else {
			var uniqueSource = this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];
			if (source.content.original !== uniqueSource.content) throw new Error("Illegal source: same filename (" + source.filename + "), different contents");
		}
		this.sources.push(source);
		return this;
	};
	Bundle.prototype.append = function append$1(str$4, options) {
		this.addSource({
			content: new MagicString$1(str$4),
			separator: options && options.separator || ""
		});
		return this;
	};
	Bundle.prototype.clone = function clone$4() {
		var bundle = new Bundle({
			intro: this.intro,
			separator: this.separator
		});
		this.sources.forEach(function(source) {
			bundle.addSource({
				filename: source.filename,
				content: source.content.clone(),
				separator: source.separator
			});
		});
		return bundle;
	};
	Bundle.prototype.generateDecodedMap = function generateDecodedMap(options) {
		var this$1$1 = this;
		if (options === void 0) options = {};
		var names = [];
		this.sources.forEach(function(source) {
			Object.keys(source.content.storedNames).forEach(function(name) {
				if (!~names.indexOf(name)) names.push(name);
			});
		});
		var mappings$1 = new Mappings(options.hires);
		if (this.intro) mappings$1.advance(this.intro);
		this.sources.forEach(function(source, i$6) {
			if (i$6 > 0) mappings$1.advance(this$1$1.separator);
			var sourceIndex = source.filename ? this$1$1.uniqueSourceIndexByFilename[source.filename] : -1;
			var magicString = source.content;
			var locate = getLocator(magicString.original);
			if (magicString.intro) mappings$1.advance(magicString.intro);
			magicString.firstChunk.eachNext(function(chunk) {
				var loc = locate(chunk.start);
				if (chunk.intro.length) mappings$1.advance(chunk.intro);
				if (source.filename) if (chunk.edited) mappings$1.addEdit(sourceIndex, chunk.content, loc, chunk.storeName ? names.indexOf(chunk.original) : -1);
				else mappings$1.addUneditedChunk(sourceIndex, chunk, magicString.original, loc, magicString.sourcemapLocations);
				else mappings$1.advance(chunk.content);
				if (chunk.outro.length) mappings$1.advance(chunk.outro);
			});
			if (magicString.outro) mappings$1.advance(magicString.outro);
		});
		return {
			file: options.file ? options.file.split(/[/\\]/).pop() : null,
			sources: this.uniqueSources.map(function(source) {
				return options.file ? getRelativePath(options.file, source.filename) : source.filename;
			}),
			sourcesContent: this.uniqueSources.map(function(source) {
				return options.includeContent ? source.content : null;
			}),
			names,
			mappings: mappings$1.raw
		};
	};
	Bundle.prototype.generateMap = function generateMap(options) {
		return new SourceMap$2(this.generateDecodedMap(options));
	};
	Bundle.prototype.getIndentString = function getIndentString() {
		var indentStringCounts = {};
		this.sources.forEach(function(source) {
			var indentStr = source.content.indentStr;
			if (indentStr === null) return;
			if (!indentStringCounts[indentStr]) indentStringCounts[indentStr] = 0;
			indentStringCounts[indentStr] += 1;
		});
		return Object.keys(indentStringCounts).sort(function(a$1, b$1) {
			return indentStringCounts[a$1] - indentStringCounts[b$1];
		})[0] || "	";
	};
	Bundle.prototype.indent = function indent(indentStr) {
		var this$1$1 = this;
		if (!arguments.length) indentStr = this.getIndentString();
		if (indentStr === "") return this;
		var trailingNewline = !this.intro || this.intro.slice(-1) === "\n";
		this.sources.forEach(function(source, i$6) {
			var separator = source.separator !== void 0 ? source.separator : this$1$1.separator;
			var indentStart = trailingNewline || i$6 > 0 && /\r?\n$/.test(separator);
			source.content.indent(indentStr, {
				exclude: source.indentExclusionRanges,
				indentStart
			});
			trailingNewline = source.content.lastChar() === "\n";
		});
		if (this.intro) this.intro = indentStr + this.intro.replace(/^[^\n]/gm, function(match, index$1) {
			return index$1 > 0 ? indentStr + match : match;
		});
		return this;
	};
	Bundle.prototype.prepend = function prepend$1(str$4) {
		this.intro = str$4 + this.intro;
		return this;
	};
	Bundle.prototype.toString = function toString$5() {
		var this$1$1 = this;
		var body = this.sources.map(function(source, i$6) {
			var separator = source.separator !== void 0 ? source.separator : this$1$1.separator;
			var str$4 = (i$6 > 0 ? separator : "") + source.content.toString();
			return str$4;
		}).join("");
		return this.intro + body;
	};
	Bundle.prototype.isEmpty = function isEmpty$1() {
		if (this.intro.length && this.intro.trim()) return false;
		if (this.sources.some(function(source) {
			return !source.content.isEmpty();
		})) return false;
		return true;
	};
	Bundle.prototype.length = function length() {
		return this.sources.reduce(function(length$1, source) {
			return length$1 + source.content.length();
		}, this.intro.length);
	};
	Bundle.prototype.trimLines = function trimLines() {
		return this.trim("[\\r\\n]");
	};
	Bundle.prototype.trim = function trim$1(charType) {
		return this.trimStart(charType).trimEnd(charType);
	};
	Bundle.prototype.trimStart = function trimStart(charType) {
		var rx = new RegExp("^" + (charType || "\\s") + "+");
		this.intro = this.intro.replace(rx, "");
		if (!this.intro) {
			var source;
			var i$6 = 0;
			do {
				source = this.sources[i$6++];
				if (!source) break;
			} while (!source.content.trimStartAborted(charType));
		}
		return this;
	};
	Bundle.prototype.trimEnd = function trimEnd(charType) {
		var rx = new RegExp((charType || "\\s") + "+$");
		var source;
		var i$6 = this.sources.length - 1;
		do {
			source = this.sources[i$6--];
			if (!source) {
				this.intro = this.intro.replace(rx, "");
				break;
			}
		} while (!source.content.trimEndAborted(charType));
		return this;
	};
	MagicString$1.Bundle = Bundle;
	MagicString$1.SourceMap = SourceMap$2;
	MagicString$1.default = MagicString$1;
	module.exports = MagicString$1;
} });

//#endregion
//#region node_modules/yallist/iterator.js
var require_iterator = __commonJS({ "node_modules/yallist/iterator.js"(exports, module) {
	module.exports = function(Yallist$2) {
		Yallist$2.prototype[Symbol.iterator] = function* () {
			for (let walker = this.head; walker; walker = walker.next) yield walker.value;
		};
	};
} });

//#endregion
//#region node_modules/yallist/yallist.js
var require_yallist = __commonJS({ "node_modules/yallist/yallist.js"(exports, module) {
	module.exports = Yallist$1;
	Yallist$1.Node = Node$4;
	Yallist$1.create = Yallist$1;
	function Yallist$1(list$4) {
		var self$1 = this;
		if (!(self$1 instanceof Yallist$1)) self$1 = new Yallist$1();
		self$1.tail = null;
		self$1.head = null;
		self$1.length = 0;
		if (list$4 && typeof list$4.forEach === "function") list$4.forEach(function(item) {
			self$1.push(item);
		});
		else if (arguments.length > 0) for (var i$6 = 0, l$1 = arguments.length; i$6 < l$1; i$6++) self$1.push(arguments[i$6]);
		return self$1;
	}
	Yallist$1.prototype.removeNode = function(node) {
		if (node.list !== this) throw new Error("removing node which does not belong to this list");
		var next = node.next;
		var prev = node.prev;
		if (next) next.prev = prev;
		if (prev) prev.next = next;
		if (node === this.head) this.head = next;
		if (node === this.tail) this.tail = prev;
		node.list.length--;
		node.next = null;
		node.prev = null;
		node.list = null;
		return next;
	};
	Yallist$1.prototype.unshiftNode = function(node) {
		if (node === this.head) return;
		if (node.list) node.list.removeNode(node);
		var head = this.head;
		node.list = this;
		node.next = head;
		if (head) head.prev = node;
		this.head = node;
		if (!this.tail) this.tail = node;
		this.length++;
	};
	Yallist$1.prototype.pushNode = function(node) {
		if (node === this.tail) return;
		if (node.list) node.list.removeNode(node);
		var tail = this.tail;
		node.list = this;
		node.prev = tail;
		if (tail) tail.next = node;
		this.tail = node;
		if (!this.head) this.head = node;
		this.length++;
	};
	Yallist$1.prototype.push = function() {
		for (var i$6 = 0, l$1 = arguments.length; i$6 < l$1; i$6++) push(this, arguments[i$6]);
		return this.length;
	};
	Yallist$1.prototype.unshift = function() {
		for (var i$6 = 0, l$1 = arguments.length; i$6 < l$1; i$6++) unshift(this, arguments[i$6]);
		return this.length;
	};
	Yallist$1.prototype.pop = function() {
		if (!this.tail) return void 0;
		var res = this.tail.value;
		this.tail = this.tail.prev;
		if (this.tail) this.tail.next = null;
		else this.head = null;
		this.length--;
		return res;
	};
	Yallist$1.prototype.shift = function() {
		if (!this.head) return void 0;
		var res = this.head.value;
		this.head = this.head.next;
		if (this.head) this.head.prev = null;
		else this.tail = null;
		this.length--;
		return res;
	};
	Yallist$1.prototype.forEach = function(fn, thisp) {
		thisp = thisp || this;
		for (var walker = this.head, i$6 = 0; walker !== null; i$6++) {
			fn.call(thisp, walker.value, i$6, this);
			walker = walker.next;
		}
	};
	Yallist$1.prototype.forEachReverse = function(fn, thisp) {
		thisp = thisp || this;
		for (var walker = this.tail, i$6 = this.length - 1; walker !== null; i$6--) {
			fn.call(thisp, walker.value, i$6, this);
			walker = walker.prev;
		}
	};
	Yallist$1.prototype.get = function(n$4) {
		for (var i$6 = 0, walker = this.head; walker !== null && i$6 < n$4; i$6++) walker = walker.next;
		if (i$6 === n$4 && walker !== null) return walker.value;
	};
	Yallist$1.prototype.getReverse = function(n$4) {
		for (var i$6 = 0, walker = this.tail; walker !== null && i$6 < n$4; i$6++) walker = walker.prev;
		if (i$6 === n$4 && walker !== null) return walker.value;
	};
	Yallist$1.prototype.map = function(fn, thisp) {
		thisp = thisp || this;
		var res = new Yallist$1();
		for (var walker = this.head; walker !== null;) {
			res.push(fn.call(thisp, walker.value, this));
			walker = walker.next;
		}
		return res;
	};
	Yallist$1.prototype.mapReverse = function(fn, thisp) {
		thisp = thisp || this;
		var res = new Yallist$1();
		for (var walker = this.tail; walker !== null;) {
			res.push(fn.call(thisp, walker.value, this));
			walker = walker.prev;
		}
		return res;
	};
	Yallist$1.prototype.reduce = function(fn, initial) {
		var acc;
		var walker = this.head;
		if (arguments.length > 1) acc = initial;
		else if (this.head) {
			walker = this.head.next;
			acc = this.head.value;
		} else throw new TypeError("Reduce of empty list with no initial value");
		for (var i$6 = 0; walker !== null; i$6++) {
			acc = fn(acc, walker.value, i$6);
			walker = walker.next;
		}
		return acc;
	};
	Yallist$1.prototype.reduceReverse = function(fn, initial) {
		var acc;
		var walker = this.tail;
		if (arguments.length > 1) acc = initial;
		else if (this.tail) {
			walker = this.tail.prev;
			acc = this.tail.value;
		} else throw new TypeError("Reduce of empty list with no initial value");
		for (var i$6 = this.length - 1; walker !== null; i$6--) {
			acc = fn(acc, walker.value, i$6);
			walker = walker.prev;
		}
		return acc;
	};
	Yallist$1.prototype.toArray = function() {
		var arr = new Array(this.length);
		for (var i$6 = 0, walker = this.head; walker !== null; i$6++) {
			arr[i$6] = walker.value;
			walker = walker.next;
		}
		return arr;
	};
	Yallist$1.prototype.toArrayReverse = function() {
		var arr = new Array(this.length);
		for (var i$6 = 0, walker = this.tail; walker !== null; i$6++) {
			arr[i$6] = walker.value;
			walker = walker.prev;
		}
		return arr;
	};
	Yallist$1.prototype.slice = function(from, to) {
		to = to || this.length;
		if (to < 0) to += this.length;
		from = from || 0;
		if (from < 0) from += this.length;
		var ret$1 = new Yallist$1();
		if (to < from || to < 0) return ret$1;
		if (from < 0) from = 0;
		if (to > this.length) to = this.length;
		for (var i$6 = 0, walker = this.head; walker !== null && i$6 < from; i$6++) walker = walker.next;
		for (; walker !== null && i$6 < to; i$6++, walker = walker.next) ret$1.push(walker.value);
		return ret$1;
	};
	Yallist$1.prototype.sliceReverse = function(from, to) {
		to = to || this.length;
		if (to < 0) to += this.length;
		from = from || 0;
		if (from < 0) from += this.length;
		var ret$1 = new Yallist$1();
		if (to < from || to < 0) return ret$1;
		if (from < 0) from = 0;
		if (to > this.length) to = this.length;
		for (var i$6 = this.length, walker = this.tail; walker !== null && i$6 > to; i$6--) walker = walker.prev;
		for (; walker !== null && i$6 > from; i$6--, walker = walker.prev) ret$1.push(walker.value);
		return ret$1;
	};
	Yallist$1.prototype.splice = function(start, deleteCount) {
		if (start > this.length) start = this.length - 1;
		if (start < 0) start = this.length + start;
		for (var i$6 = 0, walker = this.head; walker !== null && i$6 < start; i$6++) walker = walker.next;
		var ret$1 = [];
		for (var i$6 = 0; walker && i$6 < deleteCount; i$6++) {
			ret$1.push(walker.value);
			walker = this.removeNode(walker);
		}
		if (walker === null) walker = this.tail;
		if (walker !== this.head && walker !== this.tail) walker = walker.prev;
		for (var i$6 = 2; i$6 < arguments.length; i$6++) walker = insert(this, walker, arguments[i$6]);
		return ret$1;
	};
	Yallist$1.prototype.reverse = function() {
		var head = this.head;
		var tail = this.tail;
		for (var walker = head; walker !== null; walker = walker.prev) {
			var p$2 = walker.prev;
			walker.prev = walker.next;
			walker.next = p$2;
		}
		this.head = tail;
		this.tail = head;
		return this;
	};
	function insert(self$1, node, value) {
		var inserted = node === self$1.head ? new Node$4(value, null, node, self$1) : new Node$4(value, node, node.next, self$1);
		if (inserted.next === null) self$1.tail = inserted;
		if (inserted.prev === null) self$1.head = inserted;
		self$1.length++;
		return inserted;
	}
	function push(self$1, item) {
		self$1.tail = new Node$4(item, self$1.tail, null, self$1);
		if (!self$1.head) self$1.head = self$1.tail;
		self$1.length++;
	}
	function unshift(self$1, item) {
		self$1.head = new Node$4(item, null, self$1.head, self$1);
		if (!self$1.tail) self$1.tail = self$1.head;
		self$1.length++;
	}
	function Node$4(value, prev, next, list$4) {
		if (!(this instanceof Node$4)) return new Node$4(value, prev, next, list$4);
		this.list = list$4;
		this.value = value;
		if (prev) {
			prev.next = this;
			this.prev = prev;
		} else this.prev = null;
		if (next) {
			next.prev = this;
			this.next = next;
		} else this.next = null;
	}
	try {
		require_iterator()(Yallist$1);
	} catch (er) {}
} });

//#endregion
//#region node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({ "node_modules/lru-cache/index.js"(exports, module) {
	const Yallist = require_yallist();
	const MAX = Symbol("max");
	const LENGTH = Symbol("length");
	const LENGTH_CALCULATOR = Symbol("lengthCalculator");
	const ALLOW_STALE = Symbol("allowStale");
	const MAX_AGE = Symbol("maxAge");
	const DISPOSE = Symbol("dispose");
	const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
	const LRU_LIST = Symbol("lruList");
	const CACHE = Symbol("cache");
	const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
	const naiveLength = () => 1;
	var LRUCache = class {
		constructor(options) {
			if (typeof options === "number") options = { max: options };
			if (!options) options = {};
			if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
			const max$1 = this[MAX] = options.max || Infinity;
			const lc = options.length || naiveLength;
			this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
			this[ALLOW_STALE] = options.stale || false;
			if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
			this[MAX_AGE] = options.maxAge || 0;
			this[DISPOSE] = options.dispose;
			this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
			this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
			this.reset();
		}
		set max(mL) {
			if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
			this[MAX] = mL || Infinity;
			trim(this);
		}
		get max() {
			return this[MAX];
		}
		set allowStale(allowStale) {
			this[ALLOW_STALE] = !!allowStale;
		}
		get allowStale() {
			return this[ALLOW_STALE];
		}
		set maxAge(mA) {
			if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
			this[MAX_AGE] = mA;
			trim(this);
		}
		get maxAge() {
			return this[MAX_AGE];
		}
		set lengthCalculator(lC) {
			if (typeof lC !== "function") lC = naiveLength;
			if (lC !== this[LENGTH_CALCULATOR]) {
				this[LENGTH_CALCULATOR] = lC;
				this[LENGTH] = 0;
				this[LRU_LIST].forEach((hit) => {
					hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
					this[LENGTH] += hit.length;
				});
			}
			trim(this);
		}
		get lengthCalculator() {
			return this[LENGTH_CALCULATOR];
		}
		get length() {
			return this[LENGTH];
		}
		get itemCount() {
			return this[LRU_LIST].length;
		}
		rforEach(fn, thisp) {
			thisp = thisp || this;
			for (let walker = this[LRU_LIST].tail; walker !== null;) {
				const prev = walker.prev;
				forEachStep(this, fn, walker, thisp);
				walker = prev;
			}
		}
		forEach(fn, thisp) {
			thisp = thisp || this;
			for (let walker = this[LRU_LIST].head; walker !== null;) {
				const next = walker.next;
				forEachStep(this, fn, walker, thisp);
				walker = next;
			}
		}
		keys() {
			return this[LRU_LIST].toArray().map((k$1) => k$1.key);
		}
		values() {
			return this[LRU_LIST].toArray().map((k$1) => k$1.value);
		}
		reset() {
			if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
			this[CACHE] = new Map();
			this[LRU_LIST] = new Yallist();
			this[LENGTH] = 0;
		}
		dump() {
			return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
				k: hit.key,
				v: hit.value,
				e: hit.now + (hit.maxAge || 0)
			}).toArray().filter((h$2) => h$2);
		}
		dumpLru() {
			return this[LRU_LIST];
		}
		set(key, value, maxAge) {
			maxAge = maxAge || this[MAX_AGE];
			if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
			const now = maxAge ? Date.now() : 0;
			const len = this[LENGTH_CALCULATOR](value, key);
			if (this[CACHE].has(key)) {
				if (len > this[MAX]) {
					del(this, this[CACHE].get(key));
					return false;
				}
				const node = this[CACHE].get(key);
				const item = node.value;
				if (this[DISPOSE]) {
					if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
				}
				item.now = now;
				item.maxAge = maxAge;
				item.value = value;
				this[LENGTH] += len - item.length;
				item.length = len;
				this.get(key);
				trim(this);
				return true;
			}
			const hit = new Entry(key, value, len, now, maxAge);
			if (hit.length > this[MAX]) {
				if (this[DISPOSE]) this[DISPOSE](key, value);
				return false;
			}
			this[LENGTH] += hit.length;
			this[LRU_LIST].unshift(hit);
			this[CACHE].set(key, this[LRU_LIST].head);
			trim(this);
			return true;
		}
		has(key) {
			if (!this[CACHE].has(key)) return false;
			const hit = this[CACHE].get(key).value;
			return !isStale(this, hit);
		}
		get(key) {
			return get$1(this, key, true);
		}
		peek(key) {
			return get$1(this, key, false);
		}
		pop() {
			const node = this[LRU_LIST].tail;
			if (!node) return null;
			del(this, node);
			return node.value;
		}
		del(key) {
			del(this, this[CACHE].get(key));
		}
		load(arr) {
			this.reset();
			const now = Date.now();
			for (let l$1 = arr.length - 1; l$1 >= 0; l$1--) {
				const hit = arr[l$1];
				const expiresAt = hit.e || 0;
				if (expiresAt === 0) this.set(hit.k, hit.v);
				else {
					const maxAge = expiresAt - now;
					if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
				}
			}
		}
		prune() {
			this[CACHE].forEach((value, key) => get$1(this, key, false));
		}
	};
	const get$1 = (self$1, key, doUse) => {
		const node = self$1[CACHE].get(key);
		if (node) {
			const hit = node.value;
			if (isStale(self$1, hit)) {
				del(self$1, node);
				if (!self$1[ALLOW_STALE]) return void 0;
			} else if (doUse) {
				if (self$1[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
				self$1[LRU_LIST].unshiftNode(node);
			}
			return hit.value;
		}
	};
	const isStale = (self$1, hit) => {
		if (!hit || !hit.maxAge && !self$1[MAX_AGE]) return false;
		const diff = Date.now() - hit.now;
		return hit.maxAge ? diff > hit.maxAge : self$1[MAX_AGE] && diff > self$1[MAX_AGE];
	};
	const trim = (self$1) => {
		if (self$1[LENGTH] > self$1[MAX]) for (let walker = self$1[LRU_LIST].tail; self$1[LENGTH] > self$1[MAX] && walker !== null;) {
			const prev = walker.prev;
			del(self$1, walker);
			walker = prev;
		}
	};
	const del = (self$1, node) => {
		if (node) {
			const hit = node.value;
			if (self$1[DISPOSE]) self$1[DISPOSE](hit.key, hit.value);
			self$1[LENGTH] -= hit.length;
			self$1[CACHE].delete(hit.key);
			self$1[LRU_LIST].removeNode(node);
		}
	};
	var Entry = class {
		constructor(key, value, length, now, maxAge) {
			this.key = key;
			this.value = value;
			this.length = length;
			this.now = now;
			this.maxAge = maxAge || 0;
		}
	};
	const forEachStep = (self$1, fn, node, thisp) => {
		let hit = node.value;
		if (isStale(self$1, hit)) {
			del(self$1, node);
			if (!self$1[ALLOW_STALE]) hit = void 0;
		}
		if (hit) fn.call(thisp, hit.value, hit.key, self$1);
	};
	module.exports = LRUCache;
} });

//#endregion
//#region node_modules/bluebird/js/release/es5.js
var require_es5 = __commonJS({ "node_modules/bluebird/js/release/es5.js"(exports, module) {
	var isES5 = function() {
		"use strict";
		return this === void 0;
	}();
	if (isES5) module.exports = {
		freeze: Object.freeze,
		defineProperty: Object.defineProperty,
		getDescriptor: Object.getOwnPropertyDescriptor,
		keys: Object.keys,
		names: Object.getOwnPropertyNames,
		getPrototypeOf: Object.getPrototypeOf,
		isArray: Array.isArray,
		isES5,
		propertyIsWritable: function(obj, prop) {
			var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
			return !!(!descriptor || descriptor.writable || descriptor.set);
		}
	};
	else {
		var has = {}.hasOwnProperty;
		var str$2 = {}.toString;
		var proto = {}.constructor.prototype;
		var ObjectKeys = function(o$2) {
			var ret$1 = [];
			for (var key in o$2) if (has.call(o$2, key)) ret$1.push(key);
			return ret$1;
		};
		var ObjectGetDescriptor = function(o$2, key) {
			return { value: o$2[key] };
		};
		var ObjectDefineProperty = function(o$2, key, desc) {
			o$2[key] = desc.value;
			return o$2;
		};
		var ObjectFreeze = function(obj) {
			return obj;
		};
		var ObjectGetPrototypeOf = function(obj) {
			try {
				return Object(obj).constructor.prototype;
			} catch (e$2) {
				return proto;
			}
		};
		var ArrayIsArray = function(obj) {
			try {
				return str$2.call(obj) === "[object Array]";
			} catch (e$2) {
				return false;
			}
		};
		module.exports = {
			isArray: ArrayIsArray,
			keys: ObjectKeys,
			names: ObjectKeys,
			defineProperty: ObjectDefineProperty,
			getDescriptor: ObjectGetDescriptor,
			freeze: ObjectFreeze,
			getPrototypeOf: ObjectGetPrototypeOf,
			isES5,
			propertyIsWritable: function() {
				return true;
			}
		};
	}
} });

//#endregion
//#region node_modules/bluebird/js/release/util.js
var require_util$3 = __commonJS({ "node_modules/bluebird/js/release/util.js"(exports, module) {
	var es5$2 = require_es5();
	var canEvaluate = typeof navigator == "undefined";
	var errorObj = { e: {} };
	var tryCatchTarget;
	var globalObject = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : exports !== void 0 ? exports : null;
	function tryCatcher() {
		try {
			var target = tryCatchTarget;
			tryCatchTarget = null;
			return target.apply(this, arguments);
		} catch (e$2) {
			errorObj.e = e$2;
			return errorObj;
		}
	}
	function tryCatch(fn) {
		tryCatchTarget = fn;
		return tryCatcher;
	}
	var inherits$4 = function(Child, Parent) {
		var hasProp = {}.hasOwnProperty;
		function T() {
			this.constructor = Child;
			this.constructor$ = Parent;
			for (var propertyName in Parent.prototype) if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") this[propertyName + "$"] = Parent.prototype[propertyName];
		}
		T.prototype = Parent.prototype;
		Child.prototype = new T();
		return Child.prototype;
	};
	function isPrimitive(val) {
		return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
	}
	function isObject$2(value) {
		return typeof value === "function" || typeof value === "object" && value !== null;
	}
	function maybeWrapAsError$1(maybeError) {
		if (!isPrimitive(maybeError)) return maybeError;
		return new Error(safeToString(maybeError));
	}
	function withAppended(target, appendee) {
		var len = target.length;
		var ret$1 = new Array(len + 1);
		var i$6;
		for (i$6 = 0; i$6 < len; ++i$6) ret$1[i$6] = target[i$6];
		ret$1[i$6] = appendee;
		return ret$1;
	}
	function getDataPropertyOrDefault(obj, key, defaultValue) {
		if (es5$2.isES5) {
			var desc = Object.getOwnPropertyDescriptor(obj, key);
			if (desc != null) return desc.get == null && desc.set == null ? desc.value : defaultValue;
		} else return {}.hasOwnProperty.call(obj, key) ? obj[key] : void 0;
	}
	function notEnumerableProp$1(obj, name, value) {
		if (isPrimitive(obj)) return obj;
		var descriptor = {
			value,
			configurable: true,
			enumerable: false,
			writable: true
		};
		es5$2.defineProperty(obj, name, descriptor);
		return obj;
	}
	function thrower(r$2) {
		throw r$2;
	}
	var inheritedDataKeys = function() {
		var excludedPrototypes = [
			Array.prototype,
			Object.prototype,
			Function.prototype
		];
		var isExcludedProto = function(val) {
			for (var i$6 = 0; i$6 < excludedPrototypes.length; ++i$6) if (excludedPrototypes[i$6] === val) return true;
			return false;
		};
		if (es5$2.isES5) {
			var getKeys = Object.getOwnPropertyNames;
			return function(obj) {
				var ret$1 = [];
				var visitedKeys = Object.create(null);
				while (obj != null && !isExcludedProto(obj)) {
					var keys$1;
					try {
						keys$1 = getKeys(obj);
					} catch (e$2) {
						return ret$1;
					}
					for (var i$6 = 0; i$6 < keys$1.length; ++i$6) {
						var key = keys$1[i$6];
						if (visitedKeys[key]) continue;
						visitedKeys[key] = true;
						var desc = Object.getOwnPropertyDescriptor(obj, key);
						if (desc != null && desc.get == null && desc.set == null) ret$1.push(key);
					}
					obj = es5$2.getPrototypeOf(obj);
				}
				return ret$1;
			};
		} else {
			var hasProp = {}.hasOwnProperty;
			return function(obj) {
				if (isExcludedProto(obj)) return [];
				var ret$1 = [];
				enumeration: for (var key in obj) if (hasProp.call(obj, key)) ret$1.push(key);
				else {
					for (var i$6 = 0; i$6 < excludedPrototypes.length; ++i$6) if (hasProp.call(excludedPrototypes[i$6], key)) continue enumeration;
					ret$1.push(key);
				}
				return ret$1;
			};
		}
	}();
	var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
	function isClass$2(fn) {
		try {
			if (typeof fn === "function") {
				var keys$1 = es5$2.names(fn.prototype);
				var hasMethods = es5$2.isES5 && keys$1.length > 1;
				var hasMethodsOtherThanConstructor = keys$1.length > 0 && !(keys$1.length === 1 && keys$1[0] === "constructor");
				var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + "") && es5$2.names(fn).length > 0;
				if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) return true;
			}
			return false;
		} catch (e$2) {
			return false;
		}
	}
	function toFastProperties(obj) {
		function FakeConstructor() {}
		FakeConstructor.prototype = obj;
		var receiver = new FakeConstructor();
		function ic() {
			return typeof receiver.foo;
		}
		ic();
		ic();
		return obj;
	}
	var rident = /^[a-z$_][a-z$_0-9]*$/i;
	function isIdentifier$14(str$4) {
		return rident.test(str$4);
	}
	function filledRange(count, prefix$1, suffix) {
		var ret$1 = new Array(count);
		for (var i$6 = 0; i$6 < count; ++i$6) ret$1[i$6] = prefix$1 + i$6 + suffix;
		return ret$1;
	}
	function safeToString(obj) {
		try {
			return obj + "";
		} catch (e$2) {
			return "[no string representation]";
		}
	}
	function isError(obj) {
		return obj instanceof Error || obj !== null && typeof obj === "object" && typeof obj.message === "string" && typeof obj.name === "string";
	}
	function markAsOriginatingFromRejection(e$2) {
		try {
			notEnumerableProp$1(e$2, "isOperational", true);
		} catch (ignore) {}
	}
	function originatesFromRejection(e$2) {
		if (e$2 == null) return false;
		return e$2 instanceof Error["__BluebirdErrorTypes__"].OperationalError || e$2["isOperational"] === true;
	}
	function canAttachTrace(obj) {
		return isError(obj) && es5$2.propertyIsWritable(obj, "stack");
	}
	var ensureErrorObject = function() {
		if (!("stack" in new Error())) return function(value) {
			if (canAttachTrace(value)) return value;
			try {
				throw new Error(safeToString(value));
			} catch (err) {
				return err;
			}
		};
		else return function(value) {
			if (canAttachTrace(value)) return value;
			return new Error(safeToString(value));
		};
	}();
	function classString(obj) {
		return {}.toString.call(obj);
	}
	function copyDescriptors(from, to, filter$2) {
		var keys$1 = es5$2.names(from);
		for (var i$6 = 0; i$6 < keys$1.length; ++i$6) {
			var key = keys$1[i$6];
			if (filter$2(key)) try {
				es5$2.defineProperty(to, key, es5$2.getDescriptor(from, key));
			} catch (ignore) {}
		}
	}
	var asArray = function(v$1) {
		if (es5$2.isArray(v$1)) return v$1;
		return null;
	};
	if (typeof Symbol !== "undefined" && Symbol.iterator) {
		var ArrayFrom = typeof Array.from === "function" ? function(v$1) {
			return Array.from(v$1);
		} : function(v$1) {
			var ret$1 = [];
			var it = v$1[Symbol.iterator]();
			var itResult;
			while (!(itResult = it.next()).done) ret$1.push(itResult.value);
			return ret$1;
		};
		asArray = function(v$1) {
			if (es5$2.isArray(v$1)) return v$1;
			else if (v$1 != null && typeof v$1[Symbol.iterator] === "function") return ArrayFrom(v$1);
			return null;
		};
	}
	var isNode$3 = typeof process !== "undefined" && classString(process).toLowerCase() === "[object process]";
	var hasEnvVariables = typeof process !== "undefined" && typeof process.env !== "undefined";
	function env$1(key) {
		return hasEnvVariables ? process.env[key] : void 0;
	}
	function getNativePromise() {
		if (typeof Promise === "function") try {
			var promise = new Promise(function() {});
			if (classString(promise) === "[object Promise]") return Promise;
		} catch (e$2) {}
	}
	var reflectHandler;
	function contextBind(ctx, cb) {
		if (ctx === null || typeof cb !== "function" || cb === reflectHandler) return cb;
		if (ctx.domain !== null) cb = ctx.domain.bind(cb);
		var async$1 = ctx.async;
		if (async$1 !== null) {
			var old$2 = cb;
			cb = function() {
				var $_len = arguments.length + 2;
				var args = new Array($_len);
				for (var $_i = 2; $_i < $_len; ++$_i) args[$_i] = arguments[$_i - 2];
				args[0] = old$2;
				args[1] = this;
				return async$1.runInAsyncScope.apply(async$1, args);
			};
		}
		return cb;
	}
	var ret = {
		setReflectHandler: function(fn) {
			reflectHandler = fn;
		},
		isClass: isClass$2,
		isIdentifier: isIdentifier$14,
		inheritedDataKeys,
		getDataPropertyOrDefault,
		thrower,
		isArray: es5$2.isArray,
		asArray,
		notEnumerableProp: notEnumerableProp$1,
		isPrimitive,
		isObject: isObject$2,
		isError,
		canEvaluate,
		errorObj,
		tryCatch,
		inherits: inherits$4,
		withAppended,
		maybeWrapAsError: maybeWrapAsError$1,
		toFastProperties,
		filledRange,
		toString: safeToString,
		canAttachTrace,
		ensureErrorObject,
		originatesFromRejection,
		markAsOriginatingFromRejection,
		classString,
		copyDescriptors,
		isNode: isNode$3,
		hasEnvVariables,
		env: env$1,
		global: globalObject,
		getNativePromise,
		contextBind
	};
	ret.isRecentNode = ret.isNode && function() {
		var version$1;
		if (process.versions && process.versions.node) version$1 = process.versions.node.split(".").map(Number);
		else if (process.version) version$1 = process.version.split(".").map(Number);
		return version$1[0] === 0 && version$1[1] > 10 || version$1[0] > 0;
	}();
	ret.nodeSupportsAsyncResource = ret.isNode && function() {
		var supportsAsync = false;
		try {
			var res = __require("async_hooks").AsyncResource;
			supportsAsync = typeof res.prototype.runInAsyncScope === "function";
		} catch (e$2) {
			supportsAsync = false;
		}
		return supportsAsync;
	}();
	if (ret.isNode) ret.toFastProperties(process);
	try {
		throw new Error();
	} catch (e$2) {
		ret.lastLineError = e$2;
	}
	module.exports = ret;
} });

//#endregion
//#region node_modules/bluebird/js/release/schedule.js
var require_schedule = __commonJS({ "node_modules/bluebird/js/release/schedule.js"(exports, module) {
	var util$6 = require_util$3();
	var schedule$1;
	var noAsyncScheduler = function() {
		throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
	};
	var NativePromise = util$6.getNativePromise();
	if (util$6.isNode && typeof MutationObserver === "undefined") {
		var GlobalSetImmediate = global.setImmediate;
		var ProcessNextTick = process.nextTick;
		schedule$1 = util$6.isRecentNode ? function(fn) {
			GlobalSetImmediate.call(global, fn);
		} : function(fn) {
			ProcessNextTick.call(process, fn);
		};
	} else if (typeof NativePromise === "function" && typeof NativePromise.resolve === "function") {
		var nativePromise = NativePromise.resolve();
		schedule$1 = function(fn) {
			nativePromise.then(fn);
		};
	} else if (typeof MutationObserver !== "undefined" && !(typeof window !== "undefined" && window.navigator && (window.navigator.standalone || window.cordova)) && "classList" in document.documentElement) schedule$1 = function() {
		var div = document.createElement("div");
		var opts = { attributes: true };
		var toggleScheduled = false;
		var div2 = document.createElement("div");
		var o2 = new MutationObserver(function() {
			div.classList.toggle("foo");
			toggleScheduled = false;
		});
		o2.observe(div2, opts);
		var scheduleToggle = function() {
			if (toggleScheduled) return;
			toggleScheduled = true;
			div2.classList.toggle("foo");
		};
		return function schedule$2(fn) {
			var o$2 = new MutationObserver(function() {
				o$2.disconnect();
				fn();
			});
			o$2.observe(div, opts);
			scheduleToggle();
		};
	}();
	else if (typeof setImmediate !== "undefined") schedule$1 = function(fn) {
		setImmediate(fn);
	};
	else if (typeof setTimeout !== "undefined") schedule$1 = function(fn) {
		setTimeout(fn, 0);
	};
	else schedule$1 = noAsyncScheduler;
	module.exports = schedule$1;
} });

//#endregion
//#region node_modules/bluebird/js/release/queue.js
var require_queue = __commonJS({ "node_modules/bluebird/js/release/queue.js"(exports, module) {
	function arrayMove(src, srcIndex, dst, dstIndex, len) {
		for (var j$1 = 0; j$1 < len; ++j$1) {
			dst[j$1 + dstIndex] = src[j$1 + srcIndex];
			src[j$1 + srcIndex] = void 0;
		}
	}
	function Queue$1(capacity) {
		this._capacity = capacity;
		this._length = 0;
		this._front = 0;
	}
	Queue$1.prototype._willBeOverCapacity = function(size) {
		return this._capacity < size;
	};
	Queue$1.prototype._pushOne = function(arg) {
		var length = this.length();
		this._checkCapacity(length + 1);
		var i$6 = this._front + length & this._capacity - 1;
		this[i$6] = arg;
		this._length = length + 1;
	};
	Queue$1.prototype.push = function(fn, receiver, arg) {
		var length = this.length() + 3;
		if (this._willBeOverCapacity(length)) {
			this._pushOne(fn);
			this._pushOne(receiver);
			this._pushOne(arg);
			return;
		}
		var j$1 = this._front + length - 3;
		this._checkCapacity(length);
		var wrapMask = this._capacity - 1;
		this[j$1 + 0 & wrapMask] = fn;
		this[j$1 + 1 & wrapMask] = receiver;
		this[j$1 + 2 & wrapMask] = arg;
		this._length = length;
	};
	Queue$1.prototype.shift = function() {
		var front = this._front, ret$1 = this[front];
		this[front] = void 0;
		this._front = front + 1 & this._capacity - 1;
		this._length--;
		return ret$1;
	};
	Queue$1.prototype.length = function() {
		return this._length;
	};
	Queue$1.prototype._checkCapacity = function(size) {
		if (this._capacity < size) this._resizeTo(this._capacity << 1);
	};
	Queue$1.prototype._resizeTo = function(capacity) {
		var oldCapacity = this._capacity;
		this._capacity = capacity;
		var front = this._front;
		var length = this._length;
		var moveItemsCount = front + length & oldCapacity - 1;
		arrayMove(this, 0, this, oldCapacity, moveItemsCount);
	};
	module.exports = Queue$1;
} });

//#endregion
//#region node_modules/bluebird/js/release/async.js
var require_async = __commonJS({ "node_modules/bluebird/js/release/async.js"(exports, module) {
	var firstLineError;
	try {
		throw new Error();
	} catch (e$2) {
		firstLineError = e$2;
	}
	var schedule = require_schedule();
	var Queue = require_queue();
	function Async() {
		this._customScheduler = false;
		this._isTickUsed = false;
		this._lateQueue = new Queue(16);
		this._normalQueue = new Queue(16);
		this._haveDrainedQueues = false;
		var self$1 = this;
		this.drainQueues = function() {
			self$1._drainQueues();
		};
		this._schedule = schedule;
	}
	Async.prototype.setScheduler = function(fn) {
		var prev = this._schedule;
		this._schedule = fn;
		this._customScheduler = true;
		return prev;
	};
	Async.prototype.hasCustomScheduler = function() {
		return this._customScheduler;
	};
	Async.prototype.haveItemsQueued = function() {
		return this._isTickUsed || this._haveDrainedQueues;
	};
	Async.prototype.fatalError = function(e$2, isNode$5) {
		if (isNode$5) {
			process.stderr.write("Fatal " + (e$2 instanceof Error ? e$2.stack : e$2) + "\n");
			process.exit(2);
		} else this.throwLater(e$2);
	};
	Async.prototype.throwLater = function(fn, arg) {
		if (arguments.length === 1) {
			arg = fn;
			fn = function() {
				throw arg;
			};
		}
		if (typeof setTimeout !== "undefined") setTimeout(function() {
			fn(arg);
		}, 0);
		else try {
			this._schedule(function() {
				fn(arg);
			});
		} catch (e$2) {
			throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
		}
	};
	function AsyncInvokeLater(fn, receiver, arg) {
		this._lateQueue.push(fn, receiver, arg);
		this._queueTick();
	}
	function AsyncInvoke(fn, receiver, arg) {
		this._normalQueue.push(fn, receiver, arg);
		this._queueTick();
	}
	function AsyncSettlePromises(promise) {
		this._normalQueue._pushOne(promise);
		this._queueTick();
	}
	Async.prototype.invokeLater = AsyncInvokeLater;
	Async.prototype.invoke = AsyncInvoke;
	Async.prototype.settlePromises = AsyncSettlePromises;
	function _drainQueue(queue$1) {
		while (queue$1.length() > 0) _drainQueueStep(queue$1);
	}
	function _drainQueueStep(queue$1) {
		var fn = queue$1.shift();
		if (typeof fn !== "function") fn._settlePromises();
		else {
			var receiver = queue$1.shift();
			var arg = queue$1.shift();
			fn.call(receiver, arg);
		}
	}
	Async.prototype._drainQueues = function() {
		_drainQueue(this._normalQueue);
		this._reset();
		this._haveDrainedQueues = true;
		_drainQueue(this._lateQueue);
	};
	Async.prototype._queueTick = function() {
		if (!this._isTickUsed) {
			this._isTickUsed = true;
			this._schedule(this.drainQueues);
		}
	};
	Async.prototype._reset = function() {
		this._isTickUsed = false;
	};
	module.exports = Async;
	module.exports.firstLineError = firstLineError;
} });

//#endregion
//#region node_modules/bluebird/js/release/errors.js
var require_errors = __commonJS({ "node_modules/bluebird/js/release/errors.js"(exports, module) {
	var es5$1 = require_es5();
	var Objectfreeze = es5$1.freeze;
	var util$5 = require_util$3();
	var inherits$3 = util$5.inherits;
	var notEnumerableProp = util$5.notEnumerableProp;
	function subError(nameProperty, defaultMessage) {
		function SubError(message) {
			if (!(this instanceof SubError)) return new SubError(message);
			notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
			notEnumerableProp(this, "name", nameProperty);
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
			else Error.call(this);
		}
		inherits$3(SubError, Error);
		return SubError;
	}
	var _TypeError, _RangeError;
	var Warning = subError("Warning", "warning");
	var CancellationError = subError("CancellationError", "cancellation error");
	var TimeoutError = subError("TimeoutError", "timeout error");
	var AggregateError = subError("AggregateError", "aggregate error");
	try {
		_TypeError = TypeError;
		_RangeError = RangeError;
	} catch (e$2) {
		_TypeError = subError("TypeError", "type error");
		_RangeError = subError("RangeError", "range error");
	}
	var methods$1 = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" ");
	for (var i$4 = 0; i$4 < methods$1.length; ++i$4) if (typeof Array.prototype[methods$1[i$4]] === "function") AggregateError.prototype[methods$1[i$4]] = Array.prototype[methods$1[i$4]];
	es5$1.defineProperty(AggregateError.prototype, "length", {
		value: 0,
		configurable: false,
		writable: true,
		enumerable: true
	});
	AggregateError.prototype["isOperational"] = true;
	var level = 0;
	AggregateError.prototype.toString = function() {
		var indent = Array(level * 4 + 1).join(" ");
		var ret$1 = "\n" + indent + "AggregateError of:\n";
		level++;
		indent = Array(level * 4 + 1).join(" ");
		for (var i$6 = 0; i$6 < this.length; ++i$6) {
			var str$4 = this[i$6] === this ? "[Circular AggregateError]" : this[i$6] + "";
			var lines = str$4.split("\n");
			for (var j$1 = 0; j$1 < lines.length; ++j$1) lines[j$1] = indent + lines[j$1];
			str$4 = lines.join("\n");
			ret$1 += str$4 + "\n";
		}
		level--;
		return ret$1;
	};
	function OperationalError$1(message) {
		if (!(this instanceof OperationalError$1)) return new OperationalError$1(message);
		notEnumerableProp(this, "name", "OperationalError");
		notEnumerableProp(this, "message", message);
		this.cause = message;
		this["isOperational"] = true;
		if (message instanceof Error) {
			notEnumerableProp(this, "message", message.message);
			notEnumerableProp(this, "stack", message.stack);
		} else if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
	}
	inherits$3(OperationalError$1, Error);
	var errorTypes = Error["__BluebirdErrorTypes__"];
	if (!errorTypes) {
		errorTypes = Objectfreeze({
			CancellationError,
			TimeoutError,
			OperationalError: OperationalError$1,
			RejectionError: OperationalError$1,
			AggregateError
		});
		es5$1.defineProperty(Error, "__BluebirdErrorTypes__", {
			value: errorTypes,
			writable: false,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		Error,
		TypeError: _TypeError,
		RangeError: _RangeError,
		CancellationError: errorTypes.CancellationError,
		OperationalError: errorTypes.OperationalError,
		TimeoutError: errorTypes.TimeoutError,
		AggregateError: errorTypes.AggregateError,
		Warning
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/thenables.js
var require_thenables = __commonJS({ "node_modules/bluebird/js/release/thenables.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL) {
		var util$19 = require_util$3();
		var errorObj$1 = util$19.errorObj;
		var isObject$5 = util$19.isObject;
		function tryConvertToPromise(obj, context) {
			if (isObject$5(obj)) {
				if (obj instanceof Promise$2) return obj;
				var then = getThen(obj);
				if (then === errorObj$1) {
					if (context) context._pushContext();
					var ret$1 = Promise$2.reject(then.e);
					if (context) context._popContext();
					return ret$1;
				} else if (typeof then === "function") {
					if (isAnyBluebirdPromise(obj)) {
						var ret$1 = new Promise$2(INTERNAL);
						obj._then(ret$1._fulfill, ret$1._reject, void 0, ret$1, null);
						return ret$1;
					}
					return doThenable(obj, then, context);
				}
			}
			return obj;
		}
		function doGetThen(obj) {
			return obj.then;
		}
		function getThen(obj) {
			try {
				return doGetThen(obj);
			} catch (e$2) {
				errorObj$1.e = e$2;
				return errorObj$1;
			}
		}
		var hasProp = {}.hasOwnProperty;
		function isAnyBluebirdPromise(obj) {
			try {
				return hasProp.call(obj, "_promise0");
			} catch (e$2) {
				return false;
			}
		}
		function doThenable(x$1, then, context) {
			var promise = new Promise$2(INTERNAL);
			var ret$1 = promise;
			if (context) context._pushContext();
			promise._captureStackTrace();
			if (context) context._popContext();
			var synchronous = true;
			var result = util$19.tryCatch(then).call(x$1, resolve$5, reject);
			synchronous = false;
			if (promise && result === errorObj$1) {
				promise._rejectCallback(result.e, true, true);
				promise = null;
			}
			function resolve$5(value) {
				if (!promise) return;
				promise._resolveCallback(value);
				promise = null;
			}
			function reject(reason) {
				if (!promise) return;
				promise._rejectCallback(reason, synchronous, true);
				promise = null;
			}
			return ret$1;
		}
		return tryConvertToPromise;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/promise_array.js
var require_promise_array = __commonJS({ "node_modules/bluebird/js/release/promise_array.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL, tryConvertToPromise, apiRejection, Proxyable) {
		var util$19 = require_util$3();
		var isArray$5 = util$19.isArray;
		function toResolutionValue(val) {
			switch (val) {
				case -2: return [];
				case -3: return {};
				case -6: return new Map();
			}
		}
		function PromiseArray(values) {
			var promise = this._promise = new Promise$2(INTERNAL);
			if (values instanceof Promise$2) {
				promise._propagateFrom(values, 3);
				values.suppressUnhandledRejections();
			}
			promise._setOnCancel(this);
			this._values = values;
			this._length = 0;
			this._totalResolved = 0;
			this._init(void 0, -2);
		}
		util$19.inherits(PromiseArray, Proxyable);
		PromiseArray.prototype.length = function() {
			return this._length;
		};
		PromiseArray.prototype.promise = function() {
			return this._promise;
		};
		PromiseArray.prototype._init = function init$1(_, resolveValueIfEmpty) {
			var values = tryConvertToPromise(this._values, this._promise);
			if (values instanceof Promise$2) {
				values = values._target();
				var bitField = values._bitField;
				this._values = values;
				if ((bitField & 50397184) === 0) {
					this._promise._setAsyncGuaranteed();
					return values._then(init$1, this._reject, void 0, this, resolveValueIfEmpty);
				} else if ((bitField & 33554432) !== 0) values = values._value();
				else if ((bitField & 16777216) !== 0) return this._reject(values._reason());
				else return this._cancel();
			}
			values = util$19.asArray(values);
			if (values === null) {
				var err = apiRejection("expecting an array or an iterable object but got " + util$19.classString(values)).reason();
				this._promise._rejectCallback(err, false);
				return;
			}
			if (values.length === 0) {
				if (resolveValueIfEmpty === -5) this._resolveEmptyArray();
				else this._resolve(toResolutionValue(resolveValueIfEmpty));
				return;
			}
			this._iterate(values);
		};
		PromiseArray.prototype._iterate = function(values) {
			var len = this.getActualLength(values.length);
			this._length = len;
			this._values = this.shouldCopyValues() ? new Array(len) : this._values;
			var result = this._promise;
			var isResolved = false;
			var bitField = null;
			for (var i$6 = 0; i$6 < len; ++i$6) {
				var maybePromise = tryConvertToPromise(values[i$6], result);
				if (maybePromise instanceof Promise$2) {
					maybePromise = maybePromise._target();
					bitField = maybePromise._bitField;
				} else bitField = null;
				if (isResolved) {
					if (bitField !== null) maybePromise.suppressUnhandledRejections();
				} else if (bitField !== null) if ((bitField & 50397184) === 0) {
					maybePromise._proxy(this, i$6);
					this._values[i$6] = maybePromise;
				} else if ((bitField & 33554432) !== 0) isResolved = this._promiseFulfilled(maybePromise._value(), i$6);
				else if ((bitField & 16777216) !== 0) isResolved = this._promiseRejected(maybePromise._reason(), i$6);
				else isResolved = this._promiseCancelled(i$6);
				else isResolved = this._promiseFulfilled(maybePromise, i$6);
			}
			if (!isResolved) result._setAsyncGuaranteed();
		};
		PromiseArray.prototype._isResolved = function() {
			return this._values === null;
		};
		PromiseArray.prototype._resolve = function(value) {
			this._values = null;
			this._promise._fulfill(value);
		};
		PromiseArray.prototype._cancel = function() {
			if (this._isResolved() || !this._promise._isCancellable()) return;
			this._values = null;
			this._promise._cancel();
		};
		PromiseArray.prototype._reject = function(reason) {
			this._values = null;
			this._promise._rejectCallback(reason, false);
		};
		PromiseArray.prototype._promiseFulfilled = function(value, index$1) {
			this._values[index$1] = value;
			var totalResolved = ++this._totalResolved;
			if (totalResolved >= this._length) {
				this._resolve(this._values);
				return true;
			}
			return false;
		};
		PromiseArray.prototype._promiseCancelled = function() {
			this._cancel();
			return true;
		};
		PromiseArray.prototype._promiseRejected = function(reason) {
			this._totalResolved++;
			this._reject(reason);
			return true;
		};
		PromiseArray.prototype._resultCancelled = function() {
			if (this._isResolved()) return;
			var values = this._values;
			this._cancel();
			if (values instanceof Promise$2) values.cancel();
			else for (var i$6 = 0; i$6 < values.length; ++i$6) if (values[i$6] instanceof Promise$2) values[i$6].cancel();
		};
		PromiseArray.prototype.shouldCopyValues = function() {
			return true;
		};
		PromiseArray.prototype.getActualLength = function(len) {
			return len;
		};
		return PromiseArray;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/context.js
var require_context$2 = __commonJS({ "node_modules/bluebird/js/release/context.js"(exports, module) {
	module.exports = function(Promise$2) {
		var longStackTraces = false;
		var contextStack = [];
		Promise$2.prototype._promiseCreated = function() {};
		Promise$2.prototype._pushContext = function() {};
		Promise$2.prototype._popContext = function() {
			return null;
		};
		Promise$2._peekContext = Promise$2.prototype._peekContext = function() {};
		function Context() {
			this._trace = new Context.CapturedTrace(peekContext());
		}
		Context.prototype._pushContext = function() {
			if (this._trace !== void 0) {
				this._trace._promiseCreated = null;
				contextStack.push(this._trace);
			}
		};
		Context.prototype._popContext = function() {
			if (this._trace !== void 0) {
				var trace = contextStack.pop();
				var ret$1 = trace._promiseCreated;
				trace._promiseCreated = null;
				return ret$1;
			}
			return null;
		};
		function createContext() {
			if (longStackTraces) return new Context();
		}
		function peekContext() {
			var lastIndex = contextStack.length - 1;
			if (lastIndex >= 0) return contextStack[lastIndex];
			return void 0;
		}
		Context.CapturedTrace = null;
		Context.create = createContext;
		Context.deactivateLongStackTraces = function() {};
		Context.activateLongStackTraces = function() {
			var Promise_pushContext = Promise$2.prototype._pushContext;
			var Promise_popContext = Promise$2.prototype._popContext;
			var Promise_PeekContext = Promise$2._peekContext;
			var Promise_peekContext = Promise$2.prototype._peekContext;
			var Promise_promiseCreated = Promise$2.prototype._promiseCreated;
			Context.deactivateLongStackTraces = function() {
				Promise$2.prototype._pushContext = Promise_pushContext;
				Promise$2.prototype._popContext = Promise_popContext;
				Promise$2._peekContext = Promise_PeekContext;
				Promise$2.prototype._peekContext = Promise_peekContext;
				Promise$2.prototype._promiseCreated = Promise_promiseCreated;
				longStackTraces = false;
			};
			longStackTraces = true;
			Promise$2.prototype._pushContext = Context.prototype._pushContext;
			Promise$2.prototype._popContext = Context.prototype._popContext;
			Promise$2._peekContext = Promise$2.prototype._peekContext = peekContext;
			Promise$2.prototype._promiseCreated = function() {
				var ctx = this._peekContext();
				if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
			};
		};
		return Context;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/debuggability.js
var require_debuggability = __commonJS({ "node_modules/bluebird/js/release/debuggability.js"(exports, module) {
	module.exports = function(Promise$2, Context, enableAsyncHooks, disableAsyncHooks) {
		var async$1 = Promise$2._async;
		var Warning$5 = require_errors().Warning;
		var util$19 = require_util$3();
		var es5$3 = require_es5();
		var canAttachTrace$1 = util$19.canAttachTrace;
		var unhandledRejectionHandled;
		var possiblyUnhandledRejection;
		var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
		var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
		var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
		var stackFramePattern = null;
		var formatStack = null;
		var indentStackFrames = false;
		var printWarning;
		var debugging = !!(util$19.env("BLUEBIRD_DEBUG") != 0 && (util$19.env("BLUEBIRD_DEBUG") || util$19.env("NODE_ENV") === "development"));
		var warnings$1 = !!(util$19.env("BLUEBIRD_WARNINGS") != 0 && (debugging || util$19.env("BLUEBIRD_WARNINGS")));
		var longStackTraces = !!(util$19.env("BLUEBIRD_LONG_STACK_TRACES") != 0 && (debugging || util$19.env("BLUEBIRD_LONG_STACK_TRACES")));
		var wForgottenReturn = util$19.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 && (warnings$1 || !!util$19.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
		var deferUnhandledRejectionCheck;
		(function() {
			var promises = [];
			function unhandledRejectionCheck() {
				for (var i$6 = 0; i$6 < promises.length; ++i$6) promises[i$6]._notifyUnhandledRejection();
				unhandledRejectionClear();
			}
			function unhandledRejectionClear() {
				promises.length = 0;
			}
			deferUnhandledRejectionCheck = function(promise) {
				promises.push(promise);
				setTimeout(unhandledRejectionCheck, 1);
			};
			es5$3.defineProperty(Promise$2, "_unhandledRejectionCheck", { value: unhandledRejectionCheck });
			es5$3.defineProperty(Promise$2, "_unhandledRejectionClear", { value: unhandledRejectionClear });
		})();
		Promise$2.prototype.suppressUnhandledRejections = function() {
			var target = this._target();
			target._bitField = target._bitField & -1048577 | 524288;
		};
		Promise$2.prototype._ensurePossibleRejectionHandled = function() {
			if ((this._bitField & 524288) !== 0) return;
			this._setRejectionIsUnhandled();
			deferUnhandledRejectionCheck(this);
		};
		Promise$2.prototype._notifyUnhandledRejectionIsHandled = function() {
			fireRejectionEvent("rejectionHandled", unhandledRejectionHandled, void 0, this);
		};
		Promise$2.prototype._setReturnedNonUndefined = function() {
			this._bitField = this._bitField | 268435456;
		};
		Promise$2.prototype._returnedNonUndefined = function() {
			return (this._bitField & 268435456) !== 0;
		};
		Promise$2.prototype._notifyUnhandledRejection = function() {
			if (this._isRejectionUnhandled()) {
				var reason = this._settledValue();
				this._setUnhandledRejectionIsNotified();
				fireRejectionEvent("unhandledRejection", possiblyUnhandledRejection, reason, this);
			}
		};
		Promise$2.prototype._setUnhandledRejectionIsNotified = function() {
			this._bitField = this._bitField | 262144;
		};
		Promise$2.prototype._unsetUnhandledRejectionIsNotified = function() {
			this._bitField = this._bitField & -262145;
		};
		Promise$2.prototype._isUnhandledRejectionNotified = function() {
			return (this._bitField & 262144) > 0;
		};
		Promise$2.prototype._setRejectionIsUnhandled = function() {
			this._bitField = this._bitField | 1048576;
		};
		Promise$2.prototype._unsetRejectionIsUnhandled = function() {
			this._bitField = this._bitField & -1048577;
			if (this._isUnhandledRejectionNotified()) {
				this._unsetUnhandledRejectionIsNotified();
				this._notifyUnhandledRejectionIsHandled();
			}
		};
		Promise$2.prototype._isRejectionUnhandled = function() {
			return (this._bitField & 1048576) > 0;
		};
		Promise$2.prototype._warn = function(message, shouldUseOwnTrace, promise) {
			return warn$1(message, shouldUseOwnTrace, promise || this);
		};
		Promise$2.onPossiblyUnhandledRejection = function(fn) {
			var context = Promise$2._getContext();
			possiblyUnhandledRejection = util$19.contextBind(context, fn);
		};
		Promise$2.onUnhandledRejectionHandled = function(fn) {
			var context = Promise$2._getContext();
			unhandledRejectionHandled = util$19.contextBind(context, fn);
		};
		var disableLongStackTraces = function() {};
		Promise$2.longStackTraces = function() {
			if (async$1.haveItemsQueued() && !config.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
			if (!config.longStackTraces && longStackTracesIsSupported()) {
				var Promise_captureStackTrace = Promise$2.prototype._captureStackTrace;
				var Promise_attachExtraTrace = Promise$2.prototype._attachExtraTrace;
				var Promise_dereferenceTrace = Promise$2.prototype._dereferenceTrace;
				config.longStackTraces = true;
				disableLongStackTraces = function() {
					if (async$1.haveItemsQueued() && !config.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
					Promise$2.prototype._captureStackTrace = Promise_captureStackTrace;
					Promise$2.prototype._attachExtraTrace = Promise_attachExtraTrace;
					Promise$2.prototype._dereferenceTrace = Promise_dereferenceTrace;
					Context.deactivateLongStackTraces();
					config.longStackTraces = false;
				};
				Promise$2.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
				Promise$2.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
				Promise$2.prototype._dereferenceTrace = longStackTracesDereferenceTrace;
				Context.activateLongStackTraces();
			}
		};
		Promise$2.hasLongStackTraces = function() {
			return config.longStackTraces && longStackTracesIsSupported();
		};
		var legacyHandlers = {
			unhandledrejection: {
				before: function() {
					var ret$1 = util$19.global.onunhandledrejection;
					util$19.global.onunhandledrejection = null;
					return ret$1;
				},
				after: function(fn) {
					util$19.global.onunhandledrejection = fn;
				}
			},
			rejectionhandled: {
				before: function() {
					var ret$1 = util$19.global.onrejectionhandled;
					util$19.global.onrejectionhandled = null;
					return ret$1;
				},
				after: function(fn) {
					util$19.global.onrejectionhandled = fn;
				}
			}
		};
		var fireDomEvent = function() {
			var dispatch = function(legacy$2, e$2) {
				if (legacy$2) {
					var fn;
					try {
						fn = legacy$2.before();
						return !util$19.global.dispatchEvent(e$2);
					} finally {
						legacy$2.after(fn);
					}
				} else return !util$19.global.dispatchEvent(e$2);
			};
			try {
				if (typeof CustomEvent === "function") {
					var event = new CustomEvent("CustomEvent");
					util$19.global.dispatchEvent(event);
					return function(name, event$1) {
						name = name.toLowerCase();
						var eventData = {
							detail: event$1,
							cancelable: true
						};
						var domEvent = new CustomEvent(name, eventData);
						es5$3.defineProperty(domEvent, "promise", { value: event$1.promise });
						es5$3.defineProperty(domEvent, "reason", { value: event$1.reason });
						return dispatch(legacyHandlers[name], domEvent);
					};
				} else if (typeof Event === "function") {
					var event = new Event("CustomEvent");
					util$19.global.dispatchEvent(event);
					return function(name, event$1) {
						name = name.toLowerCase();
						var domEvent = new Event(name, { cancelable: true });
						domEvent.detail = event$1;
						es5$3.defineProperty(domEvent, "promise", { value: event$1.promise });
						es5$3.defineProperty(domEvent, "reason", { value: event$1.reason });
						return dispatch(legacyHandlers[name], domEvent);
					};
				} else {
					var event = document.createEvent("CustomEvent");
					event.initCustomEvent("testingtheevent", false, true, {});
					util$19.global.dispatchEvent(event);
					return function(name, event$1) {
						name = name.toLowerCase();
						var domEvent = document.createEvent("CustomEvent");
						domEvent.initCustomEvent(name, false, true, event$1);
						return dispatch(legacyHandlers[name], domEvent);
					};
				}
			} catch (e$2) {}
			return function() {
				return false;
			};
		}();
		var fireGlobalEvent = function() {
			if (util$19.isNode) return function() {
				return process.emit.apply(process, arguments);
			};
			else {
				if (!util$19.global) return function() {
					return false;
				};
				return function(name) {
					var methodName = "on" + name.toLowerCase();
					var method = util$19.global[methodName];
					if (!method) return false;
					method.apply(util$19.global, [].slice.call(arguments, 1));
					return true;
				};
			}
		}();
		function generatePromiseLifecycleEventObject(name, promise) {
			return { promise };
		}
		var eventToObjectGenerator = {
			promiseCreated: generatePromiseLifecycleEventObject,
			promiseFulfilled: generatePromiseLifecycleEventObject,
			promiseRejected: generatePromiseLifecycleEventObject,
			promiseResolved: generatePromiseLifecycleEventObject,
			promiseCancelled: generatePromiseLifecycleEventObject,
			promiseChained: function(name, promise, child) {
				return {
					promise,
					child
				};
			},
			warning: function(name, warning) {
				return { warning };
			},
			unhandledRejection: function(name, reason, promise) {
				return {
					reason,
					promise
				};
			},
			rejectionHandled: generatePromiseLifecycleEventObject
		};
		var activeFireEvent = function(name) {
			var globalEventFired = false;
			try {
				globalEventFired = fireGlobalEvent.apply(null, arguments);
			} catch (e$2) {
				async$1.throwLater(e$2);
				globalEventFired = true;
			}
			var domEventFired = false;
			try {
				domEventFired = fireDomEvent(name, eventToObjectGenerator[name].apply(null, arguments));
			} catch (e$2) {
				async$1.throwLater(e$2);
				domEventFired = true;
			}
			return domEventFired || globalEventFired;
		};
		Promise$2.config = function(opts) {
			opts = Object(opts);
			if ("longStackTraces" in opts) {
				if (opts.longStackTraces) Promise$2.longStackTraces();
				else if (!opts.longStackTraces && Promise$2.hasLongStackTraces()) disableLongStackTraces();
			}
			if ("warnings" in opts) {
				var warningsOption = opts.warnings;
				config.warnings = !!warningsOption;
				wForgottenReturn = config.warnings;
				if (util$19.isObject(warningsOption)) {
					if ("wForgottenReturn" in warningsOption) wForgottenReturn = !!warningsOption.wForgottenReturn;
				}
			}
			if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
				if (async$1.haveItemsQueued()) throw new Error("cannot enable cancellation after promises are in use");
				Promise$2.prototype._clearCancellationData = cancellationClearCancellationData;
				Promise$2.prototype._propagateFrom = cancellationPropagateFrom;
				Promise$2.prototype._onCancel = cancellationOnCancel;
				Promise$2.prototype._setOnCancel = cancellationSetOnCancel;
				Promise$2.prototype._attachCancellationCallback = cancellationAttachCancellationCallback;
				Promise$2.prototype._execute = cancellationExecute;
				propagateFromFunction = cancellationPropagateFrom;
				config.cancellation = true;
			}
			if ("monitoring" in opts) {
				if (opts.monitoring && !config.monitoring) {
					config.monitoring = true;
					Promise$2.prototype._fireEvent = activeFireEvent;
				} else if (!opts.monitoring && config.monitoring) {
					config.monitoring = false;
					Promise$2.prototype._fireEvent = defaultFireEvent;
				}
			}
			if ("asyncHooks" in opts && util$19.nodeSupportsAsyncResource) {
				var prev = config.asyncHooks;
				var cur = !!opts.asyncHooks;
				if (prev !== cur) {
					config.asyncHooks = cur;
					if (cur) enableAsyncHooks();
					else disableAsyncHooks();
				}
			}
			return Promise$2;
		};
		function defaultFireEvent() {
			return false;
		}
		Promise$2.prototype._fireEvent = defaultFireEvent;
		Promise$2.prototype._execute = function(executor, resolve$5, reject) {
			try {
				executor(resolve$5, reject);
			} catch (e$2) {
				return e$2;
			}
		};
		Promise$2.prototype._onCancel = function() {};
		Promise$2.prototype._setOnCancel = function(handler) {};
		Promise$2.prototype._attachCancellationCallback = function(onCancel) {};
		Promise$2.prototype._captureStackTrace = function() {};
		Promise$2.prototype._attachExtraTrace = function() {};
		Promise$2.prototype._dereferenceTrace = function() {};
		Promise$2.prototype._clearCancellationData = function() {};
		Promise$2.prototype._propagateFrom = function(parent, flags) {};
		function cancellationExecute(executor, resolve$5, reject) {
			var promise = this;
			try {
				executor(resolve$5, reject, function(onCancel) {
					if (typeof onCancel !== "function") throw new TypeError("onCancel must be a function, got: " + util$19.toString(onCancel));
					promise._attachCancellationCallback(onCancel);
				});
			} catch (e$2) {
				return e$2;
			}
		}
		function cancellationAttachCancellationCallback(onCancel) {
			if (!this._isCancellable()) return this;
			var previousOnCancel = this._onCancel();
			if (previousOnCancel !== void 0) if (util$19.isArray(previousOnCancel)) previousOnCancel.push(onCancel);
			else this._setOnCancel([previousOnCancel, onCancel]);
			else this._setOnCancel(onCancel);
		}
		function cancellationOnCancel() {
			return this._onCancelField;
		}
		function cancellationSetOnCancel(onCancel) {
			this._onCancelField = onCancel;
		}
		function cancellationClearCancellationData() {
			this._cancellationParent = void 0;
			this._onCancelField = void 0;
		}
		function cancellationPropagateFrom(parent, flags) {
			if ((flags & 1) !== 0) {
				this._cancellationParent = parent;
				var branchesRemainingToCancel = parent._branchesRemainingToCancel;
				if (branchesRemainingToCancel === void 0) branchesRemainingToCancel = 0;
				parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
			}
			if ((flags & 2) !== 0 && parent._isBound()) this._setBoundTo(parent._boundTo);
		}
		function bindingPropagateFrom(parent, flags) {
			if ((flags & 2) !== 0 && parent._isBound()) this._setBoundTo(parent._boundTo);
		}
		var propagateFromFunction = bindingPropagateFrom;
		function boundValueFunction() {
			var ret$1 = this._boundTo;
			if (ret$1 !== void 0) {
				if (ret$1 instanceof Promise$2) if (ret$1.isFulfilled()) return ret$1.value();
				else return void 0;
			}
			return ret$1;
		}
		function longStackTracesCaptureStackTrace() {
			this._trace = new CapturedTrace(this._peekContext());
		}
		function longStackTracesAttachExtraTrace(error, ignoreSelf) {
			if (canAttachTrace$1(error)) {
				var trace = this._trace;
				if (trace !== void 0) {
					if (ignoreSelf) trace = trace._parent;
				}
				if (trace !== void 0) trace.attachExtraTrace(error);
				else if (!error.__stackCleaned__) {
					var parsed = parseStackAndMessage(error);
					util$19.notEnumerableProp(error, "stack", parsed.message + "\n" + parsed.stack.join("\n"));
					util$19.notEnumerableProp(error, "__stackCleaned__", true);
				}
			}
		}
		function longStackTracesDereferenceTrace() {
			this._trace = void 0;
		}
		function checkForgottenReturns(returnValue, promiseCreated, name, promise, parent) {
			if (returnValue === void 0 && promiseCreated !== null && wForgottenReturn) {
				if (parent !== void 0 && parent._returnedNonUndefined()) return;
				if ((promise._bitField & 65535) === 0) return;
				if (name) name = name + " ";
				var handlerLine = "";
				var creatorLine = "";
				if (promiseCreated._trace) {
					var traceLines = promiseCreated._trace.stack.split("\n");
					var stack = cleanStack(traceLines);
					for (var i$6 = stack.length - 1; i$6 >= 0; --i$6) {
						var line = stack[i$6];
						if (!nodeFramePattern.test(line)) {
							var lineMatches = line.match(parseLinePattern);
							if (lineMatches) handlerLine = "at " + lineMatches[1] + ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
							break;
						}
					}
					if (stack.length > 0) {
						var firstUserLine = stack[0];
						for (var i$6 = 0; i$6 < traceLines.length; ++i$6) if (traceLines[i$6] === firstUserLine) {
							if (i$6 > 0) creatorLine = "\n" + traceLines[i$6 - 1];
							break;
						}
					}
				}
				var msg = "a promise was created in a " + name + "handler " + handlerLine + "but was not returned from it, see http://goo.gl/rRqMUw" + creatorLine;
				promise._warn(msg, true, promiseCreated);
			}
		}
		function deprecated(name, replacement) {
			var message = name + " is deprecated and will be removed in a future version.";
			if (replacement) message += " Use " + replacement + " instead.";
			return warn$1(message);
		}
		function warn$1(message, shouldUseOwnTrace, promise) {
			if (!config.warnings) return;
			var warning = new Warning$5(message);
			var ctx;
			if (shouldUseOwnTrace) promise._attachExtraTrace(warning);
			else if (config.longStackTraces && (ctx = Promise$2._peekContext())) ctx.attachExtraTrace(warning);
			else {
				var parsed = parseStackAndMessage(warning);
				warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
			}
			if (!activeFireEvent("warning", warning)) formatAndLogError(warning, "", true);
		}
		function reconstructStack(message, stacks) {
			for (var i$6 = 0; i$6 < stacks.length - 1; ++i$6) {
				stacks[i$6].push("From previous event:");
				stacks[i$6] = stacks[i$6].join("\n");
			}
			if (i$6 < stacks.length) stacks[i$6] = stacks[i$6].join("\n");
			return message + "\n" + stacks.join("\n");
		}
		function removeDuplicateOrEmptyJumps(stacks) {
			for (var i$6 = 0; i$6 < stacks.length; ++i$6) if (stacks[i$6].length === 0 || i$6 + 1 < stacks.length && stacks[i$6][0] === stacks[i$6 + 1][0]) {
				stacks.splice(i$6, 1);
				i$6--;
			}
		}
		function removeCommonRoots(stacks) {
			var current = stacks[0];
			for (var i$6 = 1; i$6 < stacks.length; ++i$6) {
				var prev = stacks[i$6];
				var currentLastIndex = current.length - 1;
				var currentLastLine = current[currentLastIndex];
				var commonRootMeetPoint = -1;
				for (var j$1 = prev.length - 1; j$1 >= 0; --j$1) if (prev[j$1] === currentLastLine) {
					commonRootMeetPoint = j$1;
					break;
				}
				for (var j$1 = commonRootMeetPoint; j$1 >= 0; --j$1) {
					var line = prev[j$1];
					if (current[currentLastIndex] === line) {
						current.pop();
						currentLastIndex--;
					} else break;
				}
				current = prev;
			}
		}
		function cleanStack(stack) {
			var ret$1 = [];
			for (var i$6 = 0; i$6 < stack.length; ++i$6) {
				var line = stack[i$6];
				var isTraceLine = "    (No stack trace)" === line || stackFramePattern.test(line);
				var isInternalFrame = isTraceLine && shouldIgnore(line);
				if (isTraceLine && !isInternalFrame) {
					if (indentStackFrames && line.charAt(0) !== " ") line = "    " + line;
					ret$1.push(line);
				}
			}
			return ret$1;
		}
		function stackFramesAsArray(error) {
			var stack = error.stack.replace(/\s+$/g, "").split("\n");
			for (var i$6 = 0; i$6 < stack.length; ++i$6) {
				var line = stack[i$6];
				if ("    (No stack trace)" === line || stackFramePattern.test(line)) break;
			}
			if (i$6 > 0 && error.name != "SyntaxError") stack = stack.slice(i$6);
			return stack;
		}
		function parseStackAndMessage(error) {
			var stack = error.stack;
			var message = error.toString();
			stack = typeof stack === "string" && stack.length > 0 ? stackFramesAsArray(error) : ["    (No stack trace)"];
			return {
				message,
				stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
			};
		}
		function formatAndLogError(error, title, isSoft) {
			if (typeof console !== "undefined") {
				var message;
				if (util$19.isObject(error)) {
					var stack = error.stack;
					message = title + formatStack(stack, error);
				} else message = title + String(error);
				if (typeof printWarning === "function") printWarning(message, isSoft);
				else if (typeof console.log === "function" || typeof console.log === "object") console.log(message);
			}
		}
		function fireRejectionEvent(name, localHandler, reason, promise) {
			var localEventFired = false;
			try {
				if (typeof localHandler === "function") {
					localEventFired = true;
					if (name === "rejectionHandled") localHandler(promise);
					else localHandler(reason, promise);
				}
			} catch (e$2) {
				async$1.throwLater(e$2);
			}
			if (name === "unhandledRejection") {
				if (!activeFireEvent(name, reason, promise) && !localEventFired) formatAndLogError(reason, "Unhandled rejection ");
			} else activeFireEvent(name, promise);
		}
		function formatNonError(obj) {
			var str$4;
			if (typeof obj === "function") str$4 = "[function " + (obj.name || "anonymous") + "]";
			else {
				str$4 = obj && typeof obj.toString === "function" ? obj.toString() : util$19.toString(obj);
				var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
				if (ruselessToString.test(str$4)) try {
					var newStr = JSON.stringify(obj);
					str$4 = newStr;
				} catch (e$2) {}
				if (str$4.length === 0) str$4 = "(empty array)";
			}
			return "(<" + snip(str$4) + ">, no stack trace)";
		}
		function snip(str$4) {
			var maxChars = 41;
			if (str$4.length < maxChars) return str$4;
			return str$4.substr(0, maxChars - 3) + "...";
		}
		function longStackTracesIsSupported() {
			return typeof captureStackTrace === "function";
		}
		var shouldIgnore = function() {
			return false;
		};
		var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
		function parseLineInfo(line) {
			var matches = line.match(parseLineInfoRegex);
			if (matches) return {
				fileName: matches[1],
				line: parseInt(matches[2], 10)
			};
		}
		function setBounds(firstLineError$1, lastLineError) {
			if (!longStackTracesIsSupported()) return;
			var firstStackLines = (firstLineError$1.stack || "").split("\n");
			var lastStackLines = (lastLineError.stack || "").split("\n");
			var firstIndex = -1;
			var lastIndex = -1;
			var firstFileName;
			var lastFileName;
			for (var i$6 = 0; i$6 < firstStackLines.length; ++i$6) {
				var result = parseLineInfo(firstStackLines[i$6]);
				if (result) {
					firstFileName = result.fileName;
					firstIndex = result.line;
					break;
				}
			}
			for (var i$6 = 0; i$6 < lastStackLines.length; ++i$6) {
				var result = parseLineInfo(lastStackLines[i$6]);
				if (result) {
					lastFileName = result.fileName;
					lastIndex = result.line;
					break;
				}
			}
			if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) return;
			shouldIgnore = function(line) {
				if (bluebirdFramePattern.test(line)) return true;
				var info = parseLineInfo(line);
				if (info) {
					if (info.fileName === firstFileName && firstIndex <= info.line && info.line <= lastIndex) return true;
				}
				return false;
			};
		}
		function CapturedTrace(parent) {
			this._parent = parent;
			this._promisesCreated = 0;
			var length = this._length = 1 + (parent === void 0 ? 0 : parent._length);
			captureStackTrace(this, CapturedTrace);
			if (length > 32) this.uncycle();
		}
		util$19.inherits(CapturedTrace, Error);
		Context.CapturedTrace = CapturedTrace;
		CapturedTrace.prototype.uncycle = function() {
			var length = this._length;
			if (length < 2) return;
			var nodes$1 = [];
			var stackToIndex = {};
			for (var i$6 = 0, node = this; node !== void 0; ++i$6) {
				nodes$1.push(node);
				node = node._parent;
			}
			length = this._length = i$6;
			for (var i$6 = length - 1; i$6 >= 0; --i$6) {
				var stack = nodes$1[i$6].stack;
				if (stackToIndex[stack] === void 0) stackToIndex[stack] = i$6;
			}
			for (var i$6 = 0; i$6 < length; ++i$6) {
				var currentStack = nodes$1[i$6].stack;
				var index$1 = stackToIndex[currentStack];
				if (index$1 !== void 0 && index$1 !== i$6) {
					if (index$1 > 0) {
						nodes$1[index$1 - 1]._parent = void 0;
						nodes$1[index$1 - 1]._length = 1;
					}
					nodes$1[i$6]._parent = void 0;
					nodes$1[i$6]._length = 1;
					var cycleEdgeNode = i$6 > 0 ? nodes$1[i$6 - 1] : this;
					if (index$1 < length - 1) {
						cycleEdgeNode._parent = nodes$1[index$1 + 1];
						cycleEdgeNode._parent.uncycle();
						cycleEdgeNode._length = cycleEdgeNode._parent._length + 1;
					} else {
						cycleEdgeNode._parent = void 0;
						cycleEdgeNode._length = 1;
					}
					var currentChildLength = cycleEdgeNode._length + 1;
					for (var j$1 = i$6 - 2; j$1 >= 0; --j$1) {
						nodes$1[j$1]._length = currentChildLength;
						currentChildLength++;
					}
					return;
				}
			}
		};
		CapturedTrace.prototype.attachExtraTrace = function(error) {
			if (error.__stackCleaned__) return;
			this.uncycle();
			var parsed = parseStackAndMessage(error);
			var message = parsed.message;
			var stacks = [parsed.stack];
			var trace = this;
			while (trace !== void 0) {
				stacks.push(cleanStack(trace.stack.split("\n")));
				trace = trace._parent;
			}
			removeCommonRoots(stacks);
			removeDuplicateOrEmptyJumps(stacks);
			util$19.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
			util$19.notEnumerableProp(error, "__stackCleaned__", true);
		};
		var captureStackTrace = function stackDetection() {
			var v8stackFramePattern = /^\s*at\s*/;
			var v8stackFormatter = function(stack, error) {
				if (typeof stack === "string") return stack;
				if (error.name !== void 0 && error.message !== void 0) return error.toString();
				return formatNonError(error);
			};
			if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
				Error.stackTraceLimit += 6;
				stackFramePattern = v8stackFramePattern;
				formatStack = v8stackFormatter;
				var captureStackTrace$1 = Error.captureStackTrace;
				shouldIgnore = function(line) {
					return bluebirdFramePattern.test(line);
				};
				return function(receiver, ignoreUntil) {
					Error.stackTraceLimit += 6;
					captureStackTrace$1(receiver, ignoreUntil);
					Error.stackTraceLimit -= 6;
				};
			}
			var err = new Error();
			if (typeof err.stack === "string" && err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
				stackFramePattern = /@/;
				formatStack = v8stackFormatter;
				indentStackFrames = true;
				return function captureStackTrace$2(o$2) {
					o$2.stack = new Error().stack;
				};
			}
			var hasStackAfterThrow;
			try {
				throw new Error();
			} catch (e$2) {
				hasStackAfterThrow = "stack" in e$2;
			}
			if (!("stack" in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === "number") {
				stackFramePattern = v8stackFramePattern;
				formatStack = v8stackFormatter;
				return function captureStackTrace$2(o$2) {
					Error.stackTraceLimit += 6;
					try {
						throw new Error();
					} catch (e$2) {
						o$2.stack = e$2.stack;
					}
					Error.stackTraceLimit -= 6;
				};
			}
			formatStack = function(stack, error) {
				if (typeof stack === "string") return stack;
				if ((typeof error === "object" || typeof error === "function") && error.name !== void 0 && error.message !== void 0) return error.toString();
				return formatNonError(error);
			};
			return null;
		}([]);
		if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
			printWarning = function(message) {
				console.warn(message);
			};
			if (util$19.isNode && process.stderr.isTTY) printWarning = function(message, isSoft) {
				var color = isSoft ? "\x1B[33m" : "\x1B[31m";
				console.warn(color + message + "\x1B[0m\n");
			};
			else if (!util$19.isNode && typeof new Error().stack === "string") printWarning = function(message, isSoft) {
				console.warn("%c" + message, isSoft ? "color: darkorange" : "color: red");
			};
		}
		var config = {
			warnings: warnings$1,
			longStackTraces: false,
			cancellation: false,
			monitoring: false,
			asyncHooks: false
		};
		if (longStackTraces) Promise$2.longStackTraces();
		return {
			asyncHooks: function() {
				return config.asyncHooks;
			},
			longStackTraces: function() {
				return config.longStackTraces;
			},
			warnings: function() {
				return config.warnings;
			},
			cancellation: function() {
				return config.cancellation;
			},
			monitoring: function() {
				return config.monitoring;
			},
			propagateFromFunction: function() {
				return propagateFromFunction;
			},
			boundValueFunction: function() {
				return boundValueFunction;
			},
			checkForgottenReturns,
			setBounds,
			warn: warn$1,
			deprecated,
			CapturedTrace,
			fireDomEvent,
			fireGlobalEvent
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/catch_filter.js
var require_catch_filter = __commonJS({ "node_modules/bluebird/js/release/catch_filter.js"(exports, module) {
	module.exports = function(NEXT_FILTER) {
		var util$19 = require_util$3();
		var getKeys = require_es5().keys;
		var tryCatch$1 = util$19.tryCatch;
		var errorObj$1 = util$19.errorObj;
		function catchFilter(instances, cb, promise) {
			return function(e$2) {
				var boundTo = promise._boundValue();
				predicateLoop: for (var i$6 = 0; i$6 < instances.length; ++i$6) {
					var item = instances[i$6];
					if (item === Error || item != null && item.prototype instanceof Error) {
						if (e$2 instanceof item) return tryCatch$1(cb).call(boundTo, e$2);
					} else if (typeof item === "function") {
						var matchesPredicate = tryCatch$1(item).call(boundTo, e$2);
						if (matchesPredicate === errorObj$1) return matchesPredicate;
						else if (matchesPredicate) return tryCatch$1(cb).call(boundTo, e$2);
					} else if (util$19.isObject(e$2)) {
						var keys$1 = getKeys(item);
						for (var j$1 = 0; j$1 < keys$1.length; ++j$1) {
							var key = keys$1[j$1];
							if (item[key] != e$2[key]) continue predicateLoop;
						}
						return tryCatch$1(cb).call(boundTo, e$2);
					}
				}
				return NEXT_FILTER;
			};
		}
		return catchFilter;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/finally.js
var require_finally = __commonJS({ "node_modules/bluebird/js/release/finally.js"(exports, module) {
	module.exports = function(Promise$2, tryConvertToPromise, NEXT_FILTER) {
		var util$19 = require_util$3();
		var CancellationError$1 = Promise$2.CancellationError;
		var errorObj$1 = util$19.errorObj;
		var catchFilter = require_catch_filter()(NEXT_FILTER);
		function PassThroughHandlerContext(promise, type, handler) {
			this.promise = promise;
			this.type = type;
			this.handler = handler;
			this.called = false;
			this.cancelPromise = null;
		}
		PassThroughHandlerContext.prototype.isFinallyHandler = function() {
			return this.type === 0;
		};
		function FinallyHandlerCancelReaction(finallyHandler$1) {
			this.finallyHandler = finallyHandler$1;
		}
		FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
			checkCancel(this.finallyHandler);
		};
		function checkCancel(ctx, reason) {
			if (ctx.cancelPromise != null) {
				if (arguments.length > 1) ctx.cancelPromise._reject(reason);
				else ctx.cancelPromise._cancel();
				ctx.cancelPromise = null;
				return true;
			}
			return false;
		}
		function succeed() {
			return finallyHandler.call(this, this.promise._target()._settledValue());
		}
		function fail(reason) {
			if (checkCancel(this, reason)) return;
			errorObj$1.e = reason;
			return errorObj$1;
		}
		function finallyHandler(reasonOrValue) {
			var promise = this.promise;
			var handler = this.handler;
			if (!this.called) {
				this.called = true;
				var ret$1 = this.isFinallyHandler() ? handler.call(promise._boundValue()) : handler.call(promise._boundValue(), reasonOrValue);
				if (ret$1 === NEXT_FILTER) return ret$1;
				else if (ret$1 !== void 0) {
					promise._setReturnedNonUndefined();
					var maybePromise = tryConvertToPromise(ret$1, promise);
					if (maybePromise instanceof Promise$2) {
						if (this.cancelPromise != null) {
							if (maybePromise._isCancelled()) {
								var reason = new CancellationError$1("late cancellation observer");
								promise._attachExtraTrace(reason);
								errorObj$1.e = reason;
								return errorObj$1;
							} else if (maybePromise.isPending()) maybePromise._attachCancellationCallback(new FinallyHandlerCancelReaction(this));
						}
						return maybePromise._then(succeed, fail, void 0, this, void 0);
					}
				}
			}
			if (promise.isRejected()) {
				checkCancel(this);
				errorObj$1.e = reasonOrValue;
				return errorObj$1;
			} else {
				checkCancel(this);
				return reasonOrValue;
			}
		}
		Promise$2.prototype._passThrough = function(handler, type, success, fail$1) {
			if (typeof handler !== "function") return this.then();
			return this._then(success, fail$1, void 0, new PassThroughHandlerContext(this, type, handler), void 0);
		};
		Promise$2.prototype.lastly = Promise$2.prototype["finally"] = function(handler) {
			return this._passThrough(handler, 0, finallyHandler, finallyHandler);
		};
		Promise$2.prototype.tap = function(handler) {
			return this._passThrough(handler, 1, finallyHandler);
		};
		Promise$2.prototype.tapCatch = function(handlerOrPredicate) {
			var len = arguments.length;
			if (len === 1) return this._passThrough(handlerOrPredicate, 1, void 0, finallyHandler);
			else {
				var catchInstances = new Array(len - 1), j$1 = 0, i$6;
				for (i$6 = 0; i$6 < len - 1; ++i$6) {
					var item = arguments[i$6];
					if (util$19.isObject(item)) catchInstances[j$1++] = item;
					else return Promise$2.reject(new TypeError("tapCatch statement predicate: expecting an object but got " + util$19.classString(item)));
				}
				catchInstances.length = j$1;
				var handler = arguments[i$6];
				return this._passThrough(catchFilter(catchInstances, handler, this), 1, void 0, finallyHandler);
			}
		};
		return PassThroughHandlerContext;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/nodeback.js
var require_nodeback = __commonJS({ "node_modules/bluebird/js/release/nodeback.js"(exports, module) {
	var util$4 = require_util$3();
	var maybeWrapAsError = util$4.maybeWrapAsError;
	var errors = require_errors();
	var OperationalError = errors.OperationalError;
	var es5 = require_es5();
	function isUntypedError(obj) {
		return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
	}
	var rErrorKey = /^(?:name|message|stack|cause)$/;
	function wrapAsOperationalError(obj) {
		var ret$1;
		if (isUntypedError(obj)) {
			ret$1 = new OperationalError(obj);
			ret$1.name = obj.name;
			ret$1.message = obj.message;
			ret$1.stack = obj.stack;
			var keys$1 = es5.keys(obj);
			for (var i$6 = 0; i$6 < keys$1.length; ++i$6) {
				var key = keys$1[i$6];
				if (!rErrorKey.test(key)) ret$1[key] = obj[key];
			}
			return ret$1;
		}
		util$4.markAsOriginatingFromRejection(obj);
		return obj;
	}
	function nodebackForPromise(promise, multiArgs) {
		return function(err, value) {
			if (promise === null) return;
			if (err) {
				var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
				promise._attachExtraTrace(wrapped);
				promise._reject(wrapped);
			} else if (!multiArgs) promise._fulfill(value);
			else {
				var $_len = arguments.length;
				var args = new Array(Math.max($_len - 1, 0));
				for (var $_i = 1; $_i < $_len; ++$_i) args[$_i - 1] = arguments[$_i];
				promise._fulfill(args);
			}
			promise = null;
		};
	}
	module.exports = nodebackForPromise;
} });

//#endregion
//#region node_modules/bluebird/js/release/method.js
var require_method = __commonJS({ "node_modules/bluebird/js/release/method.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL, tryConvertToPromise, apiRejection, debug$2) {
		var util$19 = require_util$3();
		var tryCatch$1 = util$19.tryCatch;
		Promise$2.method = function(fn) {
			if (typeof fn !== "function") throw new Promise$2.TypeError("expecting a function but got " + util$19.classString(fn));
			return function() {
				var ret$1 = new Promise$2(INTERNAL);
				ret$1._captureStackTrace();
				ret$1._pushContext();
				var value = tryCatch$1(fn).apply(this, arguments);
				var promiseCreated = ret$1._popContext();
				debug$2.checkForgottenReturns(value, promiseCreated, "Promise.method", ret$1);
				ret$1._resolveFromSyncValue(value);
				return ret$1;
			};
		};
		Promise$2.attempt = Promise$2["try"] = function(fn) {
			if (typeof fn !== "function") return apiRejection("expecting a function but got " + util$19.classString(fn));
			var ret$1 = new Promise$2(INTERNAL);
			ret$1._captureStackTrace();
			ret$1._pushContext();
			var value;
			if (arguments.length > 1) {
				debug$2.deprecated("calling Promise.try with more than 1 argument");
				var arg = arguments[1];
				var ctx = arguments[2];
				value = util$19.isArray(arg) ? tryCatch$1(fn).apply(ctx, arg) : tryCatch$1(fn).call(ctx, arg);
			} else value = tryCatch$1(fn)();
			var promiseCreated = ret$1._popContext();
			debug$2.checkForgottenReturns(value, promiseCreated, "Promise.try", ret$1);
			ret$1._resolveFromSyncValue(value);
			return ret$1;
		};
		Promise$2.prototype._resolveFromSyncValue = function(value) {
			if (value === util$19.errorObj) this._rejectCallback(value.e, false);
			else this._resolveCallback(value, true);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/bind.js
var require_bind = __commonJS({ "node_modules/bluebird/js/release/bind.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL, tryConvertToPromise, debug$2) {
		var calledBind = false;
		var rejectThis = function(_, e$2) {
			this._reject(e$2);
		};
		var targetRejected = function(e$2, context) {
			context.promiseRejectionQueued = true;
			context.bindingPromise._then(rejectThis, rejectThis, null, this, e$2);
		};
		var bindingResolved = function(thisArg, context) {
			if ((this._bitField & 50397184) === 0) this._resolveCallback(context.target);
		};
		var bindingRejected = function(e$2, context) {
			if (!context.promiseRejectionQueued) this._reject(e$2);
		};
		Promise$2.prototype.bind = function(thisArg) {
			if (!calledBind) {
				calledBind = true;
				Promise$2.prototype._propagateFrom = debug$2.propagateFromFunction();
				Promise$2.prototype._boundValue = debug$2.boundValueFunction();
			}
			var maybePromise = tryConvertToPromise(thisArg);
			var ret$1 = new Promise$2(INTERNAL);
			ret$1._propagateFrom(this, 1);
			var target = this._target();
			ret$1._setBoundTo(maybePromise);
			if (maybePromise instanceof Promise$2) {
				var context = {
					promiseRejectionQueued: false,
					promise: ret$1,
					target,
					bindingPromise: maybePromise
				};
				target._then(INTERNAL, targetRejected, void 0, ret$1, context);
				maybePromise._then(bindingResolved, bindingRejected, void 0, ret$1, context);
				ret$1._setOnCancel(maybePromise);
			} else ret$1._resolveCallback(target);
			return ret$1;
		};
		Promise$2.prototype._setBoundTo = function(obj) {
			if (obj !== void 0) {
				this._bitField = this._bitField | 2097152;
				this._boundTo = obj;
			} else this._bitField = this._bitField & -2097153;
		};
		Promise$2.prototype._isBound = function() {
			return (this._bitField & 2097152) === 2097152;
		};
		Promise$2.bind = function(thisArg, value) {
			return Promise$2.resolve(value).bind(thisArg);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/cancel.js
var require_cancel = __commonJS({ "node_modules/bluebird/js/release/cancel.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, apiRejection, debug$2) {
		var util$19 = require_util$3();
		var tryCatch$1 = util$19.tryCatch;
		var errorObj$1 = util$19.errorObj;
		var async$1 = Promise$2._async;
		Promise$2.prototype["break"] = Promise$2.prototype.cancel = function() {
			if (!debug$2.cancellation()) return this._warn("cancellation is disabled");
			var promise = this;
			var child = promise;
			while (promise._isCancellable()) {
				if (!promise._cancelBy(child)) {
					if (child._isFollowing()) child._followee().cancel();
					else child._cancelBranched();
					break;
				}
				var parent = promise._cancellationParent;
				if (parent == null || !parent._isCancellable()) {
					if (promise._isFollowing()) promise._followee().cancel();
					else promise._cancelBranched();
					break;
				} else {
					if (promise._isFollowing()) promise._followee().cancel();
					promise._setWillBeCancelled();
					child = promise;
					promise = parent;
				}
			}
		};
		Promise$2.prototype._branchHasCancelled = function() {
			this._branchesRemainingToCancel--;
		};
		Promise$2.prototype._enoughBranchesHaveCancelled = function() {
			return this._branchesRemainingToCancel === void 0 || this._branchesRemainingToCancel <= 0;
		};
		Promise$2.prototype._cancelBy = function(canceller) {
			if (canceller === this) {
				this._branchesRemainingToCancel = 0;
				this._invokeOnCancel();
				return true;
			} else {
				this._branchHasCancelled();
				if (this._enoughBranchesHaveCancelled()) {
					this._invokeOnCancel();
					return true;
				}
			}
			return false;
		};
		Promise$2.prototype._cancelBranched = function() {
			if (this._enoughBranchesHaveCancelled()) this._cancel();
		};
		Promise$2.prototype._cancel = function() {
			if (!this._isCancellable()) return;
			this._setCancelled();
			async$1.invoke(this._cancelPromises, this, void 0);
		};
		Promise$2.prototype._cancelPromises = function() {
			if (this._length() > 0) this._settlePromises();
		};
		Promise$2.prototype._unsetOnCancel = function() {
			this._onCancelField = void 0;
		};
		Promise$2.prototype._isCancellable = function() {
			return this.isPending() && !this._isCancelled();
		};
		Promise$2.prototype.isCancellable = function() {
			return this.isPending() && !this.isCancelled();
		};
		Promise$2.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
			if (util$19.isArray(onCancelCallback)) for (var i$6 = 0; i$6 < onCancelCallback.length; ++i$6) this._doInvokeOnCancel(onCancelCallback[i$6], internalOnly);
			else if (onCancelCallback !== void 0) if (typeof onCancelCallback === "function") {
				if (!internalOnly) {
					var e$2 = tryCatch$1(onCancelCallback).call(this._boundValue());
					if (e$2 === errorObj$1) {
						this._attachExtraTrace(e$2.e);
						async$1.throwLater(e$2.e);
					}
				}
			} else onCancelCallback._resultCancelled(this);
		};
		Promise$2.prototype._invokeOnCancel = function() {
			var onCancelCallback = this._onCancel();
			this._unsetOnCancel();
			async$1.invoke(this._doInvokeOnCancel, this, onCancelCallback);
		};
		Promise$2.prototype._invokeInternalOnCancel = function() {
			if (this._isCancellable()) {
				this._doInvokeOnCancel(this._onCancel(), true);
				this._unsetOnCancel();
			}
		};
		Promise$2.prototype._resultCancelled = function() {
			this.cancel();
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/direct_resolve.js
var require_direct_resolve = __commonJS({ "node_modules/bluebird/js/release/direct_resolve.js"(exports, module) {
	module.exports = function(Promise$2) {
		function returner() {
			return this.value;
		}
		function thrower$1() {
			throw this.reason;
		}
		Promise$2.prototype["return"] = Promise$2.prototype.thenReturn = function(value) {
			if (value instanceof Promise$2) value.suppressUnhandledRejections();
			return this._then(returner, void 0, void 0, { value }, void 0);
		};
		Promise$2.prototype["throw"] = Promise$2.prototype.thenThrow = function(reason) {
			return this._then(thrower$1, void 0, void 0, { reason }, void 0);
		};
		Promise$2.prototype.catchThrow = function(reason) {
			if (arguments.length <= 1) return this._then(void 0, thrower$1, void 0, { reason }, void 0);
			else {
				var _reason = arguments[1];
				var handler = function() {
					throw _reason;
				};
				return this.caught(reason, handler);
			}
		};
		Promise$2.prototype.catchReturn = function(value) {
			if (arguments.length <= 1) {
				if (value instanceof Promise$2) value.suppressUnhandledRejections();
				return this._then(void 0, returner, void 0, { value }, void 0);
			} else {
				var _value = arguments[1];
				if (_value instanceof Promise$2) _value.suppressUnhandledRejections();
				var handler = function() {
					return _value;
				};
				return this.caught(value, handler);
			}
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/synchronous_inspection.js
var require_synchronous_inspection = __commonJS({ "node_modules/bluebird/js/release/synchronous_inspection.js"(exports, module) {
	module.exports = function(Promise$2) {
		function PromiseInspection(promise) {
			if (promise !== void 0) {
				promise = promise._target();
				this._bitField = promise._bitField;
				this._settledValueField = promise._isFateSealed() ? promise._settledValue() : void 0;
			} else {
				this._bitField = 0;
				this._settledValueField = void 0;
			}
		}
		PromiseInspection.prototype._settledValue = function() {
			return this._settledValueField;
		};
		var value = PromiseInspection.prototype.value = function() {
			if (!this.isFulfilled()) throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
			return this._settledValue();
		};
		var reason = PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function() {
			if (!this.isRejected()) throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
			return this._settledValue();
		};
		var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
			return (this._bitField & 33554432) !== 0;
		};
		var isRejected = PromiseInspection.prototype.isRejected = function() {
			return (this._bitField & 16777216) !== 0;
		};
		var isPending = PromiseInspection.prototype.isPending = function() {
			return (this._bitField & 50397184) === 0;
		};
		var isResolved = PromiseInspection.prototype.isResolved = function() {
			return (this._bitField & 50331648) !== 0;
		};
		PromiseInspection.prototype.isCancelled = function() {
			return (this._bitField & 8454144) !== 0;
		};
		Promise$2.prototype.__isCancelled = function() {
			return (this._bitField & 65536) === 65536;
		};
		Promise$2.prototype._isCancelled = function() {
			return this._target().__isCancelled();
		};
		Promise$2.prototype.isCancelled = function() {
			return (this._target()._bitField & 8454144) !== 0;
		};
		Promise$2.prototype.isPending = function() {
			return isPending.call(this._target());
		};
		Promise$2.prototype.isRejected = function() {
			return isRejected.call(this._target());
		};
		Promise$2.prototype.isFulfilled = function() {
			return isFulfilled.call(this._target());
		};
		Promise$2.prototype.isResolved = function() {
			return isResolved.call(this._target());
		};
		Promise$2.prototype.value = function() {
			return value.call(this._target());
		};
		Promise$2.prototype.reason = function() {
			var target = this._target();
			target._unsetRejectionIsUnhandled();
			return reason.call(target);
		};
		Promise$2.prototype._value = function() {
			return this._settledValue();
		};
		Promise$2.prototype._reason = function() {
			this._unsetRejectionIsUnhandled();
			return this._settledValue();
		};
		Promise$2.PromiseInspection = PromiseInspection;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/join.js
var require_join = __commonJS({ "node_modules/bluebird/js/release/join.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, tryConvertToPromise, INTERNAL, async$1) {
		var util$19 = require_util$3();
		var canEvaluate$1 = util$19.canEvaluate;
		var tryCatch$1 = util$19.tryCatch;
		var errorObj$1 = util$19.errorObj;
		var reject;
		if (canEvaluate$1) {
			var thenCallback = function(i$7) {
				return new Function("value", "holder", "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i$7));
			};
			var promiseSetter = function(i$7) {
				return new Function("promise", "holder", "                           \n            'use strict';                                                    \n            holder.pIndex = promise;                                         \n            ".replace(/Index/g, i$7));
			};
			var generateHolderClass = function(total) {
				var props = new Array(total);
				for (var i$7 = 0; i$7 < props.length; ++i$7) props[i$7] = "this.p" + (i$7 + 1);
				var assignment = props.join(" = ") + " = null;";
				var cancellationCode = "var promise;\n" + props.map(function(prop) {
					return "                                                         \n                promise = " + prop + ";                                      \n                if (promise instanceof Promise) {                            \n                    promise.cancel();                                        \n                }                                                            \n            ";
				}).join("\n");
				var passedArguments = props.join(", ");
				var name = "Holder$" + total;
				var code$1 = "return function(tryCatch, errorObj, Promise, async) {    \n            'use strict';                                                    \n            function [TheName](fn) {                                         \n                [TheProperties]                                              \n                this.fn = fn;                                                \n                this.asyncNeeded = true;                                     \n                this.now = 0;                                                \n            }                                                                \n                                                                             \n            [TheName].prototype._callFunction = function(promise) {          \n                promise._pushContext();                                      \n                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n                promise._popContext();                                       \n                if (ret === errorObj) {                                      \n                    promise._rejectCallback(ret.e, false);                   \n                } else {                                                     \n                    promise._resolveCallback(ret);                           \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype.checkFulfillment = function(promise) {       \n                var now = ++this.now;                                        \n                if (now === [TheTotal]) {                                    \n                    if (this.asyncNeeded) {                                  \n                        async.invoke(this._callFunction, this, promise);     \n                    } else {                                                 \n                        this._callFunction(promise);                         \n                    }                                                        \n                                                                             \n                }                                                            \n            };                                                               \n                                                                             \n            [TheName].prototype._resultCancelled = function() {              \n                [CancellationCode]                                           \n            };                                                               \n                                                                             \n            return [TheName];                                                \n        }(tryCatch, errorObj, Promise, async);                               \n        ";
				code$1 = code$1.replace(/\[TheName\]/g, name).replace(/\[TheTotal\]/g, total).replace(/\[ThePassedArguments\]/g, passedArguments).replace(/\[TheProperties\]/g, assignment).replace(/\[CancellationCode\]/g, cancellationCode);
				return new Function("tryCatch", "errorObj", "Promise", "async", code$1)(tryCatch$1, errorObj$1, Promise$2, async$1);
			};
			var holderClasses = [];
			var thenCallbacks = [];
			var promiseSetters = [];
			for (var i$6 = 0; i$6 < 8; ++i$6) {
				holderClasses.push(generateHolderClass(i$6 + 1));
				thenCallbacks.push(thenCallback(i$6 + 1));
				promiseSetters.push(promiseSetter(i$6 + 1));
			}
			reject = function(reason) {
				this._reject(reason);
			};
		}
		Promise$2.join = function() {
			var last$2 = arguments.length - 1;
			var fn;
			if (last$2 > 0 && typeof arguments[last$2] === "function") {
				fn = arguments[last$2];
				if (last$2 <= 8 && canEvaluate$1) {
					var ret$1 = new Promise$2(INTERNAL);
					ret$1._captureStackTrace();
					var HolderClass = holderClasses[last$2 - 1];
					var holder = new HolderClass(fn);
					var callbacks = thenCallbacks;
					for (var i$7 = 0; i$7 < last$2; ++i$7) {
						var maybePromise = tryConvertToPromise(arguments[i$7], ret$1);
						if (maybePromise instanceof Promise$2) {
							maybePromise = maybePromise._target();
							var bitField = maybePromise._bitField;
							if ((bitField & 50397184) === 0) {
								maybePromise._then(callbacks[i$7], reject, void 0, ret$1, holder);
								promiseSetters[i$7](maybePromise, holder);
								holder.asyncNeeded = false;
							} else if ((bitField & 33554432) !== 0) callbacks[i$7].call(ret$1, maybePromise._value(), holder);
							else if ((bitField & 16777216) !== 0) ret$1._reject(maybePromise._reason());
							else ret$1._cancel();
						} else callbacks[i$7].call(ret$1, maybePromise, holder);
					}
					if (!ret$1._isFateSealed()) {
						if (holder.asyncNeeded) {
							var context = Promise$2._getContext();
							holder.fn = util$19.contextBind(context, holder.fn);
						}
						ret$1._setAsyncGuaranteed();
						ret$1._setOnCancel(holder);
					}
					return ret$1;
				}
			}
			var $_len = arguments.length;
			var args = new Array($_len);
			for (var $_i = 0; $_i < $_len; ++$_i) args[$_i] = arguments[$_i];
			if (fn) args.pop();
			var ret$1 = new PromiseArray(args).promise();
			return fn !== void 0 ? ret$1.spread(fn) : ret$1;
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/call_get.js
var require_call_get = __commonJS({ "node_modules/bluebird/js/release/call_get.js"(exports, module) {
	var cr$2 = Object.create;
	if (cr$2) {
		var callerCache = cr$2(null);
		var getterCache = cr$2(null);
		callerCache[" size"] = getterCache[" size"] = 0;
	}
	module.exports = function(Promise$2) {
		var util$19 = require_util$3();
		var canEvaluate$1 = util$19.canEvaluate;
		var isIdentifier$16 = util$19.isIdentifier;
		var getMethodCaller;
		var getGetter;
		{
			var makeMethodCaller = function(methodName) {
				return new Function("ensureMethod", "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod);
			};
			var makeGetter = function(propertyName) {
				return new Function("obj", "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace("propertyName", propertyName));
			};
			var getCompiled = function(name, compiler, cache$3) {
				var ret$1 = cache$3[name];
				if (typeof ret$1 !== "function") {
					if (!isIdentifier$16(name)) return null;
					ret$1 = compiler(name);
					cache$3[name] = ret$1;
					cache$3[" size"]++;
					if (cache$3[" size"] > 512) {
						var keys$1 = Object.keys(cache$3);
						for (var i$6 = 0; i$6 < 256; ++i$6) delete cache$3[keys$1[i$6]];
						cache$3[" size"] = keys$1.length - 256;
					}
				}
				return ret$1;
			};
			getMethodCaller = function(name) {
				return getCompiled(name, makeMethodCaller, callerCache);
			};
			getGetter = function(name) {
				return getCompiled(name, makeGetter, getterCache);
			};
		}
		function ensureMethod(obj, methodName) {
			var fn;
			if (obj != null) fn = obj[methodName];
			if (typeof fn !== "function") {
				var message = "Object " + util$19.classString(obj) + " has no method '" + util$19.toString(methodName) + "'";
				throw new Promise$2.TypeError(message);
			}
			return fn;
		}
		function caller$2(obj) {
			var methodName = this.pop();
			var fn = ensureMethod(obj, methodName);
			return fn.apply(obj, this);
		}
		Promise$2.prototype.call = function(methodName) {
			var $_len = arguments.length;
			var args = new Array(Math.max($_len - 1, 0));
			for (var $_i = 1; $_i < $_len; ++$_i) args[$_i - 1] = arguments[$_i];
			if (canEvaluate$1) {
				var maybeCaller = getMethodCaller(methodName);
				if (maybeCaller !== null) return this._then(maybeCaller, void 0, void 0, args, void 0);
			}
			args.push(methodName);
			return this._then(caller$2, void 0, void 0, args, void 0);
		};
		function namedGetter(obj) {
			return obj[this];
		}
		function indexedGetter(obj) {
			var index$1 = +this;
			if (index$1 < 0) index$1 = Math.max(0, index$1 + obj.length);
			return obj[index$1];
		}
		Promise$2.prototype.get = function(propertyName) {
			var isIndex = typeof propertyName === "number";
			var getter;
			if (!isIndex) if (canEvaluate$1) {
				var maybeGetter = getGetter(propertyName);
				getter = maybeGetter !== null ? maybeGetter : namedGetter;
			} else getter = namedGetter;
			else getter = indexedGetter;
			return this._then(getter, void 0, void 0, propertyName, void 0);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/generators.js
var require_generators$1 = __commonJS({ "node_modules/bluebird/js/release/generators.js"(exports, module) {
	module.exports = function(Promise$2, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug$2) {
		var errors$1 = require_errors();
		var TypeError$1 = errors$1.TypeError;
		var util$19 = require_util$3();
		var errorObj$1 = util$19.errorObj;
		var tryCatch$1 = util$19.tryCatch;
		var yieldHandlers = [];
		function promiseFromYieldHandler(value, yieldHandlers$1, traceParent) {
			for (var i$6 = 0; i$6 < yieldHandlers$1.length; ++i$6) {
				traceParent._pushContext();
				var result = tryCatch$1(yieldHandlers$1[i$6])(value);
				traceParent._popContext();
				if (result === errorObj$1) {
					traceParent._pushContext();
					var ret$1 = Promise$2.reject(errorObj$1.e);
					traceParent._popContext();
					return ret$1;
				}
				var maybePromise = tryConvertToPromise(result, traceParent);
				if (maybePromise instanceof Promise$2) return maybePromise;
			}
			return null;
		}
		function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
			if (debug$2.cancellation()) {
				var internal = new Promise$2(INTERNAL);
				var _finallyPromise = this._finallyPromise = new Promise$2(INTERNAL);
				this._promise = internal.lastly(function() {
					return _finallyPromise;
				});
				internal._captureStackTrace();
				internal._setOnCancel(this);
			} else {
				var promise = this._promise = new Promise$2(INTERNAL);
				promise._captureStackTrace();
			}
			this._stack = stack;
			this._generatorFunction = generatorFunction;
			this._receiver = receiver;
			this._generator = void 0;
			this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
			this._yieldedPromise = null;
			this._cancellationPhase = false;
		}
		util$19.inherits(PromiseSpawn, Proxyable);
		PromiseSpawn.prototype._isResolved = function() {
			return this._promise === null;
		};
		PromiseSpawn.prototype._cleanup = function() {
			this._promise = this._generator = null;
			if (debug$2.cancellation() && this._finallyPromise !== null) {
				this._finallyPromise._fulfill();
				this._finallyPromise = null;
			}
		};
		PromiseSpawn.prototype._promiseCancelled = function() {
			if (this._isResolved()) return;
			var implementsReturn = typeof this._generator["return"] !== "undefined";
			var result;
			if (!implementsReturn) {
				var reason = new Promise$2.CancellationError("generator .return() sentinel");
				Promise$2.coroutine.returnSentinel = reason;
				this._promise._attachExtraTrace(reason);
				this._promise._pushContext();
				result = tryCatch$1(this._generator["throw"]).call(this._generator, reason);
				this._promise._popContext();
			} else {
				this._promise._pushContext();
				result = tryCatch$1(this._generator["return"]).call(this._generator, void 0);
				this._promise._popContext();
			}
			this._cancellationPhase = true;
			this._yieldedPromise = null;
			this._continue(result);
		};
		PromiseSpawn.prototype._promiseFulfilled = function(value) {
			this._yieldedPromise = null;
			this._promise._pushContext();
			var result = tryCatch$1(this._generator.next).call(this._generator, value);
			this._promise._popContext();
			this._continue(result);
		};
		PromiseSpawn.prototype._promiseRejected = function(reason) {
			this._yieldedPromise = null;
			this._promise._attachExtraTrace(reason);
			this._promise._pushContext();
			var result = tryCatch$1(this._generator["throw"]).call(this._generator, reason);
			this._promise._popContext();
			this._continue(result);
		};
		PromiseSpawn.prototype._resultCancelled = function() {
			if (this._yieldedPromise instanceof Promise$2) {
				var promise = this._yieldedPromise;
				this._yieldedPromise = null;
				promise.cancel();
			}
		};
		PromiseSpawn.prototype.promise = function() {
			return this._promise;
		};
		PromiseSpawn.prototype._run = function() {
			this._generator = this._generatorFunction.call(this._receiver);
			this._receiver = this._generatorFunction = void 0;
			this._promiseFulfilled(void 0);
		};
		PromiseSpawn.prototype._continue = function(result) {
			var promise = this._promise;
			if (result === errorObj$1) {
				this._cleanup();
				if (this._cancellationPhase) return promise.cancel();
				else return promise._rejectCallback(result.e, false);
			}
			var value = result.value;
			if (result.done === true) {
				this._cleanup();
				if (this._cancellationPhase) return promise.cancel();
				else return promise._resolveCallback(value);
			} else {
				var maybePromise = tryConvertToPromise(value, this._promise);
				if (!(maybePromise instanceof Promise$2)) {
					maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
					if (maybePromise === null) {
						this._promiseRejected(new TypeError$1("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", String(value)) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n")));
						return;
					}
				}
				maybePromise = maybePromise._target();
				var bitField = maybePromise._bitField;
				if ((bitField & 50397184) === 0) {
					this._yieldedPromise = maybePromise;
					maybePromise._proxy(this, null);
				} else if ((bitField & 33554432) !== 0) Promise$2._async.invoke(this._promiseFulfilled, this, maybePromise._value());
				else if ((bitField & 16777216) !== 0) Promise$2._async.invoke(this._promiseRejected, this, maybePromise._reason());
				else this._promiseCancelled();
			}
		};
		Promise$2.coroutine = function(generatorFunction, options) {
			if (typeof generatorFunction !== "function") throw new TypeError$1("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
			var yieldHandler = Object(options).yieldHandler;
			var PromiseSpawn$ = PromiseSpawn;
			var stack = new Error().stack;
			return function() {
				var generator$1 = generatorFunction.apply(this, arguments);
				var spawn = new PromiseSpawn$(void 0, void 0, yieldHandler, stack);
				var ret$1 = spawn.promise();
				spawn._generator = generator$1;
				spawn._promiseFulfilled(void 0);
				return ret$1;
			};
		};
		Promise$2.coroutine.addYieldHandler = function(fn) {
			if (typeof fn !== "function") throw new TypeError$1("expecting a function but got " + util$19.classString(fn));
			yieldHandlers.push(fn);
		};
		Promise$2.spawn = function(generatorFunction) {
			debug$2.deprecated("Promise.spawn()", "Promise.coroutine()");
			if (typeof generatorFunction !== "function") return apiRejection("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
			var spawn = new PromiseSpawn(generatorFunction, this);
			var ret$1 = spawn.promise();
			spawn._run(Promise$2.spawn);
			return ret$1;
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/map.js
var require_map = __commonJS({ "node_modules/bluebird/js/release/map.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug$2) {
		var util$19 = require_util$3();
		var tryCatch$1 = util$19.tryCatch;
		var errorObj$1 = util$19.errorObj;
		var async$1 = Promise$2._async;
		function MappingPromiseArray(promises, fn, limit, _filter) {
			this.constructor$(promises);
			this._promise._captureStackTrace();
			var context = Promise$2._getContext();
			this._callback = util$19.contextBind(context, fn);
			this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
			this._limit = limit;
			this._inFlight = 0;
			this._queue = [];
			async$1.invoke(this._asyncInit, this, void 0);
			if (util$19.isArray(promises)) for (var i$6 = 0; i$6 < promises.length; ++i$6) {
				var maybePromise = promises[i$6];
				if (maybePromise instanceof Promise$2) maybePromise.suppressUnhandledRejections();
			}
		}
		util$19.inherits(MappingPromiseArray, PromiseArray);
		MappingPromiseArray.prototype._asyncInit = function() {
			this._init$(void 0, -2);
		};
		MappingPromiseArray.prototype._init = function() {};
		MappingPromiseArray.prototype._promiseFulfilled = function(value, index$1) {
			var values = this._values;
			var length = this.length();
			var preservedValues = this._preservedValues;
			var limit = this._limit;
			if (index$1 < 0) {
				index$1 = index$1 * -1 - 1;
				values[index$1] = value;
				if (limit >= 1) {
					this._inFlight--;
					this._drainQueue();
					if (this._isResolved()) return true;
				}
			} else {
				if (limit >= 1 && this._inFlight >= limit) {
					values[index$1] = value;
					this._queue.push(index$1);
					return false;
				}
				if (preservedValues !== null) preservedValues[index$1] = value;
				var promise = this._promise;
				var callback = this._callback;
				var receiver = promise._boundValue();
				promise._pushContext();
				var ret$1 = tryCatch$1(callback).call(receiver, value, index$1, length);
				var promiseCreated = promise._popContext();
				debug$2.checkForgottenReturns(ret$1, promiseCreated, preservedValues !== null ? "Promise.filter" : "Promise.map", promise);
				if (ret$1 === errorObj$1) {
					this._reject(ret$1.e);
					return true;
				}
				var maybePromise = tryConvertToPromise(ret$1, this._promise);
				if (maybePromise instanceof Promise$2) {
					maybePromise = maybePromise._target();
					var bitField = maybePromise._bitField;
					if ((bitField & 50397184) === 0) {
						if (limit >= 1) this._inFlight++;
						values[index$1] = maybePromise;
						maybePromise._proxy(this, (index$1 + 1) * -1);
						return false;
					} else if ((bitField & 33554432) !== 0) ret$1 = maybePromise._value();
					else if ((bitField & 16777216) !== 0) {
						this._reject(maybePromise._reason());
						return true;
					} else {
						this._cancel();
						return true;
					}
				}
				values[index$1] = ret$1;
			}
			var totalResolved = ++this._totalResolved;
			if (totalResolved >= length) {
				if (preservedValues !== null) this._filter(values, preservedValues);
				else this._resolve(values);
				return true;
			}
			return false;
		};
		MappingPromiseArray.prototype._drainQueue = function() {
			var queue$1 = this._queue;
			var limit = this._limit;
			var values = this._values;
			while (queue$1.length > 0 && this._inFlight < limit) {
				if (this._isResolved()) return;
				var index$1 = queue$1.pop();
				this._promiseFulfilled(values[index$1], index$1);
			}
		};
		MappingPromiseArray.prototype._filter = function(booleans, values) {
			var len = values.length;
			var ret$1 = new Array(len);
			var j$1 = 0;
			for (var i$6 = 0; i$6 < len; ++i$6) if (booleans[i$6]) ret$1[j$1++] = values[i$6];
			ret$1.length = j$1;
			this._resolve(ret$1);
		};
		MappingPromiseArray.prototype.preservedValues = function() {
			return this._preservedValues;
		};
		function map(promises, fn, options, _filter) {
			if (typeof fn !== "function") return apiRejection("expecting a function but got " + util$19.classString(fn));
			var limit = 0;
			if (options !== void 0) if (typeof options === "object" && options !== null) {
				if (typeof options.concurrency !== "number") return Promise$2.reject(new TypeError("'concurrency' must be a number but it is " + util$19.classString(options.concurrency)));
				limit = options.concurrency;
			} else return Promise$2.reject(new TypeError("options argument must be an object but it is " + util$19.classString(options)));
			limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
			return new MappingPromiseArray(promises, fn, limit, _filter).promise();
		}
		Promise$2.prototype.map = function(fn, options) {
			return map(this, fn, options, null);
		};
		Promise$2.map = function(promises, fn, options, _filter) {
			return map(promises, fn, options, _filter);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/nodeify.js
var require_nodeify = __commonJS({ "node_modules/bluebird/js/release/nodeify.js"(exports, module) {
	module.exports = function(Promise$2) {
		var util$19 = require_util$3();
		var async$1 = Promise$2._async;
		var tryCatch$1 = util$19.tryCatch;
		var errorObj$1 = util$19.errorObj;
		function spreadAdapter(val, nodeback) {
			var promise = this;
			if (!util$19.isArray(val)) return successAdapter.call(promise, val, nodeback);
			var ret$1 = tryCatch$1(nodeback).apply(promise._boundValue(), [null].concat(val));
			if (ret$1 === errorObj$1) async$1.throwLater(ret$1.e);
		}
		function successAdapter(val, nodeback) {
			var promise = this;
			var receiver = promise._boundValue();
			var ret$1 = val === void 0 ? tryCatch$1(nodeback).call(receiver, null) : tryCatch$1(nodeback).call(receiver, null, val);
			if (ret$1 === errorObj$1) async$1.throwLater(ret$1.e);
		}
		function errorAdapter(reason, nodeback) {
			var promise = this;
			if (!reason) {
				var newReason = new Error(reason + "");
				newReason.cause = reason;
				reason = newReason;
			}
			var ret$1 = tryCatch$1(nodeback).call(promise._boundValue(), reason);
			if (ret$1 === errorObj$1) async$1.throwLater(ret$1.e);
		}
		Promise$2.prototype.asCallback = Promise$2.prototype.nodeify = function(nodeback, options) {
			if (typeof nodeback == "function") {
				var adapter = successAdapter;
				if (options !== void 0 && Object(options).spread) adapter = spreadAdapter;
				this._then(adapter, errorAdapter, void 0, this, nodeback);
			}
			return this;
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/promisify.js
var require_promisify = __commonJS({ "node_modules/bluebird/js/release/promisify.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL) {
		var THIS = {};
		var util$19 = require_util$3();
		var nodebackForPromise$1 = require_nodeback();
		var withAppended$1 = util$19.withAppended;
		var maybeWrapAsError$2 = util$19.maybeWrapAsError;
		var canEvaluate$1 = util$19.canEvaluate;
		var TypeError$1 = require_errors().TypeError;
		var defaultSuffix = "Async";
		var defaultPromisified = { __isPromisified__: true };
		var noCopyProps = [
			"arity",
			"length",
			"name",
			"arguments",
			"caller",
			"callee",
			"prototype",
			"__isPromisified__"
		];
		var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");
		var defaultFilter = function(name) {
			return util$19.isIdentifier(name) && name.charAt(0) !== "_" && name !== "constructor";
		};
		function propsFilter(key) {
			return !noCopyPropsPattern.test(key);
		}
		function isPromisified(fn) {
			try {
				return fn.__isPromisified__ === true;
			} catch (e$2) {
				return false;
			}
		}
		function hasPromisified(obj, key, suffix) {
			var val = util$19.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
			return val ? isPromisified(val) : false;
		}
		function checkValid(ret$1, suffix, suffixRegexp) {
			for (var i$6 = 0; i$6 < ret$1.length; i$6 += 2) {
				var key = ret$1[i$6];
				if (suffixRegexp.test(key)) {
					var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
					for (var j$1 = 0; j$1 < ret$1.length; j$1 += 2) if (ret$1[j$1] === keyWithoutAsyncSuffix) throw new TypeError$1("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", suffix));
				}
			}
		}
		function promisifiableMethods(obj, suffix, suffixRegexp, filter$2) {
			var keys$1 = util$19.inheritedDataKeys(obj);
			var ret$1 = [];
			for (var i$6 = 0; i$6 < keys$1.length; ++i$6) {
				var key = keys$1[i$6];
				var value = obj[key];
				var passesDefaultFilter = filter$2 === defaultFilter ? true : defaultFilter(key, value, obj);
				if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter$2(key, value, obj, passesDefaultFilter)) ret$1.push(key, value);
			}
			checkValid(ret$1, suffix, suffixRegexp);
			return ret$1;
		}
		var escapeIdentRegex = function(str$4) {
			return str$4.replace(/([$])/, "\\$");
		};
		var makeNodePromisifiedEval;
		{
			var switchCaseArgumentOrder = function(likelyArgumentCount) {
				var ret$1 = [likelyArgumentCount];
				var min = Math.max(0, likelyArgumentCount - 1 - 3);
				for (var i$6 = likelyArgumentCount - 1; i$6 >= min; --i$6) ret$1.push(i$6);
				for (var i$6 = likelyArgumentCount + 1; i$6 <= 3; ++i$6) ret$1.push(i$6);
				return ret$1;
			};
			var argumentSequence = function(argumentCount) {
				return util$19.filledRange(argumentCount, "_arg", "");
			};
			var parameterDeclaration = function(parameterCount$1) {
				return util$19.filledRange(Math.max(parameterCount$1, 3), "_arg", "");
			};
			var parameterCount = function(fn) {
				if (typeof fn.length === "number") return Math.max(Math.min(fn.length, 1024), 0);
				return 0;
			};
			makeNodePromisifiedEval = function(callback, receiver, originalName, fn, _, multiArgs) {
				var newParameterCount = Math.max(0, parameterCount(fn) - 1);
				var argumentOrder = switchCaseArgumentOrder(newParameterCount);
				var shouldProxyThis = typeof callback === "string" || receiver === THIS;
				function generateCallForArgumentCount(count) {
					var args = argumentSequence(count).join(", ");
					var comma$5 = count > 0 ? ", " : "";
					var ret$1;
					if (shouldProxyThis) ret$1 = "ret = callback.call(this, {{args}}, nodeback); break;\n";
					else ret$1 = receiver === void 0 ? "ret = callback({{args}}, nodeback); break;\n" : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
					return ret$1.replace("{{args}}", args).replace(", ", comma$5);
				}
				function generateArgumentSwitchCase() {
					var ret$1 = "";
					for (var i$6 = 0; i$6 < argumentOrder.length; ++i$6) ret$1 += "case " + argumentOrder[i$6] + ":" + generateCallForArgumentCount(argumentOrder[i$6]);
					ret$1 += "                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        ".replace("[CodeForCall]", shouldProxyThis ? "ret = callback.apply(this, args);\n" : "ret = callback.apply(receiver, args);\n");
					return ret$1;
				}
				var getFunctionCode = typeof callback === "string" ? "this != null ? this['" + callback + "'] : fn" : "fn";
				var body = "'use strict';                                                \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase()).replace("[GetFunctionCode]", getFunctionCode);
				body = body.replace("Parameters", parameterDeclaration(newParameterCount));
				return new Function("Promise", "fn", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "tryCatch", "errorObj", "notEnumerableProp", "INTERNAL", body)(Promise$2, fn, receiver, withAppended$1, maybeWrapAsError$2, nodebackForPromise$1, util$19.tryCatch, util$19.errorObj, util$19.notEnumerableProp, INTERNAL);
			};
		}
		function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
			var defaultThis = function() {
				return this;
			}();
			var method = callback;
			if (typeof method === "string") callback = fn;
			function promisified() {
				var _receiver = receiver;
				if (receiver === THIS) _receiver = this;
				var promise = new Promise$2(INTERNAL);
				promise._captureStackTrace();
				var cb = typeof method === "string" && this !== defaultThis ? this[method] : callback;
				var fn$1 = nodebackForPromise$1(promise, multiArgs);
				try {
					cb.apply(_receiver, withAppended$1(arguments, fn$1));
				} catch (e$2) {
					promise._rejectCallback(maybeWrapAsError$2(e$2), true, true);
				}
				if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
				return promise;
			}
			util$19.notEnumerableProp(promisified, "__isPromisified__", true);
			return promisified;
		}
		var makeNodePromisified = canEvaluate$1 ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
		function promisifyAll(obj, suffix, filter$2, promisifier, multiArgs) {
			var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
			var methods$2 = promisifiableMethods(obj, suffix, suffixRegexp, filter$2);
			for (var i$6 = 0, len = methods$2.length; i$6 < len; i$6 += 2) {
				var key = methods$2[i$6];
				var fn = methods$2[i$6 + 1];
				var promisifiedKey = key + suffix;
				if (promisifier === makeNodePromisified) obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
				else {
					var promisified = promisifier(fn, function() {
						return makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
					});
					util$19.notEnumerableProp(promisified, "__isPromisified__", true);
					obj[promisifiedKey] = promisified;
				}
			}
			util$19.toFastProperties(obj);
			return obj;
		}
		function promisify$1(callback, receiver, multiArgs) {
			return makeNodePromisified(callback, receiver, void 0, callback, null, multiArgs);
		}
		Promise$2.promisify = function(fn, options) {
			if (typeof fn !== "function") throw new TypeError$1("expecting a function but got " + util$19.classString(fn));
			if (isPromisified(fn)) return fn;
			options = Object(options);
			var receiver = options.context === void 0 ? THIS : options.context;
			var multiArgs = !!options.multiArgs;
			var ret$1 = promisify$1(fn, receiver, multiArgs);
			util$19.copyDescriptors(fn, ret$1, propsFilter);
			return ret$1;
		};
		Promise$2.promisifyAll = function(target, options) {
			if (typeof target !== "function" && typeof target !== "object") throw new TypeError$1("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");
			options = Object(options);
			var multiArgs = !!options.multiArgs;
			var suffix = options.suffix;
			if (typeof suffix !== "string") suffix = defaultSuffix;
			var filter$2 = options.filter;
			if (typeof filter$2 !== "function") filter$2 = defaultFilter;
			var promisifier = options.promisifier;
			if (typeof promisifier !== "function") promisifier = makeNodePromisified;
			if (!util$19.isIdentifier(suffix)) throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");
			var keys$1 = util$19.inheritedDataKeys(target);
			for (var i$6 = 0; i$6 < keys$1.length; ++i$6) {
				var value = target[keys$1[i$6]];
				if (keys$1[i$6] !== "constructor" && util$19.isClass(value)) {
					promisifyAll(value.prototype, suffix, filter$2, promisifier, multiArgs);
					promisifyAll(value, suffix, filter$2, promisifier, multiArgs);
				}
			}
			return promisifyAll(target, suffix, filter$2, promisifier, multiArgs);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/props.js
var require_props = __commonJS({ "node_modules/bluebird/js/release/props.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, tryConvertToPromise, apiRejection) {
		var util$19 = require_util$3();
		var isObject$5 = util$19.isObject;
		var es5$3 = require_es5();
		var Es6Map;
		if (typeof Map === "function") Es6Map = Map;
		var mapToEntries = function() {
			var index$1 = 0;
			var size = 0;
			function extractEntry(value, key) {
				this[index$1] = value;
				this[index$1 + size] = key;
				index$1++;
			}
			return function mapToEntries$1(map) {
				size = map.size;
				index$1 = 0;
				var ret$1 = new Array(map.size * 2);
				map.forEach(extractEntry, ret$1);
				return ret$1;
			};
		}();
		var entriesToMap = function(entries) {
			var ret$1 = new Es6Map();
			var length = entries.length / 2 | 0;
			for (var i$6 = 0; i$6 < length; ++i$6) {
				var key = entries[length + i$6];
				var value = entries[i$6];
				ret$1.set(key, value);
			}
			return ret$1;
		};
		function PropertiesPromiseArray(obj) {
			var isMap$2 = false;
			var entries;
			if (Es6Map !== void 0 && obj instanceof Es6Map) {
				entries = mapToEntries(obj);
				isMap$2 = true;
			} else {
				var keys$1 = es5$3.keys(obj);
				var len = keys$1.length;
				entries = new Array(len * 2);
				for (var i$6 = 0; i$6 < len; ++i$6) {
					var key = keys$1[i$6];
					entries[i$6] = obj[key];
					entries[i$6 + len] = key;
				}
			}
			this.constructor$(entries);
			this._isMap = isMap$2;
			this._init$(void 0, isMap$2 ? -6 : -3);
		}
		util$19.inherits(PropertiesPromiseArray, PromiseArray);
		PropertiesPromiseArray.prototype._init = function() {};
		PropertiesPromiseArray.prototype._promiseFulfilled = function(value, index$1) {
			this._values[index$1] = value;
			var totalResolved = ++this._totalResolved;
			if (totalResolved >= this._length) {
				var val;
				if (this._isMap) val = entriesToMap(this._values);
				else {
					val = {};
					var keyOffset = this.length();
					for (var i$6 = 0, len = this.length(); i$6 < len; ++i$6) val[this._values[i$6 + keyOffset]] = this._values[i$6];
				}
				this._resolve(val);
				return true;
			}
			return false;
		};
		PropertiesPromiseArray.prototype.shouldCopyValues = function() {
			return false;
		};
		PropertiesPromiseArray.prototype.getActualLength = function(len) {
			return len >> 1;
		};
		function props(promises) {
			var ret$1;
			var castValue = tryConvertToPromise(promises);
			if (!isObject$5(castValue)) return apiRejection("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n");
			else if (castValue instanceof Promise$2) ret$1 = castValue._then(Promise$2.props, void 0, void 0, void 0, void 0);
			else ret$1 = new PropertiesPromiseArray(castValue).promise();
			if (castValue instanceof Promise$2) ret$1._propagateFrom(castValue, 2);
			return ret$1;
		}
		Promise$2.prototype.props = function() {
			return props(this);
		};
		Promise$2.props = function(promises) {
			return props(promises);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/race.js
var require_race = __commonJS({ "node_modules/bluebird/js/release/race.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL, tryConvertToPromise, apiRejection) {
		var util$19 = require_util$3();
		var raceLater = function(promise) {
			return promise.then(function(array) {
				return race(array, promise);
			});
		};
		function race(promises, parent) {
			var maybePromise = tryConvertToPromise(promises);
			if (maybePromise instanceof Promise$2) return raceLater(maybePromise);
			else {
				promises = util$19.asArray(promises);
				if (promises === null) return apiRejection("expecting an array or an iterable object but got " + util$19.classString(promises));
			}
			var ret$1 = new Promise$2(INTERNAL);
			if (parent !== void 0) ret$1._propagateFrom(parent, 3);
			var fulfill = ret$1._fulfill;
			var reject = ret$1._reject;
			for (var i$6 = 0, len = promises.length; i$6 < len; ++i$6) {
				var val = promises[i$6];
				if (val === void 0 && !(i$6 in promises)) continue;
				Promise$2.cast(val)._then(fulfill, reject, void 0, ret$1, null);
			}
			return ret$1;
		}
		Promise$2.race = function(promises) {
			return race(promises, void 0);
		};
		Promise$2.prototype.race = function() {
			return race(this, void 0);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/reduce.js
var require_reduce = __commonJS({ "node_modules/bluebird/js/release/reduce.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug$2) {
		var util$19 = require_util$3();
		var tryCatch$1 = util$19.tryCatch;
		function ReductionPromiseArray(promises, fn, initialValue, _each) {
			this.constructor$(promises);
			var context = Promise$2._getContext();
			this._fn = util$19.contextBind(context, fn);
			if (initialValue !== void 0) {
				initialValue = Promise$2.resolve(initialValue);
				initialValue._attachCancellationCallback(this);
			}
			this._initialValue = initialValue;
			this._currentCancellable = null;
			if (_each === INTERNAL) this._eachValues = Array(this._length);
			else if (_each === 0) this._eachValues = null;
			else this._eachValues = void 0;
			this._promise._captureStackTrace();
			this._init$(void 0, -5);
		}
		util$19.inherits(ReductionPromiseArray, PromiseArray);
		ReductionPromiseArray.prototype._gotAccum = function(accum) {
			if (this._eachValues !== void 0 && this._eachValues !== null && accum !== INTERNAL) this._eachValues.push(accum);
		};
		ReductionPromiseArray.prototype._eachComplete = function(value) {
			if (this._eachValues !== null) this._eachValues.push(value);
			return this._eachValues;
		};
		ReductionPromiseArray.prototype._init = function() {};
		ReductionPromiseArray.prototype._resolveEmptyArray = function() {
			this._resolve(this._eachValues !== void 0 ? this._eachValues : this._initialValue);
		};
		ReductionPromiseArray.prototype.shouldCopyValues = function() {
			return false;
		};
		ReductionPromiseArray.prototype._resolve = function(value) {
			this._promise._resolveCallback(value);
			this._values = null;
		};
		ReductionPromiseArray.prototype._resultCancelled = function(sender) {
			if (sender === this._initialValue) return this._cancel();
			if (this._isResolved()) return;
			this._resultCancelled$();
			if (this._currentCancellable instanceof Promise$2) this._currentCancellable.cancel();
			if (this._initialValue instanceof Promise$2) this._initialValue.cancel();
		};
		ReductionPromiseArray.prototype._iterate = function(values) {
			this._values = values;
			var value;
			var i$6;
			var length = values.length;
			if (this._initialValue !== void 0) {
				value = this._initialValue;
				i$6 = 0;
			} else {
				value = Promise$2.resolve(values[0]);
				i$6 = 1;
			}
			this._currentCancellable = value;
			for (var j$1 = i$6; j$1 < length; ++j$1) {
				var maybePromise = values[j$1];
				if (maybePromise instanceof Promise$2) maybePromise.suppressUnhandledRejections();
			}
			if (!value.isRejected()) for (; i$6 < length; ++i$6) {
				var ctx = {
					accum: null,
					value: values[i$6],
					index: i$6,
					length,
					array: this
				};
				value = value._then(gotAccum, void 0, void 0, ctx, void 0);
				if ((i$6 & 127) === 0) value._setNoAsyncGuarantee();
			}
			if (this._eachValues !== void 0) value = value._then(this._eachComplete, void 0, void 0, this, void 0);
			value._then(completed, completed, void 0, value, this);
		};
		Promise$2.prototype.reduce = function(fn, initialValue) {
			return reduce(this, fn, initialValue, null);
		};
		Promise$2.reduce = function(promises, fn, initialValue, _each) {
			return reduce(promises, fn, initialValue, _each);
		};
		function completed(valueOrReason, array) {
			if (this.isFulfilled()) array._resolve(valueOrReason);
			else array._reject(valueOrReason);
		}
		function reduce(promises, fn, initialValue, _each) {
			if (typeof fn !== "function") return apiRejection("expecting a function but got " + util$19.classString(fn));
			var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
			return array.promise();
		}
		function gotAccum(accum) {
			this.accum = accum;
			this.array._gotAccum(accum);
			var value = tryConvertToPromise(this.value, this.array._promise);
			if (value instanceof Promise$2) {
				this.array._currentCancellable = value;
				return value._then(gotValue, void 0, void 0, this, void 0);
			} else return gotValue.call(this, value);
		}
		function gotValue(value) {
			var array = this.array;
			var promise = array._promise;
			var fn = tryCatch$1(array._fn);
			promise._pushContext();
			var ret$1;
			if (array._eachValues !== void 0) ret$1 = fn.call(promise._boundValue(), value, this.index, this.length);
			else ret$1 = fn.call(promise._boundValue(), this.accum, value, this.index, this.length);
			if (ret$1 instanceof Promise$2) array._currentCancellable = ret$1;
			var promiseCreated = promise._popContext();
			debug$2.checkForgottenReturns(ret$1, promiseCreated, array._eachValues !== void 0 ? "Promise.each" : "Promise.reduce", promise);
			return ret$1;
		}
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/settle.js
var require_settle = __commonJS({ "node_modules/bluebird/js/release/settle.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, debug$2) {
		var PromiseInspection = Promise$2.PromiseInspection;
		var util$19 = require_util$3();
		function SettledPromiseArray(values) {
			this.constructor$(values);
		}
		util$19.inherits(SettledPromiseArray, PromiseArray);
		SettledPromiseArray.prototype._promiseResolved = function(index$1, inspection) {
			this._values[index$1] = inspection;
			var totalResolved = ++this._totalResolved;
			if (totalResolved >= this._length) {
				this._resolve(this._values);
				return true;
			}
			return false;
		};
		SettledPromiseArray.prototype._promiseFulfilled = function(value, index$1) {
			var ret$1 = new PromiseInspection();
			ret$1._bitField = 33554432;
			ret$1._settledValueField = value;
			return this._promiseResolved(index$1, ret$1);
		};
		SettledPromiseArray.prototype._promiseRejected = function(reason, index$1) {
			var ret$1 = new PromiseInspection();
			ret$1._bitField = 16777216;
			ret$1._settledValueField = reason;
			return this._promiseResolved(index$1, ret$1);
		};
		Promise$2.settle = function(promises) {
			debug$2.deprecated(".settle()", ".reflect()");
			return new SettledPromiseArray(promises).promise();
		};
		Promise$2.allSettled = function(promises) {
			return new SettledPromiseArray(promises).promise();
		};
		Promise$2.prototype.settle = function() {
			return Promise$2.settle(this);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/some.js
var require_some = __commonJS({ "node_modules/bluebird/js/release/some.js"(exports, module) {
	module.exports = function(Promise$2, PromiseArray, apiRejection) {
		var util$19 = require_util$3();
		var RangeError$1 = require_errors().RangeError;
		var AggregateError$1 = require_errors().AggregateError;
		var isArray$5 = util$19.isArray;
		var CANCELLATION = {};
		function SomePromiseArray(values) {
			this.constructor$(values);
			this._howMany = 0;
			this._unwrap = false;
			this._initialized = false;
		}
		util$19.inherits(SomePromiseArray, PromiseArray);
		SomePromiseArray.prototype._init = function() {
			if (!this._initialized) return;
			if (this._howMany === 0) {
				this._resolve([]);
				return;
			}
			this._init$(void 0, -5);
			var isArrayResolved = isArray$5(this._values);
			if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) this._reject(this._getRangeError(this.length()));
		};
		SomePromiseArray.prototype.init = function() {
			this._initialized = true;
			this._init();
		};
		SomePromiseArray.prototype.setUnwrap = function() {
			this._unwrap = true;
		};
		SomePromiseArray.prototype.howMany = function() {
			return this._howMany;
		};
		SomePromiseArray.prototype.setHowMany = function(count) {
			this._howMany = count;
		};
		SomePromiseArray.prototype._promiseFulfilled = function(value) {
			this._addFulfilled(value);
			if (this._fulfilled() === this.howMany()) {
				this._values.length = this.howMany();
				if (this.howMany() === 1 && this._unwrap) this._resolve(this._values[0]);
				else this._resolve(this._values);
				return true;
			}
			return false;
		};
		SomePromiseArray.prototype._promiseRejected = function(reason) {
			this._addRejected(reason);
			return this._checkOutcome();
		};
		SomePromiseArray.prototype._promiseCancelled = function() {
			if (this._values instanceof Promise$2 || this._values == null) return this._cancel();
			this._addRejected(CANCELLATION);
			return this._checkOutcome();
		};
		SomePromiseArray.prototype._checkOutcome = function() {
			if (this.howMany() > this._canPossiblyFulfill()) {
				var e$2 = new AggregateError$1();
				for (var i$6 = this.length(); i$6 < this._values.length; ++i$6) if (this._values[i$6] !== CANCELLATION) e$2.push(this._values[i$6]);
				if (e$2.length > 0) this._reject(e$2);
				else this._cancel();
				return true;
			}
			return false;
		};
		SomePromiseArray.prototype._fulfilled = function() {
			return this._totalResolved;
		};
		SomePromiseArray.prototype._rejected = function() {
			return this._values.length - this.length();
		};
		SomePromiseArray.prototype._addRejected = function(reason) {
			this._values.push(reason);
		};
		SomePromiseArray.prototype._addFulfilled = function(value) {
			this._values[this._totalResolved++] = value;
		};
		SomePromiseArray.prototype._canPossiblyFulfill = function() {
			return this.length() - this._rejected();
		};
		SomePromiseArray.prototype._getRangeError = function(count) {
			var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
			return new RangeError$1(message);
		};
		SomePromiseArray.prototype._resolveEmptyArray = function() {
			this._reject(this._getRangeError(0));
		};
		function some(promises, howMany) {
			if ((howMany | 0) !== howMany || howMany < 0) return apiRejection("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");
			var ret$1 = new SomePromiseArray(promises);
			var promise = ret$1.promise();
			ret$1.setHowMany(howMany);
			ret$1.init();
			return promise;
		}
		Promise$2.some = function(promises, howMany) {
			return some(promises, howMany);
		};
		Promise$2.prototype.some = function(howMany) {
			return some(this, howMany);
		};
		Promise$2._SomePromiseArray = SomePromiseArray;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/timers.js
var require_timers = __commonJS({ "node_modules/bluebird/js/release/timers.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL, debug$2) {
		var util$19 = require_util$3();
		var TimeoutError$1 = Promise$2.TimeoutError;
		function HandleWrapper(handle) {
			this.handle = handle;
		}
		HandleWrapper.prototype._resultCancelled = function() {
			clearTimeout(this.handle);
		};
		var afterValue = function(value) {
			return delay(+this).thenReturn(value);
		};
		var delay = Promise$2.delay = function(ms, value) {
			var ret$1;
			var handle;
			if (value !== void 0) {
				ret$1 = Promise$2.resolve(value)._then(afterValue, null, null, ms, void 0);
				if (debug$2.cancellation() && value instanceof Promise$2) ret$1._setOnCancel(value);
			} else {
				ret$1 = new Promise$2(INTERNAL);
				handle = setTimeout(function() {
					ret$1._fulfill();
				}, +ms);
				if (debug$2.cancellation()) ret$1._setOnCancel(new HandleWrapper(handle));
				ret$1._captureStackTrace();
			}
			ret$1._setAsyncGuaranteed();
			return ret$1;
		};
		Promise$2.prototype.delay = function(ms) {
			return delay(ms, this);
		};
		var afterTimeout = function(promise, message, parent) {
			var err;
			if (typeof message !== "string") if (message instanceof Error) err = message;
			else err = new TimeoutError$1("operation timed out");
			else err = new TimeoutError$1(message);
			util$19.markAsOriginatingFromRejection(err);
			promise._attachExtraTrace(err);
			promise._reject(err);
			if (parent != null) parent.cancel();
		};
		function successClear(value) {
			clearTimeout(this.handle);
			return value;
		}
		function failureClear(reason) {
			clearTimeout(this.handle);
			throw reason;
		}
		Promise$2.prototype.timeout = function(ms, message) {
			ms = +ms;
			var ret$1, parent;
			var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
				if (ret$1.isPending()) afterTimeout(ret$1, message, parent);
			}, ms));
			if (debug$2.cancellation()) {
				parent = this.then();
				ret$1 = parent._then(successClear, failureClear, void 0, handleWrapper, void 0);
				ret$1._setOnCancel(handleWrapper);
			} else ret$1 = this._then(successClear, failureClear, void 0, handleWrapper, void 0);
			return ret$1;
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/using.js
var require_using = __commonJS({ "node_modules/bluebird/js/release/using.js"(exports, module) {
	module.exports = function(Promise$2, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug$2) {
		var util$19 = require_util$3();
		var TypeError$1 = require_errors().TypeError;
		var inherits$5 = require_util$3().inherits;
		var errorObj$1 = util$19.errorObj;
		var tryCatch$1 = util$19.tryCatch;
		var NULL = {};
		function thrower$1(e$2) {
			setTimeout(function() {
				throw e$2;
			}, 0);
		}
		function castPreservingDisposable(thenable) {
			var maybePromise = tryConvertToPromise(thenable);
			if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) maybePromise._setDisposable(thenable._getDisposer());
			return maybePromise;
		}
		function dispose(resources, inspection) {
			var i$6 = 0;
			var len = resources.length;
			var ret$1 = new Promise$2(INTERNAL);
			function iterator() {
				if (i$6 >= len) return ret$1._fulfill();
				var maybePromise = castPreservingDisposable(resources[i$6++]);
				if (maybePromise instanceof Promise$2 && maybePromise._isDisposable()) {
					try {
						maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise);
					} catch (e$2) {
						return thrower$1(e$2);
					}
					if (maybePromise instanceof Promise$2) return maybePromise._then(iterator, thrower$1, null, null, null);
				}
				iterator();
			}
			iterator();
			return ret$1;
		}
		function Disposer(data$2, promise, context) {
			this._data = data$2;
			this._promise = promise;
			this._context = context;
		}
		Disposer.prototype.data = function() {
			return this._data;
		};
		Disposer.prototype.promise = function() {
			return this._promise;
		};
		Disposer.prototype.resource = function() {
			if (this.promise().isFulfilled()) return this.promise().value();
			return NULL;
		};
		Disposer.prototype.tryDispose = function(inspection) {
			var resource = this.resource();
			var context = this._context;
			if (context !== void 0) context._pushContext();
			var ret$1 = resource !== NULL ? this.doDispose(resource, inspection) : null;
			if (context !== void 0) context._popContext();
			this._promise._unsetDisposable();
			this._data = null;
			return ret$1;
		};
		Disposer.isDisposer = function(d$2) {
			return d$2 != null && typeof d$2.resource === "function" && typeof d$2.tryDispose === "function";
		};
		function FunctionDisposer(fn, promise, context) {
			this.constructor$(fn, promise, context);
		}
		inherits$5(FunctionDisposer, Disposer);
		FunctionDisposer.prototype.doDispose = function(resource, inspection) {
			var fn = this.data();
			return fn.call(resource, resource, inspection);
		};
		function maybeUnwrapDisposer(value) {
			if (Disposer.isDisposer(value)) {
				this.resources[this.index]._setDisposable(value);
				return value.promise();
			}
			return value;
		}
		function ResourceList(length) {
			this.length = length;
			this.promise = null;
			this[length - 1] = null;
		}
		ResourceList.prototype._resultCancelled = function() {
			var len = this.length;
			for (var i$6 = 0; i$6 < len; ++i$6) {
				var item = this[i$6];
				if (item instanceof Promise$2) item.cancel();
			}
		};
		Promise$2.using = function() {
			var len = arguments.length;
			if (len < 2) return apiRejection("you must pass at least 2 arguments to Promise.using");
			var fn = arguments[len - 1];
			if (typeof fn !== "function") return apiRejection("expecting a function but got " + util$19.classString(fn));
			var input;
			var spreadArgs = true;
			if (len === 2 && Array.isArray(arguments[0])) {
				input = arguments[0];
				len = input.length;
				spreadArgs = false;
			} else {
				input = arguments;
				len--;
			}
			var resources = new ResourceList(len);
			for (var i$6 = 0; i$6 < len; ++i$6) {
				var resource = input[i$6];
				if (Disposer.isDisposer(resource)) {
					var disposer = resource;
					resource = resource.promise();
					resource._setDisposable(disposer);
				} else {
					var maybePromise = tryConvertToPromise(resource);
					if (maybePromise instanceof Promise$2) resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
						resources,
						index: i$6
					}, void 0);
				}
				resources[i$6] = resource;
			}
			var reflectedResources = new Array(resources.length);
			for (var i$6 = 0; i$6 < reflectedResources.length; ++i$6) reflectedResources[i$6] = Promise$2.resolve(resources[i$6]).reflect();
			var resultPromise = Promise$2.all(reflectedResources).then(function(inspections) {
				for (var i$7 = 0; i$7 < inspections.length; ++i$7) {
					var inspection = inspections[i$7];
					if (inspection.isRejected()) {
						errorObj$1.e = inspection.error();
						return errorObj$1;
					} else if (!inspection.isFulfilled()) {
						resultPromise.cancel();
						return;
					}
					inspections[i$7] = inspection.value();
				}
				promise._pushContext();
				fn = tryCatch$1(fn);
				var ret$1 = spreadArgs ? fn.apply(void 0, inspections) : fn(inspections);
				var promiseCreated = promise._popContext();
				debug$2.checkForgottenReturns(ret$1, promiseCreated, "Promise.using", promise);
				return ret$1;
			});
			var promise = resultPromise.lastly(function() {
				var inspection = new Promise$2.PromiseInspection(resultPromise);
				return dispose(resources, inspection);
			});
			resources.promise = promise;
			promise._setOnCancel(resources);
			return promise;
		};
		Promise$2.prototype._setDisposable = function(disposer) {
			this._bitField = this._bitField | 131072;
			this._disposer = disposer;
		};
		Promise$2.prototype._isDisposable = function() {
			return (this._bitField & 131072) > 0;
		};
		Promise$2.prototype._getDisposer = function() {
			return this._disposer;
		};
		Promise$2.prototype._unsetDisposable = function() {
			this._bitField = this._bitField & -131073;
			this._disposer = void 0;
		};
		Promise$2.prototype.disposer = function(fn) {
			if (typeof fn === "function") return new FunctionDisposer(fn, this, createContext());
			throw new TypeError$1();
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/any.js
var require_any = __commonJS({ "node_modules/bluebird/js/release/any.js"(exports, module) {
	module.exports = function(Promise$2) {
		var SomePromiseArray = Promise$2._SomePromiseArray;
		function any(promises) {
			var ret$1 = new SomePromiseArray(promises);
			var promise = ret$1.promise();
			ret$1.setHowMany(1);
			ret$1.setUnwrap();
			ret$1.init();
			return promise;
		}
		Promise$2.any = function(promises) {
			return any(promises);
		};
		Promise$2.prototype.any = function() {
			return any(this);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/each.js
var require_each$1 = __commonJS({ "node_modules/bluebird/js/release/each.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL) {
		var PromiseReduce = Promise$2.reduce;
		var PromiseAll = Promise$2.all;
		function promiseAllThis() {
			return PromiseAll(this);
		}
		function PromiseMapSeries(promises, fn) {
			return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
		}
		Promise$2.prototype.each = function(fn) {
			return PromiseReduce(this, fn, INTERNAL, 0)._then(promiseAllThis, void 0, void 0, this, void 0);
		};
		Promise$2.prototype.mapSeries = function(fn) {
			return PromiseReduce(this, fn, INTERNAL, INTERNAL);
		};
		Promise$2.each = function(promises, fn) {
			return PromiseReduce(promises, fn, INTERNAL, 0)._then(promiseAllThis, void 0, void 0, promises, void 0);
		};
		Promise$2.mapSeries = PromiseMapSeries;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/filter.js
var require_filter = __commonJS({ "node_modules/bluebird/js/release/filter.js"(exports, module) {
	module.exports = function(Promise$2, INTERNAL) {
		var PromiseMap = Promise$2.map;
		Promise$2.prototype.filter = function(fn, options) {
			return PromiseMap(this, fn, options, INTERNAL);
		};
		Promise$2.filter = function(promises, fn, options) {
			return PromiseMap(promises, fn, options, INTERNAL);
		};
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/promise.js
var require_promise = __commonJS({ "node_modules/bluebird/js/release/promise.js"(exports, module) {
	module.exports = function() {
		var makeSelfResolutionError = function() {
			return new TypeError$1("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
		};
		var reflectHandler$1 = function() {
			return new Promise$2.PromiseInspection(this._target());
		};
		var apiRejection = function(msg) {
			return Promise$2.reject(new TypeError$1(msg));
		};
		function Proxyable() {}
		var UNDEFINED_BINDING = {};
		var util$19 = require_util$3();
		util$19.setReflectHandler(reflectHandler$1);
		var getDomain = function() {
			var domain = process.domain;
			if (domain === void 0) return null;
			return domain;
		};
		var getContextDefault = function() {
			return null;
		};
		var getContextDomain = function() {
			return {
				domain: getDomain(),
				async: null
			};
		};
		var AsyncResource = util$19.isNode && util$19.nodeSupportsAsyncResource ? __require("async_hooks").AsyncResource : null;
		var getContextAsyncHooks = function() {
			return {
				domain: getDomain(),
				async: new AsyncResource("Bluebird::Promise")
			};
		};
		var getContext = util$19.isNode ? getContextDomain : getContextDefault;
		util$19.notEnumerableProp(Promise$2, "_getContext", getContext);
		var enableAsyncHooks = function() {
			getContext = getContextAsyncHooks;
			util$19.notEnumerableProp(Promise$2, "_getContext", getContextAsyncHooks);
		};
		var disableAsyncHooks = function() {
			getContext = getContextDomain;
			util$19.notEnumerableProp(Promise$2, "_getContext", getContextDomain);
		};
		var es5$3 = require_es5();
		var Async$1 = require_async();
		var async$1 = new Async$1();
		es5$3.defineProperty(Promise$2, "_async", { value: async$1 });
		var errors$1 = require_errors();
		var TypeError$1 = Promise$2.TypeError = errors$1.TypeError;
		Promise$2.RangeError = errors$1.RangeError;
		var CancellationError$1 = Promise$2.CancellationError = errors$1.CancellationError;
		Promise$2.TimeoutError = errors$1.TimeoutError;
		Promise$2.OperationalError = errors$1.OperationalError;
		Promise$2.RejectionError = errors$1.OperationalError;
		Promise$2.AggregateError = errors$1.AggregateError;
		var INTERNAL = function() {};
		var APPLY = {};
		var NEXT_FILTER = {};
		var tryConvertToPromise = require_thenables()(Promise$2, INTERNAL);
		var PromiseArray = require_promise_array()(Promise$2, INTERNAL, tryConvertToPromise, apiRejection, Proxyable);
		var Context = require_context$2()(Promise$2);
		var createContext = Context.create;
		var debug$2 = require_debuggability()(Promise$2, Context, enableAsyncHooks, disableAsyncHooks);
		var CapturedTrace = debug$2.CapturedTrace;
		var PassThroughHandlerContext = require_finally()(Promise$2, tryConvertToPromise, NEXT_FILTER);
		var catchFilter = require_catch_filter()(NEXT_FILTER);
		var nodebackForPromise$1 = require_nodeback();
		var errorObj$1 = util$19.errorObj;
		var tryCatch$1 = util$19.tryCatch;
		function check(self$1, executor) {
			if (self$1 == null || self$1.constructor !== Promise$2) throw new TypeError$1("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
			if (typeof executor !== "function") throw new TypeError$1("expecting a function but got " + util$19.classString(executor));
		}
		function Promise$2(executor) {
			if (executor !== INTERNAL) check(this, executor);
			this._bitField = 0;
			this._fulfillmentHandler0 = void 0;
			this._rejectionHandler0 = void 0;
			this._promise0 = void 0;
			this._receiver0 = void 0;
			this._resolveFromExecutor(executor);
			this._promiseCreated();
			this._fireEvent("promiseCreated", this);
		}
		Promise$2.prototype.toString = function() {
			return "[object Promise]";
		};
		Promise$2.prototype.caught = Promise$2.prototype["catch"] = function(fn) {
			var len = arguments.length;
			if (len > 1) {
				var catchInstances = new Array(len - 1), j$1 = 0, i$6;
				for (i$6 = 0; i$6 < len - 1; ++i$6) {
					var item = arguments[i$6];
					if (util$19.isObject(item)) catchInstances[j$1++] = item;
					else return apiRejection("Catch statement predicate: expecting an object but got " + util$19.classString(item));
				}
				catchInstances.length = j$1;
				fn = arguments[i$6];
				if (typeof fn !== "function") throw new TypeError$1("The last argument to .catch() must be a function, got " + util$19.toString(fn));
				return this.then(void 0, catchFilter(catchInstances, fn, this));
			}
			return this.then(void 0, fn);
		};
		Promise$2.prototype.reflect = function() {
			return this._then(reflectHandler$1, reflectHandler$1, void 0, this, void 0);
		};
		Promise$2.prototype.then = function(didFulfill, didReject) {
			if (debug$2.warnings() && arguments.length > 0 && typeof didFulfill !== "function" && typeof didReject !== "function") {
				var msg = ".then() only accepts functions but was passed: " + util$19.classString(didFulfill);
				if (arguments.length > 1) msg += ", " + util$19.classString(didReject);
				this._warn(msg);
			}
			return this._then(didFulfill, didReject, void 0, void 0, void 0);
		};
		Promise$2.prototype.done = function(didFulfill, didReject) {
			var promise = this._then(didFulfill, didReject, void 0, void 0, void 0);
			promise._setIsFinal();
		};
		Promise$2.prototype.spread = function(fn) {
			if (typeof fn !== "function") return apiRejection("expecting a function but got " + util$19.classString(fn));
			return this.all()._then(fn, void 0, void 0, APPLY, void 0);
		};
		Promise$2.prototype.toJSON = function() {
			var ret$1 = {
				isFulfilled: false,
				isRejected: false,
				fulfillmentValue: void 0,
				rejectionReason: void 0
			};
			if (this.isFulfilled()) {
				ret$1.fulfillmentValue = this.value();
				ret$1.isFulfilled = true;
			} else if (this.isRejected()) {
				ret$1.rejectionReason = this.reason();
				ret$1.isRejected = true;
			}
			return ret$1;
		};
		Promise$2.prototype.all = function() {
			if (arguments.length > 0) this._warn(".all() was passed arguments but it does not take any");
			return new PromiseArray(this).promise();
		};
		Promise$2.prototype.error = function(fn) {
			return this.caught(util$19.originatesFromRejection, fn);
		};
		Promise$2.getNewLibraryCopy = module.exports;
		Promise$2.is = function(val) {
			return val instanceof Promise$2;
		};
		Promise$2.fromNode = Promise$2.fromCallback = function(fn) {
			var ret$1 = new Promise$2(INTERNAL);
			ret$1._captureStackTrace();
			var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs : false;
			var result = tryCatch$1(fn)(nodebackForPromise$1(ret$1, multiArgs));
			if (result === errorObj$1) ret$1._rejectCallback(result.e, true);
			if (!ret$1._isFateSealed()) ret$1._setAsyncGuaranteed();
			return ret$1;
		};
		Promise$2.all = function(promises) {
			return new PromiseArray(promises).promise();
		};
		Promise$2.cast = function(obj) {
			var ret$1 = tryConvertToPromise(obj);
			if (!(ret$1 instanceof Promise$2)) {
				ret$1 = new Promise$2(INTERNAL);
				ret$1._captureStackTrace();
				ret$1._setFulfilled();
				ret$1._rejectionHandler0 = obj;
			}
			return ret$1;
		};
		Promise$2.resolve = Promise$2.fulfilled = Promise$2.cast;
		Promise$2.reject = Promise$2.rejected = function(reason) {
			var ret$1 = new Promise$2(INTERNAL);
			ret$1._captureStackTrace();
			ret$1._rejectCallback(reason, true);
			return ret$1;
		};
		Promise$2.setScheduler = function(fn) {
			if (typeof fn !== "function") throw new TypeError$1("expecting a function but got " + util$19.classString(fn));
			return async$1.setScheduler(fn);
		};
		Promise$2.prototype._then = function(didFulfill, didReject, _, receiver, internalData) {
			var haveInternalData = internalData !== void 0;
			var promise = haveInternalData ? internalData : new Promise$2(INTERNAL);
			var target = this._target();
			var bitField = target._bitField;
			if (!haveInternalData) {
				promise._propagateFrom(this, 3);
				promise._captureStackTrace();
				if (receiver === void 0 && (this._bitField & 2097152) !== 0) if (!((bitField & 50397184) === 0)) receiver = this._boundValue();
				else receiver = target === this ? void 0 : this._boundTo;
				this._fireEvent("promiseChained", this, promise);
			}
			var context = getContext();
			if (!((bitField & 50397184) === 0)) {
				var handler, value, settler = target._settlePromiseCtx;
				if ((bitField & 33554432) !== 0) {
					value = target._rejectionHandler0;
					handler = didFulfill;
				} else if ((bitField & 16777216) !== 0) {
					value = target._fulfillmentHandler0;
					handler = didReject;
					target._unsetRejectionIsUnhandled();
				} else {
					settler = target._settlePromiseLateCancellationObserver;
					value = new CancellationError$1("late cancellation observer");
					target._attachExtraTrace(value);
					handler = didReject;
				}
				async$1.invoke(settler, target, {
					handler: util$19.contextBind(context, handler),
					promise,
					receiver,
					value
				});
			} else target._addCallbacks(didFulfill, didReject, promise, receiver, context);
			return promise;
		};
		Promise$2.prototype._length = function() {
			return this._bitField & 65535;
		};
		Promise$2.prototype._isFateSealed = function() {
			return (this._bitField & 117506048) !== 0;
		};
		Promise$2.prototype._isFollowing = function() {
			return (this._bitField & 67108864) === 67108864;
		};
		Promise$2.prototype._setLength = function(len) {
			this._bitField = this._bitField & -65536 | len & 65535;
		};
		Promise$2.prototype._setFulfilled = function() {
			this._bitField = this._bitField | 33554432;
			this._fireEvent("promiseFulfilled", this);
		};
		Promise$2.prototype._setRejected = function() {
			this._bitField = this._bitField | 16777216;
			this._fireEvent("promiseRejected", this);
		};
		Promise$2.prototype._setFollowing = function() {
			this._bitField = this._bitField | 67108864;
			this._fireEvent("promiseResolved", this);
		};
		Promise$2.prototype._setIsFinal = function() {
			this._bitField = this._bitField | 4194304;
		};
		Promise$2.prototype._isFinal = function() {
			return (this._bitField & 4194304) > 0;
		};
		Promise$2.prototype._unsetCancelled = function() {
			this._bitField = this._bitField & -65537;
		};
		Promise$2.prototype._setCancelled = function() {
			this._bitField = this._bitField | 65536;
			this._fireEvent("promiseCancelled", this);
		};
		Promise$2.prototype._setWillBeCancelled = function() {
			this._bitField = this._bitField | 8388608;
		};
		Promise$2.prototype._setAsyncGuaranteed = function() {
			if (async$1.hasCustomScheduler()) return;
			var bitField = this._bitField;
			this._bitField = bitField | (bitField & 536870912) >> 2 ^ 134217728;
		};
		Promise$2.prototype._setNoAsyncGuarantee = function() {
			this._bitField = (this._bitField | 536870912) & -134217729;
		};
		Promise$2.prototype._receiverAt = function(index$1) {
			var ret$1 = index$1 === 0 ? this._receiver0 : this[index$1 * 4 - 4 + 3];
			if (ret$1 === UNDEFINED_BINDING) return void 0;
			else if (ret$1 === void 0 && this._isBound()) return this._boundValue();
			return ret$1;
		};
		Promise$2.prototype._promiseAt = function(index$1) {
			return this[index$1 * 4 - 4 + 2];
		};
		Promise$2.prototype._fulfillmentHandlerAt = function(index$1) {
			return this[index$1 * 4 - 4 + 0];
		};
		Promise$2.prototype._rejectionHandlerAt = function(index$1) {
			return this[index$1 * 4 - 4 + 1];
		};
		Promise$2.prototype._boundValue = function() {};
		Promise$2.prototype._migrateCallback0 = function(follower) {
			var bitField = follower._bitField;
			var fulfill = follower._fulfillmentHandler0;
			var reject = follower._rejectionHandler0;
			var promise = follower._promise0;
			var receiver = follower._receiverAt(0);
			if (receiver === void 0) receiver = UNDEFINED_BINDING;
			this._addCallbacks(fulfill, reject, promise, receiver, null);
		};
		Promise$2.prototype._migrateCallbackAt = function(follower, index$1) {
			var fulfill = follower._fulfillmentHandlerAt(index$1);
			var reject = follower._rejectionHandlerAt(index$1);
			var promise = follower._promiseAt(index$1);
			var receiver = follower._receiverAt(index$1);
			if (receiver === void 0) receiver = UNDEFINED_BINDING;
			this._addCallbacks(fulfill, reject, promise, receiver, null);
		};
		Promise$2.prototype._addCallbacks = function(fulfill, reject, promise, receiver, context) {
			var index$1 = this._length();
			if (index$1 >= 65531) {
				index$1 = 0;
				this._setLength(0);
			}
			if (index$1 === 0) {
				this._promise0 = promise;
				this._receiver0 = receiver;
				if (typeof fulfill === "function") this._fulfillmentHandler0 = util$19.contextBind(context, fulfill);
				if (typeof reject === "function") this._rejectionHandler0 = util$19.contextBind(context, reject);
			} else {
				var base$1 = index$1 * 4 - 4;
				this[base$1 + 2] = promise;
				this[base$1 + 3] = receiver;
				if (typeof fulfill === "function") this[base$1 + 0] = util$19.contextBind(context, fulfill);
				if (typeof reject === "function") this[base$1 + 1] = util$19.contextBind(context, reject);
			}
			this._setLength(index$1 + 1);
			return index$1;
		};
		Promise$2.prototype._proxy = function(proxyable, arg) {
			this._addCallbacks(void 0, void 0, arg, proxyable, null);
		};
		Promise$2.prototype._resolveCallback = function(value, shouldBind) {
			if ((this._bitField & 117506048) !== 0) return;
			if (value === this) return this._rejectCallback(makeSelfResolutionError(), false);
			var maybePromise = tryConvertToPromise(value, this);
			if (!(maybePromise instanceof Promise$2)) return this._fulfill(value);
			if (shouldBind) this._propagateFrom(maybePromise, 2);
			var promise = maybePromise._target();
			if (promise === this) {
				this._reject(makeSelfResolutionError());
				return;
			}
			var bitField = promise._bitField;
			if ((bitField & 50397184) === 0) {
				var len = this._length();
				if (len > 0) promise._migrateCallback0(this);
				for (var i$6 = 1; i$6 < len; ++i$6) promise._migrateCallbackAt(this, i$6);
				this._setFollowing();
				this._setLength(0);
				this._setFollowee(maybePromise);
			} else if ((bitField & 33554432) !== 0) this._fulfill(promise._value());
			else if ((bitField & 16777216) !== 0) this._reject(promise._reason());
			else {
				var reason = new CancellationError$1("late cancellation observer");
				promise._attachExtraTrace(reason);
				this._reject(reason);
			}
		};
		Promise$2.prototype._rejectCallback = function(reason, synchronous, ignoreNonErrorWarnings) {
			var trace = util$19.ensureErrorObject(reason);
			var hasStack = trace === reason;
			if (!hasStack && !ignoreNonErrorWarnings && debug$2.warnings()) {
				var message = "a promise was rejected with a non-error: " + util$19.classString(reason);
				this._warn(message, true);
			}
			this._attachExtraTrace(trace, synchronous ? hasStack : false);
			this._reject(reason);
		};
		Promise$2.prototype._resolveFromExecutor = function(executor) {
			if (executor === INTERNAL) return;
			var promise = this;
			this._captureStackTrace();
			this._pushContext();
			var synchronous = true;
			var r$2 = this._execute(executor, function(value) {
				promise._resolveCallback(value);
			}, function(reason) {
				promise._rejectCallback(reason, synchronous);
			});
			synchronous = false;
			this._popContext();
			if (r$2 !== void 0) promise._rejectCallback(r$2, true);
		};
		Promise$2.prototype._settlePromiseFromHandler = function(handler, receiver, value, promise) {
			var bitField = promise._bitField;
			if ((bitField & 65536) !== 0) return;
			promise._pushContext();
			var x$1;
			if (receiver === APPLY) if (!value || typeof value.length !== "number") {
				x$1 = errorObj$1;
				x$1.e = new TypeError$1("cannot .spread() a non-array: " + util$19.classString(value));
			} else x$1 = tryCatch$1(handler).apply(this._boundValue(), value);
			else x$1 = tryCatch$1(handler).call(receiver, value);
			var promiseCreated = promise._popContext();
			bitField = promise._bitField;
			if ((bitField & 65536) !== 0) return;
			if (x$1 === NEXT_FILTER) promise._reject(value);
			else if (x$1 === errorObj$1) promise._rejectCallback(x$1.e, false);
			else {
				debug$2.checkForgottenReturns(x$1, promiseCreated, "", promise, this);
				promise._resolveCallback(x$1);
			}
		};
		Promise$2.prototype._target = function() {
			var ret$1 = this;
			while (ret$1._isFollowing()) ret$1 = ret$1._followee();
			return ret$1;
		};
		Promise$2.prototype._followee = function() {
			return this._rejectionHandler0;
		};
		Promise$2.prototype._setFollowee = function(promise) {
			this._rejectionHandler0 = promise;
		};
		Promise$2.prototype._settlePromise = function(promise, handler, receiver, value) {
			var isPromise$2 = promise instanceof Promise$2;
			var bitField = this._bitField;
			var asyncGuaranteed = (bitField & 134217728) !== 0;
			if ((bitField & 65536) !== 0) {
				if (isPromise$2) promise._invokeInternalOnCancel();
				if (receiver instanceof PassThroughHandlerContext && receiver.isFinallyHandler()) {
					receiver.cancelPromise = promise;
					if (tryCatch$1(handler).call(receiver, value) === errorObj$1) promise._reject(errorObj$1.e);
				} else if (handler === reflectHandler$1) promise._fulfill(reflectHandler$1.call(receiver));
				else if (receiver instanceof Proxyable) receiver._promiseCancelled(promise);
				else if (isPromise$2 || promise instanceof PromiseArray) promise._cancel();
				else receiver.cancel();
			} else if (typeof handler === "function") if (!isPromise$2) handler.call(receiver, value, promise);
			else {
				if (asyncGuaranteed) promise._setAsyncGuaranteed();
				this._settlePromiseFromHandler(handler, receiver, value, promise);
			}
			else if (receiver instanceof Proxyable) {
				if (!receiver._isResolved()) if ((bitField & 33554432) !== 0) receiver._promiseFulfilled(value, promise);
				else receiver._promiseRejected(value, promise);
			} else if (isPromise$2) {
				if (asyncGuaranteed) promise._setAsyncGuaranteed();
				if ((bitField & 33554432) !== 0) promise._fulfill(value);
				else promise._reject(value);
			}
		};
		Promise$2.prototype._settlePromiseLateCancellationObserver = function(ctx) {
			var handler = ctx.handler;
			var promise = ctx.promise;
			var receiver = ctx.receiver;
			var value = ctx.value;
			if (typeof handler === "function") if (!(promise instanceof Promise$2)) handler.call(receiver, value, promise);
			else this._settlePromiseFromHandler(handler, receiver, value, promise);
			else if (promise instanceof Promise$2) promise._reject(value);
		};
		Promise$2.prototype._settlePromiseCtx = function(ctx) {
			this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
		};
		Promise$2.prototype._settlePromise0 = function(handler, value, bitField) {
			var promise = this._promise0;
			var receiver = this._receiverAt(0);
			this._promise0 = void 0;
			this._receiver0 = void 0;
			this._settlePromise(promise, handler, receiver, value);
		};
		Promise$2.prototype._clearCallbackDataAtIndex = function(index$1) {
			var base$1 = index$1 * 4 - 4;
			this[base$1 + 2] = this[base$1 + 3] = this[base$1 + 0] = this[base$1 + 1] = void 0;
		};
		Promise$2.prototype._fulfill = function(value) {
			var bitField = this._bitField;
			if ((bitField & 117506048) >>> 16) return;
			if (value === this) {
				var err = makeSelfResolutionError();
				this._attachExtraTrace(err);
				return this._reject(err);
			}
			this._setFulfilled();
			this._rejectionHandler0 = value;
			if ((bitField & 65535) > 0) {
				if ((bitField & 134217728) !== 0) this._settlePromises();
				else async$1.settlePromises(this);
				this._dereferenceTrace();
			}
		};
		Promise$2.prototype._reject = function(reason) {
			var bitField = this._bitField;
			if ((bitField & 117506048) >>> 16) return;
			this._setRejected();
			this._fulfillmentHandler0 = reason;
			if (this._isFinal()) return async$1.fatalError(reason, util$19.isNode);
			if ((bitField & 65535) > 0) async$1.settlePromises(this);
			else this._ensurePossibleRejectionHandled();
		};
		Promise$2.prototype._fulfillPromises = function(len, value) {
			for (var i$6 = 1; i$6 < len; i$6++) {
				var handler = this._fulfillmentHandlerAt(i$6);
				var promise = this._promiseAt(i$6);
				var receiver = this._receiverAt(i$6);
				this._clearCallbackDataAtIndex(i$6);
				this._settlePromise(promise, handler, receiver, value);
			}
		};
		Promise$2.prototype._rejectPromises = function(len, reason) {
			for (var i$6 = 1; i$6 < len; i$6++) {
				var handler = this._rejectionHandlerAt(i$6);
				var promise = this._promiseAt(i$6);
				var receiver = this._receiverAt(i$6);
				this._clearCallbackDataAtIndex(i$6);
				this._settlePromise(promise, handler, receiver, reason);
			}
		};
		Promise$2.prototype._settlePromises = function() {
			var bitField = this._bitField;
			var len = bitField & 65535;
			if (len > 0) {
				if ((bitField & 16842752) !== 0) {
					var reason = this._fulfillmentHandler0;
					this._settlePromise0(this._rejectionHandler0, reason, bitField);
					this._rejectPromises(len, reason);
				} else {
					var value = this._rejectionHandler0;
					this._settlePromise0(this._fulfillmentHandler0, value, bitField);
					this._fulfillPromises(len, value);
				}
				this._setLength(0);
			}
			this._clearCancellationData();
		};
		Promise$2.prototype._settledValue = function() {
			var bitField = this._bitField;
			if ((bitField & 33554432) !== 0) return this._rejectionHandler0;
			else if ((bitField & 16777216) !== 0) return this._fulfillmentHandler0;
		};
		if (typeof Symbol !== "undefined" && Symbol.toStringTag) es5$3.defineProperty(Promise$2.prototype, Symbol.toStringTag, { get: function() {
			return "Object";
		} });
		function deferResolve(v$1) {
			this.promise._resolveCallback(v$1);
		}
		function deferReject(v$1) {
			this.promise._rejectCallback(v$1, false);
		}
		Promise$2.defer = Promise$2.pending = function() {
			debug$2.deprecated("Promise.defer", "new Promise");
			var promise = new Promise$2(INTERNAL);
			return {
				promise,
				resolve: deferResolve,
				reject: deferReject
			};
		};
		util$19.notEnumerableProp(Promise$2, "_makeSelfResolutionError", makeSelfResolutionError);
		require_method()(Promise$2, INTERNAL, tryConvertToPromise, apiRejection, debug$2);
		require_bind()(Promise$2, INTERNAL, tryConvertToPromise, debug$2);
		require_cancel()(Promise$2, PromiseArray, apiRejection, debug$2);
		require_direct_resolve()(Promise$2);
		require_synchronous_inspection()(Promise$2);
		require_join()(Promise$2, PromiseArray, tryConvertToPromise, INTERNAL, async$1);
		Promise$2.Promise = Promise$2;
		Promise$2.version = "3.7.2";
		require_call_get()(Promise$2);
		require_generators$1()(Promise$2, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug$2);
		require_map()(Promise$2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug$2);
		require_nodeify()(Promise$2);
		require_promisify()(Promise$2, INTERNAL);
		require_props()(Promise$2, PromiseArray, tryConvertToPromise, apiRejection);
		require_race()(Promise$2, INTERNAL, tryConvertToPromise, apiRejection);
		require_reduce()(Promise$2, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug$2);
		require_settle()(Promise$2, PromiseArray, debug$2);
		require_some()(Promise$2, PromiseArray, apiRejection);
		require_timers()(Promise$2, INTERNAL, debug$2);
		require_using()(Promise$2, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug$2);
		require_any()(Promise$2);
		require_each$1()(Promise$2, INTERNAL);
		require_filter()(Promise$2, INTERNAL);
		util$19.toFastProperties(Promise$2);
		util$19.toFastProperties(Promise$2.prototype);
		function fillTypes(value) {
			var p$2 = new Promise$2(INTERNAL);
			p$2._fulfillmentHandler0 = value;
			p$2._rejectionHandler0 = value;
			p$2._promise0 = value;
			p$2._receiver0 = value;
		}
		fillTypes({ a: 1 });
		fillTypes({ b: 2 });
		fillTypes({ c: 3 });
		fillTypes(1);
		fillTypes(function() {});
		fillTypes(void 0);
		fillTypes(false);
		fillTypes(new Promise$2(INTERNAL));
		debug$2.setBounds(Async$1.firstLineError, util$19.lastLineError);
		return Promise$2;
	};
} });

//#endregion
//#region node_modules/bluebird/js/release/bluebird.js
var require_bluebird = __commonJS({ "node_modules/bluebird/js/release/bluebird.js"(exports, module) {
	var old$1;
	if (typeof Promise !== "undefined") old$1 = Promise;
	function noConflict() {
		try {
			if (Promise === bluebird) Promise = old$1;
		} catch (e$2) {}
		return bluebird;
	}
	var bluebird = require_promise()();
	bluebird.noConflict = noConflict;
	module.exports = bluebird;
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/utils.js
var require_utils$2 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/utils.js"(exports) {
	exports.__esModule = true;
	exports.extend = extend$2;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape$1 = {
		"&": "&amp;",
		"<": "&lt;",
		">": "&gt;",
		"\"": "&quot;",
		"'": "&#x27;",
		"`": "&#x60;",
		"=": "&#x3D;"
	};
	var badChars = /[&<>"'`=]/g, possible = /[&<>"'`=]/;
	function escapeChar(chr) {
		return escape$1[chr];
	}
	function extend$2(obj) {
		for (var i$6 = 1; i$6 < arguments.length; i$6++) for (var key in arguments[i$6]) if (Object.prototype.hasOwnProperty.call(arguments[i$6], key)) obj[key] = arguments[i$6][key];
		return obj;
	}
	var toString$2 = Object.prototype.toString;
	exports.toString = toString$2;
	var isFunction$7 = function isFunction$10(value) {
		return typeof value === "function";
	};
	/* istanbul ignore next */
	if (isFunction$7(/x/)) exports.isFunction = isFunction$7 = function(value) {
		return typeof value === "function" && toString$2.call(value) === "[object Function]";
	};
	exports.isFunction = isFunction$7;
	/* istanbul ignore next */
	var isArray$3 = Array.isArray || function(value) {
		return value && typeof value === "object" ? toString$2.call(value) === "[object Array]" : false;
	};
	exports.isArray = isArray$3;
	function indexOf(array, value) {
		for (var i$6 = 0, len = array.length; i$6 < len; i$6++) if (array[i$6] === value) return i$6;
		return -1;
	}
	function escapeExpression(string$3) {
		if (typeof string$3 !== "string") {
			if (string$3 && string$3.toHTML) return string$3.toHTML();
			else if (string$3 == null) return "";
			else if (!string$3) return string$3 + "";
			string$3 = "" + string$3;
		}
		if (!possible.test(string$3)) return string$3;
		return string$3.replace(badChars, escapeChar);
	}
	function isEmpty(value) {
		if (!value && value !== 0) return true;
		else if (isArray$3(value) && value.length === 0) return true;
		else return false;
	}
	function createFrame(object$2) {
		var frame = extend$2({}, object$2);
		frame._parent = object$2;
		return frame;
	}
	function blockParams(params, ids) {
		params.path = ids;
		return params;
	}
	function appendContextPath(contextPath, id$4) {
		return (contextPath ? contextPath + "." : "") + id$4;
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/exception.js
var require_exception = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/exception.js"(exports, module) {
	exports.__esModule = true;
	var errorProps = [
		"description",
		"fileName",
		"lineNumber",
		"endLineNumber",
		"message",
		"name",
		"number",
		"stack"
	];
	function Exception(message, node) {
		var loc = node && node.loc, line = void 0, endLineNumber = void 0, column = void 0, endColumn = void 0;
		if (loc) {
			line = loc.start.line;
			endLineNumber = loc.end.line;
			column = loc.start.column;
			endColumn = loc.end.column;
			message += " - " + line + ":" + column;
		}
		var tmp = Error.prototype.constructor.call(this, message);
		for (var idx = 0; idx < errorProps.length; idx++) this[errorProps[idx]] = tmp[errorProps[idx]];
		/* istanbul ignore else */
		if (Error.captureStackTrace) Error.captureStackTrace(this, Exception);
		try {
			if (loc) {
				this.lineNumber = line;
				this.endLineNumber = endLineNumber;
				/* istanbul ignore next */
				if (Object.defineProperty) {
					Object.defineProperty(this, "column", {
						value: column,
						enumerable: true
					});
					Object.defineProperty(this, "endColumn", {
						value: endColumn,
						enumerable: true
					});
				} else {
					this.column = column;
					this.endColumn = endColumn;
				}
			}
		} catch (nop) {}
	}
	Exception.prototype = new Error();
	exports["default"] = Exception;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js
var require_block_helper_missing = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js"(exports, module) {
	exports.__esModule = true;
	var _utils$20 = require_utils$2();
	exports["default"] = function(instance) {
		instance.registerHelper("blockHelperMissing", function(context, options) {
			var inverse = options.inverse, fn = options.fn;
			if (context === true) return fn(this);
			else if (context === false || context == null) return inverse(this);
			else if (_utils$20.isArray(context)) if (context.length > 0) {
				if (options.ids) options.ids = [options.name];
				return instance.helpers.each(context, options);
			} else return inverse(this);
			else {
				if (options.data && options.ids) {
					var data$2 = _utils$20.createFrame(options.data);
					data$2.contextPath = _utils$20.appendContextPath(options.data.contextPath, options.name);
					options = { data: data$2 };
				}
				return fn(context, options);
			}
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/each.js
var require_each = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/each.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$60(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _utils$19 = require_utils$2();
	var _exception$9 = require_exception();
	var _exception2$9 = _interopRequireDefault$60(_exception$9);
	exports["default"] = function(instance) {
		instance.registerHelper("each", function(context, options) {
			if (!options) throw new _exception2$9["default"]("Must pass iterator to #each");
			var fn = options.fn, inverse = options.inverse, i$6 = 0, ret$1 = "", data$2 = void 0, contextPath = void 0;
			if (options.data && options.ids) contextPath = _utils$19.appendContextPath(options.data.contextPath, options.ids[0]) + ".";
			if (_utils$19.isFunction(context)) context = context.call(this);
			if (options.data) data$2 = _utils$19.createFrame(options.data);
			function execIteration(field, index$1, last$2) {
				if (data$2) {
					data$2.key = field;
					data$2.index = index$1;
					data$2.first = index$1 === 0;
					data$2.last = !!last$2;
					if (contextPath) data$2.contextPath = contextPath + field;
				}
				ret$1 = ret$1 + fn(context[field], {
					data: data$2,
					blockParams: _utils$19.blockParams([context[field], field], [contextPath + field, null])
				});
			}
			if (context && typeof context === "object") if (_utils$19.isArray(context)) {
				for (var j$1 = context.length; i$6 < j$1; i$6++) if (i$6 in context) execIteration(i$6, i$6, i$6 === context.length - 1);
			} else if (typeof Symbol === "function" && context[Symbol.iterator]) {
				var newContext = [];
				var iterator = context[Symbol.iterator]();
				for (var it = iterator.next(); !it.done; it = iterator.next()) newContext.push(it.value);
				context = newContext;
				for (var j$1 = context.length; i$6 < j$1; i$6++) execIteration(i$6, i$6, i$6 === context.length - 1);
			} else (function() {
				var priorKey = void 0;
				Object.keys(context).forEach(function(key) {
					if (priorKey !== void 0) execIteration(priorKey, i$6 - 1);
					priorKey = key;
					i$6++;
				});
				if (priorKey !== void 0) execIteration(priorKey, i$6 - 1, true);
			})();
			if (i$6 === 0) ret$1 = inverse(this);
			return ret$1;
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js
var require_helper_missing = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$59(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _exception$8 = require_exception();
	var _exception2$8 = _interopRequireDefault$59(_exception$8);
	exports["default"] = function(instance) {
		instance.registerHelper("helperMissing", function() {
			if (arguments.length === 1) return void 0;
			else throw new _exception2$8["default"]("Missing helper: \"" + arguments[arguments.length - 1].name + "\"");
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/if.js
var require_if = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/if.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$58(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _utils$18 = require_utils$2();
	var _exception$7 = require_exception();
	var _exception2$7 = _interopRequireDefault$58(_exception$7);
	exports["default"] = function(instance) {
		instance.registerHelper("if", function(conditional, options) {
			if (arguments.length != 2) throw new _exception2$7["default"]("#if requires exactly one argument");
			if (_utils$18.isFunction(conditional)) conditional = conditional.call(this);
			if (!options.hash.includeZero && !conditional || _utils$18.isEmpty(conditional)) return options.inverse(this);
			else return options.fn(this);
		});
		instance.registerHelper("unless", function(conditional, options) {
			if (arguments.length != 2) throw new _exception2$7["default"]("#unless requires exactly one argument");
			return instance.helpers["if"].call(this, conditional, {
				fn: options.inverse,
				inverse: options.fn,
				hash: options.hash
			});
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/log.js
var require_log = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/log.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = function(instance) {
		instance.registerHelper("log", function() {
			var args = [void 0], options = arguments[arguments.length - 1];
			for (var i$6 = 0; i$6 < arguments.length - 1; i$6++) args.push(arguments[i$6]);
			var level$1 = 1;
			if (options.hash.level != null) level$1 = options.hash.level;
			else if (options.data && options.data.level != null) level$1 = options.data.level;
			args[0] = level$1;
			instance.log.apply(instance, args);
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js
var require_lookup = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = function(instance) {
		instance.registerHelper("lookup", function(obj, field, options) {
			if (!obj) return obj;
			return options.lookupProperty(obj, field);
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers/with.js
var require_with = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers/with.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$57(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _utils$17 = require_utils$2();
	var _exception$6 = require_exception();
	var _exception2$6 = _interopRequireDefault$57(_exception$6);
	exports["default"] = function(instance) {
		instance.registerHelper("with", function(context, options) {
			if (arguments.length != 2) throw new _exception2$6["default"]("#with requires exactly one argument");
			if (_utils$17.isFunction(context)) context = context.call(this);
			var fn = options.fn;
			if (!_utils$17.isEmpty(context)) {
				var data$2 = options.data;
				if (options.data && options.ids) {
					data$2 = _utils$17.createFrame(options.data);
					data$2.contextPath = _utils$17.appendContextPath(options.data.contextPath, options.ids[0]);
				}
				return fn(context, {
					data: data$2,
					blockParams: _utils$17.blockParams([context], [data$2 && data$2.contextPath])
				});
			} else return options.inverse(this);
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/helpers.js
var require_helpers$2 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/helpers.js"(exports) {
	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	exports.moveHelperToHooks = moveHelperToHooks;
	// istanbul ignore next
	function _interopRequireDefault$56(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _helpersBlockHelperMissing = require_block_helper_missing();
	var _helpersBlockHelperMissing2 = _interopRequireDefault$56(_helpersBlockHelperMissing);
	var _helpersEach = require_each();
	var _helpersEach2 = _interopRequireDefault$56(_helpersEach);
	var _helpersHelperMissing = require_helper_missing();
	var _helpersHelperMissing2 = _interopRequireDefault$56(_helpersHelperMissing);
	var _helpersIf = require_if();
	var _helpersIf2 = _interopRequireDefault$56(_helpersIf);
	var _helpersLog = require_log();
	var _helpersLog2 = _interopRequireDefault$56(_helpersLog);
	var _helpersLookup = require_lookup();
	var _helpersLookup2 = _interopRequireDefault$56(_helpersLookup);
	var _helpersWith = require_with();
	var _helpersWith2 = _interopRequireDefault$56(_helpersWith);
	function registerDefaultHelpers(instance) {
		_helpersBlockHelperMissing2["default"](instance);
		_helpersEach2["default"](instance);
		_helpersHelperMissing2["default"](instance);
		_helpersIf2["default"](instance);
		_helpersLog2["default"](instance);
		_helpersLookup2["default"](instance);
		_helpersWith2["default"](instance);
	}
	function moveHelperToHooks(instance, helperName, keepHelper) {
		if (instance.helpers[helperName]) {
			instance.hooks[helperName] = instance.helpers[helperName];
			if (!keepHelper) delete instance.helpers[helperName];
		}
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js
var require_inline = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js"(exports, module) {
	exports.__esModule = true;
	var _utils$16 = require_utils$2();
	exports["default"] = function(instance) {
		instance.registerDecorator("inline", function(fn, props, container, options) {
			var ret$1 = fn;
			if (!props.partials) {
				props.partials = {};
				ret$1 = function(context, options$1) {
					var original = container.partials;
					container.partials = _utils$16.extend({}, original, props.partials);
					var ret$2 = fn(context, options$1);
					container.partials = original;
					return ret$2;
				};
			}
			props.partials[options.args[0]] = options.fn;
			return ret$1;
		});
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/decorators.js
var require_decorators = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/decorators.js"(exports) {
	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;
	// istanbul ignore next
	function _interopRequireDefault$55(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _decoratorsInline = require_inline();
	var _decoratorsInline2 = _interopRequireDefault$55(_decoratorsInline);
	function registerDefaultDecorators(instance) {
		_decoratorsInline2["default"](instance);
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/logger.js
var require_logger = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/logger.js"(exports, module) {
	exports.__esModule = true;
	var _utils$15 = require_utils$2();
	var logger = {
		methodMap: [
			"debug",
			"info",
			"warn",
			"error"
		],
		level: "info",
		lookupLevel: function lookupLevel(level$1) {
			if (typeof level$1 === "string") {
				var levelMap = _utils$15.indexOf(logger.methodMap, level$1.toLowerCase());
				if (levelMap >= 0) level$1 = levelMap;
				else level$1 = parseInt(level$1, 10);
			}
			return level$1;
		},
		log: function log$2(level$1) {
			level$1 = logger.lookupLevel(level$1);
			if (typeof console !== "undefined" && logger.lookupLevel(logger.level) <= level$1) {
				var method = logger.methodMap[level$1];
				if (!console[method]) method = "log";
				for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) message[_key - 1] = arguments[_key];
				console[method].apply(console, message);
			}
		}
	};
	exports["default"] = logger;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js
var require_create_new_lookup_object = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/internal/create-new-lookup-object.js"(exports) {
	exports.__esModule = true;
	exports.createNewLookupObject = createNewLookupObject;
	var _utils$14 = require_utils$2();
	/**
	* Create a new object with "null"-prototype to avoid truthy results on prototype properties.
	* The resulting object can be used with "object[property]" to check if a property exists
	* @param {...object} sources a varargs parameter of source objects that will be merged
	* @returns {object}
	*/
	function createNewLookupObject() {
		for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) sources[_key] = arguments[_key];
		return _utils$14.extend.apply(void 0, [Object.create(null)].concat(sources));
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js
var require_proto_access = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/internal/proto-access.js"(exports) {
	exports.__esModule = true;
	exports.createProtoAccessControl = createProtoAccessControl;
	exports.resultIsAllowed = resultIsAllowed;
	exports.resetLoggedProperties = resetLoggedProperties;
	// istanbul ignore next
	function _interopRequireDefault$54(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _createNewLookupObject = require_create_new_lookup_object();
	var _logger$1 = require_logger();
	var _logger2$1 = _interopRequireDefault$54(_logger$1);
	var loggedProperties = Object.create(null);
	function createProtoAccessControl(runtimeOptions) {
		var defaultMethodWhiteList = Object.create(null);
		defaultMethodWhiteList["constructor"] = false;
		defaultMethodWhiteList["__defineGetter__"] = false;
		defaultMethodWhiteList["__defineSetter__"] = false;
		defaultMethodWhiteList["__lookupGetter__"] = false;
		var defaultPropertyWhiteList = Object.create(null);
		defaultPropertyWhiteList["__proto__"] = false;
		return {
			properties: {
				whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
				defaultValue: runtimeOptions.allowProtoPropertiesByDefault
			},
			methods: {
				whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
				defaultValue: runtimeOptions.allowProtoMethodsByDefault
			}
		};
	}
	function resultIsAllowed(result, protoAccessControl, propertyName) {
		if (typeof result === "function") return checkWhiteList(protoAccessControl.methods, propertyName);
		else return checkWhiteList(protoAccessControl.properties, propertyName);
	}
	function checkWhiteList(protoAccessControlForType, propertyName) {
		if (protoAccessControlForType.whitelist[propertyName] !== void 0) return protoAccessControlForType.whitelist[propertyName] === true;
		if (protoAccessControlForType.defaultValue !== void 0) return protoAccessControlForType.defaultValue;
		logUnexpecedPropertyAccessOnce(propertyName);
		return false;
	}
	function logUnexpecedPropertyAccessOnce(propertyName) {
		if (loggedProperties[propertyName] !== true) {
			loggedProperties[propertyName] = true;
			_logger2$1["default"].log("error", "Handlebars: Access has been denied to resolve the property \"" + propertyName + "\" because it is not an \"own property\" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details");
		}
	}
	function resetLoggedProperties() {
		Object.keys(loggedProperties).forEach(function(propertyName) {
			delete loggedProperties[propertyName];
		});
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/base.js
var require_base$2 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/base.js"(exports) {
	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;
	// istanbul ignore next
	function _interopRequireDefault$53(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _utils$13 = require_utils$2();
	var _exception$5 = require_exception();
	var _exception2$5 = _interopRequireDefault$53(_exception$5);
	var _helpers$2 = require_helpers$2();
	var _decorators = require_decorators();
	var _logger = require_logger();
	var _logger2 = _interopRequireDefault$53(_logger);
	var _internalProtoAccess$1 = require_proto_access();
	var VERSION = "4.7.8";
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 8;
	exports.COMPILER_REVISION = COMPILER_REVISION;
	var LAST_COMPATIBLE_COMPILER_REVISION = 7;
	exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
	var REVISION_CHANGES = {
		1: "<= 1.0.rc.2",
		2: "== 1.0.0-rc.3",
		3: "== 1.0.0-rc.4",
		4: "== 1.x.x",
		5: "== 2.0.0-alpha.x",
		6: ">= 2.0.0-beta.1",
		7: ">= 4.0.0 <4.3.0",
		8: ">= 4.3.0"
	};
	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = "[object Object]";
	function HandlebarsEnvironment(helpers, partials, decorators) {
		this.helpers = helpers || {};
		this.partials = partials || {};
		this.decorators = decorators || {};
		_helpers$2.registerDefaultHelpers(this);
		_decorators.registerDefaultDecorators(this);
	}
	HandlebarsEnvironment.prototype = {
		constructor: HandlebarsEnvironment,
		logger: _logger2["default"],
		log: _logger2["default"].log,
		registerHelper: function registerHelper(name, fn) {
			if (_utils$13.toString.call(name) === objectType) {
				if (fn) throw new _exception2$5["default"]("Arg not supported with multiple helpers");
				_utils$13.extend(this.helpers, name);
			} else this.helpers[name] = fn;
		},
		unregisterHelper: function unregisterHelper(name) {
			delete this.helpers[name];
		},
		registerPartial: function registerPartial(name, partial) {
			if (_utils$13.toString.call(name) === objectType) _utils$13.extend(this.partials, name);
			else {
				if (typeof partial === "undefined") throw new _exception2$5["default"]("Attempting to register a partial called \"" + name + "\" as undefined");
				this.partials[name] = partial;
			}
		},
		unregisterPartial: function unregisterPartial(name) {
			delete this.partials[name];
		},
		registerDecorator: function registerDecorator(name, fn) {
			if (_utils$13.toString.call(name) === objectType) {
				if (fn) throw new _exception2$5["default"]("Arg not supported with multiple decorators");
				_utils$13.extend(this.decorators, name);
			} else this.decorators[name] = fn;
		},
		unregisterDecorator: function unregisterDecorator(name) {
			delete this.decorators[name];
		},
		resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
			_internalProtoAccess$1.resetLoggedProperties();
		}
	};
	var log$1 = _logger2["default"].log;
	exports.log = log$1;
	exports.createFrame = _utils$13.createFrame;
	exports.logger = _logger2["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/safe-string.js
var require_safe_string = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/safe-string.js"(exports, module) {
	exports.__esModule = true;
	function SafeString(string$3) {
		this.string = string$3;
	}
	SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
		return "" + this.string;
	};
	exports["default"] = SafeString;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js
var require_wrapHelper = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/internal/wrapHelper.js"(exports) {
	exports.__esModule = true;
	exports.wrapHelper = wrapHelper;
	function wrapHelper(helper, transformOptionsFn) {
		if (typeof helper !== "function") return helper;
		var wrapper = function wrapper$1() {
			var options = arguments[arguments.length - 1];
			arguments[arguments.length - 1] = transformOptionsFn(options);
			return helper.apply(this, arguments);
		};
		return wrapper;
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/runtime.js
var require_runtime = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/runtime.js"(exports) {
	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop$1;
	// istanbul ignore next
	function _interopRequireDefault$52(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	// istanbul ignore next
	function _interopRequireWildcard$10(obj) {
		if (obj && obj.__esModule) return obj;
		else {
			var newObj = {};
			if (obj != null) {
				for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
			}
			newObj["default"] = obj;
			return newObj;
		}
	}
	var _utils$12 = require_utils$2();
	var Utils$1 = _interopRequireWildcard$10(_utils$12);
	var _exception$4 = require_exception();
	var _exception2$4 = _interopRequireDefault$52(_exception$4);
	var _base$2 = require_base$2();
	var _helpers$1 = require_helpers$2();
	var _internalWrapHelper = require_wrapHelper();
	var _internalProtoAccess = require_proto_access();
	function checkRevision(compilerInfo) {
		var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base$2.COMPILER_REVISION;
		if (compilerRevision >= _base$2.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base$2.COMPILER_REVISION) return;
		if (compilerRevision < _base$2.LAST_COMPATIBLE_COMPILER_REVISION) {
			var runtimeVersions = _base$2.REVISION_CHANGES[currentRevision], compilerVersions = _base$2.REVISION_CHANGES[compilerRevision];
			throw new _exception2$4["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
		} else throw new _exception2$4["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
	}
	function template(templateSpec, env$3) {
		/* istanbul ignore next */
		if (!env$3) throw new _exception2$4["default"]("No environment passed to template");
		if (!templateSpec || !templateSpec.main) throw new _exception2$4["default"]("Unknown template object: " + typeof templateSpec);
		templateSpec.main.decorator = templateSpec.main_d;
		env$3.VM.checkRevision(templateSpec.compiler);
		var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;
		function invokePartialWrapper(partial, context, options) {
			if (options.hash) {
				context = Utils$1.extend({}, context, options.hash);
				if (options.ids) options.ids[0] = true;
			}
			partial = env$3.VM.resolvePartial.call(this, partial, context, options);
			var extendedOptions = Utils$1.extend({}, options, {
				hooks: this.hooks,
				protoAccessControl: this.protoAccessControl
			});
			var result = env$3.VM.invokePartial.call(this, partial, context, extendedOptions);
			if (result == null && env$3.compile) {
				options.partials[options.name] = env$3.compile(partial, templateSpec.compilerOptions, env$3);
				result = options.partials[options.name](context, extendedOptions);
			}
			if (result != null) {
				if (options.indent) {
					var lines = result.split("\n");
					for (var i$6 = 0, l$1 = lines.length; i$6 < l$1; i$6++) {
						if (!lines[i$6] && i$6 + 1 === l$1) break;
						lines[i$6] = options.indent + lines[i$6];
					}
					result = lines.join("\n");
				}
				return result;
			} else throw new _exception2$4["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode");
		}
		var container = {
			strict: function strict(obj, name, loc) {
				if (!obj || !(name in obj)) throw new _exception2$4["default"]("\"" + name + "\" not defined in " + obj, { loc });
				return container.lookupProperty(obj, name);
			},
			lookupProperty: function lookupProperty(parent, propertyName) {
				var result = parent[propertyName];
				if (result == null) return result;
				if (Object.prototype.hasOwnProperty.call(parent, propertyName)) return result;
				if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) return result;
				return void 0;
			},
			lookup: function lookup(depths, name) {
				var len = depths.length;
				for (var i$6 = 0; i$6 < len; i$6++) {
					var result = depths[i$6] && container.lookupProperty(depths[i$6], name);
					if (result != null) return depths[i$6][name];
				}
			},
			lambda: function lambda(current, context) {
				return typeof current === "function" ? current.call(context) : current;
			},
			escapeExpression: Utils$1.escapeExpression,
			invokePartial: invokePartialWrapper,
			fn: function fn(i$6) {
				var ret$2 = templateSpec[i$6];
				ret$2.decorator = templateSpec[i$6 + "_d"];
				return ret$2;
			},
			programs: [],
			program: function program$3(i$6, data$2, declaredBlockParams, blockParams$1, depths) {
				var programWrapper = this.programs[i$6], fn = this.fn(i$6);
				if (data$2 || depths || blockParams$1 || declaredBlockParams) programWrapper = wrapProgram(this, i$6, fn, data$2, declaredBlockParams, blockParams$1, depths);
				else if (!programWrapper) programWrapper = this.programs[i$6] = wrapProgram(this, i$6, fn);
				return programWrapper;
			},
			data: function data$2(value, depth$1) {
				while (value && depth$1--) value = value._parent;
				return value;
			},
			mergeIfNeeded: function mergeIfNeeded(param, common$2) {
				var obj = param || common$2;
				if (param && common$2 && param !== common$2) obj = Utils$1.extend({}, common$2, param);
				return obj;
			},
			nullContext: Object.seal({}),
			noop: env$3.VM.noop,
			compilerInfo: templateSpec.compiler
		};
		function ret$1(context) {
			var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
			var data$2 = options.data;
			ret$1._setup(options);
			if (!options.partial && templateSpec.useData) data$2 = initData(context, data$2);
			var depths = void 0, blockParams$1 = templateSpec.useBlockParams ? [] : void 0;
			if (templateSpec.useDepths) if (options.depths) depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
			else depths = [context];
			function main(context$1) {
				return "" + templateSpec.main(container, context$1, container.helpers, container.partials, data$2, blockParams$1, depths);
			}
			main = executeDecorators(templateSpec.main, main, container, options.depths || [], data$2, blockParams$1);
			return main(context, options);
		}
		ret$1.isTop = true;
		ret$1._setup = function(options) {
			if (!options.partial) {
				var mergedHelpers = Utils$1.extend({}, env$3.helpers, options.helpers);
				wrapHelpersToPassLookupProperty(mergedHelpers, container);
				container.helpers = mergedHelpers;
				if (templateSpec.usePartial) container.partials = container.mergeIfNeeded(options.partials, env$3.partials);
				if (templateSpec.usePartial || templateSpec.useDecorators) container.decorators = Utils$1.extend({}, env$3.decorators, options.decorators);
				container.hooks = {};
				container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);
				var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
				_helpers$1.moveHelperToHooks(container, "helperMissing", keepHelperInHelpers);
				_helpers$1.moveHelperToHooks(container, "blockHelperMissing", keepHelperInHelpers);
			} else {
				container.protoAccessControl = options.protoAccessControl;
				container.helpers = options.helpers;
				container.partials = options.partials;
				container.decorators = options.decorators;
				container.hooks = options.hooks;
			}
		};
		ret$1._child = function(i$6, data$2, blockParams$1, depths) {
			if (templateSpec.useBlockParams && !blockParams$1) throw new _exception2$4["default"]("must pass block params");
			if (templateSpec.useDepths && !depths) throw new _exception2$4["default"]("must pass parent depths");
			return wrapProgram(container, i$6, templateSpec[i$6], data$2, 0, blockParams$1, depths);
		};
		return ret$1;
	}
	function wrapProgram(container, i$6, fn, data$2, declaredBlockParams, blockParams$1, depths) {
		function prog(context) {
			var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
			var currentDepths = depths;
			if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) currentDepths = [context].concat(depths);
			return fn(container, context, container.helpers, container.partials, options.data || data$2, blockParams$1 && [options.blockParams].concat(blockParams$1), currentDepths);
		}
		prog = executeDecorators(fn, prog, container, depths, data$2, blockParams$1);
		prog.program = i$6;
		prog.depth = depths ? depths.length : 0;
		prog.blockParams = declaredBlockParams || 0;
		return prog;
	}
	/**
	* This is currently part of the official API, therefore implementation details should not be changed.
	*/
	function resolvePartial(partial, context, options) {
		if (!partial) if (options.name === "@partial-block") partial = options.data["partial-block"];
		else partial = options.partials[options.name];
		else if (!partial.call && !options.name) {
			options.name = partial;
			partial = options.partials[partial];
		}
		return partial;
	}
	function invokePartial(partial, context, options) {
		var currentPartialBlock = options.data && options.data["partial-block"];
		options.partial = true;
		if (options.ids) options.data.contextPath = options.ids[0] || options.data.contextPath;
		var partialBlock = void 0;
		if (options.fn && options.fn !== noop$1) (function() {
			options.data = _base$2.createFrame(options.data);
			var fn = options.fn;
			partialBlock = options.data["partial-block"] = function partialBlockWrapper(context$1) {
				var options$1 = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
				options$1.data = _base$2.createFrame(options$1.data);
				options$1.data["partial-block"] = currentPartialBlock;
				return fn(context$1, options$1);
			};
			if (fn.partials) options.partials = Utils$1.extend({}, options.partials, fn.partials);
		})();
		if (partial === void 0 && partialBlock) partial = partialBlock;
		if (partial === void 0) throw new _exception2$4["default"]("The partial " + options.name + " could not be found");
		else if (partial instanceof Function) return partial(context, options);
	}
	function noop$1() {
		return "";
	}
	function initData(context, data$2) {
		if (!data$2 || !("root" in data$2)) {
			data$2 = data$2 ? _base$2.createFrame(data$2) : {};
			data$2.root = context;
		}
		return data$2;
	}
	function executeDecorators(fn, prog, container, depths, data$2, blockParams$1) {
		if (fn.decorator) {
			var props = {};
			prog = fn.decorator(prog, props, container, depths && depths[0], data$2, blockParams$1, depths);
			Utils$1.extend(prog, props);
		}
		return prog;
	}
	function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
		Object.keys(mergedHelpers).forEach(function(helperName) {
			var helper = mergedHelpers[helperName];
			mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
		});
	}
	function passLookupPropertyOption(helper, container) {
		var lookupProperty = container.lookupProperty;
		return _internalWrapHelper.wrapHelper(helper, function(options) {
			return Utils$1.extend({ lookupProperty }, options);
		});
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/no-conflict.js
var require_no_conflict = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/no-conflict.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = function(Handlebars) {
		/* istanbul ignore next */
		(function() {
			if (typeof globalThis === "object") return;
			Object.prototype.__defineGetter__("__magic__", function() {
				return this;
			});
			__magic__.globalThis = __magic__;
			delete Object.prototype.__magic__;
		})();
		var $Handlebars = globalThis.Handlebars;
		/* istanbul ignore next */
		Handlebars.noConflict = function() {
			if (globalThis.Handlebars === Handlebars) globalThis.Handlebars = $Handlebars;
			return Handlebars;
		};
	};
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars.runtime.js
var require_handlebars_runtime = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars.runtime.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$51(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	// istanbul ignore next
	function _interopRequireWildcard$9(obj) {
		if (obj && obj.__esModule) return obj;
		else {
			var newObj = {};
			if (obj != null) {
				for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
			}
			newObj["default"] = obj;
			return newObj;
		}
	}
	var _handlebarsBase = require_base$2();
	var base = _interopRequireWildcard$9(_handlebarsBase);
	var _handlebarsSafeString = require_safe_string();
	var _handlebarsSafeString2 = _interopRequireDefault$51(_handlebarsSafeString);
	var _handlebarsException = require_exception();
	var _handlebarsException2 = _interopRequireDefault$51(_handlebarsException);
	var _handlebarsUtils = require_utils$2();
	var Utils = _interopRequireWildcard$9(_handlebarsUtils);
	var _handlebarsRuntime$1 = require_runtime();
	var runtime = _interopRequireWildcard$9(_handlebarsRuntime$1);
	var _handlebarsNoConflict$1 = require_no_conflict();
	var _handlebarsNoConflict2$1 = _interopRequireDefault$51(_handlebarsNoConflict$1);
	function create$4() {
		var hb = new base.HandlebarsEnvironment();
		Utils.extend(hb, base);
		hb.SafeString = _handlebarsSafeString2["default"];
		hb.Exception = _handlebarsException2["default"];
		hb.Utils = Utils;
		hb.escapeExpression = Utils.escapeExpression;
		hb.VM = runtime;
		hb.template = function(spec) {
			return runtime.template(spec, hb);
		};
		return hb;
	}
	var inst$1 = create$4();
	inst$1.create = create$4;
	_handlebarsNoConflict2$1["default"](inst$1);
	inst$1["default"] = inst$1;
	exports["default"] = inst$1;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js
var require_ast = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/ast.js"(exports, module) {
	exports.__esModule = true;
	var AST = { helpers: {
		helperExpression: function helperExpression(node) {
			return node.type === "SubExpression" || (node.type === "MustacheStatement" || node.type === "BlockStatement") && !!(node.params && node.params.length || node.hash);
		},
		scopedId: function scopedId(path$28) {
			return /^\.|this\b/.test(path$28.original);
		},
		simpleId: function simpleId(path$28) {
			return path$28.parts.length === 1 && !AST.helpers.scopedId(path$28) && !path$28.depth;
		}
	} };
	exports["default"] = AST;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js
var require_parser$3 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/parser.js"(exports, module) {
	exports.__esModule = true;
	var handlebars$1 = function() {
		var parser$5 = {
			trace: function trace() {},
			yy: {},
			symbols_: {
				"error": 2,
				"root": 3,
				"program": 4,
				"EOF": 5,
				"program_repetition0": 6,
				"statement": 7,
				"mustache": 8,
				"block": 9,
				"rawBlock": 10,
				"partial": 11,
				"partialBlock": 12,
				"content": 13,
				"COMMENT": 14,
				"CONTENT": 15,
				"openRawBlock": 16,
				"rawBlock_repetition0": 17,
				"END_RAW_BLOCK": 18,
				"OPEN_RAW_BLOCK": 19,
				"helperName": 20,
				"openRawBlock_repetition0": 21,
				"openRawBlock_option0": 22,
				"CLOSE_RAW_BLOCK": 23,
				"openBlock": 24,
				"block_option0": 25,
				"closeBlock": 26,
				"openInverse": 27,
				"block_option1": 28,
				"OPEN_BLOCK": 29,
				"openBlock_repetition0": 30,
				"openBlock_option0": 31,
				"openBlock_option1": 32,
				"CLOSE": 33,
				"OPEN_INVERSE": 34,
				"openInverse_repetition0": 35,
				"openInverse_option0": 36,
				"openInverse_option1": 37,
				"openInverseChain": 38,
				"OPEN_INVERSE_CHAIN": 39,
				"openInverseChain_repetition0": 40,
				"openInverseChain_option0": 41,
				"openInverseChain_option1": 42,
				"inverseAndProgram": 43,
				"INVERSE": 44,
				"inverseChain": 45,
				"inverseChain_option0": 46,
				"OPEN_ENDBLOCK": 47,
				"OPEN": 48,
				"mustache_repetition0": 49,
				"mustache_option0": 50,
				"OPEN_UNESCAPED": 51,
				"mustache_repetition1": 52,
				"mustache_option1": 53,
				"CLOSE_UNESCAPED": 54,
				"OPEN_PARTIAL": 55,
				"partialName": 56,
				"partial_repetition0": 57,
				"partial_option0": 58,
				"openPartialBlock": 59,
				"OPEN_PARTIAL_BLOCK": 60,
				"openPartialBlock_repetition0": 61,
				"openPartialBlock_option0": 62,
				"param": 63,
				"sexpr": 64,
				"OPEN_SEXPR": 65,
				"sexpr_repetition0": 66,
				"sexpr_option0": 67,
				"CLOSE_SEXPR": 68,
				"hash": 69,
				"hash_repetition_plus0": 70,
				"hashSegment": 71,
				"ID": 72,
				"EQUALS": 73,
				"blockParams": 74,
				"OPEN_BLOCK_PARAMS": 75,
				"blockParams_repetition_plus0": 76,
				"CLOSE_BLOCK_PARAMS": 77,
				"path": 78,
				"dataName": 79,
				"STRING": 80,
				"NUMBER": 81,
				"BOOLEAN": 82,
				"UNDEFINED": 83,
				"NULL": 84,
				"DATA": 85,
				"pathSegments": 86,
				"SEP": 87,
				"$accept": 0,
				"$end": 1
			},
			terminals_: {
				2: "error",
				5: "EOF",
				14: "COMMENT",
				15: "CONTENT",
				18: "END_RAW_BLOCK",
				19: "OPEN_RAW_BLOCK",
				23: "CLOSE_RAW_BLOCK",
				29: "OPEN_BLOCK",
				33: "CLOSE",
				34: "OPEN_INVERSE",
				39: "OPEN_INVERSE_CHAIN",
				44: "INVERSE",
				47: "OPEN_ENDBLOCK",
				48: "OPEN",
				51: "OPEN_UNESCAPED",
				54: "CLOSE_UNESCAPED",
				55: "OPEN_PARTIAL",
				60: "OPEN_PARTIAL_BLOCK",
				65: "OPEN_SEXPR",
				68: "CLOSE_SEXPR",
				72: "ID",
				73: "EQUALS",
				75: "OPEN_BLOCK_PARAMS",
				77: "CLOSE_BLOCK_PARAMS",
				80: "STRING",
				81: "NUMBER",
				82: "BOOLEAN",
				83: "UNDEFINED",
				84: "NULL",
				85: "DATA",
				87: "SEP"
			},
			productions_: [
				0,
				[3, 2],
				[4, 1],
				[7, 1],
				[7, 1],
				[7, 1],
				[7, 1],
				[7, 1],
				[7, 1],
				[7, 1],
				[13, 1],
				[10, 3],
				[16, 5],
				[9, 4],
				[9, 4],
				[24, 6],
				[27, 6],
				[38, 6],
				[43, 2],
				[45, 3],
				[45, 1],
				[26, 3],
				[8, 5],
				[8, 5],
				[11, 5],
				[12, 3],
				[59, 5],
				[63, 1],
				[63, 1],
				[64, 5],
				[69, 1],
				[71, 3],
				[74, 3],
				[20, 1],
				[20, 1],
				[20, 1],
				[20, 1],
				[20, 1],
				[20, 1],
				[20, 1],
				[56, 1],
				[56, 1],
				[79, 2],
				[78, 1],
				[86, 3],
				[86, 1],
				[6, 0],
				[6, 2],
				[17, 0],
				[17, 2],
				[21, 0],
				[21, 2],
				[22, 0],
				[22, 1],
				[25, 0],
				[25, 1],
				[28, 0],
				[28, 1],
				[30, 0],
				[30, 2],
				[31, 0],
				[31, 1],
				[32, 0],
				[32, 1],
				[35, 0],
				[35, 2],
				[36, 0],
				[36, 1],
				[37, 0],
				[37, 1],
				[40, 0],
				[40, 2],
				[41, 0],
				[41, 1],
				[42, 0],
				[42, 1],
				[46, 0],
				[46, 1],
				[49, 0],
				[49, 2],
				[50, 0],
				[50, 1],
				[52, 0],
				[52, 2],
				[53, 0],
				[53, 1],
				[57, 0],
				[57, 2],
				[58, 0],
				[58, 1],
				[61, 0],
				[61, 2],
				[62, 0],
				[62, 1],
				[66, 0],
				[66, 2],
				[67, 0],
				[67, 1],
				[70, 1],
				[70, 2],
				[76, 1],
				[76, 2]
			],
			performAction: function anonymous(yytext, yyleng, yylineno, yy$1, yystate, $$, _$) {
				var $0 = $$.length - 1;
				switch (yystate) {
					case 1: return $$[$0 - 1];
					case 2:
						this.$ = yy$1.prepareProgram($$[$0]);
						break;
					case 3:
						this.$ = $$[$0];
						break;
					case 4:
						this.$ = $$[$0];
						break;
					case 5:
						this.$ = $$[$0];
						break;
					case 6:
						this.$ = $$[$0];
						break;
					case 7:
						this.$ = $$[$0];
						break;
					case 8:
						this.$ = $$[$0];
						break;
					case 9:
						this.$ = {
							type: "CommentStatement",
							value: yy$1.stripComment($$[$0]),
							strip: yy$1.stripFlags($$[$0], $$[$0]),
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 10:
						this.$ = {
							type: "ContentStatement",
							original: $$[$0],
							value: $$[$0],
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 11:
						this.$ = yy$1.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
						break;
					case 12:
						this.$ = {
							path: $$[$0 - 3],
							params: $$[$0 - 2],
							hash: $$[$0 - 1]
						};
						break;
					case 13:
						this.$ = yy$1.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
						break;
					case 14:
						this.$ = yy$1.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
						break;
					case 15:
						this.$ = {
							open: $$[$0 - 5],
							path: $$[$0 - 4],
							params: $$[$0 - 3],
							hash: $$[$0 - 2],
							blockParams: $$[$0 - 1],
							strip: yy$1.stripFlags($$[$0 - 5], $$[$0])
						};
						break;
					case 16:
						this.$ = {
							path: $$[$0 - 4],
							params: $$[$0 - 3],
							hash: $$[$0 - 2],
							blockParams: $$[$0 - 1],
							strip: yy$1.stripFlags($$[$0 - 5], $$[$0])
						};
						break;
					case 17:
						this.$ = {
							path: $$[$0 - 4],
							params: $$[$0 - 3],
							hash: $$[$0 - 2],
							blockParams: $$[$0 - 1],
							strip: yy$1.stripFlags($$[$0 - 5], $$[$0])
						};
						break;
					case 18:
						this.$ = {
							strip: yy$1.stripFlags($$[$0 - 1], $$[$0 - 1]),
							program: $$[$0]
						};
						break;
					case 19:
						var inverse = yy$1.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$), program$3 = yy$1.prepareProgram([inverse], $$[$0 - 1].loc);
						program$3.chained = true;
						this.$ = {
							strip: $$[$0 - 2].strip,
							program: program$3,
							chain: true
						};
						break;
					case 20:
						this.$ = $$[$0];
						break;
					case 21:
						this.$ = {
							path: $$[$0 - 1],
							strip: yy$1.stripFlags($$[$0 - 2], $$[$0])
						};
						break;
					case 22:
						this.$ = yy$1.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy$1.stripFlags($$[$0 - 4], $$[$0]), this._$);
						break;
					case 23:
						this.$ = yy$1.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy$1.stripFlags($$[$0 - 4], $$[$0]), this._$);
						break;
					case 24:
						this.$ = {
							type: "PartialStatement",
							name: $$[$0 - 3],
							params: $$[$0 - 2],
							hash: $$[$0 - 1],
							indent: "",
							strip: yy$1.stripFlags($$[$0 - 4], $$[$0]),
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 25:
						this.$ = yy$1.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
						break;
					case 26:
						this.$ = {
							path: $$[$0 - 3],
							params: $$[$0 - 2],
							hash: $$[$0 - 1],
							strip: yy$1.stripFlags($$[$0 - 4], $$[$0])
						};
						break;
					case 27:
						this.$ = $$[$0];
						break;
					case 28:
						this.$ = $$[$0];
						break;
					case 29:
						this.$ = {
							type: "SubExpression",
							path: $$[$0 - 3],
							params: $$[$0 - 2],
							hash: $$[$0 - 1],
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 30:
						this.$ = {
							type: "Hash",
							pairs: $$[$0],
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 31:
						this.$ = {
							type: "HashPair",
							key: yy$1.id($$[$0 - 2]),
							value: $$[$0],
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 32:
						this.$ = yy$1.id($$[$0 - 1]);
						break;
					case 33:
						this.$ = $$[$0];
						break;
					case 34:
						this.$ = $$[$0];
						break;
					case 35:
						this.$ = {
							type: "StringLiteral",
							value: $$[$0],
							original: $$[$0],
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 36:
						this.$ = {
							type: "NumberLiteral",
							value: Number($$[$0]),
							original: Number($$[$0]),
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 37:
						this.$ = {
							type: "BooleanLiteral",
							value: $$[$0] === "true",
							original: $$[$0] === "true",
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 38:
						this.$ = {
							type: "UndefinedLiteral",
							original: void 0,
							value: void 0,
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 39:
						this.$ = {
							type: "NullLiteral",
							original: null,
							value: null,
							loc: yy$1.locInfo(this._$)
						};
						break;
					case 40:
						this.$ = $$[$0];
						break;
					case 41:
						this.$ = $$[$0];
						break;
					case 42:
						this.$ = yy$1.preparePath(true, $$[$0], this._$);
						break;
					case 43:
						this.$ = yy$1.preparePath(false, $$[$0], this._$);
						break;
					case 44:
						$$[$0 - 2].push({
							part: yy$1.id($$[$0]),
							original: $$[$0],
							separator: $$[$0 - 1]
						});
						this.$ = $$[$0 - 2];
						break;
					case 45:
						this.$ = [{
							part: yy$1.id($$[$0]),
							original: $$[$0]
						}];
						break;
					case 46:
						this.$ = [];
						break;
					case 47:
						$$[$0 - 1].push($$[$0]);
						break;
					case 48:
						this.$ = [];
						break;
					case 49:
						$$[$0 - 1].push($$[$0]);
						break;
					case 50:
						this.$ = [];
						break;
					case 51:
						$$[$0 - 1].push($$[$0]);
						break;
					case 58:
						this.$ = [];
						break;
					case 59:
						$$[$0 - 1].push($$[$0]);
						break;
					case 64:
						this.$ = [];
						break;
					case 65:
						$$[$0 - 1].push($$[$0]);
						break;
					case 70:
						this.$ = [];
						break;
					case 71:
						$$[$0 - 1].push($$[$0]);
						break;
					case 78:
						this.$ = [];
						break;
					case 79:
						$$[$0 - 1].push($$[$0]);
						break;
					case 82:
						this.$ = [];
						break;
					case 83:
						$$[$0 - 1].push($$[$0]);
						break;
					case 86:
						this.$ = [];
						break;
					case 87:
						$$[$0 - 1].push($$[$0]);
						break;
					case 90:
						this.$ = [];
						break;
					case 91:
						$$[$0 - 1].push($$[$0]);
						break;
					case 94:
						this.$ = [];
						break;
					case 95:
						$$[$0 - 1].push($$[$0]);
						break;
					case 98:
						this.$ = [$$[$0]];
						break;
					case 99:
						$$[$0 - 1].push($$[$0]);
						break;
					case 100:
						this.$ = [$$[$0]];
						break;
					case 101:
						$$[$0 - 1].push($$[$0]);
						break;
				}
			},
			table: [
				{
					3: 1,
					4: 2,
					5: [2, 46],
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{ 1: [3] },
				{ 5: [1, 4] },
				{
					5: [2, 2],
					7: 5,
					8: 6,
					9: 7,
					10: 8,
					11: 9,
					12: 10,
					13: 11,
					14: [1, 12],
					15: [1, 20],
					16: 17,
					19: [1, 23],
					24: 15,
					27: 16,
					29: [1, 21],
					34: [1, 22],
					39: [2, 2],
					44: [2, 2],
					47: [2, 2],
					48: [1, 13],
					51: [1, 14],
					55: [1, 18],
					59: 19,
					60: [1, 24]
				},
				{ 1: [2, 1] },
				{
					5: [2, 47],
					14: [2, 47],
					15: [2, 47],
					19: [2, 47],
					29: [2, 47],
					34: [2, 47],
					39: [2, 47],
					44: [2, 47],
					47: [2, 47],
					48: [2, 47],
					51: [2, 47],
					55: [2, 47],
					60: [2, 47]
				},
				{
					5: [2, 3],
					14: [2, 3],
					15: [2, 3],
					19: [2, 3],
					29: [2, 3],
					34: [2, 3],
					39: [2, 3],
					44: [2, 3],
					47: [2, 3],
					48: [2, 3],
					51: [2, 3],
					55: [2, 3],
					60: [2, 3]
				},
				{
					5: [2, 4],
					14: [2, 4],
					15: [2, 4],
					19: [2, 4],
					29: [2, 4],
					34: [2, 4],
					39: [2, 4],
					44: [2, 4],
					47: [2, 4],
					48: [2, 4],
					51: [2, 4],
					55: [2, 4],
					60: [2, 4]
				},
				{
					5: [2, 5],
					14: [2, 5],
					15: [2, 5],
					19: [2, 5],
					29: [2, 5],
					34: [2, 5],
					39: [2, 5],
					44: [2, 5],
					47: [2, 5],
					48: [2, 5],
					51: [2, 5],
					55: [2, 5],
					60: [2, 5]
				},
				{
					5: [2, 6],
					14: [2, 6],
					15: [2, 6],
					19: [2, 6],
					29: [2, 6],
					34: [2, 6],
					39: [2, 6],
					44: [2, 6],
					47: [2, 6],
					48: [2, 6],
					51: [2, 6],
					55: [2, 6],
					60: [2, 6]
				},
				{
					5: [2, 7],
					14: [2, 7],
					15: [2, 7],
					19: [2, 7],
					29: [2, 7],
					34: [2, 7],
					39: [2, 7],
					44: [2, 7],
					47: [2, 7],
					48: [2, 7],
					51: [2, 7],
					55: [2, 7],
					60: [2, 7]
				},
				{
					5: [2, 8],
					14: [2, 8],
					15: [2, 8],
					19: [2, 8],
					29: [2, 8],
					34: [2, 8],
					39: [2, 8],
					44: [2, 8],
					47: [2, 8],
					48: [2, 8],
					51: [2, 8],
					55: [2, 8],
					60: [2, 8]
				},
				{
					5: [2, 9],
					14: [2, 9],
					15: [2, 9],
					19: [2, 9],
					29: [2, 9],
					34: [2, 9],
					39: [2, 9],
					44: [2, 9],
					47: [2, 9],
					48: [2, 9],
					51: [2, 9],
					55: [2, 9],
					60: [2, 9]
				},
				{
					20: 25,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 36,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					4: 37,
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					39: [2, 46],
					44: [2, 46],
					47: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{
					4: 38,
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					44: [2, 46],
					47: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{
					15: [2, 48],
					17: 39,
					18: [2, 48]
				},
				{
					20: 41,
					56: 40,
					64: 42,
					65: [1, 43],
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					4: 44,
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					47: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{
					5: [2, 10],
					14: [2, 10],
					15: [2, 10],
					18: [2, 10],
					19: [2, 10],
					29: [2, 10],
					34: [2, 10],
					39: [2, 10],
					44: [2, 10],
					47: [2, 10],
					48: [2, 10],
					51: [2, 10],
					55: [2, 10],
					60: [2, 10]
				},
				{
					20: 45,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 46,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 47,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 41,
					56: 48,
					64: 42,
					65: [1, 43],
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					33: [2, 78],
					49: 49,
					65: [2, 78],
					72: [2, 78],
					80: [2, 78],
					81: [2, 78],
					82: [2, 78],
					83: [2, 78],
					84: [2, 78],
					85: [2, 78]
				},
				{
					23: [2, 33],
					33: [2, 33],
					54: [2, 33],
					65: [2, 33],
					68: [2, 33],
					72: [2, 33],
					75: [2, 33],
					80: [2, 33],
					81: [2, 33],
					82: [2, 33],
					83: [2, 33],
					84: [2, 33],
					85: [2, 33]
				},
				{
					23: [2, 34],
					33: [2, 34],
					54: [2, 34],
					65: [2, 34],
					68: [2, 34],
					72: [2, 34],
					75: [2, 34],
					80: [2, 34],
					81: [2, 34],
					82: [2, 34],
					83: [2, 34],
					84: [2, 34],
					85: [2, 34]
				},
				{
					23: [2, 35],
					33: [2, 35],
					54: [2, 35],
					65: [2, 35],
					68: [2, 35],
					72: [2, 35],
					75: [2, 35],
					80: [2, 35],
					81: [2, 35],
					82: [2, 35],
					83: [2, 35],
					84: [2, 35],
					85: [2, 35]
				},
				{
					23: [2, 36],
					33: [2, 36],
					54: [2, 36],
					65: [2, 36],
					68: [2, 36],
					72: [2, 36],
					75: [2, 36],
					80: [2, 36],
					81: [2, 36],
					82: [2, 36],
					83: [2, 36],
					84: [2, 36],
					85: [2, 36]
				},
				{
					23: [2, 37],
					33: [2, 37],
					54: [2, 37],
					65: [2, 37],
					68: [2, 37],
					72: [2, 37],
					75: [2, 37],
					80: [2, 37],
					81: [2, 37],
					82: [2, 37],
					83: [2, 37],
					84: [2, 37],
					85: [2, 37]
				},
				{
					23: [2, 38],
					33: [2, 38],
					54: [2, 38],
					65: [2, 38],
					68: [2, 38],
					72: [2, 38],
					75: [2, 38],
					80: [2, 38],
					81: [2, 38],
					82: [2, 38],
					83: [2, 38],
					84: [2, 38],
					85: [2, 38]
				},
				{
					23: [2, 39],
					33: [2, 39],
					54: [2, 39],
					65: [2, 39],
					68: [2, 39],
					72: [2, 39],
					75: [2, 39],
					80: [2, 39],
					81: [2, 39],
					82: [2, 39],
					83: [2, 39],
					84: [2, 39],
					85: [2, 39]
				},
				{
					23: [2, 43],
					33: [2, 43],
					54: [2, 43],
					65: [2, 43],
					68: [2, 43],
					72: [2, 43],
					75: [2, 43],
					80: [2, 43],
					81: [2, 43],
					82: [2, 43],
					83: [2, 43],
					84: [2, 43],
					85: [2, 43],
					87: [1, 50]
				},
				{
					72: [1, 35],
					86: 51
				},
				{
					23: [2, 45],
					33: [2, 45],
					54: [2, 45],
					65: [2, 45],
					68: [2, 45],
					72: [2, 45],
					75: [2, 45],
					80: [2, 45],
					81: [2, 45],
					82: [2, 45],
					83: [2, 45],
					84: [2, 45],
					85: [2, 45],
					87: [2, 45]
				},
				{
					52: 52,
					54: [2, 82],
					65: [2, 82],
					72: [2, 82],
					80: [2, 82],
					81: [2, 82],
					82: [2, 82],
					83: [2, 82],
					84: [2, 82],
					85: [2, 82]
				},
				{
					25: 53,
					38: 55,
					39: [1, 57],
					43: 56,
					44: [1, 58],
					45: 54,
					47: [2, 54]
				},
				{
					28: 59,
					43: 60,
					44: [1, 58],
					47: [2, 56]
				},
				{
					13: 62,
					15: [1, 20],
					18: [1, 61]
				},
				{
					33: [2, 86],
					57: 63,
					65: [2, 86],
					72: [2, 86],
					80: [2, 86],
					81: [2, 86],
					82: [2, 86],
					83: [2, 86],
					84: [2, 86],
					85: [2, 86]
				},
				{
					33: [2, 40],
					65: [2, 40],
					72: [2, 40],
					80: [2, 40],
					81: [2, 40],
					82: [2, 40],
					83: [2, 40],
					84: [2, 40],
					85: [2, 40]
				},
				{
					33: [2, 41],
					65: [2, 41],
					72: [2, 41],
					80: [2, 41],
					81: [2, 41],
					82: [2, 41],
					83: [2, 41],
					84: [2, 41],
					85: [2, 41]
				},
				{
					20: 64,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					26: 65,
					47: [1, 66]
				},
				{
					30: 67,
					33: [2, 58],
					65: [2, 58],
					72: [2, 58],
					75: [2, 58],
					80: [2, 58],
					81: [2, 58],
					82: [2, 58],
					83: [2, 58],
					84: [2, 58],
					85: [2, 58]
				},
				{
					33: [2, 64],
					35: 68,
					65: [2, 64],
					72: [2, 64],
					75: [2, 64],
					80: [2, 64],
					81: [2, 64],
					82: [2, 64],
					83: [2, 64],
					84: [2, 64],
					85: [2, 64]
				},
				{
					21: 69,
					23: [2, 50],
					65: [2, 50],
					72: [2, 50],
					80: [2, 50],
					81: [2, 50],
					82: [2, 50],
					83: [2, 50],
					84: [2, 50],
					85: [2, 50]
				},
				{
					33: [2, 90],
					61: 70,
					65: [2, 90],
					72: [2, 90],
					80: [2, 90],
					81: [2, 90],
					82: [2, 90],
					83: [2, 90],
					84: [2, 90],
					85: [2, 90]
				},
				{
					20: 74,
					33: [2, 80],
					50: 71,
					63: 72,
					64: 75,
					65: [1, 43],
					69: 73,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{ 72: [1, 79] },
				{
					23: [2, 42],
					33: [2, 42],
					54: [2, 42],
					65: [2, 42],
					68: [2, 42],
					72: [2, 42],
					75: [2, 42],
					80: [2, 42],
					81: [2, 42],
					82: [2, 42],
					83: [2, 42],
					84: [2, 42],
					85: [2, 42],
					87: [1, 50]
				},
				{
					20: 74,
					53: 80,
					54: [2, 84],
					63: 81,
					64: 75,
					65: [1, 43],
					69: 82,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					26: 83,
					47: [1, 66]
				},
				{ 47: [2, 55] },
				{
					4: 84,
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					39: [2, 46],
					44: [2, 46],
					47: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{ 47: [2, 20] },
				{
					20: 85,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					4: 86,
					6: 3,
					14: [2, 46],
					15: [2, 46],
					19: [2, 46],
					29: [2, 46],
					34: [2, 46],
					47: [2, 46],
					48: [2, 46],
					51: [2, 46],
					55: [2, 46],
					60: [2, 46]
				},
				{
					26: 87,
					47: [1, 66]
				},
				{ 47: [2, 57] },
				{
					5: [2, 11],
					14: [2, 11],
					15: [2, 11],
					19: [2, 11],
					29: [2, 11],
					34: [2, 11],
					39: [2, 11],
					44: [2, 11],
					47: [2, 11],
					48: [2, 11],
					51: [2, 11],
					55: [2, 11],
					60: [2, 11]
				},
				{
					15: [2, 49],
					18: [2, 49]
				},
				{
					20: 74,
					33: [2, 88],
					58: 88,
					63: 89,
					64: 75,
					65: [1, 43],
					69: 90,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					65: [2, 94],
					66: 91,
					68: [2, 94],
					72: [2, 94],
					80: [2, 94],
					81: [2, 94],
					82: [2, 94],
					83: [2, 94],
					84: [2, 94],
					85: [2, 94]
				},
				{
					5: [2, 25],
					14: [2, 25],
					15: [2, 25],
					19: [2, 25],
					29: [2, 25],
					34: [2, 25],
					39: [2, 25],
					44: [2, 25],
					47: [2, 25],
					48: [2, 25],
					51: [2, 25],
					55: [2, 25],
					60: [2, 25]
				},
				{
					20: 92,
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 74,
					31: 93,
					33: [2, 60],
					63: 94,
					64: 75,
					65: [1, 43],
					69: 95,
					70: 76,
					71: 77,
					72: [1, 78],
					75: [2, 60],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 74,
					33: [2, 66],
					36: 96,
					63: 97,
					64: 75,
					65: [1, 43],
					69: 98,
					70: 76,
					71: 77,
					72: [1, 78],
					75: [2, 66],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 74,
					22: 99,
					23: [2, 52],
					63: 100,
					64: 75,
					65: [1, 43],
					69: 101,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					20: 74,
					33: [2, 92],
					62: 102,
					63: 103,
					64: 75,
					65: [1, 43],
					69: 104,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{ 33: [1, 105] },
				{
					33: [2, 79],
					65: [2, 79],
					72: [2, 79],
					80: [2, 79],
					81: [2, 79],
					82: [2, 79],
					83: [2, 79],
					84: [2, 79],
					85: [2, 79]
				},
				{ 33: [2, 81] },
				{
					23: [2, 27],
					33: [2, 27],
					54: [2, 27],
					65: [2, 27],
					68: [2, 27],
					72: [2, 27],
					75: [2, 27],
					80: [2, 27],
					81: [2, 27],
					82: [2, 27],
					83: [2, 27],
					84: [2, 27],
					85: [2, 27]
				},
				{
					23: [2, 28],
					33: [2, 28],
					54: [2, 28],
					65: [2, 28],
					68: [2, 28],
					72: [2, 28],
					75: [2, 28],
					80: [2, 28],
					81: [2, 28],
					82: [2, 28],
					83: [2, 28],
					84: [2, 28],
					85: [2, 28]
				},
				{
					23: [2, 30],
					33: [2, 30],
					54: [2, 30],
					68: [2, 30],
					71: 106,
					72: [1, 107],
					75: [2, 30]
				},
				{
					23: [2, 98],
					33: [2, 98],
					54: [2, 98],
					68: [2, 98],
					72: [2, 98],
					75: [2, 98]
				},
				{
					23: [2, 45],
					33: [2, 45],
					54: [2, 45],
					65: [2, 45],
					68: [2, 45],
					72: [2, 45],
					73: [1, 108],
					75: [2, 45],
					80: [2, 45],
					81: [2, 45],
					82: [2, 45],
					83: [2, 45],
					84: [2, 45],
					85: [2, 45],
					87: [2, 45]
				},
				{
					23: [2, 44],
					33: [2, 44],
					54: [2, 44],
					65: [2, 44],
					68: [2, 44],
					72: [2, 44],
					75: [2, 44],
					80: [2, 44],
					81: [2, 44],
					82: [2, 44],
					83: [2, 44],
					84: [2, 44],
					85: [2, 44],
					87: [2, 44]
				},
				{ 54: [1, 109] },
				{
					54: [2, 83],
					65: [2, 83],
					72: [2, 83],
					80: [2, 83],
					81: [2, 83],
					82: [2, 83],
					83: [2, 83],
					84: [2, 83],
					85: [2, 83]
				},
				{ 54: [2, 85] },
				{
					5: [2, 13],
					14: [2, 13],
					15: [2, 13],
					19: [2, 13],
					29: [2, 13],
					34: [2, 13],
					39: [2, 13],
					44: [2, 13],
					47: [2, 13],
					48: [2, 13],
					51: [2, 13],
					55: [2, 13],
					60: [2, 13]
				},
				{
					38: 55,
					39: [1, 57],
					43: 56,
					44: [1, 58],
					45: 111,
					46: 110,
					47: [2, 76]
				},
				{
					33: [2, 70],
					40: 112,
					65: [2, 70],
					72: [2, 70],
					75: [2, 70],
					80: [2, 70],
					81: [2, 70],
					82: [2, 70],
					83: [2, 70],
					84: [2, 70],
					85: [2, 70]
				},
				{ 47: [2, 18] },
				{
					5: [2, 14],
					14: [2, 14],
					15: [2, 14],
					19: [2, 14],
					29: [2, 14],
					34: [2, 14],
					39: [2, 14],
					44: [2, 14],
					47: [2, 14],
					48: [2, 14],
					51: [2, 14],
					55: [2, 14],
					60: [2, 14]
				},
				{ 33: [1, 113] },
				{
					33: [2, 87],
					65: [2, 87],
					72: [2, 87],
					80: [2, 87],
					81: [2, 87],
					82: [2, 87],
					83: [2, 87],
					84: [2, 87],
					85: [2, 87]
				},
				{ 33: [2, 89] },
				{
					20: 74,
					63: 115,
					64: 75,
					65: [1, 43],
					67: 114,
					68: [2, 96],
					69: 116,
					70: 76,
					71: 77,
					72: [1, 78],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{ 33: [1, 117] },
				{
					32: 118,
					33: [2, 62],
					74: 119,
					75: [1, 120]
				},
				{
					33: [2, 59],
					65: [2, 59],
					72: [2, 59],
					75: [2, 59],
					80: [2, 59],
					81: [2, 59],
					82: [2, 59],
					83: [2, 59],
					84: [2, 59],
					85: [2, 59]
				},
				{
					33: [2, 61],
					75: [2, 61]
				},
				{
					33: [2, 68],
					37: 121,
					74: 122,
					75: [1, 120]
				},
				{
					33: [2, 65],
					65: [2, 65],
					72: [2, 65],
					75: [2, 65],
					80: [2, 65],
					81: [2, 65],
					82: [2, 65],
					83: [2, 65],
					84: [2, 65],
					85: [2, 65]
				},
				{
					33: [2, 67],
					75: [2, 67]
				},
				{ 23: [1, 123] },
				{
					23: [2, 51],
					65: [2, 51],
					72: [2, 51],
					80: [2, 51],
					81: [2, 51],
					82: [2, 51],
					83: [2, 51],
					84: [2, 51],
					85: [2, 51]
				},
				{ 23: [2, 53] },
				{ 33: [1, 124] },
				{
					33: [2, 91],
					65: [2, 91],
					72: [2, 91],
					80: [2, 91],
					81: [2, 91],
					82: [2, 91],
					83: [2, 91],
					84: [2, 91],
					85: [2, 91]
				},
				{ 33: [2, 93] },
				{
					5: [2, 22],
					14: [2, 22],
					15: [2, 22],
					19: [2, 22],
					29: [2, 22],
					34: [2, 22],
					39: [2, 22],
					44: [2, 22],
					47: [2, 22],
					48: [2, 22],
					51: [2, 22],
					55: [2, 22],
					60: [2, 22]
				},
				{
					23: [2, 99],
					33: [2, 99],
					54: [2, 99],
					68: [2, 99],
					72: [2, 99],
					75: [2, 99]
				},
				{ 73: [1, 108] },
				{
					20: 74,
					63: 125,
					64: 75,
					65: [1, 43],
					72: [1, 35],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					5: [2, 23],
					14: [2, 23],
					15: [2, 23],
					19: [2, 23],
					29: [2, 23],
					34: [2, 23],
					39: [2, 23],
					44: [2, 23],
					47: [2, 23],
					48: [2, 23],
					51: [2, 23],
					55: [2, 23],
					60: [2, 23]
				},
				{ 47: [2, 19] },
				{ 47: [2, 77] },
				{
					20: 74,
					33: [2, 72],
					41: 126,
					63: 127,
					64: 75,
					65: [1, 43],
					69: 128,
					70: 76,
					71: 77,
					72: [1, 78],
					75: [2, 72],
					78: 26,
					79: 27,
					80: [1, 28],
					81: [1, 29],
					82: [1, 30],
					83: [1, 31],
					84: [1, 32],
					85: [1, 34],
					86: 33
				},
				{
					5: [2, 24],
					14: [2, 24],
					15: [2, 24],
					19: [2, 24],
					29: [2, 24],
					34: [2, 24],
					39: [2, 24],
					44: [2, 24],
					47: [2, 24],
					48: [2, 24],
					51: [2, 24],
					55: [2, 24],
					60: [2, 24]
				},
				{ 68: [1, 129] },
				{
					65: [2, 95],
					68: [2, 95],
					72: [2, 95],
					80: [2, 95],
					81: [2, 95],
					82: [2, 95],
					83: [2, 95],
					84: [2, 95],
					85: [2, 95]
				},
				{ 68: [2, 97] },
				{
					5: [2, 21],
					14: [2, 21],
					15: [2, 21],
					19: [2, 21],
					29: [2, 21],
					34: [2, 21],
					39: [2, 21],
					44: [2, 21],
					47: [2, 21],
					48: [2, 21],
					51: [2, 21],
					55: [2, 21],
					60: [2, 21]
				},
				{ 33: [1, 130] },
				{ 33: [2, 63] },
				{
					72: [1, 132],
					76: 131
				},
				{ 33: [1, 133] },
				{ 33: [2, 69] },
				{
					15: [2, 12],
					18: [2, 12]
				},
				{
					14: [2, 26],
					15: [2, 26],
					19: [2, 26],
					29: [2, 26],
					34: [2, 26],
					47: [2, 26],
					48: [2, 26],
					51: [2, 26],
					55: [2, 26],
					60: [2, 26]
				},
				{
					23: [2, 31],
					33: [2, 31],
					54: [2, 31],
					68: [2, 31],
					72: [2, 31],
					75: [2, 31]
				},
				{
					33: [2, 74],
					42: 134,
					74: 135,
					75: [1, 120]
				},
				{
					33: [2, 71],
					65: [2, 71],
					72: [2, 71],
					75: [2, 71],
					80: [2, 71],
					81: [2, 71],
					82: [2, 71],
					83: [2, 71],
					84: [2, 71],
					85: [2, 71]
				},
				{
					33: [2, 73],
					75: [2, 73]
				},
				{
					23: [2, 29],
					33: [2, 29],
					54: [2, 29],
					65: [2, 29],
					68: [2, 29],
					72: [2, 29],
					75: [2, 29],
					80: [2, 29],
					81: [2, 29],
					82: [2, 29],
					83: [2, 29],
					84: [2, 29],
					85: [2, 29]
				},
				{
					14: [2, 15],
					15: [2, 15],
					19: [2, 15],
					29: [2, 15],
					34: [2, 15],
					39: [2, 15],
					44: [2, 15],
					47: [2, 15],
					48: [2, 15],
					51: [2, 15],
					55: [2, 15],
					60: [2, 15]
				},
				{
					72: [1, 137],
					77: [1, 136]
				},
				{
					72: [2, 100],
					77: [2, 100]
				},
				{
					14: [2, 16],
					15: [2, 16],
					19: [2, 16],
					29: [2, 16],
					34: [2, 16],
					44: [2, 16],
					47: [2, 16],
					48: [2, 16],
					51: [2, 16],
					55: [2, 16],
					60: [2, 16]
				},
				{ 33: [1, 138] },
				{ 33: [2, 75] },
				{ 33: [2, 32] },
				{
					72: [2, 101],
					77: [2, 101]
				},
				{
					14: [2, 17],
					15: [2, 17],
					19: [2, 17],
					29: [2, 17],
					34: [2, 17],
					39: [2, 17],
					44: [2, 17],
					47: [2, 17],
					48: [2, 17],
					51: [2, 17],
					55: [2, 17],
					60: [2, 17]
				}
			],
			defaultActions: {
				4: [2, 1],
				54: [2, 55],
				56: [2, 20],
				60: [2, 57],
				73: [2, 81],
				82: [2, 85],
				86: [2, 18],
				90: [2, 89],
				101: [2, 53],
				104: [2, 93],
				110: [2, 19],
				111: [2, 77],
				116: [2, 97],
				119: [2, 63],
				122: [2, 69],
				135: [2, 75],
				136: [2, 32]
			},
			parseError: function parseError(str$4, hash$2) {
				throw new Error(str$4);
			},
			parse: function parse$17(input) {
				var self$1 = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
				this.lexer.setInput(input);
				this.lexer.yy = this.yy;
				this.yy.lexer = this.lexer;
				this.yy.parser = this;
				if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
				var yyloc = this.lexer.yylloc;
				lstack.push(yyloc);
				var ranges = this.lexer.options && this.lexer.options.ranges;
				if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
				function popStack(n$4) {
					stack.length = stack.length - 2 * n$4;
					vstack.length = vstack.length - n$4;
					lstack.length = lstack.length - n$4;
				}
				function lex() {
					var token$1;
					token$1 = self$1.lexer.lex() || 1;
					if (typeof token$1 !== "number") token$1 = self$1.symbols_[token$1] || token$1;
					return token$1;
				}
				var symbol, preErrorSymbol, state, action, a$1, r$2, yyval = {}, p$2, len, newState, expected;
				while (true) {
					state = stack[stack.length - 1];
					if (this.defaultActions[state]) action = this.defaultActions[state];
					else {
						if (symbol === null || typeof symbol == "undefined") symbol = lex();
						action = table[state] && table[state][symbol];
					}
					if (typeof action === "undefined" || !action.length || !action[0]) {
						var errStr = "";
						if (!recovering) {
							expected = [];
							for (p$2 in table[state]) if (this.terminals_[p$2] && p$2 > 2) expected.push("'" + this.terminals_[p$2] + "'");
							if (this.lexer.showPosition) errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
							else errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
							this.parseError(errStr, {
								text: this.lexer.match,
								token: this.terminals_[symbol] || symbol,
								line: this.lexer.yylineno,
								loc: yyloc,
								expected
							});
						}
					}
					if (action[0] instanceof Array && action.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
					switch (action[0]) {
						case 1:
							stack.push(symbol);
							vstack.push(this.lexer.yytext);
							lstack.push(this.lexer.yylloc);
							stack.push(action[1]);
							symbol = null;
							if (!preErrorSymbol) {
								yyleng = this.lexer.yyleng;
								yytext = this.lexer.yytext;
								yylineno = this.lexer.yylineno;
								yyloc = this.lexer.yylloc;
								if (recovering > 0) recovering--;
							} else {
								symbol = preErrorSymbol;
								preErrorSymbol = null;
							}
							break;
						case 2:
							len = this.productions_[action[1]][1];
							yyval.$ = vstack[vstack.length - len];
							yyval._$ = {
								first_line: lstack[lstack.length - (len || 1)].first_line,
								last_line: lstack[lstack.length - 1].last_line,
								first_column: lstack[lstack.length - (len || 1)].first_column,
								last_column: lstack[lstack.length - 1].last_column
							};
							if (ranges) yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
							r$2 = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
							if (typeof r$2 !== "undefined") return r$2;
							if (len) {
								stack = stack.slice(0, -1 * len * 2);
								vstack = vstack.slice(0, -1 * len);
								lstack = lstack.slice(0, -1 * len);
							}
							stack.push(this.productions_[action[1]][0]);
							vstack.push(yyval.$);
							lstack.push(yyval._$);
							newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
							stack.push(newState);
							break;
						case 3: return true;
					}
				}
				return true;
			}
		};
		var lexer = function() {
			var lexer$1 = {
				EOF: 1,
				parseError: function parseError(str$4, hash$2) {
					if (this.yy.parser) this.yy.parser.parseError(str$4, hash$2);
					else throw new Error(str$4);
				},
				setInput: function setInput(input) {
					this._input = input;
					this._more = this._less = this.done = false;
					this.yylineno = this.yyleng = 0;
					this.yytext = this.matched = this.match = "";
					this.conditionStack = ["INITIAL"];
					this.yylloc = {
						first_line: 1,
						first_column: 0,
						last_line: 1,
						last_column: 0
					};
					if (this.options.ranges) this.yylloc.range = [0, 0];
					this.offset = 0;
					return this;
				},
				input: function input() {
					var ch = this._input[0];
					this.yytext += ch;
					this.yyleng++;
					this.offset++;
					this.match += ch;
					this.matched += ch;
					var lines = ch.match(/(?:\r\n?|\n).*/g);
					if (lines) {
						this.yylineno++;
						this.yylloc.last_line++;
					} else this.yylloc.last_column++;
					if (this.options.ranges) this.yylloc.range[1]++;
					this._input = this._input.slice(1);
					return ch;
				},
				unput: function unput(ch) {
					var len = ch.length;
					var lines = ch.split(/(?:\r\n?|\n)/g);
					this._input = ch + this._input;
					this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
					this.offset -= len;
					var oldLines = this.match.split(/(?:\r\n?|\n)/g);
					this.match = this.match.substr(0, this.match.length - 1);
					this.matched = this.matched.substr(0, this.matched.length - 1);
					if (lines.length - 1) this.yylineno -= lines.length - 1;
					var r$2 = this.yylloc.range;
					this.yylloc = {
						first_line: this.yylloc.first_line,
						last_line: this.yylineno + 1,
						first_column: this.yylloc.first_column,
						last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
					};
					if (this.options.ranges) this.yylloc.range = [r$2[0], r$2[0] + this.yyleng - len];
					return this;
				},
				more: function more() {
					this._more = true;
					return this;
				},
				less: function less$1(n$4) {
					this.unput(this.match.slice(n$4));
				},
				pastInput: function pastInput() {
					var past = this.matched.substr(0, this.matched.length - this.match.length);
					return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
				},
				upcomingInput: function upcomingInput() {
					var next = this.match;
					if (next.length < 20) next += this._input.substr(0, 20 - next.length);
					return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
				},
				showPosition: function showPosition() {
					var pre = this.pastInput();
					var c$2 = new Array(pre.length + 1).join("-");
					return pre + this.upcomingInput() + "\n" + c$2 + "^";
				},
				next: function next() {
					if (this.done) return this.EOF;
					if (!this._input) this.done = true;
					var token$1, match, tempMatch, index$1, col, lines;
					if (!this._more) {
						this.yytext = "";
						this.match = "";
					}
					var rules = this._currentRules();
					for (var i$6 = 0; i$6 < rules.length; i$6++) {
						tempMatch = this._input.match(this.rules[rules[i$6]]);
						if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
							match = tempMatch;
							index$1 = i$6;
							if (!this.options.flex) break;
						}
					}
					if (match) {
						lines = match[0].match(/(?:\r\n?|\n).*/g);
						if (lines) this.yylineno += lines.length;
						this.yylloc = {
							first_line: this.yylloc.last_line,
							last_line: this.yylineno + 1,
							first_column: this.yylloc.last_column,
							last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
						};
						this.yytext += match[0];
						this.match += match[0];
						this.matches = match;
						this.yyleng = this.yytext.length;
						if (this.options.ranges) this.yylloc.range = [this.offset, this.offset += this.yyleng];
						this._more = false;
						this._input = this._input.slice(match[0].length);
						this.matched += match[0];
						token$1 = this.performAction.call(this, this.yy, this, rules[index$1], this.conditionStack[this.conditionStack.length - 1]);
						if (this.done && this._input) this.done = false;
						if (token$1) return token$1;
						else return;
					}
					if (this._input === "") return this.EOF;
					else return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
						text: "",
						token: null,
						line: this.yylineno
					});
				},
				lex: function lex() {
					var r$2 = this.next();
					if (typeof r$2 !== "undefined") return r$2;
					else return this.lex();
				},
				begin: function begin(condition) {
					this.conditionStack.push(condition);
				},
				popState: function popState() {
					return this.conditionStack.pop();
				},
				_currentRules: function _currentRules() {
					return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
				},
				topState: function topState() {
					return this.conditionStack[this.conditionStack.length - 2];
				},
				pushState: function begin(condition) {
					this.begin(condition);
				}
			};
			lexer$1.options = {};
			lexer$1.performAction = function anonymous(yy$1, yy_, $avoiding_name_collisions, YY_START) {
				function strip(start, end) {
					return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
				}
				var YYSTATE = YY_START;
				switch ($avoiding_name_collisions) {
					case 0:
						if (yy_.yytext.slice(-2) === "\\\\") {
							strip(0, 1);
							this.begin("mu");
						} else if (yy_.yytext.slice(-1) === "\\") {
							strip(0, 1);
							this.begin("emu");
						} else this.begin("mu");
						if (yy_.yytext) return 15;
						break;
					case 1: return 15;
					case 2:
						this.popState();
						return 15;
					case 3:
						this.begin("raw");
						return 15;
					case 4:
						this.popState();
						if (this.conditionStack[this.conditionStack.length - 1] === "raw") return 15;
						else {
							strip(5, 9);
							return "END_RAW_BLOCK";
						}
						break;
					case 5: return 15;
					case 6:
						this.popState();
						return 14;
					case 7: return 65;
					case 8: return 68;
					case 9: return 19;
					case 10:
						this.popState();
						this.begin("raw");
						return 23;
					case 11: return 55;
					case 12: return 60;
					case 13: return 29;
					case 14: return 47;
					case 15:
						this.popState();
						return 44;
					case 16:
						this.popState();
						return 44;
					case 17: return 34;
					case 18: return 39;
					case 19: return 51;
					case 20: return 48;
					case 21:
						this.unput(yy_.yytext);
						this.popState();
						this.begin("com");
						break;
					case 22:
						this.popState();
						return 14;
					case 23: return 48;
					case 24: return 73;
					case 25: return 72;
					case 26: return 72;
					case 27: return 87;
					case 28: break;
					case 29:
						this.popState();
						return 54;
					case 30:
						this.popState();
						return 33;
					case 31:
						yy_.yytext = strip(1, 2).replace(/\\"/g, "\"");
						return 80;
					case 32:
						yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
						return 80;
					case 33: return 85;
					case 34: return 82;
					case 35: return 82;
					case 36: return 83;
					case 37: return 84;
					case 38: return 81;
					case 39: return 75;
					case 40: return 77;
					case 41: return 72;
					case 42:
						yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, "$1");
						return 72;
					case 43: return "INVALID";
					case 44: return 5;
				}
			};
			lexer$1.rules = [
				/^(?:[^\x00]*?(?=(\{\{)))/,
				/^(?:[^\x00]+)/,
				/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,
				/^(?:\{\{\{\{(?=[^/]))/,
				/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,
				/^(?:[^\x00]+?(?=(\{\{\{\{)))/,
				/^(?:[\s\S]*?--(~)?\}\})/,
				/^(?:\()/,
				/^(?:\))/,
				/^(?:\{\{\{\{)/,
				/^(?:\}\}\}\})/,
				/^(?:\{\{(~)?>)/,
				/^(?:\{\{(~)?#>)/,
				/^(?:\{\{(~)?#\*?)/,
				/^(?:\{\{(~)?\/)/,
				/^(?:\{\{(~)?\^\s*(~)?\}\})/,
				/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,
				/^(?:\{\{(~)?\^)/,
				/^(?:\{\{(~)?\s*else\b)/,
				/^(?:\{\{(~)?\{)/,
				/^(?:\{\{(~)?&)/,
				/^(?:\{\{(~)?!--)/,
				/^(?:\{\{(~)?![\s\S]*?\}\})/,
				/^(?:\{\{(~)?\*?)/,
				/^(?:=)/,
				/^(?:\.\.)/,
				/^(?:\.(?=([=~}\s\/.)|])))/,
				/^(?:[\/.])/,
				/^(?:\s+)/,
				/^(?:\}(~)?\}\})/,
				/^(?:(~)?\}\})/,
				/^(?:"(\\["]|[^"])*")/,
				/^(?:'(\\[']|[^'])*')/,
				/^(?:@)/,
				/^(?:true(?=([~}\s)])))/,
				/^(?:false(?=([~}\s)])))/,
				/^(?:undefined(?=([~}\s)])))/,
				/^(?:null(?=([~}\s)])))/,
				/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,
				/^(?:as\s+\|)/,
				/^(?:\|)/,
				/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,
				/^(?:\[(\\\]|[^\]])*\])/,
				/^(?:.)/,
				/^(?:$)/
			];
			lexer$1.conditions = {
				"mu": {
					"rules": [
						7,
						8,
						9,
						10,
						11,
						12,
						13,
						14,
						15,
						16,
						17,
						18,
						19,
						20,
						21,
						22,
						23,
						24,
						25,
						26,
						27,
						28,
						29,
						30,
						31,
						32,
						33,
						34,
						35,
						36,
						37,
						38,
						39,
						40,
						41,
						42,
						43,
						44
					],
					"inclusive": false
				},
				"emu": {
					"rules": [2],
					"inclusive": false
				},
				"com": {
					"rules": [6],
					"inclusive": false
				},
				"raw": {
					"rules": [
						3,
						4,
						5
					],
					"inclusive": false
				},
				"INITIAL": {
					"rules": [
						0,
						1,
						44
					],
					"inclusive": true
				}
			};
			return lexer$1;
		}();
		parser$5.lexer = lexer;
		function Parser$10() {
			this.yy = {};
		}
		Parser$10.prototype = parser$5;
		parser$5.Parser = Parser$10;
		return new Parser$10();
	}();
	exports["default"] = handlebars$1;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js
var require_visitor = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/visitor.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$50(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _exception$3 = require_exception();
	var _exception2$3 = _interopRequireDefault$50(_exception$3);
	function Visitor() {
		this.parents = [];
	}
	Visitor.prototype = {
		constructor: Visitor,
		mutating: false,
		acceptKey: function acceptKey(node, name) {
			var value = this.accept(node[name]);
			if (this.mutating) {
				if (value && !Visitor.prototype[value.type]) throw new _exception2$3["default"]("Unexpected node type \"" + value.type + "\" found when accepting " + name + " on " + node.type);
				node[name] = value;
			}
		},
		acceptRequired: function acceptRequired(node, name) {
			this.acceptKey(node, name);
			if (!node[name]) throw new _exception2$3["default"](node.type + " requires " + name);
		},
		acceptArray: function acceptArray(array) {
			for (var i$6 = 0, l$1 = array.length; i$6 < l$1; i$6++) {
				this.acceptKey(array, i$6);
				if (!array[i$6]) {
					array.splice(i$6, 1);
					i$6--;
					l$1--;
				}
			}
		},
		accept: function accept(object$2) {
			if (!object$2) return;
			/* istanbul ignore next: Sanity code */
			if (!this[object$2.type]) throw new _exception2$3["default"]("Unknown type: " + object$2.type, object$2);
			if (this.current) this.parents.unshift(this.current);
			this.current = object$2;
			var ret$1 = this[object$2.type](object$2);
			this.current = this.parents.shift();
			if (!this.mutating || ret$1) return ret$1;
			else if (ret$1 !== false) return object$2;
		},
		Program: function Program$1(program$3) {
			this.acceptArray(program$3.body);
		},
		MustacheStatement: visitSubExpression,
		Decorator: visitSubExpression,
		BlockStatement: visitBlock,
		DecoratorBlock: visitBlock,
		PartialStatement: visitPartial,
		PartialBlockStatement: function PartialBlockStatement(partial) {
			visitPartial.call(this, partial);
			this.acceptKey(partial, "program");
		},
		ContentStatement: function ContentStatement() {},
		CommentStatement: function CommentStatement() {},
		SubExpression: visitSubExpression,
		PathExpression: function PathExpression() {},
		StringLiteral: function StringLiteral$2() {},
		NumberLiteral: function NumberLiteral$1() {},
		BooleanLiteral: function BooleanLiteral$2() {},
		UndefinedLiteral: function UndefinedLiteral() {},
		NullLiteral: function NullLiteral$2() {},
		Hash: function Hash(hash$2) {
			this.acceptArray(hash$2.pairs);
		},
		HashPair: function HashPair(pair) {
			this.acceptRequired(pair, "value");
		}
	};
	function visitSubExpression(mustache) {
		this.acceptRequired(mustache, "path");
		this.acceptArray(mustache.params);
		this.acceptKey(mustache, "hash");
	}
	function visitBlock(block) {
		visitSubExpression.call(this, block);
		this.acceptKey(block, "program");
		this.acceptKey(block, "inverse");
	}
	function visitPartial(partial) {
		this.acceptRequired(partial, "name");
		this.acceptArray(partial.params);
		this.acceptKey(partial, "hash");
	}
	exports["default"] = Visitor;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js
var require_whitespace_control = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/whitespace-control.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$49(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _visitor$1 = require_visitor();
	var _visitor2$1 = _interopRequireDefault$49(_visitor$1);
	function WhitespaceControl() {
		var options = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
		this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2$1["default"]();
	WhitespaceControl.prototype.Program = function(program$3) {
		var doStandalone = !this.options.ignoreStandalone;
		var isRoot$3 = !this.isRootSeen;
		this.isRootSeen = true;
		var body = program$3.body;
		for (var i$6 = 0, l$1 = body.length; i$6 < l$1; i$6++) {
			var current = body[i$6], strip = this.accept(current);
			if (!strip) continue;
			var _isPrevWhitespace = isPrevWhitespace(body, i$6, isRoot$3), _isNextWhitespace = isNextWhitespace(body, i$6, isRoot$3), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
			if (strip.close) omitRight(body, i$6, true);
			if (strip.open) omitLeft(body, i$6, true);
			if (doStandalone && inlineStandalone) {
				omitRight(body, i$6);
				if (omitLeft(body, i$6)) {
					if (current.type === "PartialStatement") current.indent = /([ \t]+$)/.exec(body[i$6 - 1].original)[1];
				}
			}
			if (doStandalone && openStandalone) {
				omitRight((current.program || current.inverse).body);
				omitLeft(body, i$6);
			}
			if (doStandalone && closeStandalone) {
				omitRight(body, i$6);
				omitLeft((current.inverse || current.program).body);
			}
		}
		return program$3;
	};
	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
		this.accept(block.program);
		this.accept(block.inverse);
		var program$3 = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
		if (inverse && inverse.chained) {
			firstInverse = inverse.body[0].program;
			while (lastInverse.chained) lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
		}
		var strip = {
			open: block.openStrip.open,
			close: block.closeStrip.close,
			openStandalone: isNextWhitespace(program$3.body),
			closeStandalone: isPrevWhitespace((firstInverse || program$3).body)
		};
		if (block.openStrip.close) omitRight(program$3.body, null, true);
		if (inverse) {
			var inverseStrip = block.inverseStrip;
			if (inverseStrip.open) omitLeft(program$3.body, null, true);
			if (inverseStrip.close) omitRight(firstInverse.body, null, true);
			if (block.closeStrip.open) omitLeft(lastInverse.body, null, true);
			if (!this.options.ignoreStandalone && isPrevWhitespace(program$3.body) && isNextWhitespace(firstInverse.body)) {
				omitLeft(program$3.body);
				omitRight(firstInverse.body);
			}
		} else if (block.closeStrip.open) omitLeft(program$3.body, null, true);
		return strip;
	};
	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
		return mustache.strip;
	};
	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
		/* istanbul ignore next */
		var strip = node.strip || {};
		return {
			inlineStandalone: true,
			open: strip.open,
			close: strip.close
		};
	};
	function isPrevWhitespace(body, i$6, isRoot$3) {
		if (i$6 === void 0) i$6 = body.length;
		var prev = body[i$6 - 1], sibling = body[i$6 - 2];
		if (!prev) return isRoot$3;
		if (prev.type === "ContentStatement") return (sibling || !isRoot$3 ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	}
	function isNextWhitespace(body, i$6, isRoot$3) {
		if (i$6 === void 0) i$6 = -1;
		var next = body[i$6 + 1], sibling = body[i$6 + 2];
		if (!next) return isRoot$3;
		if (next.type === "ContentStatement") return (sibling || !isRoot$3 ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	}
	function omitRight(body, i$6, multiple) {
		var current = body[i$6 == null ? 0 : i$6 + 1];
		if (!current || current.type !== "ContentStatement" || !multiple && current.rightStripped) return;
		var original = current.value;
		current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, "");
		current.rightStripped = current.value !== original;
	}
	function omitLeft(body, i$6, multiple) {
		var current = body[i$6 == null ? body.length - 1 : i$6 - 1];
		if (!current || current.type !== "ContentStatement" || !multiple && current.leftStripped) return;
		var original = current.value;
		current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, "");
		current.leftStripped = current.value !== original;
		return current.leftStripped;
	}
	exports["default"] = WhitespaceControl;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js
var require_helpers$1 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/helpers.js"(exports) {
	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id$2;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;
	// istanbul ignore next
	function _interopRequireDefault$48(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _exception$2 = require_exception();
	var _exception2$2 = _interopRequireDefault$48(_exception$2);
	function validateClose(open, close) {
		close = close.path ? close.path.original : close;
		if (open.path.original !== close) {
			var errorNode = { loc: open.path.loc };
			throw new _exception2$2["default"](open.path.original + " doesn't match " + close, errorNode);
		}
	}
	function SourceLocation(source, locInfo) {
		this.source = source;
		this.start = {
			line: locInfo.first_line,
			column: locInfo.first_column
		};
		this.end = {
			line: locInfo.last_line,
			column: locInfo.last_column
		};
	}
	function id$2(token$1) {
		if (/^\[.*\]$/.test(token$1)) return token$1.substring(1, token$1.length - 1);
		else return token$1;
	}
	function stripFlags(open, close) {
		return {
			open: open.charAt(2) === "~",
			close: close.charAt(close.length - 3) === "~"
		};
	}
	function stripComment(comment$7) {
		return comment$7.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
	}
	function preparePath(data$2, parts, loc) {
		loc = this.locInfo(loc);
		var original = data$2 ? "@" : "", dig = [], depth$1 = 0;
		for (var i$6 = 0, l$1 = parts.length; i$6 < l$1; i$6++) {
			var part = parts[i$6].part, isLiteral$5 = parts[i$6].original !== part;
			original += (parts[i$6].separator || "") + part;
			if (!isLiteral$5 && (part === ".." || part === "." || part === "this")) {
				if (dig.length > 0) throw new _exception2$2["default"]("Invalid path: " + original, { loc });
				else if (part === "..") depth$1++;
			} else dig.push(part);
		}
		return {
			type: "PathExpression",
			data: data$2,
			depth: depth$1,
			parts: dig,
			original,
			loc
		};
	}
	function prepareMustache(path$28, params, hash$2, open, strip, locInfo) {
		var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== "{" && escapeFlag !== "&";
		var decorator$1 = /\*/.test(open);
		return {
			type: decorator$1 ? "Decorator" : "MustacheStatement",
			path: path$28,
			params,
			hash: hash$2,
			escaped,
			strip,
			loc: this.locInfo(locInfo)
		};
	}
	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
		validateClose(openRawBlock, close);
		locInfo = this.locInfo(locInfo);
		var program$3 = {
			type: "Program",
			body: contents,
			strip: {},
			loc: locInfo
		};
		return {
			type: "BlockStatement",
			path: openRawBlock.path,
			params: openRawBlock.params,
			hash: openRawBlock.hash,
			program: program$3,
			openStrip: {},
			inverseStrip: {},
			closeStrip: {},
			loc: locInfo
		};
	}
	function prepareBlock(openBlock, program$3, inverseAndProgram, close, inverted, locInfo) {
		if (close && close.path) validateClose(openBlock, close);
		var decorator$1 = /\*/.test(openBlock.open);
		program$3.blockParams = openBlock.blockParams;
		var inverse = void 0, inverseStrip = void 0;
		if (inverseAndProgram) {
			if (decorator$1) throw new _exception2$2["default"]("Unexpected inverse block on decorator", inverseAndProgram);
			if (inverseAndProgram.chain) inverseAndProgram.program.body[0].closeStrip = close.strip;
			inverseStrip = inverseAndProgram.strip;
			inverse = inverseAndProgram.program;
		}
		if (inverted) {
			inverted = inverse;
			inverse = program$3;
			program$3 = inverted;
		}
		return {
			type: decorator$1 ? "DecoratorBlock" : "BlockStatement",
			path: openBlock.path,
			params: openBlock.params,
			hash: openBlock.hash,
			program: program$3,
			inverse,
			openStrip: openBlock.strip,
			inverseStrip,
			closeStrip: close && close.strip,
			loc: this.locInfo(locInfo)
		};
	}
	function prepareProgram(statements$2, loc) {
		if (!loc && statements$2.length) {
			var firstLoc = statements$2[0].loc, lastLoc = statements$2[statements$2.length - 1].loc;
			/* istanbul ignore else */
			if (firstLoc && lastLoc) loc = {
				source: firstLoc.source,
				start: {
					line: firstLoc.start.line,
					column: firstLoc.start.column
				},
				end: {
					line: lastLoc.end.line,
					column: lastLoc.end.column
				}
			};
		}
		return {
			type: "Program",
			body: statements$2,
			strip: {},
			loc
		};
	}
	function preparePartialBlock(open, program$3, close, locInfo) {
		validateClose(open, close);
		return {
			type: "PartialBlockStatement",
			name: open.path,
			params: open.params,
			hash: open.hash,
			program: program$3,
			openStrip: open.strip,
			closeStrip: close && close.strip,
			loc: this.locInfo(locInfo)
		};
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/base.js
var require_base$1 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/base.js"(exports) {
	exports.__esModule = true;
	exports.parseWithoutProcessing = parseWithoutProcessing;
	exports.parse = parse$6;
	// istanbul ignore next
	function _interopRequireWildcard$8(obj) {
		if (obj && obj.__esModule) return obj;
		else {
			var newObj = {};
			if (obj != null) {
				for (var key in obj) if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
			}
			newObj["default"] = obj;
			return newObj;
		}
	}
	// istanbul ignore next
	function _interopRequireDefault$47(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _parser$6 = require_parser$3();
	var _parser2$2 = _interopRequireDefault$47(_parser$6);
	var _whitespaceControl = require_whitespace_control();
	var _whitespaceControl2 = _interopRequireDefault$47(_whitespaceControl);
	var _helpers = require_helpers$1();
	var Helpers = _interopRequireWildcard$8(_helpers);
	var _utils$11 = require_utils$2();
	exports.parser = _parser2$2["default"];
	var yy = {};
	_utils$11.extend(yy, Helpers);
	function parseWithoutProcessing(input, options) {
		if (input.type === "Program") return input;
		_parser2$2["default"].yy = yy;
		yy.locInfo = function(locInfo) {
			return new yy.SourceLocation(options && options.srcName, locInfo);
		};
		var ast = _parser2$2["default"].parse(input);
		return ast;
	}
	function parse$6(input, options) {
		var ast = parseWithoutProcessing(input, options);
		var strip = new _whitespaceControl2["default"](options);
		return strip.accept(ast);
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js
var require_compiler = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/compiler.js"(exports) {
	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;
	// istanbul ignore next
	function _interopRequireDefault$46(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _exception$1 = require_exception();
	var _exception2$1 = _interopRequireDefault$46(_exception$1);
	var _utils$10 = require_utils$2();
	var _ast = require_ast();
	var _ast2 = _interopRequireDefault$46(_ast);
	var slice$1 = [].slice;
	function Compiler() {}
	Compiler.prototype = {
		compiler: Compiler,
		equals: function equals$3(other) {
			var len = this.opcodes.length;
			if (other.opcodes.length !== len) return false;
			for (var i$6 = 0; i$6 < len; i$6++) {
				var opcode = this.opcodes[i$6], otherOpcode = other.opcodes[i$6];
				if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) return false;
			}
			len = this.children.length;
			for (var i$6 = 0; i$6 < len; i$6++) if (!this.children[i$6].equals(other.children[i$6])) return false;
			return true;
		},
		guid: 0,
		compile: function compile$3(program$3, options) {
			this.sourceNode = [];
			this.opcodes = [];
			this.children = [];
			this.options = options;
			this.stringParams = options.stringParams;
			this.trackIds = options.trackIds;
			options.blockParams = options.blockParams || [];
			options.knownHelpers = _utils$10.extend(Object.create(null), {
				helperMissing: true,
				blockHelperMissing: true,
				each: true,
				"if": true,
				unless: true,
				"with": true,
				log: true,
				lookup: true
			}, options.knownHelpers);
			return this.accept(program$3);
		},
		compileProgram: function compileProgram(program$3) {
			var childCompiler = new this.compiler(), result = childCompiler.compile(program$3, this.options), guid = this.guid++;
			this.usePartial = this.usePartial || result.usePartial;
			this.children[guid] = result;
			this.useDepths = this.useDepths || result.useDepths;
			return guid;
		},
		accept: function accept(node) {
			/* istanbul ignore next: Sanity code */
			if (!this[node.type]) throw new _exception2$1["default"]("Unknown type: " + node.type, node);
			this.sourceNode.unshift(node);
			var ret$1 = this[node.type](node);
			this.sourceNode.shift();
			return ret$1;
		},
		Program: function Program$1(program$3) {
			this.options.blockParams.unshift(program$3.blockParams);
			var body = program$3.body, bodyLength = body.length;
			for (var i$6 = 0; i$6 < bodyLength; i$6++) this.accept(body[i$6]);
			this.options.blockParams.shift();
			this.isSimple = bodyLength === 1;
			this.blockParams = program$3.blockParams ? program$3.blockParams.length : 0;
			return this;
		},
		BlockStatement: function BlockStatement$1(block) {
			transformLiteralToPath(block);
			var program$3 = block.program, inverse = block.inverse;
			program$3 = program$3 && this.compileProgram(program$3);
			inverse = inverse && this.compileProgram(inverse);
			var type = this.classifySexpr(block);
			if (type === "helper") this.helperSexpr(block, program$3, inverse);
			else if (type === "simple") {
				this.simpleSexpr(block);
				this.opcode("pushProgram", program$3);
				this.opcode("pushProgram", inverse);
				this.opcode("emptyHash");
				this.opcode("blockValue", block.path.original);
			} else {
				this.ambiguousSexpr(block, program$3, inverse);
				this.opcode("pushProgram", program$3);
				this.opcode("pushProgram", inverse);
				this.opcode("emptyHash");
				this.opcode("ambiguousBlockValue");
			}
			this.opcode("append");
		},
		DecoratorBlock: function DecoratorBlock(decorator$1) {
			var program$3 = decorator$1.program && this.compileProgram(decorator$1.program);
			var params = this.setupFullMustacheParams(decorator$1, program$3, void 0), path$28 = decorator$1.path;
			this.useDecorators = true;
			this.opcode("registerDecorator", params.length, path$28.original);
		},
		PartialStatement: function PartialStatement(partial) {
			this.usePartial = true;
			var program$3 = partial.program;
			if (program$3) program$3 = this.compileProgram(partial.program);
			var params = partial.params;
			if (params.length > 1) throw new _exception2$1["default"]("Unsupported number of partial arguments: " + params.length, partial);
			else if (!params.length) if (this.options.explicitPartialContext) this.opcode("pushLiteral", "undefined");
			else params.push({
				type: "PathExpression",
				parts: [],
				depth: 0
			});
			var partialName = partial.name.original, isDynamic = partial.name.type === "SubExpression";
			if (isDynamic) this.accept(partial.name);
			this.setupFullMustacheParams(partial, program$3, void 0, true);
			var indent = partial.indent || "";
			if (this.options.preventIndent && indent) {
				this.opcode("appendContent", indent);
				indent = "";
			}
			this.opcode("invokePartial", isDynamic, partialName, indent);
			this.opcode("append");
		},
		PartialBlockStatement: function PartialBlockStatement(partialBlock) {
			this.PartialStatement(partialBlock);
		},
		MustacheStatement: function MustacheStatement(mustache) {
			this.SubExpression(mustache);
			if (mustache.escaped && !this.options.noEscape) this.opcode("appendEscaped");
			else this.opcode("append");
		},
		Decorator: function Decorator$1(decorator$1) {
			this.DecoratorBlock(decorator$1);
		},
		ContentStatement: function ContentStatement(content) {
			if (content.value) this.opcode("appendContent", content.value);
		},
		CommentStatement: function CommentStatement() {},
		SubExpression: function SubExpression(sexpr) {
			transformLiteralToPath(sexpr);
			var type = this.classifySexpr(sexpr);
			if (type === "simple") this.simpleSexpr(sexpr);
			else if (type === "helper") this.helperSexpr(sexpr);
			else this.ambiguousSexpr(sexpr);
		},
		ambiguousSexpr: function ambiguousSexpr(sexpr, program$3, inverse) {
			var path$28 = sexpr.path, name = path$28.parts[0], isBlock$1 = program$3 != null || inverse != null;
			this.opcode("getContext", path$28.depth);
			this.opcode("pushProgram", program$3);
			this.opcode("pushProgram", inverse);
			path$28.strict = true;
			this.accept(path$28);
			this.opcode("invokeAmbiguous", name, isBlock$1);
		},
		simpleSexpr: function simpleSexpr(sexpr) {
			var path$28 = sexpr.path;
			path$28.strict = true;
			this.accept(path$28);
			this.opcode("resolvePossibleLambda");
		},
		helperSexpr: function helperSexpr(sexpr, program$3, inverse) {
			var params = this.setupFullMustacheParams(sexpr, program$3, inverse), path$28 = sexpr.path, name = path$28.parts[0];
			if (this.options.knownHelpers[name]) this.opcode("invokeKnownHelper", params.length, name);
			else if (this.options.knownHelpersOnly) throw new _exception2$1["default"]("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
			else {
				path$28.strict = true;
				path$28.falsy = true;
				this.accept(path$28);
				this.opcode("invokeHelper", params.length, path$28.original, _ast2["default"].helpers.simpleId(path$28));
			}
		},
		PathExpression: function PathExpression(path$28) {
			this.addDepth(path$28.depth);
			this.opcode("getContext", path$28.depth);
			var name = path$28.parts[0], scoped = _ast2["default"].helpers.scopedId(path$28), blockParamId = !path$28.depth && !scoped && this.blockParamIndex(name);
			if (blockParamId) this.opcode("lookupBlockParam", blockParamId, path$28.parts);
			else if (!name) this.opcode("pushContext");
			else if (path$28.data) {
				this.options.data = true;
				this.opcode("lookupData", path$28.depth, path$28.parts, path$28.strict);
			} else this.opcode("lookupOnContext", path$28.parts, path$28.falsy, path$28.strict, scoped);
		},
		StringLiteral: function StringLiteral$2(string$3) {
			this.opcode("pushString", string$3.value);
		},
		NumberLiteral: function NumberLiteral$1(number) {
			this.opcode("pushLiteral", number.value);
		},
		BooleanLiteral: function BooleanLiteral$2(bool$1) {
			this.opcode("pushLiteral", bool$1.value);
		},
		UndefinedLiteral: function UndefinedLiteral() {
			this.opcode("pushLiteral", "undefined");
		},
		NullLiteral: function NullLiteral$2() {
			this.opcode("pushLiteral", "null");
		},
		Hash: function Hash(hash$2) {
			var pairs = hash$2.pairs, i$6 = 0, l$1 = pairs.length;
			this.opcode("pushHash");
			for (; i$6 < l$1; i$6++) this.pushParam(pairs[i$6].value);
			while (i$6--) this.opcode("assignToHash", pairs[i$6].key);
			this.opcode("popHash");
		},
		opcode: function opcode(name) {
			this.opcodes.push({
				opcode: name,
				args: slice$1.call(arguments, 1),
				loc: this.sourceNode[0].loc
			});
		},
		addDepth: function addDepth(depth$1) {
			if (!depth$1) return;
			this.useDepths = true;
		},
		classifySexpr: function classifySexpr(sexpr) {
			var isSimple = _ast2["default"].helpers.simpleId(sexpr.path);
			var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
			var isHelper$1 = !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr);
			var isEligible = !isBlockParam && (isHelper$1 || isSimple);
			if (isEligible && !isHelper$1) {
				var _name = sexpr.path.parts[0], options = this.options;
				if (options.knownHelpers[_name]) isHelper$1 = true;
				else if (options.knownHelpersOnly) isEligible = false;
			}
			if (isHelper$1) return "helper";
			else if (isEligible) return "ambiguous";
			else return "simple";
		},
		pushParams: function pushParams(params) {
			for (var i$6 = 0, l$1 = params.length; i$6 < l$1; i$6++) this.pushParam(params[i$6]);
		},
		pushParam: function pushParam(val) {
			var value = val.value != null ? val.value : val.original || "";
			if (this.stringParams) {
				if (value.replace) value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".");
				if (val.depth) this.addDepth(val.depth);
				this.opcode("getContext", val.depth || 0);
				this.opcode("pushStringParam", value, val.type);
				if (val.type === "SubExpression") this.accept(val);
			} else {
				if (this.trackIds) {
					var blockParamIndex = void 0;
					if (val.parts && !_ast2["default"].helpers.scopedId(val) && !val.depth) blockParamIndex = this.blockParamIndex(val.parts[0]);
					if (blockParamIndex) {
						var blockParamChild = val.parts.slice(1).join(".");
						this.opcode("pushId", "BlockParam", blockParamIndex, blockParamChild);
					} else {
						value = val.original || value;
						if (value.replace) value = value.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "");
						this.opcode("pushId", val.type, value);
					}
				}
				this.accept(val);
			}
		},
		setupFullMustacheParams: function setupFullMustacheParams(sexpr, program$3, inverse, omitEmpty) {
			var params = sexpr.params;
			this.pushParams(params);
			this.opcode("pushProgram", program$3);
			this.opcode("pushProgram", inverse);
			if (sexpr.hash) this.accept(sexpr.hash);
			else this.opcode("emptyHash", omitEmpty);
			return params;
		},
		blockParamIndex: function blockParamIndex(name) {
			for (var depth$1 = 0, len = this.options.blockParams.length; depth$1 < len; depth$1++) {
				var blockParams$1 = this.options.blockParams[depth$1], param = blockParams$1 && _utils$10.indexOf(blockParams$1, name);
				if (blockParams$1 && param >= 0) return [depth$1, param];
			}
		}
	};
	function precompile(input, options, env$3) {
		if (input == null || typeof input !== "string" && input.type !== "Program") throw new _exception2$1["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
		options = options || {};
		if (!("data" in options)) options.data = true;
		if (options.compat) options.useDepths = true;
		var ast = env$3.parse(input, options), environment = new env$3.Compiler().compile(ast, options);
		return new env$3.JavaScriptCompiler().compile(environment, options);
	}
	function compile(input, options, env$3) {
		if (options === void 0) options = {};
		if (input == null || typeof input !== "string" && input.type !== "Program") throw new _exception2$1["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
		options = _utils$10.extend({}, options);
		if (!("data" in options)) options.data = true;
		if (options.compat) options.useDepths = true;
		var compiled = void 0;
		function compileInput() {
			var ast = env$3.parse(input, options), environment = new env$3.Compiler().compile(ast, options), templateSpec = new env$3.JavaScriptCompiler().compile(environment, options, void 0, true);
			return env$3.template(templateSpec);
		}
		function ret$1(context, execOptions) {
			if (!compiled) compiled = compileInput();
			return compiled.call(this, context, execOptions);
		}
		ret$1._setup = function(setupOptions) {
			if (!compiled) compiled = compileInput();
			return compiled._setup(setupOptions);
		};
		ret$1._child = function(i$6, data$2, blockParams$1, depths) {
			if (!compiled) compiled = compileInput();
			return compiled._child(i$6, data$2, blockParams$1, depths);
		};
		return ret$1;
	}
	function argEquals(a$1, b$1) {
		if (a$1 === b$1) return true;
		if (_utils$10.isArray(a$1) && _utils$10.isArray(b$1) && a$1.length === b$1.length) {
			for (var i$6 = 0; i$6 < a$1.length; i$6++) if (!argEquals(a$1[i$6], b$1[i$6])) return false;
			return true;
		}
	}
	function transformLiteralToPath(sexpr) {
		if (!sexpr.path.parts) {
			var literal = sexpr.path;
			sexpr.path = {
				type: "PathExpression",
				data: false,
				depth: 0,
				parts: [literal.original + ""],
				original: literal.original + "",
				loc: literal.loc
			};
		}
	}
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js
var require_code_gen = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/code-gen.js"(exports, module) {
	exports.__esModule = true;
	var _utils$9 = require_utils$2();
	var SourceNode = void 0;
	try {
		/* istanbul ignore next */
		if (typeof define !== "function" || !define.amd) {
			var SourceMap$1 = require_source_map$1();
			SourceNode = SourceMap$1.SourceNode;
		}
	} catch (err) {}
	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
		SourceNode = function(line, column, srcFile, chunks) {
			this.src = "";
			if (chunks) this.add(chunks);
		};
		/* istanbul ignore next */
		SourceNode.prototype = {
			add: function add(chunks) {
				if (_utils$9.isArray(chunks)) chunks = chunks.join("");
				this.src += chunks;
			},
			prepend: function prepend$1(chunks) {
				if (_utils$9.isArray(chunks)) chunks = chunks.join("");
				this.src = chunks + this.src;
			},
			toStringWithSourceMap: function toStringWithSourceMap() {
				return { code: this.toString() };
			},
			toString: function toString$5() {
				return this.src;
			}
		};
	}
	function castChunk(chunk, codeGen, loc) {
		if (_utils$9.isArray(chunk)) {
			var ret$1 = [];
			for (var i$6 = 0, len = chunk.length; i$6 < len; i$6++) ret$1.push(codeGen.wrap(chunk[i$6], loc));
			return ret$1;
		} else if (typeof chunk === "boolean" || typeof chunk === "number") return chunk + "";
		return chunk;
	}
	function CodeGen(srcFile) {
		this.srcFile = srcFile;
		this.source = [];
	}
	CodeGen.prototype = {
		isEmpty: function isEmpty$1() {
			return !this.source.length;
		},
		prepend: function prepend$1(source, loc) {
			this.source.unshift(this.wrap(source, loc));
		},
		push: function push$1(source, loc) {
			this.source.push(this.wrap(source, loc));
		},
		merge: function merge$5() {
			var source = this.empty();
			this.each(function(line) {
				source.add([
					"  ",
					line,
					"\n"
				]);
			});
			return source;
		},
		each: function each(iter) {
			for (var i$6 = 0, len = this.source.length; i$6 < len; i$6++) iter(this.source[i$6]);
		},
		empty: function empty() {
			var loc = this.currentLocation || { start: {} };
			return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
		},
		wrap: function wrap(chunk) {
			var loc = arguments.length <= 1 || arguments[1] === void 0 ? this.currentLocation || { start: {} } : arguments[1];
			if (chunk instanceof SourceNode) return chunk;
			chunk = castChunk(chunk, this, loc);
			return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
		},
		functionCall: function functionCall(fn, type, params) {
			params = this.generateList(params);
			return this.wrap([
				fn,
				type ? "." + type + "(" : "(",
				params,
				")"
			]);
		},
		quotedString: function quotedString(str$4) {
			return "\"" + (str$4 + "").replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + "\"";
		},
		objectLiteral: function objectLiteral(obj) {
			// istanbul ignore next
			var _this = this;
			var pairs = [];
			Object.keys(obj).forEach(function(key) {
				var value = castChunk(obj[key], _this);
				if (value !== "undefined") pairs.push([
					_this.quotedString(key),
					":",
					value
				]);
			});
			var ret$1 = this.generateList(pairs);
			ret$1.prepend("{");
			ret$1.add("}");
			return ret$1;
		},
		generateList: function generateList(entries) {
			var ret$1 = this.empty();
			for (var i$6 = 0, len = entries.length; i$6 < len; i$6++) {
				if (i$6) ret$1.add(",");
				ret$1.add(castChunk(entries[i$6], this));
			}
			return ret$1;
		},
		generateArray: function generateArray(entries) {
			var ret$1 = this.generateList(entries);
			ret$1.prepend("[");
			ret$1.add("]");
			return ret$1;
		}
	};
	exports["default"] = CodeGen;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js
var require_javascript_compiler = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/javascript-compiler.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$45(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _base$1 = require_base$2();
	var _exception = require_exception();
	var _exception2 = _interopRequireDefault$45(_exception);
	var _utils$8 = require_utils$2();
	var _codeGen = require_code_gen();
	var _codeGen2 = _interopRequireDefault$45(_codeGen);
	function Literal(value) {
		this.value = value;
	}
	function JavaScriptCompiler() {}
	JavaScriptCompiler.prototype = {
		nameLookup: function nameLookup(parent, name) {
			return this.internalNameLookup(parent, name);
		},
		depthedLookup: function depthedLookup(name) {
			return [
				this.aliasable("container.lookup"),
				"(depths, ",
				JSON.stringify(name),
				")"
			];
		},
		compilerInfo: function compilerInfo() {
			var revision = _base$1.COMPILER_REVISION, versions = _base$1.REVISION_CHANGES[revision];
			return [revision, versions];
		},
		appendToBuffer: function appendToBuffer(source, location, explicit) {
			if (!_utils$8.isArray(source)) source = [source];
			source = this.source.wrap(source, location);
			if (this.environment.isSimple) return [
				"return ",
				source,
				";"
			];
			else if (explicit) return [
				"buffer += ",
				source,
				";"
			];
			else {
				source.appendToBuffer = true;
				return source;
			}
		},
		initializeBuffer: function initializeBuffer() {
			return this.quotedString("");
		},
		internalNameLookup: function internalNameLookup(parent, name) {
			this.lookupPropertyFunctionIsUsed = true;
			return [
				"lookupProperty(",
				parent,
				",",
				JSON.stringify(name),
				")"
			];
		},
		lookupPropertyFunctionIsUsed: false,
		compile: function compile$3(environment, options, context, asObject) {
			this.environment = environment;
			this.options = options;
			this.stringParams = this.options.stringParams;
			this.trackIds = this.options.trackIds;
			this.precompile = !asObject;
			this.name = this.environment.name;
			this.isChild = !!context;
			this.context = context || {
				decorators: [],
				programs: [],
				environments: []
			};
			this.preamble();
			this.stackSlot = 0;
			this.stackVars = [];
			this.aliases = {};
			this.registers = { list: [] };
			this.hashes = [];
			this.compileStack = [];
			this.inlineStack = [];
			this.blockParams = [];
			this.compileChildren(environment, options);
			this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
			this.useBlockParams = this.useBlockParams || environment.useBlockParams;
			var opcodes = environment.opcodes, opcode = void 0, firstLoc = void 0, i$6 = void 0, l$1 = void 0;
			for (i$6 = 0, l$1 = opcodes.length; i$6 < l$1; i$6++) {
				opcode = opcodes[i$6];
				this.source.currentLocation = opcode.loc;
				firstLoc = firstLoc || opcode.loc;
				this[opcode.opcode].apply(this, opcode.args);
			}
			this.source.currentLocation = firstLoc;
			this.pushSource("");
			/* istanbul ignore next */
			if (this.stackSlot || this.inlineStack.length || this.compileStack.length) throw new _exception2["default"]("Compile completed with content left on stack");
			if (!this.decorators.isEmpty()) {
				this.useDecorators = true;
				this.decorators.prepend([
					"var decorators = container.decorators, ",
					this.lookupPropertyFunctionVarDeclaration(),
					";\n"
				]);
				this.decorators.push("return fn;");
				if (asObject) this.decorators = Function.apply(this, [
					"fn",
					"props",
					"container",
					"depth0",
					"data",
					"blockParams",
					"depths",
					this.decorators.merge()
				]);
				else {
					this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n");
					this.decorators.push("}\n");
					this.decorators = this.decorators.merge();
				}
			} else this.decorators = void 0;
			var fn = this.createFunctionContext(asObject);
			if (!this.isChild) {
				var ret$1 = {
					compiler: this.compilerInfo(),
					main: fn
				};
				if (this.decorators) {
					ret$1.main_d = this.decorators;
					ret$1.useDecorators = true;
				}
				var _context$9 = this.context;
				var programs = _context$9.programs;
				var decorators = _context$9.decorators;
				for (i$6 = 0, l$1 = programs.length; i$6 < l$1; i$6++) if (programs[i$6]) {
					ret$1[i$6] = programs[i$6];
					if (decorators[i$6]) {
						ret$1[i$6 + "_d"] = decorators[i$6];
						ret$1.useDecorators = true;
					}
				}
				if (this.environment.usePartial) ret$1.usePartial = true;
				if (this.options.data) ret$1.useData = true;
				if (this.useDepths) ret$1.useDepths = true;
				if (this.useBlockParams) ret$1.useBlockParams = true;
				if (this.options.compat) ret$1.compat = true;
				if (!asObject) {
					ret$1.compiler = JSON.stringify(ret$1.compiler);
					this.source.currentLocation = { start: {
						line: 1,
						column: 0
					} };
					ret$1 = this.objectLiteral(ret$1);
					if (options.srcName) {
						ret$1 = ret$1.toStringWithSourceMap({ file: options.destName });
						ret$1.map = ret$1.map && ret$1.map.toString();
					} else ret$1 = ret$1.toString();
				} else ret$1.compilerOptions = this.options;
				return ret$1;
			} else return fn;
		},
		preamble: function preamble() {
			this.lastContext = 0;
			this.source = new _codeGen2["default"](this.options.srcName);
			this.decorators = new _codeGen2["default"](this.options.srcName);
		},
		createFunctionContext: function createFunctionContext(asObject) {
			// istanbul ignore next
			var _this = this;
			var varDeclarations = "";
			var locals = this.stackVars.concat(this.registers.list);
			if (locals.length > 0) varDeclarations += ", " + locals.join(", ");
			var aliasCount = 0;
			Object.keys(this.aliases).forEach(function(alias) {
				var node = _this.aliases[alias];
				if (node.children && node.referenceCount > 1) {
					varDeclarations += ", alias" + ++aliasCount + "=" + alias;
					node.children[0] = "alias" + aliasCount;
				}
			});
			if (this.lookupPropertyFunctionIsUsed) varDeclarations += ", " + this.lookupPropertyFunctionVarDeclaration();
			var params = [
				"container",
				"depth0",
				"helpers",
				"partials",
				"data"
			];
			if (this.useBlockParams || this.useDepths) params.push("blockParams");
			if (this.useDepths) params.push("depths");
			var source = this.mergeSource(varDeclarations);
			if (asObject) {
				params.push(source);
				return Function.apply(this, params);
			} else return this.source.wrap([
				"function(",
				params.join(","),
				") {\n  ",
				source,
				"}"
			]);
		},
		mergeSource: function mergeSource(varDeclarations) {
			var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = void 0, sourceSeen = void 0, bufferStart = void 0, bufferEnd = void 0;
			this.source.each(function(line) {
				if (line.appendToBuffer) {
					if (bufferStart) line.prepend("  + ");
					else bufferStart = line;
					bufferEnd = line;
				} else {
					if (bufferStart) {
						if (!sourceSeen) appendFirst = true;
						else bufferStart.prepend("buffer += ");
						bufferEnd.add(";");
						bufferStart = bufferEnd = void 0;
					}
					sourceSeen = true;
					if (!isSimple) appendOnly = false;
				}
			});
			if (appendOnly) {
				if (bufferStart) {
					bufferStart.prepend("return ");
					bufferEnd.add(";");
				} else if (!sourceSeen) this.source.push("return \"\";");
			} else {
				varDeclarations += ", buffer = " + (appendFirst ? "" : this.initializeBuffer());
				if (bufferStart) {
					bufferStart.prepend("return buffer + ");
					bufferEnd.add(";");
				} else this.source.push("return buffer;");
			}
			if (varDeclarations) this.source.prepend("var " + varDeclarations.substring(2) + (appendFirst ? "" : ";\n"));
			return this.source.merge();
		},
		lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
			return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
		},
		blockValue: function blockValue(name) {
			var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
			this.setupHelperArgs(name, 0, params);
			var blockName = this.popStack();
			params.splice(1, 0, blockName);
			this.push(this.source.functionCall(blockHelperMissing, "call", params));
		},
		ambiguousBlockValue: function ambiguousBlockValue() {
			var blockHelperMissing = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
			this.setupHelperArgs("", 0, params, true);
			this.flushInline();
			var current = this.topStack();
			params.splice(1, 0, current);
			this.pushSource([
				"if (!",
				this.lastHelper,
				") { ",
				current,
				" = ",
				this.source.functionCall(blockHelperMissing, "call", params),
				"}"
			]);
		},
		appendContent: function appendContent(content) {
			if (this.pendingContent) content = this.pendingContent + content;
			else this.pendingLocation = this.source.currentLocation;
			this.pendingContent = content;
		},
		append: function append$1() {
			if (this.isInline()) {
				this.replaceStack(function(current) {
					return [
						" != null ? ",
						current,
						" : \"\""
					];
				});
				this.pushSource(this.appendToBuffer(this.popStack()));
			} else {
				var local = this.popStack();
				this.pushSource([
					"if (",
					local,
					" != null) { ",
					this.appendToBuffer(local, void 0, true),
					" }"
				]);
				if (this.environment.isSimple) this.pushSource([
					"else { ",
					this.appendToBuffer("''", void 0, true),
					" }"
				]);
			}
		},
		appendEscaped: function appendEscaped() {
			this.pushSource(this.appendToBuffer([
				this.aliasable("container.escapeExpression"),
				"(",
				this.popStack(),
				")"
			]));
		},
		getContext: function getContext(depth$1) {
			this.lastContext = depth$1;
		},
		pushContext: function pushContext$1() {
			this.pushStackLiteral(this.contextName(this.lastContext));
		},
		lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
			var i$6 = 0;
			if (!scoped && this.options.compat && !this.lastContext) this.push(this.depthedLookup(parts[i$6++]));
			else this.pushContext();
			this.resolvePath("context", parts, i$6, falsy, strict);
		},
		lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
			this.useBlockParams = true;
			this.push([
				"blockParams[",
				blockParamId[0],
				"][",
				blockParamId[1],
				"]"
			]);
			this.resolvePath("context", parts, 1);
		},
		lookupData: function lookupData(depth$1, parts, strict) {
			if (!depth$1) this.pushStackLiteral("data");
			else this.pushStackLiteral("container.data(data, " + depth$1 + ")");
			this.resolvePath("data", parts, 0, true, strict);
		},
		resolvePath: function resolvePath(type, parts, i$6, falsy, strict) {
			// istanbul ignore next
			var _this2 = this;
			if (this.options.strict || this.options.assumeObjects) {
				this.push(strictLookup(this.options.strict && strict, this, parts, i$6, type));
				return;
			}
			var len = parts.length;
			for (; i$6 < len; i$6++) this.replaceStack(function(current) {
				var lookup = _this2.nameLookup(current, parts[i$6], type);
				if (!falsy) return [
					" != null ? ",
					lookup,
					" : ",
					current
				];
				else return [" && ", lookup];
			});
		},
		resolvePossibleLambda: function resolvePossibleLambda() {
			this.push([
				this.aliasable("container.lambda"),
				"(",
				this.popStack(),
				", ",
				this.contextName(0),
				")"
			]);
		},
		pushStringParam: function pushStringParam(string$3, type) {
			this.pushContext();
			this.pushString(type);
			if (type !== "SubExpression") if (typeof string$3 === "string") this.pushString(string$3);
			else this.pushStackLiteral(string$3);
		},
		emptyHash: function emptyHash(omitEmpty) {
			if (this.trackIds) this.push("{}");
			if (this.stringParams) {
				this.push("{}");
				this.push("{}");
			}
			this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
		},
		pushHash: function pushHash() {
			if (this.hash) this.hashes.push(this.hash);
			this.hash = {
				values: {},
				types: [],
				contexts: [],
				ids: []
			};
		},
		popHash: function popHash() {
			var hash$2 = this.hash;
			this.hash = this.hashes.pop();
			if (this.trackIds) this.push(this.objectLiteral(hash$2.ids));
			if (this.stringParams) {
				this.push(this.objectLiteral(hash$2.contexts));
				this.push(this.objectLiteral(hash$2.types));
			}
			this.push(this.objectLiteral(hash$2.values));
		},
		pushString: function pushString(string$3) {
			this.pushStackLiteral(this.quotedString(string$3));
		},
		pushLiteral: function pushLiteral(value) {
			this.pushStackLiteral(value);
		},
		pushProgram: function pushProgram(guid) {
			if (guid != null) this.pushStackLiteral(this.programExpression(guid));
			else this.pushStackLiteral(null);
		},
		registerDecorator: function registerDecorator(paramSize, name) {
			var foundDecorator = this.nameLookup("decorators", name, "decorator"), options = this.setupHelperArgs(name, paramSize);
			this.decorators.push([
				"fn = ",
				this.decorators.functionCall(foundDecorator, "", [
					"fn",
					"props",
					"container",
					options
				]),
				" || fn;"
			]);
		},
		invokeHelper: function invokeHelper(paramSize, name, isSimple) {
			var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name);
			var possibleFunctionCalls = [];
			if (isSimple) possibleFunctionCalls.push(helper.name);
			possibleFunctionCalls.push(nonHelper);
			if (!this.options.strict) possibleFunctionCalls.push(this.aliasable("container.hooks.helperMissing"));
			var functionLookupCode = [
				"(",
				this.itemsSeparatedBy(possibleFunctionCalls, "||"),
				")"
			];
			var functionCall = this.source.functionCall(functionLookupCode, "call", helper.callParams);
			this.push(functionCall);
		},
		itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
			var result = [];
			result.push(items[0]);
			for (var i$6 = 1; i$6 < items.length; i$6++) result.push(separator, items[i$6]);
			return result;
		},
		invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
			var helper = this.setupHelper(paramSize, name);
			this.push(this.source.functionCall(helper.name, "call", helper.callParams));
		},
		invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
			this.useRegister("helper");
			var nonHelper = this.popStack();
			this.emptyHash();
			var helper = this.setupHelper(0, name, helperCall);
			var helperName = this.lastHelper = this.nameLookup("helpers", name, "helper");
			var lookup = [
				"(",
				"(helper = ",
				helperName,
				" || ",
				nonHelper,
				")"
			];
			if (!this.options.strict) {
				lookup[0] = "(helper = ";
				lookup.push(" != null ? helper : ", this.aliasable("container.hooks.helperMissing"));
			}
			this.push([
				"(",
				lookup,
				helper.paramsInit ? ["),(", helper.paramsInit] : [],
				"),",
				"(typeof helper === ",
				this.aliasable("\"function\""),
				" ? ",
				this.source.functionCall("helper", "call", helper.callParams),
				" : helper))"
			]);
		},
		invokePartial: function invokePartial$1(isDynamic, name, indent) {
			var params = [], options = this.setupParams(name, 1, params);
			if (isDynamic) {
				name = this.popStack();
				delete options.name;
			}
			if (indent) options.indent = JSON.stringify(indent);
			options.helpers = "helpers";
			options.partials = "partials";
			options.decorators = "container.decorators";
			if (!isDynamic) params.unshift(this.nameLookup("partials", name, "partial"));
			else params.unshift(name);
			if (this.options.compat) options.depths = "depths";
			options = this.objectLiteral(options);
			params.push(options);
			this.push(this.source.functionCall("container.invokePartial", "", params));
		},
		assignToHash: function assignToHash(key) {
			var value = this.popStack(), context = void 0, type = void 0, id$4 = void 0;
			if (this.trackIds) id$4 = this.popStack();
			if (this.stringParams) {
				type = this.popStack();
				context = this.popStack();
			}
			var hash$2 = this.hash;
			if (context) hash$2.contexts[key] = context;
			if (type) hash$2.types[key] = type;
			if (id$4) hash$2.ids[key] = id$4;
			hash$2.values[key] = value;
		},
		pushId: function pushId(type, name, child) {
			if (type === "BlockParam") this.pushStackLiteral("blockParams[" + name[0] + "].path[" + name[1] + "]" + (child ? " + " + JSON.stringify("." + child) : ""));
			else if (type === "PathExpression") this.pushString(name);
			else if (type === "SubExpression") this.pushStackLiteral("true");
			else this.pushStackLiteral("null");
		},
		compiler: JavaScriptCompiler,
		compileChildren: function compileChildren(environment, options) {
			var children = environment.children, child = void 0, compiler = void 0;
			for (var i$6 = 0, l$1 = children.length; i$6 < l$1; i$6++) {
				child = children[i$6];
				compiler = new this.compiler();
				var existing = this.matchExistingProgram(child);
				if (existing == null) {
					this.context.programs.push("");
					var index$1 = this.context.programs.length;
					child.index = index$1;
					child.name = "program" + index$1;
					this.context.programs[index$1] = compiler.compile(child, options, this.context, !this.precompile);
					this.context.decorators[index$1] = compiler.decorators;
					this.context.environments[index$1] = child;
					this.useDepths = this.useDepths || compiler.useDepths;
					this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
					child.useDepths = this.useDepths;
					child.useBlockParams = this.useBlockParams;
				} else {
					child.index = existing.index;
					child.name = "program" + existing.index;
					this.useDepths = this.useDepths || existing.useDepths;
					this.useBlockParams = this.useBlockParams || existing.useBlockParams;
				}
			}
		},
		matchExistingProgram: function matchExistingProgram(child) {
			for (var i$6 = 0, len = this.context.environments.length; i$6 < len; i$6++) {
				var environment = this.context.environments[i$6];
				if (environment && environment.equals(child)) return environment;
			}
		},
		programExpression: function programExpression(guid) {
			var child = this.environment.children[guid], programParams = [
				child.index,
				"data",
				child.blockParams
			];
			if (this.useBlockParams || this.useDepths) programParams.push("blockParams");
			if (this.useDepths) programParams.push("depths");
			return "container.program(" + programParams.join(", ") + ")";
		},
		useRegister: function useRegister(name) {
			if (!this.registers[name]) {
				this.registers[name] = true;
				this.registers.list.push(name);
			}
		},
		push: function push$1(expr) {
			if (!(expr instanceof Literal)) expr = this.source.wrap(expr);
			this.inlineStack.push(expr);
			return expr;
		},
		pushStackLiteral: function pushStackLiteral(item) {
			this.push(new Literal(item));
		},
		pushSource: function pushSource(source) {
			if (this.pendingContent) {
				this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
				this.pendingContent = void 0;
			}
			if (source) this.source.push(source);
		},
		replaceStack: function replaceStack(callback) {
			var prefix$1 = ["("], stack = void 0, createdStack = void 0, usedLiteral = void 0;
			/* istanbul ignore next */
			if (!this.isInline()) throw new _exception2["default"]("replaceStack on non-inline");
			var top = this.popStack(true);
			if (top instanceof Literal) {
				stack = [top.value];
				prefix$1 = ["(", stack];
				usedLiteral = true;
			} else {
				createdStack = true;
				var _name = this.incrStack();
				prefix$1 = [
					"((",
					this.push(_name),
					" = ",
					top,
					")"
				];
				stack = this.topStack();
			}
			var item = callback.call(this, stack);
			if (!usedLiteral) this.popStack();
			if (createdStack) this.stackSlot--;
			this.push(prefix$1.concat(item, ")"));
		},
		incrStack: function incrStack() {
			this.stackSlot++;
			if (this.stackSlot > this.stackVars.length) this.stackVars.push("stack" + this.stackSlot);
			return this.topStackName();
		},
		topStackName: function topStackName() {
			return "stack" + this.stackSlot;
		},
		flushInline: function flushInline() {
			var inlineStack = this.inlineStack;
			this.inlineStack = [];
			for (var i$6 = 0, len = inlineStack.length; i$6 < len; i$6++) {
				var entry = inlineStack[i$6];
				/* istanbul ignore if */
				if (entry instanceof Literal) this.compileStack.push(entry);
				else {
					var stack = this.incrStack();
					this.pushSource([
						stack,
						" = ",
						entry,
						";"
					]);
					this.compileStack.push(stack);
				}
			}
		},
		isInline: function isInline() {
			return this.inlineStack.length;
		},
		popStack: function popStack(wrapped) {
			var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
			if (!wrapped && item instanceof Literal) return item.value;
			else {
				if (!inline) {
					/* istanbul ignore next */
					if (!this.stackSlot) throw new _exception2["default"]("Invalid stack pop");
					this.stackSlot--;
				}
				return item;
			}
		},
		topStack: function topStack() {
			var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
			/* istanbul ignore if */
			if (item instanceof Literal) return item.value;
			else return item;
		},
		contextName: function contextName(context) {
			if (this.useDepths && context) return "depths[" + context + "]";
			else return "depth" + context;
		},
		quotedString: function quotedString(str$4) {
			return this.source.quotedString(str$4);
		},
		objectLiteral: function objectLiteral(obj) {
			return this.source.objectLiteral(obj);
		},
		aliasable: function aliasable(name) {
			var ret$1 = this.aliases[name];
			if (ret$1) {
				ret$1.referenceCount++;
				return ret$1;
			}
			ret$1 = this.aliases[name] = this.source.wrap(name);
			ret$1.aliasable = true;
			ret$1.referenceCount = 1;
			return ret$1;
		},
		setupHelper: function setupHelper(paramSize, name, blockHelper) {
			var params = [], paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
			var foundHelper = this.nameLookup("helpers", name, "helper"), callContext = this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || {})");
			return {
				params,
				paramsInit,
				name: foundHelper,
				callParams: [callContext].concat(params)
			};
		},
		setupParams: function setupParams(helper, paramSize, params) {
			var options = {}, contexts = [], types$7 = [], ids = [], objectArgs = !params, param = void 0;
			if (objectArgs) params = [];
			options.name = this.quotedString(helper);
			options.hash = this.popStack();
			if (this.trackIds) options.hashIds = this.popStack();
			if (this.stringParams) {
				options.hashTypes = this.popStack();
				options.hashContexts = this.popStack();
			}
			var inverse = this.popStack(), program$3 = this.popStack();
			if (program$3 || inverse) {
				options.fn = program$3 || "container.noop";
				options.inverse = inverse || "container.noop";
			}
			var i$6 = paramSize;
			while (i$6--) {
				param = this.popStack();
				params[i$6] = param;
				if (this.trackIds) ids[i$6] = this.popStack();
				if (this.stringParams) {
					types$7[i$6] = this.popStack();
					contexts[i$6] = this.popStack();
				}
			}
			if (objectArgs) options.args = this.source.generateArray(params);
			if (this.trackIds) options.ids = this.source.generateArray(ids);
			if (this.stringParams) {
				options.types = this.source.generateArray(types$7);
				options.contexts = this.source.generateArray(contexts);
			}
			if (this.options.data) options.data = "data";
			if (this.useBlockParams) options.blockParams = "blockParams";
			return options;
		},
		setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
			var options = this.setupParams(helper, paramSize, params);
			options.loc = JSON.stringify(this.source.currentLocation);
			options = this.objectLiteral(options);
			if (useRegister) {
				this.useRegister("options");
				params.push("options");
				return ["options=", options];
			} else if (params) {
				params.push(options);
				return "";
			} else return options;
		}
	};
	(function() {
		var reservedWords$3 = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" ");
		var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
		for (var i$6 = 0, l$1 = reservedWords$3.length; i$6 < l$1; i$6++) compilerWords[reservedWords$3[i$6]] = true;
	})();
	/**
	* @deprecated May be removed in the next major version
	*/
	JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
		return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};
	function strictLookup(requireTerminal, compiler, parts, i$6, type) {
		var stack = compiler.popStack(), len = parts.length;
		if (requireTerminal) len--;
		for (; i$6 < len; i$6++) stack = compiler.nameLookup(stack, parts[i$6], type);
		if (requireTerminal) return [
			compiler.aliasable("container.strict"),
			"(",
			stack,
			", ",
			compiler.quotedString(parts[i$6]),
			", ",
			JSON.stringify(compiler.source.currentLocation),
			" )"
		];
		else return stack;
	}
	exports["default"] = JavaScriptCompiler;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars.js
var require_handlebars = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars.js"(exports, module) {
	exports.__esModule = true;
	// istanbul ignore next
	function _interopRequireDefault$44(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _handlebarsRuntime = require_handlebars_runtime();
	var _handlebarsRuntime2 = _interopRequireDefault$44(_handlebarsRuntime);
	var _handlebarsCompilerAst = require_ast();
	var _handlebarsCompilerAst2 = _interopRequireDefault$44(_handlebarsCompilerAst);
	var _handlebarsCompilerBase = require_base$1();
	var _handlebarsCompilerCompiler = require_compiler();
	var _handlebarsCompilerJavascriptCompiler = require_javascript_compiler();
	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault$44(_handlebarsCompilerJavascriptCompiler);
	var _handlebarsCompilerVisitor = require_visitor();
	var _handlebarsCompilerVisitor2 = _interopRequireDefault$44(_handlebarsCompilerVisitor);
	var _handlebarsNoConflict = require_no_conflict();
	var _handlebarsNoConflict2 = _interopRequireDefault$44(_handlebarsNoConflict);
	var _create = _handlebarsRuntime2["default"].create;
	function create$3() {
		var hb = _create();
		hb.compile = function(input, options) {
			return _handlebarsCompilerCompiler.compile(input, options, hb);
		};
		hb.precompile = function(input, options) {
			return _handlebarsCompilerCompiler.precompile(input, options, hb);
		};
		hb.AST = _handlebarsCompilerAst2["default"];
		hb.Compiler = _handlebarsCompilerCompiler.Compiler;
		hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2["default"];
		hb.Parser = _handlebarsCompilerBase.parser;
		hb.parse = _handlebarsCompilerBase.parse;
		hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;
		return hb;
	}
	var inst = create$3();
	inst.create = create$3;
	_handlebarsNoConflict2["default"](inst);
	inst.Visitor = _handlebarsCompilerVisitor2["default"];
	inst["default"] = inst;
	exports["default"] = inst;
	module.exports = exports["default"];
} });

//#endregion
//#region node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js
var require_printer$1 = __commonJS({ "node_modules/handlebars/dist/cjs/handlebars/compiler/printer.js"(exports) {
	exports.__esModule = true;
	exports.print = print;
	exports.PrintVisitor = PrintVisitor;
	// istanbul ignore next
	function _interopRequireDefault$43(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var _visitor = require_visitor();
	var _visitor2 = _interopRequireDefault$43(_visitor);
	function print(ast) {
		return new PrintVisitor().accept(ast);
	}
	function PrintVisitor() {
		this.padding = 0;
	}
	PrintVisitor.prototype = new _visitor2["default"]();
	PrintVisitor.prototype.pad = function(string$3) {
		var out = "";
		for (var i$6 = 0, l$1 = this.padding; i$6 < l$1; i$6++) out += "  ";
		out += string$3 + "\n";
		return out;
	};
	PrintVisitor.prototype.Program = function(program$3) {
		var out = "", body = program$3.body, i$6 = void 0, l$1 = void 0;
		if (program$3.blockParams) {
			var blockParams$1 = "BLOCK PARAMS: [";
			for (i$6 = 0, l$1 = program$3.blockParams.length; i$6 < l$1; i$6++) blockParams$1 += " " + program$3.blockParams[i$6];
			blockParams$1 += " ]";
			out += this.pad(blockParams$1);
		}
		for (i$6 = 0, l$1 = body.length; i$6 < l$1; i$6++) out += this.accept(body[i$6]);
		this.padding--;
		return out;
	};
	PrintVisitor.prototype.MustacheStatement = function(mustache) {
		return this.pad("{{ " + this.SubExpression(mustache) + " }}");
	};
	PrintVisitor.prototype.Decorator = function(mustache) {
		return this.pad("{{ DIRECTIVE " + this.SubExpression(mustache) + " }}");
	};
	PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function(block) {
		var out = "";
		out += this.pad((block.type === "DecoratorBlock" ? "DIRECTIVE " : "") + "BLOCK:");
		this.padding++;
		out += this.pad(this.SubExpression(block));
		if (block.program) {
			out += this.pad("PROGRAM:");
			this.padding++;
			out += this.accept(block.program);
			this.padding--;
		}
		if (block.inverse) {
			if (block.program) this.padding++;
			out += this.pad("{{^}}");
			this.padding++;
			out += this.accept(block.inverse);
			this.padding--;
			if (block.program) this.padding--;
		}
		this.padding--;
		return out;
	};
	PrintVisitor.prototype.PartialStatement = function(partial) {
		var content = "PARTIAL:" + partial.name.original;
		if (partial.params[0]) content += " " + this.accept(partial.params[0]);
		if (partial.hash) content += " " + this.accept(partial.hash);
		return this.pad("{{> " + content + " }}");
	};
	PrintVisitor.prototype.PartialBlockStatement = function(partial) {
		var content = "PARTIAL BLOCK:" + partial.name.original;
		if (partial.params[0]) content += " " + this.accept(partial.params[0]);
		if (partial.hash) content += " " + this.accept(partial.hash);
		content += " " + this.pad("PROGRAM:");
		this.padding++;
		content += this.accept(partial.program);
		this.padding--;
		return this.pad("{{> " + content + " }}");
	};
	PrintVisitor.prototype.ContentStatement = function(content) {
		return this.pad("CONTENT[ '" + content.value + "' ]");
	};
	PrintVisitor.prototype.CommentStatement = function(comment$7) {
		return this.pad("{{! '" + comment$7.value + "' }}");
	};
	PrintVisitor.prototype.SubExpression = function(sexpr) {
		var params = sexpr.params, paramStrings = [], hash$2 = void 0;
		for (var i$6 = 0, l$1 = params.length; i$6 < l$1; i$6++) paramStrings.push(this.accept(params[i$6]));
		params = "[" + paramStrings.join(", ") + "]";
		hash$2 = sexpr.hash ? " " + this.accept(sexpr.hash) : "";
		return this.accept(sexpr.path) + " " + params + hash$2;
	};
	PrintVisitor.prototype.PathExpression = function(id$4) {
		var path$28 = id$4.parts.join("/");
		return (id$4.data ? "@" : "") + "PATH:" + path$28;
	};
	PrintVisitor.prototype.StringLiteral = function(string$3) {
		return "\"" + string$3.value + "\"";
	};
	PrintVisitor.prototype.NumberLiteral = function(number) {
		return "NUMBER{" + number.value + "}";
	};
	PrintVisitor.prototype.BooleanLiteral = function(bool$1) {
		return "BOOLEAN{" + bool$1.value + "}";
	};
	PrintVisitor.prototype.UndefinedLiteral = function() {
		return "UNDEFINED";
	};
	PrintVisitor.prototype.NullLiteral = function() {
		return "NULL";
	};
	PrintVisitor.prototype.Hash = function(hash$2) {
		var pairs = hash$2.pairs, joinedPairs = [];
		for (var i$6 = 0, l$1 = pairs.length; i$6 < l$1; i$6++) joinedPairs.push(this.accept(pairs[i$6]));
		return "HASH{" + joinedPairs.join(", ") + "}";
	};
	PrintVisitor.prototype.HashPair = function(pair) {
		return pair.key + "=" + this.accept(pair.value);
	};
} });

//#endregion
//#region node_modules/handlebars/lib/index.js
var require_lib$16 = __commonJS({ "node_modules/handlebars/lib/index.js"(exports, module) {
	var handlebars = require_handlebars()["default"];
	var printer = require_printer$1();
	handlebars.PrintVisitor = printer.PrintVisitor;
	handlebars.print = printer.print;
	module.exports = handlebars;
	function extension(module$1, filename) {
		var fs$25 = __require("fs");
		var templateString = fs$25.readFileSync(filename, "utf8");
		module$1.exports = handlebars.compile(templateString);
	}
	/* istanbul ignore else */
	if (typeof __require !== "undefined" && __require.extensions) {
		__require.extensions[".handlebars"] = extension;
		__require.extensions[".hbs"] = extension;
	}
} });

//#endregion
//#region ../../node_modules/underscore/underscore.js
var require_underscore = __commonJS({ "../../node_modules/underscore/underscore.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define("underscore", factory) : (global$1 = global$1 || self, function() {
			var current = global$1._;
			var exports$1 = global$1._ = factory();
			exports$1.noConflict = function() {
				global$1._ = current;
				return exports$1;
			};
		}());
	})(exports, function() {
		var VERSION$1 = "1.12.1";
		var root$5 = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
		var ArrayProto = Array.prototype, ObjProto = Object.prototype;
		var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
		var push$1 = ArrayProto.push, slice$2 = ArrayProto.slice, toString$5 = ObjProto.toString, hasOwnProperty$5 = ObjProto.hasOwnProperty;
		var supportsArrayBuffer = typeof ArrayBuffer !== "undefined", supportsDataView = typeof DataView !== "undefined";
		var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeCreate = Object.create, nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
		var _isNaN = isNaN, _isFinite = isFinite;
		var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
		var nonEnumerableProps = [
			"valueOf",
			"isPrototypeOf",
			"toString",
			"propertyIsEnumerable",
			"hasOwnProperty",
			"toLocaleString"
		];
		var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
		function restArguments(func, startIndex) {
			startIndex = startIndex == null ? func.length - 1 : +startIndex;
			return function() {
				var length = Math.max(arguments.length - startIndex, 0), rest$1 = Array(length), index$1 = 0;
				for (; index$1 < length; index$1++) rest$1[index$1] = arguments[index$1 + startIndex];
				switch (startIndex) {
					case 0: return func.call(this, rest$1);
					case 1: return func.call(this, arguments[0], rest$1);
					case 2: return func.call(this, arguments[0], arguments[1], rest$1);
				}
				var args = Array(startIndex + 1);
				for (index$1 = 0; index$1 < startIndex; index$1++) args[index$1] = arguments[index$1];
				args[startIndex] = rest$1;
				return func.apply(this, args);
			};
		}
		function isObject$5(obj) {
			var type = typeof obj;
			return type === "function" || type === "object" && !!obj;
		}
		function isNull(obj) {
			return obj === null;
		}
		function isUndefined(obj) {
			return obj === void 0;
		}
		function isBoolean(obj) {
			return obj === true || obj === false || toString$5.call(obj) === "[object Boolean]";
		}
		function isElement(obj) {
			return !!(obj && obj.nodeType === 1);
		}
		function tagTester(name) {
			var tag$3 = "[object " + name + "]";
			return function(obj) {
				return toString$5.call(obj) === tag$3;
			};
		}
		var isString$5 = tagTester("String");
		var isNumber$2 = tagTester("Number");
		var isDate$1 = tagTester("Date");
		var isRegExp$1 = tagTester("RegExp");
		var isError$1 = tagTester("Error");
		var isSymbol$2 = tagTester("Symbol");
		var isArrayBuffer = tagTester("ArrayBuffer");
		var isFunction$10 = tagTester("Function");
		var nodelist = root$5.document && root$5.document.childNodes;
		if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") isFunction$10 = function(obj) {
			return typeof obj == "function" || false;
		};
		var isFunction$1$1 = isFunction$10;
		var hasObjectTag = tagTester("Object");
		var hasStringTagBug = supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8))), isIE11 = typeof Map !== "undefined" && hasObjectTag(new Map());
		var isDataView = tagTester("DataView");
		function ie10IsDataView(obj) {
			return obj != null && isFunction$1$1(obj.getInt8) && isArrayBuffer(obj.buffer);
		}
		var isDataView$1 = hasStringTagBug ? ie10IsDataView : isDataView;
		var isArray$5 = nativeIsArray || tagTester("Array");
		function has$3(obj, key) {
			return obj != null && hasOwnProperty$5.call(obj, key);
		}
		var isArguments = tagTester("Arguments");
		(function() {
			if (!isArguments(arguments)) isArguments = function(obj) {
				return has$3(obj, "callee");
			};
		})();
		var isArguments$1 = isArguments;
		function isFinite$1(obj) {
			return !isSymbol$2(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
		}
		function isNaN$1(obj) {
			return isNumber$2(obj) && _isNaN(obj);
		}
		function constant(value) {
			return function() {
				return value;
			};
		}
		function createSizePropertyCheck(getSizeProperty) {
			return function(collection) {
				var sizeProperty = getSizeProperty(collection);
				return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
			};
		}
		function shallowProperty(key) {
			return function(obj) {
				return obj == null ? void 0 : obj[key];
			};
		}
		var getByteLength = shallowProperty("byteLength");
		var isBufferLike = createSizePropertyCheck(getByteLength);
		var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
		function isTypedArray(obj) {
			return nativeIsView ? nativeIsView(obj) && !isDataView$1(obj) : isBufferLike(obj) && typedArrayPattern.test(toString$5.call(obj));
		}
		var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
		var getLength = shallowProperty("length");
		function emulatedSet(keys$2) {
			var hash$2 = {};
			for (var l$1 = keys$2.length, i$6 = 0; i$6 < l$1; ++i$6) hash$2[keys$2[i$6]] = true;
			return {
				contains: function(key) {
					return hash$2[key];
				},
				push: function(key) {
					hash$2[key] = true;
					return keys$2.push(key);
				}
			};
		}
		function collectNonEnumProps(obj, keys$2) {
			keys$2 = emulatedSet(keys$2);
			var nonEnumIdx = nonEnumerableProps.length;
			var constructor = obj.constructor;
			var proto$1 = isFunction$1$1(constructor) && constructor.prototype || ObjProto;
			var prop = "constructor";
			if (has$3(obj, prop) && !keys$2.contains(prop)) keys$2.push(prop);
			while (nonEnumIdx--) {
				prop = nonEnumerableProps[nonEnumIdx];
				if (prop in obj && obj[prop] !== proto$1[prop] && !keys$2.contains(prop)) keys$2.push(prop);
			}
		}
		function keys$1(obj) {
			if (!isObject$5(obj)) return [];
			if (nativeKeys) return nativeKeys(obj);
			var keys$2 = [];
			for (var key in obj) if (has$3(obj, key)) keys$2.push(key);
			if (hasEnumBug) collectNonEnumProps(obj, keys$2);
			return keys$2;
		}
		function isEmpty$1(obj) {
			if (obj == null) return true;
			var length = getLength(obj);
			if (typeof length == "number" && (isArray$5(obj) || isString$5(obj) || isArguments$1(obj))) return length === 0;
			return getLength(keys$1(obj)) === 0;
		}
		function isMatch(object$3, attrs) {
			var _keys = keys$1(attrs), length = _keys.length;
			if (object$3 == null) return !length;
			var obj = Object(object$3);
			for (var i$6 = 0; i$6 < length; i$6++) {
				var key = _keys[i$6];
				if (attrs[key] !== obj[key] || !(key in obj)) return false;
			}
			return true;
		}
		function _(obj) {
			if (obj instanceof _) return obj;
			if (!(this instanceof _)) return new _(obj);
			this._wrapped = obj;
		}
		_.VERSION = VERSION$1;
		_.prototype.value = function() {
			return this._wrapped;
		};
		_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
		_.prototype.toString = function() {
			return String(this._wrapped);
		};
		function toBufferView(bufferSource) {
			return new Uint8Array(bufferSource.buffer || bufferSource, bufferSource.byteOffset || 0, getByteLength(bufferSource));
		}
		var tagDataView = "[object DataView]";
		function eq(a$1, b$1, aStack, bStack) {
			if (a$1 === b$1) return a$1 !== 0 || 1 / a$1 === 1 / b$1;
			if (a$1 == null || b$1 == null) return false;
			if (a$1 !== a$1) return b$1 !== b$1;
			var type = typeof a$1;
			if (type !== "function" && type !== "object" && typeof b$1 != "object") return false;
			return deepEq(a$1, b$1, aStack, bStack);
		}
		function deepEq(a$1, b$1, aStack, bStack) {
			if (a$1 instanceof _) a$1 = a$1._wrapped;
			if (b$1 instanceof _) b$1 = b$1._wrapped;
			var className$3 = toString$5.call(a$1);
			if (className$3 !== toString$5.call(b$1)) return false;
			if (hasStringTagBug && className$3 == "[object Object]" && isDataView$1(a$1)) {
				if (!isDataView$1(b$1)) return false;
				className$3 = tagDataView;
			}
			switch (className$3) {
				case "[object RegExp]":
				case "[object String]": return "" + a$1 === "" + b$1;
				case "[object Number]":
					if (+a$1 !== +a$1) return +b$1 !== +b$1;
					return +a$1 === 0 ? 1 / +a$1 === 1 / b$1 : +a$1 === +b$1;
				case "[object Date]":
				case "[object Boolean]": return +a$1 === +b$1;
				case "[object Symbol]": return SymbolProto.valueOf.call(a$1) === SymbolProto.valueOf.call(b$1);
				case "[object ArrayBuffer]":
				case tagDataView: return deepEq(toBufferView(a$1), toBufferView(b$1), aStack, bStack);
			}
			var areArrays = className$3 === "[object Array]";
			if (!areArrays && isTypedArray$1(a$1)) {
				var byteLength = getByteLength(a$1);
				if (byteLength !== getByteLength(b$1)) return false;
				if (a$1.buffer === b$1.buffer && a$1.byteOffset === b$1.byteOffset) return true;
				areArrays = true;
			}
			if (!areArrays) {
				if (typeof a$1 != "object" || typeof b$1 != "object") return false;
				var aCtor = a$1.constructor, bCtor = b$1.constructor;
				if (aCtor !== bCtor && !(isFunction$1$1(aCtor) && aCtor instanceof aCtor && isFunction$1$1(bCtor) && bCtor instanceof bCtor) && "constructor" in a$1 && "constructor" in b$1) return false;
			}
			aStack = aStack || [];
			bStack = bStack || [];
			var length = aStack.length;
			while (length--) if (aStack[length] === a$1) return bStack[length] === b$1;
			aStack.push(a$1);
			bStack.push(b$1);
			if (areArrays) {
				length = a$1.length;
				if (length !== b$1.length) return false;
				while (length--) if (!eq(a$1[length], b$1[length], aStack, bStack)) return false;
			} else {
				var _keys = keys$1(a$1), key;
				length = _keys.length;
				if (keys$1(b$1).length !== length) return false;
				while (length--) {
					key = _keys[length];
					if (!(has$3(b$1, key) && eq(a$1[key], b$1[key], aStack, bStack))) return false;
				}
			}
			aStack.pop();
			bStack.pop();
			return true;
		}
		function isEqual(a$1, b$1) {
			return eq(a$1, b$1);
		}
		function allKeys(obj) {
			if (!isObject$5(obj)) return [];
			var keys$2 = [];
			for (var key in obj) keys$2.push(key);
			if (hasEnumBug) collectNonEnumProps(obj, keys$2);
			return keys$2;
		}
		function ie11fingerprint(methods$2) {
			var length = getLength(methods$2);
			return function(obj) {
				if (obj == null) return false;
				var keys$2 = allKeys(obj);
				if (getLength(keys$2)) return false;
				for (var i$6 = 0; i$6 < length; i$6++) if (!isFunction$1$1(obj[methods$2[i$6]])) return false;
				return methods$2 !== weakMapMethods || !isFunction$1$1(obj[forEachName]);
			};
		}
		var forEachName = "forEach", hasName = "has", commonInit = ["clear", "delete"], mapTail = [
			"get",
			hasName,
			"set"
		];
		var mapMethods = commonInit.concat(forEachName, mapTail), weakMapMethods = commonInit.concat(mapTail), setMethods = ["add"].concat(commonInit, forEachName, hasName);
		var isMap$2 = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");
		var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");
		var isSet$2 = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");
		var isWeakSet = tagTester("WeakSet");
		function values(obj) {
			var _keys = keys$1(obj);
			var length = _keys.length;
			var values$1 = Array(length);
			for (var i$6 = 0; i$6 < length; i$6++) values$1[i$6] = obj[_keys[i$6]];
			return values$1;
		}
		function pairs(obj) {
			var _keys = keys$1(obj);
			var length = _keys.length;
			var pairs$1 = Array(length);
			for (var i$6 = 0; i$6 < length; i$6++) pairs$1[i$6] = [_keys[i$6], obj[_keys[i$6]]];
			return pairs$1;
		}
		function invert(obj) {
			var result$1 = {};
			var _keys = keys$1(obj);
			for (var i$6 = 0, length = _keys.length; i$6 < length; i$6++) result$1[obj[_keys[i$6]]] = _keys[i$6];
			return result$1;
		}
		function functions(obj) {
			var names = [];
			for (var key in obj) if (isFunction$1$1(obj[key])) names.push(key);
			return names.sort();
		}
		function createAssigner(keysFunc, defaults$3) {
			return function(obj) {
				var length = arguments.length;
				if (defaults$3) obj = Object(obj);
				if (length < 2 || obj == null) return obj;
				for (var index$1 = 1; index$1 < length; index$1++) {
					var source = arguments[index$1], keys$2 = keysFunc(source), l$1 = keys$2.length;
					for (var i$6 = 0; i$6 < l$1; i$6++) {
						var key = keys$2[i$6];
						if (!defaults$3 || obj[key] === void 0) obj[key] = source[key];
					}
				}
				return obj;
			};
		}
		var extend$4 = createAssigner(allKeys);
		var extendOwn = createAssigner(keys$1);
		var defaults$2 = createAssigner(allKeys, true);
		function ctor() {
			return function() {};
		}
		function baseCreate(prototype) {
			if (!isObject$5(prototype)) return {};
			if (nativeCreate) return nativeCreate(prototype);
			var Ctor = ctor();
			Ctor.prototype = prototype;
			var result$1 = new Ctor();
			Ctor.prototype = null;
			return result$1;
		}
		function create$5(prototype, props) {
			var result$1 = baseCreate(prototype);
			if (props) extendOwn(result$1, props);
			return result$1;
		}
		function clone$4(obj) {
			if (!isObject$5(obj)) return obj;
			return isArray$5(obj) ? obj.slice() : extend$4({}, obj);
		}
		function tap(obj, interceptor) {
			interceptor(obj);
			return obj;
		}
		function toPath(path$28) {
			return isArray$5(path$28) ? path$28 : [path$28];
		}
		_.toPath = toPath;
		function toPath$1(path$28) {
			return _.toPath(path$28);
		}
		function deepGet(obj, path$28) {
			var length = path$28.length;
			for (var i$6 = 0; i$6 < length; i$6++) {
				if (obj == null) return void 0;
				obj = obj[path$28[i$6]];
			}
			return length ? obj : void 0;
		}
		function get$2(object$3, path$28, defaultValue) {
			var value = deepGet(object$3, toPath$1(path$28));
			return isUndefined(value) ? defaultValue : value;
		}
		function has$1$1(obj, path$28) {
			path$28 = toPath$1(path$28);
			var length = path$28.length;
			for (var i$6 = 0; i$6 < length; i$6++) {
				var key = path$28[i$6];
				if (!has$3(obj, key)) return false;
				obj = obj[key];
			}
			return !!length;
		}
		function identity$2(value) {
			return value;
		}
		function matcher(attrs) {
			attrs = extendOwn({}, attrs);
			return function(obj) {
				return isMatch(obj, attrs);
			};
		}
		function property(path$28) {
			path$28 = toPath$1(path$28);
			return function(obj) {
				return deepGet(obj, path$28);
			};
		}
		function optimizeCb(func, context, argCount) {
			if (context === void 0) return func;
			switch (argCount == null ? 3 : argCount) {
				case 1: return function(value) {
					return func.call(context, value);
				};
				case 3: return function(value, index$1, collection) {
					return func.call(context, value, index$1, collection);
				};
				case 4: return function(accumulator, value, index$1, collection) {
					return func.call(context, accumulator, value, index$1, collection);
				};
			}
			return function() {
				return func.apply(context, arguments);
			};
		}
		function baseIteratee(value, context, argCount) {
			if (value == null) return identity$2;
			if (isFunction$1$1(value)) return optimizeCb(value, context, argCount);
			if (isObject$5(value) && !isArray$5(value)) return matcher(value);
			return property(value);
		}
		function iteratee(value, context) {
			return baseIteratee(value, context, Infinity);
		}
		_.iteratee = iteratee;
		function cb(value, context, argCount) {
			if (_.iteratee !== iteratee) return _.iteratee(value, context);
			return baseIteratee(value, context, argCount);
		}
		function mapObject(obj, iteratee$1, context) {
			iteratee$1 = cb(iteratee$1, context);
			var _keys = keys$1(obj), length = _keys.length, results = {};
			for (var index$1 = 0; index$1 < length; index$1++) {
				var currentKey = _keys[index$1];
				results[currentKey] = iteratee$1(obj[currentKey], currentKey, obj);
			}
			return results;
		}
		function noop$3() {}
		function propertyOf(obj) {
			if (obj == null) return noop$3;
			return function(path$28) {
				return get$2(obj, path$28);
			};
		}
		function times(n$4, iteratee$1, context) {
			var accum = Array(Math.max(0, n$4));
			iteratee$1 = optimizeCb(iteratee$1, context, 1);
			for (var i$6 = 0; i$6 < n$4; i$6++) accum[i$6] = iteratee$1(i$6);
			return accum;
		}
		function random(min$1, max$2) {
			if (max$2 == null) {
				max$2 = min$1;
				min$1 = 0;
			}
			return min$1 + Math.floor(Math.random() * (max$2 - min$1 + 1));
		}
		var now = Date.now || function() {
			return new Date().getTime();
		};
		function createEscaper(map$1) {
			var escaper = function(match) {
				return map$1[match];
			};
			var source = "(?:" + keys$1(map$1).join("|") + ")";
			var testRegexp = RegExp(source);
			var replaceRegexp = RegExp(source, "g");
			return function(string$3) {
				string$3 = string$3 == null ? "" : "" + string$3;
				return testRegexp.test(string$3) ? string$3.replace(replaceRegexp, escaper) : string$3;
			};
		}
		var escapeMap = {
			"&": "&amp;",
			"<": "&lt;",
			">": "&gt;",
			"\"": "&quot;",
			"'": "&#x27;",
			"`": "&#x60;"
		};
		var _escape = createEscaper(escapeMap);
		var unescapeMap = invert(escapeMap);
		var _unescape = createEscaper(unescapeMap);
		var templateSettings = _.templateSettings = {
			evaluate: /<%([\s\S]+?)%>/g,
			interpolate: /<%=([\s\S]+?)%>/g,
			escape: /<%-([\s\S]+?)%>/g
		};
		var noMatch = /(.)^/;
		var escapes = {
			"'": "'",
			"\\": "\\",
			"\r": "r",
			"\n": "n",
			"\u2028": "u2028",
			"\u2029": "u2029"
		};
		var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
		function escapeChar$1(match) {
			return "\\" + escapes[match];
		}
		var bareIdentifier = /^\s*(\w|\$)+\s*$/;
		function template$1(text, settings, oldSettings) {
			if (!settings && oldSettings) settings = oldSettings;
			settings = defaults$2({}, settings, _.templateSettings);
			var matcher$1 = RegExp([
				(settings.escape || noMatch).source,
				(settings.interpolate || noMatch).source,
				(settings.evaluate || noMatch).source
			].join("|") + "|$", "g");
			var index$1 = 0;
			var source = "__p+='";
			text.replace(matcher$1, function(match, escape$2, interpolate, evaluate$1, offset) {
				source += text.slice(index$1, offset).replace(escapeRegExp, escapeChar$1);
				index$1 = offset + match.length;
				if (escape$2) source += "'+\n((__t=(" + escape$2 + "))==null?'':_.escape(__t))+\n'";
				else if (interpolate) source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
				else if (evaluate$1) source += "';\n" + evaluate$1 + "\n__p+='";
				return match;
			});
			source += "';\n";
			var argument = settings.variable;
			if (argument) {
				if (!bareIdentifier.test(argument)) throw new Error(argument);
			} else {
				source = "with(obj||{}){\n" + source + "}\n";
				argument = "obj";
			}
			source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
			var render$1;
			try {
				render$1 = new Function(argument, "_", source);
			} catch (e$2) {
				e$2.source = source;
				throw e$2;
			}
			var template$2 = function(data$2) {
				return render$1.call(this, data$2, _);
			};
			template$2.source = "function(" + argument + "){\n" + source + "}";
			return template$2;
		}
		function result(obj, path$28, fallback) {
			path$28 = toPath$1(path$28);
			var length = path$28.length;
			if (!length) return isFunction$1$1(fallback) ? fallback.call(obj) : fallback;
			for (var i$6 = 0; i$6 < length; i$6++) {
				var prop = obj == null ? void 0 : obj[path$28[i$6]];
				if (prop === void 0) {
					prop = fallback;
					i$6 = length;
				}
				obj = isFunction$1$1(prop) ? prop.call(obj) : prop;
			}
			return obj;
		}
		var idCounter = 0;
		function uniqueId(prefix$1) {
			var id$4 = ++idCounter + "";
			return prefix$1 ? prefix$1 + id$4 : id$4;
		}
		function chain$1(obj) {
			var instance = _(obj);
			instance._chain = true;
			return instance;
		}
		function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
			if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
			var self$1 = baseCreate(sourceFunc.prototype);
			var result$1 = sourceFunc.apply(self$1, args);
			if (isObject$5(result$1)) return result$1;
			return self$1;
		}
		var partial = restArguments(function(func, boundArgs) {
			var placeholder$1 = partial.placeholder;
			var bound = function() {
				var position = 0, length = boundArgs.length;
				var args = Array(length);
				for (var i$6 = 0; i$6 < length; i$6++) args[i$6] = boundArgs[i$6] === placeholder$1 ? arguments[position++] : boundArgs[i$6];
				while (position < arguments.length) args.push(arguments[position++]);
				return executeBound(func, bound, this, this, args);
			};
			return bound;
		});
		partial.placeholder = _;
		var bind$1 = restArguments(function(func, context, args) {
			if (!isFunction$1$1(func)) throw new TypeError("Bind must be called on a function");
			var bound = restArguments(function(callArgs) {
				return executeBound(func, bound, context, this, args.concat(callArgs));
			});
			return bound;
		});
		var isArrayLike = createSizePropertyCheck(getLength);
		function flatten(input, depth$1, strict, output) {
			output = output || [];
			if (!depth$1 && depth$1 !== 0) depth$1 = Infinity;
			else if (depth$1 <= 0) return output.concat(input);
			var idx = output.length;
			for (var i$6 = 0, length = getLength(input); i$6 < length; i$6++) {
				var value = input[i$6];
				if (isArrayLike(value) && (isArray$5(value) || isArguments$1(value))) if (depth$1 > 1) {
					flatten(value, depth$1 - 1, strict, output);
					idx = output.length;
				} else {
					var j$1 = 0, len = value.length;
					while (j$1 < len) output[idx++] = value[j$1++];
				}
				else if (!strict) output[idx++] = value;
			}
			return output;
		}
		var bindAll = restArguments(function(obj, keys$2) {
			keys$2 = flatten(keys$2, false, false);
			var index$1 = keys$2.length;
			if (index$1 < 1) throw new Error("bindAll must be passed function names");
			while (index$1--) {
				var key = keys$2[index$1];
				obj[key] = bind$1(obj[key], obj);
			}
			return obj;
		});
		function memoize(func, hasher) {
			var memoize$1 = function(key) {
				var cache$3 = memoize$1.cache;
				var address = "" + (hasher ? hasher.apply(this, arguments) : key);
				if (!has$3(cache$3, address)) cache$3[address] = func.apply(this, arguments);
				return cache$3[address];
			};
			memoize$1.cache = {};
			return memoize$1;
		}
		var delay = restArguments(function(func, wait, args) {
			return setTimeout(function() {
				return func.apply(null, args);
			}, wait);
		});
		var defer = partial(delay, _, 1);
		function throttle(func, wait, options) {
			var timeout, context, args, result$1;
			var previous = 0;
			if (!options) options = {};
			var later = function() {
				previous = options.leading === false ? 0 : now();
				timeout = null;
				result$1 = func.apply(context, args);
				if (!timeout) context = args = null;
			};
			var throttled = function() {
				var _now = now();
				if (!previous && options.leading === false) previous = _now;
				var remaining = wait - (_now - previous);
				context = this;
				args = arguments;
				if (remaining <= 0 || remaining > wait) {
					if (timeout) {
						clearTimeout(timeout);
						timeout = null;
					}
					previous = _now;
					result$1 = func.apply(context, args);
					if (!timeout) context = args = null;
				} else if (!timeout && options.trailing !== false) timeout = setTimeout(later, remaining);
				return result$1;
			};
			throttled.cancel = function() {
				clearTimeout(timeout);
				previous = 0;
				timeout = context = args = null;
			};
			return throttled;
		}
		function debounce(func, wait, immediate) {
			var timeout, previous, args, result$1, context;
			var later = function() {
				var passed = now() - previous;
				if (wait > passed) timeout = setTimeout(later, wait - passed);
				else {
					timeout = null;
					if (!immediate) result$1 = func.apply(context, args);
					if (!timeout) args = context = null;
				}
			};
			var debounced = restArguments(function(_args) {
				context = this;
				args = _args;
				previous = now();
				if (!timeout) {
					timeout = setTimeout(later, wait);
					if (immediate) result$1 = func.apply(context, args);
				}
				return result$1;
			});
			debounced.cancel = function() {
				clearTimeout(timeout);
				timeout = args = context = null;
			};
			return debounced;
		}
		function wrap(func, wrapper) {
			return partial(wrapper, func);
		}
		function negate(predicate) {
			return function() {
				return !predicate.apply(this, arguments);
			};
		}
		function compose$1() {
			var args = arguments;
			var start = args.length - 1;
			return function() {
				var i$6 = start;
				var result$1 = args[start].apply(this, arguments);
				while (i$6--) result$1 = args[i$6].call(this, result$1);
				return result$1;
			};
		}
		function after(times$1, func) {
			return function() {
				if (--times$1 < 1) return func.apply(this, arguments);
			};
		}
		function before(times$1, func) {
			var memo;
			return function() {
				if (--times$1 > 0) memo = func.apply(this, arguments);
				if (times$1 <= 1) func = null;
				return memo;
			};
		}
		var once$3 = partial(before, 2);
		function findKey(obj, predicate, context) {
			predicate = cb(predicate, context);
			var _keys = keys$1(obj), key;
			for (var i$6 = 0, length = _keys.length; i$6 < length; i$6++) {
				key = _keys[i$6];
				if (predicate(obj[key], key, obj)) return key;
			}
		}
		function createPredicateIndexFinder(dir) {
			return function(array, predicate, context) {
				predicate = cb(predicate, context);
				var length = getLength(array);
				var index$1 = dir > 0 ? 0 : length - 1;
				for (; index$1 >= 0 && index$1 < length; index$1 += dir) if (predicate(array[index$1], index$1, array)) return index$1;
				return -1;
			};
		}
		var findIndex = createPredicateIndexFinder(1);
		var findLastIndex = createPredicateIndexFinder(-1);
		function sortedIndex(array, obj, iteratee$1, context) {
			iteratee$1 = cb(iteratee$1, context, 1);
			var value = iteratee$1(obj);
			var low = 0, high = getLength(array);
			while (low < high) {
				var mid = Math.floor((low + high) / 2);
				if (iteratee$1(array[mid]) < value) low = mid + 1;
				else high = mid;
			}
			return low;
		}
		function createIndexFinder(dir, predicateFind, sortedIndex$1) {
			return function(array, item, idx) {
				var i$6 = 0, length = getLength(array);
				if (typeof idx == "number") if (dir > 0) i$6 = idx >= 0 ? idx : Math.max(idx + length, i$6);
				else length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
				else if (sortedIndex$1 && idx && length) {
					idx = sortedIndex$1(array, item);
					return array[idx] === item ? idx : -1;
				}
				if (item !== item) {
					idx = predicateFind(slice$2.call(array, i$6, length), isNaN$1);
					return idx >= 0 ? idx + i$6 : -1;
				}
				for (idx = dir > 0 ? i$6 : length - 1; idx >= 0 && idx < length; idx += dir) if (array[idx] === item) return idx;
				return -1;
			};
		}
		var indexOf$1 = createIndexFinder(1, findIndex, sortedIndex);
		var lastIndexOf = createIndexFinder(-1, findLastIndex);
		function find$2(obj, predicate, context) {
			var keyFinder = isArrayLike(obj) ? findIndex : findKey;
			var key = keyFinder(obj, predicate, context);
			if (key !== void 0 && key !== -1) return obj[key];
		}
		function findWhere(obj, attrs) {
			return find$2(obj, matcher(attrs));
		}
		function each(obj, iteratee$1, context) {
			iteratee$1 = optimizeCb(iteratee$1, context);
			var i$6, length;
			if (isArrayLike(obj)) for (i$6 = 0, length = obj.length; i$6 < length; i$6++) iteratee$1(obj[i$6], i$6, obj);
			else {
				var _keys = keys$1(obj);
				for (i$6 = 0, length = _keys.length; i$6 < length; i$6++) iteratee$1(obj[_keys[i$6]], _keys[i$6], obj);
			}
			return obj;
		}
		function map(obj, iteratee$1, context) {
			iteratee$1 = cb(iteratee$1, context);
			var _keys = !isArrayLike(obj) && keys$1(obj), length = (_keys || obj).length, results = Array(length);
			for (var index$1 = 0; index$1 < length; index$1++) {
				var currentKey = _keys ? _keys[index$1] : index$1;
				results[index$1] = iteratee$1(obj[currentKey], currentKey, obj);
			}
			return results;
		}
		function createReduce(dir) {
			var reducer = function(obj, iteratee$1, memo, initial$1) {
				var _keys = !isArrayLike(obj) && keys$1(obj), length = (_keys || obj).length, index$1 = dir > 0 ? 0 : length - 1;
				if (!initial$1) {
					memo = obj[_keys ? _keys[index$1] : index$1];
					index$1 += dir;
				}
				for (; index$1 >= 0 && index$1 < length; index$1 += dir) {
					var currentKey = _keys ? _keys[index$1] : index$1;
					memo = iteratee$1(memo, obj[currentKey], currentKey, obj);
				}
				return memo;
			};
			return function(obj, iteratee$1, memo, context) {
				var initial$1 = arguments.length >= 3;
				return reducer(obj, optimizeCb(iteratee$1, context, 4), memo, initial$1);
			};
		}
		var reduce = createReduce(1);
		var reduceRight = createReduce(-1);
		function filter$2(obj, predicate, context) {
			var results = [];
			predicate = cb(predicate, context);
			each(obj, function(value, index$1, list$4) {
				if (predicate(value, index$1, list$4)) results.push(value);
			});
			return results;
		}
		function reject(obj, predicate, context) {
			return filter$2(obj, negate(cb(predicate)), context);
		}
		function every(obj, predicate, context) {
			predicate = cb(predicate, context);
			var _keys = !isArrayLike(obj) && keys$1(obj), length = (_keys || obj).length;
			for (var index$1 = 0; index$1 < length; index$1++) {
				var currentKey = _keys ? _keys[index$1] : index$1;
				if (!predicate(obj[currentKey], currentKey, obj)) return false;
			}
			return true;
		}
		function some(obj, predicate, context) {
			predicate = cb(predicate, context);
			var _keys = !isArrayLike(obj) && keys$1(obj), length = (_keys || obj).length;
			for (var index$1 = 0; index$1 < length; index$1++) {
				var currentKey = _keys ? _keys[index$1] : index$1;
				if (predicate(obj[currentKey], currentKey, obj)) return true;
			}
			return false;
		}
		function contains(obj, item, fromIndex, guard) {
			if (!isArrayLike(obj)) obj = values(obj);
			if (typeof fromIndex != "number" || guard) fromIndex = 0;
			return indexOf$1(obj, item, fromIndex) >= 0;
		}
		var invoke = restArguments(function(obj, path$28, args) {
			var contextPath, func;
			if (isFunction$1$1(path$28)) func = path$28;
			else {
				path$28 = toPath$1(path$28);
				contextPath = path$28.slice(0, -1);
				path$28 = path$28[path$28.length - 1];
			}
			return map(obj, function(context) {
				var method = func;
				if (!method) {
					if (contextPath && contextPath.length) context = deepGet(context, contextPath);
					if (context == null) return void 0;
					method = context[path$28];
				}
				return method == null ? method : method.apply(context, args);
			});
		});
		function pluck(obj, key) {
			return map(obj, property(key));
		}
		function where(obj, attrs) {
			return filter$2(obj, matcher(attrs));
		}
		function max$1(obj, iteratee$1, context) {
			var result$1 = -Infinity, lastComputed = -Infinity, value, computed;
			if (iteratee$1 == null || typeof iteratee$1 == "number" && typeof obj[0] != "object" && obj != null) {
				obj = isArrayLike(obj) ? obj : values(obj);
				for (var i$6 = 0, length = obj.length; i$6 < length; i$6++) {
					value = obj[i$6];
					if (value != null && value > result$1) result$1 = value;
				}
			} else {
				iteratee$1 = cb(iteratee$1, context);
				each(obj, function(v$1, index$1, list$4) {
					computed = iteratee$1(v$1, index$1, list$4);
					if (computed > lastComputed || computed === -Infinity && result$1 === -Infinity) {
						result$1 = v$1;
						lastComputed = computed;
					}
				});
			}
			return result$1;
		}
		function min(obj, iteratee$1, context) {
			var result$1 = Infinity, lastComputed = Infinity, value, computed;
			if (iteratee$1 == null || typeof iteratee$1 == "number" && typeof obj[0] != "object" && obj != null) {
				obj = isArrayLike(obj) ? obj : values(obj);
				for (var i$6 = 0, length = obj.length; i$6 < length; i$6++) {
					value = obj[i$6];
					if (value != null && value < result$1) result$1 = value;
				}
			} else {
				iteratee$1 = cb(iteratee$1, context);
				each(obj, function(v$1, index$1, list$4) {
					computed = iteratee$1(v$1, index$1, list$4);
					if (computed < lastComputed || computed === Infinity && result$1 === Infinity) {
						result$1 = v$1;
						lastComputed = computed;
					}
				});
			}
			return result$1;
		}
		function sample(obj, n$4, guard) {
			if (n$4 == null || guard) {
				if (!isArrayLike(obj)) obj = values(obj);
				return obj[random(obj.length - 1)];
			}
			var sample$1 = isArrayLike(obj) ? clone$4(obj) : values(obj);
			var length = getLength(sample$1);
			n$4 = Math.max(Math.min(n$4, length), 0);
			var last$3 = length - 1;
			for (var index$1 = 0; index$1 < n$4; index$1++) {
				var rand = random(index$1, last$3);
				var temp = sample$1[index$1];
				sample$1[index$1] = sample$1[rand];
				sample$1[rand] = temp;
			}
			return sample$1.slice(0, n$4);
		}
		function shuffle(obj) {
			return sample(obj, Infinity);
		}
		function sortBy(obj, iteratee$1, context) {
			var index$1 = 0;
			iteratee$1 = cb(iteratee$1, context);
			return pluck(map(obj, function(value, key, list$4) {
				return {
					value,
					index: index$1++,
					criteria: iteratee$1(value, key, list$4)
				};
			}).sort(function(left, right) {
				var a$1 = left.criteria;
				var b$1 = right.criteria;
				if (a$1 !== b$1) {
					if (a$1 > b$1 || a$1 === void 0) return 1;
					if (a$1 < b$1 || b$1 === void 0) return -1;
				}
				return left.index - right.index;
			}), "value");
		}
		function group(behavior, partition$2) {
			return function(obj, iteratee$1, context) {
				var result$1 = partition$2 ? [[], []] : {};
				iteratee$1 = cb(iteratee$1, context);
				each(obj, function(value, index$1) {
					var key = iteratee$1(value, index$1, obj);
					behavior(result$1, value, key);
				});
				return result$1;
			};
		}
		var groupBy = group(function(result$1, value, key) {
			if (has$3(result$1, key)) result$1[key].push(value);
			else result$1[key] = [value];
		});
		var indexBy = group(function(result$1, value, key) {
			result$1[key] = value;
		});
		var countBy = group(function(result$1, value, key) {
			if (has$3(result$1, key)) result$1[key]++;
			else result$1[key] = 1;
		});
		var partition$1 = group(function(result$1, value, pass) {
			result$1[pass ? 0 : 1].push(value);
		}, true);
		var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
		function toArray(obj) {
			if (!obj) return [];
			if (isArray$5(obj)) return slice$2.call(obj);
			if (isString$5(obj)) return obj.match(reStrSymbol);
			if (isArrayLike(obj)) return map(obj, identity$2);
			return values(obj);
		}
		function size(obj) {
			if (obj == null) return 0;
			return isArrayLike(obj) ? obj.length : keys$1(obj).length;
		}
		function keyInObj(value, key, obj) {
			return key in obj;
		}
		var pick = restArguments(function(obj, keys$2) {
			var result$1 = {}, iteratee$1 = keys$2[0];
			if (obj == null) return result$1;
			if (isFunction$1$1(iteratee$1)) {
				if (keys$2.length > 1) iteratee$1 = optimizeCb(iteratee$1, keys$2[1]);
				keys$2 = allKeys(obj);
			} else {
				iteratee$1 = keyInObj;
				keys$2 = flatten(keys$2, false, false);
				obj = Object(obj);
			}
			for (var i$6 = 0, length = keys$2.length; i$6 < length; i$6++) {
				var key = keys$2[i$6];
				var value = obj[key];
				if (iteratee$1(value, key, obj)) result$1[key] = value;
			}
			return result$1;
		});
		var omit = restArguments(function(obj, keys$2) {
			var iteratee$1 = keys$2[0], context;
			if (isFunction$1$1(iteratee$1)) {
				iteratee$1 = negate(iteratee$1);
				if (keys$2.length > 1) context = keys$2[1];
			} else {
				keys$2 = map(flatten(keys$2, false, false), String);
				iteratee$1 = function(value, key) {
					return !contains(keys$2, key);
				};
			}
			return pick(obj, iteratee$1, context);
		});
		function initial(array, n$4, guard) {
			return slice$2.call(array, 0, Math.max(0, array.length - (n$4 == null || guard ? 1 : n$4)));
		}
		function first(array, n$4, guard) {
			if (array == null || array.length < 1) return n$4 == null || guard ? void 0 : [];
			if (n$4 == null || guard) return array[0];
			return initial(array, array.length - n$4);
		}
		function rest(array, n$4, guard) {
			return slice$2.call(array, n$4 == null || guard ? 1 : n$4);
		}
		function last$2(array, n$4, guard) {
			if (array == null || array.length < 1) return n$4 == null || guard ? void 0 : [];
			if (n$4 == null || guard) return array[array.length - 1];
			return rest(array, Math.max(0, array.length - n$4));
		}
		function compact(array) {
			return filter$2(array, Boolean);
		}
		function flatten$1(array, depth$1) {
			return flatten(array, depth$1, false);
		}
		var difference = restArguments(function(array, rest$1) {
			rest$1 = flatten(rest$1, true, true);
			return filter$2(array, function(value) {
				return !contains(rest$1, value);
			});
		});
		var without = restArguments(function(array, otherArrays) {
			return difference(array, otherArrays);
		});
		function uniq(array, isSorted, iteratee$1, context) {
			if (!isBoolean(isSorted)) {
				context = iteratee$1;
				iteratee$1 = isSorted;
				isSorted = false;
			}
			if (iteratee$1 != null) iteratee$1 = cb(iteratee$1, context);
			var result$1 = [];
			var seen$1 = [];
			for (var i$6 = 0, length = getLength(array); i$6 < length; i$6++) {
				var value = array[i$6], computed = iteratee$1 ? iteratee$1(value, i$6, array) : value;
				if (isSorted && !iteratee$1) {
					if (!i$6 || seen$1 !== computed) result$1.push(value);
					seen$1 = computed;
				} else if (iteratee$1) {
					if (!contains(seen$1, computed)) {
						seen$1.push(computed);
						result$1.push(value);
					}
				} else if (!contains(result$1, value)) result$1.push(value);
			}
			return result$1;
		}
		var union = restArguments(function(arrays) {
			return uniq(flatten(arrays, true, true));
		});
		function intersection(array) {
			var result$1 = [];
			var argsLength = arguments.length;
			for (var i$6 = 0, length = getLength(array); i$6 < length; i$6++) {
				var item = array[i$6];
				if (contains(result$1, item)) continue;
				var j$1;
				for (j$1 = 1; j$1 < argsLength; j$1++) if (!contains(arguments[j$1], item)) break;
				if (j$1 === argsLength) result$1.push(item);
			}
			return result$1;
		}
		function unzip(array) {
			var length = array && max$1(array, getLength).length || 0;
			var result$1 = Array(length);
			for (var index$1 = 0; index$1 < length; index$1++) result$1[index$1] = pluck(array, index$1);
			return result$1;
		}
		var zip = restArguments(unzip);
		function object$2(list$4, values$1) {
			var result$1 = {};
			for (var i$6 = 0, length = getLength(list$4); i$6 < length; i$6++) if (values$1) result$1[list$4[i$6]] = values$1[i$6];
			else result$1[list$4[i$6][0]] = list$4[i$6][1];
			return result$1;
		}
		function range$2(start, stop$1, step) {
			if (stop$1 == null) {
				stop$1 = start || 0;
				start = 0;
			}
			if (!step) step = stop$1 < start ? -1 : 1;
			var length = Math.max(Math.ceil((stop$1 - start) / step), 0);
			var range$3 = Array(length);
			for (var idx = 0; idx < length; idx++, start += step) range$3[idx] = start;
			return range$3;
		}
		function chunk(array, count) {
			if (count == null || count < 1) return [];
			var result$1 = [];
			var i$6 = 0, length = array.length;
			while (i$6 < length) result$1.push(slice$2.call(array, i$6, i$6 += count));
			return result$1;
		}
		function chainResult(instance, obj) {
			return instance._chain ? _(obj).chain() : obj;
		}
		function mixin(obj) {
			each(functions(obj), function(name) {
				var func = _[name] = obj[name];
				_.prototype[name] = function() {
					var args = [this._wrapped];
					push$1.apply(args, arguments);
					return chainResult(this, func.apply(_, args));
				};
			});
			return _;
		}
		each([
			"pop",
			"push",
			"reverse",
			"shift",
			"sort",
			"splice",
			"unshift"
		], function(name) {
			var method = ArrayProto[name];
			_.prototype[name] = function() {
				var obj = this._wrapped;
				if (obj != null) {
					method.apply(obj, arguments);
					if ((name === "shift" || name === "splice") && obj.length === 0) delete obj[0];
				}
				return chainResult(this, obj);
			};
		});
		each([
			"concat",
			"join",
			"slice"
		], function(name) {
			var method = ArrayProto[name];
			_.prototype[name] = function() {
				var obj = this._wrapped;
				if (obj != null) obj = method.apply(obj, arguments);
				return chainResult(this, obj);
			};
		});
		var allExports = {
			__proto__: null,
			VERSION: VERSION$1,
			restArguments,
			isObject: isObject$5,
			isNull,
			isUndefined,
			isBoolean,
			isElement,
			isString: isString$5,
			isNumber: isNumber$2,
			isDate: isDate$1,
			isRegExp: isRegExp$1,
			isError: isError$1,
			isSymbol: isSymbol$2,
			isArrayBuffer,
			isDataView: isDataView$1,
			isArray: isArray$5,
			isFunction: isFunction$1$1,
			isArguments: isArguments$1,
			isFinite: isFinite$1,
			isNaN: isNaN$1,
			isTypedArray: isTypedArray$1,
			isEmpty: isEmpty$1,
			isMatch,
			isEqual,
			isMap: isMap$2,
			isWeakMap,
			isSet: isSet$2,
			isWeakSet,
			keys: keys$1,
			allKeys,
			values,
			pairs,
			invert,
			functions,
			methods: functions,
			extend: extend$4,
			extendOwn,
			assign: extendOwn,
			defaults: defaults$2,
			create: create$5,
			clone: clone$4,
			tap,
			get: get$2,
			has: has$1$1,
			mapObject,
			identity: identity$2,
			constant,
			noop: noop$3,
			toPath,
			property,
			propertyOf,
			matcher,
			matches: matcher,
			times,
			random,
			now,
			escape: _escape,
			unescape: _unescape,
			templateSettings,
			template: template$1,
			result,
			uniqueId,
			chain: chain$1,
			iteratee,
			partial,
			bind: bind$1,
			bindAll,
			memoize,
			delay,
			defer,
			throttle,
			debounce,
			wrap,
			negate,
			compose: compose$1,
			after,
			before,
			once: once$3,
			findKey,
			findIndex,
			findLastIndex,
			sortedIndex,
			indexOf: indexOf$1,
			lastIndexOf,
			find: find$2,
			detect: find$2,
			findWhere,
			each,
			forEach: each,
			map,
			collect: map,
			reduce,
			foldl: reduce,
			inject: reduce,
			reduceRight,
			foldr: reduceRight,
			filter: filter$2,
			select: filter$2,
			reject,
			every,
			all: every,
			some,
			any: some,
			contains,
			includes: contains,
			include: contains,
			invoke,
			pluck,
			where,
			max: max$1,
			min,
			shuffle,
			sample,
			sortBy,
			groupBy,
			indexBy,
			countBy,
			partition: partition$1,
			toArray,
			size,
			pick,
			omit,
			first,
			head: first,
			take: first,
			initial,
			last: last$2,
			rest,
			tail: rest,
			drop: rest,
			compact,
			flatten: flatten$1,
			without,
			uniq,
			unique: uniq,
			union,
			intersection,
			difference,
			unzip,
			transpose: unzip,
			zip,
			object: object$2,
			range: range$2,
			chunk,
			mixin,
			"default": _
		};
		var _$1 = mixin(allExports);
		_$1._ = _$1;
		return _$1;
	});
} });

//#endregion
//#region node_modules/lodash/lodash.js
var require_lodash$1 = __commonJS({ "node_modules/lodash/lodash.js"(exports, module) {
	(function() {
		/** Used as a safe reference for `undefined` in pre-ES5 environments. */
		var undefined$1;
		/** Used as the semantic version number. */
		var VERSION$1 = "4.17.21";
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;
		/** Error message constants. */
		var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = "__lodash_hash_undefined__";
		/** Used as the maximum memoize cache size. */
		var MAX_MEMOIZE_SIZE = 500;
		/** Used as the internal argument placeholder. */
		var PLACEHOLDER = "__lodash_placeholder__";
		/** Used to compose bitmasks for cloning. */
		var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
		/** Used to compose bitmasks for value comparisons. */
		var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
		/** Used to compose bitmasks for function metadata. */
		var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
		/** Used as default options for `_.truncate`. */
		var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
		/** Used to detect hot functions by number of calls within a span of milliseconds. */
		var HOT_COUNT = 800, HOT_SPAN = 16;
		/** Used to indicate the type of lazy iteratees. */
		var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
		/** Used as references for various `Number` constants. */
		var INFINITY$1 = Infinity, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = NaN;
		/** Used as references for the maximum length and index of an array. */
		var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
		/** Used to associate wrap methods with their bit flags. */
		var wrapFlags = [
			["ary", WRAP_ARY_FLAG],
			["bind", WRAP_BIND_FLAG],
			["bindKey", WRAP_BIND_KEY_FLAG],
			["curry", WRAP_CURRY_FLAG],
			["curryRight", WRAP_CURRY_RIGHT_FLAG],
			["flip", WRAP_FLIP_FLAG],
			["partial", WRAP_PARTIAL_FLAG],
			["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
			["rearg", WRAP_REARG_FLAG]
		];
		/** `Object#toString` result references. */
		var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag$1 = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
		var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
		/** Used to match empty string literals in compiled template source. */
		var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
		/** Used to match HTML entities and HTML characters. */
		var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
		/** Used to match template delimiters. */
		var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
		/** Used to match property names within property paths. */
		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
		/**
		* Used to match `RegExp`
		* [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		*/
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
		/** Used to match leading whitespace. */
		var reTrimStart = /^\s+/;
		/** Used to match a single whitespace character. */
		var reWhitespace$2 = /\s/;
		/** Used to match wrap detail comments. */
		var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
		/** Used to match words composed of alphanumeric characters. */
		var reAsciiWord$1 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
		/**
		* Used to validate the `validate` option in `_.template` variable.
		*
		* Forbids characters which could potentially change the meaning of the function argument definition:
		* - "()," (modification of function parameters)
		* - "=" (default value)
		* - "[]{}" (destructuring of function parameters)
		* - "/" (beginning of a comment)
		* - whitespace
		*/
		var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
		/** Used to match backslashes in property paths. */
		var reEscapeChar = /\\(\\)?/g;
		/**
		* Used to match
		* [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		*/
		var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
		/** Used to match `RegExp` flags from their coerced string values. */
		var reFlags = /\w*$/;
		/** Used to detect bad signed hexadecimal string values. */
		var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
		/** Used to detect binary string values. */
		var reIsBinary = /^0b[01]+$/i;
		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;
		/** Used to detect octal string values. */
		var reIsOctal = /^0o[0-7]+$/i;
		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;
		/** Used to match Latin Unicode letters (excluding mathematical operators). */
		var reLatin$1 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
		/** Used to ensure capturing order of template delimiters. */
		var reNoMatch = /($^)/;
		/** Used to match unescaped characters in compiled string literals. */
		var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
		/** Used to compose unicode character classes. */
		var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange$1 + reComboHalfMarksRange + rsComboSymbolsRange$1, rsDingbatRange$1 = "\\u2700-\\u27bf", rsLowerRange$1 = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange$1 = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange$1 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange$1 = "\\u2000-\\u206f", rsSpaceRange$1 = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange$1 = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange$1 = "\\ufe0e\\ufe0f", rsBreakRange$1 = rsMathOpRange$1 + rsNonCharRange$1 + rsPunctuationRange$1 + rsSpaceRange$1;
		/** Used to compose unicode capture groups. */
		var rsApos$1 = "['’]", rsAstral$1 = "[" + rsAstralRange$1 + "]", rsBreak$1 = "[" + rsBreakRange$1 + "]", rsCombo$1 = "[" + rsComboRange + "]", rsDigits$1 = "\\d+", rsDingbat$1 = "[" + rsDingbatRange$1 + "]", rsLower$1 = "[" + rsLowerRange$1 + "]", rsMisc$1 = "[^" + rsAstralRange$1 + rsBreakRange$1 + rsDigits$1 + rsDingbatRange$1 + rsLowerRange$1 + rsUpperRange$1 + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$1 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$1 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper$1 = "[" + rsUpperRange$1 + "]", rsZWJ$1 = "\\u200d";
		/** Used to compose unicode regexes. */
		var rsMiscLower = "(?:" + rsLower$1 + "|" + rsMisc$1 + ")", rsMiscUpper = "(?:" + rsUpper$1 + "|" + rsMisc$1 + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$1 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$1 + "(?:" + [
			rsNonAstral$1,
			rsRegional$1,
			rsSurrPair$1
		].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsEmoji$1 = "(?:" + [
			rsDingbat$1,
			rsRegional$1,
			rsSurrPair$1
		].join("|") + ")" + rsSeq$1, rsSymbol$1 = "(?:" + [
			rsNonAstral$1 + rsCombo$1 + "?",
			rsCombo$1,
			rsRegional$1,
			rsSurrPair$1,
			rsAstral$1
		].join("|") + ")";
		/** Used to match apostrophes. */
		var reApos$1 = RegExp(rsApos$1, "g");
		/**
		* Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		* [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		*/
		var reComboMark$1 = RegExp(rsCombo$1, "g");
		/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		var reUnicode$1 = RegExp(rsFitz$1 + "(?=" + rsFitz$1 + ")|" + rsSymbol$1 + rsSeq$1, "g");
		/** Used to match complex or compound words. */
		var reUnicodeWord$1 = RegExp([
			rsUpper$1 + "?" + rsLower$1 + "+" + rsOptContrLower + "(?=" + [
				rsBreak$1,
				rsUpper$1,
				"$"
			].join("|") + ")",
			rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
				rsBreak$1,
				rsUpper$1 + rsMiscLower,
				"$"
			].join("|") + ")",
			rsUpper$1 + "?" + rsMiscLower + "+" + rsOptContrLower,
			rsUpper$1 + "+" + rsOptContrUpper,
			rsOrdUpper,
			rsOrdLower,
			rsDigits$1,
			rsEmoji$1
		].join("|"), "g");
		/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		var reHasUnicode$1 = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange + rsVarRange$1 + "]");
		/** Used to detect strings that need a more robust regexp to match words. */
		var reHasUnicodeWord$1 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
		/** Used to assign default `context` object properties. */
		var contextProps = [
			"Array",
			"Buffer",
			"DataView",
			"Date",
			"Error",
			"Float32Array",
			"Float64Array",
			"Function",
			"Int8Array",
			"Int16Array",
			"Int32Array",
			"Map",
			"Math",
			"Object",
			"Promise",
			"RegExp",
			"Set",
			"String",
			"Symbol",
			"TypeError",
			"Uint8Array",
			"Uint8ClampedArray",
			"Uint16Array",
			"Uint32Array",
			"WeakMap",
			"_",
			"clearTimeout",
			"isFinite",
			"parseInt",
			"setTimeout"
		];
		/** Used to make template sourceURLs easier to identify. */
		var templateCounter = -1;
		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
		/** Used to identify `toStringTag` values supported by `_.clone`. */
		var cloneableTags = {};
		cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
		/** Used to map Latin Unicode letters to basic Latin letters. */
		var deburredLetters$1 = {
			"À": "A",
			"Á": "A",
			"Â": "A",
			"Ã": "A",
			"Ä": "A",
			"Å": "A",
			"à": "a",
			"á": "a",
			"â": "a",
			"ã": "a",
			"ä": "a",
			"å": "a",
			"Ç": "C",
			"ç": "c",
			"Ð": "D",
			"ð": "d",
			"È": "E",
			"É": "E",
			"Ê": "E",
			"Ë": "E",
			"è": "e",
			"é": "e",
			"ê": "e",
			"ë": "e",
			"Ì": "I",
			"Í": "I",
			"Î": "I",
			"Ï": "I",
			"ì": "i",
			"í": "i",
			"î": "i",
			"ï": "i",
			"Ñ": "N",
			"ñ": "n",
			"Ò": "O",
			"Ó": "O",
			"Ô": "O",
			"Õ": "O",
			"Ö": "O",
			"Ø": "O",
			"ò": "o",
			"ó": "o",
			"ô": "o",
			"õ": "o",
			"ö": "o",
			"ø": "o",
			"Ù": "U",
			"Ú": "U",
			"Û": "U",
			"Ü": "U",
			"ù": "u",
			"ú": "u",
			"û": "u",
			"ü": "u",
			"Ý": "Y",
			"ý": "y",
			"ÿ": "y",
			"Æ": "Ae",
			"æ": "ae",
			"Þ": "Th",
			"þ": "th",
			"ß": "ss",
			"Ā": "A",
			"Ă": "A",
			"Ą": "A",
			"ā": "a",
			"ă": "a",
			"ą": "a",
			"Ć": "C",
			"Ĉ": "C",
			"Ċ": "C",
			"Č": "C",
			"ć": "c",
			"ĉ": "c",
			"ċ": "c",
			"č": "c",
			"Ď": "D",
			"Đ": "D",
			"ď": "d",
			"đ": "d",
			"Ē": "E",
			"Ĕ": "E",
			"Ė": "E",
			"Ę": "E",
			"Ě": "E",
			"ē": "e",
			"ĕ": "e",
			"ė": "e",
			"ę": "e",
			"ě": "e",
			"Ĝ": "G",
			"Ğ": "G",
			"Ġ": "G",
			"Ģ": "G",
			"ĝ": "g",
			"ğ": "g",
			"ġ": "g",
			"ģ": "g",
			"Ĥ": "H",
			"Ħ": "H",
			"ĥ": "h",
			"ħ": "h",
			"Ĩ": "I",
			"Ī": "I",
			"Ĭ": "I",
			"Į": "I",
			"İ": "I",
			"ĩ": "i",
			"ī": "i",
			"ĭ": "i",
			"į": "i",
			"ı": "i",
			"Ĵ": "J",
			"ĵ": "j",
			"Ķ": "K",
			"ķ": "k",
			"ĸ": "k",
			"Ĺ": "L",
			"Ļ": "L",
			"Ľ": "L",
			"Ŀ": "L",
			"Ł": "L",
			"ĺ": "l",
			"ļ": "l",
			"ľ": "l",
			"ŀ": "l",
			"ł": "l",
			"Ń": "N",
			"Ņ": "N",
			"Ň": "N",
			"Ŋ": "N",
			"ń": "n",
			"ņ": "n",
			"ň": "n",
			"ŋ": "n",
			"Ō": "O",
			"Ŏ": "O",
			"Ő": "O",
			"ō": "o",
			"ŏ": "o",
			"ő": "o",
			"Ŕ": "R",
			"Ŗ": "R",
			"Ř": "R",
			"ŕ": "r",
			"ŗ": "r",
			"ř": "r",
			"Ś": "S",
			"Ŝ": "S",
			"Ş": "S",
			"Š": "S",
			"ś": "s",
			"ŝ": "s",
			"ş": "s",
			"š": "s",
			"Ţ": "T",
			"Ť": "T",
			"Ŧ": "T",
			"ţ": "t",
			"ť": "t",
			"ŧ": "t",
			"Ũ": "U",
			"Ū": "U",
			"Ŭ": "U",
			"Ů": "U",
			"Ű": "U",
			"Ų": "U",
			"ũ": "u",
			"ū": "u",
			"ŭ": "u",
			"ů": "u",
			"ű": "u",
			"ų": "u",
			"Ŵ": "W",
			"ŵ": "w",
			"Ŷ": "Y",
			"ŷ": "y",
			"Ÿ": "Y",
			"Ź": "Z",
			"Ż": "Z",
			"Ž": "Z",
			"ź": "z",
			"ż": "z",
			"ž": "z",
			"Ĳ": "IJ",
			"ĳ": "ij",
			"Œ": "Oe",
			"œ": "oe",
			"ŉ": "'n",
			"ſ": "s"
		};
		/** Used to map characters to HTML entities. */
		var htmlEscapes = {
			"&": "&amp;",
			"<": "&lt;",
			">": "&gt;",
			"\"": "&quot;",
			"'": "&#39;"
		};
		/** Used to map HTML entities to characters. */
		var htmlUnescapes = {
			"&amp;": "&",
			"&lt;": "<",
			"&gt;": ">",
			"&quot;": "\"",
			"&#39;": "'"
		};
		/** Used to escape characters for inclusion in compiled string literals. */
		var stringEscapes = {
			"\\": "\\",
			"'": "'",
			"\n": "n",
			"\r": "r",
			"\u2028": "u2028",
			"\u2029": "u2029"
		};
		/** Built-in method references without a dependency on `root`. */
		var freeParseFloat = parseFloat, freeParseInt = parseInt;
		/** Detect free variable `global` from Node.js. */
		var freeGlobal$1 = typeof global == "object" && global && global.Object === Object && global;
		/** Detect free variable `self`. */
		var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
		/** Used as a reference to the global object. */
		var root$5 = freeGlobal$1 || freeSelf$1 || Function("return this")();
		/** Detect free variable `exports`. */
		var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
		/** Detect free variable `module`. */
		var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;
		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal$1.process;
		/** Used to access faster Node.js helpers. */
		var nodeUtil = function() {
			try {
				var types$7 = freeModule && freeModule.require && freeModule.require("util").types;
				if (types$7) return types$7;
				return freeProcess && freeProcess.binding && freeProcess.binding("util");
			} catch (e$2) {}
		}();
		var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
		/**
		* A faster alternative to `Function#apply`, this function invokes `func`
		* with the `this` binding of `thisArg` and the arguments of `args`.
		*
		* @private
		* @param {Function} func The function to invoke.
		* @param {*} thisArg The `this` binding of `func`.
		* @param {Array} args The arguments to invoke `func` with.
		* @returns {*} Returns the result of `func`.
		*/
		function apply(func, thisArg, args) {
			switch (args.length) {
				case 0: return func.call(thisArg);
				case 1: return func.call(thisArg, args[0]);
				case 2: return func.call(thisArg, args[0], args[1]);
				case 3: return func.call(thisArg, args[0], args[1], args[2]);
			}
			return func.apply(thisArg, args);
		}
		/**
		* A specialized version of `baseAggregator` for arrays.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} setter The function to set `accumulator` values.
		* @param {Function} iteratee The iteratee to transform keys.
		* @param {Object} accumulator The initial aggregated object.
		* @returns {Function} Returns `accumulator`.
		*/
		function arrayAggregator(array, setter, iteratee, accumulator) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			while (++index$1 < length) {
				var value = array[index$1];
				setter(accumulator, value, iteratee(value), array);
			}
			return accumulator;
		}
		/**
		* A specialized version of `_.forEach` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {Array} Returns `array`.
		*/
		function arrayEach(array, iteratee) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			while (++index$1 < length) if (iteratee(array[index$1], index$1, array) === false) break;
			return array;
		}
		/**
		* A specialized version of `_.forEachRight` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {Array} Returns `array`.
		*/
		function arrayEachRight(array, iteratee) {
			var length = array == null ? 0 : array.length;
			while (length--) if (iteratee(array[length], length, array) === false) break;
			return array;
		}
		/**
		* A specialized version of `_.every` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} predicate The function invoked per iteration.
		* @returns {boolean} Returns `true` if all elements pass the predicate check,
		*  else `false`.
		*/
		function arrayEvery(array, predicate) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			while (++index$1 < length) if (!predicate(array[index$1], index$1, array)) return false;
			return true;
		}
		/**
		* A specialized version of `_.filter` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} predicate The function invoked per iteration.
		* @returns {Array} Returns the new filtered array.
		*/
		function arrayFilter(array, predicate) {
			var index$1 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
			while (++index$1 < length) {
				var value = array[index$1];
				if (predicate(value, index$1, array)) result[resIndex++] = value;
			}
			return result;
		}
		/**
		* A specialized version of `_.includes` for arrays without support for
		* specifying an index to search from.
		*
		* @private
		* @param {Array} [array] The array to inspect.
		* @param {*} target The value to search for.
		* @returns {boolean} Returns `true` if `target` is found, else `false`.
		*/
		function arrayIncludes(array, value) {
			var length = array == null ? 0 : array.length;
			return !!length && baseIndexOf(array, value, 0) > -1;
		}
		/**
		* This function is like `arrayIncludes` except that it accepts a comparator.
		*
		* @private
		* @param {Array} [array] The array to inspect.
		* @param {*} target The value to search for.
		* @param {Function} comparator The comparator invoked per element.
		* @returns {boolean} Returns `true` if `target` is found, else `false`.
		*/
		function arrayIncludesWith(array, value, comparator) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			while (++index$1 < length) if (comparator(value, array[index$1])) return true;
			return false;
		}
		/**
		* A specialized version of `_.map` for arrays without support for iteratee
		* shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {Array} Returns the new mapped array.
		*/
		function arrayMap(array, iteratee) {
			var index$1 = -1, length = array == null ? 0 : array.length, result = Array(length);
			while (++index$1 < length) result[index$1] = iteratee(array[index$1], index$1, array);
			return result;
		}
		/**
		* Appends the elements of `values` to `array`.
		*
		* @private
		* @param {Array} array The array to modify.
		* @param {Array} values The values to append.
		* @returns {Array} Returns `array`.
		*/
		function arrayPush(array, values) {
			var index$1 = -1, length = values.length, offset = array.length;
			while (++index$1 < length) array[offset + index$1] = values[index$1];
			return array;
		}
		/**
		* A specialized version of `_.reduce` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @param {*} [accumulator] The initial value.
		* @param {boolean} [initAccum] Specify using the first element of `array` as
		*  the initial value.
		* @returns {*} Returns the accumulated value.
		*/
		function arrayReduce$1(array, iteratee, accumulator, initAccum) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			if (initAccum && length) accumulator = array[++index$1];
			while (++index$1 < length) accumulator = iteratee(accumulator, array[index$1], index$1, array);
			return accumulator;
		}
		/**
		* A specialized version of `_.reduceRight` for arrays without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @param {*} [accumulator] The initial value.
		* @param {boolean} [initAccum] Specify using the last element of `array` as
		*  the initial value.
		* @returns {*} Returns the accumulated value.
		*/
		function arrayReduceRight(array, iteratee, accumulator, initAccum) {
			var length = array == null ? 0 : array.length;
			if (initAccum && length) accumulator = array[--length];
			while (length--) accumulator = iteratee(accumulator, array[length], length, array);
			return accumulator;
		}
		/**
		* A specialized version of `_.some` for arrays without support for iteratee
		* shorthands.
		*
		* @private
		* @param {Array} [array] The array to iterate over.
		* @param {Function} predicate The function invoked per iteration.
		* @returns {boolean} Returns `true` if any element passes the predicate check,
		*  else `false`.
		*/
		function arraySome(array, predicate) {
			var index$1 = -1, length = array == null ? 0 : array.length;
			while (++index$1 < length) if (predicate(array[index$1], index$1, array)) return true;
			return false;
		}
		/**
		* Gets the size of an ASCII `string`.
		*
		* @private
		* @param {string} string The string inspect.
		* @returns {number} Returns the string size.
		*/
		var asciiSize = baseProperty("length");
		/**
		* Converts an ASCII `string` to an array.
		*
		* @private
		* @param {string} string The string to convert.
		* @returns {Array} Returns the converted array.
		*/
		function asciiToArray$1(string$3) {
			return string$3.split("");
		}
		/**
		* Splits an ASCII `string` into an array of its words.
		*
		* @private
		* @param {string} The string to inspect.
		* @returns {Array} Returns the words of `string`.
		*/
		function asciiWords$1(string$3) {
			return string$3.match(reAsciiWord$1) || [];
		}
		/**
		* The base implementation of methods like `_.findKey` and `_.findLastKey`,
		* without support for iteratee shorthands, which iterates over `collection`
		* using `eachFunc`.
		*
		* @private
		* @param {Array|Object} collection The collection to inspect.
		* @param {Function} predicate The function invoked per iteration.
		* @param {Function} eachFunc The function to iterate over `collection`.
		* @returns {*} Returns the found element or its key, else `undefined`.
		*/
		function baseFindKey(collection, predicate, eachFunc) {
			var result;
			eachFunc(collection, function(value, key, collection$1) {
				if (predicate(value, key, collection$1)) {
					result = key;
					return false;
				}
			});
			return result;
		}
		/**
		* The base implementation of `_.findIndex` and `_.findLastIndex` without
		* support for iteratee shorthands.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {Function} predicate The function invoked per iteration.
		* @param {number} fromIndex The index to search from.
		* @param {boolean} [fromRight] Specify iterating from right to left.
		* @returns {number} Returns the index of the matched value, else `-1`.
		*/
		function baseFindIndex(array, predicate, fromIndex, fromRight) {
			var length = array.length, index$1 = fromIndex + (fromRight ? 1 : -1);
			while (fromRight ? index$1-- : ++index$1 < length) if (predicate(array[index$1], index$1, array)) return index$1;
			return -1;
		}
		/**
		* The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {*} value The value to search for.
		* @param {number} fromIndex The index to search from.
		* @returns {number} Returns the index of the matched value, else `-1`.
		*/
		function baseIndexOf(array, value, fromIndex) {
			return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
		}
		/**
		* This function is like `baseIndexOf` except that it accepts a comparator.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {*} value The value to search for.
		* @param {number} fromIndex The index to search from.
		* @param {Function} comparator The comparator invoked per element.
		* @returns {number} Returns the index of the matched value, else `-1`.
		*/
		function baseIndexOfWith(array, value, fromIndex, comparator) {
			var index$1 = fromIndex - 1, length = array.length;
			while (++index$1 < length) if (comparator(array[index$1], value)) return index$1;
			return -1;
		}
		/**
		* The base implementation of `_.isNaN` without support for number objects.
		*
		* @private
		* @param {*} value The value to check.
		* @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		*/
		function baseIsNaN(value) {
			return value !== value;
		}
		/**
		* The base implementation of `_.mean` and `_.meanBy` without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} array The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {number} Returns the mean.
		*/
		function baseMean(array, iteratee) {
			var length = array == null ? 0 : array.length;
			return length ? baseSum(array, iteratee) / length : NAN;
		}
		/**
		* The base implementation of `_.property` without support for deep paths.
		*
		* @private
		* @param {string} key The key of the property to get.
		* @returns {Function} Returns the new accessor function.
		*/
		function baseProperty(key) {
			return function(object$2) {
				return object$2 == null ? undefined$1 : object$2[key];
			};
		}
		/**
		* The base implementation of `_.propertyOf` without support for deep paths.
		*
		* @private
		* @param {Object} object The object to query.
		* @returns {Function} Returns the new accessor function.
		*/
		function basePropertyOf$1(object$2) {
			return function(key) {
				return object$2 == null ? undefined$1 : object$2[key];
			};
		}
		/**
		* The base implementation of `_.reduce` and `_.reduceRight`, without support
		* for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		*
		* @private
		* @param {Array|Object} collection The collection to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @param {*} accumulator The initial value.
		* @param {boolean} initAccum Specify using the first or last element of
		*  `collection` as the initial value.
		* @param {Function} eachFunc The function to iterate over `collection`.
		* @returns {*} Returns the accumulated value.
		*/
		function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
			eachFunc(collection, function(value, index$1, collection$1) {
				accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index$1, collection$1);
			});
			return accumulator;
		}
		/**
		* The base implementation of `_.sortBy` which uses `comparer` to define the
		* sort order of `array` and replaces criteria objects with their corresponding
		* values.
		*
		* @private
		* @param {Array} array The array to sort.
		* @param {Function} comparer The function to define sort order.
		* @returns {Array} Returns `array`.
		*/
		function baseSortBy(array, comparer) {
			var length = array.length;
			array.sort(comparer);
			while (length--) array[length] = array[length].value;
			return array;
		}
		/**
		* The base implementation of `_.sum` and `_.sumBy` without support for
		* iteratee shorthands.
		*
		* @private
		* @param {Array} array The array to iterate over.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {number} Returns the sum.
		*/
		function baseSum(array, iteratee) {
			var result, index$1 = -1, length = array.length;
			while (++index$1 < length) {
				var current = iteratee(array[index$1]);
				if (current !== undefined$1) result = result === undefined$1 ? current : result + current;
			}
			return result;
		}
		/**
		* The base implementation of `_.times` without support for iteratee shorthands
		* or max array length checks.
		*
		* @private
		* @param {number} n The number of times to invoke `iteratee`.
		* @param {Function} iteratee The function invoked per iteration.
		* @returns {Array} Returns the array of results.
		*/
		function baseTimes(n$4, iteratee) {
			var index$1 = -1, result = Array(n$4);
			while (++index$1 < n$4) result[index$1] = iteratee(index$1);
			return result;
		}
		/**
		* The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		* of key-value pairs for `object` corresponding to the property names of `props`.
		*
		* @private
		* @param {Object} object The object to query.
		* @param {Array} props The property names to get values for.
		* @returns {Object} Returns the key-value pairs.
		*/
		function baseToPairs(object$2, props) {
			return arrayMap(props, function(key) {
				return [key, object$2[key]];
			});
		}
		/**
		* The base implementation of `_.trim`.
		*
		* @private
		* @param {string} string The string to trim.
		* @returns {string} Returns the trimmed string.
		*/
		function baseTrim(string$3) {
			return string$3 ? string$3.slice(0, trimmedEndIndex(string$3) + 1).replace(reTrimStart, "") : string$3;
		}
		/**
		* The base implementation of `_.unary` without support for storing metadata.
		*
		* @private
		* @param {Function} func The function to cap arguments for.
		* @returns {Function} Returns the new capped function.
		*/
		function baseUnary(func) {
			return function(value) {
				return func(value);
			};
		}
		/**
		* The base implementation of `_.values` and `_.valuesIn` which creates an
		* array of `object` property values corresponding to the property names
		* of `props`.
		*
		* @private
		* @param {Object} object The object to query.
		* @param {Array} props The property names to get values for.
		* @returns {Object} Returns the array of property values.
		*/
		function baseValues(object$2, props) {
			return arrayMap(props, function(key) {
				return object$2[key];
			});
		}
		/**
		* Checks if a `cache` value for `key` exists.
		*
		* @private
		* @param {Object} cache The cache to query.
		* @param {string} key The key of the entry to check.
		* @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		*/
		function cacheHas(cache$3, key) {
			return cache$3.has(key);
		}
		/**
		* Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		* that is not found in the character symbols.
		*
		* @private
		* @param {Array} strSymbols The string symbols to inspect.
		* @param {Array} chrSymbols The character symbols to find.
		* @returns {number} Returns the index of the first unmatched string symbol.
		*/
		function charsStartIndex(strSymbols, chrSymbols) {
			var index$1 = -1, length = strSymbols.length;
			while (++index$1 < length && baseIndexOf(chrSymbols, strSymbols[index$1], 0) > -1);
			return index$1;
		}
		/**
		* Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		* that is not found in the character symbols.
		*
		* @private
		* @param {Array} strSymbols The string symbols to inspect.
		* @param {Array} chrSymbols The character symbols to find.
		* @returns {number} Returns the index of the last unmatched string symbol.
		*/
		function charsEndIndex(strSymbols, chrSymbols) {
			var index$1 = strSymbols.length;
			while (index$1-- && baseIndexOf(chrSymbols, strSymbols[index$1], 0) > -1);
			return index$1;
		}
		/**
		* Gets the number of `placeholder` occurrences in `array`.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {*} placeholder The placeholder to search for.
		* @returns {number} Returns the placeholder count.
		*/
		function countHolders(array, placeholder$1) {
			var length = array.length, result = 0;
			while (length--) if (array[length] === placeholder$1) ++result;
			return result;
		}
		/**
		* Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		* letters to basic Latin letters.
		*
		* @private
		* @param {string} letter The matched letter to deburr.
		* @returns {string} Returns the deburred letter.
		*/
		var deburrLetter$1 = basePropertyOf$1(deburredLetters$1);
		/**
		* Used by `_.escape` to convert characters to HTML entities.
		*
		* @private
		* @param {string} chr The matched character to escape.
		* @returns {string} Returns the escaped character.
		*/
		var escapeHtmlChar = basePropertyOf$1(htmlEscapes);
		/**
		* Used by `_.template` to escape characters for inclusion in compiled string literals.
		*
		* @private
		* @param {string} chr The matched character to escape.
		* @returns {string} Returns the escaped character.
		*/
		function escapeStringChar(chr) {
			return "\\" + stringEscapes[chr];
		}
		/**
		* Gets the value at `key` of `object`.
		*
		* @private
		* @param {Object} [object] The object to query.
		* @param {string} key The key of the property to get.
		* @returns {*} Returns the property value.
		*/
		function getValue(object$2, key) {
			return object$2 == null ? undefined$1 : object$2[key];
		}
		/**
		* Checks if `string` contains Unicode symbols.
		*
		* @private
		* @param {string} string The string to inspect.
		* @returns {boolean} Returns `true` if a symbol is found, else `false`.
		*/
		function hasUnicode$1(string$3) {
			return reHasUnicode$1.test(string$3);
		}
		/**
		* Checks if `string` contains a word composed of Unicode symbols.
		*
		* @private
		* @param {string} string The string to inspect.
		* @returns {boolean} Returns `true` if a word is found, else `false`.
		*/
		function hasUnicodeWord$1(string$3) {
			return reHasUnicodeWord$1.test(string$3);
		}
		/**
		* Converts `iterator` to an array.
		*
		* @private
		* @param {Object} iterator The iterator to convert.
		* @returns {Array} Returns the converted array.
		*/
		function iteratorToArray(iterator) {
			var data$2, result = [];
			while (!(data$2 = iterator.next()).done) result.push(data$2.value);
			return result;
		}
		/**
		* Converts `map` to its key-value pairs.
		*
		* @private
		* @param {Object} map The map to convert.
		* @returns {Array} Returns the key-value pairs.
		*/
		function mapToArray(map) {
			var index$1 = -1, result = Array(map.size);
			map.forEach(function(value, key) {
				result[++index$1] = [key, value];
			});
			return result;
		}
		/**
		* Creates a unary function that invokes `func` with its argument transformed.
		*
		* @private
		* @param {Function} func The function to wrap.
		* @param {Function} transform The argument transform.
		* @returns {Function} Returns the new function.
		*/
		function overArg(func, transform$1) {
			return function(arg) {
				return func(transform$1(arg));
			};
		}
		/**
		* Replaces all `placeholder` elements in `array` with an internal placeholder
		* and returns an array of their indexes.
		*
		* @private
		* @param {Array} array The array to modify.
		* @param {*} placeholder The placeholder to replace.
		* @returns {Array} Returns the new array of placeholder indexes.
		*/
		function replaceHolders(array, placeholder$1) {
			var index$1 = -1, length = array.length, resIndex = 0, result = [];
			while (++index$1 < length) {
				var value = array[index$1];
				if (value === placeholder$1 || value === PLACEHOLDER) {
					array[index$1] = PLACEHOLDER;
					result[resIndex++] = index$1;
				}
			}
			return result;
		}
		/**
		* Converts `set` to an array of its values.
		*
		* @private
		* @param {Object} set The set to convert.
		* @returns {Array} Returns the values.
		*/
		function setToArray(set) {
			var index$1 = -1, result = Array(set.size);
			set.forEach(function(value) {
				result[++index$1] = value;
			});
			return result;
		}
		/**
		* Converts `set` to its value-value pairs.
		*
		* @private
		* @param {Object} set The set to convert.
		* @returns {Array} Returns the value-value pairs.
		*/
		function setToPairs(set) {
			var index$1 = -1, result = Array(set.size);
			set.forEach(function(value) {
				result[++index$1] = [value, value];
			});
			return result;
		}
		/**
		* A specialized version of `_.indexOf` which performs strict equality
		* comparisons of values, i.e. `===`.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {*} value The value to search for.
		* @param {number} fromIndex The index to search from.
		* @returns {number} Returns the index of the matched value, else `-1`.
		*/
		function strictIndexOf(array, value, fromIndex) {
			var index$1 = fromIndex - 1, length = array.length;
			while (++index$1 < length) if (array[index$1] === value) return index$1;
			return -1;
		}
		/**
		* A specialized version of `_.lastIndexOf` which performs strict equality
		* comparisons of values, i.e. `===`.
		*
		* @private
		* @param {Array} array The array to inspect.
		* @param {*} value The value to search for.
		* @param {number} fromIndex The index to search from.
		* @returns {number} Returns the index of the matched value, else `-1`.
		*/
		function strictLastIndexOf(array, value, fromIndex) {
			var index$1 = fromIndex + 1;
			while (index$1--) if (array[index$1] === value) return index$1;
			return index$1;
		}
		/**
		* Gets the number of symbols in `string`.
		*
		* @private
		* @param {string} string The string to inspect.
		* @returns {number} Returns the string size.
		*/
		function stringSize(string$3) {
			return hasUnicode$1(string$3) ? unicodeSize(string$3) : asciiSize(string$3);
		}
		/**
		* Converts `string` to an array.
		*
		* @private
		* @param {string} string The string to convert.
		* @returns {Array} Returns the converted array.
		*/
		function stringToArray$1(string$3) {
			return hasUnicode$1(string$3) ? unicodeToArray$1(string$3) : asciiToArray$1(string$3);
		}
		/**
		* Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		* character of `string`.
		*
		* @private
		* @param {string} string The string to inspect.
		* @returns {number} Returns the index of the last non-whitespace character.
		*/
		function trimmedEndIndex(string$3) {
			var index$1 = string$3.length;
			while (index$1-- && reWhitespace$2.test(string$3.charAt(index$1)));
			return index$1;
		}
		/**
		* Used by `_.unescape` to convert HTML entities to characters.
		*
		* @private
		* @param {string} chr The matched character to unescape.
		* @returns {string} Returns the unescaped character.
		*/
		var unescapeHtmlChar = basePropertyOf$1(htmlUnescapes);
		/**
		* Gets the size of a Unicode `string`.
		*
		* @private
		* @param {string} string The string inspect.
		* @returns {number} Returns the string size.
		*/
		function unicodeSize(string$3) {
			var result = reUnicode$1.lastIndex = 0;
			while (reUnicode$1.test(string$3)) ++result;
			return result;
		}
		/**
		* Converts a Unicode `string` to an array.
		*
		* @private
		* @param {string} string The string to convert.
		* @returns {Array} Returns the converted array.
		*/
		function unicodeToArray$1(string$3) {
			return string$3.match(reUnicode$1) || [];
		}
		/**
		* Splits a Unicode `string` into an array of its words.
		*
		* @private
		* @param {string} The string to inspect.
		* @returns {Array} Returns the words of `string`.
		*/
		function unicodeWords$1(string$3) {
			return string$3.match(reUnicodeWord$1) || [];
		}
		/**
		* Create a new pristine `lodash` function using the `context` object.
		*
		* @static
		* @memberOf _
		* @since 1.1.0
		* @category Util
		* @param {Object} [context=root] The context object.
		* @returns {Function} Returns a new `lodash` function.
		* @example
		*
		* _.mixin({ 'foo': _.constant('foo') });
		*
		* var lodash = _.runInContext();
		* lodash.mixin({ 'bar': lodash.constant('bar') });
		*
		* _.isFunction(_.foo);
		* // => true
		* _.isFunction(_.bar);
		* // => false
		*
		* lodash.isFunction(lodash.foo);
		* // => false
		* lodash.isFunction(lodash.bar);
		* // => true
		*
		* // Create a suped-up `defer` in Node.js.
		* var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		*/
		var runInContext = function runInContext$1(context) {
			context = context == null ? root$5 : _.defaults(root$5.Object(), context, _.pick(root$5, contextProps));
			/** Built-in constructor references. */
			var Array$1 = context.Array, Date$1 = context.Date, Error$1 = context.Error, Function$1 = context.Function, Math$1 = context.Math, Object$1 = context.Object, RegExp$1 = context.RegExp, String$4 = context.String, TypeError$1 = context.TypeError;
			/** Used for built-in method references. */
			var arrayProto = Array$1.prototype, funcProto = Function$1.prototype, objectProto$1 = Object$1.prototype;
			/** Used to detect overreaching core-js shims. */
			var coreJsData = context["__core-js_shared__"];
			/** Used to resolve the decompiled source of functions. */
			var funcToString = funcProto.toString;
			/** Used to check objects for own properties. */
			var hasOwnProperty$5 = objectProto$1.hasOwnProperty;
			/** Used to generate unique IDs. */
			var idCounter = 0;
			/** Used to detect methods masquerading as native. */
			var maskSrcKey = function() {
				var uid$1 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
				return uid$1 ? "Symbol(src)_1." + uid$1 : "";
			}();
			/**
			* Used to resolve the
			* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			* of values.
			*/
			var nativeObjectToString = objectProto$1.toString;
			/** Used to infer the `Object` constructor. */
			var objectCtorString = funcToString.call(Object$1);
			/** Used to restore the original `_` reference in `_.noConflict`. */
			var oldDash = root$5._;
			/** Used to detect if a method is native. */
			var reIsNative = RegExp$1("^" + funcToString.call(hasOwnProperty$5).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
			/** Built-in value references. */
			var Buffer$2 = moduleExports ? context.Buffer : undefined$1, Symbol$2 = context.Symbol, Uint8Array$1 = context.Uint8Array, allocUnsafe = Buffer$2 ? Buffer$2.allocUnsafe : undefined$1, getPrototype = overArg(Object$1.getPrototypeOf, Object$1), objectCreate = Object$1.create, propertyIsEnumerable = objectProto$1.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined$1, symIterator = Symbol$2 ? Symbol$2.iterator : undefined$1, symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined$1;
			var defineProperty$1 = function() {
				try {
					var func = getNative(Object$1, "defineProperty");
					func({}, "", {});
					return func;
				} catch (e$2) {}
			}();
			/** Mocked built-ins. */
			var ctxClearTimeout = context.clearTimeout !== root$5.clearTimeout && context.clearTimeout, ctxNow = Date$1 && Date$1.now !== root$5.Date.now && Date$1.now, ctxSetTimeout = context.setTimeout !== root$5.setTimeout && context.setTimeout;
			var nativeCeil = Math$1.ceil, nativeFloor = Math$1.floor, nativeGetSymbols = Object$1.getOwnPropertySymbols, nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object$1.keys, Object$1), nativeMax = Math$1.max, nativeMin = Math$1.min, nativeNow = Date$1.now, nativeParseInt = context.parseInt, nativeRandom = Math$1.random, nativeReverse = arrayProto.reverse;
			var DataView$1 = getNative(context, "DataView"), Map$1 = getNative(context, "Map"), Promise$2 = getNative(context, "Promise"), Set$1 = getNative(context, "Set"), WeakMap$1 = getNative(context, "WeakMap"), nativeCreate = getNative(Object$1, "create");
			/** Used to store function metadata. */
			var metaMap = WeakMap$1 && new WeakMap$1();
			/** Used to lookup unminified function names. */
			var realNames = {};
			/** Used to detect maps, sets, and weakmaps. */
			var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
			/** Used to convert symbols to primitives and strings. */
			var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined$1, symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined$1, symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined$1;
			/**
			* Creates a `lodash` object which wraps `value` to enable implicit method
			* chain sequences. Methods that operate on and return arrays, collections,
			* and functions can be chained together. Methods that retrieve a single value
			* or may return a primitive value will automatically end the chain sequence
			* and return the unwrapped value. Otherwise, the value must be unwrapped
			* with `_#value`.
			*
			* Explicit chain sequences, which must be unwrapped with `_#value`, may be
			* enabled using `_.chain`.
			*
			* The execution of chained methods is lazy, that is, it's deferred until
			* `_#value` is implicitly or explicitly called.
			*
			* Lazy evaluation allows several methods to support shortcut fusion.
			* Shortcut fusion is an optimization to merge iteratee calls; this avoids
			* the creation of intermediate arrays and can greatly reduce the number of
			* iteratee executions. Sections of a chain sequence qualify for shortcut
			* fusion if the section is applied to an array and iteratees accept only
			* one argument. The heuristic for whether a section qualifies for shortcut
			* fusion is subject to change.
			*
			* Chaining is supported in custom builds as long as the `_#value` method is
			* directly or indirectly included in the build.
			*
			* In addition to lodash methods, wrappers have `Array` and `String` methods.
			*
			* The wrapper `Array` methods are:
			* `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
			*
			* The wrapper `String` methods are:
			* `replace` and `split`
			*
			* The wrapper methods that support shortcut fusion are:
			* `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
			* `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
			* `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
			*
			* The chainable wrapper methods are:
			* `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
			* `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
			* `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
			* `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
			* `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
			* `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
			* `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
			* `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
			* `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
			* `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
			* `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
			* `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
			* `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
			* `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
			* `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
			* `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
			* `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
			* `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
			* `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
			* `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
			* `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
			* `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
			* `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
			* `zipObject`, `zipObjectDeep`, and `zipWith`
			*
			* The wrapper methods that are **not** chainable by default are:
			* `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
			* `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
			* `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
			* `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
			* `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
			* `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
			* `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
			* `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
			* `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
			* `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
			* `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
			* `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
			* `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
			* `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
			* `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
			* `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
			* `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
			* `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
			* `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
			* `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
			* `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
			* `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
			* `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
			* `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
			* `upperFirst`, `value`, and `words`
			*
			* @name _
			* @constructor
			* @category Seq
			* @param {*} value The value to wrap in a `lodash` instance.
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* var wrapped = _([1, 2, 3]);
			*
			* // Returns an unwrapped value.
			* wrapped.reduce(_.add);
			* // => 6
			*
			* // Returns a wrapped value.
			* var squares = wrapped.map(square);
			*
			* _.isArray(squares);
			* // => false
			*
			* _.isArray(squares.value());
			* // => true
			*/
			function lodash(value) {
				if (isObjectLike$1(value) && !isArray$5(value) && !(value instanceof LazyWrapper)) {
					if (value instanceof LodashWrapper) return value;
					if (hasOwnProperty$5.call(value, "__wrapped__")) return wrapperClone(value);
				}
				return new LodashWrapper(value);
			}
			/**
			* The base implementation of `_.create` without support for assigning
			* properties to the created object.
			*
			* @private
			* @param {Object} proto The object to inherit from.
			* @returns {Object} Returns the new object.
			*/
			var baseCreate = function() {
				function object$2() {}
				return function(proto$1) {
					if (!isObject$5(proto$1)) return {};
					if (objectCreate) return objectCreate(proto$1);
					object$2.prototype = proto$1;
					var result$1 = new object$2();
					object$2.prototype = undefined$1;
					return result$1;
				};
			}();
			/**
			* The function whose prototype chain sequence wrappers inherit from.
			*
			* @private
			*/
			function baseLodash() {}
			/**
			* The base constructor for creating `lodash` wrapper objects.
			*
			* @private
			* @param {*} value The value to wrap.
			* @param {boolean} [chainAll] Enable explicit method chain sequences.
			*/
			function LodashWrapper(value, chainAll) {
				this.__wrapped__ = value;
				this.__actions__ = [];
				this.__chain__ = !!chainAll;
				this.__index__ = 0;
				this.__values__ = undefined$1;
			}
			/**
			* By default, the template delimiters used by lodash are like those in
			* embedded Ruby (ERB) as well as ES2015 template strings. Change the
			* following template settings to use alternative delimiters.
			*
			* @static
			* @memberOf _
			* @type {Object}
			*/
			lodash.templateSettings = {
				"escape": reEscape,
				"evaluate": reEvaluate,
				"interpolate": reInterpolate,
				"variable": "",
				"imports": { "_": lodash }
			};
			lodash.prototype = baseLodash.prototype;
			lodash.prototype.constructor = lodash;
			LodashWrapper.prototype = baseCreate(baseLodash.prototype);
			LodashWrapper.prototype.constructor = LodashWrapper;
			/**
			* Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
			*
			* @private
			* @constructor
			* @param {*} value The value to wrap.
			*/
			function LazyWrapper(value) {
				this.__wrapped__ = value;
				this.__actions__ = [];
				this.__dir__ = 1;
				this.__filtered__ = false;
				this.__iteratees__ = [];
				this.__takeCount__ = MAX_ARRAY_LENGTH;
				this.__views__ = [];
			}
			/**
			* Creates a clone of the lazy wrapper object.
			*
			* @private
			* @name clone
			* @memberOf LazyWrapper
			* @returns {Object} Returns the cloned `LazyWrapper` object.
			*/
			function lazyClone() {
				var result$1 = new LazyWrapper(this.__wrapped__);
				result$1.__actions__ = copyArray(this.__actions__);
				result$1.__dir__ = this.__dir__;
				result$1.__filtered__ = this.__filtered__;
				result$1.__iteratees__ = copyArray(this.__iteratees__);
				result$1.__takeCount__ = this.__takeCount__;
				result$1.__views__ = copyArray(this.__views__);
				return result$1;
			}
			/**
			* Reverses the direction of lazy iteration.
			*
			* @private
			* @name reverse
			* @memberOf LazyWrapper
			* @returns {Object} Returns the new reversed `LazyWrapper` object.
			*/
			function lazyReverse() {
				if (this.__filtered__) {
					var result$1 = new LazyWrapper(this);
					result$1.__dir__ = -1;
					result$1.__filtered__ = true;
				} else {
					result$1 = this.clone();
					result$1.__dir__ *= -1;
				}
				return result$1;
			}
			/**
			* Extracts the unwrapped value from its lazy wrapper.
			*
			* @private
			* @name value
			* @memberOf LazyWrapper
			* @returns {*} Returns the unwrapped value.
			*/
			function lazyValue() {
				var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray$5(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index$1 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
				if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
				var result$1 = [];
				outer: while (length-- && resIndex < takeCount) {
					index$1 += dir;
					var iterIndex = -1, value = array[index$1];
					while (++iterIndex < iterLength) {
						var data$2 = iteratees[iterIndex], iteratee$1 = data$2.iteratee, type = data$2.type, computed = iteratee$1(value);
						if (type == LAZY_MAP_FLAG) value = computed;
						else if (!computed) if (type == LAZY_FILTER_FLAG) continue outer;
						else break outer;
					}
					result$1[resIndex++] = value;
				}
				return result$1;
			}
			LazyWrapper.prototype = baseCreate(baseLodash.prototype);
			LazyWrapper.prototype.constructor = LazyWrapper;
			/**
			* Creates a hash object.
			*
			* @private
			* @constructor
			* @param {Array} [entries] The key-value pairs to cache.
			*/
			function Hash(entries) {
				var index$1 = -1, length = entries == null ? 0 : entries.length;
				this.clear();
				while (++index$1 < length) {
					var entry = entries[index$1];
					this.set(entry[0], entry[1]);
				}
			}
			/**
			* Removes all key-value entries from the hash.
			*
			* @private
			* @name clear
			* @memberOf Hash
			*/
			function hashClear() {
				this.__data__ = nativeCreate ? nativeCreate(null) : {};
				this.size = 0;
			}
			/**
			* Removes `key` and its value from the hash.
			*
			* @private
			* @name delete
			* @memberOf Hash
			* @param {Object} hash The hash to modify.
			* @param {string} key The key of the value to remove.
			* @returns {boolean} Returns `true` if the entry was removed, else `false`.
			*/
			function hashDelete(key) {
				var result$1 = this.has(key) && delete this.__data__[key];
				this.size -= result$1 ? 1 : 0;
				return result$1;
			}
			/**
			* Gets the hash value for `key`.
			*
			* @private
			* @name get
			* @memberOf Hash
			* @param {string} key The key of the value to get.
			* @returns {*} Returns the entry value.
			*/
			function hashGet(key) {
				var data$2 = this.__data__;
				if (nativeCreate) {
					var result$1 = data$2[key];
					return result$1 === HASH_UNDEFINED ? undefined$1 : result$1;
				}
				return hasOwnProperty$5.call(data$2, key) ? data$2[key] : undefined$1;
			}
			/**
			* Checks if a hash value for `key` exists.
			*
			* @private
			* @name has
			* @memberOf Hash
			* @param {string} key The key of the entry to check.
			* @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			*/
			function hashHas(key) {
				var data$2 = this.__data__;
				return nativeCreate ? data$2[key] !== undefined$1 : hasOwnProperty$5.call(data$2, key);
			}
			/**
			* Sets the hash `key` to `value`.
			*
			* @private
			* @name set
			* @memberOf Hash
			* @param {string} key The key of the value to set.
			* @param {*} value The value to set.
			* @returns {Object} Returns the hash instance.
			*/
			function hashSet(key, value) {
				var data$2 = this.__data__;
				this.size += this.has(key) ? 0 : 1;
				data$2[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
				return this;
			}
			Hash.prototype.clear = hashClear;
			Hash.prototype["delete"] = hashDelete;
			Hash.prototype.get = hashGet;
			Hash.prototype.has = hashHas;
			Hash.prototype.set = hashSet;
			/**
			* Creates an list cache object.
			*
			* @private
			* @constructor
			* @param {Array} [entries] The key-value pairs to cache.
			*/
			function ListCache(entries) {
				var index$1 = -1, length = entries == null ? 0 : entries.length;
				this.clear();
				while (++index$1 < length) {
					var entry = entries[index$1];
					this.set(entry[0], entry[1]);
				}
			}
			/**
			* Removes all key-value entries from the list cache.
			*
			* @private
			* @name clear
			* @memberOf ListCache
			*/
			function listCacheClear() {
				this.__data__ = [];
				this.size = 0;
			}
			/**
			* Removes `key` and its value from the list cache.
			*
			* @private
			* @name delete
			* @memberOf ListCache
			* @param {string} key The key of the value to remove.
			* @returns {boolean} Returns `true` if the entry was removed, else `false`.
			*/
			function listCacheDelete(key) {
				var data$2 = this.__data__, index$1 = assocIndexOf(data$2, key);
				if (index$1 < 0) return false;
				var lastIndex = data$2.length - 1;
				if (index$1 == lastIndex) data$2.pop();
				else splice.call(data$2, index$1, 1);
				--this.size;
				return true;
			}
			/**
			* Gets the list cache value for `key`.
			*
			* @private
			* @name get
			* @memberOf ListCache
			* @param {string} key The key of the value to get.
			* @returns {*} Returns the entry value.
			*/
			function listCacheGet(key) {
				var data$2 = this.__data__, index$1 = assocIndexOf(data$2, key);
				return index$1 < 0 ? undefined$1 : data$2[index$1][1];
			}
			/**
			* Checks if a list cache value for `key` exists.
			*
			* @private
			* @name has
			* @memberOf ListCache
			* @param {string} key The key of the entry to check.
			* @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			*/
			function listCacheHas(key) {
				return assocIndexOf(this.__data__, key) > -1;
			}
			/**
			* Sets the list cache `key` to `value`.
			*
			* @private
			* @name set
			* @memberOf ListCache
			* @param {string} key The key of the value to set.
			* @param {*} value The value to set.
			* @returns {Object} Returns the list cache instance.
			*/
			function listCacheSet(key, value) {
				var data$2 = this.__data__, index$1 = assocIndexOf(data$2, key);
				if (index$1 < 0) {
					++this.size;
					data$2.push([key, value]);
				} else data$2[index$1][1] = value;
				return this;
			}
			ListCache.prototype.clear = listCacheClear;
			ListCache.prototype["delete"] = listCacheDelete;
			ListCache.prototype.get = listCacheGet;
			ListCache.prototype.has = listCacheHas;
			ListCache.prototype.set = listCacheSet;
			/**
			* Creates a map cache object to store key-value pairs.
			*
			* @private
			* @constructor
			* @param {Array} [entries] The key-value pairs to cache.
			*/
			function MapCache(entries) {
				var index$1 = -1, length = entries == null ? 0 : entries.length;
				this.clear();
				while (++index$1 < length) {
					var entry = entries[index$1];
					this.set(entry[0], entry[1]);
				}
			}
			/**
			* Removes all key-value entries from the map.
			*
			* @private
			* @name clear
			* @memberOf MapCache
			*/
			function mapCacheClear() {
				this.size = 0;
				this.__data__ = {
					"hash": new Hash(),
					"map": new (Map$1 || ListCache)(),
					"string": new Hash()
				};
			}
			/**
			* Removes `key` and its value from the map.
			*
			* @private
			* @name delete
			* @memberOf MapCache
			* @param {string} key The key of the value to remove.
			* @returns {boolean} Returns `true` if the entry was removed, else `false`.
			*/
			function mapCacheDelete(key) {
				var result$1 = getMapData(this, key)["delete"](key);
				this.size -= result$1 ? 1 : 0;
				return result$1;
			}
			/**
			* Gets the map value for `key`.
			*
			* @private
			* @name get
			* @memberOf MapCache
			* @param {string} key The key of the value to get.
			* @returns {*} Returns the entry value.
			*/
			function mapCacheGet(key) {
				return getMapData(this, key).get(key);
			}
			/**
			* Checks if a map value for `key` exists.
			*
			* @private
			* @name has
			* @memberOf MapCache
			* @param {string} key The key of the entry to check.
			* @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			*/
			function mapCacheHas(key) {
				return getMapData(this, key).has(key);
			}
			/**
			* Sets the map `key` to `value`.
			*
			* @private
			* @name set
			* @memberOf MapCache
			* @param {string} key The key of the value to set.
			* @param {*} value The value to set.
			* @returns {Object} Returns the map cache instance.
			*/
			function mapCacheSet(key, value) {
				var data$2 = getMapData(this, key), size$1 = data$2.size;
				data$2.set(key, value);
				this.size += data$2.size == size$1 ? 0 : 1;
				return this;
			}
			MapCache.prototype.clear = mapCacheClear;
			MapCache.prototype["delete"] = mapCacheDelete;
			MapCache.prototype.get = mapCacheGet;
			MapCache.prototype.has = mapCacheHas;
			MapCache.prototype.set = mapCacheSet;
			/**
			*
			* Creates an array cache object to store unique values.
			*
			* @private
			* @constructor
			* @param {Array} [values] The values to cache.
			*/
			function SetCache(values$1) {
				var index$1 = -1, length = values$1 == null ? 0 : values$1.length;
				this.__data__ = new MapCache();
				while (++index$1 < length) this.add(values$1[index$1]);
			}
			/**
			* Adds `value` to the array cache.
			*
			* @private
			* @name add
			* @memberOf SetCache
			* @alias push
			* @param {*} value The value to cache.
			* @returns {Object} Returns the cache instance.
			*/
			function setCacheAdd(value) {
				this.__data__.set(value, HASH_UNDEFINED);
				return this;
			}
			/**
			* Checks if `value` is in the array cache.
			*
			* @private
			* @name has
			* @memberOf SetCache
			* @param {*} value The value to search for.
			* @returns {number} Returns `true` if `value` is found, else `false`.
			*/
			function setCacheHas(value) {
				return this.__data__.has(value);
			}
			SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
			SetCache.prototype.has = setCacheHas;
			/**
			* Creates a stack cache object to store key-value pairs.
			*
			* @private
			* @constructor
			* @param {Array} [entries] The key-value pairs to cache.
			*/
			function Stack(entries) {
				var data$2 = this.__data__ = new ListCache(entries);
				this.size = data$2.size;
			}
			/**
			* Removes all key-value entries from the stack.
			*
			* @private
			* @name clear
			* @memberOf Stack
			*/
			function stackClear() {
				this.__data__ = new ListCache();
				this.size = 0;
			}
			/**
			* Removes `key` and its value from the stack.
			*
			* @private
			* @name delete
			* @memberOf Stack
			* @param {string} key The key of the value to remove.
			* @returns {boolean} Returns `true` if the entry was removed, else `false`.
			*/
			function stackDelete(key) {
				var data$2 = this.__data__, result$1 = data$2["delete"](key);
				this.size = data$2.size;
				return result$1;
			}
			/**
			* Gets the stack value for `key`.
			*
			* @private
			* @name get
			* @memberOf Stack
			* @param {string} key The key of the value to get.
			* @returns {*} Returns the entry value.
			*/
			function stackGet(key) {
				return this.__data__.get(key);
			}
			/**
			* Checks if a stack value for `key` exists.
			*
			* @private
			* @name has
			* @memberOf Stack
			* @param {string} key The key of the entry to check.
			* @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			*/
			function stackHas(key) {
				return this.__data__.has(key);
			}
			/**
			* Sets the stack `key` to `value`.
			*
			* @private
			* @name set
			* @memberOf Stack
			* @param {string} key The key of the value to set.
			* @param {*} value The value to set.
			* @returns {Object} Returns the stack cache instance.
			*/
			function stackSet(key, value) {
				var data$2 = this.__data__;
				if (data$2 instanceof ListCache) {
					var pairs = data$2.__data__;
					if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
						pairs.push([key, value]);
						this.size = ++data$2.size;
						return this;
					}
					data$2 = this.__data__ = new MapCache(pairs);
				}
				data$2.set(key, value);
				this.size = data$2.size;
				return this;
			}
			Stack.prototype.clear = stackClear;
			Stack.prototype["delete"] = stackDelete;
			Stack.prototype.get = stackGet;
			Stack.prototype.has = stackHas;
			Stack.prototype.set = stackSet;
			/**
			* Creates an array of the enumerable property names of the array-like `value`.
			*
			* @private
			* @param {*} value The value to query.
			* @param {boolean} inherited Specify returning inherited property names.
			* @returns {Array} Returns the array of property names.
			*/
			function arrayLikeKeys(value, inherited) {
				var isArr = isArray$5(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType$3 = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType$3, result$1 = skipIndexes ? baseTimes(value.length, String$4) : [], length = result$1.length;
				for (var key in value) if ((inherited || hasOwnProperty$5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType$3 && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) result$1.push(key);
				return result$1;
			}
			/**
			* A specialized version of `_.sample` for arrays.
			*
			* @private
			* @param {Array} array The array to sample.
			* @returns {*} Returns the random element.
			*/
			function arraySample(array) {
				var length = array.length;
				return length ? array[baseRandom(0, length - 1)] : undefined$1;
			}
			/**
			* A specialized version of `_.sampleSize` for arrays.
			*
			* @private
			* @param {Array} array The array to sample.
			* @param {number} n The number of elements to sample.
			* @returns {Array} Returns the random elements.
			*/
			function arraySampleSize(array, n$4) {
				return shuffleSelf(copyArray(array), baseClamp(n$4, 0, array.length));
			}
			/**
			* A specialized version of `_.shuffle` for arrays.
			*
			* @private
			* @param {Array} array The array to shuffle.
			* @returns {Array} Returns the new shuffled array.
			*/
			function arrayShuffle(array) {
				return shuffleSelf(copyArray(array));
			}
			/**
			* This function is like `assignValue` except that it doesn't assign
			* `undefined` values.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {string} key The key of the property to assign.
			* @param {*} value The value to assign.
			*/
			function assignMergeValue(object$2, key, value) {
				if (value !== undefined$1 && !eq(object$2[key], value) || value === undefined$1 && !(key in object$2)) baseAssignValue(object$2, key, value);
			}
			/**
			* Assigns `value` to `key` of `object` if the existing value is not equivalent
			* using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {string} key The key of the property to assign.
			* @param {*} value The value to assign.
			*/
			function assignValue(object$2, key, value) {
				var objValue = object$2[key];
				if (!(hasOwnProperty$5.call(object$2, key) && eq(objValue, value)) || value === undefined$1 && !(key in object$2)) baseAssignValue(object$2, key, value);
			}
			/**
			* Gets the index at which the `key` is found in `array` of key-value pairs.
			*
			* @private
			* @param {Array} array The array to inspect.
			* @param {*} key The key to search for.
			* @returns {number} Returns the index of the matched value, else `-1`.
			*/
			function assocIndexOf(array, key) {
				var length = array.length;
				while (length--) if (eq(array[length][0], key)) return length;
				return -1;
			}
			/**
			* Aggregates elements of `collection` on `accumulator` with keys transformed
			* by `iteratee` and values set by `setter`.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} setter The function to set `accumulator` values.
			* @param {Function} iteratee The iteratee to transform keys.
			* @param {Object} accumulator The initial aggregated object.
			* @returns {Function} Returns `accumulator`.
			*/
			function baseAggregator(collection, setter, iteratee$1, accumulator) {
				baseEach(collection, function(value, key, collection$1) {
					setter(accumulator, value, iteratee$1(value), collection$1);
				});
				return accumulator;
			}
			/**
			* The base implementation of `_.assign` without support for multiple sources
			* or `customizer` functions.
			*
			* @private
			* @param {Object} object The destination object.
			* @param {Object} source The source object.
			* @returns {Object} Returns `object`.
			*/
			function baseAssign(object$2, source) {
				return object$2 && copyObject(source, keys$1(source), object$2);
			}
			/**
			* The base implementation of `_.assignIn` without support for multiple sources
			* or `customizer` functions.
			*
			* @private
			* @param {Object} object The destination object.
			* @param {Object} source The source object.
			* @returns {Object} Returns `object`.
			*/
			function baseAssignIn(object$2, source) {
				return object$2 && copyObject(source, keysIn(source), object$2);
			}
			/**
			* The base implementation of `assignValue` and `assignMergeValue` without
			* value checks.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {string} key The key of the property to assign.
			* @param {*} value The value to assign.
			*/
			function baseAssignValue(object$2, key, value) {
				if (key == "__proto__" && defineProperty$1) defineProperty$1(object$2, key, {
					"configurable": true,
					"enumerable": true,
					"value": value,
					"writable": true
				});
				else object$2[key] = value;
			}
			/**
			* The base implementation of `_.at` without support for individual paths.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {string[]} paths The property paths to pick.
			* @returns {Array} Returns the picked elements.
			*/
			function baseAt(object$2, paths) {
				var index$1 = -1, length = paths.length, result$1 = Array$1(length), skip$1 = object$2 == null;
				while (++index$1 < length) result$1[index$1] = skip$1 ? undefined$1 : get$2(object$2, paths[index$1]);
				return result$1;
			}
			/**
			* The base implementation of `_.clamp` which doesn't coerce arguments.
			*
			* @private
			* @param {number} number The number to clamp.
			* @param {number} [lower] The lower bound.
			* @param {number} upper The upper bound.
			* @returns {number} Returns the clamped number.
			*/
			function baseClamp(number, lower, upper) {
				if (number === number) {
					if (upper !== undefined$1) number = number <= upper ? number : upper;
					if (lower !== undefined$1) number = number >= lower ? number : lower;
				}
				return number;
			}
			/**
			* The base implementation of `_.clone` and `_.cloneDeep` which tracks
			* traversed objects.
			*
			* @private
			* @param {*} value The value to clone.
			* @param {boolean} bitmask The bitmask flags.
			*  1 - Deep clone
			*  2 - Flatten inherited properties
			*  4 - Clone symbols
			* @param {Function} [customizer] The function to customize cloning.
			* @param {string} [key] The key of `value`.
			* @param {Object} [object] The parent object of `value`.
			* @param {Object} [stack] Tracks traversed objects and their clone counterparts.
			* @returns {*} Returns the cloned value.
			*/
			function baseClone(value, bitmask, customizer, key, object$2, stack) {
				var result$1, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
				if (customizer) result$1 = object$2 ? customizer(value, key, object$2, stack) : customizer(value);
				if (result$1 !== undefined$1) return result$1;
				if (!isObject$5(value)) return value;
				var isArr = isArray$5(value);
				if (isArr) {
					result$1 = initCloneArray(value);
					if (!isDeep) return copyArray(value, result$1);
				} else {
					var tag$3 = getTag(value), isFunc = tag$3 == funcTag || tag$3 == genTag;
					if (isBuffer$1(value)) return cloneBuffer(value, isDeep);
					if (tag$3 == objectTag || tag$3 == argsTag || isFunc && !object$2) {
						result$1 = isFlat || isFunc ? {} : initCloneObject(value);
						if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result$1, value)) : copySymbols(value, baseAssign(result$1, value));
					} else {
						if (!cloneableTags[tag$3]) return object$2 ? value : {};
						result$1 = initCloneByTag(value, tag$3, isDeep);
					}
				}
				stack || (stack = new Stack());
				var stacked = stack.get(value);
				if (stacked) return stacked;
				stack.set(value, result$1);
				if (isSet$2(value)) value.forEach(function(subValue) {
					result$1.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
				});
				else if (isMap$2(value)) value.forEach(function(subValue, key$1) {
					result$1.set(key$1, baseClone(subValue, bitmask, customizer, key$1, value, stack));
				});
				var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys$1;
				var props = isArr ? undefined$1 : keysFunc(value);
				arrayEach(props || value, function(subValue, key$1) {
					if (props) {
						key$1 = subValue;
						subValue = value[key$1];
					}
					assignValue(result$1, key$1, baseClone(subValue, bitmask, customizer, key$1, value, stack));
				});
				return result$1;
			}
			/**
			* The base implementation of `_.conforms` which doesn't clone `source`.
			*
			* @private
			* @param {Object} source The object of property predicates to conform to.
			* @returns {Function} Returns the new spec function.
			*/
			function baseConforms(source) {
				var props = keys$1(source);
				return function(object$2) {
					return baseConformsTo(object$2, source, props);
				};
			}
			/**
			* The base implementation of `_.conformsTo` which accepts `props` to check.
			*
			* @private
			* @param {Object} object The object to inspect.
			* @param {Object} source The object of property predicates to conform to.
			* @returns {boolean} Returns `true` if `object` conforms, else `false`.
			*/
			function baseConformsTo(object$2, source, props) {
				var length = props.length;
				if (object$2 == null) return !length;
				object$2 = Object$1(object$2);
				while (length--) {
					var key = props[length], predicate = source[key], value = object$2[key];
					if (value === undefined$1 && !(key in object$2) || !predicate(value)) return false;
				}
				return true;
			}
			/**
			* The base implementation of `_.delay` and `_.defer` which accepts `args`
			* to provide to `func`.
			*
			* @private
			* @param {Function} func The function to delay.
			* @param {number} wait The number of milliseconds to delay invocation.
			* @param {Array} args The arguments to provide to `func`.
			* @returns {number|Object} Returns the timer id or timeout object.
			*/
			function baseDelay(func, wait, args) {
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				return setTimeout$1(function() {
					func.apply(undefined$1, args);
				}, wait);
			}
			/**
			* The base implementation of methods like `_.difference` without support
			* for excluding multiple arrays or iteratee shorthands.
			*
			* @private
			* @param {Array} array The array to inspect.
			* @param {Array} values The values to exclude.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of filtered values.
			*/
			function baseDifference(array, values$1, iteratee$1, comparator) {
				var index$1 = -1, includes$1 = arrayIncludes, isCommon = true, length = array.length, result$1 = [], valuesLength = values$1.length;
				if (!length) return result$1;
				if (iteratee$1) values$1 = arrayMap(values$1, baseUnary(iteratee$1));
				if (comparator) {
					includes$1 = arrayIncludesWith;
					isCommon = false;
				} else if (values$1.length >= LARGE_ARRAY_SIZE) {
					includes$1 = cacheHas;
					isCommon = false;
					values$1 = new SetCache(values$1);
				}
				outer: while (++index$1 < length) {
					var value = array[index$1], computed = iteratee$1 == null ? value : iteratee$1(value);
					value = comparator || value !== 0 ? value : 0;
					if (isCommon && computed === computed) {
						var valuesIndex = valuesLength;
						while (valuesIndex--) if (values$1[valuesIndex] === computed) continue outer;
						result$1.push(value);
					} else if (!includes$1(values$1, computed, comparator)) result$1.push(value);
				}
				return result$1;
			}
			/**
			* The base implementation of `_.forEach` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @returns {Array|Object} Returns `collection`.
			*/
			var baseEach = createBaseEach(baseForOwn);
			/**
			* The base implementation of `_.forEachRight` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @returns {Array|Object} Returns `collection`.
			*/
			var baseEachRight = createBaseEach(baseForOwnRight, true);
			/**
			* The base implementation of `_.every` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} predicate The function invoked per iteration.
			* @returns {boolean} Returns `true` if all elements pass the predicate check,
			*  else `false`
			*/
			function baseEvery(collection, predicate) {
				var result$1 = true;
				baseEach(collection, function(value, index$1, collection$1) {
					result$1 = !!predicate(value, index$1, collection$1);
					return result$1;
				});
				return result$1;
			}
			/**
			* The base implementation of methods like `_.max` and `_.min` which accepts a
			* `comparator` to determine the extremum value.
			*
			* @private
			* @param {Array} array The array to iterate over.
			* @param {Function} iteratee The iteratee invoked per iteration.
			* @param {Function} comparator The comparator used to compare values.
			* @returns {*} Returns the extremum value.
			*/
			function baseExtremum(array, iteratee$1, comparator) {
				var index$1 = -1, length = array.length;
				while (++index$1 < length) {
					var value = array[index$1], current = iteratee$1(value);
					if (current != null && (computed === undefined$1 ? current === current && !isSymbol$2(current) : comparator(current, computed))) var computed = current, result$1 = value;
				}
				return result$1;
			}
			/**
			* The base implementation of `_.fill` without an iteratee call guard.
			*
			* @private
			* @param {Array} array The array to fill.
			* @param {*} value The value to fill `array` with.
			* @param {number} [start=0] The start position.
			* @param {number} [end=array.length] The end position.
			* @returns {Array} Returns `array`.
			*/
			function baseFill(array, value, start, end) {
				var length = array.length;
				start = toInteger(start);
				if (start < 0) start = -start > length ? 0 : length + start;
				end = end === undefined$1 || end > length ? length : toInteger(end);
				if (end < 0) end += length;
				end = start > end ? 0 : toLength(end);
				while (start < end) array[start++] = value;
				return array;
			}
			/**
			* The base implementation of `_.filter` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} predicate The function invoked per iteration.
			* @returns {Array} Returns the new filtered array.
			*/
			function baseFilter(collection, predicate) {
				var result$1 = [];
				baseEach(collection, function(value, index$1, collection$1) {
					if (predicate(value, index$1, collection$1)) result$1.push(value);
				});
				return result$1;
			}
			/**
			* The base implementation of `_.flatten` with support for restricting flattening.
			*
			* @private
			* @param {Array} array The array to flatten.
			* @param {number} depth The maximum recursion depth.
			* @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
			* @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
			* @param {Array} [result=[]] The initial result value.
			* @returns {Array} Returns the new flattened array.
			*/
			function baseFlatten(array, depth$1, predicate, isStrict, result$1) {
				var index$1 = -1, length = array.length;
				predicate || (predicate = isFlattenable);
				result$1 || (result$1 = []);
				while (++index$1 < length) {
					var value = array[index$1];
					if (depth$1 > 0 && predicate(value)) if (depth$1 > 1) baseFlatten(value, depth$1 - 1, predicate, isStrict, result$1);
					else arrayPush(result$1, value);
					else if (!isStrict) result$1[result$1.length] = value;
				}
				return result$1;
			}
			/**
			* The base implementation of `baseForOwn` which iterates over `object`
			* properties returned by `keysFunc` and invokes `iteratee` for each property.
			* Iteratee functions may exit iteration early by explicitly returning `false`.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @param {Function} keysFunc The function to get the keys of `object`.
			* @returns {Object} Returns `object`.
			*/
			var baseFor = createBaseFor();
			/**
			* This function is like `baseFor` except that it iterates over properties
			* in the opposite order.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @param {Function} keysFunc The function to get the keys of `object`.
			* @returns {Object} Returns `object`.
			*/
			var baseForRight = createBaseFor(true);
			/**
			* The base implementation of `_.forOwn` without support for iteratee shorthands.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @returns {Object} Returns `object`.
			*/
			function baseForOwn(object$2, iteratee$1) {
				return object$2 && baseFor(object$2, iteratee$1, keys$1);
			}
			/**
			* The base implementation of `_.forOwnRight` without support for iteratee shorthands.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @returns {Object} Returns `object`.
			*/
			function baseForOwnRight(object$2, iteratee$1) {
				return object$2 && baseForRight(object$2, iteratee$1, keys$1);
			}
			/**
			* The base implementation of `_.functions` which creates an array of
			* `object` function property names filtered from `props`.
			*
			* @private
			* @param {Object} object The object to inspect.
			* @param {Array} props The property names to filter.
			* @returns {Array} Returns the function names.
			*/
			function baseFunctions(object$2, props) {
				return arrayFilter(props, function(key) {
					return isFunction$10(object$2[key]);
				});
			}
			/**
			* The base implementation of `_.get` without support for default values.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {Array|string} path The path of the property to get.
			* @returns {*} Returns the resolved value.
			*/
			function baseGet(object$2, path$28) {
				path$28 = castPath(path$28, object$2);
				var index$1 = 0, length = path$28.length;
				while (object$2 != null && index$1 < length) object$2 = object$2[toKey(path$28[index$1++])];
				return index$1 && index$1 == length ? object$2 : undefined$1;
			}
			/**
			* The base implementation of `getAllKeys` and `getAllKeysIn` which uses
			* `keysFunc` and `symbolsFunc` to get the enumerable property names and
			* symbols of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {Function} keysFunc The function to get the keys of `object`.
			* @param {Function} symbolsFunc The function to get the symbols of `object`.
			* @returns {Array} Returns the array of property names and symbols.
			*/
			function baseGetAllKeys(object$2, keysFunc, symbolsFunc) {
				var result$1 = keysFunc(object$2);
				return isArray$5(object$2) ? result$1 : arrayPush(result$1, symbolsFunc(object$2));
			}
			/**
			* The base implementation of `getTag` without fallbacks for buggy environments.
			*
			* @private
			* @param {*} value The value to query.
			* @returns {string} Returns the `toStringTag`.
			*/
			function baseGetTag(value) {
				if (value == null) return value === undefined$1 ? undefinedTag : nullTag;
				return symToStringTag && symToStringTag in Object$1(value) ? getRawTag(value) : objectToString$3(value);
			}
			/**
			* The base implementation of `_.gt` which doesn't coerce arguments.
			*
			* @private
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is greater than `other`,
			*  else `false`.
			*/
			function baseGt(value, other) {
				return value > other;
			}
			/**
			* The base implementation of `_.has` without support for deep paths.
			*
			* @private
			* @param {Object} [object] The object to query.
			* @param {Array|string} key The key to check.
			* @returns {boolean} Returns `true` if `key` exists, else `false`.
			*/
			function baseHas(object$2, key) {
				return object$2 != null && hasOwnProperty$5.call(object$2, key);
			}
			/**
			* The base implementation of `_.hasIn` without support for deep paths.
			*
			* @private
			* @param {Object} [object] The object to query.
			* @param {Array|string} key The key to check.
			* @returns {boolean} Returns `true` if `key` exists, else `false`.
			*/
			function baseHasIn(object$2, key) {
				return object$2 != null && key in Object$1(object$2);
			}
			/**
			* The base implementation of `_.inRange` which doesn't coerce arguments.
			*
			* @private
			* @param {number} number The number to check.
			* @param {number} start The start of the range.
			* @param {number} end The end of the range.
			* @returns {boolean} Returns `true` if `number` is in the range, else `false`.
			*/
			function baseInRange(number, start, end) {
				return number >= nativeMin(start, end) && number < nativeMax(start, end);
			}
			/**
			* The base implementation of methods like `_.intersection`, without support
			* for iteratee shorthands, that accepts an array of arrays to inspect.
			*
			* @private
			* @param {Array} arrays The arrays to inspect.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of shared values.
			*/
			function baseIntersection(arrays, iteratee$1, comparator) {
				var includes$1 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array$1(othLength), maxLength = Infinity, result$1 = [];
				while (othIndex--) {
					var array = arrays[othIndex];
					if (othIndex && iteratee$1) array = arrayMap(array, baseUnary(iteratee$1));
					maxLength = nativeMin(array.length, maxLength);
					caches[othIndex] = !comparator && (iteratee$1 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
				}
				array = arrays[0];
				var index$1 = -1, seen$1 = caches[0];
				outer: while (++index$1 < length && result$1.length < maxLength) {
					var value = array[index$1], computed = iteratee$1 ? iteratee$1(value) : value;
					value = comparator || value !== 0 ? value : 0;
					if (!(seen$1 ? cacheHas(seen$1, computed) : includes$1(result$1, computed, comparator))) {
						othIndex = othLength;
						while (--othIndex) {
							var cache$3 = caches[othIndex];
							if (!(cache$3 ? cacheHas(cache$3, computed) : includes$1(arrays[othIndex], computed, comparator))) continue outer;
						}
						if (seen$1) seen$1.push(computed);
						result$1.push(value);
					}
				}
				return result$1;
			}
			/**
			* The base implementation of `_.invert` and `_.invertBy` which inverts
			* `object` with values transformed by `iteratee` and set by `setter`.
			*
			* @private
			* @param {Object} object The object to iterate over.
			* @param {Function} setter The function to set `accumulator` values.
			* @param {Function} iteratee The iteratee to transform values.
			* @param {Object} accumulator The initial inverted object.
			* @returns {Function} Returns `accumulator`.
			*/
			function baseInverter(object$2, setter, iteratee$1, accumulator) {
				baseForOwn(object$2, function(value, key, object$3) {
					setter(accumulator, iteratee$1(value), key, object$3);
				});
				return accumulator;
			}
			/**
			* The base implementation of `_.invoke` without support for individual
			* method arguments.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {Array|string} path The path of the method to invoke.
			* @param {Array} args The arguments to invoke the method with.
			* @returns {*} Returns the result of the invoked method.
			*/
			function baseInvoke(object$2, path$28, args) {
				path$28 = castPath(path$28, object$2);
				object$2 = parent(object$2, path$28);
				var func = object$2 == null ? object$2 : object$2[toKey(last$2(path$28))];
				return func == null ? undefined$1 : apply(func, object$2, args);
			}
			/**
			* The base implementation of `_.isArguments`.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an `arguments` object,
			*/
			function baseIsArguments(value) {
				return isObjectLike$1(value) && baseGetTag(value) == argsTag;
			}
			/**
			* The base implementation of `_.isArrayBuffer` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
			*/
			function baseIsArrayBuffer(value) {
				return isObjectLike$1(value) && baseGetTag(value) == arrayBufferTag;
			}
			/**
			* The base implementation of `_.isDate` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a date object, else `false`.
			*/
			function baseIsDate(value) {
				return isObjectLike$1(value) && baseGetTag(value) == dateTag;
			}
			/**
			* The base implementation of `_.isEqual` which supports partial comparisons
			* and tracks traversed objects.
			*
			* @private
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @param {boolean} bitmask The bitmask flags.
			*  1 - Unordered comparison
			*  2 - Partial comparison
			* @param {Function} [customizer] The function to customize comparisons.
			* @param {Object} [stack] Tracks traversed `value` and `other` objects.
			* @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			*/
			function baseIsEqual(value, other, bitmask, customizer, stack) {
				if (value === other) return true;
				if (value == null || other == null || !isObjectLike$1(value) && !isObjectLike$1(other)) return value !== value && other !== other;
				return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
			}
			/**
			* A specialized version of `baseIsEqual` for arrays and objects which performs
			* deep comparisons and tracks traversed objects enabling objects with circular
			* references to be compared.
			*
			* @private
			* @param {Object} object The object to compare.
			* @param {Object} other The other object to compare.
			* @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			* @param {Function} customizer The function to customize comparisons.
			* @param {Function} equalFunc The function to determine equivalents of values.
			* @param {Object} [stack] Tracks traversed `object` and `other` objects.
			* @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			*/
			function baseIsEqualDeep(object$2, other, bitmask, customizer, equalFunc, stack) {
				var objIsArr = isArray$5(object$2), othIsArr = isArray$5(other), objTag = objIsArr ? arrayTag : getTag(object$2), othTag = othIsArr ? arrayTag : getTag(other);
				objTag = objTag == argsTag ? objectTag : objTag;
				othTag = othTag == argsTag ? objectTag : othTag;
				var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
				if (isSameTag && isBuffer$1(object$2)) {
					if (!isBuffer$1(other)) return false;
					objIsArr = true;
					objIsObj = false;
				}
				if (isSameTag && !objIsObj) {
					stack || (stack = new Stack());
					return objIsArr || isTypedArray(object$2) ? equalArrays(object$2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object$2, other, objTag, bitmask, customizer, equalFunc, stack);
				}
				if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
					var objIsWrapped = objIsObj && hasOwnProperty$5.call(object$2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$5.call(other, "__wrapped__");
					if (objIsWrapped || othIsWrapped) {
						var objUnwrapped = objIsWrapped ? object$2.value() : object$2, othUnwrapped = othIsWrapped ? other.value() : other;
						stack || (stack = new Stack());
						return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
					}
				}
				if (!isSameTag) return false;
				stack || (stack = new Stack());
				return equalObjects(object$2, other, bitmask, customizer, equalFunc, stack);
			}
			/**
			* The base implementation of `_.isMap` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a map, else `false`.
			*/
			function baseIsMap(value) {
				return isObjectLike$1(value) && getTag(value) == mapTag;
			}
			/**
			* The base implementation of `_.isMatch` without support for iteratee shorthands.
			*
			* @private
			* @param {Object} object The object to inspect.
			* @param {Object} source The object of property values to match.
			* @param {Array} matchData The property names, values, and compare flags to match.
			* @param {Function} [customizer] The function to customize comparisons.
			* @returns {boolean} Returns `true` if `object` is a match, else `false`.
			*/
			function baseIsMatch(object$2, source, matchData, customizer) {
				var index$1 = matchData.length, length = index$1, noCustomizer = !customizer;
				if (object$2 == null) return !length;
				object$2 = Object$1(object$2);
				while (index$1--) {
					var data$2 = matchData[index$1];
					if (noCustomizer && data$2[2] ? data$2[1] !== object$2[data$2[0]] : !(data$2[0] in object$2)) return false;
				}
				while (++index$1 < length) {
					data$2 = matchData[index$1];
					var key = data$2[0], objValue = object$2[key], srcValue = data$2[1];
					if (noCustomizer && data$2[2]) {
						if (objValue === undefined$1 && !(key in object$2)) return false;
					} else {
						var stack = new Stack();
						if (customizer) var result$1 = customizer(objValue, srcValue, key, object$2, source, stack);
						if (!(result$1 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result$1)) return false;
					}
				}
				return true;
			}
			/**
			* The base implementation of `_.isNative` without bad shim checks.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a native function,
			*  else `false`.
			*/
			function baseIsNative(value) {
				if (!isObject$5(value) || isMasked(value)) return false;
				var pattern = isFunction$10(value) ? reIsNative : reIsHostCtor;
				return pattern.test(toSource(value));
			}
			/**
			* The base implementation of `_.isRegExp` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
			*/
			function baseIsRegExp(value) {
				return isObjectLike$1(value) && baseGetTag(value) == regexpTag;
			}
			/**
			* The base implementation of `_.isSet` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a set, else `false`.
			*/
			function baseIsSet(value) {
				return isObjectLike$1(value) && getTag(value) == setTag;
			}
			/**
			* The base implementation of `_.isTypedArray` without Node.js optimizations.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			*/
			function baseIsTypedArray(value) {
				return isObjectLike$1(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
			}
			/**
			* The base implementation of `_.iteratee`.
			*
			* @private
			* @param {*} [value=_.identity] The value to convert to an iteratee.
			* @returns {Function} Returns the iteratee.
			*/
			function baseIteratee(value) {
				if (typeof value == "function") return value;
				if (value == null) return identity$2;
				if (typeof value == "object") return isArray$5(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
				return property(value);
			}
			/**
			* The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names.
			*/
			function baseKeys(object$2) {
				if (!isPrototype(object$2)) return nativeKeys(object$2);
				var result$1 = [];
				for (var key in Object$1(object$2)) if (hasOwnProperty$5.call(object$2, key) && key != "constructor") result$1.push(key);
				return result$1;
			}
			/**
			* The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names.
			*/
			function baseKeysIn(object$2) {
				if (!isObject$5(object$2)) return nativeKeysIn(object$2);
				var isProto = isPrototype(object$2), result$1 = [];
				for (var key in object$2) if (!(key == "constructor" && (isProto || !hasOwnProperty$5.call(object$2, key)))) result$1.push(key);
				return result$1;
			}
			/**
			* The base implementation of `_.lt` which doesn't coerce arguments.
			*
			* @private
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is less than `other`,
			*  else `false`.
			*/
			function baseLt(value, other) {
				return value < other;
			}
			/**
			* The base implementation of `_.map` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} iteratee The function invoked per iteration.
			* @returns {Array} Returns the new mapped array.
			*/
			function baseMap(collection, iteratee$1) {
				var index$1 = -1, result$1 = isArrayLike(collection) ? Array$1(collection.length) : [];
				baseEach(collection, function(value, key, collection$1) {
					result$1[++index$1] = iteratee$1(value, key, collection$1);
				});
				return result$1;
			}
			/**
			* The base implementation of `_.matches` which doesn't clone `source`.
			*
			* @private
			* @param {Object} source The object of property values to match.
			* @returns {Function} Returns the new spec function.
			*/
			function baseMatches(source) {
				var matchData = getMatchData(source);
				if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
				return function(object$2) {
					return object$2 === source || baseIsMatch(object$2, source, matchData);
				};
			}
			/**
			* The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
			*
			* @private
			* @param {string} path The path of the property to get.
			* @param {*} srcValue The value to match.
			* @returns {Function} Returns the new spec function.
			*/
			function baseMatchesProperty(path$28, srcValue) {
				if (isKey(path$28) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path$28), srcValue);
				return function(object$2) {
					var objValue = get$2(object$2, path$28);
					return objValue === undefined$1 && objValue === srcValue ? hasIn(object$2, path$28) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
				};
			}
			/**
			* The base implementation of `_.merge` without support for multiple sources.
			*
			* @private
			* @param {Object} object The destination object.
			* @param {Object} source The source object.
			* @param {number} srcIndex The index of `source`.
			* @param {Function} [customizer] The function to customize merged values.
			* @param {Object} [stack] Tracks traversed source values and their merged
			*  counterparts.
			*/
			function baseMerge(object$2, source, srcIndex, customizer, stack) {
				if (object$2 === source) return;
				baseFor(source, function(srcValue, key) {
					stack || (stack = new Stack());
					if (isObject$5(srcValue)) baseMergeDeep(object$2, source, key, srcIndex, baseMerge, customizer, stack);
					else {
						var newValue = customizer ? customizer(safeGet(object$2, key), srcValue, key + "", object$2, source, stack) : undefined$1;
						if (newValue === undefined$1) newValue = srcValue;
						assignMergeValue(object$2, key, newValue);
					}
				}, keysIn);
			}
			/**
			* A specialized version of `baseMerge` for arrays and objects which performs
			* deep merges and tracks traversed objects enabling objects with circular
			* references to be merged.
			*
			* @private
			* @param {Object} object The destination object.
			* @param {Object} source The source object.
			* @param {string} key The key of the value to merge.
			* @param {number} srcIndex The index of `source`.
			* @param {Function} mergeFunc The function to merge values.
			* @param {Function} [customizer] The function to customize assigned values.
			* @param {Object} [stack] Tracks traversed source values and their merged
			*  counterparts.
			*/
			function baseMergeDeep(object$2, source, key, srcIndex, mergeFunc, customizer, stack) {
				var objValue = safeGet(object$2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
				if (stacked) {
					assignMergeValue(object$2, key, stacked);
					return;
				}
				var newValue = customizer ? customizer(objValue, srcValue, key + "", object$2, source, stack) : undefined$1;
				var isCommon = newValue === undefined$1;
				if (isCommon) {
					var isArr = isArray$5(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
					newValue = srcValue;
					if (isArr || isBuff || isTyped) if (isArray$5(objValue)) newValue = objValue;
					else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
					else if (isBuff) {
						isCommon = false;
						newValue = cloneBuffer(srcValue, true);
					} else if (isTyped) {
						isCommon = false;
						newValue = cloneTypedArray(srcValue, true);
					} else newValue = [];
					else if (isPlainObject$2(srcValue) || isArguments(srcValue)) {
						newValue = objValue;
						if (isArguments(objValue)) newValue = toPlainObject(objValue);
						else if (!isObject$5(objValue) || isFunction$10(objValue)) newValue = initCloneObject(srcValue);
					} else isCommon = false;
				}
				if (isCommon) {
					stack.set(srcValue, newValue);
					mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
					stack["delete"](srcValue);
				}
				assignMergeValue(object$2, key, newValue);
			}
			/**
			* The base implementation of `_.nth` which doesn't coerce arguments.
			*
			* @private
			* @param {Array} array The array to query.
			* @param {number} n The index of the element to return.
			* @returns {*} Returns the nth element of `array`.
			*/
			function baseNth(array, n$4) {
				var length = array.length;
				if (!length) return;
				n$4 += n$4 < 0 ? length : 0;
				return isIndex(n$4, length) ? array[n$4] : undefined$1;
			}
			/**
			* The base implementation of `_.orderBy` without param guards.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
			* @param {string[]} orders The sort orders of `iteratees`.
			* @returns {Array} Returns the new sorted array.
			*/
			function baseOrderBy(collection, iteratees, orders) {
				if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee$1) {
					if (isArray$5(iteratee$1)) return function(value) {
						return baseGet(value, iteratee$1.length === 1 ? iteratee$1[0] : iteratee$1);
					};
					return iteratee$1;
				});
				else iteratees = [identity$2];
				var index$1 = -1;
				iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
				var result$1 = baseMap(collection, function(value, key, collection$1) {
					var criteria = arrayMap(iteratees, function(iteratee$1) {
						return iteratee$1(value);
					});
					return {
						"criteria": criteria,
						"index": ++index$1,
						"value": value
					};
				});
				return baseSortBy(result$1, function(object$2, other) {
					return compareMultiple(object$2, other, orders);
				});
			}
			/**
			* The base implementation of `_.pick` without support for individual
			* property identifiers.
			*
			* @private
			* @param {Object} object The source object.
			* @param {string[]} paths The property paths to pick.
			* @returns {Object} Returns the new object.
			*/
			function basePick(object$2, paths) {
				return basePickBy(object$2, paths, function(value, path$28) {
					return hasIn(object$2, path$28);
				});
			}
			/**
			* The base implementation of  `_.pickBy` without support for iteratee shorthands.
			*
			* @private
			* @param {Object} object The source object.
			* @param {string[]} paths The property paths to pick.
			* @param {Function} predicate The function invoked per property.
			* @returns {Object} Returns the new object.
			*/
			function basePickBy(object$2, paths, predicate) {
				var index$1 = -1, length = paths.length, result$1 = {};
				while (++index$1 < length) {
					var path$28 = paths[index$1], value = baseGet(object$2, path$28);
					if (predicate(value, path$28)) baseSet(result$1, castPath(path$28, object$2), value);
				}
				return result$1;
			}
			/**
			* A specialized version of `baseProperty` which supports deep paths.
			*
			* @private
			* @param {Array|string} path The path of the property to get.
			* @returns {Function} Returns the new accessor function.
			*/
			function basePropertyDeep(path$28) {
				return function(object$2) {
					return baseGet(object$2, path$28);
				};
			}
			/**
			* The base implementation of `_.pullAllBy` without support for iteratee
			* shorthands.
			*
			* @private
			* @param {Array} array The array to modify.
			* @param {Array} values The values to remove.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns `array`.
			*/
			function basePullAll(array, values$1, iteratee$1, comparator) {
				var indexOf$2 = comparator ? baseIndexOfWith : baseIndexOf, index$1 = -1, length = values$1.length, seen$1 = array;
				if (array === values$1) values$1 = copyArray(values$1);
				if (iteratee$1) seen$1 = arrayMap(array, baseUnary(iteratee$1));
				while (++index$1 < length) {
					var fromIndex = 0, value = values$1[index$1], computed = iteratee$1 ? iteratee$1(value) : value;
					while ((fromIndex = indexOf$2(seen$1, computed, fromIndex, comparator)) > -1) {
						if (seen$1 !== array) splice.call(seen$1, fromIndex, 1);
						splice.call(array, fromIndex, 1);
					}
				}
				return array;
			}
			/**
			* The base implementation of `_.pullAt` without support for individual
			* indexes or capturing the removed elements.
			*
			* @private
			* @param {Array} array The array to modify.
			* @param {number[]} indexes The indexes of elements to remove.
			* @returns {Array} Returns `array`.
			*/
			function basePullAt(array, indexes) {
				var length = array ? indexes.length : 0, lastIndex = length - 1;
				while (length--) {
					var index$1 = indexes[length];
					if (length == lastIndex || index$1 !== previous) {
						var previous = index$1;
						if (isIndex(index$1)) splice.call(array, index$1, 1);
						else baseUnset(array, index$1);
					}
				}
				return array;
			}
			/**
			* The base implementation of `_.random` without support for returning
			* floating-point numbers.
			*
			* @private
			* @param {number} lower The lower bound.
			* @param {number} upper The upper bound.
			* @returns {number} Returns the random number.
			*/
			function baseRandom(lower, upper) {
				return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
			}
			/**
			* The base implementation of `_.range` and `_.rangeRight` which doesn't
			* coerce arguments.
			*
			* @private
			* @param {number} start The start of the range.
			* @param {number} end The end of the range.
			* @param {number} step The value to increment or decrement by.
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Array} Returns the range of numbers.
			*/
			function baseRange(start, end, step, fromRight) {
				var index$1 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result$1 = Array$1(length);
				while (length--) {
					result$1[fromRight ? length : ++index$1] = start;
					start += step;
				}
				return result$1;
			}
			/**
			* The base implementation of `_.repeat` which doesn't coerce arguments.
			*
			* @private
			* @param {string} string The string to repeat.
			* @param {number} n The number of times to repeat the string.
			* @returns {string} Returns the repeated string.
			*/
			function baseRepeat(string$3, n$4) {
				var result$1 = "";
				if (!string$3 || n$4 < 1 || n$4 > MAX_SAFE_INTEGER) return result$1;
				do {
					if (n$4 % 2) result$1 += string$3;
					n$4 = nativeFloor(n$4 / 2);
					if (n$4) string$3 += string$3;
				} while (n$4);
				return result$1;
			}
			/**
			* The base implementation of `_.rest` which doesn't validate or coerce arguments.
			*
			* @private
			* @param {Function} func The function to apply a rest parameter to.
			* @param {number} [start=func.length-1] The start position of the rest parameter.
			* @returns {Function} Returns the new function.
			*/
			function baseRest(func, start) {
				return setToString(overRest(func, start, identity$2), func + "");
			}
			/**
			* The base implementation of `_.sample`.
			*
			* @private
			* @param {Array|Object} collection The collection to sample.
			* @returns {*} Returns the random element.
			*/
			function baseSample(collection) {
				return arraySample(values(collection));
			}
			/**
			* The base implementation of `_.sampleSize` without param guards.
			*
			* @private
			* @param {Array|Object} collection The collection to sample.
			* @param {number} n The number of elements to sample.
			* @returns {Array} Returns the random elements.
			*/
			function baseSampleSize(collection, n$4) {
				var array = values(collection);
				return shuffleSelf(array, baseClamp(n$4, 0, array.length));
			}
			/**
			* The base implementation of `_.set`.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to set.
			* @param {*} value The value to set.
			* @param {Function} [customizer] The function to customize path creation.
			* @returns {Object} Returns `object`.
			*/
			function baseSet(object$2, path$28, value, customizer) {
				if (!isObject$5(object$2)) return object$2;
				path$28 = castPath(path$28, object$2);
				var index$1 = -1, length = path$28.length, lastIndex = length - 1, nested = object$2;
				while (nested != null && ++index$1 < length) {
					var key = toKey(path$28[index$1]), newValue = value;
					if (key === "__proto__" || key === "constructor" || key === "prototype") return object$2;
					if (index$1 != lastIndex) {
						var objValue = nested[key];
						newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
						if (newValue === undefined$1) newValue = isObject$5(objValue) ? objValue : isIndex(path$28[index$1 + 1]) ? [] : {};
					}
					assignValue(nested, key, newValue);
					nested = nested[key];
				}
				return object$2;
			}
			/**
			* The base implementation of `setData` without support for hot loop shorting.
			*
			* @private
			* @param {Function} func The function to associate metadata with.
			* @param {*} data The metadata.
			* @returns {Function} Returns `func`.
			*/
			var baseSetData = !metaMap ? identity$2 : function(func, data$2) {
				metaMap.set(func, data$2);
				return func;
			};
			/**
			* The base implementation of `setToString` without support for hot loop shorting.
			*
			* @private
			* @param {Function} func The function to modify.
			* @param {Function} string The `toString` result.
			* @returns {Function} Returns `func`.
			*/
			var baseSetToString = !defineProperty$1 ? identity$2 : function(func, string$3) {
				return defineProperty$1(func, "toString", {
					"configurable": true,
					"enumerable": false,
					"value": constant(string$3),
					"writable": true
				});
			};
			/**
			* The base implementation of `_.shuffle`.
			*
			* @private
			* @param {Array|Object} collection The collection to shuffle.
			* @returns {Array} Returns the new shuffled array.
			*/
			function baseShuffle(collection) {
				return shuffleSelf(values(collection));
			}
			/**
			* The base implementation of `_.slice` without an iteratee call guard.
			*
			* @private
			* @param {Array} array The array to slice.
			* @param {number} [start=0] The start position.
			* @param {number} [end=array.length] The end position.
			* @returns {Array} Returns the slice of `array`.
			*/
			function baseSlice$1(array, start, end) {
				var index$1 = -1, length = array.length;
				if (start < 0) start = -start > length ? 0 : length + start;
				end = end > length ? length : end;
				if (end < 0) end += length;
				length = start > end ? 0 : end - start >>> 0;
				start >>>= 0;
				var result$1 = Array$1(length);
				while (++index$1 < length) result$1[index$1] = array[index$1 + start];
				return result$1;
			}
			/**
			* The base implementation of `_.some` without support for iteratee shorthands.
			*
			* @private
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} predicate The function invoked per iteration.
			* @returns {boolean} Returns `true` if any element passes the predicate check,
			*  else `false`.
			*/
			function baseSome(collection, predicate) {
				var result$1;
				baseEach(collection, function(value, index$1, collection$1) {
					result$1 = predicate(value, index$1, collection$1);
					return !result$1;
				});
				return !!result$1;
			}
			/**
			* The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
			* performs a binary search of `array` to determine the index at which `value`
			* should be inserted into `array` in order to maintain its sort order.
			*
			* @private
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @param {boolean} [retHighest] Specify returning the highest qualified index.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			*/
			function baseSortedIndex(array, value, retHighest) {
				var low = 0, high = array == null ? low : array.length;
				if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
					while (low < high) {
						var mid = low + high >>> 1, computed = array[mid];
						if (computed !== null && !isSymbol$2(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
						else high = mid;
					}
					return high;
				}
				return baseSortedIndexBy(array, value, identity$2, retHighest);
			}
			/**
			* The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
			* which invokes `iteratee` for `value` and each element of `array` to compute
			* their sort ranking. The iteratee is invoked with one argument; (value).
			*
			* @private
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @param {Function} iteratee The iteratee invoked per element.
			* @param {boolean} [retHighest] Specify returning the highest qualified index.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			*/
			function baseSortedIndexBy(array, value, iteratee$1, retHighest) {
				var low = 0, high = array == null ? 0 : array.length;
				if (high === 0) return 0;
				value = iteratee$1(value);
				var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol$2(value), valIsUndefined = value === undefined$1;
				while (low < high) {
					var mid = nativeFloor((low + high) / 2), computed = iteratee$1(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol$2(computed);
					if (valIsNaN) var setLow = retHighest || othIsReflexive;
					else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
					else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
					else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
					else if (othIsNull || othIsSymbol) setLow = false;
					else setLow = retHighest ? computed <= value : computed < value;
					if (setLow) low = mid + 1;
					else high = mid;
				}
				return nativeMin(high, MAX_ARRAY_INDEX);
			}
			/**
			* The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
			* support for iteratee shorthands.
			*
			* @private
			* @param {Array} array The array to inspect.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @returns {Array} Returns the new duplicate free array.
			*/
			function baseSortedUniq(array, iteratee$1) {
				var index$1 = -1, length = array.length, resIndex = 0, result$1 = [];
				while (++index$1 < length) {
					var value = array[index$1], computed = iteratee$1 ? iteratee$1(value) : value;
					if (!index$1 || !eq(computed, seen$1)) {
						var seen$1 = computed;
						result$1[resIndex++] = value === 0 ? 0 : value;
					}
				}
				return result$1;
			}
			/**
			* The base implementation of `_.toNumber` which doesn't ensure correct
			* conversions of binary, hexadecimal, or octal string values.
			*
			* @private
			* @param {*} value The value to process.
			* @returns {number} Returns the number.
			*/
			function baseToNumber(value) {
				if (typeof value == "number") return value;
				if (isSymbol$2(value)) return NAN;
				return +value;
			}
			/**
			* The base implementation of `_.toString` which doesn't convert nullish
			* values to empty strings.
			*
			* @private
			* @param {*} value The value to process.
			* @returns {string} Returns the string.
			*/
			function baseToString$1(value) {
				if (typeof value == "string") return value;
				if (isArray$5(value)) return arrayMap(value, baseToString$1) + "";
				if (isSymbol$2(value)) return symbolToString$1 ? symbolToString$1.call(value) : "";
				var result$1 = value + "";
				return result$1 == "0" && 1 / value == -INFINITY$1 ? "-0" : result$1;
			}
			/**
			* The base implementation of `_.uniqBy` without support for iteratee shorthands.
			*
			* @private
			* @param {Array} array The array to inspect.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new duplicate free array.
			*/
			function baseUniq(array, iteratee$1, comparator) {
				var index$1 = -1, includes$1 = arrayIncludes, length = array.length, isCommon = true, result$1 = [], seen$1 = result$1;
				if (comparator) {
					isCommon = false;
					includes$1 = arrayIncludesWith;
				} else if (length >= LARGE_ARRAY_SIZE) {
					var set$1 = iteratee$1 ? null : createSet(array);
					if (set$1) return setToArray(set$1);
					isCommon = false;
					includes$1 = cacheHas;
					seen$1 = new SetCache();
				} else seen$1 = iteratee$1 ? [] : result$1;
				outer: while (++index$1 < length) {
					var value = array[index$1], computed = iteratee$1 ? iteratee$1(value) : value;
					value = comparator || value !== 0 ? value : 0;
					if (isCommon && computed === computed) {
						var seenIndex = seen$1.length;
						while (seenIndex--) if (seen$1[seenIndex] === computed) continue outer;
						if (iteratee$1) seen$1.push(computed);
						result$1.push(value);
					} else if (!includes$1(seen$1, computed, comparator)) {
						if (seen$1 !== result$1) seen$1.push(computed);
						result$1.push(value);
					}
				}
				return result$1;
			}
			/**
			* The base implementation of `_.unset`.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {Array|string} path The property path to unset.
			* @returns {boolean} Returns `true` if the property is deleted, else `false`.
			*/
			function baseUnset(object$2, path$28) {
				path$28 = castPath(path$28, object$2);
				object$2 = parent(object$2, path$28);
				return object$2 == null || delete object$2[toKey(last$2(path$28))];
			}
			/**
			* The base implementation of `_.update`.
			*
			* @private
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to update.
			* @param {Function} updater The function to produce the updated value.
			* @param {Function} [customizer] The function to customize path creation.
			* @returns {Object} Returns `object`.
			*/
			function baseUpdate(object$2, path$28, updater, customizer) {
				return baseSet(object$2, path$28, updater(baseGet(object$2, path$28)), customizer);
			}
			/**
			* The base implementation of methods like `_.dropWhile` and `_.takeWhile`
			* without support for iteratee shorthands.
			*
			* @private
			* @param {Array} array The array to query.
			* @param {Function} predicate The function invoked per iteration.
			* @param {boolean} [isDrop] Specify dropping elements instead of taking them.
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Array} Returns the slice of `array`.
			*/
			function baseWhile(array, predicate, isDrop, fromRight) {
				var length = array.length, index$1 = fromRight ? length : -1;
				while ((fromRight ? index$1-- : ++index$1 < length) && predicate(array[index$1], index$1, array));
				return isDrop ? baseSlice$1(array, fromRight ? 0 : index$1, fromRight ? index$1 + 1 : length) : baseSlice$1(array, fromRight ? index$1 + 1 : 0, fromRight ? length : index$1);
			}
			/**
			* The base implementation of `wrapperValue` which returns the result of
			* performing a sequence of actions on the unwrapped `value`, where each
			* successive action is supplied the return value of the previous.
			*
			* @private
			* @param {*} value The unwrapped value.
			* @param {Array} actions Actions to perform to resolve the unwrapped value.
			* @returns {*} Returns the resolved value.
			*/
			function baseWrapperValue(value, actions) {
				var result$1 = value;
				if (result$1 instanceof LazyWrapper) result$1 = result$1.value();
				return arrayReduce$1(actions, function(result$2, action) {
					return action.func.apply(action.thisArg, arrayPush([result$2], action.args));
				}, result$1);
			}
			/**
			* The base implementation of methods like `_.xor`, without support for
			* iteratee shorthands, that accepts an array of arrays to inspect.
			*
			* @private
			* @param {Array} arrays The arrays to inspect.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of values.
			*/
			function baseXor(arrays, iteratee$1, comparator) {
				var length = arrays.length;
				if (length < 2) return length ? baseUniq(arrays[0]) : [];
				var index$1 = -1, result$1 = Array$1(length);
				while (++index$1 < length) {
					var array = arrays[index$1], othIndex = -1;
					while (++othIndex < length) if (othIndex != index$1) result$1[index$1] = baseDifference(result$1[index$1] || array, arrays[othIndex], iteratee$1, comparator);
				}
				return baseUniq(baseFlatten(result$1, 1), iteratee$1, comparator);
			}
			/**
			* This base implementation of `_.zipObject` which assigns values using `assignFunc`.
			*
			* @private
			* @param {Array} props The property identifiers.
			* @param {Array} values The property values.
			* @param {Function} assignFunc The function to assign values.
			* @returns {Object} Returns the new object.
			*/
			function baseZipObject(props, values$1, assignFunc) {
				var index$1 = -1, length = props.length, valsLength = values$1.length, result$1 = {};
				while (++index$1 < length) {
					var value = index$1 < valsLength ? values$1[index$1] : undefined$1;
					assignFunc(result$1, props[index$1], value);
				}
				return result$1;
			}
			/**
			* Casts `value` to an empty array if it's not an array like object.
			*
			* @private
			* @param {*} value The value to inspect.
			* @returns {Array|Object} Returns the cast array-like object.
			*/
			function castArrayLikeObject(value) {
				return isArrayLikeObject(value) ? value : [];
			}
			/**
			* Casts `value` to `identity` if it's not a function.
			*
			* @private
			* @param {*} value The value to inspect.
			* @returns {Function} Returns cast function.
			*/
			function castFunction(value) {
				return typeof value == "function" ? value : identity$2;
			}
			/**
			* Casts `value` to a path array if it's not one.
			*
			* @private
			* @param {*} value The value to inspect.
			* @param {Object} [object] The object to query keys on.
			* @returns {Array} Returns the cast property path array.
			*/
			function castPath(value, object$2) {
				if (isArray$5(value)) return value;
				return isKey(value, object$2) ? [value] : stringToPath(toString$5(value));
			}
			/**
			* A `baseRest` alias which can be replaced with `identity` by module
			* replacement plugins.
			*
			* @private
			* @type {Function}
			* @param {Function} func The function to apply a rest parameter to.
			* @returns {Function} Returns the new function.
			*/
			var castRest = baseRest;
			/**
			* Casts `array` to a slice if it's needed.
			*
			* @private
			* @param {Array} array The array to inspect.
			* @param {number} start The start position.
			* @param {number} [end=array.length] The end position.
			* @returns {Array} Returns the cast slice.
			*/
			function castSlice$1(array, start, end) {
				var length = array.length;
				end = end === undefined$1 ? length : end;
				return !start && end >= length ? array : baseSlice$1(array, start, end);
			}
			/**
			* A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
			*
			* @private
			* @param {number|Object} id The timer id or timeout object of the timer to clear.
			*/
			var clearTimeout$1 = ctxClearTimeout || function(id$4) {
				return root$5.clearTimeout(id$4);
			};
			/**
			* Creates a clone of  `buffer`.
			*
			* @private
			* @param {Buffer} buffer The buffer to clone.
			* @param {boolean} [isDeep] Specify a deep clone.
			* @returns {Buffer} Returns the cloned buffer.
			*/
			function cloneBuffer(buffer, isDeep) {
				if (isDeep) return buffer.slice();
				var length = buffer.length, result$1 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
				buffer.copy(result$1);
				return result$1;
			}
			/**
			* Creates a clone of `arrayBuffer`.
			*
			* @private
			* @param {ArrayBuffer} arrayBuffer The array buffer to clone.
			* @returns {ArrayBuffer} Returns the cloned array buffer.
			*/
			function cloneArrayBuffer(arrayBuffer) {
				var result$1 = new arrayBuffer.constructor(arrayBuffer.byteLength);
				new Uint8Array$1(result$1).set(new Uint8Array$1(arrayBuffer));
				return result$1;
			}
			/**
			* Creates a clone of `dataView`.
			*
			* @private
			* @param {Object} dataView The data view to clone.
			* @param {boolean} [isDeep] Specify a deep clone.
			* @returns {Object} Returns the cloned data view.
			*/
			function cloneDataView(dataView, isDeep) {
				var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
				return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
			}
			/**
			* Creates a clone of `regexp`.
			*
			* @private
			* @param {Object} regexp The regexp to clone.
			* @returns {Object} Returns the cloned regexp.
			*/
			function cloneRegExp(regexp) {
				var result$1 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
				result$1.lastIndex = regexp.lastIndex;
				return result$1;
			}
			/**
			* Creates a clone of the `symbol` object.
			*
			* @private
			* @param {Object} symbol The symbol object to clone.
			* @returns {Object} Returns the cloned symbol object.
			*/
			function cloneSymbol(symbol) {
				return symbolValueOf ? Object$1(symbolValueOf.call(symbol)) : {};
			}
			/**
			* Creates a clone of `typedArray`.
			*
			* @private
			* @param {Object} typedArray The typed array to clone.
			* @param {boolean} [isDeep] Specify a deep clone.
			* @returns {Object} Returns the cloned typed array.
			*/
			function cloneTypedArray(typedArray, isDeep) {
				var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
				return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
			}
			/**
			* Compares values to sort them in ascending order.
			*
			* @private
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {number} Returns the sort order indicator for `value`.
			*/
			function compareAscending(value, other) {
				if (value !== other) {
					var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol$2(value);
					var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol$2(other);
					if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
					if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
				}
				return 0;
			}
			/**
			* Used by `_.orderBy` to compare multiple properties of a value to another
			* and stable sort them.
			*
			* If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
			* specify an order of "desc" for descending or "asc" for ascending sort order
			* of corresponding values.
			*
			* @private
			* @param {Object} object The object to compare.
			* @param {Object} other The other object to compare.
			* @param {boolean[]|string[]} orders The order to sort by for each property.
			* @returns {number} Returns the sort order indicator for `object`.
			*/
			function compareMultiple(object$2, other, orders) {
				var index$1 = -1, objCriteria = object$2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
				while (++index$1 < length) {
					var result$1 = compareAscending(objCriteria[index$1], othCriteria[index$1]);
					if (result$1) {
						if (index$1 >= ordersLength) return result$1;
						var order = orders[index$1];
						return result$1 * (order == "desc" ? -1 : 1);
					}
				}
				return object$2.index - other.index;
			}
			/**
			* Creates an array that is the composition of partially applied arguments,
			* placeholders, and provided arguments into a single array of arguments.
			*
			* @private
			* @param {Array} args The provided arguments.
			* @param {Array} partials The arguments to prepend to those provided.
			* @param {Array} holders The `partials` placeholder indexes.
			* @params {boolean} [isCurried] Specify composing for a curried function.
			* @returns {Array} Returns the new array of composed arguments.
			*/
			function composeArgs(args, partials, holders, isCurried) {
				var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result$1 = Array$1(leftLength + rangeLength), isUncurried = !isCurried;
				while (++leftIndex < leftLength) result$1[leftIndex] = partials[leftIndex];
				while (++argsIndex < holdersLength) if (isUncurried || argsIndex < argsLength) result$1[holders[argsIndex]] = args[argsIndex];
				while (rangeLength--) result$1[leftIndex++] = args[argsIndex++];
				return result$1;
			}
			/**
			* This function is like `composeArgs` except that the arguments composition
			* is tailored for `_.partialRight`.
			*
			* @private
			* @param {Array} args The provided arguments.
			* @param {Array} partials The arguments to append to those provided.
			* @param {Array} holders The `partials` placeholder indexes.
			* @params {boolean} [isCurried] Specify composing for a curried function.
			* @returns {Array} Returns the new array of composed arguments.
			*/
			function composeArgsRight(args, partials, holders, isCurried) {
				var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result$1 = Array$1(rangeLength + rightLength), isUncurried = !isCurried;
				while (++argsIndex < rangeLength) result$1[argsIndex] = args[argsIndex];
				var offset = argsIndex;
				while (++rightIndex < rightLength) result$1[offset + rightIndex] = partials[rightIndex];
				while (++holdersIndex < holdersLength) if (isUncurried || argsIndex < argsLength) result$1[offset + holders[holdersIndex]] = args[argsIndex++];
				return result$1;
			}
			/**
			* Copies the values of `source` to `array`.
			*
			* @private
			* @param {Array} source The array to copy values from.
			* @param {Array} [array=[]] The array to copy values to.
			* @returns {Array} Returns `array`.
			*/
			function copyArray(source, array) {
				var index$1 = -1, length = source.length;
				array || (array = Array$1(length));
				while (++index$1 < length) array[index$1] = source[index$1];
				return array;
			}
			/**
			* Copies properties of `source` to `object`.
			*
			* @private
			* @param {Object} source The object to copy properties from.
			* @param {Array} props The property identifiers to copy.
			* @param {Object} [object={}] The object to copy properties to.
			* @param {Function} [customizer] The function to customize copied values.
			* @returns {Object} Returns `object`.
			*/
			function copyObject(source, props, object$2, customizer) {
				var isNew = !object$2;
				object$2 || (object$2 = {});
				var index$1 = -1, length = props.length;
				while (++index$1 < length) {
					var key = props[index$1];
					var newValue = customizer ? customizer(object$2[key], source[key], key, object$2, source) : undefined$1;
					if (newValue === undefined$1) newValue = source[key];
					if (isNew) baseAssignValue(object$2, key, newValue);
					else assignValue(object$2, key, newValue);
				}
				return object$2;
			}
			/**
			* Copies own symbols of `source` to `object`.
			*
			* @private
			* @param {Object} source The object to copy symbols from.
			* @param {Object} [object={}] The object to copy symbols to.
			* @returns {Object} Returns `object`.
			*/
			function copySymbols(source, object$2) {
				return copyObject(source, getSymbols(source), object$2);
			}
			/**
			* Copies own and inherited symbols of `source` to `object`.
			*
			* @private
			* @param {Object} source The object to copy symbols from.
			* @param {Object} [object={}] The object to copy symbols to.
			* @returns {Object} Returns `object`.
			*/
			function copySymbolsIn(source, object$2) {
				return copyObject(source, getSymbolsIn(source), object$2);
			}
			/**
			* Creates a function like `_.groupBy`.
			*
			* @private
			* @param {Function} setter The function to set accumulator values.
			* @param {Function} [initializer] The accumulator object initializer.
			* @returns {Function} Returns the new aggregator function.
			*/
			function createAggregator(setter, initializer) {
				return function(collection, iteratee$1) {
					var func = isArray$5(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
					return func(collection, setter, getIteratee(iteratee$1, 2), accumulator);
				};
			}
			/**
			* Creates a function like `_.assign`.
			*
			* @private
			* @param {Function} assigner The function to assign values.
			* @returns {Function} Returns the new assigner function.
			*/
			function createAssigner(assigner) {
				return baseRest(function(object$2, sources) {
					var index$1 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
					customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$1;
					if (guard && isIterateeCall(sources[0], sources[1], guard)) {
						customizer = length < 3 ? undefined$1 : customizer;
						length = 1;
					}
					object$2 = Object$1(object$2);
					while (++index$1 < length) {
						var source = sources[index$1];
						if (source) assigner(object$2, source, index$1, customizer);
					}
					return object$2;
				});
			}
			/**
			* Creates a `baseEach` or `baseEachRight` function.
			*
			* @private
			* @param {Function} eachFunc The function to iterate over a collection.
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Function} Returns the new base function.
			*/
			function createBaseEach(eachFunc, fromRight) {
				return function(collection, iteratee$1) {
					if (collection == null) return collection;
					if (!isArrayLike(collection)) return eachFunc(collection, iteratee$1);
					var length = collection.length, index$1 = fromRight ? length : -1, iterable = Object$1(collection);
					while (fromRight ? index$1-- : ++index$1 < length) if (iteratee$1(iterable[index$1], index$1, iterable) === false) break;
					return collection;
				};
			}
			/**
			* Creates a base function for methods like `_.forIn` and `_.forOwn`.
			*
			* @private
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Function} Returns the new base function.
			*/
			function createBaseFor(fromRight) {
				return function(object$2, iteratee$1, keysFunc) {
					var index$1 = -1, iterable = Object$1(object$2), props = keysFunc(object$2), length = props.length;
					while (length--) {
						var key = props[fromRight ? length : ++index$1];
						if (iteratee$1(iterable[key], key, iterable) === false) break;
					}
					return object$2;
				};
			}
			/**
			* Creates a function that wraps `func` to invoke it with the optional `this`
			* binding of `thisArg`.
			*
			* @private
			* @param {Function} func The function to wrap.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @param {*} [thisArg] The `this` binding of `func`.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createBind(func, bitmask, thisArg) {
				var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
				function wrapper() {
					var fn = this && this !== root$5 && this instanceof wrapper ? Ctor : func;
					return fn.apply(isBind ? thisArg : this, arguments);
				}
				return wrapper;
			}
			/**
			* Creates a function like `_.lowerFirst`.
			*
			* @private
			* @param {string} methodName The name of the `String` case method to use.
			* @returns {Function} Returns the new case function.
			*/
			function createCaseFirst$1(methodName) {
				return function(string$3) {
					string$3 = toString$5(string$3);
					var strSymbols = hasUnicode$1(string$3) ? stringToArray$1(string$3) : undefined$1;
					var chr = strSymbols ? strSymbols[0] : string$3.charAt(0);
					var trailing = strSymbols ? castSlice$1(strSymbols, 1).join("") : string$3.slice(1);
					return chr[methodName]() + trailing;
				};
			}
			/**
			* Creates a function like `_.camelCase`.
			*
			* @private
			* @param {Function} callback The function to combine each word.
			* @returns {Function} Returns the new compounder function.
			*/
			function createCompounder$1(callback) {
				return function(string$3) {
					return arrayReduce$1(words$1(deburr$1(string$3).replace(reApos$1, "")), callback, "");
				};
			}
			/**
			* Creates a function that produces an instance of `Ctor` regardless of
			* whether it was invoked as part of a `new` expression or by `call` or `apply`.
			*
			* @private
			* @param {Function} Ctor The constructor to wrap.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createCtor(Ctor) {
				return function() {
					var args = arguments;
					switch (args.length) {
						case 0: return new Ctor();
						case 1: return new Ctor(args[0]);
						case 2: return new Ctor(args[0], args[1]);
						case 3: return new Ctor(args[0], args[1], args[2]);
						case 4: return new Ctor(args[0], args[1], args[2], args[3]);
						case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
						case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
						case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
					}
					var thisBinding = baseCreate(Ctor.prototype), result$1 = Ctor.apply(thisBinding, args);
					return isObject$5(result$1) ? result$1 : thisBinding;
				};
			}
			/**
			* Creates a function that wraps `func` to enable currying.
			*
			* @private
			* @param {Function} func The function to wrap.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @param {number} arity The arity of `func`.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createCurry(func, bitmask, arity) {
				var Ctor = createCtor(func);
				function wrapper() {
					var length = arguments.length, args = Array$1(length), index$1 = length, placeholder$1 = getHolder(wrapper);
					while (index$1--) args[index$1] = arguments[index$1];
					var holders = length < 3 && args[0] !== placeholder$1 && args[length - 1] !== placeholder$1 ? [] : replaceHolders(args, placeholder$1);
					length -= holders.length;
					if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
					var fn = this && this !== root$5 && this instanceof wrapper ? Ctor : func;
					return apply(fn, this, args);
				}
				return wrapper;
			}
			/**
			* Creates a `_.find` or `_.findLast` function.
			*
			* @private
			* @param {Function} findIndexFunc The function to find the collection index.
			* @returns {Function} Returns the new find function.
			*/
			function createFind(findIndexFunc) {
				return function(collection, predicate, fromIndex) {
					var iterable = Object$1(collection);
					if (!isArrayLike(collection)) {
						var iteratee$1 = getIteratee(predicate, 3);
						collection = keys$1(collection);
						predicate = function(key) {
							return iteratee$1(iterable[key], key, iterable);
						};
					}
					var index$1 = findIndexFunc(collection, predicate, fromIndex);
					return index$1 > -1 ? iterable[iteratee$1 ? collection[index$1] : index$1] : undefined$1;
				};
			}
			/**
			* Creates a `_.flow` or `_.flowRight` function.
			*
			* @private
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Function} Returns the new flow function.
			*/
			function createFlow(fromRight) {
				return flatRest(function(funcs) {
					var length = funcs.length, index$1 = length, prereq = LodashWrapper.prototype.thru;
					if (fromRight) funcs.reverse();
					while (index$1--) {
						var func = funcs[index$1];
						if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
						if (prereq && !wrapper && getFuncName(func) == "wrapper") var wrapper = new LodashWrapper([], true);
					}
					index$1 = wrapper ? index$1 : length;
					while (++index$1 < length) {
						func = funcs[index$1];
						var funcName = getFuncName(func), data$2 = funcName == "wrapper" ? getData(func) : undefined$1;
						if (data$2 && isLaziable(data$2[0]) && data$2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data$2[4].length && data$2[9] == 1) wrapper = wrapper[getFuncName(data$2[0])].apply(wrapper, data$2[3]);
						else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
					}
					return function() {
						var args = arguments, value = args[0];
						if (wrapper && args.length == 1 && isArray$5(value)) return wrapper.plant(value).value();
						var index$2 = 0, result$1 = length ? funcs[index$2].apply(this, args) : value;
						while (++index$2 < length) result$1 = funcs[index$2].call(this, result$1);
						return result$1;
					};
				});
			}
			/**
			* Creates a function that wraps `func` to invoke it with optional `this`
			* binding of `thisArg`, partial application, and currying.
			*
			* @private
			* @param {Function|string} func The function or method name to wrap.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @param {*} [thisArg] The `this` binding of `func`.
			* @param {Array} [partials] The arguments to prepend to those provided to
			*  the new function.
			* @param {Array} [holders] The `partials` placeholder indexes.
			* @param {Array} [partialsRight] The arguments to append to those provided
			*  to the new function.
			* @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
			* @param {Array} [argPos] The argument positions of the new function.
			* @param {number} [ary] The arity cap of `func`.
			* @param {number} [arity] The arity of `func`.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary$1, arity) {
				var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey$1 = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey$1 ? undefined$1 : createCtor(func);
				function wrapper() {
					var length = arguments.length, args = Array$1(length), index$1 = length;
					while (index$1--) args[index$1] = arguments[index$1];
					if (isCurried) var placeholder$1 = getHolder(wrapper), holdersCount = countHolders(args, placeholder$1);
					if (partials) args = composeArgs(args, partials, holders, isCurried);
					if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
					length -= holdersCount;
					if (isCurried && length < arity) {
						var newHolders = replaceHolders(args, placeholder$1);
						return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary$1, arity - length);
					}
					var thisBinding = isBind ? thisArg : this, fn = isBindKey$1 ? thisBinding[func] : func;
					length = args.length;
					if (argPos) args = reorder(args, argPos);
					else if (isFlip && length > 1) args.reverse();
					if (isAry && ary$1 < length) args.length = ary$1;
					if (this && this !== root$5 && this instanceof wrapper) fn = Ctor || createCtor(fn);
					return fn.apply(thisBinding, args);
				}
				return wrapper;
			}
			/**
			* Creates a function like `_.invertBy`.
			*
			* @private
			* @param {Function} setter The function to set accumulator values.
			* @param {Function} toIteratee The function to resolve iteratees.
			* @returns {Function} Returns the new inverter function.
			*/
			function createInverter(setter, toIteratee) {
				return function(object$2, iteratee$1) {
					return baseInverter(object$2, setter, toIteratee(iteratee$1), {});
				};
			}
			/**
			* Creates a function that performs a mathematical operation on two values.
			*
			* @private
			* @param {Function} operator The function to perform the operation.
			* @param {number} [defaultValue] The value used for `undefined` arguments.
			* @returns {Function} Returns the new mathematical operation function.
			*/
			function createMathOperation(operator$1, defaultValue) {
				return function(value, other) {
					var result$1;
					if (value === undefined$1 && other === undefined$1) return defaultValue;
					if (value !== undefined$1) result$1 = value;
					if (other !== undefined$1) {
						if (result$1 === undefined$1) return other;
						if (typeof value == "string" || typeof other == "string") {
							value = baseToString$1(value);
							other = baseToString$1(other);
						} else {
							value = baseToNumber(value);
							other = baseToNumber(other);
						}
						result$1 = operator$1(value, other);
					}
					return result$1;
				};
			}
			/**
			* Creates a function like `_.over`.
			*
			* @private
			* @param {Function} arrayFunc The function to iterate over iteratees.
			* @returns {Function} Returns the new over function.
			*/
			function createOver(arrayFunc) {
				return flatRest(function(iteratees) {
					iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
					return baseRest(function(args) {
						var thisArg = this;
						return arrayFunc(iteratees, function(iteratee$1) {
							return apply(iteratee$1, thisArg, args);
						});
					});
				});
			}
			/**
			* Creates the padding for `string` based on `length`. The `chars` string
			* is truncated if the number of characters exceeds `length`.
			*
			* @private
			* @param {number} length The padding length.
			* @param {string} [chars=' '] The string used as padding.
			* @returns {string} Returns the padding for `string`.
			*/
			function createPadding(length, chars) {
				chars = chars === undefined$1 ? " " : baseToString$1(chars);
				var charsLength = chars.length;
				if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
				var result$1 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
				return hasUnicode$1(chars) ? castSlice$1(stringToArray$1(result$1), 0, length).join("") : result$1.slice(0, length);
			}
			/**
			* Creates a function that wraps `func` to invoke it with the `this` binding
			* of `thisArg` and `partials` prepended to the arguments it receives.
			*
			* @private
			* @param {Function} func The function to wrap.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @param {*} thisArg The `this` binding of `func`.
			* @param {Array} partials The arguments to prepend to those provided to
			*  the new function.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createPartial(func, bitmask, thisArg, partials) {
				var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
				function wrapper() {
					var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array$1(leftLength + argsLength), fn = this && this !== root$5 && this instanceof wrapper ? Ctor : func;
					while (++leftIndex < leftLength) args[leftIndex] = partials[leftIndex];
					while (argsLength--) args[leftIndex++] = arguments[++argsIndex];
					return apply(fn, isBind ? thisArg : this, args);
				}
				return wrapper;
			}
			/**
			* Creates a `_.range` or `_.rangeRight` function.
			*
			* @private
			* @param {boolean} [fromRight] Specify iterating from right to left.
			* @returns {Function} Returns the new range function.
			*/
			function createRange(fromRight) {
				return function(start, end, step) {
					if (step && typeof step != "number" && isIterateeCall(start, end, step)) end = step = undefined$1;
					start = toFinite(start);
					if (end === undefined$1) {
						end = start;
						start = 0;
					} else end = toFinite(end);
					step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
					return baseRange(start, end, step, fromRight);
				};
			}
			/**
			* Creates a function that performs a relational operation on two values.
			*
			* @private
			* @param {Function} operator The function to perform the operation.
			* @returns {Function} Returns the new relational operation function.
			*/
			function createRelationalOperation(operator$1) {
				return function(value, other) {
					if (!(typeof value == "string" && typeof other == "string")) {
						value = toNumber$1(value);
						other = toNumber$1(other);
					}
					return operator$1(value, other);
				};
			}
			/**
			* Creates a function that wraps `func` to continue currying.
			*
			* @private
			* @param {Function} func The function to wrap.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @param {Function} wrapFunc The function to create the `func` wrapper.
			* @param {*} placeholder The placeholder value.
			* @param {*} [thisArg] The `this` binding of `func`.
			* @param {Array} [partials] The arguments to prepend to those provided to
			*  the new function.
			* @param {Array} [holders] The `partials` placeholder indexes.
			* @param {Array} [argPos] The argument positions of the new function.
			* @param {number} [ary] The arity cap of `func`.
			* @param {number} [arity] The arity of `func`.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createRecurry(func, bitmask, wrapFunc, placeholder$1, thisArg, partials, holders, argPos, ary$1, arity) {
				var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
				bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
				bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
				if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
				var newData = [
					func,
					bitmask,
					thisArg,
					newPartials,
					newHolders,
					newPartialsRight,
					newHoldersRight,
					argPos,
					ary$1,
					arity
				];
				var result$1 = wrapFunc.apply(undefined$1, newData);
				if (isLaziable(func)) setData(result$1, newData);
				result$1.placeholder = placeholder$1;
				return setWrapToString(result$1, func, bitmask);
			}
			/**
			* Creates a function like `_.round`.
			*
			* @private
			* @param {string} methodName The name of the `Math` method to use when rounding.
			* @returns {Function} Returns the new round function.
			*/
			function createRound(methodName) {
				var func = Math$1[methodName];
				return function(number, precision) {
					number = toNumber$1(number);
					precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
					if (precision && nativeIsFinite(number)) {
						var pair = (toString$5(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
						pair = (toString$5(value) + "e").split("e");
						return +(pair[0] + "e" + (+pair[1] - precision));
					}
					return func(number);
				};
			}
			/**
			* Creates a set object of `values`.
			*
			* @private
			* @param {Array} values The values to add to the set.
			* @returns {Object} Returns the new set.
			*/
			var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY$1) ? noop$3 : function(values$1) {
				return new Set$1(values$1);
			};
			/**
			* Creates a `_.toPairs` or `_.toPairsIn` function.
			*
			* @private
			* @param {Function} keysFunc The function to get the keys of a given object.
			* @returns {Function} Returns the new pairs function.
			*/
			function createToPairs(keysFunc) {
				return function(object$2) {
					var tag$3 = getTag(object$2);
					if (tag$3 == mapTag) return mapToArray(object$2);
					if (tag$3 == setTag) return setToPairs(object$2);
					return baseToPairs(object$2, keysFunc(object$2));
				};
			}
			/**
			* Creates a function that either curries or invokes `func` with optional
			* `this` binding and partially applied arguments.
			*
			* @private
			* @param {Function|string} func The function or method name to wrap.
			* @param {number} bitmask The bitmask flags.
			*    1 - `_.bind`
			*    2 - `_.bindKey`
			*    4 - `_.curry` or `_.curryRight` of a bound function
			*    8 - `_.curry`
			*   16 - `_.curryRight`
			*   32 - `_.partial`
			*   64 - `_.partialRight`
			*  128 - `_.rearg`
			*  256 - `_.ary`
			*  512 - `_.flip`
			* @param {*} [thisArg] The `this` binding of `func`.
			* @param {Array} [partials] The arguments to be partially applied.
			* @param {Array} [holders] The `partials` placeholder indexes.
			* @param {Array} [argPos] The argument positions of the new function.
			* @param {number} [ary] The arity cap of `func`.
			* @param {number} [arity] The arity of `func`.
			* @returns {Function} Returns the new wrapped function.
			*/
			function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary$1, arity) {
				var isBindKey$1 = bitmask & WRAP_BIND_KEY_FLAG;
				if (!isBindKey$1 && typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				var length = partials ? partials.length : 0;
				if (!length) {
					bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
					partials = holders = undefined$1;
				}
				ary$1 = ary$1 === undefined$1 ? ary$1 : nativeMax(toInteger(ary$1), 0);
				arity = arity === undefined$1 ? arity : toInteger(arity);
				length -= holders ? holders.length : 0;
				if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
					var partialsRight = partials, holdersRight = holders;
					partials = holders = undefined$1;
				}
				var data$2 = isBindKey$1 ? undefined$1 : getData(func);
				var newData = [
					func,
					bitmask,
					thisArg,
					partials,
					holders,
					partialsRight,
					holdersRight,
					argPos,
					ary$1,
					arity
				];
				if (data$2) mergeData(newData, data$2);
				func = newData[0];
				bitmask = newData[1];
				thisArg = newData[2];
				partials = newData[3];
				holders = newData[4];
				arity = newData[9] = newData[9] === undefined$1 ? isBindKey$1 ? 0 : func.length : nativeMax(newData[9] - length, 0);
				if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
				if (!bitmask || bitmask == WRAP_BIND_FLAG) var result$1 = createBind(func, bitmask, thisArg);
				else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result$1 = createCurry(func, bitmask, arity);
				else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result$1 = createPartial(func, bitmask, thisArg, partials);
				else result$1 = createHybrid.apply(undefined$1, newData);
				var setter = data$2 ? baseSetData : setData;
				return setWrapToString(setter(result$1, newData), func, bitmask);
			}
			/**
			* Used by `_.defaults` to customize its `_.assignIn` use to assign properties
			* of source objects to the destination object for all destination properties
			* that resolve to `undefined`.
			*
			* @private
			* @param {*} objValue The destination value.
			* @param {*} srcValue The source value.
			* @param {string} key The key of the property to assign.
			* @param {Object} object The parent object of `objValue`.
			* @returns {*} Returns the value to assign.
			*/
			function customDefaultsAssignIn(objValue, srcValue, key, object$2) {
				if (objValue === undefined$1 || eq(objValue, objectProto$1[key]) && !hasOwnProperty$5.call(object$2, key)) return srcValue;
				return objValue;
			}
			/**
			* Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
			* objects into destination objects that are passed thru.
			*
			* @private
			* @param {*} objValue The destination value.
			* @param {*} srcValue The source value.
			* @param {string} key The key of the property to merge.
			* @param {Object} object The parent object of `objValue`.
			* @param {Object} source The parent object of `srcValue`.
			* @param {Object} [stack] Tracks traversed source values and their merged
			*  counterparts.
			* @returns {*} Returns the value to assign.
			*/
			function customDefaultsMerge(objValue, srcValue, key, object$2, source, stack) {
				if (isObject$5(objValue) && isObject$5(srcValue)) {
					stack.set(srcValue, objValue);
					baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
					stack["delete"](srcValue);
				}
				return objValue;
			}
			/**
			* Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
			* objects.
			*
			* @private
			* @param {*} value The value to inspect.
			* @param {string} key The key of the property to inspect.
			* @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
			*/
			function customOmitClone(value) {
				return isPlainObject$2(value) ? undefined$1 : value;
			}
			/**
			* A specialized version of `baseIsEqualDeep` for arrays with support for
			* partial deep comparisons.
			*
			* @private
			* @param {Array} array The array to compare.
			* @param {Array} other The other array to compare.
			* @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			* @param {Function} customizer The function to customize comparisons.
			* @param {Function} equalFunc The function to determine equivalents of values.
			* @param {Object} stack Tracks traversed `array` and `other` objects.
			* @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
			*/
			function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
				var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
				if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
				var arrStacked = stack.get(array);
				var othStacked = stack.get(other);
				if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
				var index$1 = -1, result$1 = true, seen$1 = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
				stack.set(array, other);
				stack.set(other, array);
				while (++index$1 < arrLength) {
					var arrValue = array[index$1], othValue = other[index$1];
					if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index$1, other, array, stack) : customizer(arrValue, othValue, index$1, array, other, stack);
					if (compared !== undefined$1) {
						if (compared) continue;
						result$1 = false;
						break;
					}
					if (seen$1) {
						if (!arraySome(other, function(othValue$1, othIndex) {
							if (!cacheHas(seen$1, othIndex) && (arrValue === othValue$1 || equalFunc(arrValue, othValue$1, bitmask, customizer, stack))) return seen$1.push(othIndex);
						})) {
							result$1 = false;
							break;
						}
					} else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
						result$1 = false;
						break;
					}
				}
				stack["delete"](array);
				stack["delete"](other);
				return result$1;
			}
			/**
			* A specialized version of `baseIsEqualDeep` for comparing objects of
			* the same `toStringTag`.
			*
			* **Note:** This function only supports comparing values with tags of
			* `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
			*
			* @private
			* @param {Object} object The object to compare.
			* @param {Object} other The other object to compare.
			* @param {string} tag The `toStringTag` of the objects to compare.
			* @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			* @param {Function} customizer The function to customize comparisons.
			* @param {Function} equalFunc The function to determine equivalents of values.
			* @param {Object} stack Tracks traversed `object` and `other` objects.
			* @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			*/
			function equalByTag(object$2, other, tag$3, bitmask, customizer, equalFunc, stack) {
				switch (tag$3) {
					case dataViewTag:
						if (object$2.byteLength != other.byteLength || object$2.byteOffset != other.byteOffset) return false;
						object$2 = object$2.buffer;
						other = other.buffer;
					case arrayBufferTag:
						if (object$2.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object$2), new Uint8Array$1(other))) return false;
						return true;
					case boolTag:
					case dateTag:
					case numberTag: return eq(+object$2, +other);
					case errorTag: return object$2.name == other.name && object$2.message == other.message;
					case regexpTag:
					case stringTag: return object$2 == other + "";
					case mapTag: var convert$3 = mapToArray;
					case setTag:
						var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
						convert$3 || (convert$3 = setToArray);
						if (object$2.size != other.size && !isPartial) return false;
						var stacked = stack.get(object$2);
						if (stacked) return stacked == other;
						bitmask |= COMPARE_UNORDERED_FLAG;
						stack.set(object$2, other);
						var result$1 = equalArrays(convert$3(object$2), convert$3(other), bitmask, customizer, equalFunc, stack);
						stack["delete"](object$2);
						return result$1;
					case symbolTag$1: if (symbolValueOf) return symbolValueOf.call(object$2) == symbolValueOf.call(other);
				}
				return false;
			}
			/**
			* A specialized version of `baseIsEqualDeep` for objects with support for
			* partial deep comparisons.
			*
			* @private
			* @param {Object} object The object to compare.
			* @param {Object} other The other object to compare.
			* @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
			* @param {Function} customizer The function to customize comparisons.
			* @param {Function} equalFunc The function to determine equivalents of values.
			* @param {Object} stack Tracks traversed `object` and `other` objects.
			* @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
			*/
			function equalObjects(object$2, other, bitmask, customizer, equalFunc, stack) {
				var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object$2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
				if (objLength != othLength && !isPartial) return false;
				var index$1 = objLength;
				while (index$1--) {
					var key = objProps[index$1];
					if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) return false;
				}
				var objStacked = stack.get(object$2);
				var othStacked = stack.get(other);
				if (objStacked && othStacked) return objStacked == other && othStacked == object$2;
				var result$1 = true;
				stack.set(object$2, other);
				stack.set(other, object$2);
				var skipCtor = isPartial;
				while (++index$1 < objLength) {
					key = objProps[index$1];
					var objValue = object$2[key], othValue = other[key];
					if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object$2, stack) : customizer(objValue, othValue, key, object$2, other, stack);
					if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
						result$1 = false;
						break;
					}
					skipCtor || (skipCtor = key == "constructor");
				}
				if (result$1 && !skipCtor) {
					var objCtor = object$2.constructor, othCtor = other.constructor;
					if (objCtor != othCtor && "constructor" in object$2 && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result$1 = false;
				}
				stack["delete"](object$2);
				stack["delete"](other);
				return result$1;
			}
			/**
			* A specialized version of `baseRest` which flattens the rest array.
			*
			* @private
			* @param {Function} func The function to apply a rest parameter to.
			* @returns {Function} Returns the new function.
			*/
			function flatRest(func) {
				return setToString(overRest(func, undefined$1, flatten), func + "");
			}
			/**
			* Creates an array of own enumerable property names and symbols of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names and symbols.
			*/
			function getAllKeys(object$2) {
				return baseGetAllKeys(object$2, keys$1, getSymbols);
			}
			/**
			* Creates an array of own and inherited enumerable property names and
			* symbols of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names and symbols.
			*/
			function getAllKeysIn(object$2) {
				return baseGetAllKeys(object$2, keysIn, getSymbolsIn);
			}
			/**
			* Gets metadata for `func`.
			*
			* @private
			* @param {Function} func The function to query.
			* @returns {*} Returns the metadata for `func`.
			*/
			var getData = !metaMap ? noop$3 : function(func) {
				return metaMap.get(func);
			};
			/**
			* Gets the name of `func`.
			*
			* @private
			* @param {Function} func The function to query.
			* @returns {string} Returns the function name.
			*/
			function getFuncName(func) {
				var result$1 = func.name + "", array = realNames[result$1], length = hasOwnProperty$5.call(realNames, result$1) ? array.length : 0;
				while (length--) {
					var data$2 = array[length], otherFunc = data$2.func;
					if (otherFunc == null || otherFunc == func) return data$2.name;
				}
				return result$1;
			}
			/**
			* Gets the argument placeholder value for `func`.
			*
			* @private
			* @param {Function} func The function to inspect.
			* @returns {*} Returns the placeholder value.
			*/
			function getHolder(func) {
				var object$2 = hasOwnProperty$5.call(lodash, "placeholder") ? lodash : func;
				return object$2.placeholder;
			}
			/**
			* Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
			* this function returns the custom method, otherwise it returns `baseIteratee`.
			* If arguments are provided, the chosen function is invoked with them and
			* its result is returned.
			*
			* @private
			* @param {*} [value] The value to convert to an iteratee.
			* @param {number} [arity] The arity of the created iteratee.
			* @returns {Function} Returns the chosen function or its result.
			*/
			function getIteratee() {
				var result$1 = lodash.iteratee || iteratee;
				result$1 = result$1 === iteratee ? baseIteratee : result$1;
				return arguments.length ? result$1(arguments[0], arguments[1]) : result$1;
			}
			/**
			* Gets the data for `map`.
			*
			* @private
			* @param {Object} map The map to query.
			* @param {string} key The reference key.
			* @returns {*} Returns the map data.
			*/
			function getMapData(map$1, key) {
				var data$2 = map$1.__data__;
				return isKeyable(key) ? data$2[typeof key == "string" ? "string" : "hash"] : data$2.map;
			}
			/**
			* Gets the property names, values, and compare flags of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the match data of `object`.
			*/
			function getMatchData(object$2) {
				var result$1 = keys$1(object$2), length = result$1.length;
				while (length--) {
					var key = result$1[length], value = object$2[key];
					result$1[length] = [
						key,
						value,
						isStrictComparable(value)
					];
				}
				return result$1;
			}
			/**
			* Gets the native function at `key` of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {string} key The key of the method to get.
			* @returns {*} Returns the function if it's native, else `undefined`.
			*/
			function getNative(object$2, key) {
				var value = getValue(object$2, key);
				return baseIsNative(value) ? value : undefined$1;
			}
			/**
			* A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
			*
			* @private
			* @param {*} value The value to query.
			* @returns {string} Returns the raw `toStringTag`.
			*/
			function getRawTag(value) {
				var isOwn = hasOwnProperty$5.call(value, symToStringTag), tag$3 = value[symToStringTag];
				try {
					value[symToStringTag] = undefined$1;
					var unmasked = true;
				} catch (e$2) {}
				var result$1 = nativeObjectToString.call(value);
				if (unmasked) if (isOwn) value[symToStringTag] = tag$3;
				else delete value[symToStringTag];
				return result$1;
			}
			/**
			* Creates an array of the own enumerable symbols of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of symbols.
			*/
			var getSymbols = !nativeGetSymbols ? stubArray : function(object$2) {
				if (object$2 == null) return [];
				object$2 = Object$1(object$2);
				return arrayFilter(nativeGetSymbols(object$2), function(symbol) {
					return propertyIsEnumerable.call(object$2, symbol);
				});
			};
			/**
			* Creates an array of the own and inherited enumerable symbols of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of symbols.
			*/
			var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object$2) {
				var result$1 = [];
				while (object$2) {
					arrayPush(result$1, getSymbols(object$2));
					object$2 = getPrototype(object$2);
				}
				return result$1;
			};
			/**
			* Gets the `toStringTag` of `value`.
			*
			* @private
			* @param {*} value The value to query.
			* @returns {string} Returns the `toStringTag`.
			*/
			var getTag = baseGetTag;
			if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag || Map$1 && getTag(new Map$1()) != mapTag || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag) getTag = function(value) {
				var result$1 = baseGetTag(value), Ctor = result$1 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
				if (ctorString) switch (ctorString) {
					case dataViewCtorString: return dataViewTag;
					case mapCtorString: return mapTag;
					case promiseCtorString: return promiseTag;
					case setCtorString: return setTag;
					case weakMapCtorString: return weakMapTag;
				}
				return result$1;
			};
			/**
			* Gets the view, applying any `transforms` to the `start` and `end` positions.
			*
			* @private
			* @param {number} start The start of the view.
			* @param {number} end The end of the view.
			* @param {Array} transforms The transformations to apply to the view.
			* @returns {Object} Returns an object containing the `start` and `end`
			*  positions of the view.
			*/
			function getView(start, end, transforms) {
				var index$1 = -1, length = transforms.length;
				while (++index$1 < length) {
					var data$2 = transforms[index$1], size$1 = data$2.size;
					switch (data$2.type) {
						case "drop":
							start += size$1;
							break;
						case "dropRight":
							end -= size$1;
							break;
						case "take":
							end = nativeMin(end, start + size$1);
							break;
						case "takeRight":
							start = nativeMax(start, end - size$1);
							break;
					}
				}
				return {
					"start": start,
					"end": end
				};
			}
			/**
			* Extracts wrapper details from the `source` body comment.
			*
			* @private
			* @param {string} source The source to inspect.
			* @returns {Array} Returns the wrapper details.
			*/
			function getWrapDetails(source) {
				var match = source.match(reWrapDetails);
				return match ? match[1].split(reSplitDetails) : [];
			}
			/**
			* Checks if `path` exists on `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {Array|string} path The path to check.
			* @param {Function} hasFunc The function to check properties.
			* @returns {boolean} Returns `true` if `path` exists, else `false`.
			*/
			function hasPath(object$2, path$28, hasFunc) {
				path$28 = castPath(path$28, object$2);
				var index$1 = -1, length = path$28.length, result$1 = false;
				while (++index$1 < length) {
					var key = toKey(path$28[index$1]);
					if (!(result$1 = object$2 != null && hasFunc(object$2, key))) break;
					object$2 = object$2[key];
				}
				if (result$1 || ++index$1 != length) return result$1;
				length = object$2 == null ? 0 : object$2.length;
				return !!length && isLength(length) && isIndex(key, length) && (isArray$5(object$2) || isArguments(object$2));
			}
			/**
			* Initializes an array clone.
			*
			* @private
			* @param {Array} array The array to clone.
			* @returns {Array} Returns the initialized clone.
			*/
			function initCloneArray(array) {
				var length = array.length, result$1 = new array.constructor(length);
				if (length && typeof array[0] == "string" && hasOwnProperty$5.call(array, "index")) {
					result$1.index = array.index;
					result$1.input = array.input;
				}
				return result$1;
			}
			/**
			* Initializes an object clone.
			*
			* @private
			* @param {Object} object The object to clone.
			* @returns {Object} Returns the initialized clone.
			*/
			function initCloneObject(object$2) {
				return typeof object$2.constructor == "function" && !isPrototype(object$2) ? baseCreate(getPrototype(object$2)) : {};
			}
			/**
			* Initializes an object clone based on its `toStringTag`.
			*
			* **Note:** This function only supports cloning values with tags of
			* `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
			*
			* @private
			* @param {Object} object The object to clone.
			* @param {string} tag The `toStringTag` of the object to clone.
			* @param {boolean} [isDeep] Specify a deep clone.
			* @returns {Object} Returns the initialized clone.
			*/
			function initCloneByTag(object$2, tag$3, isDeep) {
				var Ctor = object$2.constructor;
				switch (tag$3) {
					case arrayBufferTag: return cloneArrayBuffer(object$2);
					case boolTag:
					case dateTag: return new Ctor(+object$2);
					case dataViewTag: return cloneDataView(object$2, isDeep);
					case float32Tag:
					case float64Tag:
					case int8Tag:
					case int16Tag:
					case int32Tag:
					case uint8Tag:
					case uint8ClampedTag:
					case uint16Tag:
					case uint32Tag: return cloneTypedArray(object$2, isDeep);
					case mapTag: return new Ctor();
					case numberTag:
					case stringTag: return new Ctor(object$2);
					case regexpTag: return cloneRegExp(object$2);
					case setTag: return new Ctor();
					case symbolTag$1: return cloneSymbol(object$2);
				}
			}
			/**
			* Inserts wrapper `details` in a comment at the top of the `source` body.
			*
			* @private
			* @param {string} source The source to modify.
			* @returns {Array} details The details to insert.
			* @returns {string} Returns the modified source.
			*/
			function insertWrapDetails(source, details) {
				var length = details.length;
				if (!length) return source;
				var lastIndex = length - 1;
				details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
				details = details.join(length > 2 ? ", " : " ");
				return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
			}
			/**
			* Checks if `value` is a flattenable `arguments` object or array.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
			*/
			function isFlattenable(value) {
				return isArray$5(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
			}
			/**
			* Checks if `value` is a valid array-like index.
			*
			* @private
			* @param {*} value The value to check.
			* @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
			* @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
			*/
			function isIndex(value, length) {
				var type = typeof value;
				length = length == null ? MAX_SAFE_INTEGER : length;
				return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
			}
			/**
			* Checks if the given arguments are from an iteratee call.
			*
			* @private
			* @param {*} value The potential iteratee value argument.
			* @param {*} index The potential iteratee index or key argument.
			* @param {*} object The potential iteratee object argument.
			* @returns {boolean} Returns `true` if the arguments are from an iteratee call,
			*  else `false`.
			*/
			function isIterateeCall(value, index$1, object$2) {
				if (!isObject$5(object$2)) return false;
				var type = typeof index$1;
				if (type == "number" ? isArrayLike(object$2) && isIndex(index$1, object$2.length) : type == "string" && index$1 in object$2) return eq(object$2[index$1], value);
				return false;
			}
			/**
			* Checks if `value` is a property name and not a property path.
			*
			* @private
			* @param {*} value The value to check.
			* @param {Object} [object] The object to query keys on.
			* @returns {boolean} Returns `true` if `value` is a property name, else `false`.
			*/
			function isKey(value, object$2) {
				if (isArray$5(value)) return false;
				var type = typeof value;
				if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$2(value)) return true;
				return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object$2 != null && value in Object$1(object$2);
			}
			/**
			* Checks if `value` is suitable for use as unique object key.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is suitable, else `false`.
			*/
			function isKeyable(value) {
				var type = typeof value;
				return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
			}
			/**
			* Checks if `func` has a lazy counterpart.
			*
			* @private
			* @param {Function} func The function to check.
			* @returns {boolean} Returns `true` if `func` has a lazy counterpart,
			*  else `false`.
			*/
			function isLaziable(func) {
				var funcName = getFuncName(func), other = lodash[funcName];
				if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) return false;
				if (func === other) return true;
				var data$2 = getData(other);
				return !!data$2 && func === data$2[0];
			}
			/**
			* Checks if `func` has its source masked.
			*
			* @private
			* @param {Function} func The function to check.
			* @returns {boolean} Returns `true` if `func` is masked, else `false`.
			*/
			function isMasked(func) {
				return !!maskSrcKey && maskSrcKey in func;
			}
			/**
			* Checks if `func` is capable of being masked.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `func` is maskable, else `false`.
			*/
			var isMaskable = coreJsData ? isFunction$10 : stubFalse;
			/**
			* Checks if `value` is likely a prototype object.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
			*/
			function isPrototype(value) {
				var Ctor = value && value.constructor, proto$1 = typeof Ctor == "function" && Ctor.prototype || objectProto$1;
				return value === proto$1;
			}
			/**
			* Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
			*
			* @private
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` if suitable for strict
			*  equality comparisons, else `false`.
			*/
			function isStrictComparable(value) {
				return value === value && !isObject$5(value);
			}
			/**
			* A specialized version of `matchesProperty` for source values suitable
			* for strict equality comparisons, i.e. `===`.
			*
			* @private
			* @param {string} key The key of the property to get.
			* @param {*} srcValue The value to match.
			* @returns {Function} Returns the new spec function.
			*/
			function matchesStrictComparable(key, srcValue) {
				return function(object$2) {
					if (object$2 == null) return false;
					return object$2[key] === srcValue && (srcValue !== undefined$1 || key in Object$1(object$2));
				};
			}
			/**
			* A specialized version of `_.memoize` which clears the memoized function's
			* cache when it exceeds `MAX_MEMOIZE_SIZE`.
			*
			* @private
			* @param {Function} func The function to have its output memoized.
			* @returns {Function} Returns the new memoized function.
			*/
			function memoizeCapped(func) {
				var result$1 = memoize(func, function(key) {
					if (cache$3.size === MAX_MEMOIZE_SIZE) cache$3.clear();
					return key;
				});
				var cache$3 = result$1.cache;
				return result$1;
			}
			/**
			* Merges the function metadata of `source` into `data`.
			*
			* Merging metadata reduces the number of wrappers used to invoke a function.
			* This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
			* may be applied regardless of execution order. Methods like `_.ary` and
			* `_.rearg` modify function arguments, making the order in which they are
			* executed important, preventing the merging of metadata. However, we make
			* an exception for a safe combined case where curried functions have `_.ary`
			* and or `_.rearg` applied.
			*
			* @private
			* @param {Array} data The destination metadata.
			* @param {Array} source The source metadata.
			* @returns {Array} Returns `data`.
			*/
			function mergeData(data$2, source) {
				var bitmask = data$2[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
				var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data$2[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
				if (!(isCommon || isCombo)) return data$2;
				if (srcBitmask & WRAP_BIND_FLAG) {
					data$2[2] = source[2];
					newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
				}
				var value = source[3];
				if (value) {
					var partials = data$2[3];
					data$2[3] = partials ? composeArgs(partials, value, source[4]) : value;
					data$2[4] = partials ? replaceHolders(data$2[3], PLACEHOLDER) : source[4];
				}
				value = source[5];
				if (value) {
					partials = data$2[5];
					data$2[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
					data$2[6] = partials ? replaceHolders(data$2[5], PLACEHOLDER) : source[6];
				}
				value = source[7];
				if (value) data$2[7] = value;
				if (srcBitmask & WRAP_ARY_FLAG) data$2[8] = data$2[8] == null ? source[8] : nativeMin(data$2[8], source[8]);
				if (data$2[9] == null) data$2[9] = source[9];
				data$2[0] = source[0];
				data$2[1] = newBitmask;
				return data$2;
			}
			/**
			* This function is like
			* [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			* except that it includes inherited enumerable properties.
			*
			* @private
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names.
			*/
			function nativeKeysIn(object$2) {
				var result$1 = [];
				if (object$2 != null) for (var key in Object$1(object$2)) result$1.push(key);
				return result$1;
			}
			/**
			* Converts `value` to a string using `Object.prototype.toString`.
			*
			* @private
			* @param {*} value The value to convert.
			* @returns {string} Returns the converted string.
			*/
			function objectToString$3(value) {
				return nativeObjectToString.call(value);
			}
			/**
			* A specialized version of `baseRest` which transforms the rest array.
			*
			* @private
			* @param {Function} func The function to apply a rest parameter to.
			* @param {number} [start=func.length-1] The start position of the rest parameter.
			* @param {Function} transform The rest array transform.
			* @returns {Function} Returns the new function.
			*/
			function overRest(func, start, transform$2) {
				start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
				return function() {
					var args = arguments, index$1 = -1, length = nativeMax(args.length - start, 0), array = Array$1(length);
					while (++index$1 < length) array[index$1] = args[start + index$1];
					index$1 = -1;
					var otherArgs = Array$1(start + 1);
					while (++index$1 < start) otherArgs[index$1] = args[index$1];
					otherArgs[start] = transform$2(array);
					return apply(func, this, otherArgs);
				};
			}
			/**
			* Gets the parent value at `path` of `object`.
			*
			* @private
			* @param {Object} object The object to query.
			* @param {Array} path The path to get the parent value of.
			* @returns {*} Returns the parent value.
			*/
			function parent(object$2, path$28) {
				return path$28.length < 2 ? object$2 : baseGet(object$2, baseSlice$1(path$28, 0, -1));
			}
			/**
			* Reorder `array` according to the specified indexes where the element at
			* the first index is assigned as the first element, the element at
			* the second index is assigned as the second element, and so on.
			*
			* @private
			* @param {Array} array The array to reorder.
			* @param {Array} indexes The arranged array indexes.
			* @returns {Array} Returns `array`.
			*/
			function reorder(array, indexes) {
				var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
				while (length--) {
					var index$1 = indexes[length];
					array[length] = isIndex(index$1, arrLength) ? oldArray[index$1] : undefined$1;
				}
				return array;
			}
			/**
			* Gets the value at `key`, unless `key` is "__proto__" or "constructor".
			*
			* @private
			* @param {Object} object The object to query.
			* @param {string} key The key of the property to get.
			* @returns {*} Returns the property value.
			*/
			function safeGet(object$2, key) {
				if (key === "constructor" && typeof object$2[key] === "function") return;
				if (key == "__proto__") return;
				return object$2[key];
			}
			/**
			* Sets metadata for `func`.
			*
			* **Note:** If this function becomes hot, i.e. is invoked a lot in a short
			* period of time, it will trip its breaker and transition to an identity
			* function to avoid garbage collection pauses in V8. See
			* [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
			* for more details.
			*
			* @private
			* @param {Function} func The function to associate metadata with.
			* @param {*} data The metadata.
			* @returns {Function} Returns `func`.
			*/
			var setData = shortOut(baseSetData);
			/**
			* A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
			*
			* @private
			* @param {Function} func The function to delay.
			* @param {number} wait The number of milliseconds to delay invocation.
			* @returns {number|Object} Returns the timer id or timeout object.
			*/
			var setTimeout$1 = ctxSetTimeout || function(func, wait) {
				return root$5.setTimeout(func, wait);
			};
			/**
			* Sets the `toString` method of `func` to return `string`.
			*
			* @private
			* @param {Function} func The function to modify.
			* @param {Function} string The `toString` result.
			* @returns {Function} Returns `func`.
			*/
			var setToString = shortOut(baseSetToString);
			/**
			* Sets the `toString` method of `wrapper` to mimic the source of `reference`
			* with wrapper details in a comment at the top of the source body.
			*
			* @private
			* @param {Function} wrapper The function to modify.
			* @param {Function} reference The reference function.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @returns {Function} Returns `wrapper`.
			*/
			function setWrapToString(wrapper, reference, bitmask) {
				var source = reference + "";
				return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
			}
			/**
			* Creates a function that'll short out and invoke `identity` instead
			* of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
			* milliseconds.
			*
			* @private
			* @param {Function} func The function to restrict.
			* @returns {Function} Returns the new shortable function.
			*/
			function shortOut(func) {
				var count = 0, lastCalled = 0;
				return function() {
					var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
					lastCalled = stamp;
					if (remaining > 0) {
						if (++count >= HOT_COUNT) return arguments[0];
					} else count = 0;
					return func.apply(undefined$1, arguments);
				};
			}
			/**
			* A specialized version of `_.shuffle` which mutates and sets the size of `array`.
			*
			* @private
			* @param {Array} array The array to shuffle.
			* @param {number} [size=array.length] The size of `array`.
			* @returns {Array} Returns `array`.
			*/
			function shuffleSelf(array, size$1) {
				var index$1 = -1, length = array.length, lastIndex = length - 1;
				size$1 = size$1 === undefined$1 ? length : size$1;
				while (++index$1 < size$1) {
					var rand = baseRandom(index$1, lastIndex), value = array[rand];
					array[rand] = array[index$1];
					array[index$1] = value;
				}
				array.length = size$1;
				return array;
			}
			/**
			* Converts `string` to a property path array.
			*
			* @private
			* @param {string} string The string to convert.
			* @returns {Array} Returns the property path array.
			*/
			var stringToPath = memoizeCapped(function(string$3) {
				var result$1 = [];
				if (string$3.charCodeAt(0) === 46) result$1.push("");
				string$3.replace(rePropName, function(match, number, quote, subString) {
					result$1.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
				});
				return result$1;
			});
			/**
			* Converts `value` to a string key if it's not a string or symbol.
			*
			* @private
			* @param {*} value The value to inspect.
			* @returns {string|symbol} Returns the key.
			*/
			function toKey(value) {
				if (typeof value == "string" || isSymbol$2(value)) return value;
				var result$1 = value + "";
				return result$1 == "0" && 1 / value == -INFINITY$1 ? "-0" : result$1;
			}
			/**
			* Converts `func` to its source code.
			*
			* @private
			* @param {Function} func The function to convert.
			* @returns {string} Returns the source code.
			*/
			function toSource(func) {
				if (func != null) {
					try {
						return funcToString.call(func);
					} catch (e$2) {}
					try {
						return func + "";
					} catch (e$2) {}
				}
				return "";
			}
			/**
			* Updates wrapper `details` based on `bitmask` flags.
			*
			* @private
			* @returns {Array} details The details to modify.
			* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
			* @returns {Array} Returns `details`.
			*/
			function updateWrapDetails(details, bitmask) {
				arrayEach(wrapFlags, function(pair) {
					var value = "_." + pair[0];
					if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
				});
				return details.sort();
			}
			/**
			* Creates a clone of `wrapper`.
			*
			* @private
			* @param {Object} wrapper The wrapper to clone.
			* @returns {Object} Returns the cloned wrapper.
			*/
			function wrapperClone(wrapper) {
				if (wrapper instanceof LazyWrapper) return wrapper.clone();
				var result$1 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
				result$1.__actions__ = copyArray(wrapper.__actions__);
				result$1.__index__ = wrapper.__index__;
				result$1.__values__ = wrapper.__values__;
				return result$1;
			}
			/**
			* Creates an array of elements split into groups the length of `size`.
			* If `array` can't be split evenly, the final chunk will be the remaining
			* elements.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to process.
			* @param {number} [size=1] The length of each chunk
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the new array of chunks.
			* @example
			*
			* _.chunk(['a', 'b', 'c', 'd'], 2);
			* // => [['a', 'b'], ['c', 'd']]
			*
			* _.chunk(['a', 'b', 'c', 'd'], 3);
			* // => [['a', 'b', 'c'], ['d']]
			*/
			function chunk(array, size$1, guard) {
				if (guard ? isIterateeCall(array, size$1, guard) : size$1 === undefined$1) size$1 = 1;
				else size$1 = nativeMax(toInteger(size$1), 0);
				var length = array == null ? 0 : array.length;
				if (!length || size$1 < 1) return [];
				var index$1 = 0, resIndex = 0, result$1 = Array$1(nativeCeil(length / size$1));
				while (index$1 < length) result$1[resIndex++] = baseSlice$1(array, index$1, index$1 += size$1);
				return result$1;
			}
			/**
			* Creates an array with all falsey values removed. The values `false`, `null`,
			* `0`, `""`, `undefined`, and `NaN` are falsey.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to compact.
			* @returns {Array} Returns the new array of filtered values.
			* @example
			*
			* _.compact([0, 1, false, 2, '', 3]);
			* // => [1, 2, 3]
			*/
			function compact(array) {
				var index$1 = -1, length = array == null ? 0 : array.length, resIndex = 0, result$1 = [];
				while (++index$1 < length) {
					var value = array[index$1];
					if (value) result$1[resIndex++] = value;
				}
				return result$1;
			}
			/**
			* Creates a new array concatenating `array` with any additional arrays
			* and/or values.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to concatenate.
			* @param {...*} [values] The values to concatenate.
			* @returns {Array} Returns the new concatenated array.
			* @example
			*
			* var array = [1];
			* var other = _.concat(array, 2, [3], [[4]]);
			*
			* console.log(other);
			* // => [1, 2, 3, [4]]
			*
			* console.log(array);
			* // => [1]
			*/
			function concat() {
				var length = arguments.length;
				if (!length) return [];
				var args = Array$1(length - 1), array = arguments[0], index$1 = length;
				while (index$1--) args[index$1 - 1] = arguments[index$1];
				return arrayPush(isArray$5(array) ? copyArray(array) : [array], baseFlatten(args, 1));
			}
			/**
			* Creates an array of `array` values not included in the other given arrays
			* using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons. The order and references of result values are
			* determined by the first array.
			*
			* **Note:** Unlike `_.pullAll`, this method returns a new array.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {...Array} [values] The values to exclude.
			* @returns {Array} Returns the new array of filtered values.
			* @see _.without, _.xor
			* @example
			*
			* _.difference([2, 1], [2, 3]);
			* // => [1]
			*/
			var difference = baseRest(function(array, values$1) {
				return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values$1, 1, isArrayLikeObject, true)) : [];
			});
			/**
			* This method is like `_.difference` except that it accepts `iteratee` which
			* is invoked for each element of `array` and `values` to generate the criterion
			* by which they're compared. The order and references of result values are
			* determined by the first array. The iteratee is invoked with one argument:
			* (value).
			*
			* **Note:** Unlike `_.pullAllBy`, this method returns a new array.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {...Array} [values] The values to exclude.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns the new array of filtered values.
			* @example
			*
			* _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
			* // => [1.2]
			*
			* // The `_.property` iteratee shorthand.
			* _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
			* // => [{ 'x': 2 }]
			*/
			var differenceBy = baseRest(function(array, values$1) {
				var iteratee$1 = last$2(values$1);
				if (isArrayLikeObject(iteratee$1)) iteratee$1 = undefined$1;
				return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values$1, 1, isArrayLikeObject, true), getIteratee(iteratee$1, 2)) : [];
			});
			/**
			* This method is like `_.difference` except that it accepts `comparator`
			* which is invoked to compare elements of `array` to `values`. The order and
			* references of result values are determined by the first array. The comparator
			* is invoked with two arguments: (arrVal, othVal).
			*
			* **Note:** Unlike `_.pullAllWith`, this method returns a new array.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {...Array} [values] The values to exclude.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of filtered values.
			* @example
			*
			* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
			*
			* _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
			* // => [{ 'x': 2, 'y': 1 }]
			*/
			var differenceWith = baseRest(function(array, values$1) {
				var comparator = last$2(values$1);
				if (isArrayLikeObject(comparator)) comparator = undefined$1;
				return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values$1, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
			});
			/**
			* Creates a slice of `array` with `n` elements dropped from the beginning.
			*
			* @static
			* @memberOf _
			* @since 0.5.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {number} [n=1] The number of elements to drop.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.drop([1, 2, 3]);
			* // => [2, 3]
			*
			* _.drop([1, 2, 3], 2);
			* // => [3]
			*
			* _.drop([1, 2, 3], 5);
			* // => []
			*
			* _.drop([1, 2, 3], 0);
			* // => [1, 2, 3]
			*/
			function drop(array, n$4, guard) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				n$4 = guard || n$4 === undefined$1 ? 1 : toInteger(n$4);
				return baseSlice$1(array, n$4 < 0 ? 0 : n$4, length);
			}
			/**
			* Creates a slice of `array` with `n` elements dropped from the end.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {number} [n=1] The number of elements to drop.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.dropRight([1, 2, 3]);
			* // => [1, 2]
			*
			* _.dropRight([1, 2, 3], 2);
			* // => [1]
			*
			* _.dropRight([1, 2, 3], 5);
			* // => []
			*
			* _.dropRight([1, 2, 3], 0);
			* // => [1, 2, 3]
			*/
			function dropRight(array, n$4, guard) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				n$4 = guard || n$4 === undefined$1 ? 1 : toInteger(n$4);
				n$4 = length - n$4;
				return baseSlice$1(array, 0, n$4 < 0 ? 0 : n$4);
			}
			/**
			* Creates a slice of `array` excluding elements dropped from the end.
			* Elements are dropped until `predicate` returns falsey. The predicate is
			* invoked with three arguments: (value, index, array).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': true },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': false }
			* ];
			*
			* _.dropRightWhile(users, function(o) { return !o.active; });
			* // => objects for ['barney']
			*
			* // The `_.matches` iteratee shorthand.
			* _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
			* // => objects for ['barney', 'fred']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.dropRightWhile(users, ['active', false]);
			* // => objects for ['barney']
			*
			* // The `_.property` iteratee shorthand.
			* _.dropRightWhile(users, 'active');
			* // => objects for ['barney', 'fred', 'pebbles']
			*/
			function dropRightWhile(array, predicate) {
				return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
			}
			/**
			* Creates a slice of `array` excluding elements dropped from the beginning.
			* Elements are dropped until `predicate` returns falsey. The predicate is
			* invoked with three arguments: (value, index, array).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': false },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': true }
			* ];
			*
			* _.dropWhile(users, function(o) { return !o.active; });
			* // => objects for ['pebbles']
			*
			* // The `_.matches` iteratee shorthand.
			* _.dropWhile(users, { 'user': 'barney', 'active': false });
			* // => objects for ['fred', 'pebbles']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.dropWhile(users, ['active', false]);
			* // => objects for ['pebbles']
			*
			* // The `_.property` iteratee shorthand.
			* _.dropWhile(users, 'active');
			* // => objects for ['barney', 'fred', 'pebbles']
			*/
			function dropWhile(array, predicate) {
				return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
			}
			/**
			* Fills elements of `array` with `value` from `start` up to, but not
			* including, `end`.
			*
			* **Note:** This method mutates `array`.
			*
			* @static
			* @memberOf _
			* @since 3.2.0
			* @category Array
			* @param {Array} array The array to fill.
			* @param {*} value The value to fill `array` with.
			* @param {number} [start=0] The start position.
			* @param {number} [end=array.length] The end position.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = [1, 2, 3];
			*
			* _.fill(array, 'a');
			* console.log(array);
			* // => ['a', 'a', 'a']
			*
			* _.fill(Array(3), 2);
			* // => [2, 2, 2]
			*
			* _.fill([4, 6, 8, 10], '*', 1, 3);
			* // => [4, '*', '*', 10]
			*/
			function fill(array, value, start, end) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
					start = 0;
					end = length;
				}
				return baseFill(array, value, start, end);
			}
			/**
			* This method is like `_.find` except that it returns the index of the first
			* element `predicate` returns truthy for instead of the element itself.
			*
			* @static
			* @memberOf _
			* @since 1.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param {number} [fromIndex=0] The index to search from.
			* @returns {number} Returns the index of the found element, else `-1`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': false },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': true }
			* ];
			*
			* _.findIndex(users, function(o) { return o.user == 'barney'; });
			* // => 0
			*
			* // The `_.matches` iteratee shorthand.
			* _.findIndex(users, { 'user': 'fred', 'active': false });
			* // => 1
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.findIndex(users, ['active', false]);
			* // => 0
			*
			* // The `_.property` iteratee shorthand.
			* _.findIndex(users, 'active');
			* // => 2
			*/
			function findIndex(array, predicate, fromIndex) {
				var length = array == null ? 0 : array.length;
				if (!length) return -1;
				var index$1 = fromIndex == null ? 0 : toInteger(fromIndex);
				if (index$1 < 0) index$1 = nativeMax(length + index$1, 0);
				return baseFindIndex(array, getIteratee(predicate, 3), index$1);
			}
			/**
			* This method is like `_.findIndex` except that it iterates over elements
			* of `collection` from right to left.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param {number} [fromIndex=array.length-1] The index to search from.
			* @returns {number} Returns the index of the found element, else `-1`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': true },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': false }
			* ];
			*
			* _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
			* // => 2
			*
			* // The `_.matches` iteratee shorthand.
			* _.findLastIndex(users, { 'user': 'barney', 'active': true });
			* // => 0
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.findLastIndex(users, ['active', false]);
			* // => 2
			*
			* // The `_.property` iteratee shorthand.
			* _.findLastIndex(users, 'active');
			* // => 0
			*/
			function findLastIndex(array, predicate, fromIndex) {
				var length = array == null ? 0 : array.length;
				if (!length) return -1;
				var index$1 = length - 1;
				if (fromIndex !== undefined$1) {
					index$1 = toInteger(fromIndex);
					index$1 = fromIndex < 0 ? nativeMax(length + index$1, 0) : nativeMin(index$1, length - 1);
				}
				return baseFindIndex(array, getIteratee(predicate, 3), index$1, true);
			}
			/**
			* Flattens `array` a single level deep.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to flatten.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* _.flatten([1, [2, [3, [4]], 5]]);
			* // => [1, 2, [3, [4]], 5]
			*/
			function flatten(array) {
				var length = array == null ? 0 : array.length;
				return length ? baseFlatten(array, 1) : [];
			}
			/**
			* Recursively flattens `array`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to flatten.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* _.flattenDeep([1, [2, [3, [4]], 5]]);
			* // => [1, 2, 3, 4, 5]
			*/
			function flattenDeep(array) {
				var length = array == null ? 0 : array.length;
				return length ? baseFlatten(array, INFINITY$1) : [];
			}
			/**
			* Recursively flatten `array` up to `depth` times.
			*
			* @static
			* @memberOf _
			* @since 4.4.0
			* @category Array
			* @param {Array} array The array to flatten.
			* @param {number} [depth=1] The maximum recursion depth.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* var array = [1, [2, [3, [4]], 5]];
			*
			* _.flattenDepth(array, 1);
			* // => [1, 2, [3, [4]], 5]
			*
			* _.flattenDepth(array, 2);
			* // => [1, 2, 3, [4], 5]
			*/
			function flattenDepth(array, depth$1) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				depth$1 = depth$1 === undefined$1 ? 1 : toInteger(depth$1);
				return baseFlatten(array, depth$1);
			}
			/**
			* The inverse of `_.toPairs`; this method returns an object composed
			* from key-value `pairs`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} pairs The key-value pairs.
			* @returns {Object} Returns the new object.
			* @example
			*
			* _.fromPairs([['a', 1], ['b', 2]]);
			* // => { 'a': 1, 'b': 2 }
			*/
			function fromPairs(pairs) {
				var index$1 = -1, length = pairs == null ? 0 : pairs.length, result$1 = {};
				while (++index$1 < length) {
					var pair = pairs[index$1];
					result$1[pair[0]] = pair[1];
				}
				return result$1;
			}
			/**
			* Gets the first element of `array`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @alias first
			* @category Array
			* @param {Array} array The array to query.
			* @returns {*} Returns the first element of `array`.
			* @example
			*
			* _.head([1, 2, 3]);
			* // => 1
			*
			* _.head([]);
			* // => undefined
			*/
			function head(array) {
				return array && array.length ? array[0] : undefined$1;
			}
			/**
			* Gets the index at which the first occurrence of `value` is found in `array`
			* using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons. If `fromIndex` is negative, it's used as the
			* offset from the end of `array`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {*} value The value to search for.
			* @param {number} [fromIndex=0] The index to search from.
			* @returns {number} Returns the index of the matched value, else `-1`.
			* @example
			*
			* _.indexOf([1, 2, 1, 2], 2);
			* // => 1
			*
			* // Search from the `fromIndex`.
			* _.indexOf([1, 2, 1, 2], 2, 2);
			* // => 3
			*/
			function indexOf$1(array, value, fromIndex) {
				var length = array == null ? 0 : array.length;
				if (!length) return -1;
				var index$1 = fromIndex == null ? 0 : toInteger(fromIndex);
				if (index$1 < 0) index$1 = nativeMax(length + index$1, 0);
				return baseIndexOf(array, value, index$1);
			}
			/**
			* Gets all but the last element of `array`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to query.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.initial([1, 2, 3]);
			* // => [1, 2]
			*/
			function initial(array) {
				var length = array == null ? 0 : array.length;
				return length ? baseSlice$1(array, 0, -1) : [];
			}
			/**
			* Creates an array of unique values that are included in all given arrays
			* using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons. The order and references of result values are
			* determined by the first array.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @returns {Array} Returns the new array of intersecting values.
			* @example
			*
			* _.intersection([2, 1], [2, 3]);
			* // => [2]
			*/
			var intersection = baseRest(function(arrays) {
				var mapped = arrayMap(arrays, castArrayLikeObject);
				return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
			});
			/**
			* This method is like `_.intersection` except that it accepts `iteratee`
			* which is invoked for each element of each `arrays` to generate the criterion
			* by which they're compared. The order and references of result values are
			* determined by the first array. The iteratee is invoked with one argument:
			* (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns the new array of intersecting values.
			* @example
			*
			* _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
			* // => [2.1]
			*
			* // The `_.property` iteratee shorthand.
			* _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
			* // => [{ 'x': 1 }]
			*/
			var intersectionBy = baseRest(function(arrays) {
				var iteratee$1 = last$2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
				if (iteratee$1 === last$2(mapped)) iteratee$1 = undefined$1;
				else mapped.pop();
				return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee$1, 2)) : [];
			});
			/**
			* This method is like `_.intersection` except that it accepts `comparator`
			* which is invoked to compare elements of `arrays`. The order and references
			* of result values are determined by the first array. The comparator is
			* invoked with two arguments: (arrVal, othVal).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of intersecting values.
			* @example
			*
			* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
			* var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
			*
			* _.intersectionWith(objects, others, _.isEqual);
			* // => [{ 'x': 1, 'y': 2 }]
			*/
			var intersectionWith = baseRest(function(arrays) {
				var comparator = last$2(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
				comparator = typeof comparator == "function" ? comparator : undefined$1;
				if (comparator) mapped.pop();
				return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
			});
			/**
			* Converts all elements in `array` into a string separated by `separator`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to convert.
			* @param {string} [separator=','] The element separator.
			* @returns {string} Returns the joined string.
			* @example
			*
			* _.join(['a', 'b', 'c'], '~');
			* // => 'a~b~c'
			*/
			function join$4(array, separator) {
				return array == null ? "" : nativeJoin.call(array, separator);
			}
			/**
			* Gets the last element of `array`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to query.
			* @returns {*} Returns the last element of `array`.
			* @example
			*
			* _.last([1, 2, 3]);
			* // => 3
			*/
			function last$2(array) {
				var length = array == null ? 0 : array.length;
				return length ? array[length - 1] : undefined$1;
			}
			/**
			* This method is like `_.indexOf` except that it iterates over elements of
			* `array` from right to left.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {*} value The value to search for.
			* @param {number} [fromIndex=array.length-1] The index to search from.
			* @returns {number} Returns the index of the matched value, else `-1`.
			* @example
			*
			* _.lastIndexOf([1, 2, 1, 2], 2);
			* // => 3
			*
			* // Search from the `fromIndex`.
			* _.lastIndexOf([1, 2, 1, 2], 2, 2);
			* // => 1
			*/
			function lastIndexOf(array, value, fromIndex) {
				var length = array == null ? 0 : array.length;
				if (!length) return -1;
				var index$1 = length;
				if (fromIndex !== undefined$1) {
					index$1 = toInteger(fromIndex);
					index$1 = index$1 < 0 ? nativeMax(length + index$1, 0) : nativeMin(index$1, length - 1);
				}
				return value === value ? strictLastIndexOf(array, value, index$1) : baseFindIndex(array, baseIsNaN, index$1, true);
			}
			/**
			* Gets the element at index `n` of `array`. If `n` is negative, the nth
			* element from the end is returned.
			*
			* @static
			* @memberOf _
			* @since 4.11.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {number} [n=0] The index of the element to return.
			* @returns {*} Returns the nth element of `array`.
			* @example
			*
			* var array = ['a', 'b', 'c', 'd'];
			*
			* _.nth(array, 1);
			* // => 'b'
			*
			* _.nth(array, -2);
			* // => 'c';
			*/
			function nth(array, n$4) {
				return array && array.length ? baseNth(array, toInteger(n$4)) : undefined$1;
			}
			/**
			* Removes all given values from `array` using
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons.
			*
			* **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
			* to remove elements from an array by predicate.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {...*} [values] The values to remove.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = ['a', 'b', 'c', 'a', 'b', 'c'];
			*
			* _.pull(array, 'a', 'c');
			* console.log(array);
			* // => ['b', 'b']
			*/
			var pull = baseRest(pullAll);
			/**
			* This method is like `_.pull` except that it accepts an array of values to remove.
			*
			* **Note:** Unlike `_.difference`, this method mutates `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {Array} values The values to remove.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = ['a', 'b', 'c', 'a', 'b', 'c'];
			*
			* _.pullAll(array, ['a', 'c']);
			* console.log(array);
			* // => ['b', 'b']
			*/
			function pullAll(array, values$1) {
				return array && array.length && values$1 && values$1.length ? basePullAll(array, values$1) : array;
			}
			/**
			* This method is like `_.pullAll` except that it accepts `iteratee` which is
			* invoked for each element of `array` and `values` to generate the criterion
			* by which they're compared. The iteratee is invoked with one argument: (value).
			*
			* **Note:** Unlike `_.differenceBy`, this method mutates `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {Array} values The values to remove.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
			*
			* _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
			* console.log(array);
			* // => [{ 'x': 2 }]
			*/
			function pullAllBy(array, values$1, iteratee$1) {
				return array && array.length && values$1 && values$1.length ? basePullAll(array, values$1, getIteratee(iteratee$1, 2)) : array;
			}
			/**
			* This method is like `_.pullAll` except that it accepts `comparator` which
			* is invoked to compare elements of `array` to `values`. The comparator is
			* invoked with two arguments: (arrVal, othVal).
			*
			* **Note:** Unlike `_.differenceWith`, this method mutates `array`.
			*
			* @static
			* @memberOf _
			* @since 4.6.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {Array} values The values to remove.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
			*
			* _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
			* console.log(array);
			* // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
			*/
			function pullAllWith(array, values$1, comparator) {
				return array && array.length && values$1 && values$1.length ? basePullAll(array, values$1, undefined$1, comparator) : array;
			}
			/**
			* Removes elements from `array` corresponding to `indexes` and returns an
			* array of removed elements.
			*
			* **Note:** Unlike `_.at`, this method mutates `array`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {...(number|number[])} [indexes] The indexes of elements to remove.
			* @returns {Array} Returns the new array of removed elements.
			* @example
			*
			* var array = ['a', 'b', 'c', 'd'];
			* var pulled = _.pullAt(array, [1, 3]);
			*
			* console.log(array);
			* // => ['a', 'c']
			*
			* console.log(pulled);
			* // => ['b', 'd']
			*/
			var pullAt = flatRest(function(array, indexes) {
				var length = array == null ? 0 : array.length, result$1 = baseAt(array, indexes);
				basePullAt(array, arrayMap(indexes, function(index$1) {
					return isIndex(index$1, length) ? +index$1 : index$1;
				}).sort(compareAscending));
				return result$1;
			});
			/**
			* Removes all elements from `array` that `predicate` returns truthy for
			* and returns an array of the removed elements. The predicate is invoked
			* with three arguments: (value, index, array).
			*
			* **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
			* to pull elements from an array by value.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new array of removed elements.
			* @example
			*
			* var array = [1, 2, 3, 4];
			* var evens = _.remove(array, function(n) {
			*   return n % 2 == 0;
			* });
			*
			* console.log(array);
			* // => [1, 3]
			*
			* console.log(evens);
			* // => [2, 4]
			*/
			function remove$4(array, predicate) {
				var result$1 = [];
				if (!(array && array.length)) return result$1;
				var index$1 = -1, indexes = [], length = array.length;
				predicate = getIteratee(predicate, 3);
				while (++index$1 < length) {
					var value = array[index$1];
					if (predicate(value, index$1, array)) {
						result$1.push(value);
						indexes.push(index$1);
					}
				}
				basePullAt(array, indexes);
				return result$1;
			}
			/**
			* Reverses `array` so that the first element becomes the last, the second
			* element becomes the second to last, and so on.
			*
			* **Note:** This method mutates `array` and is based on
			* [`Array#reverse`](https://mdn.io/Array/reverse).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to modify.
			* @returns {Array} Returns `array`.
			* @example
			*
			* var array = [1, 2, 3];
			*
			* _.reverse(array);
			* // => [3, 2, 1]
			*
			* console.log(array);
			* // => [3, 2, 1]
			*/
			function reverse(array) {
				return array == null ? array : nativeReverse.call(array);
			}
			/**
			* Creates a slice of `array` from `start` up to, but not including, `end`.
			*
			* **Note:** This method is used instead of
			* [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
			* returned.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to slice.
			* @param {number} [start=0] The start position.
			* @param {number} [end=array.length] The end position.
			* @returns {Array} Returns the slice of `array`.
			*/
			function slice$2(array, start, end) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
					start = 0;
					end = length;
				} else {
					start = start == null ? 0 : toInteger(start);
					end = end === undefined$1 ? length : toInteger(end);
				}
				return baseSlice$1(array, start, end);
			}
			/**
			* Uses a binary search to determine the lowest index at which `value`
			* should be inserted into `array` in order to maintain its sort order.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			* @example
			*
			* _.sortedIndex([30, 50], 40);
			* // => 1
			*/
			function sortedIndex(array, value) {
				return baseSortedIndex(array, value);
			}
			/**
			* This method is like `_.sortedIndex` except that it accepts `iteratee`
			* which is invoked for `value` and each element of `array` to compute their
			* sort ranking. The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			* @example
			*
			* var objects = [{ 'x': 4 }, { 'x': 5 }];
			*
			* _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
			* // => 0
			*
			* // The `_.property` iteratee shorthand.
			* _.sortedIndexBy(objects, { 'x': 4 }, 'x');
			* // => 0
			*/
			function sortedIndexBy(array, value, iteratee$1) {
				return baseSortedIndexBy(array, value, getIteratee(iteratee$1, 2));
			}
			/**
			* This method is like `_.indexOf` except that it performs a binary
			* search on a sorted `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {*} value The value to search for.
			* @returns {number} Returns the index of the matched value, else `-1`.
			* @example
			*
			* _.sortedIndexOf([4, 5, 5, 5, 6], 5);
			* // => 1
			*/
			function sortedIndexOf(array, value) {
				var length = array == null ? 0 : array.length;
				if (length) {
					var index$1 = baseSortedIndex(array, value);
					if (index$1 < length && eq(array[index$1], value)) return index$1;
				}
				return -1;
			}
			/**
			* This method is like `_.sortedIndex` except that it returns the highest
			* index at which `value` should be inserted into `array` in order to
			* maintain its sort order.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			* @example
			*
			* _.sortedLastIndex([4, 5, 5, 5, 6], 5);
			* // => 4
			*/
			function sortedLastIndex(array, value) {
				return baseSortedIndex(array, value, true);
			}
			/**
			* This method is like `_.sortedLastIndex` except that it accepts `iteratee`
			* which is invoked for `value` and each element of `array` to compute their
			* sort ranking. The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The sorted array to inspect.
			* @param {*} value The value to evaluate.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {number} Returns the index at which `value` should be inserted
			*  into `array`.
			* @example
			*
			* var objects = [{ 'x': 4 }, { 'x': 5 }];
			*
			* _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
			* // => 1
			*
			* // The `_.property` iteratee shorthand.
			* _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
			* // => 1
			*/
			function sortedLastIndexBy(array, value, iteratee$1) {
				return baseSortedIndexBy(array, value, getIteratee(iteratee$1, 2), true);
			}
			/**
			* This method is like `_.lastIndexOf` except that it performs a binary
			* search on a sorted `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {*} value The value to search for.
			* @returns {number} Returns the index of the matched value, else `-1`.
			* @example
			*
			* _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
			* // => 3
			*/
			function sortedLastIndexOf(array, value) {
				var length = array == null ? 0 : array.length;
				if (length) {
					var index$1 = baseSortedIndex(array, value, true) - 1;
					if (eq(array[index$1], value)) return index$1;
				}
				return -1;
			}
			/**
			* This method is like `_.uniq` except that it's designed and optimized
			* for sorted arrays.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @returns {Array} Returns the new duplicate free array.
			* @example
			*
			* _.sortedUniq([1, 1, 2]);
			* // => [1, 2]
			*/
			function sortedUniq(array) {
				return array && array.length ? baseSortedUniq(array) : [];
			}
			/**
			* This method is like `_.uniqBy` except that it's designed and optimized
			* for sorted arrays.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {Function} [iteratee] The iteratee invoked per element.
			* @returns {Array} Returns the new duplicate free array.
			* @example
			*
			* _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
			* // => [1.1, 2.3]
			*/
			function sortedUniqBy(array, iteratee$1) {
				return array && array.length ? baseSortedUniq(array, getIteratee(iteratee$1, 2)) : [];
			}
			/**
			* Gets all but the first element of `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.tail([1, 2, 3]);
			* // => [2, 3]
			*/
			function tail(array) {
				var length = array == null ? 0 : array.length;
				return length ? baseSlice$1(array, 1, length) : [];
			}
			/**
			* Creates a slice of `array` with `n` elements taken from the beginning.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {number} [n=1] The number of elements to take.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.take([1, 2, 3]);
			* // => [1]
			*
			* _.take([1, 2, 3], 2);
			* // => [1, 2]
			*
			* _.take([1, 2, 3], 5);
			* // => [1, 2, 3]
			*
			* _.take([1, 2, 3], 0);
			* // => []
			*/
			function take(array, n$4, guard) {
				if (!(array && array.length)) return [];
				n$4 = guard || n$4 === undefined$1 ? 1 : toInteger(n$4);
				return baseSlice$1(array, 0, n$4 < 0 ? 0 : n$4);
			}
			/**
			* Creates a slice of `array` with `n` elements taken from the end.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {number} [n=1] The number of elements to take.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* _.takeRight([1, 2, 3]);
			* // => [3]
			*
			* _.takeRight([1, 2, 3], 2);
			* // => [2, 3]
			*
			* _.takeRight([1, 2, 3], 5);
			* // => [1, 2, 3]
			*
			* _.takeRight([1, 2, 3], 0);
			* // => []
			*/
			function takeRight(array, n$4, guard) {
				var length = array == null ? 0 : array.length;
				if (!length) return [];
				n$4 = guard || n$4 === undefined$1 ? 1 : toInteger(n$4);
				n$4 = length - n$4;
				return baseSlice$1(array, n$4 < 0 ? 0 : n$4, length);
			}
			/**
			* Creates a slice of `array` with elements taken from the end. Elements are
			* taken until `predicate` returns falsey. The predicate is invoked with
			* three arguments: (value, index, array).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': true },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': false }
			* ];
			*
			* _.takeRightWhile(users, function(o) { return !o.active; });
			* // => objects for ['fred', 'pebbles']
			*
			* // The `_.matches` iteratee shorthand.
			* _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
			* // => objects for ['pebbles']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.takeRightWhile(users, ['active', false]);
			* // => objects for ['fred', 'pebbles']
			*
			* // The `_.property` iteratee shorthand.
			* _.takeRightWhile(users, 'active');
			* // => []
			*/
			function takeRightWhile(array, predicate) {
				return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
			}
			/**
			* Creates a slice of `array` with elements taken from the beginning. Elements
			* are taken until `predicate` returns falsey. The predicate is invoked with
			* three arguments: (value, index, array).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Array
			* @param {Array} array The array to query.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the slice of `array`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'active': false },
			*   { 'user': 'fred',    'active': false },
			*   { 'user': 'pebbles', 'active': true }
			* ];
			*
			* _.takeWhile(users, function(o) { return !o.active; });
			* // => objects for ['barney', 'fred']
			*
			* // The `_.matches` iteratee shorthand.
			* _.takeWhile(users, { 'user': 'barney', 'active': false });
			* // => objects for ['barney']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.takeWhile(users, ['active', false]);
			* // => objects for ['barney', 'fred']
			*
			* // The `_.property` iteratee shorthand.
			* _.takeWhile(users, 'active');
			* // => []
			*/
			function takeWhile(array, predicate) {
				return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
			}
			/**
			* Creates an array of unique values, in order, from all given arrays using
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @returns {Array} Returns the new array of combined values.
			* @example
			*
			* _.union([2], [1, 2]);
			* // => [2, 1]
			*/
			var union = baseRest(function(arrays) {
				return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
			});
			/**
			* This method is like `_.union` except that it accepts `iteratee` which is
			* invoked for each element of each `arrays` to generate the criterion by
			* which uniqueness is computed. Result values are chosen from the first
			* array in which the value occurs. The iteratee is invoked with one argument:
			* (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns the new array of combined values.
			* @example
			*
			* _.unionBy([2.1], [1.2, 2.3], Math.floor);
			* // => [2.1, 1.2]
			*
			* // The `_.property` iteratee shorthand.
			* _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
			* // => [{ 'x': 1 }, { 'x': 2 }]
			*/
			var unionBy = baseRest(function(arrays) {
				var iteratee$1 = last$2(arrays);
				if (isArrayLikeObject(iteratee$1)) iteratee$1 = undefined$1;
				return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee$1, 2));
			});
			/**
			* This method is like `_.union` except that it accepts `comparator` which
			* is invoked to compare elements of `arrays`. Result values are chosen from
			* the first array in which the value occurs. The comparator is invoked
			* with two arguments: (arrVal, othVal).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of combined values.
			* @example
			*
			* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
			* var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
			*
			* _.unionWith(objects, others, _.isEqual);
			* // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
			*/
			var unionWith = baseRest(function(arrays) {
				var comparator = last$2(arrays);
				comparator = typeof comparator == "function" ? comparator : undefined$1;
				return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
			});
			/**
			* Creates a duplicate-free version of an array, using
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons, in which only the first occurrence of each element
			* is kept. The order of result values is determined by the order they occur
			* in the array.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @returns {Array} Returns the new duplicate free array.
			* @example
			*
			* _.uniq([2, 1, 2]);
			* // => [2, 1]
			*/
			function uniq(array) {
				return array && array.length ? baseUniq(array) : [];
			}
			/**
			* This method is like `_.uniq` except that it accepts `iteratee` which is
			* invoked for each element in `array` to generate the criterion by which
			* uniqueness is computed. The order of result values is determined by the
			* order they occur in the array. The iteratee is invoked with one argument:
			* (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns the new duplicate free array.
			* @example
			*
			* _.uniqBy([2.1, 1.2, 2.3], Math.floor);
			* // => [2.1, 1.2]
			*
			* // The `_.property` iteratee shorthand.
			* _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
			* // => [{ 'x': 1 }, { 'x': 2 }]
			*/
			function uniqBy(array, iteratee$1) {
				return array && array.length ? baseUniq(array, getIteratee(iteratee$1, 2)) : [];
			}
			/**
			* This method is like `_.uniq` except that it accepts `comparator` which
			* is invoked to compare elements of `array`. The order of result values is
			* determined by the order they occur in the array.The comparator is invoked
			* with two arguments: (arrVal, othVal).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new duplicate free array.
			* @example
			*
			* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
			*
			* _.uniqWith(objects, _.isEqual);
			* // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
			*/
			function uniqWith(array, comparator) {
				comparator = typeof comparator == "function" ? comparator : undefined$1;
				return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
			}
			/**
			* This method is like `_.zip` except that it accepts an array of grouped
			* elements and creates an array regrouping the elements to their pre-zip
			* configuration.
			*
			* @static
			* @memberOf _
			* @since 1.2.0
			* @category Array
			* @param {Array} array The array of grouped elements to process.
			* @returns {Array} Returns the new array of regrouped elements.
			* @example
			*
			* var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
			* // => [['a', 1, true], ['b', 2, false]]
			*
			* _.unzip(zipped);
			* // => [['a', 'b'], [1, 2], [true, false]]
			*/
			function unzip(array) {
				if (!(array && array.length)) return [];
				var length = 0;
				array = arrayFilter(array, function(group) {
					if (isArrayLikeObject(group)) {
						length = nativeMax(group.length, length);
						return true;
					}
				});
				return baseTimes(length, function(index$1) {
					return arrayMap(array, baseProperty(index$1));
				});
			}
			/**
			* This method is like `_.unzip` except that it accepts `iteratee` to specify
			* how regrouped values should be combined. The iteratee is invoked with the
			* elements of each group: (...group).
			*
			* @static
			* @memberOf _
			* @since 3.8.0
			* @category Array
			* @param {Array} array The array of grouped elements to process.
			* @param {Function} [iteratee=_.identity] The function to combine
			*  regrouped values.
			* @returns {Array} Returns the new array of regrouped elements.
			* @example
			*
			* var zipped = _.zip([1, 2], [10, 20], [100, 200]);
			* // => [[1, 10, 100], [2, 20, 200]]
			*
			* _.unzipWith(zipped, _.add);
			* // => [3, 30, 300]
			*/
			function unzipWith(array, iteratee$1) {
				if (!(array && array.length)) return [];
				var result$1 = unzip(array);
				if (iteratee$1 == null) return result$1;
				return arrayMap(result$1, function(group) {
					return apply(iteratee$1, undefined$1, group);
				});
			}
			/**
			* Creates an array excluding all given values using
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* for equality comparisons.
			*
			* **Note:** Unlike `_.pull`, this method returns a new array.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {Array} array The array to inspect.
			* @param {...*} [values] The values to exclude.
			* @returns {Array} Returns the new array of filtered values.
			* @see _.difference, _.xor
			* @example
			*
			* _.without([2, 1, 2, 3], 1, 2);
			* // => [3]
			*/
			var without = baseRest(function(array, values$1) {
				return isArrayLikeObject(array) ? baseDifference(array, values$1) : [];
			});
			/**
			* Creates an array of unique values that is the
			* [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
			* of the given arrays. The order of result values is determined by the order
			* they occur in the arrays.
			*
			* @static
			* @memberOf _
			* @since 2.4.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @returns {Array} Returns the new array of filtered values.
			* @see _.difference, _.without
			* @example
			*
			* _.xor([2, 1], [2, 3]);
			* // => [1, 3]
			*/
			var xor = baseRest(function(arrays) {
				return baseXor(arrayFilter(arrays, isArrayLikeObject));
			});
			/**
			* This method is like `_.xor` except that it accepts `iteratee` which is
			* invoked for each element of each `arrays` to generate the criterion by
			* which by which they're compared. The order of result values is determined
			* by the order they occur in the arrays. The iteratee is invoked with one
			* argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Array} Returns the new array of filtered values.
			* @example
			*
			* _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
			* // => [1.2, 3.4]
			*
			* // The `_.property` iteratee shorthand.
			* _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
			* // => [{ 'x': 2 }]
			*/
			var xorBy = baseRest(function(arrays) {
				var iteratee$1 = last$2(arrays);
				if (isArrayLikeObject(iteratee$1)) iteratee$1 = undefined$1;
				return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee$1, 2));
			});
			/**
			* This method is like `_.xor` except that it accepts `comparator` which is
			* invoked to compare elements of `arrays`. The order of result values is
			* determined by the order they occur in the arrays. The comparator is invoked
			* with two arguments: (arrVal, othVal).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Array
			* @param {...Array} [arrays] The arrays to inspect.
			* @param {Function} [comparator] The comparator invoked per element.
			* @returns {Array} Returns the new array of filtered values.
			* @example
			*
			* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
			* var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
			*
			* _.xorWith(objects, others, _.isEqual);
			* // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
			*/
			var xorWith = baseRest(function(arrays) {
				var comparator = last$2(arrays);
				comparator = typeof comparator == "function" ? comparator : undefined$1;
				return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
			});
			/**
			* Creates an array of grouped elements, the first of which contains the
			* first elements of the given arrays, the second of which contains the
			* second elements of the given arrays, and so on.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Array
			* @param {...Array} [arrays] The arrays to process.
			* @returns {Array} Returns the new array of grouped elements.
			* @example
			*
			* _.zip(['a', 'b'], [1, 2], [true, false]);
			* // => [['a', 1, true], ['b', 2, false]]
			*/
			var zip = baseRest(unzip);
			/**
			* This method is like `_.fromPairs` except that it accepts two arrays,
			* one of property identifiers and one of corresponding values.
			*
			* @static
			* @memberOf _
			* @since 0.4.0
			* @category Array
			* @param {Array} [props=[]] The property identifiers.
			* @param {Array} [values=[]] The property values.
			* @returns {Object} Returns the new object.
			* @example
			*
			* _.zipObject(['a', 'b'], [1, 2]);
			* // => { 'a': 1, 'b': 2 }
			*/
			function zipObject(props, values$1) {
				return baseZipObject(props || [], values$1 || [], assignValue);
			}
			/**
			* This method is like `_.zipObject` except that it supports property paths.
			*
			* @static
			* @memberOf _
			* @since 4.1.0
			* @category Array
			* @param {Array} [props=[]] The property identifiers.
			* @param {Array} [values=[]] The property values.
			* @returns {Object} Returns the new object.
			* @example
			*
			* _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
			* // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
			*/
			function zipObjectDeep(props, values$1) {
				return baseZipObject(props || [], values$1 || [], baseSet);
			}
			/**
			* This method is like `_.zip` except that it accepts `iteratee` to specify
			* how grouped values should be combined. The iteratee is invoked with the
			* elements of each group: (...group).
			*
			* @static
			* @memberOf _
			* @since 3.8.0
			* @category Array
			* @param {...Array} [arrays] The arrays to process.
			* @param {Function} [iteratee=_.identity] The function to combine
			*  grouped values.
			* @returns {Array} Returns the new array of grouped elements.
			* @example
			*
			* _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
			*   return a + b + c;
			* });
			* // => [111, 222]
			*/
			var zipWith = baseRest(function(arrays) {
				var length = arrays.length, iteratee$1 = length > 1 ? arrays[length - 1] : undefined$1;
				iteratee$1 = typeof iteratee$1 == "function" ? (arrays.pop(), iteratee$1) : undefined$1;
				return unzipWith(arrays, iteratee$1);
			});
			/**
			* Creates a `lodash` wrapper instance that wraps `value` with explicit method
			* chain sequences enabled. The result of such sequences must be unwrapped
			* with `_#value`.
			*
			* @static
			* @memberOf _
			* @since 1.3.0
			* @category Seq
			* @param {*} value The value to wrap.
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'age': 36 },
			*   { 'user': 'fred',    'age': 40 },
			*   { 'user': 'pebbles', 'age': 1 }
			* ];
			*
			* var youngest = _
			*   .chain(users)
			*   .sortBy('age')
			*   .map(function(o) {
			*     return o.user + ' is ' + o.age;
			*   })
			*   .head()
			*   .value();
			* // => 'pebbles is 1'
			*/
			function chain$1(value) {
				var result$1 = lodash(value);
				result$1.__chain__ = true;
				return result$1;
			}
			/**
			* This method invokes `interceptor` and returns `value`. The interceptor
			* is invoked with one argument; (value). The purpose of this method is to
			* "tap into" a method chain sequence in order to modify intermediate results.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Seq
			* @param {*} value The value to provide to `interceptor`.
			* @param {Function} interceptor The function to invoke.
			* @returns {*} Returns `value`.
			* @example
			*
			* _([1, 2, 3])
			*  .tap(function(array) {
			*    // Mutate input array.
			*    array.pop();
			*  })
			*  .reverse()
			*  .value();
			* // => [2, 1]
			*/
			function tap(value, interceptor) {
				interceptor(value);
				return value;
			}
			/**
			* This method is like `_.tap` except that it returns the result of `interceptor`.
			* The purpose of this method is to "pass thru" values replacing intermediate
			* results in a method chain sequence.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Seq
			* @param {*} value The value to provide to `interceptor`.
			* @param {Function} interceptor The function to invoke.
			* @returns {*} Returns the result of `interceptor`.
			* @example
			*
			* _('  abc  ')
			*  .chain()
			*  .trim()
			*  .thru(function(value) {
			*    return [value];
			*  })
			*  .value();
			* // => ['abc']
			*/
			function thru(value, interceptor) {
				return interceptor(value);
			}
			/**
			* This method is the wrapper version of `_.at`.
			*
			* @name at
			* @memberOf _
			* @since 1.0.0
			* @category Seq
			* @param {...(string|string[])} [paths] The property paths to pick.
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
			*
			* _(object).at(['a[0].b.c', 'a[1]']).value();
			* // => [3, 4]
			*/
			var wrapperAt = flatRest(function(paths) {
				var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object$2) {
					return baseAt(object$2, paths);
				};
				if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
				value = value.slice(start, +start + (length ? 1 : 0));
				value.__actions__.push({
					"func": thru,
					"args": [interceptor],
					"thisArg": undefined$1
				});
				return new LodashWrapper(value, this.__chain__).thru(function(array) {
					if (length && !array.length) array.push(undefined$1);
					return array;
				});
			});
			/**
			* Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
			*
			* @name chain
			* @memberOf _
			* @since 0.1.0
			* @category Seq
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* var users = [
			*   { 'user': 'barney', 'age': 36 },
			*   { 'user': 'fred',   'age': 40 }
			* ];
			*
			* // A sequence without explicit chaining.
			* _(users).head();
			* // => { 'user': 'barney', 'age': 36 }
			*
			* // A sequence with explicit chaining.
			* _(users)
			*   .chain()
			*   .head()
			*   .pick('user')
			*   .value();
			* // => { 'user': 'barney' }
			*/
			function wrapperChain() {
				return chain$1(this);
			}
			/**
			* Executes the chain sequence and returns the wrapped result.
			*
			* @name commit
			* @memberOf _
			* @since 3.2.0
			* @category Seq
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* var array = [1, 2];
			* var wrapped = _(array).push(3);
			*
			* console.log(array);
			* // => [1, 2]
			*
			* wrapped = wrapped.commit();
			* console.log(array);
			* // => [1, 2, 3]
			*
			* wrapped.last();
			* // => 3
			*
			* console.log(array);
			* // => [1, 2, 3]
			*/
			function wrapperCommit() {
				return new LodashWrapper(this.value(), this.__chain__);
			}
			/**
			* Gets the next value on a wrapped object following the
			* [iterator protocol](https://mdn.io/iteration_protocols#iterator).
			*
			* @name next
			* @memberOf _
			* @since 4.0.0
			* @category Seq
			* @returns {Object} Returns the next iterator value.
			* @example
			*
			* var wrapped = _([1, 2]);
			*
			* wrapped.next();
			* // => { 'done': false, 'value': 1 }
			*
			* wrapped.next();
			* // => { 'done': false, 'value': 2 }
			*
			* wrapped.next();
			* // => { 'done': true, 'value': undefined }
			*/
			function wrapperNext() {
				if (this.__values__ === undefined$1) this.__values__ = toArray(this.value());
				var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
				return {
					"done": done,
					"value": value
				};
			}
			/**
			* Enables the wrapper to be iterable.
			*
			* @name Symbol.iterator
			* @memberOf _
			* @since 4.0.0
			* @category Seq
			* @returns {Object} Returns the wrapper object.
			* @example
			*
			* var wrapped = _([1, 2]);
			*
			* wrapped[Symbol.iterator]() === wrapped;
			* // => true
			*
			* Array.from(wrapped);
			* // => [1, 2]
			*/
			function wrapperToIterator() {
				return this;
			}
			/**
			* Creates a clone of the chain sequence planting `value` as the wrapped value.
			*
			* @name plant
			* @memberOf _
			* @since 3.2.0
			* @category Seq
			* @param {*} value The value to plant.
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* var wrapped = _([1, 2]).map(square);
			* var other = wrapped.plant([3, 4]);
			*
			* other.value();
			* // => [9, 16]
			*
			* wrapped.value();
			* // => [1, 4]
			*/
			function wrapperPlant(value) {
				var result$1, parent$1 = this;
				while (parent$1 instanceof baseLodash) {
					var clone$5 = wrapperClone(parent$1);
					clone$5.__index__ = 0;
					clone$5.__values__ = undefined$1;
					if (result$1) previous.__wrapped__ = clone$5;
					else result$1 = clone$5;
					var previous = clone$5;
					parent$1 = parent$1.__wrapped__;
				}
				previous.__wrapped__ = value;
				return result$1;
			}
			/**
			* This method is the wrapper version of `_.reverse`.
			*
			* **Note:** This method mutates the wrapped array.
			*
			* @name reverse
			* @memberOf _
			* @since 0.1.0
			* @category Seq
			* @returns {Object} Returns the new `lodash` wrapper instance.
			* @example
			*
			* var array = [1, 2, 3];
			*
			* _(array).reverse().value()
			* // => [3, 2, 1]
			*
			* console.log(array);
			* // => [3, 2, 1]
			*/
			function wrapperReverse() {
				var value = this.__wrapped__;
				if (value instanceof LazyWrapper) {
					var wrapped = value;
					if (this.__actions__.length) wrapped = new LazyWrapper(this);
					wrapped = wrapped.reverse();
					wrapped.__actions__.push({
						"func": thru,
						"args": [reverse],
						"thisArg": undefined$1
					});
					return new LodashWrapper(wrapped, this.__chain__);
				}
				return this.thru(reverse);
			}
			/**
			* Executes the chain sequence to resolve the unwrapped value.
			*
			* @name value
			* @memberOf _
			* @since 0.1.0
			* @alias toJSON, valueOf
			* @category Seq
			* @returns {*} Returns the resolved unwrapped value.
			* @example
			*
			* _([1, 2, 3]).value();
			* // => [1, 2, 3]
			*/
			function wrapperValue() {
				return baseWrapperValue(this.__wrapped__, this.__actions__);
			}
			/**
			* Creates an object composed of keys generated from the results of running
			* each element of `collection` thru `iteratee`. The corresponding value of
			* each key is the number of times the key was returned by `iteratee`. The
			* iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 0.5.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee to transform keys.
			* @returns {Object} Returns the composed aggregate object.
			* @example
			*
			* _.countBy([6.1, 4.2, 6.3], Math.floor);
			* // => { '4': 1, '6': 2 }
			*
			* // The `_.property` iteratee shorthand.
			* _.countBy(['one', 'two', 'three'], 'length');
			* // => { '3': 2, '5': 1 }
			*/
			var countBy = createAggregator(function(result$1, value, key) {
				if (hasOwnProperty$5.call(result$1, key)) ++result$1[key];
				else baseAssignValue(result$1, key, 1);
			});
			/**
			* Checks if `predicate` returns truthy for **all** elements of `collection`.
			* Iteration is stopped once `predicate` returns falsey. The predicate is
			* invoked with three arguments: (value, index|key, collection).
			*
			* **Note:** This method returns `true` for
			* [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
			* [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
			* elements of empty collections.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {boolean} Returns `true` if all elements pass the predicate check,
			*  else `false`.
			* @example
			*
			* _.every([true, 1, null, 'yes'], Boolean);
			* // => false
			*
			* var users = [
			*   { 'user': 'barney', 'age': 36, 'active': false },
			*   { 'user': 'fred',   'age': 40, 'active': false }
			* ];
			*
			* // The `_.matches` iteratee shorthand.
			* _.every(users, { 'user': 'barney', 'active': false });
			* // => false
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.every(users, ['active', false]);
			* // => true
			*
			* // The `_.property` iteratee shorthand.
			* _.every(users, 'active');
			* // => false
			*/
			function every(collection, predicate, guard) {
				var func = isArray$5(collection) ? arrayEvery : baseEvery;
				if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined$1;
				return func(collection, getIteratee(predicate, 3));
			}
			/**
			* Iterates over elements of `collection`, returning an array of all elements
			* `predicate` returns truthy for. The predicate is invoked with three
			* arguments: (value, index|key, collection).
			*
			* **Note:** Unlike `_.remove`, this method returns a new array.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new filtered array.
			* @see _.reject
			* @example
			*
			* var users = [
			*   { 'user': 'barney', 'age': 36, 'active': true },
			*   { 'user': 'fred',   'age': 40, 'active': false }
			* ];
			*
			* _.filter(users, function(o) { return !o.active; });
			* // => objects for ['fred']
			*
			* // The `_.matches` iteratee shorthand.
			* _.filter(users, { 'age': 36, 'active': true });
			* // => objects for ['barney']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.filter(users, ['active', false]);
			* // => objects for ['fred']
			*
			* // The `_.property` iteratee shorthand.
			* _.filter(users, 'active');
			* // => objects for ['barney']
			*
			* // Combining several predicates using `_.overEvery` or `_.overSome`.
			* _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
			* // => objects for ['fred', 'barney']
			*/
			function filter$2(collection, predicate) {
				var func = isArray$5(collection) ? arrayFilter : baseFilter;
				return func(collection, getIteratee(predicate, 3));
			}
			/**
			* Iterates over elements of `collection`, returning the first element
			* `predicate` returns truthy for. The predicate is invoked with three
			* arguments: (value, index|key, collection).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param {number} [fromIndex=0] The index to search from.
			* @returns {*} Returns the matched element, else `undefined`.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'age': 36, 'active': true },
			*   { 'user': 'fred',    'age': 40, 'active': false },
			*   { 'user': 'pebbles', 'age': 1,  'active': true }
			* ];
			*
			* _.find(users, function(o) { return o.age < 40; });
			* // => object for 'barney'
			*
			* // The `_.matches` iteratee shorthand.
			* _.find(users, { 'age': 1, 'active': true });
			* // => object for 'pebbles'
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.find(users, ['active', false]);
			* // => object for 'fred'
			*
			* // The `_.property` iteratee shorthand.
			* _.find(users, 'active');
			* // => object for 'barney'
			*/
			var find$2 = createFind(findIndex);
			/**
			* This method is like `_.find` except that it iterates over elements of
			* `collection` from right to left.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param {number} [fromIndex=collection.length-1] The index to search from.
			* @returns {*} Returns the matched element, else `undefined`.
			* @example
			*
			* _.findLast([1, 2, 3, 4], function(n) {
			*   return n % 2 == 1;
			* });
			* // => 3
			*/
			var findLast = createFind(findLastIndex);
			/**
			* Creates a flattened array of values by running each element in `collection`
			* thru `iteratee` and flattening the mapped results. The iteratee is invoked
			* with three arguments: (value, index|key, collection).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* function duplicate(n) {
			*   return [n, n];
			* }
			*
			* _.flatMap([1, 2], duplicate);
			* // => [1, 1, 2, 2]
			*/
			function flatMap(collection, iteratee$1) {
				return baseFlatten(map(collection, iteratee$1), 1);
			}
			/**
			* This method is like `_.flatMap` except that it recursively flattens the
			* mapped results.
			*
			* @static
			* @memberOf _
			* @since 4.7.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* function duplicate(n) {
			*   return [[[n, n]]];
			* }
			*
			* _.flatMapDeep([1, 2], duplicate);
			* // => [1, 1, 2, 2]
			*/
			function flatMapDeep(collection, iteratee$1) {
				return baseFlatten(map(collection, iteratee$1), INFINITY$1);
			}
			/**
			* This method is like `_.flatMap` except that it recursively flattens the
			* mapped results up to `depth` times.
			*
			* @static
			* @memberOf _
			* @since 4.7.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @param {number} [depth=1] The maximum recursion depth.
			* @returns {Array} Returns the new flattened array.
			* @example
			*
			* function duplicate(n) {
			*   return [[[n, n]]];
			* }
			*
			* _.flatMapDepth([1, 2], duplicate, 2);
			* // => [[1, 1], [2, 2]]
			*/
			function flatMapDepth(collection, iteratee$1, depth$1) {
				depth$1 = depth$1 === undefined$1 ? 1 : toInteger(depth$1);
				return baseFlatten(map(collection, iteratee$1), depth$1);
			}
			/**
			* Iterates over elements of `collection` and invokes `iteratee` for each element.
			* The iteratee is invoked with three arguments: (value, index|key, collection).
			* Iteratee functions may exit iteration early by explicitly returning `false`.
			*
			* **Note:** As with other "Collections" methods, objects with a "length"
			* property are iterated like arrays. To avoid this behavior use `_.forIn`
			* or `_.forOwn` for object iteration.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @alias each
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array|Object} Returns `collection`.
			* @see _.forEachRight
			* @example
			*
			* _.forEach([1, 2], function(value) {
			*   console.log(value);
			* });
			* // => Logs `1` then `2`.
			*
			* _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
			*   console.log(key);
			* });
			* // => Logs 'a' then 'b' (iteration order is not guaranteed).
			*/
			function forEach$1(collection, iteratee$1) {
				var func = isArray$5(collection) ? arrayEach : baseEach;
				return func(collection, getIteratee(iteratee$1, 3));
			}
			/**
			* This method is like `_.forEach` except that it iterates over elements of
			* `collection` from right to left.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @alias eachRight
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array|Object} Returns `collection`.
			* @see _.forEach
			* @example
			*
			* _.forEachRight([1, 2], function(value) {
			*   console.log(value);
			* });
			* // => Logs `2` then `1`.
			*/
			function forEachRight(collection, iteratee$1) {
				var func = isArray$5(collection) ? arrayEachRight : baseEachRight;
				return func(collection, getIteratee(iteratee$1, 3));
			}
			/**
			* Creates an object composed of keys generated from the results of running
			* each element of `collection` thru `iteratee`. The order of grouped values
			* is determined by the order they occur in `collection`. The corresponding
			* value of each key is an array of elements responsible for generating the
			* key. The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee to transform keys.
			* @returns {Object} Returns the composed aggregate object.
			* @example
			*
			* _.groupBy([6.1, 4.2, 6.3], Math.floor);
			* // => { '4': [4.2], '6': [6.1, 6.3] }
			*
			* // The `_.property` iteratee shorthand.
			* _.groupBy(['one', 'two', 'three'], 'length');
			* // => { '3': ['one', 'two'], '5': ['three'] }
			*/
			var groupBy = createAggregator(function(result$1, value, key) {
				if (hasOwnProperty$5.call(result$1, key)) result$1[key].push(value);
				else baseAssignValue(result$1, key, [value]);
			});
			/**
			* Checks if `value` is in `collection`. If `collection` is a string, it's
			* checked for a substring of `value`, otherwise
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* is used for equality comparisons. If `fromIndex` is negative, it's used as
			* the offset from the end of `collection`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object|string} collection The collection to inspect.
			* @param {*} value The value to search for.
			* @param {number} [fromIndex=0] The index to search from.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
			* @returns {boolean} Returns `true` if `value` is found, else `false`.
			* @example
			*
			* _.includes([1, 2, 3], 1);
			* // => true
			*
			* _.includes([1, 2, 3], 1, 2);
			* // => false
			*
			* _.includes({ 'a': 1, 'b': 2 }, 1);
			* // => true
			*
			* _.includes('abcd', 'bc');
			* // => true
			*/
			function includes(collection, value, fromIndex, guard) {
				collection = isArrayLike(collection) ? collection : values(collection);
				fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
				var length = collection.length;
				if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
				return isString$5(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
			}
			/**
			* Invokes the method at `path` of each element in `collection`, returning
			* an array of the results of each invoked method. Any additional arguments
			* are provided to each invoked method. If `path` is a function, it's invoked
			* for, and `this` bound to, each element in `collection`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Array|Function|string} path The path of the method to invoke or
			*  the function invoked per iteration.
			* @param {...*} [args] The arguments to invoke each method with.
			* @returns {Array} Returns the array of results.
			* @example
			*
			* _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
			* // => [[1, 5, 7], [1, 2, 3]]
			*
			* _.invokeMap([123, 456], String.prototype.split, '');
			* // => [['1', '2', '3'], ['4', '5', '6']]
			*/
			var invokeMap = baseRest(function(collection, path$28, args) {
				var index$1 = -1, isFunc = typeof path$28 == "function", result$1 = isArrayLike(collection) ? Array$1(collection.length) : [];
				baseEach(collection, function(value) {
					result$1[++index$1] = isFunc ? apply(path$28, value, args) : baseInvoke(value, path$28, args);
				});
				return result$1;
			});
			/**
			* Creates an object composed of keys generated from the results of running
			* each element of `collection` thru `iteratee`. The corresponding value of
			* each key is the last element responsible for generating the key. The
			* iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee to transform keys.
			* @returns {Object} Returns the composed aggregate object.
			* @example
			*
			* var array = [
			*   { 'dir': 'left', 'code': 97 },
			*   { 'dir': 'right', 'code': 100 }
			* ];
			*
			* _.keyBy(array, function(o) {
			*   return String.fromCharCode(o.code);
			* });
			* // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
			*
			* _.keyBy(array, 'dir');
			* // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
			*/
			var keyBy = createAggregator(function(result$1, value, key) {
				baseAssignValue(result$1, key, value);
			});
			/**
			* Creates an array of values by running each element in `collection` thru
			* `iteratee`. The iteratee is invoked with three arguments:
			* (value, index|key, collection).
			*
			* Many lodash methods are guarded to work as iteratees for methods like
			* `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
			*
			* The guarded methods are:
			* `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
			* `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
			* `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
			* `template`, `trim`, `trimEnd`, `trimStart`, and `words`
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new mapped array.
			* @example
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* _.map([4, 8], square);
			* // => [16, 64]
			*
			* _.map({ 'a': 4, 'b': 8 }, square);
			* // => [16, 64] (iteration order is not guaranteed)
			*
			* var users = [
			*   { 'user': 'barney' },
			*   { 'user': 'fred' }
			* ];
			*
			* // The `_.property` iteratee shorthand.
			* _.map(users, 'user');
			* // => ['barney', 'fred']
			*/
			function map(collection, iteratee$1) {
				var func = isArray$5(collection) ? arrayMap : baseMap;
				return func(collection, getIteratee(iteratee$1, 3));
			}
			/**
			* This method is like `_.sortBy` except that it allows specifying the sort
			* orders of the iteratees to sort by. If `orders` is unspecified, all values
			* are sorted in ascending order. Otherwise, specify an order of "desc" for
			* descending or "asc" for ascending sort order of corresponding values.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
			*  The iteratees to sort by.
			* @param {string[]} [orders] The sort orders of `iteratees`.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
			* @returns {Array} Returns the new sorted array.
			* @example
			*
			* var users = [
			*   { 'user': 'fred',   'age': 48 },
			*   { 'user': 'barney', 'age': 34 },
			*   { 'user': 'fred',   'age': 40 },
			*   { 'user': 'barney', 'age': 36 }
			* ];
			*
			* // Sort by `user` in ascending order and by `age` in descending order.
			* _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
			* // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
			*/
			function orderBy(collection, iteratees, orders, guard) {
				if (collection == null) return [];
				if (!isArray$5(iteratees)) iteratees = iteratees == null ? [] : [iteratees];
				orders = guard ? undefined$1 : orders;
				if (!isArray$5(orders)) orders = orders == null ? [] : [orders];
				return baseOrderBy(collection, iteratees, orders);
			}
			/**
			* Creates an array of elements split into two groups, the first of which
			* contains elements `predicate` returns truthy for, the second of which
			* contains elements `predicate` returns falsey for. The predicate is
			* invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the array of grouped elements.
			* @example
			*
			* var users = [
			*   { 'user': 'barney',  'age': 36, 'active': false },
			*   { 'user': 'fred',    'age': 40, 'active': true },
			*   { 'user': 'pebbles', 'age': 1,  'active': false }
			* ];
			*
			* _.partition(users, function(o) { return o.active; });
			* // => objects for [['fred'], ['barney', 'pebbles']]
			*
			* // The `_.matches` iteratee shorthand.
			* _.partition(users, { 'age': 1, 'active': false });
			* // => objects for [['pebbles'], ['barney', 'fred']]
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.partition(users, ['active', false]);
			* // => objects for [['barney', 'pebbles'], ['fred']]
			*
			* // The `_.property` iteratee shorthand.
			* _.partition(users, 'active');
			* // => objects for [['fred'], ['barney', 'pebbles']]
			*/
			var partition$1 = createAggregator(function(result$1, value, key) {
				result$1[key ? 0 : 1].push(value);
			}, function() {
				return [[], []];
			});
			/**
			* Reduces `collection` to a value which is the accumulated result of running
			* each element in `collection` thru `iteratee`, where each successive
			* invocation is supplied the return value of the previous. If `accumulator`
			* is not given, the first element of `collection` is used as the initial
			* value. The iteratee is invoked with four arguments:
			* (accumulator, value, index|key, collection).
			*
			* Many lodash methods are guarded to work as iteratees for methods like
			* `_.reduce`, `_.reduceRight`, and `_.transform`.
			*
			* The guarded methods are:
			* `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
			* and `sortBy`
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @param {*} [accumulator] The initial value.
			* @returns {*} Returns the accumulated value.
			* @see _.reduceRight
			* @example
			*
			* _.reduce([1, 2], function(sum, n) {
			*   return sum + n;
			* }, 0);
			* // => 3
			*
			* _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
			*   (result[value] || (result[value] = [])).push(key);
			*   return result;
			* }, {});
			* // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
			*/
			function reduce(collection, iteratee$1, accumulator) {
				var func = isArray$5(collection) ? arrayReduce$1 : baseReduce, initAccum = arguments.length < 3;
				return func(collection, getIteratee(iteratee$1, 4), accumulator, initAccum, baseEach);
			}
			/**
			* This method is like `_.reduce` except that it iterates over elements of
			* `collection` from right to left.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @param {*} [accumulator] The initial value.
			* @returns {*} Returns the accumulated value.
			* @see _.reduce
			* @example
			*
			* var array = [[0, 1], [2, 3], [4, 5]];
			*
			* _.reduceRight(array, function(flattened, other) {
			*   return flattened.concat(other);
			* }, []);
			* // => [4, 5, 2, 3, 0, 1]
			*/
			function reduceRight(collection, iteratee$1, accumulator) {
				var func = isArray$5(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
				return func(collection, getIteratee(iteratee$1, 4), accumulator, initAccum, baseEachRight);
			}
			/**
			* The opposite of `_.filter`; this method returns the elements of `collection`
			* that `predicate` does **not** return truthy for.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the new filtered array.
			* @see _.filter
			* @example
			*
			* var users = [
			*   { 'user': 'barney', 'age': 36, 'active': false },
			*   { 'user': 'fred',   'age': 40, 'active': true }
			* ];
			*
			* _.reject(users, function(o) { return !o.active; });
			* // => objects for ['fred']
			*
			* // The `_.matches` iteratee shorthand.
			* _.reject(users, { 'age': 40, 'active': true });
			* // => objects for ['barney']
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.reject(users, ['active', false]);
			* // => objects for ['fred']
			*
			* // The `_.property` iteratee shorthand.
			* _.reject(users, 'active');
			* // => objects for ['barney']
			*/
			function reject(collection, predicate) {
				var func = isArray$5(collection) ? arrayFilter : baseFilter;
				return func(collection, negate(getIteratee(predicate, 3)));
			}
			/**
			* Gets a random element from `collection`.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to sample.
			* @returns {*} Returns the random element.
			* @example
			*
			* _.sample([1, 2, 3, 4]);
			* // => 2
			*/
			function sample(collection) {
				var func = isArray$5(collection) ? arraySample : baseSample;
				return func(collection);
			}
			/**
			* Gets `n` random elements at unique keys from `collection` up to the
			* size of `collection`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Collection
			* @param {Array|Object} collection The collection to sample.
			* @param {number} [n=1] The number of elements to sample.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the random elements.
			* @example
			*
			* _.sampleSize([1, 2, 3], 2);
			* // => [3, 1]
			*
			* _.sampleSize([1, 2, 3], 4);
			* // => [2, 3, 1]
			*/
			function sampleSize(collection, n$4, guard) {
				if (guard ? isIterateeCall(collection, n$4, guard) : n$4 === undefined$1) n$4 = 1;
				else n$4 = toInteger(n$4);
				var func = isArray$5(collection) ? arraySampleSize : baseSampleSize;
				return func(collection, n$4);
			}
			/**
			* Creates an array of shuffled values, using a version of the
			* [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to shuffle.
			* @returns {Array} Returns the new shuffled array.
			* @example
			*
			* _.shuffle([1, 2, 3, 4]);
			* // => [4, 1, 3, 2]
			*/
			function shuffle(collection) {
				var func = isArray$5(collection) ? arrayShuffle : baseShuffle;
				return func(collection);
			}
			/**
			* Gets the size of `collection` by returning its length for array-like
			* values or the number of own enumerable string keyed properties for objects.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object|string} collection The collection to inspect.
			* @returns {number} Returns the collection size.
			* @example
			*
			* _.size([1, 2, 3]);
			* // => 3
			*
			* _.size({ 'a': 1, 'b': 2 });
			* // => 2
			*
			* _.size('pebbles');
			* // => 7
			*/
			function size(collection) {
				if (collection == null) return 0;
				if (isArrayLike(collection)) return isString$5(collection) ? stringSize(collection) : collection.length;
				var tag$3 = getTag(collection);
				if (tag$3 == mapTag || tag$3 == setTag) return collection.size;
				return baseKeys(collection).length;
			}
			/**
			* Checks if `predicate` returns truthy for **any** element of `collection`.
			* Iteration is stopped once `predicate` returns truthy. The predicate is
			* invoked with three arguments: (value, index|key, collection).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {boolean} Returns `true` if any element passes the predicate check,
			*  else `false`.
			* @example
			*
			* _.some([null, 0, 'yes', false], Boolean);
			* // => true
			*
			* var users = [
			*   { 'user': 'barney', 'active': true },
			*   { 'user': 'fred',   'active': false }
			* ];
			*
			* // The `_.matches` iteratee shorthand.
			* _.some(users, { 'user': 'barney', 'active': false });
			* // => false
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.some(users, ['active', false]);
			* // => true
			*
			* // The `_.property` iteratee shorthand.
			* _.some(users, 'active');
			* // => true
			*/
			function some(collection, predicate, guard) {
				var func = isArray$5(collection) ? arraySome : baseSome;
				if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined$1;
				return func(collection, getIteratee(predicate, 3));
			}
			/**
			* Creates an array of elements, sorted in ascending order by the results of
			* running each element in a collection thru each iteratee. This method
			* performs a stable sort, that is, it preserves the original sort order of
			* equal elements. The iteratees are invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Collection
			* @param {Array|Object} collection The collection to iterate over.
			* @param {...(Function|Function[])} [iteratees=[_.identity]]
			*  The iteratees to sort by.
			* @returns {Array} Returns the new sorted array.
			* @example
			*
			* var users = [
			*   { 'user': 'fred',   'age': 48 },
			*   { 'user': 'barney', 'age': 36 },
			*   { 'user': 'fred',   'age': 30 },
			*   { 'user': 'barney', 'age': 34 }
			* ];
			*
			* _.sortBy(users, [function(o) { return o.user; }]);
			* // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
			*
			* _.sortBy(users, ['user', 'age']);
			* // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
			*/
			var sortBy = baseRest(function(collection, iteratees) {
				if (collection == null) return [];
				var length = iteratees.length;
				if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
				else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [iteratees[0]];
				return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
			});
			/**
			* Gets the timestamp of the number of milliseconds that have elapsed since
			* the Unix epoch (1 January 1970 00:00:00 UTC).
			*
			* @static
			* @memberOf _
			* @since 2.4.0
			* @category Date
			* @returns {number} Returns the timestamp.
			* @example
			*
			* _.defer(function(stamp) {
			*   console.log(_.now() - stamp);
			* }, _.now());
			* // => Logs the number of milliseconds it took for the deferred invocation.
			*/
			var now = ctxNow || function() {
				return root$5.Date.now();
			};
			/**
			* The opposite of `_.before`; this method creates a function that invokes
			* `func` once it's called `n` or more times.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {number} n The number of calls before `func` is invoked.
			* @param {Function} func The function to restrict.
			* @returns {Function} Returns the new restricted function.
			* @example
			*
			* var saves = ['profile', 'settings'];
			*
			* var done = _.after(saves.length, function() {
			*   console.log('done saving!');
			* });
			*
			* _.forEach(saves, function(type) {
			*   asyncSave({ 'type': type, 'complete': done });
			* });
			* // => Logs 'done saving!' after the two async saves have completed.
			*/
			function after(n$4, func) {
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				n$4 = toInteger(n$4);
				return function() {
					if (--n$4 < 1) return func.apply(this, arguments);
				};
			}
			/**
			* Creates a function that invokes `func`, with up to `n` arguments,
			* ignoring any additional arguments.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Function
			* @param {Function} func The function to cap arguments for.
			* @param {number} [n=func.length] The arity cap.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Function} Returns the new capped function.
			* @example
			*
			* _.map(['6', '8', '10'], _.ary(parseInt, 1));
			* // => [6, 8, 10]
			*/
			function ary(func, n$4, guard) {
				n$4 = guard ? undefined$1 : n$4;
				n$4 = func && n$4 == null ? func.length : n$4;
				return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n$4);
			}
			/**
			* Creates a function that invokes `func`, with the `this` binding and arguments
			* of the created function, while it's called less than `n` times. Subsequent
			* calls to the created function return the result of the last `func` invocation.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Function
			* @param {number} n The number of calls at which `func` is no longer invoked.
			* @param {Function} func The function to restrict.
			* @returns {Function} Returns the new restricted function.
			* @example
			*
			* jQuery(element).on('click', _.before(5, addContactToList));
			* // => Allows adding up to 4 contacts to the list.
			*/
			function before(n$4, func) {
				var result$1;
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				n$4 = toInteger(n$4);
				return function() {
					if (--n$4 > 0) result$1 = func.apply(this, arguments);
					if (n$4 <= 1) func = undefined$1;
					return result$1;
				};
			}
			/**
			* Creates a function that invokes `func` with the `this` binding of `thisArg`
			* and `partials` prepended to the arguments it receives.
			*
			* The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
			* may be used as a placeholder for partially applied arguments.
			*
			* **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
			* property of bound functions.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to bind.
			* @param {*} thisArg The `this` binding of `func`.
			* @param {...*} [partials] The arguments to be partially applied.
			* @returns {Function} Returns the new bound function.
			* @example
			*
			* function greet(greeting, punctuation) {
			*   return greeting + ' ' + this.user + punctuation;
			* }
			*
			* var object = { 'user': 'fred' };
			*
			* var bound = _.bind(greet, object, 'hi');
			* bound('!');
			* // => 'hi fred!'
			*
			* // Bound with placeholders.
			* var bound = _.bind(greet, object, _, '!');
			* bound('hi');
			* // => 'hi fred!'
			*/
			var bind$1 = baseRest(function(func, thisArg, partials) {
				var bitmask = WRAP_BIND_FLAG;
				if (partials.length) {
					var holders = replaceHolders(partials, getHolder(bind$1));
					bitmask |= WRAP_PARTIAL_FLAG;
				}
				return createWrap(func, bitmask, thisArg, partials, holders);
			});
			/**
			* Creates a function that invokes the method at `object[key]` with `partials`
			* prepended to the arguments it receives.
			*
			* This method differs from `_.bind` by allowing bound functions to reference
			* methods that may be redefined or don't yet exist. See
			* [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
			* for more details.
			*
			* The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
			* builds, may be used as a placeholder for partially applied arguments.
			*
			* @static
			* @memberOf _
			* @since 0.10.0
			* @category Function
			* @param {Object} object The object to invoke the method on.
			* @param {string} key The key of the method.
			* @param {...*} [partials] The arguments to be partially applied.
			* @returns {Function} Returns the new bound function.
			* @example
			*
			* var object = {
			*   'user': 'fred',
			*   'greet': function(greeting, punctuation) {
			*     return greeting + ' ' + this.user + punctuation;
			*   }
			* };
			*
			* var bound = _.bindKey(object, 'greet', 'hi');
			* bound('!');
			* // => 'hi fred!'
			*
			* object.greet = function(greeting, punctuation) {
			*   return greeting + 'ya ' + this.user + punctuation;
			* };
			*
			* bound('!');
			* // => 'hiya fred!'
			*
			* // Bound with placeholders.
			* var bound = _.bindKey(object, 'greet', _, '!');
			* bound('hi');
			* // => 'hiya fred!'
			*/
			var bindKey = baseRest(function(object$2, key, partials) {
				var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
				if (partials.length) {
					var holders = replaceHolders(partials, getHolder(bindKey));
					bitmask |= WRAP_PARTIAL_FLAG;
				}
				return createWrap(key, bitmask, object$2, partials, holders);
			});
			/**
			* Creates a function that accepts arguments of `func` and either invokes
			* `func` returning its result, if at least `arity` number of arguments have
			* been provided, or returns a function that accepts the remaining `func`
			* arguments, and so on. The arity of `func` may be specified if `func.length`
			* is not sufficient.
			*
			* The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
			* may be used as a placeholder for provided arguments.
			*
			* **Note:** This method doesn't set the "length" property of curried functions.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Function
			* @param {Function} func The function to curry.
			* @param {number} [arity=func.length] The arity of `func`.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Function} Returns the new curried function.
			* @example
			*
			* var abc = function(a, b, c) {
			*   return [a, b, c];
			* };
			*
			* var curried = _.curry(abc);
			*
			* curried(1)(2)(3);
			* // => [1, 2, 3]
			*
			* curried(1, 2)(3);
			* // => [1, 2, 3]
			*
			* curried(1, 2, 3);
			* // => [1, 2, 3]
			*
			* // Curried with placeholders.
			* curried(1)(_, 3)(2);
			* // => [1, 2, 3]
			*/
			function curry(func, arity, guard) {
				arity = guard ? undefined$1 : arity;
				var result$1 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
				result$1.placeholder = curry.placeholder;
				return result$1;
			}
			/**
			* This method is like `_.curry` except that arguments are applied to `func`
			* in the manner of `_.partialRight` instead of `_.partial`.
			*
			* The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
			* builds, may be used as a placeholder for provided arguments.
			*
			* **Note:** This method doesn't set the "length" property of curried functions.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Function
			* @param {Function} func The function to curry.
			* @param {number} [arity=func.length] The arity of `func`.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Function} Returns the new curried function.
			* @example
			*
			* var abc = function(a, b, c) {
			*   return [a, b, c];
			* };
			*
			* var curried = _.curryRight(abc);
			*
			* curried(3)(2)(1);
			* // => [1, 2, 3]
			*
			* curried(2, 3)(1);
			* // => [1, 2, 3]
			*
			* curried(1, 2, 3);
			* // => [1, 2, 3]
			*
			* // Curried with placeholders.
			* curried(3)(1, _)(2);
			* // => [1, 2, 3]
			*/
			function curryRight(func, arity, guard) {
				arity = guard ? undefined$1 : arity;
				var result$1 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
				result$1.placeholder = curryRight.placeholder;
				return result$1;
			}
			/**
			* Creates a debounced function that delays invoking `func` until after `wait`
			* milliseconds have elapsed since the last time the debounced function was
			* invoked. The debounced function comes with a `cancel` method to cancel
			* delayed `func` invocations and a `flush` method to immediately invoke them.
			* Provide `options` to indicate whether `func` should be invoked on the
			* leading and/or trailing edge of the `wait` timeout. The `func` is invoked
			* with the last arguments provided to the debounced function. Subsequent
			* calls to the debounced function return the result of the last `func`
			* invocation.
			*
			* **Note:** If `leading` and `trailing` options are `true`, `func` is
			* invoked on the trailing edge of the timeout only if the debounced function
			* is invoked more than once during the `wait` timeout.
			*
			* If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
			* until to the next tick, similar to `setTimeout` with a timeout of `0`.
			*
			* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
			* for details over the differences between `_.debounce` and `_.throttle`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to debounce.
			* @param {number} [wait=0] The number of milliseconds to delay.
			* @param {Object} [options={}] The options object.
			* @param {boolean} [options.leading=false]
			*  Specify invoking on the leading edge of the timeout.
			* @param {number} [options.maxWait]
			*  The maximum time `func` is allowed to be delayed before it's invoked.
			* @param {boolean} [options.trailing=true]
			*  Specify invoking on the trailing edge of the timeout.
			* @returns {Function} Returns the new debounced function.
			* @example
			*
			* // Avoid costly calculations while the window size is in flux.
			* jQuery(window).on('resize', _.debounce(calculateLayout, 150));
			*
			* // Invoke `sendMail` when clicked, debouncing subsequent calls.
			* jQuery(element).on('click', _.debounce(sendMail, 300, {
			*   'leading': true,
			*   'trailing': false
			* }));
			*
			* // Ensure `batchLog` is invoked once after 1 second of debounced calls.
			* var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
			* var source = new EventSource('/stream');
			* jQuery(source).on('message', debounced);
			*
			* // Cancel the trailing debounced invocation.
			* jQuery(window).on('popstate', debounced.cancel);
			*/
			function debounce(func, wait, options) {
				var lastArgs, lastThis, maxWait, result$1, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				wait = toNumber$1(wait) || 0;
				if (isObject$5(options)) {
					leading = !!options.leading;
					maxing = "maxWait" in options;
					maxWait = maxing ? nativeMax(toNumber$1(options.maxWait) || 0, wait) : maxWait;
					trailing = "trailing" in options ? !!options.trailing : trailing;
				}
				function invokeFunc(time) {
					var args = lastArgs, thisArg = lastThis;
					lastArgs = lastThis = undefined$1;
					lastInvokeTime = time;
					result$1 = func.apply(thisArg, args);
					return result$1;
				}
				function leadingEdge(time) {
					lastInvokeTime = time;
					timerId = setTimeout$1(timerExpired, wait);
					return leading ? invokeFunc(time) : result$1;
				}
				function remainingWait(time) {
					var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
					return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
				}
				function shouldInvoke(time) {
					var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
					return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
				}
				function timerExpired() {
					var time = now();
					if (shouldInvoke(time)) return trailingEdge(time);
					timerId = setTimeout$1(timerExpired, remainingWait(time));
				}
				function trailingEdge(time) {
					timerId = undefined$1;
					if (trailing && lastArgs) return invokeFunc(time);
					lastArgs = lastThis = undefined$1;
					return result$1;
				}
				function cancel() {
					if (timerId !== undefined$1) clearTimeout$1(timerId);
					lastInvokeTime = 0;
					lastArgs = lastCallTime = lastThis = timerId = undefined$1;
				}
				function flush() {
					return timerId === undefined$1 ? result$1 : trailingEdge(now());
				}
				function debounced() {
					var time = now(), isInvoking = shouldInvoke(time);
					lastArgs = arguments;
					lastThis = this;
					lastCallTime = time;
					if (isInvoking) {
						if (timerId === undefined$1) return leadingEdge(lastCallTime);
						if (maxing) {
							clearTimeout$1(timerId);
							timerId = setTimeout$1(timerExpired, wait);
							return invokeFunc(lastCallTime);
						}
					}
					if (timerId === undefined$1) timerId = setTimeout$1(timerExpired, wait);
					return result$1;
				}
				debounced.cancel = cancel;
				debounced.flush = flush;
				return debounced;
			}
			/**
			* Defers invoking the `func` until the current call stack has cleared. Any
			* additional arguments are provided to `func` when it's invoked.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to defer.
			* @param {...*} [args] The arguments to invoke `func` with.
			* @returns {number} Returns the timer id.
			* @example
			*
			* _.defer(function(text) {
			*   console.log(text);
			* }, 'deferred');
			* // => Logs 'deferred' after one millisecond.
			*/
			var defer = baseRest(function(func, args) {
				return baseDelay(func, 1, args);
			});
			/**
			* Invokes `func` after `wait` milliseconds. Any additional arguments are
			* provided to `func` when it's invoked.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to delay.
			* @param {number} wait The number of milliseconds to delay invocation.
			* @param {...*} [args] The arguments to invoke `func` with.
			* @returns {number} Returns the timer id.
			* @example
			*
			* _.delay(function(text) {
			*   console.log(text);
			* }, 1000, 'later');
			* // => Logs 'later' after one second.
			*/
			var delay = baseRest(function(func, wait, args) {
				return baseDelay(func, toNumber$1(wait) || 0, args);
			});
			/**
			* Creates a function that invokes `func` with arguments reversed.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Function
			* @param {Function} func The function to flip arguments for.
			* @returns {Function} Returns the new flipped function.
			* @example
			*
			* var flipped = _.flip(function() {
			*   return _.toArray(arguments);
			* });
			*
			* flipped('a', 'b', 'c', 'd');
			* // => ['d', 'c', 'b', 'a']
			*/
			function flip(func) {
				return createWrap(func, WRAP_FLIP_FLAG);
			}
			/**
			* Creates a function that memoizes the result of `func`. If `resolver` is
			* provided, it determines the cache key for storing the result based on the
			* arguments provided to the memoized function. By default, the first argument
			* provided to the memoized function is used as the map cache key. The `func`
			* is invoked with the `this` binding of the memoized function.
			*
			* **Note:** The cache is exposed as the `cache` property on the memoized
			* function. Its creation may be customized by replacing the `_.memoize.Cache`
			* constructor with one whose instances implement the
			* [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
			* method interface of `clear`, `delete`, `get`, `has`, and `set`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to have its output memoized.
			* @param {Function} [resolver] The function to resolve the cache key.
			* @returns {Function} Returns the new memoized function.
			* @example
			*
			* var object = { 'a': 1, 'b': 2 };
			* var other = { 'c': 3, 'd': 4 };
			*
			* var values = _.memoize(_.values);
			* values(object);
			* // => [1, 2]
			*
			* values(other);
			* // => [3, 4]
			*
			* object.a = 2;
			* values(object);
			* // => [1, 2]
			*
			* // Modify the result cache.
			* values.cache.set(object, ['a', 'b']);
			* values(object);
			* // => ['a', 'b']
			*
			* // Replace `_.memoize.Cache`.
			* _.memoize.Cache = WeakMap;
			*/
			function memoize(func, resolver) {
				if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				var memoized = function() {
					var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache$3 = memoized.cache;
					if (cache$3.has(key)) return cache$3.get(key);
					var result$1 = func.apply(this, args);
					memoized.cache = cache$3.set(key, result$1) || cache$3;
					return result$1;
				};
				memoized.cache = new (memoize.Cache || MapCache)();
				return memoized;
			}
			memoize.Cache = MapCache;
			/**
			* Creates a function that negates the result of the predicate `func`. The
			* `func` predicate is invoked with the `this` binding and arguments of the
			* created function.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Function
			* @param {Function} predicate The predicate to negate.
			* @returns {Function} Returns the new negated function.
			* @example
			*
			* function isEven(n) {
			*   return n % 2 == 0;
			* }
			*
			* _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
			* // => [1, 3, 5]
			*/
			function negate(predicate) {
				if (typeof predicate != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				return function() {
					var args = arguments;
					switch (args.length) {
						case 0: return !predicate.call(this);
						case 1: return !predicate.call(this, args[0]);
						case 2: return !predicate.call(this, args[0], args[1]);
						case 3: return !predicate.call(this, args[0], args[1], args[2]);
					}
					return !predicate.apply(this, args);
				};
			}
			/**
			* Creates a function that is restricted to invoking `func` once. Repeat calls
			* to the function return the value of the first invocation. The `func` is
			* invoked with the `this` binding and arguments of the created function.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to restrict.
			* @returns {Function} Returns the new restricted function.
			* @example
			*
			* var initialize = _.once(createApplication);
			* initialize();
			* initialize();
			* // => `createApplication` is invoked once
			*/
			function once$3(func) {
				return before(2, func);
			}
			/**
			* Creates a function that invokes `func` with its arguments transformed.
			*
			* @static
			* @since 4.0.0
			* @memberOf _
			* @category Function
			* @param {Function} func The function to wrap.
			* @param {...(Function|Function[])} [transforms=[_.identity]]
			*  The argument transforms.
			* @returns {Function} Returns the new function.
			* @example
			*
			* function doubled(n) {
			*   return n * 2;
			* }
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* var func = _.overArgs(function(x, y) {
			*   return [x, y];
			* }, [square, doubled]);
			*
			* func(9, 3);
			* // => [81, 6]
			*
			* func(10, 5);
			* // => [100, 10]
			*/
			var overArgs = castRest(function(func, transforms) {
				transforms = transforms.length == 1 && isArray$5(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
				var funcsLength = transforms.length;
				return baseRest(function(args) {
					var index$1 = -1, length = nativeMin(args.length, funcsLength);
					while (++index$1 < length) args[index$1] = transforms[index$1].call(this, args[index$1]);
					return apply(func, this, args);
				});
			});
			/**
			* Creates a function that invokes `func` with `partials` prepended to the
			* arguments it receives. This method is like `_.bind` except it does **not**
			* alter the `this` binding.
			*
			* The `_.partial.placeholder` value, which defaults to `_` in monolithic
			* builds, may be used as a placeholder for partially applied arguments.
			*
			* **Note:** This method doesn't set the "length" property of partially
			* applied functions.
			*
			* @static
			* @memberOf _
			* @since 0.2.0
			* @category Function
			* @param {Function} func The function to partially apply arguments to.
			* @param {...*} [partials] The arguments to be partially applied.
			* @returns {Function} Returns the new partially applied function.
			* @example
			*
			* function greet(greeting, name) {
			*   return greeting + ' ' + name;
			* }
			*
			* var sayHelloTo = _.partial(greet, 'hello');
			* sayHelloTo('fred');
			* // => 'hello fred'
			*
			* // Partially applied with placeholders.
			* var greetFred = _.partial(greet, _, 'fred');
			* greetFred('hi');
			* // => 'hi fred'
			*/
			var partial = baseRest(function(func, partials) {
				var holders = replaceHolders(partials, getHolder(partial));
				return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
			});
			/**
			* This method is like `_.partial` except that partially applied arguments
			* are appended to the arguments it receives.
			*
			* The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
			* builds, may be used as a placeholder for partially applied arguments.
			*
			* **Note:** This method doesn't set the "length" property of partially
			* applied functions.
			*
			* @static
			* @memberOf _
			* @since 1.0.0
			* @category Function
			* @param {Function} func The function to partially apply arguments to.
			* @param {...*} [partials] The arguments to be partially applied.
			* @returns {Function} Returns the new partially applied function.
			* @example
			*
			* function greet(greeting, name) {
			*   return greeting + ' ' + name;
			* }
			*
			* var greetFred = _.partialRight(greet, 'fred');
			* greetFred('hi');
			* // => 'hi fred'
			*
			* // Partially applied with placeholders.
			* var sayHelloTo = _.partialRight(greet, 'hello', _);
			* sayHelloTo('fred');
			* // => 'hello fred'
			*/
			var partialRight = baseRest(function(func, partials) {
				var holders = replaceHolders(partials, getHolder(partialRight));
				return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
			});
			/**
			* Creates a function that invokes `func` with arguments arranged according
			* to the specified `indexes` where the argument value at the first index is
			* provided as the first argument, the argument value at the second index is
			* provided as the second argument, and so on.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Function
			* @param {Function} func The function to rearrange arguments for.
			* @param {...(number|number[])} indexes The arranged argument indexes.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var rearged = _.rearg(function(a, b, c) {
			*   return [a, b, c];
			* }, [2, 0, 1]);
			*
			* rearged('b', 'c', 'a')
			* // => ['a', 'b', 'c']
			*/
			var rearg = flatRest(function(func, indexes) {
				return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
			});
			/**
			* Creates a function that invokes `func` with the `this` binding of the
			* created function and arguments from `start` and beyond provided as
			* an array.
			*
			* **Note:** This method is based on the
			* [rest parameter](https://mdn.io/rest_parameters).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Function
			* @param {Function} func The function to apply a rest parameter to.
			* @param {number} [start=func.length-1] The start position of the rest parameter.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var say = _.rest(function(what, names) {
			*   return what + ' ' + _.initial(names).join(', ') +
			*     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
			* });
			*
			* say('hello', 'fred', 'barney', 'pebbles');
			* // => 'hello fred, barney, & pebbles'
			*/
			function rest(func, start) {
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				start = start === undefined$1 ? start : toInteger(start);
				return baseRest(func, start);
			}
			/**
			* Creates a function that invokes `func` with the `this` binding of the
			* create function and an array of arguments much like
			* [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
			*
			* **Note:** This method is based on the
			* [spread operator](https://mdn.io/spread_operator).
			*
			* @static
			* @memberOf _
			* @since 3.2.0
			* @category Function
			* @param {Function} func The function to spread arguments over.
			* @param {number} [start=0] The start position of the spread.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var say = _.spread(function(who, what) {
			*   return who + ' says ' + what;
			* });
			*
			* say(['fred', 'hello']);
			* // => 'fred says hello'
			*
			* var numbers = Promise.all([
			*   Promise.resolve(40),
			*   Promise.resolve(36)
			* ]);
			*
			* numbers.then(_.spread(function(x, y) {
			*   return x + y;
			* }));
			* // => a Promise of 76
			*/
			function spread(func, start) {
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				start = start == null ? 0 : nativeMax(toInteger(start), 0);
				return baseRest(function(args) {
					var array = args[start], otherArgs = castSlice$1(args, 0, start);
					if (array) arrayPush(otherArgs, array);
					return apply(func, this, otherArgs);
				});
			}
			/**
			* Creates a throttled function that only invokes `func` at most once per
			* every `wait` milliseconds. The throttled function comes with a `cancel`
			* method to cancel delayed `func` invocations and a `flush` method to
			* immediately invoke them. Provide `options` to indicate whether `func`
			* should be invoked on the leading and/or trailing edge of the `wait`
			* timeout. The `func` is invoked with the last arguments provided to the
			* throttled function. Subsequent calls to the throttled function return the
			* result of the last `func` invocation.
			*
			* **Note:** If `leading` and `trailing` options are `true`, `func` is
			* invoked on the trailing edge of the timeout only if the throttled function
			* is invoked more than once during the `wait` timeout.
			*
			* If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
			* until to the next tick, similar to `setTimeout` with a timeout of `0`.
			*
			* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
			* for details over the differences between `_.throttle` and `_.debounce`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {Function} func The function to throttle.
			* @param {number} [wait=0] The number of milliseconds to throttle invocations to.
			* @param {Object} [options={}] The options object.
			* @param {boolean} [options.leading=true]
			*  Specify invoking on the leading edge of the timeout.
			* @param {boolean} [options.trailing=true]
			*  Specify invoking on the trailing edge of the timeout.
			* @returns {Function} Returns the new throttled function.
			* @example
			*
			* // Avoid excessively updating the position while scrolling.
			* jQuery(window).on('scroll', _.throttle(updatePosition, 100));
			*
			* // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
			* var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
			* jQuery(element).on('click', throttled);
			*
			* // Cancel the trailing throttled invocation.
			* jQuery(window).on('popstate', throttled.cancel);
			*/
			function throttle(func, wait, options) {
				var leading = true, trailing = true;
				if (typeof func != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
				if (isObject$5(options)) {
					leading = "leading" in options ? !!options.leading : leading;
					trailing = "trailing" in options ? !!options.trailing : trailing;
				}
				return debounce(func, wait, {
					"leading": leading,
					"maxWait": wait,
					"trailing": trailing
				});
			}
			/**
			* Creates a function that accepts up to one argument, ignoring any
			* additional arguments.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Function
			* @param {Function} func The function to cap arguments for.
			* @returns {Function} Returns the new capped function.
			* @example
			*
			* _.map(['6', '8', '10'], _.unary(parseInt));
			* // => [6, 8, 10]
			*/
			function unary(func) {
				return ary(func, 1);
			}
			/**
			* Creates a function that provides `value` to `wrapper` as its first
			* argument. Any additional arguments provided to the function are appended
			* to those provided to the `wrapper`. The wrapper is invoked with the `this`
			* binding of the created function.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Function
			* @param {*} value The value to wrap.
			* @param {Function} [wrapper=identity] The wrapper function.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var p = _.wrap(_.escape, function(func, text) {
			*   return '<p>' + func(text) + '</p>';
			* });
			*
			* p('fred, barney, & pebbles');
			* // => '<p>fred, barney, &amp; pebbles</p>'
			*/
			function wrap(value, wrapper) {
				return partial(castFunction(wrapper), value);
			}
			/**
			* Casts `value` as an array if it's not one.
			*
			* @static
			* @memberOf _
			* @since 4.4.0
			* @category Lang
			* @param {*} value The value to inspect.
			* @returns {Array} Returns the cast array.
			* @example
			*
			* _.castArray(1);
			* // => [1]
			*
			* _.castArray({ 'a': 1 });
			* // => [{ 'a': 1 }]
			*
			* _.castArray('abc');
			* // => ['abc']
			*
			* _.castArray(null);
			* // => [null]
			*
			* _.castArray(undefined);
			* // => [undefined]
			*
			* _.castArray();
			* // => []
			*
			* var array = [1, 2, 3];
			* console.log(_.castArray(array) === array);
			* // => true
			*/
			function castArray() {
				if (!arguments.length) return [];
				var value = arguments[0];
				return isArray$5(value) ? value : [value];
			}
			/**
			* Creates a shallow clone of `value`.
			*
			* **Note:** This method is loosely based on the
			* [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
			* and supports cloning arrays, array buffers, booleans, date objects, maps,
			* numbers, `Object` objects, regexes, sets, strings, symbols, and typed
			* arrays. The own enumerable properties of `arguments` objects are cloned
			* as plain objects. An empty object is returned for uncloneable values such
			* as error objects, functions, DOM nodes, and WeakMaps.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to clone.
			* @returns {*} Returns the cloned value.
			* @see _.cloneDeep
			* @example
			*
			* var objects = [{ 'a': 1 }, { 'b': 2 }];
			*
			* var shallow = _.clone(objects);
			* console.log(shallow[0] === objects[0]);
			* // => true
			*/
			function clone$4(value) {
				return baseClone(value, CLONE_SYMBOLS_FLAG);
			}
			/**
			* This method is like `_.clone` except that it accepts `customizer` which
			* is invoked to produce the cloned value. If `customizer` returns `undefined`,
			* cloning is handled by the method instead. The `customizer` is invoked with
			* up to four arguments; (value [, index|key, object, stack]).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to clone.
			* @param {Function} [customizer] The function to customize cloning.
			* @returns {*} Returns the cloned value.
			* @see _.cloneDeepWith
			* @example
			*
			* function customizer(value) {
			*   if (_.isElement(value)) {
			*     return value.cloneNode(false);
			*   }
			* }
			*
			* var el = _.cloneWith(document.body, customizer);
			*
			* console.log(el === document.body);
			* // => false
			* console.log(el.nodeName);
			* // => 'BODY'
			* console.log(el.childNodes.length);
			* // => 0
			*/
			function cloneWith(value, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
			}
			/**
			* This method is like `_.clone` except that it recursively clones `value`.
			*
			* @static
			* @memberOf _
			* @since 1.0.0
			* @category Lang
			* @param {*} value The value to recursively clone.
			* @returns {*} Returns the deep cloned value.
			* @see _.clone
			* @example
			*
			* var objects = [{ 'a': 1 }, { 'b': 2 }];
			*
			* var deep = _.cloneDeep(objects);
			* console.log(deep[0] === objects[0]);
			* // => false
			*/
			function cloneDeep$1(value) {
				return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
			}
			/**
			* This method is like `_.cloneWith` except that it recursively clones `value`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to recursively clone.
			* @param {Function} [customizer] The function to customize cloning.
			* @returns {*} Returns the deep cloned value.
			* @see _.cloneWith
			* @example
			*
			* function customizer(value) {
			*   if (_.isElement(value)) {
			*     return value.cloneNode(true);
			*   }
			* }
			*
			* var el = _.cloneDeepWith(document.body, customizer);
			*
			* console.log(el === document.body);
			* // => false
			* console.log(el.nodeName);
			* // => 'BODY'
			* console.log(el.childNodes.length);
			* // => 20
			*/
			function cloneDeepWith(value, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
			}
			/**
			* Checks if `object` conforms to `source` by invoking the predicate
			* properties of `source` with the corresponding property values of `object`.
			*
			* **Note:** This method is equivalent to `_.conforms` when `source` is
			* partially applied.
			*
			* @static
			* @memberOf _
			* @since 4.14.0
			* @category Lang
			* @param {Object} object The object to inspect.
			* @param {Object} source The object of property predicates to conform to.
			* @returns {boolean} Returns `true` if `object` conforms, else `false`.
			* @example
			*
			* var object = { 'a': 1, 'b': 2 };
			*
			* _.conformsTo(object, { 'b': function(n) { return n > 1; } });
			* // => true
			*
			* _.conformsTo(object, { 'b': function(n) { return n > 2; } });
			* // => false
			*/
			function conformsTo(object$2, source) {
				return source == null || baseConformsTo(object$2, source, keys$1(source));
			}
			/**
			* Performs a
			* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			* comparison between two values to determine if they are equivalent.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			* @example
			*
			* var object = { 'a': 1 };
			* var other = { 'a': 1 };
			*
			* _.eq(object, object);
			* // => true
			*
			* _.eq(object, other);
			* // => false
			*
			* _.eq('a', 'a');
			* // => true
			*
			* _.eq('a', Object('a'));
			* // => false
			*
			* _.eq(NaN, NaN);
			* // => true
			*/
			function eq(value, other) {
				return value === other || value !== value && other !== other;
			}
			/**
			* Checks if `value` is greater than `other`.
			*
			* @static
			* @memberOf _
			* @since 3.9.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is greater than `other`,
			*  else `false`.
			* @see _.lt
			* @example
			*
			* _.gt(3, 1);
			* // => true
			*
			* _.gt(3, 3);
			* // => false
			*
			* _.gt(1, 3);
			* // => false
			*/
			var gt = createRelationalOperation(baseGt);
			/**
			* Checks if `value` is greater than or equal to `other`.
			*
			* @static
			* @memberOf _
			* @since 3.9.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is greater than or equal to
			*  `other`, else `false`.
			* @see _.lte
			* @example
			*
			* _.gte(3, 1);
			* // => true
			*
			* _.gte(3, 3);
			* // => true
			*
			* _.gte(1, 3);
			* // => false
			*/
			var gte$1 = createRelationalOperation(function(value, other) {
				return value >= other;
			});
			/**
			* Checks if `value` is likely an `arguments` object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an `arguments` object,
			*  else `false`.
			* @example
			*
			* _.isArguments(function() { return arguments; }());
			* // => true
			*
			* _.isArguments([1, 2, 3]);
			* // => false
			*/
			var isArguments = baseIsArguments(function() {
				return arguments;
			}()) ? baseIsArguments : function(value) {
				return isObjectLike$1(value) && hasOwnProperty$5.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
			};
			/**
			* Checks if `value` is classified as an `Array` object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an array, else `false`.
			* @example
			*
			* _.isArray([1, 2, 3]);
			* // => true
			*
			* _.isArray(document.body.children);
			* // => false
			*
			* _.isArray('abc');
			* // => false
			*
			* _.isArray(_.noop);
			* // => false
			*/
			var isArray$5 = Array$1.isArray;
			/**
			* Checks if `value` is classified as an `ArrayBuffer` object.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
			* @example
			*
			* _.isArrayBuffer(new ArrayBuffer(2));
			* // => true
			*
			* _.isArrayBuffer(new Array(2));
			* // => false
			*/
			var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
			/**
			* Checks if `value` is array-like. A value is considered array-like if it's
			* not a function and has a `value.length` that's an integer greater than or
			* equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is array-like, else `false`.
			* @example
			*
			* _.isArrayLike([1, 2, 3]);
			* // => true
			*
			* _.isArrayLike(document.body.children);
			* // => true
			*
			* _.isArrayLike('abc');
			* // => true
			*
			* _.isArrayLike(_.noop);
			* // => false
			*/
			function isArrayLike(value) {
				return value != null && isLength(value.length) && !isFunction$10(value);
			}
			/**
			* This method is like `_.isArrayLike` except that it also checks if `value`
			* is an object.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an array-like object,
			*  else `false`.
			* @example
			*
			* _.isArrayLikeObject([1, 2, 3]);
			* // => true
			*
			* _.isArrayLikeObject(document.body.children);
			* // => true
			*
			* _.isArrayLikeObject('abc');
			* // => false
			*
			* _.isArrayLikeObject(_.noop);
			* // => false
			*/
			function isArrayLikeObject(value) {
				return isObjectLike$1(value) && isArrayLike(value);
			}
			/**
			* Checks if `value` is classified as a boolean primitive or object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
			* @example
			*
			* _.isBoolean(false);
			* // => true
			*
			* _.isBoolean(null);
			* // => false
			*/
			function isBoolean(value) {
				return value === true || value === false || isObjectLike$1(value) && baseGetTag(value) == boolTag;
			}
			/**
			* Checks if `value` is a buffer.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
			* @example
			*
			* _.isBuffer(new Buffer(2));
			* // => true
			*
			* _.isBuffer(new Uint8Array(2));
			* // => false
			*/
			var isBuffer$1 = nativeIsBuffer || stubFalse;
			/**
			* Checks if `value` is classified as a `Date` object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a date object, else `false`.
			* @example
			*
			* _.isDate(new Date);
			* // => true
			*
			* _.isDate('Mon April 23 2012');
			* // => false
			*/
			var isDate$1 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
			/**
			* Checks if `value` is likely a DOM element.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
			* @example
			*
			* _.isElement(document.body);
			* // => true
			*
			* _.isElement('<body>');
			* // => false
			*/
			function isElement(value) {
				return isObjectLike$1(value) && value.nodeType === 1 && !isPlainObject$2(value);
			}
			/**
			* Checks if `value` is an empty object, collection, map, or set.
			*
			* Objects are considered empty if they have no own enumerable string keyed
			* properties.
			*
			* Array-like values such as `arguments` objects, arrays, buffers, strings, or
			* jQuery-like collections are considered empty if they have a `length` of `0`.
			* Similarly, maps and sets are considered empty if they have a `size` of `0`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is empty, else `false`.
			* @example
			*
			* _.isEmpty(null);
			* // => true
			*
			* _.isEmpty(true);
			* // => true
			*
			* _.isEmpty(1);
			* // => true
			*
			* _.isEmpty([1, 2, 3]);
			* // => false
			*
			* _.isEmpty({ 'a': 1 });
			* // => false
			*/
			function isEmpty$1(value) {
				if (value == null) return true;
				if (isArrayLike(value) && (isArray$5(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer$1(value) || isTypedArray(value) || isArguments(value))) return !value.length;
				var tag$3 = getTag(value);
				if (tag$3 == mapTag || tag$3 == setTag) return !value.size;
				if (isPrototype(value)) return !baseKeys(value).length;
				for (var key in value) if (hasOwnProperty$5.call(value, key)) return false;
				return true;
			}
			/**
			* Performs a deep comparison between two values to determine if they are
			* equivalent.
			*
			* **Note:** This method supports comparing arrays, array buffers, booleans,
			* date objects, error objects, maps, numbers, `Object` objects, regexes,
			* sets, strings, symbols, and typed arrays. `Object` objects are compared
			* by their own, not inherited, enumerable properties. Functions and DOM
			* nodes are compared by strict equality, i.e. `===`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			* @example
			*
			* var object = { 'a': 1 };
			* var other = { 'a': 1 };
			*
			* _.isEqual(object, other);
			* // => true
			*
			* object === other;
			* // => false
			*/
			function isEqual(value, other) {
				return baseIsEqual(value, other);
			}
			/**
			* This method is like `_.isEqual` except that it accepts `customizer` which
			* is invoked to compare values. If `customizer` returns `undefined`, comparisons
			* are handled by the method instead. The `customizer` is invoked with up to
			* six arguments: (objValue, othValue [, index|key, object, other, stack]).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @param {Function} [customizer] The function to customize comparisons.
			* @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			* @example
			*
			* function isGreeting(value) {
			*   return /^h(?:i|ello)$/.test(value);
			* }
			*
			* function customizer(objValue, othValue) {
			*   if (isGreeting(objValue) && isGreeting(othValue)) {
			*     return true;
			*   }
			* }
			*
			* var array = ['hello', 'goodbye'];
			* var other = ['hi', 'goodbye'];
			*
			* _.isEqualWith(array, other, customizer);
			* // => true
			*/
			function isEqualWith(value, other, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				var result$1 = customizer ? customizer(value, other) : undefined$1;
				return result$1 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result$1;
			}
			/**
			* Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
			* `SyntaxError`, `TypeError`, or `URIError` object.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an error object, else `false`.
			* @example
			*
			* _.isError(new Error);
			* // => true
			*
			* _.isError(Error);
			* // => false
			*/
			function isError$1(value) {
				if (!isObjectLike$1(value)) return false;
				var tag$3 = baseGetTag(value);
				return tag$3 == errorTag || tag$3 == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject$2(value);
			}
			/**
			* Checks if `value` is a finite primitive number.
			*
			* **Note:** This method is based on
			* [`Number.isFinite`](https://mdn.io/Number/isFinite).
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
			* @example
			*
			* _.isFinite(3);
			* // => true
			*
			* _.isFinite(Number.MIN_VALUE);
			* // => true
			*
			* _.isFinite(Infinity);
			* // => false
			*
			* _.isFinite('3');
			* // => false
			*/
			function isFinite$1(value) {
				return typeof value == "number" && nativeIsFinite(value);
			}
			/**
			* Checks if `value` is classified as a `Function` object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a function, else `false`.
			* @example
			*
			* _.isFunction(_);
			* // => true
			*
			* _.isFunction(/abc/);
			* // => false
			*/
			function isFunction$10(value) {
				if (!isObject$5(value)) return false;
				var tag$3 = baseGetTag(value);
				return tag$3 == funcTag || tag$3 == genTag || tag$3 == asyncTag || tag$3 == proxyTag;
			}
			/**
			* Checks if `value` is an integer.
			*
			* **Note:** This method is based on
			* [`Number.isInteger`](https://mdn.io/Number/isInteger).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an integer, else `false`.
			* @example
			*
			* _.isInteger(3);
			* // => true
			*
			* _.isInteger(Number.MIN_VALUE);
			* // => false
			*
			* _.isInteger(Infinity);
			* // => false
			*
			* _.isInteger('3');
			* // => false
			*/
			function isInteger(value) {
				return typeof value == "number" && value == toInteger(value);
			}
			/**
			* Checks if `value` is a valid array-like length.
			*
			* **Note:** This method is loosely based on
			* [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
			* @example
			*
			* _.isLength(3);
			* // => true
			*
			* _.isLength(Number.MIN_VALUE);
			* // => false
			*
			* _.isLength(Infinity);
			* // => false
			*
			* _.isLength('3');
			* // => false
			*/
			function isLength(value) {
				return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
			}
			/**
			* Checks if `value` is the
			* [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
			* of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is an object, else `false`.
			* @example
			*
			* _.isObject({});
			* // => true
			*
			* _.isObject([1, 2, 3]);
			* // => true
			*
			* _.isObject(_.noop);
			* // => true
			*
			* _.isObject(null);
			* // => false
			*/
			function isObject$5(value) {
				var type = typeof value;
				return value != null && (type == "object" || type == "function");
			}
			/**
			* Checks if `value` is object-like. A value is object-like if it's not `null`
			* and has a `typeof` result of "object".
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
			* @example
			*
			* _.isObjectLike({});
			* // => true
			*
			* _.isObjectLike([1, 2, 3]);
			* // => true
			*
			* _.isObjectLike(_.noop);
			* // => false
			*
			* _.isObjectLike(null);
			* // => false
			*/
			function isObjectLike$1(value) {
				return value != null && typeof value == "object";
			}
			/**
			* Checks if `value` is classified as a `Map` object.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a map, else `false`.
			* @example
			*
			* _.isMap(new Map);
			* // => true
			*
			* _.isMap(new WeakMap);
			* // => false
			*/
			var isMap$2 = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
			/**
			* Performs a partial deep comparison between `object` and `source` to
			* determine if `object` contains equivalent property values.
			*
			* **Note:** This method is equivalent to `_.matches` when `source` is
			* partially applied.
			*
			* Partial comparisons will match empty array and empty object `source`
			* values against any array or object value, respectively. See `_.isEqual`
			* for a list of supported value comparisons.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Lang
			* @param {Object} object The object to inspect.
			* @param {Object} source The object of property values to match.
			* @returns {boolean} Returns `true` if `object` is a match, else `false`.
			* @example
			*
			* var object = { 'a': 1, 'b': 2 };
			*
			* _.isMatch(object, { 'b': 2 });
			* // => true
			*
			* _.isMatch(object, { 'b': 1 });
			* // => false
			*/
			function isMatch(object$2, source) {
				return object$2 === source || baseIsMatch(object$2, source, getMatchData(source));
			}
			/**
			* This method is like `_.isMatch` except that it accepts `customizer` which
			* is invoked to compare values. If `customizer` returns `undefined`, comparisons
			* are handled by the method instead. The `customizer` is invoked with five
			* arguments: (objValue, srcValue, index|key, object, source).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {Object} object The object to inspect.
			* @param {Object} source The object of property values to match.
			* @param {Function} [customizer] The function to customize comparisons.
			* @returns {boolean} Returns `true` if `object` is a match, else `false`.
			* @example
			*
			* function isGreeting(value) {
			*   return /^h(?:i|ello)$/.test(value);
			* }
			*
			* function customizer(objValue, srcValue) {
			*   if (isGreeting(objValue) && isGreeting(srcValue)) {
			*     return true;
			*   }
			* }
			*
			* var object = { 'greeting': 'hello' };
			* var source = { 'greeting': 'hi' };
			*
			* _.isMatchWith(object, source, customizer);
			* // => true
			*/
			function isMatchWith(object$2, source, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				return baseIsMatch(object$2, source, getMatchData(source), customizer);
			}
			/**
			* Checks if `value` is `NaN`.
			*
			* **Note:** This method is based on
			* [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
			* global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
			* `undefined` and other non-number values.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
			* @example
			*
			* _.isNaN(NaN);
			* // => true
			*
			* _.isNaN(new Number(NaN));
			* // => true
			*
			* isNaN(undefined);
			* // => true
			*
			* _.isNaN(undefined);
			* // => false
			*/
			function isNaN$1(value) {
				return isNumber$2(value) && value != +value;
			}
			/**
			* Checks if `value` is a pristine native function.
			*
			* **Note:** This method can't reliably detect native functions in the presence
			* of the core-js package because core-js circumvents this kind of detection.
			* Despite multiple requests, the core-js maintainer has made it clear: any
			* attempt to fix the detection will be obstructed. As a result, we're left
			* with little choice but to throw an error. Unfortunately, this also affects
			* packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
			* which rely on core-js.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a native function,
			*  else `false`.
			* @example
			*
			* _.isNative(Array.prototype.push);
			* // => true
			*
			* _.isNative(_);
			* // => false
			*/
			function isNative(value) {
				if (isMaskable(value)) throw new Error$1(CORE_ERROR_TEXT);
				return baseIsNative(value);
			}
			/**
			* Checks if `value` is `null`.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is `null`, else `false`.
			* @example
			*
			* _.isNull(null);
			* // => true
			*
			* _.isNull(void 0);
			* // => false
			*/
			function isNull(value) {
				return value === null;
			}
			/**
			* Checks if `value` is `null` or `undefined`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is nullish, else `false`.
			* @example
			*
			* _.isNil(null);
			* // => true
			*
			* _.isNil(void 0);
			* // => true
			*
			* _.isNil(NaN);
			* // => false
			*/
			function isNil(value) {
				return value == null;
			}
			/**
			* Checks if `value` is classified as a `Number` primitive or object.
			*
			* **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
			* classified as numbers, use the `_.isFinite` method.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a number, else `false`.
			* @example
			*
			* _.isNumber(3);
			* // => true
			*
			* _.isNumber(Number.MIN_VALUE);
			* // => true
			*
			* _.isNumber(Infinity);
			* // => true
			*
			* _.isNumber('3');
			* // => false
			*/
			function isNumber$2(value) {
				return typeof value == "number" || isObjectLike$1(value) && baseGetTag(value) == numberTag;
			}
			/**
			* Checks if `value` is a plain object, that is, an object created by the
			* `Object` constructor or one with a `[[Prototype]]` of `null`.
			*
			* @static
			* @memberOf _
			* @since 0.8.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			* }
			*
			* _.isPlainObject(new Foo);
			* // => false
			*
			* _.isPlainObject([1, 2, 3]);
			* // => false
			*
			* _.isPlainObject({ 'x': 0, 'y': 0 });
			* // => true
			*
			* _.isPlainObject(Object.create(null));
			* // => true
			*/
			function isPlainObject$2(value) {
				if (!isObjectLike$1(value) || baseGetTag(value) != objectTag) return false;
				var proto$1 = getPrototype(value);
				if (proto$1 === null) return true;
				var Ctor = hasOwnProperty$5.call(proto$1, "constructor") && proto$1.constructor;
				return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
			}
			/**
			* Checks if `value` is classified as a `RegExp` object.
			*
			* @static
			* @memberOf _
			* @since 0.1.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
			* @example
			*
			* _.isRegExp(/abc/);
			* // => true
			*
			* _.isRegExp('/abc/');
			* // => false
			*/
			var isRegExp$1 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
			/**
			* Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
			* double precision number which isn't the result of a rounded unsafe integer.
			*
			* **Note:** This method is based on
			* [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
			* @example
			*
			* _.isSafeInteger(3);
			* // => true
			*
			* _.isSafeInteger(Number.MIN_VALUE);
			* // => false
			*
			* _.isSafeInteger(Infinity);
			* // => false
			*
			* _.isSafeInteger('3');
			* // => false
			*/
			function isSafeInteger(value) {
				return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
			}
			/**
			* Checks if `value` is classified as a `Set` object.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a set, else `false`.
			* @example
			*
			* _.isSet(new Set);
			* // => true
			*
			* _.isSet(new WeakSet);
			* // => false
			*/
			var isSet$2 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
			/**
			* Checks if `value` is classified as a `String` primitive or object.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a string, else `false`.
			* @example
			*
			* _.isString('abc');
			* // => true
			*
			* _.isString(1);
			* // => false
			*/
			function isString$5(value) {
				return typeof value == "string" || !isArray$5(value) && isObjectLike$1(value) && baseGetTag(value) == stringTag;
			}
			/**
			* Checks if `value` is classified as a `Symbol` primitive or object.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
			* @example
			*
			* _.isSymbol(Symbol.iterator);
			* // => true
			*
			* _.isSymbol('abc');
			* // => false
			*/
			function isSymbol$2(value) {
				return typeof value == "symbol" || isObjectLike$1(value) && baseGetTag(value) == symbolTag$1;
			}
			/**
			* Checks if `value` is classified as a typed array.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			* @example
			*
			* _.isTypedArray(new Uint8Array);
			* // => true
			*
			* _.isTypedArray([]);
			* // => false
			*/
			var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
			/**
			* Checks if `value` is `undefined`.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
			* @example
			*
			* _.isUndefined(void 0);
			* // => true
			*
			* _.isUndefined(null);
			* // => false
			*/
			function isUndefined(value) {
				return value === undefined$1;
			}
			/**
			* Checks if `value` is classified as a `WeakMap` object.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
			* @example
			*
			* _.isWeakMap(new WeakMap);
			* // => true
			*
			* _.isWeakMap(new Map);
			* // => false
			*/
			function isWeakMap(value) {
				return isObjectLike$1(value) && getTag(value) == weakMapTag;
			}
			/**
			* Checks if `value` is classified as a `WeakSet` object.
			*
			* @static
			* @memberOf _
			* @since 4.3.0
			* @category Lang
			* @param {*} value The value to check.
			* @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
			* @example
			*
			* _.isWeakSet(new WeakSet);
			* // => true
			*
			* _.isWeakSet(new Set);
			* // => false
			*/
			function isWeakSet(value) {
				return isObjectLike$1(value) && baseGetTag(value) == weakSetTag;
			}
			/**
			* Checks if `value` is less than `other`.
			*
			* @static
			* @memberOf _
			* @since 3.9.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is less than `other`,
			*  else `false`.
			* @see _.gt
			* @example
			*
			* _.lt(1, 3);
			* // => true
			*
			* _.lt(3, 3);
			* // => false
			*
			* _.lt(3, 1);
			* // => false
			*/
			var lt = createRelationalOperation(baseLt);
			/**
			* Checks if `value` is less than or equal to `other`.
			*
			* @static
			* @memberOf _
			* @since 3.9.0
			* @category Lang
			* @param {*} value The value to compare.
			* @param {*} other The other value to compare.
			* @returns {boolean} Returns `true` if `value` is less than or equal to
			*  `other`, else `false`.
			* @see _.gte
			* @example
			*
			* _.lte(1, 3);
			* // => true
			*
			* _.lte(3, 3);
			* // => true
			*
			* _.lte(3, 1);
			* // => false
			*/
			var lte$1 = createRelationalOperation(function(value, other) {
				return value <= other;
			});
			/**
			* Converts `value` to an array.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {Array} Returns the converted array.
			* @example
			*
			* _.toArray({ 'a': 1, 'b': 2 });
			* // => [1, 2]
			*
			* _.toArray('abc');
			* // => ['a', 'b', 'c']
			*
			* _.toArray(1);
			* // => []
			*
			* _.toArray(null);
			* // => []
			*/
			function toArray(value) {
				if (!value) return [];
				if (isArrayLike(value)) return isString$5(value) ? stringToArray$1(value) : copyArray(value);
				if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
				var tag$3 = getTag(value), func = tag$3 == mapTag ? mapToArray : tag$3 == setTag ? setToArray : values;
				return func(value);
			}
			/**
			* Converts `value` to a finite number.
			*
			* @static
			* @memberOf _
			* @since 4.12.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {number} Returns the converted number.
			* @example
			*
			* _.toFinite(3.2);
			* // => 3.2
			*
			* _.toFinite(Number.MIN_VALUE);
			* // => 5e-324
			*
			* _.toFinite(Infinity);
			* // => 1.7976931348623157e+308
			*
			* _.toFinite('3.2');
			* // => 3.2
			*/
			function toFinite(value) {
				if (!value) return value === 0 ? value : 0;
				value = toNumber$1(value);
				if (value === INFINITY$1 || value === -INFINITY$1) {
					var sign = value < 0 ? -1 : 1;
					return sign * MAX_INTEGER;
				}
				return value === value ? value : 0;
			}
			/**
			* Converts `value` to an integer.
			*
			* **Note:** This method is loosely based on
			* [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {number} Returns the converted integer.
			* @example
			*
			* _.toInteger(3.2);
			* // => 3
			*
			* _.toInteger(Number.MIN_VALUE);
			* // => 0
			*
			* _.toInteger(Infinity);
			* // => 1.7976931348623157e+308
			*
			* _.toInteger('3.2');
			* // => 3
			*/
			function toInteger(value) {
				var result$1 = toFinite(value), remainder = result$1 % 1;
				return result$1 === result$1 ? remainder ? result$1 - remainder : result$1 : 0;
			}
			/**
			* Converts `value` to an integer suitable for use as the length of an
			* array-like object.
			*
			* **Note:** This method is based on
			* [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {number} Returns the converted integer.
			* @example
			*
			* _.toLength(3.2);
			* // => 3
			*
			* _.toLength(Number.MIN_VALUE);
			* // => 0
			*
			* _.toLength(Infinity);
			* // => 4294967295
			*
			* _.toLength('3.2');
			* // => 3
			*/
			function toLength(value) {
				return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
			}
			/**
			* Converts `value` to a number.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to process.
			* @returns {number} Returns the number.
			* @example
			*
			* _.toNumber(3.2);
			* // => 3.2
			*
			* _.toNumber(Number.MIN_VALUE);
			* // => 5e-324
			*
			* _.toNumber(Infinity);
			* // => Infinity
			*
			* _.toNumber('3.2');
			* // => 3.2
			*/
			function toNumber$1(value) {
				if (typeof value == "number") return value;
				if (isSymbol$2(value)) return NAN;
				if (isObject$5(value)) {
					var other = typeof value.valueOf == "function" ? value.valueOf() : value;
					value = isObject$5(other) ? other + "" : other;
				}
				if (typeof value != "string") return value === 0 ? value : +value;
				value = baseTrim(value);
				var isBinary$3 = reIsBinary.test(value);
				return isBinary$3 || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary$3 ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
			}
			/**
			* Converts `value` to a plain object flattening inherited enumerable string
			* keyed properties of `value` to own properties of the plain object.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {Object} Returns the converted plain object.
			* @example
			*
			* function Foo() {
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.assign({ 'a': 1 }, new Foo);
			* // => { 'a': 1, 'b': 2 }
			*
			* _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
			* // => { 'a': 1, 'b': 2, 'c': 3 }
			*/
			function toPlainObject(value) {
				return copyObject(value, keysIn(value));
			}
			/**
			* Converts `value` to a safe integer. A safe integer can be compared and
			* represented correctly.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {number} Returns the converted integer.
			* @example
			*
			* _.toSafeInteger(3.2);
			* // => 3
			*
			* _.toSafeInteger(Number.MIN_VALUE);
			* // => 0
			*
			* _.toSafeInteger(Infinity);
			* // => 9007199254740991
			*
			* _.toSafeInteger('3.2');
			* // => 3
			*/
			function toSafeInteger(value) {
				return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
			}
			/**
			* Converts `value` to a string. An empty string is returned for `null`
			* and `undefined` values. The sign of `-0` is preserved.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Lang
			* @param {*} value The value to convert.
			* @returns {string} Returns the converted string.
			* @example
			*
			* _.toString(null);
			* // => ''
			*
			* _.toString(-0);
			* // => '-0'
			*
			* _.toString([1, 2, 3]);
			* // => '1,2,3'
			*/
			function toString$5(value) {
				return value == null ? "" : baseToString$1(value);
			}
			/**
			* Assigns own enumerable string keyed properties of source objects to the
			* destination object. Source objects are applied from left to right.
			* Subsequent sources overwrite property assignments of previous sources.
			*
			* **Note:** This method mutates `object` and is loosely based on
			* [`Object.assign`](https://mdn.io/Object/assign).
			*
			* @static
			* @memberOf _
			* @since 0.10.0
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} [sources] The source objects.
			* @returns {Object} Returns `object`.
			* @see _.assignIn
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			* }
			*
			* function Bar() {
			*   this.c = 3;
			* }
			*
			* Foo.prototype.b = 2;
			* Bar.prototype.d = 4;
			*
			* _.assign({ 'a': 0 }, new Foo, new Bar);
			* // => { 'a': 1, 'c': 3 }
			*/
			var assign = createAssigner(function(object$2, source) {
				if (isPrototype(source) || isArrayLike(source)) {
					copyObject(source, keys$1(source), object$2);
					return;
				}
				for (var key in source) if (hasOwnProperty$5.call(source, key)) assignValue(object$2, key, source[key]);
			});
			/**
			* This method is like `_.assign` except that it iterates over own and
			* inherited source properties.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @alias extend
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} [sources] The source objects.
			* @returns {Object} Returns `object`.
			* @see _.assign
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			* }
			*
			* function Bar() {
			*   this.c = 3;
			* }
			*
			* Foo.prototype.b = 2;
			* Bar.prototype.d = 4;
			*
			* _.assignIn({ 'a': 0 }, new Foo, new Bar);
			* // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
			*/
			var assignIn = createAssigner(function(object$2, source) {
				copyObject(source, keysIn(source), object$2);
			});
			/**
			* This method is like `_.assignIn` except that it accepts `customizer`
			* which is invoked to produce the assigned values. If `customizer` returns
			* `undefined`, assignment is handled by the method instead. The `customizer`
			* is invoked with five arguments: (objValue, srcValue, key, object, source).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @alias extendWith
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} sources The source objects.
			* @param {Function} [customizer] The function to customize assigned values.
			* @returns {Object} Returns `object`.
			* @see _.assignWith
			* @example
			*
			* function customizer(objValue, srcValue) {
			*   return _.isUndefined(objValue) ? srcValue : objValue;
			* }
			*
			* var defaults = _.partialRight(_.assignInWith, customizer);
			*
			* defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
			* // => { 'a': 1, 'b': 2 }
			*/
			var assignInWith = createAssigner(function(object$2, source, srcIndex, customizer) {
				copyObject(source, keysIn(source), object$2, customizer);
			});
			/**
			* This method is like `_.assign` except that it accepts `customizer`
			* which is invoked to produce the assigned values. If `customizer` returns
			* `undefined`, assignment is handled by the method instead. The `customizer`
			* is invoked with five arguments: (objValue, srcValue, key, object, source).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} sources The source objects.
			* @param {Function} [customizer] The function to customize assigned values.
			* @returns {Object} Returns `object`.
			* @see _.assignInWith
			* @example
			*
			* function customizer(objValue, srcValue) {
			*   return _.isUndefined(objValue) ? srcValue : objValue;
			* }
			*
			* var defaults = _.partialRight(_.assignWith, customizer);
			*
			* defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
			* // => { 'a': 1, 'b': 2 }
			*/
			var assignWith = createAssigner(function(object$2, source, srcIndex, customizer) {
				copyObject(source, keys$1(source), object$2, customizer);
			});
			/**
			* Creates an array of values corresponding to `paths` of `object`.
			*
			* @static
			* @memberOf _
			* @since 1.0.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {...(string|string[])} [paths] The property paths to pick.
			* @returns {Array} Returns the picked values.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
			*
			* _.at(object, ['a[0].b.c', 'a[1]']);
			* // => [3, 4]
			*/
			var at$3 = flatRest(baseAt);
			/**
			* Creates an object that inherits from the `prototype` object. If a
			* `properties` object is given, its own enumerable string keyed properties
			* are assigned to the created object.
			*
			* @static
			* @memberOf _
			* @since 2.3.0
			* @category Object
			* @param {Object} prototype The object to inherit from.
			* @param {Object} [properties] The properties to assign to the object.
			* @returns {Object} Returns the new object.
			* @example
			*
			* function Shape() {
			*   this.x = 0;
			*   this.y = 0;
			* }
			*
			* function Circle() {
			*   Shape.call(this);
			* }
			*
			* Circle.prototype = _.create(Shape.prototype, {
			*   'constructor': Circle
			* });
			*
			* var circle = new Circle;
			* circle instanceof Circle;
			* // => true
			*
			* circle instanceof Shape;
			* // => true
			*/
			function create$5(prototype, properties) {
				var result$1 = baseCreate(prototype);
				return properties == null ? result$1 : baseAssign(result$1, properties);
			}
			/**
			* Assigns own and inherited enumerable string keyed properties of source
			* objects to the destination object for all destination properties that
			* resolve to `undefined`. Source objects are applied from left to right.
			* Once a property is set, additional values of the same property are ignored.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} [sources] The source objects.
			* @returns {Object} Returns `object`.
			* @see _.defaultsDeep
			* @example
			*
			* _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
			* // => { 'a': 1, 'b': 2 }
			*/
			var defaults$2 = baseRest(function(object$2, sources) {
				object$2 = Object$1(object$2);
				var index$1 = -1;
				var length = sources.length;
				var guard = length > 2 ? sources[2] : undefined$1;
				if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
				while (++index$1 < length) {
					var source = sources[index$1];
					var props = keysIn(source);
					var propsIndex = -1;
					var propsLength = props.length;
					while (++propsIndex < propsLength) {
						var key = props[propsIndex];
						var value = object$2[key];
						if (value === undefined$1 || eq(value, objectProto$1[key]) && !hasOwnProperty$5.call(object$2, key)) object$2[key] = source[key];
					}
				}
				return object$2;
			});
			/**
			* This method is like `_.defaults` except that it recursively assigns
			* default properties.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 3.10.0
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} [sources] The source objects.
			* @returns {Object} Returns `object`.
			* @see _.defaults
			* @example
			*
			* _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
			* // => { 'a': { 'b': 2, 'c': 3 } }
			*/
			var defaultsDeep = baseRest(function(args) {
				args.push(undefined$1, customDefaultsMerge);
				return apply(mergeWith, undefined$1, args);
			});
			/**
			* This method is like `_.find` except that it returns the key of the first
			* element `predicate` returns truthy for instead of the element itself.
			*
			* @static
			* @memberOf _
			* @since 1.1.0
			* @category Object
			* @param {Object} object The object to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {string|undefined} Returns the key of the matched element,
			*  else `undefined`.
			* @example
			*
			* var users = {
			*   'barney':  { 'age': 36, 'active': true },
			*   'fred':    { 'age': 40, 'active': false },
			*   'pebbles': { 'age': 1,  'active': true }
			* };
			*
			* _.findKey(users, function(o) { return o.age < 40; });
			* // => 'barney' (iteration order is not guaranteed)
			*
			* // The `_.matches` iteratee shorthand.
			* _.findKey(users, { 'age': 1, 'active': true });
			* // => 'pebbles'
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.findKey(users, ['active', false]);
			* // => 'fred'
			*
			* // The `_.property` iteratee shorthand.
			* _.findKey(users, 'active');
			* // => 'barney'
			*/
			function findKey(object$2, predicate) {
				return baseFindKey(object$2, getIteratee(predicate, 3), baseForOwn);
			}
			/**
			* This method is like `_.findKey` except that it iterates over elements of
			* a collection in the opposite order.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Object
			* @param {Object} object The object to inspect.
			* @param {Function} [predicate=_.identity] The function invoked per iteration.
			* @returns {string|undefined} Returns the key of the matched element,
			*  else `undefined`.
			* @example
			*
			* var users = {
			*   'barney':  { 'age': 36, 'active': true },
			*   'fred':    { 'age': 40, 'active': false },
			*   'pebbles': { 'age': 1,  'active': true }
			* };
			*
			* _.findLastKey(users, function(o) { return o.age < 40; });
			* // => returns 'pebbles' assuming `_.findKey` returns 'barney'
			*
			* // The `_.matches` iteratee shorthand.
			* _.findLastKey(users, { 'age': 36, 'active': true });
			* // => 'barney'
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.findLastKey(users, ['active', false]);
			* // => 'fred'
			*
			* // The `_.property` iteratee shorthand.
			* _.findLastKey(users, 'active');
			* // => 'pebbles'
			*/
			function findLastKey(object$2, predicate) {
				return baseFindKey(object$2, getIteratee(predicate, 3), baseForOwnRight);
			}
			/**
			* Iterates over own and inherited enumerable string keyed properties of an
			* object and invokes `iteratee` for each property. The iteratee is invoked
			* with three arguments: (value, key, object). Iteratee functions may exit
			* iteration early by explicitly returning `false`.
			*
			* @static
			* @memberOf _
			* @since 0.3.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns `object`.
			* @see _.forInRight
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.forIn(new Foo, function(value, key) {
			*   console.log(key);
			* });
			* // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
			*/
			function forIn(object$2, iteratee$1) {
				return object$2 == null ? object$2 : baseFor(object$2, getIteratee(iteratee$1, 3), keysIn);
			}
			/**
			* This method is like `_.forIn` except that it iterates over properties of
			* `object` in the opposite order.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns `object`.
			* @see _.forIn
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.forInRight(new Foo, function(value, key) {
			*   console.log(key);
			* });
			* // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
			*/
			function forInRight(object$2, iteratee$1) {
				return object$2 == null ? object$2 : baseForRight(object$2, getIteratee(iteratee$1, 3), keysIn);
			}
			/**
			* Iterates over own enumerable string keyed properties of an object and
			* invokes `iteratee` for each property. The iteratee is invoked with three
			* arguments: (value, key, object). Iteratee functions may exit iteration
			* early by explicitly returning `false`.
			*
			* @static
			* @memberOf _
			* @since 0.3.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns `object`.
			* @see _.forOwnRight
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.forOwn(new Foo, function(value, key) {
			*   console.log(key);
			* });
			* // => Logs 'a' then 'b' (iteration order is not guaranteed).
			*/
			function forOwn$1(object$2, iteratee$1) {
				return object$2 && baseForOwn(object$2, getIteratee(iteratee$1, 3));
			}
			/**
			* This method is like `_.forOwn` except that it iterates over properties of
			* `object` in the opposite order.
			*
			* @static
			* @memberOf _
			* @since 2.0.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns `object`.
			* @see _.forOwn
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.forOwnRight(new Foo, function(value, key) {
			*   console.log(key);
			* });
			* // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
			*/
			function forOwnRight(object$2, iteratee$1) {
				return object$2 && baseForOwnRight(object$2, getIteratee(iteratee$1, 3));
			}
			/**
			* Creates an array of function property names from own enumerable properties
			* of `object`.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The object to inspect.
			* @returns {Array} Returns the function names.
			* @see _.functionsIn
			* @example
			*
			* function Foo() {
			*   this.a = _.constant('a');
			*   this.b = _.constant('b');
			* }
			*
			* Foo.prototype.c = _.constant('c');
			*
			* _.functions(new Foo);
			* // => ['a', 'b']
			*/
			function functions(object$2) {
				return object$2 == null ? [] : baseFunctions(object$2, keys$1(object$2));
			}
			/**
			* Creates an array of function property names from own and inherited
			* enumerable properties of `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The object to inspect.
			* @returns {Array} Returns the function names.
			* @see _.functions
			* @example
			*
			* function Foo() {
			*   this.a = _.constant('a');
			*   this.b = _.constant('b');
			* }
			*
			* Foo.prototype.c = _.constant('c');
			*
			* _.functionsIn(new Foo);
			* // => ['a', 'b', 'c']
			*/
			function functionsIn(object$2) {
				return object$2 == null ? [] : baseFunctions(object$2, keysIn(object$2));
			}
			/**
			* Gets the value at `path` of `object`. If the resolved value is
			* `undefined`, the `defaultValue` is returned in its place.
			*
			* @static
			* @memberOf _
			* @since 3.7.0
			* @category Object
			* @param {Object} object The object to query.
			* @param {Array|string} path The path of the property to get.
			* @param {*} [defaultValue] The value returned for `undefined` resolved values.
			* @returns {*} Returns the resolved value.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 3 } }] };
			*
			* _.get(object, 'a[0].b.c');
			* // => 3
			*
			* _.get(object, ['a', '0', 'b', 'c']);
			* // => 3
			*
			* _.get(object, 'a.b.c', 'default');
			* // => 'default'
			*/
			function get$2(object$2, path$28, defaultValue) {
				var result$1 = object$2 == null ? undefined$1 : baseGet(object$2, path$28);
				return result$1 === undefined$1 ? defaultValue : result$1;
			}
			/**
			* Checks if `path` is a direct property of `object`.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The object to query.
			* @param {Array|string} path The path to check.
			* @returns {boolean} Returns `true` if `path` exists, else `false`.
			* @example
			*
			* var object = { 'a': { 'b': 2 } };
			* var other = _.create({ 'a': _.create({ 'b': 2 }) });
			*
			* _.has(object, 'a');
			* // => true
			*
			* _.has(object, 'a.b');
			* // => true
			*
			* _.has(object, ['a', 'b']);
			* // => true
			*
			* _.has(other, 'a');
			* // => false
			*/
			function has$3(object$2, path$28) {
				return object$2 != null && hasPath(object$2, path$28, baseHas);
			}
			/**
			* Checks if `path` is a direct or inherited property of `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The object to query.
			* @param {Array|string} path The path to check.
			* @returns {boolean} Returns `true` if `path` exists, else `false`.
			* @example
			*
			* var object = _.create({ 'a': _.create({ 'b': 2 }) });
			*
			* _.hasIn(object, 'a');
			* // => true
			*
			* _.hasIn(object, 'a.b');
			* // => true
			*
			* _.hasIn(object, ['a', 'b']);
			* // => true
			*
			* _.hasIn(object, 'b');
			* // => false
			*/
			function hasIn(object$2, path$28) {
				return object$2 != null && hasPath(object$2, path$28, baseHasIn);
			}
			/**
			* Creates an object composed of the inverted keys and values of `object`.
			* If `object` contains duplicate values, subsequent values overwrite
			* property assignments of previous values.
			*
			* @static
			* @memberOf _
			* @since 0.7.0
			* @category Object
			* @param {Object} object The object to invert.
			* @returns {Object} Returns the new inverted object.
			* @example
			*
			* var object = { 'a': 1, 'b': 2, 'c': 1 };
			*
			* _.invert(object);
			* // => { '1': 'c', '2': 'b' }
			*/
			var invert = createInverter(function(result$1, value, key) {
				if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
				result$1[value] = key;
			}, constant(identity$2));
			/**
			* This method is like `_.invert` except that the inverted object is generated
			* from the results of running each element of `object` thru `iteratee`. The
			* corresponding inverted value of each inverted key is an array of keys
			* responsible for generating the inverted value. The iteratee is invoked
			* with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.1.0
			* @category Object
			* @param {Object} object The object to invert.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {Object} Returns the new inverted object.
			* @example
			*
			* var object = { 'a': 1, 'b': 2, 'c': 1 };
			*
			* _.invertBy(object);
			* // => { '1': ['a', 'c'], '2': ['b'] }
			*
			* _.invertBy(object, function(value) {
			*   return 'group' + value;
			* });
			* // => { 'group1': ['a', 'c'], 'group2': ['b'] }
			*/
			var invertBy = createInverter(function(result$1, value, key) {
				if (value != null && typeof value.toString != "function") value = nativeObjectToString.call(value);
				if (hasOwnProperty$5.call(result$1, value)) result$1[value].push(key);
				else result$1[value] = [key];
			}, getIteratee);
			/**
			* Invokes the method at `path` of `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The object to query.
			* @param {Array|string} path The path of the method to invoke.
			* @param {...*} [args] The arguments to invoke the method with.
			* @returns {*} Returns the result of the invoked method.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
			*
			* _.invoke(object, 'a[0].b.c.slice', 1, 3);
			* // => [2, 3]
			*/
			var invoke = baseRest(baseInvoke);
			/**
			* Creates an array of the own enumerable property names of `object`.
			*
			* **Note:** Non-object values are coerced to objects. See the
			* [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			* for more details.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.keys(new Foo);
			* // => ['a', 'b'] (iteration order is not guaranteed)
			*
			* _.keys('hi');
			* // => ['0', '1']
			*/
			function keys$1(object$2) {
				return isArrayLike(object$2) ? arrayLikeKeys(object$2) : baseKeys(object$2);
			}
			/**
			* Creates an array of the own and inherited enumerable property names of `object`.
			*
			* **Note:** Non-object values are coerced to objects.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property names.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.keysIn(new Foo);
			* // => ['a', 'b', 'c'] (iteration order is not guaranteed)
			*/
			function keysIn(object$2) {
				return isArrayLike(object$2) ? arrayLikeKeys(object$2, true) : baseKeysIn(object$2);
			}
			/**
			* The opposite of `_.mapValues`; this method creates an object with the
			* same values as `object` and keys generated by running each own enumerable
			* string keyed property of `object` thru `iteratee`. The iteratee is invoked
			* with three arguments: (value, key, object).
			*
			* @static
			* @memberOf _
			* @since 3.8.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns the new mapped object.
			* @see _.mapValues
			* @example
			*
			* _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
			*   return key + value;
			* });
			* // => { 'a1': 1, 'b2': 2 }
			*/
			function mapKeys(object$2, iteratee$1) {
				var result$1 = {};
				iteratee$1 = getIteratee(iteratee$1, 3);
				baseForOwn(object$2, function(value, key, object$3) {
					baseAssignValue(result$1, iteratee$1(value, key, object$3), value);
				});
				return result$1;
			}
			/**
			* Creates an object with the same keys as `object` and values generated
			* by running each own enumerable string keyed property of `object` thru
			* `iteratee`. The iteratee is invoked with three arguments:
			* (value, key, object).
			*
			* @static
			* @memberOf _
			* @since 2.4.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Object} Returns the new mapped object.
			* @see _.mapKeys
			* @example
			*
			* var users = {
			*   'fred':    { 'user': 'fred',    'age': 40 },
			*   'pebbles': { 'user': 'pebbles', 'age': 1 }
			* };
			*
			* _.mapValues(users, function(o) { return o.age; });
			* // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
			*
			* // The `_.property` iteratee shorthand.
			* _.mapValues(users, 'age');
			* // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
			*/
			function mapValues(object$2, iteratee$1) {
				var result$1 = {};
				iteratee$1 = getIteratee(iteratee$1, 3);
				baseForOwn(object$2, function(value, key, object$3) {
					baseAssignValue(result$1, key, iteratee$1(value, key, object$3));
				});
				return result$1;
			}
			/**
			* This method is like `_.assign` except that it recursively merges own and
			* inherited enumerable string keyed properties of source objects into the
			* destination object. Source properties that resolve to `undefined` are
			* skipped if a destination value exists. Array and plain object properties
			* are merged recursively. Other objects and value types are overridden by
			* assignment. Source objects are applied from left to right. Subsequent
			* sources overwrite property assignments of previous sources.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 0.5.0
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} [sources] The source objects.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var object = {
			*   'a': [{ 'b': 2 }, { 'd': 4 }]
			* };
			*
			* var other = {
			*   'a': [{ 'c': 3 }, { 'e': 5 }]
			* };
			*
			* _.merge(object, other);
			* // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
			*/
			var merge$5 = createAssigner(function(object$2, source, srcIndex) {
				baseMerge(object$2, source, srcIndex);
			});
			/**
			* This method is like `_.merge` except that it accepts `customizer` which
			* is invoked to produce the merged values of the destination and source
			* properties. If `customizer` returns `undefined`, merging is handled by the
			* method instead. The `customizer` is invoked with six arguments:
			* (objValue, srcValue, key, object, source, stack).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The destination object.
			* @param {...Object} sources The source objects.
			* @param {Function} customizer The function to customize assigned values.
			* @returns {Object} Returns `object`.
			* @example
			*
			* function customizer(objValue, srcValue) {
			*   if (_.isArray(objValue)) {
			*     return objValue.concat(srcValue);
			*   }
			* }
			*
			* var object = { 'a': [1], 'b': [2] };
			* var other = { 'a': [3], 'b': [4] };
			*
			* _.mergeWith(object, other, customizer);
			* // => { 'a': [1, 3], 'b': [2, 4] }
			*/
			var mergeWith = createAssigner(function(object$2, source, srcIndex, customizer) {
				baseMerge(object$2, source, srcIndex, customizer);
			});
			/**
			* The opposite of `_.pick`; this method creates an object composed of the
			* own and inherited enumerable property paths of `object` that are not omitted.
			*
			* **Note:** This method is considerably slower than `_.pick`.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The source object.
			* @param {...(string|string[])} [paths] The property paths to omit.
			* @returns {Object} Returns the new object.
			* @example
			*
			* var object = { 'a': 1, 'b': '2', 'c': 3 };
			*
			* _.omit(object, ['a', 'c']);
			* // => { 'b': '2' }
			*/
			var omit = flatRest(function(object$2, paths) {
				var result$1 = {};
				if (object$2 == null) return result$1;
				var isDeep = false;
				paths = arrayMap(paths, function(path$28) {
					path$28 = castPath(path$28, object$2);
					isDeep || (isDeep = path$28.length > 1);
					return path$28;
				});
				copyObject(object$2, getAllKeysIn(object$2), result$1);
				if (isDeep) result$1 = baseClone(result$1, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
				var length = paths.length;
				while (length--) baseUnset(result$1, paths[length]);
				return result$1;
			});
			/**
			* The opposite of `_.pickBy`; this method creates an object composed of
			* the own and inherited enumerable string keyed properties of `object` that
			* `predicate` doesn't return truthy for. The predicate is invoked with two
			* arguments: (value, key).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The source object.
			* @param {Function} [predicate=_.identity] The function invoked per property.
			* @returns {Object} Returns the new object.
			* @example
			*
			* var object = { 'a': 1, 'b': '2', 'c': 3 };
			*
			* _.omitBy(object, _.isNumber);
			* // => { 'b': '2' }
			*/
			function omitBy(object$2, predicate) {
				return pickBy(object$2, negate(getIteratee(predicate)));
			}
			/**
			* Creates an object composed of the picked `object` properties.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The source object.
			* @param {...(string|string[])} [paths] The property paths to pick.
			* @returns {Object} Returns the new object.
			* @example
			*
			* var object = { 'a': 1, 'b': '2', 'c': 3 };
			*
			* _.pick(object, ['a', 'c']);
			* // => { 'a': 1, 'c': 3 }
			*/
			var pick = flatRest(function(object$2, paths) {
				return object$2 == null ? {} : basePick(object$2, paths);
			});
			/**
			* Creates an object composed of the `object` properties `predicate` returns
			* truthy for. The predicate is invoked with two arguments: (value, key).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The source object.
			* @param {Function} [predicate=_.identity] The function invoked per property.
			* @returns {Object} Returns the new object.
			* @example
			*
			* var object = { 'a': 1, 'b': '2', 'c': 3 };
			*
			* _.pickBy(object, _.isNumber);
			* // => { 'a': 1, 'c': 3 }
			*/
			function pickBy(object$2, predicate) {
				if (object$2 == null) return {};
				var props = arrayMap(getAllKeysIn(object$2), function(prop) {
					return [prop];
				});
				predicate = getIteratee(predicate);
				return basePickBy(object$2, props, function(value, path$28) {
					return predicate(value, path$28[0]);
				});
			}
			/**
			* This method is like `_.get` except that if the resolved value is a
			* function it's invoked with the `this` binding of its parent object and
			* its result is returned.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The object to query.
			* @param {Array|string} path The path of the property to resolve.
			* @param {*} [defaultValue] The value returned for `undefined` resolved values.
			* @returns {*} Returns the resolved value.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
			*
			* _.result(object, 'a[0].b.c1');
			* // => 3
			*
			* _.result(object, 'a[0].b.c2');
			* // => 4
			*
			* _.result(object, 'a[0].b.c3', 'default');
			* // => 'default'
			*
			* _.result(object, 'a[0].b.c3', _.constant('default'));
			* // => 'default'
			*/
			function result(object$2, path$28, defaultValue) {
				path$28 = castPath(path$28, object$2);
				var index$1 = -1, length = path$28.length;
				if (!length) {
					length = 1;
					object$2 = undefined$1;
				}
				while (++index$1 < length) {
					var value = object$2 == null ? undefined$1 : object$2[toKey(path$28[index$1])];
					if (value === undefined$1) {
						index$1 = length;
						value = defaultValue;
					}
					object$2 = isFunction$10(value) ? value.call(object$2) : value;
				}
				return object$2;
			}
			/**
			* Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
			* it's created. Arrays are created for missing index properties while objects
			* are created for all other missing properties. Use `_.setWith` to customize
			* `path` creation.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 3.7.0
			* @category Object
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to set.
			* @param {*} value The value to set.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 3 } }] };
			*
			* _.set(object, 'a[0].b.c', 4);
			* console.log(object.a[0].b.c);
			* // => 4
			*
			* _.set(object, ['x', '0', 'y', 'z'], 5);
			* console.log(object.x[0].y.z);
			* // => 5
			*/
			function set(object$2, path$28, value) {
				return object$2 == null ? object$2 : baseSet(object$2, path$28, value);
			}
			/**
			* This method is like `_.set` except that it accepts `customizer` which is
			* invoked to produce the objects of `path`.  If `customizer` returns `undefined`
			* path creation is handled by the method instead. The `customizer` is invoked
			* with three arguments: (nsValue, key, nsObject).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to set.
			* @param {*} value The value to set.
			* @param {Function} [customizer] The function to customize assigned values.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var object = {};
			*
			* _.setWith(object, '[0][1]', 'a', Object);
			* // => { '0': { '1': 'a' } }
			*/
			function setWith(object$2, path$28, value, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				return object$2 == null ? object$2 : baseSet(object$2, path$28, value, customizer);
			}
			/**
			* Creates an array of own enumerable string keyed-value pairs for `object`
			* which can be consumed by `_.fromPairs`. If `object` is a map or set, its
			* entries are returned.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @alias entries
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the key-value pairs.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.toPairs(new Foo);
			* // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
			*/
			var toPairs = createToPairs(keys$1);
			/**
			* Creates an array of own and inherited enumerable string keyed-value pairs
			* for `object` which can be consumed by `_.fromPairs`. If `object` is a map
			* or set, its entries are returned.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @alias entriesIn
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the key-value pairs.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.toPairsIn(new Foo);
			* // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
			*/
			var toPairsIn = createToPairs(keysIn);
			/**
			* An alternative to `_.reduce`; this method transforms `object` to a new
			* `accumulator` object which is the result of running each of its own
			* enumerable string keyed properties thru `iteratee`, with each invocation
			* potentially mutating the `accumulator` object. If `accumulator` is not
			* provided, a new object with the same `[[Prototype]]` will be used. The
			* iteratee is invoked with four arguments: (accumulator, value, key, object).
			* Iteratee functions may exit iteration early by explicitly returning `false`.
			*
			* @static
			* @memberOf _
			* @since 1.3.0
			* @category Object
			* @param {Object} object The object to iterate over.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @param {*} [accumulator] The custom accumulator value.
			* @returns {*} Returns the accumulated value.
			* @example
			*
			* _.transform([2, 3, 4], function(result, n) {
			*   result.push(n *= n);
			*   return n % 2 == 0;
			* }, []);
			* // => [4, 9]
			*
			* _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
			*   (result[value] || (result[value] = [])).push(key);
			* }, {});
			* // => { '1': ['a', 'c'], '2': ['b'] }
			*/
			function transform$1(object$2, iteratee$1, accumulator) {
				var isArr = isArray$5(object$2), isArrLike = isArr || isBuffer$1(object$2) || isTypedArray(object$2);
				iteratee$1 = getIteratee(iteratee$1, 4);
				if (accumulator == null) {
					var Ctor = object$2 && object$2.constructor;
					if (isArrLike) accumulator = isArr ? new Ctor() : [];
					else if (isObject$5(object$2)) accumulator = isFunction$10(Ctor) ? baseCreate(getPrototype(object$2)) : {};
					else accumulator = {};
				}
				(isArrLike ? arrayEach : baseForOwn)(object$2, function(value, index$1, object$3) {
					return iteratee$1(accumulator, value, index$1, object$3);
				});
				return accumulator;
			}
			/**
			* Removes the property at `path` of `object`.
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Object
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to unset.
			* @returns {boolean} Returns `true` if the property is deleted, else `false`.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 7 } }] };
			* _.unset(object, 'a[0].b.c');
			* // => true
			*
			* console.log(object);
			* // => { 'a': [{ 'b': {} }] };
			*
			* _.unset(object, ['a', '0', 'b', 'c']);
			* // => true
			*
			* console.log(object);
			* // => { 'a': [{ 'b': {} }] };
			*/
			function unset(object$2, path$28) {
				return object$2 == null ? true : baseUnset(object$2, path$28);
			}
			/**
			* This method is like `_.set` except that accepts `updater` to produce the
			* value to set. Use `_.updateWith` to customize `path` creation. The `updater`
			* is invoked with one argument: (value).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.6.0
			* @category Object
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to set.
			* @param {Function} updater The function to produce the updated value.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var object = { 'a': [{ 'b': { 'c': 3 } }] };
			*
			* _.update(object, 'a[0].b.c', function(n) { return n * n; });
			* console.log(object.a[0].b.c);
			* // => 9
			*
			* _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
			* console.log(object.x[0].y.z);
			* // => 0
			*/
			function update(object$2, path$28, updater) {
				return object$2 == null ? object$2 : baseUpdate(object$2, path$28, castFunction(updater));
			}
			/**
			* This method is like `_.update` except that it accepts `customizer` which is
			* invoked to produce the objects of `path`.  If `customizer` returns `undefined`
			* path creation is handled by the method instead. The `customizer` is invoked
			* with three arguments: (nsValue, key, nsObject).
			*
			* **Note:** This method mutates `object`.
			*
			* @static
			* @memberOf _
			* @since 4.6.0
			* @category Object
			* @param {Object} object The object to modify.
			* @param {Array|string} path The path of the property to set.
			* @param {Function} updater The function to produce the updated value.
			* @param {Function} [customizer] The function to customize assigned values.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var object = {};
			*
			* _.updateWith(object, '[0][1]', _.constant('a'), Object);
			* // => { '0': { '1': 'a' } }
			*/
			function updateWith(object$2, path$28, updater, customizer) {
				customizer = typeof customizer == "function" ? customizer : undefined$1;
				return object$2 == null ? object$2 : baseUpdate(object$2, path$28, castFunction(updater), customizer);
			}
			/**
			* Creates an array of the own enumerable string keyed property values of `object`.
			*
			* **Note:** Non-object values are coerced to objects.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property values.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.values(new Foo);
			* // => [1, 2] (iteration order is not guaranteed)
			*
			* _.values('hi');
			* // => ['h', 'i']
			*/
			function values(object$2) {
				return object$2 == null ? [] : baseValues(object$2, keys$1(object$2));
			}
			/**
			* Creates an array of the own and inherited enumerable string keyed property
			* values of `object`.
			*
			* **Note:** Non-object values are coerced to objects.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Object
			* @param {Object} object The object to query.
			* @returns {Array} Returns the array of property values.
			* @example
			*
			* function Foo() {
			*   this.a = 1;
			*   this.b = 2;
			* }
			*
			* Foo.prototype.c = 3;
			*
			* _.valuesIn(new Foo);
			* // => [1, 2, 3] (iteration order is not guaranteed)
			*/
			function valuesIn(object$2) {
				return object$2 == null ? [] : baseValues(object$2, keysIn(object$2));
			}
			/**
			* Clamps `number` within the inclusive `lower` and `upper` bounds.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Number
			* @param {number} number The number to clamp.
			* @param {number} [lower] The lower bound.
			* @param {number} upper The upper bound.
			* @returns {number} Returns the clamped number.
			* @example
			*
			* _.clamp(-10, -5, 5);
			* // => -5
			*
			* _.clamp(10, -5, 5);
			* // => 5
			*/
			function clamp(number, lower, upper) {
				if (upper === undefined$1) {
					upper = lower;
					lower = undefined$1;
				}
				if (upper !== undefined$1) {
					upper = toNumber$1(upper);
					upper = upper === upper ? upper : 0;
				}
				if (lower !== undefined$1) {
					lower = toNumber$1(lower);
					lower = lower === lower ? lower : 0;
				}
				return baseClamp(toNumber$1(number), lower, upper);
			}
			/**
			* Checks if `n` is between `start` and up to, but not including, `end`. If
			* `end` is not specified, it's set to `start` with `start` then set to `0`.
			* If `start` is greater than `end` the params are swapped to support
			* negative ranges.
			*
			* @static
			* @memberOf _
			* @since 3.3.0
			* @category Number
			* @param {number} number The number to check.
			* @param {number} [start=0] The start of the range.
			* @param {number} end The end of the range.
			* @returns {boolean} Returns `true` if `number` is in the range, else `false`.
			* @see _.range, _.rangeRight
			* @example
			*
			* _.inRange(3, 2, 4);
			* // => true
			*
			* _.inRange(4, 8);
			* // => true
			*
			* _.inRange(4, 2);
			* // => false
			*
			* _.inRange(2, 2);
			* // => false
			*
			* _.inRange(1.2, 2);
			* // => true
			*
			* _.inRange(5.2, 4);
			* // => false
			*
			* _.inRange(-3, -2, -6);
			* // => true
			*/
			function inRange(number, start, end) {
				start = toFinite(start);
				if (end === undefined$1) {
					end = start;
					start = 0;
				} else end = toFinite(end);
				number = toNumber$1(number);
				return baseInRange(number, start, end);
			}
			/**
			* Produces a random number between the inclusive `lower` and `upper` bounds.
			* If only one argument is provided a number between `0` and the given number
			* is returned. If `floating` is `true`, or either `lower` or `upper` are
			* floats, a floating-point number is returned instead of an integer.
			*
			* **Note:** JavaScript follows the IEEE-754 standard for resolving
			* floating-point values which can produce unexpected results.
			*
			* @static
			* @memberOf _
			* @since 0.7.0
			* @category Number
			* @param {number} [lower=0] The lower bound.
			* @param {number} [upper=1] The upper bound.
			* @param {boolean} [floating] Specify returning a floating-point number.
			* @returns {number} Returns the random number.
			* @example
			*
			* _.random(0, 5);
			* // => an integer between 0 and 5
			*
			* _.random(5);
			* // => also an integer between 0 and 5
			*
			* _.random(5, true);
			* // => a floating-point number between 0 and 5
			*
			* _.random(1.2, 5.2);
			* // => a floating-point number between 1.2 and 5.2
			*/
			function random(lower, upper, floating) {
				if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) upper = floating = undefined$1;
				if (floating === undefined$1) {
					if (typeof upper == "boolean") {
						floating = upper;
						upper = undefined$1;
					} else if (typeof lower == "boolean") {
						floating = lower;
						lower = undefined$1;
					}
				}
				if (lower === undefined$1 && upper === undefined$1) {
					lower = 0;
					upper = 1;
				} else {
					lower = toFinite(lower);
					if (upper === undefined$1) {
						upper = lower;
						lower = 0;
					} else upper = toFinite(upper);
				}
				if (lower > upper) {
					var temp = lower;
					lower = upper;
					upper = temp;
				}
				if (floating || lower % 1 || upper % 1) {
					var rand = nativeRandom();
					return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
				}
				return baseRandom(lower, upper);
			}
			/**
			* Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the camel cased string.
			* @example
			*
			* _.camelCase('Foo Bar');
			* // => 'fooBar'
			*
			* _.camelCase('--foo-bar--');
			* // => 'fooBar'
			*
			* _.camelCase('__FOO_BAR__');
			* // => 'fooBar'
			*/
			var camelCase$2 = createCompounder$1(function(result$1, word$3, index$1) {
				word$3 = word$3.toLowerCase();
				return result$1 + (index$1 ? capitalize$3(word$3) : word$3);
			});
			/**
			* Converts the first character of `string` to upper case and the remaining
			* to lower case.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to capitalize.
			* @returns {string} Returns the capitalized string.
			* @example
			*
			* _.capitalize('FRED');
			* // => 'Fred'
			*/
			function capitalize$3(string$3) {
				return upperFirst$1(toString$5(string$3).toLowerCase());
			}
			/**
			* Deburrs `string` by converting
			* [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
			* and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
			* letters to basic Latin letters and removing
			* [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to deburr.
			* @returns {string} Returns the deburred string.
			* @example
			*
			* _.deburr('déjà vu');
			* // => 'deja vu'
			*/
			function deburr$1(string$3) {
				string$3 = toString$5(string$3);
				return string$3 && string$3.replace(reLatin$1, deburrLetter$1).replace(reComboMark$1, "");
			}
			/**
			* Checks if `string` ends with the given target string.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to inspect.
			* @param {string} [target] The string to search for.
			* @param {number} [position=string.length] The position to search up to.
			* @returns {boolean} Returns `true` if `string` ends with `target`,
			*  else `false`.
			* @example
			*
			* _.endsWith('abc', 'c');
			* // => true
			*
			* _.endsWith('abc', 'b');
			* // => false
			*
			* _.endsWith('abc', 'b', 2);
			* // => true
			*/
			function endsWith(string$3, target, position) {
				string$3 = toString$5(string$3);
				target = baseToString$1(target);
				var length = string$3.length;
				position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);
				var end = position;
				position -= target.length;
				return position >= 0 && string$3.slice(position, end) == target;
			}
			/**
			* Converts the characters "&", "<", ">", '"', and "'" in `string` to their
			* corresponding HTML entities.
			*
			* **Note:** No other characters are escaped. To escape additional
			* characters use a third-party library like [_he_](https://mths.be/he).
			*
			* Though the ">" character is escaped for symmetry, characters like
			* ">" and "/" don't need escaping in HTML and have no special meaning
			* unless they're part of a tag or unquoted attribute value. See
			* [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
			* (under "semi-related fun fact") for more details.
			*
			* When working with HTML you should always
			* [quote attribute values](http://wonko.com/post/html-escaping) to reduce
			* XSS vectors.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category String
			* @param {string} [string=''] The string to escape.
			* @returns {string} Returns the escaped string.
			* @example
			*
			* _.escape('fred, barney, & pebbles');
			* // => 'fred, barney, &amp; pebbles'
			*/
			function escape$2(string$3) {
				string$3 = toString$5(string$3);
				return string$3 && reHasUnescapedHtml.test(string$3) ? string$3.replace(reUnescapedHtml, escapeHtmlChar) : string$3;
			}
			/**
			* Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
			* "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to escape.
			* @returns {string} Returns the escaped string.
			* @example
			*
			* _.escapeRegExp('[lodash](https://lodash.com/)');
			* // => '\[lodash\]\(https://lodash\.com/\)'
			*/
			function escapeRegExp(string$3) {
				string$3 = toString$5(string$3);
				return string$3 && reHasRegExpChar.test(string$3) ? string$3.replace(reRegExpChar, "\\$&") : string$3;
			}
			/**
			* Converts `string` to
			* [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the kebab cased string.
			* @example
			*
			* _.kebabCase('Foo Bar');
			* // => 'foo-bar'
			*
			* _.kebabCase('fooBar');
			* // => 'foo-bar'
			*
			* _.kebabCase('__FOO_BAR__');
			* // => 'foo-bar'
			*/
			var kebabCase$1 = createCompounder$1(function(result$1, word$3, index$1) {
				return result$1 + (index$1 ? "-" : "") + word$3.toLowerCase();
			});
			/**
			* Converts `string`, as space separated words, to lower case.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the lower cased string.
			* @example
			*
			* _.lowerCase('--Foo-Bar--');
			* // => 'foo bar'
			*
			* _.lowerCase('fooBar');
			* // => 'foo bar'
			*
			* _.lowerCase('__FOO_BAR__');
			* // => 'foo bar'
			*/
			var lowerCase = createCompounder$1(function(result$1, word$3, index$1) {
				return result$1 + (index$1 ? " " : "") + word$3.toLowerCase();
			});
			/**
			* Converts the first character of `string` to lower case.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the converted string.
			* @example
			*
			* _.lowerFirst('Fred');
			* // => 'fred'
			*
			* _.lowerFirst('FRED');
			* // => 'fRED'
			*/
			var lowerFirst = createCaseFirst$1("toLowerCase");
			/**
			* Pads `string` on the left and right sides if it's shorter than `length`.
			* Padding characters are truncated if they can't be evenly divided by `length`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to pad.
			* @param {number} [length=0] The padding length.
			* @param {string} [chars=' '] The string used as padding.
			* @returns {string} Returns the padded string.
			* @example
			*
			* _.pad('abc', 8);
			* // => '  abc   '
			*
			* _.pad('abc', 8, '_-');
			* // => '_-abc_-_'
			*
			* _.pad('abc', 3);
			* // => 'abc'
			*/
			function pad$1(string$3, length, chars) {
				string$3 = toString$5(string$3);
				length = toInteger(length);
				var strLength = length ? stringSize(string$3) : 0;
				if (!length || strLength >= length) return string$3;
				var mid = (length - strLength) / 2;
				return createPadding(nativeFloor(mid), chars) + string$3 + createPadding(nativeCeil(mid), chars);
			}
			/**
			* Pads `string` on the right side if it's shorter than `length`. Padding
			* characters are truncated if they exceed `length`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to pad.
			* @param {number} [length=0] The padding length.
			* @param {string} [chars=' '] The string used as padding.
			* @returns {string} Returns the padded string.
			* @example
			*
			* _.padEnd('abc', 6);
			* // => 'abc   '
			*
			* _.padEnd('abc', 6, '_-');
			* // => 'abc_-_'
			*
			* _.padEnd('abc', 3);
			* // => 'abc'
			*/
			function padEnd(string$3, length, chars) {
				string$3 = toString$5(string$3);
				length = toInteger(length);
				var strLength = length ? stringSize(string$3) : 0;
				return length && strLength < length ? string$3 + createPadding(length - strLength, chars) : string$3;
			}
			/**
			* Pads `string` on the left side if it's shorter than `length`. Padding
			* characters are truncated if they exceed `length`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to pad.
			* @param {number} [length=0] The padding length.
			* @param {string} [chars=' '] The string used as padding.
			* @returns {string} Returns the padded string.
			* @example
			*
			* _.padStart('abc', 6);
			* // => '   abc'
			*
			* _.padStart('abc', 6, '_-');
			* // => '_-_abc'
			*
			* _.padStart('abc', 3);
			* // => 'abc'
			*/
			function padStart(string$3, length, chars) {
				string$3 = toString$5(string$3);
				length = toInteger(length);
				var strLength = length ? stringSize(string$3) : 0;
				return length && strLength < length ? createPadding(length - strLength, chars) + string$3 : string$3;
			}
			/**
			* Converts `string` to an integer of the specified radix. If `radix` is
			* `undefined` or `0`, a `radix` of `10` is used unless `value` is a
			* hexadecimal, in which case a `radix` of `16` is used.
			*
			* **Note:** This method aligns with the
			* [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
			*
			* @static
			* @memberOf _
			* @since 1.1.0
			* @category String
			* @param {string} string The string to convert.
			* @param {number} [radix=10] The radix to interpret `value` by.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {number} Returns the converted integer.
			* @example
			*
			* _.parseInt('08');
			* // => 8
			*
			* _.map(['6', '08', '10'], _.parseInt);
			* // => [6, 8, 10]
			*/
			function parseInt$1(string$3, radix, guard) {
				if (guard || radix == null) radix = 0;
				else if (radix) radix = +radix;
				return nativeParseInt(toString$5(string$3).replace(reTrimStart, ""), radix || 0);
			}
			/**
			* Repeats the given string `n` times.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to repeat.
			* @param {number} [n=1] The number of times to repeat the string.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {string} Returns the repeated string.
			* @example
			*
			* _.repeat('*', 3);
			* // => '***'
			*
			* _.repeat('abc', 2);
			* // => 'abcabc'
			*
			* _.repeat('abc', 0);
			* // => ''
			*/
			function repeat(string$3, n$4, guard) {
				if (guard ? isIterateeCall(string$3, n$4, guard) : n$4 === undefined$1) n$4 = 1;
				else n$4 = toInteger(n$4);
				return baseRepeat(toString$5(string$3), n$4);
			}
			/**
			* Replaces matches for `pattern` in `string` with `replacement`.
			*
			* **Note:** This method is based on
			* [`String#replace`](https://mdn.io/String/replace).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to modify.
			* @param {RegExp|string} pattern The pattern to replace.
			* @param {Function|string} replacement The match replacement.
			* @returns {string} Returns the modified string.
			* @example
			*
			* _.replace('Hi Fred', 'Fred', 'Barney');
			* // => 'Hi Barney'
			*/
			function replace() {
				var args = arguments, string$3 = toString$5(args[0]);
				return args.length < 3 ? string$3 : string$3.replace(args[1], args[2]);
			}
			/**
			* Converts `string` to
			* [snake case](https://en.wikipedia.org/wiki/Snake_case).
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the snake cased string.
			* @example
			*
			* _.snakeCase('Foo Bar');
			* // => 'foo_bar'
			*
			* _.snakeCase('fooBar');
			* // => 'foo_bar'
			*
			* _.snakeCase('--FOO-BAR--');
			* // => 'foo_bar'
			*/
			var snakeCase = createCompounder$1(function(result$1, word$3, index$1) {
				return result$1 + (index$1 ? "_" : "") + word$3.toLowerCase();
			});
			/**
			* Splits `string` by `separator`.
			*
			* **Note:** This method is based on
			* [`String#split`](https://mdn.io/String/split).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to split.
			* @param {RegExp|string} separator The separator pattern to split by.
			* @param {number} [limit] The length to truncate results to.
			* @returns {Array} Returns the string segments.
			* @example
			*
			* _.split('a-b-c', '-', 2);
			* // => ['a', 'b']
			*/
			function split(string$3, separator, limit) {
				if (limit && typeof limit != "number" && isIterateeCall(string$3, separator, limit)) separator = limit = undefined$1;
				limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
				if (!limit) return [];
				string$3 = toString$5(string$3);
				if (string$3 && (typeof separator == "string" || separator != null && !isRegExp$1(separator))) {
					separator = baseToString$1(separator);
					if (!separator && hasUnicode$1(string$3)) return castSlice$1(stringToArray$1(string$3), 0, limit);
				}
				return string$3.split(separator, limit);
			}
			/**
			* Converts `string` to
			* [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
			*
			* @static
			* @memberOf _
			* @since 3.1.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the start cased string.
			* @example
			*
			* _.startCase('--foo-bar--');
			* // => 'Foo Bar'
			*
			* _.startCase('fooBar');
			* // => 'Foo Bar'
			*
			* _.startCase('__FOO_BAR__');
			* // => 'FOO BAR'
			*/
			var startCase = createCompounder$1(function(result$1, word$3, index$1) {
				return result$1 + (index$1 ? " " : "") + upperFirst$1(word$3);
			});
			/**
			* Checks if `string` starts with the given target string.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to inspect.
			* @param {string} [target] The string to search for.
			* @param {number} [position=0] The position to search from.
			* @returns {boolean} Returns `true` if `string` starts with `target`,
			*  else `false`.
			* @example
			*
			* _.startsWith('abc', 'a');
			* // => true
			*
			* _.startsWith('abc', 'b');
			* // => false
			*
			* _.startsWith('abc', 'b', 1);
			* // => true
			*/
			function startsWith$1(string$3, target, position) {
				string$3 = toString$5(string$3);
				position = position == null ? 0 : baseClamp(toInteger(position), 0, string$3.length);
				target = baseToString$1(target);
				return string$3.slice(position, position + target.length) == target;
			}
			/**
			* Creates a compiled template function that can interpolate data properties
			* in "interpolate" delimiters, HTML-escape interpolated data properties in
			* "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
			* properties may be accessed as free variables in the template. If a setting
			* object is given, it takes precedence over `_.templateSettings` values.
			*
			* **Note:** In the development build `_.template` utilizes
			* [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
			* for easier debugging.
			*
			* For more information on precompiling templates see
			* [lodash's custom builds documentation](https://lodash.com/custom-builds).
			*
			* For more information on Chrome extension sandboxes see
			* [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category String
			* @param {string} [string=''] The template string.
			* @param {Object} [options={}] The options object.
			* @param {RegExp} [options.escape=_.templateSettings.escape]
			*  The HTML "escape" delimiter.
			* @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
			*  The "evaluate" delimiter.
			* @param {Object} [options.imports=_.templateSettings.imports]
			*  An object to import into the template as free variables.
			* @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
			*  The "interpolate" delimiter.
			* @param {string} [options.sourceURL='lodash.templateSources[n]']
			*  The sourceURL of the compiled template.
			* @param {string} [options.variable='obj']
			*  The data object variable name.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Function} Returns the compiled template function.
			* @example
			*
			* // Use the "interpolate" delimiter to create a compiled template.
			* var compiled = _.template('hello <%= user %>!');
			* compiled({ 'user': 'fred' });
			* // => 'hello fred!'
			*
			* // Use the HTML "escape" delimiter to escape data property values.
			* var compiled = _.template('<b><%- value %></b>');
			* compiled({ 'value': '<script>' });
			* // => '<b>&lt;script&gt;</b>'
			*
			* // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
			* var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
			* compiled({ 'users': ['fred', 'barney'] });
			* // => '<li>fred</li><li>barney</li>'
			*
			* // Use the internal `print` function in "evaluate" delimiters.
			* var compiled = _.template('<% print("hello " + user); %>!');
			* compiled({ 'user': 'barney' });
			* // => 'hello barney!'
			*
			* // Use the ES template literal delimiter as an "interpolate" delimiter.
			* // Disable support by replacing the "interpolate" delimiter.
			* var compiled = _.template('hello ${ user }!');
			* compiled({ 'user': 'pebbles' });
			* // => 'hello pebbles!'
			*
			* // Use backslashes to treat delimiters as plain text.
			* var compiled = _.template('<%= "\\<%- value %\\>" %>');
			* compiled({ 'value': 'ignored' });
			* // => '<%- value %>'
			*
			* // Use the `imports` option to import `jQuery` as `jq`.
			* var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
			* var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
			* compiled({ 'users': ['fred', 'barney'] });
			* // => '<li>fred</li><li>barney</li>'
			*
			* // Use the `sourceURL` option to specify a custom sourceURL for the template.
			* var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
			* compiled(data);
			* // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
			*
			* // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
			* var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
			* compiled.source;
			* // => function(data) {
			* //   var __t, __p = '';
			* //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
			* //   return __p;
			* // }
			*
			* // Use custom template delimiters.
			* _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
			* var compiled = _.template('hello {{ user }}!');
			* compiled({ 'user': 'mustache' });
			* // => 'hello mustache!'
			*
			* // Use the `source` property to inline compiled templates for meaningful
			* // line numbers in error messages and stack traces.
			* fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
			*   var JST = {\
			*     "main": ' + _.template(mainText).source + '\
			*   };\
			* ');
			*/
			function template$1(string$3, options, guard) {
				var settings = lodash.templateSettings;
				if (guard && isIterateeCall(string$3, options, guard)) options = undefined$1;
				string$3 = toString$5(string$3);
				options = assignInWith({}, options, settings, customDefaultsAssignIn);
				var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys$1(imports), importsValues = baseValues(imports, importsKeys);
				var isEscaping, isEvaluating, index$1 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
				var reDelimiters = RegExp$1((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
				var sourceURL = "//# sourceURL=" + (hasOwnProperty$5.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
				string$3.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
					interpolateValue || (interpolateValue = esTemplateValue);
					source += string$3.slice(index$1, offset).replace(reUnescapedString, escapeStringChar);
					if (escapeValue) {
						isEscaping = true;
						source += "' +\n__e(" + escapeValue + ") +\n'";
					}
					if (evaluateValue) {
						isEvaluating = true;
						source += "';\n" + evaluateValue + ";\n__p += '";
					}
					if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
					index$1 = offset + match.length;
					return match;
				});
				source += "';\n";
				var variable = hasOwnProperty$5.call(options, "variable") && options.variable;
				if (!variable) source = "with (obj) {\n" + source + "\n}\n";
				else if (reForbiddenIdentifierChars.test(variable)) throw new Error$1(INVALID_TEMPL_VAR_ERROR_TEXT);
				source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
				source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
				var result$1 = attempt(function() {
					return Function$1(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
				});
				result$1.source = source;
				if (isError$1(result$1)) throw result$1;
				return result$1;
			}
			/**
			* Converts `string`, as a whole, to lower case just like
			* [String#toLowerCase](https://mdn.io/toLowerCase).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the lower cased string.
			* @example
			*
			* _.toLower('--Foo-Bar--');
			* // => '--foo-bar--'
			*
			* _.toLower('fooBar');
			* // => 'foobar'
			*
			* _.toLower('__FOO_BAR__');
			* // => '__foo_bar__'
			*/
			function toLower(value) {
				return toString$5(value).toLowerCase();
			}
			/**
			* Converts `string`, as a whole, to upper case just like
			* [String#toUpperCase](https://mdn.io/toUpperCase).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the upper cased string.
			* @example
			*
			* _.toUpper('--foo-bar--');
			* // => '--FOO-BAR--'
			*
			* _.toUpper('fooBar');
			* // => 'FOOBAR'
			*
			* _.toUpper('__foo_bar__');
			* // => '__FOO_BAR__'
			*/
			function toUpper(value) {
				return toString$5(value).toUpperCase();
			}
			/**
			* Removes leading and trailing whitespace or specified characters from `string`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to trim.
			* @param {string} [chars=whitespace] The characters to trim.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {string} Returns the trimmed string.
			* @example
			*
			* _.trim('  abc  ');
			* // => 'abc'
			*
			* _.trim('-_-abc-_-', '_-');
			* // => 'abc'
			*
			* _.map(['  foo  ', '  bar  '], _.trim);
			* // => ['foo', 'bar']
			*/
			function trim$1(string$3, chars, guard) {
				string$3 = toString$5(string$3);
				if (string$3 && (guard || chars === undefined$1)) return baseTrim(string$3);
				if (!string$3 || !(chars = baseToString$1(chars))) return string$3;
				var strSymbols = stringToArray$1(string$3), chrSymbols = stringToArray$1(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
				return castSlice$1(strSymbols, start, end).join("");
			}
			/**
			* Removes trailing whitespace or specified characters from `string`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to trim.
			* @param {string} [chars=whitespace] The characters to trim.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {string} Returns the trimmed string.
			* @example
			*
			* _.trimEnd('  abc  ');
			* // => '  abc'
			*
			* _.trimEnd('-_-abc-_-', '_-');
			* // => '-_-abc'
			*/
			function trimEnd(string$3, chars, guard) {
				string$3 = toString$5(string$3);
				if (string$3 && (guard || chars === undefined$1)) return string$3.slice(0, trimmedEndIndex(string$3) + 1);
				if (!string$3 || !(chars = baseToString$1(chars))) return string$3;
				var strSymbols = stringToArray$1(string$3), end = charsEndIndex(strSymbols, stringToArray$1(chars)) + 1;
				return castSlice$1(strSymbols, 0, end).join("");
			}
			/**
			* Removes leading whitespace or specified characters from `string`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to trim.
			* @param {string} [chars=whitespace] The characters to trim.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {string} Returns the trimmed string.
			* @example
			*
			* _.trimStart('  abc  ');
			* // => 'abc  '
			*
			* _.trimStart('-_-abc-_-', '_-');
			* // => 'abc-_-'
			*/
			function trimStart(string$3, chars, guard) {
				string$3 = toString$5(string$3);
				if (string$3 && (guard || chars === undefined$1)) return string$3.replace(reTrimStart, "");
				if (!string$3 || !(chars = baseToString$1(chars))) return string$3;
				var strSymbols = stringToArray$1(string$3), start = charsStartIndex(strSymbols, stringToArray$1(chars));
				return castSlice$1(strSymbols, start).join("");
			}
			/**
			* Truncates `string` if it's longer than the given maximum string length.
			* The last characters of the truncated string are replaced with the omission
			* string which defaults to "...".
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to truncate.
			* @param {Object} [options={}] The options object.
			* @param {number} [options.length=30] The maximum string length.
			* @param {string} [options.omission='...'] The string to indicate text is omitted.
			* @param {RegExp|string} [options.separator] The separator pattern to truncate to.
			* @returns {string} Returns the truncated string.
			* @example
			*
			* _.truncate('hi-diddly-ho there, neighborino');
			* // => 'hi-diddly-ho there, neighbo...'
			*
			* _.truncate('hi-diddly-ho there, neighborino', {
			*   'length': 24,
			*   'separator': ' '
			* });
			* // => 'hi-diddly-ho there,...'
			*
			* _.truncate('hi-diddly-ho there, neighborino', {
			*   'length': 24,
			*   'separator': /,? +/
			* });
			* // => 'hi-diddly-ho there...'
			*
			* _.truncate('hi-diddly-ho there, neighborino', {
			*   'omission': ' [...]'
			* });
			* // => 'hi-diddly-ho there, neig [...]'
			*/
			function truncate(string$3, options) {
				var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
				if (isObject$5(options)) {
					var separator = "separator" in options ? options.separator : separator;
					length = "length" in options ? toInteger(options.length) : length;
					omission = "omission" in options ? baseToString$1(options.omission) : omission;
				}
				string$3 = toString$5(string$3);
				var strLength = string$3.length;
				if (hasUnicode$1(string$3)) {
					var strSymbols = stringToArray$1(string$3);
					strLength = strSymbols.length;
				}
				if (length >= strLength) return string$3;
				var end = length - stringSize(omission);
				if (end < 1) return omission;
				var result$1 = strSymbols ? castSlice$1(strSymbols, 0, end).join("") : string$3.slice(0, end);
				if (separator === undefined$1) return result$1 + omission;
				if (strSymbols) end += result$1.length - end;
				if (isRegExp$1(separator)) {
					if (string$3.slice(end).search(separator)) {
						var match, substring = result$1;
						if (!separator.global) separator = RegExp$1(separator.source, toString$5(reFlags.exec(separator)) + "g");
						separator.lastIndex = 0;
						while (match = separator.exec(substring)) var newEnd = match.index;
						result$1 = result$1.slice(0, newEnd === undefined$1 ? end : newEnd);
					}
				} else if (string$3.indexOf(baseToString$1(separator), end) != end) {
					var index$1 = result$1.lastIndexOf(separator);
					if (index$1 > -1) result$1 = result$1.slice(0, index$1);
				}
				return result$1 + omission;
			}
			/**
			* The inverse of `_.escape`; this method converts the HTML entities
			* `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
			* their corresponding characters.
			*
			* **Note:** No other HTML entities are unescaped. To unescape additional
			* HTML entities use a third-party library like [_he_](https://mths.be/he).
			*
			* @static
			* @memberOf _
			* @since 0.6.0
			* @category String
			* @param {string} [string=''] The string to unescape.
			* @returns {string} Returns the unescaped string.
			* @example
			*
			* _.unescape('fred, barney, &amp; pebbles');
			* // => 'fred, barney, & pebbles'
			*/
			function unescape$2(string$3) {
				string$3 = toString$5(string$3);
				return string$3 && reHasEscapedHtml.test(string$3) ? string$3.replace(reEscapedHtml, unescapeHtmlChar) : string$3;
			}
			/**
			* Converts `string`, as space separated words, to upper case.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the upper cased string.
			* @example
			*
			* _.upperCase('--foo-bar');
			* // => 'FOO BAR'
			*
			* _.upperCase('fooBar');
			* // => 'FOO BAR'
			*
			* _.upperCase('__foo_bar__');
			* // => 'FOO BAR'
			*/
			var upperCase = createCompounder$1(function(result$1, word$3, index$1) {
				return result$1 + (index$1 ? " " : "") + word$3.toUpperCase();
			});
			/**
			* Converts the first character of `string` to upper case.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category String
			* @param {string} [string=''] The string to convert.
			* @returns {string} Returns the converted string.
			* @example
			*
			* _.upperFirst('fred');
			* // => 'Fred'
			*
			* _.upperFirst('FRED');
			* // => 'FRED'
			*/
			var upperFirst$1 = createCaseFirst$1("toUpperCase");
			/**
			* Splits `string` into an array of its words.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category String
			* @param {string} [string=''] The string to inspect.
			* @param {RegExp|string} [pattern] The pattern to match words.
			* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
			* @returns {Array} Returns the words of `string`.
			* @example
			*
			* _.words('fred, barney, & pebbles');
			* // => ['fred', 'barney', 'pebbles']
			*
			* _.words('fred, barney, & pebbles', /[^, ]+/g);
			* // => ['fred', 'barney', '&', 'pebbles']
			*/
			function words$1(string$3, pattern, guard) {
				string$3 = toString$5(string$3);
				pattern = guard ? undefined$1 : pattern;
				if (pattern === undefined$1) return hasUnicodeWord$1(string$3) ? unicodeWords$1(string$3) : asciiWords$1(string$3);
				return string$3.match(pattern) || [];
			}
			/**
			* Attempts to invoke `func`, returning either the result or the caught error
			* object. Any additional arguments are provided to `func` when it's invoked.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Util
			* @param {Function} func The function to attempt.
			* @param {...*} [args] The arguments to invoke `func` with.
			* @returns {*} Returns the `func` result or error object.
			* @example
			*
			* // Avoid throwing errors for invalid selectors.
			* var elements = _.attempt(function(selector) {
			*   return document.querySelectorAll(selector);
			* }, '>_>');
			*
			* if (_.isError(elements)) {
			*   elements = [];
			* }
			*/
			var attempt = baseRest(function(func, args) {
				try {
					return apply(func, undefined$1, args);
				} catch (e$2) {
					return isError$1(e$2) ? e$2 : new Error$1(e$2);
				}
			});
			/**
			* Binds methods of an object to the object itself, overwriting the existing
			* method.
			*
			* **Note:** This method doesn't set the "length" property of bound functions.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {Object} object The object to bind and assign the bound methods to.
			* @param {...(string|string[])} methodNames The object method names to bind.
			* @returns {Object} Returns `object`.
			* @example
			*
			* var view = {
			*   'label': 'docs',
			*   'click': function() {
			*     console.log('clicked ' + this.label);
			*   }
			* };
			*
			* _.bindAll(view, ['click']);
			* jQuery(element).on('click', view.click);
			* // => Logs 'clicked docs' when clicked.
			*/
			var bindAll = flatRest(function(object$2, methodNames) {
				arrayEach(methodNames, function(key) {
					key = toKey(key);
					baseAssignValue(object$2, key, bind$1(object$2[key], object$2));
				});
				return object$2;
			});
			/**
			* Creates a function that iterates over `pairs` and invokes the corresponding
			* function of the first predicate to return truthy. The predicate-function
			* pairs are invoked with the `this` binding and arguments of the created
			* function.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {Array} pairs The predicate-function pairs.
			* @returns {Function} Returns the new composite function.
			* @example
			*
			* var func = _.cond([
			*   [_.matches({ 'a': 1 }),           _.constant('matches A')],
			*   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
			*   [_.stubTrue,                      _.constant('no match')]
			* ]);
			*
			* func({ 'a': 1, 'b': 2 });
			* // => 'matches A'
			*
			* func({ 'a': 0, 'b': 1 });
			* // => 'matches B'
			*
			* func({ 'a': '1', 'b': '2' });
			* // => 'no match'
			*/
			function cond(pairs) {
				var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
				pairs = !length ? [] : arrayMap(pairs, function(pair) {
					if (typeof pair[1] != "function") throw new TypeError$1(FUNC_ERROR_TEXT);
					return [toIteratee(pair[0]), pair[1]];
				});
				return baseRest(function(args) {
					var index$1 = -1;
					while (++index$1 < length) {
						var pair = pairs[index$1];
						if (apply(pair[0], this, args)) return apply(pair[1], this, args);
					}
				});
			}
			/**
			* Creates a function that invokes the predicate properties of `source` with
			* the corresponding property values of a given object, returning `true` if
			* all predicates return truthy, else `false`.
			*
			* **Note:** The created function is equivalent to `_.conformsTo` with
			* `source` partially applied.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {Object} source The object of property predicates to conform to.
			* @returns {Function} Returns the new spec function.
			* @example
			*
			* var objects = [
			*   { 'a': 2, 'b': 1 },
			*   { 'a': 1, 'b': 2 }
			* ];
			*
			* _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
			* // => [{ 'a': 1, 'b': 2 }]
			*/
			function conforms(source) {
				return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
			}
			/**
			* Creates a function that returns `value`.
			*
			* @static
			* @memberOf _
			* @since 2.4.0
			* @category Util
			* @param {*} value The value to return from the new function.
			* @returns {Function} Returns the new constant function.
			* @example
			*
			* var objects = _.times(2, _.constant({ 'a': 1 }));
			*
			* console.log(objects);
			* // => [{ 'a': 1 }, { 'a': 1 }]
			*
			* console.log(objects[0] === objects[1]);
			* // => true
			*/
			function constant(value) {
				return function() {
					return value;
				};
			}
			/**
			* Checks `value` to determine whether a default value should be returned in
			* its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
			* or `undefined`.
			*
			* @static
			* @memberOf _
			* @since 4.14.0
			* @category Util
			* @param {*} value The value to check.
			* @param {*} defaultValue The default value.
			* @returns {*} Returns the resolved value.
			* @example
			*
			* _.defaultTo(1, 10);
			* // => 1
			*
			* _.defaultTo(undefined, 10);
			* // => 10
			*/
			function defaultTo(value, defaultValue) {
				return value == null || value !== value ? defaultValue : value;
			}
			/**
			* Creates a function that returns the result of invoking the given functions
			* with the `this` binding of the created function, where each successive
			* invocation is supplied the return value of the previous.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Util
			* @param {...(Function|Function[])} [funcs] The functions to invoke.
			* @returns {Function} Returns the new composite function.
			* @see _.flowRight
			* @example
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* var addSquare = _.flow([_.add, square]);
			* addSquare(1, 2);
			* // => 9
			*/
			var flow$1 = createFlow();
			/**
			* This method is like `_.flow` except that it creates a function that
			* invokes the given functions from right to left.
			*
			* @static
			* @since 3.0.0
			* @memberOf _
			* @category Util
			* @param {...(Function|Function[])} [funcs] The functions to invoke.
			* @returns {Function} Returns the new composite function.
			* @see _.flow
			* @example
			*
			* function square(n) {
			*   return n * n;
			* }
			*
			* var addSquare = _.flowRight([square, _.add]);
			* addSquare(1, 2);
			* // => 9
			*/
			var flowRight = createFlow(true);
			/**
			* This method returns the first argument it receives.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {*} value Any value.
			* @returns {*} Returns `value`.
			* @example
			*
			* var object = { 'a': 1 };
			*
			* console.log(_.identity(object) === object);
			* // => true
			*/
			function identity$2(value) {
				return value;
			}
			/**
			* Creates a function that invokes `func` with the arguments of the created
			* function. If `func` is a property name, the created function returns the
			* property value for a given element. If `func` is an array or object, the
			* created function returns `true` for elements that contain the equivalent
			* source properties, otherwise it returns `false`.
			*
			* @static
			* @since 4.0.0
			* @memberOf _
			* @category Util
			* @param {*} [func=_.identity] The value to convert to a callback.
			* @returns {Function} Returns the callback.
			* @example
			*
			* var users = [
			*   { 'user': 'barney', 'age': 36, 'active': true },
			*   { 'user': 'fred',   'age': 40, 'active': false }
			* ];
			*
			* // The `_.matches` iteratee shorthand.
			* _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
			* // => [{ 'user': 'barney', 'age': 36, 'active': true }]
			*
			* // The `_.matchesProperty` iteratee shorthand.
			* _.filter(users, _.iteratee(['user', 'fred']));
			* // => [{ 'user': 'fred', 'age': 40 }]
			*
			* // The `_.property` iteratee shorthand.
			* _.map(users, _.iteratee('user'));
			* // => ['barney', 'fred']
			*
			* // Create custom iteratee shorthands.
			* _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
			*   return !_.isRegExp(func) ? iteratee(func) : function(string) {
			*     return func.test(string);
			*   };
			* });
			*
			* _.filter(['abc', 'def'], /ef/);
			* // => ['def']
			*/
			function iteratee(func) {
				return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
			}
			/**
			* Creates a function that performs a partial deep comparison between a given
			* object and `source`, returning `true` if the given object has equivalent
			* property values, else `false`.
			*
			* **Note:** The created function is equivalent to `_.isMatch` with `source`
			* partially applied.
			*
			* Partial comparisons will match empty array and empty object `source`
			* values against any array or object value, respectively. See `_.isEqual`
			* for a list of supported value comparisons.
			*
			* **Note:** Multiple values can be checked by combining several matchers
			* using `_.overSome`
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Util
			* @param {Object} source The object of property values to match.
			* @returns {Function} Returns the new spec function.
			* @example
			*
			* var objects = [
			*   { 'a': 1, 'b': 2, 'c': 3 },
			*   { 'a': 4, 'b': 5, 'c': 6 }
			* ];
			*
			* _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
			* // => [{ 'a': 4, 'b': 5, 'c': 6 }]
			*
			* // Checking for several possible values
			* _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
			* // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
			*/
			function matches(source) {
				return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
			}
			/**
			* Creates a function that performs a partial deep comparison between the
			* value at `path` of a given object to `srcValue`, returning `true` if the
			* object value is equivalent, else `false`.
			*
			* **Note:** Partial comparisons will match empty array and empty object
			* `srcValue` values against any array or object value, respectively. See
			* `_.isEqual` for a list of supported value comparisons.
			*
			* **Note:** Multiple values can be checked by combining several matchers
			* using `_.overSome`
			*
			* @static
			* @memberOf _
			* @since 3.2.0
			* @category Util
			* @param {Array|string} path The path of the property to get.
			* @param {*} srcValue The value to match.
			* @returns {Function} Returns the new spec function.
			* @example
			*
			* var objects = [
			*   { 'a': 1, 'b': 2, 'c': 3 },
			*   { 'a': 4, 'b': 5, 'c': 6 }
			* ];
			*
			* _.find(objects, _.matchesProperty('a', 4));
			* // => { 'a': 4, 'b': 5, 'c': 6 }
			*
			* // Checking for several possible values
			* _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
			* // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
			*/
			function matchesProperty(path$28, srcValue) {
				return baseMatchesProperty(path$28, baseClone(srcValue, CLONE_DEEP_FLAG));
			}
			/**
			* Creates a function that invokes the method at `path` of a given object.
			* Any additional arguments are provided to the invoked method.
			*
			* @static
			* @memberOf _
			* @since 3.7.0
			* @category Util
			* @param {Array|string} path The path of the method to invoke.
			* @param {...*} [args] The arguments to invoke the method with.
			* @returns {Function} Returns the new invoker function.
			* @example
			*
			* var objects = [
			*   { 'a': { 'b': _.constant(2) } },
			*   { 'a': { 'b': _.constant(1) } }
			* ];
			*
			* _.map(objects, _.method('a.b'));
			* // => [2, 1]
			*
			* _.map(objects, _.method(['a', 'b']));
			* // => [2, 1]
			*/
			var method = baseRest(function(path$28, args) {
				return function(object$2) {
					return baseInvoke(object$2, path$28, args);
				};
			});
			/**
			* The opposite of `_.method`; this method creates a function that invokes
			* the method at a given path of `object`. Any additional arguments are
			* provided to the invoked method.
			*
			* @static
			* @memberOf _
			* @since 3.7.0
			* @category Util
			* @param {Object} object The object to query.
			* @param {...*} [args] The arguments to invoke the method with.
			* @returns {Function} Returns the new invoker function.
			* @example
			*
			* var array = _.times(3, _.constant),
			*     object = { 'a': array, 'b': array, 'c': array };
			*
			* _.map(['a[2]', 'c[0]'], _.methodOf(object));
			* // => [2, 0]
			*
			* _.map([['a', '2'], ['c', '0']], _.methodOf(object));
			* // => [2, 0]
			*/
			var methodOf = baseRest(function(object$2, args) {
				return function(path$28) {
					return baseInvoke(object$2, path$28, args);
				};
			});
			/**
			* Adds all own enumerable string keyed function properties of a source
			* object to the destination object. If `object` is a function, then methods
			* are added to its prototype as well.
			*
			* **Note:** Use `_.runInContext` to create a pristine `lodash` function to
			* avoid conflicts caused by modifying the original.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {Function|Object} [object=lodash] The destination object.
			* @param {Object} source The object of functions to add.
			* @param {Object} [options={}] The options object.
			* @param {boolean} [options.chain=true] Specify whether mixins are chainable.
			* @returns {Function|Object} Returns `object`.
			* @example
			*
			* function vowels(string) {
			*   return _.filter(string, function(v) {
			*     return /[aeiou]/i.test(v);
			*   });
			* }
			*
			* _.mixin({ 'vowels': vowels });
			* _.vowels('fred');
			* // => ['e']
			*
			* _('fred').vowels().value();
			* // => ['e']
			*
			* _.mixin({ 'vowels': vowels }, { 'chain': false });
			* _('fred').vowels();
			* // => ['e']
			*/
			function mixin(object$2, source, options) {
				var props = keys$1(source), methodNames = baseFunctions(source, props);
				if (options == null && !(isObject$5(source) && (methodNames.length || !props.length))) {
					options = source;
					source = object$2;
					object$2 = this;
					methodNames = baseFunctions(source, keys$1(source));
				}
				var chain$2 = !(isObject$5(options) && "chain" in options) || !!options.chain, isFunc = isFunction$10(object$2);
				arrayEach(methodNames, function(methodName) {
					var func = source[methodName];
					object$2[methodName] = func;
					if (isFunc) object$2.prototype[methodName] = function() {
						var chainAll = this.__chain__;
						if (chain$2 || chainAll) {
							var result$1 = object$2(this.__wrapped__), actions = result$1.__actions__ = copyArray(this.__actions__);
							actions.push({
								"func": func,
								"args": arguments,
								"thisArg": object$2
							});
							result$1.__chain__ = chainAll;
							return result$1;
						}
						return func.apply(object$2, arrayPush([this.value()], arguments));
					};
				});
				return object$2;
			}
			/**
			* Reverts the `_` variable to its previous value and returns a reference to
			* the `lodash` function.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @returns {Function} Returns the `lodash` function.
			* @example
			*
			* var lodash = _.noConflict();
			*/
			function noConflict$1() {
				if (root$5._ === this) root$5._ = oldDash;
				return this;
			}
			/**
			* This method returns `undefined`.
			*
			* @static
			* @memberOf _
			* @since 2.3.0
			* @category Util
			* @example
			*
			* _.times(2, _.noop);
			* // => [undefined, undefined]
			*/
			function noop$3() {}
			/**
			* Creates a function that gets the argument at index `n`. If `n` is negative,
			* the nth argument from the end is returned.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {number} [n=0] The index of the argument to return.
			* @returns {Function} Returns the new pass-thru function.
			* @example
			*
			* var func = _.nthArg(1);
			* func('a', 'b', 'c', 'd');
			* // => 'b'
			*
			* var func = _.nthArg(-2);
			* func('a', 'b', 'c', 'd');
			* // => 'c'
			*/
			function nthArg(n$4) {
				n$4 = toInteger(n$4);
				return baseRest(function(args) {
					return baseNth(args, n$4);
				});
			}
			/**
			* Creates a function that invokes `iteratees` with the arguments it receives
			* and returns their results.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {...(Function|Function[])} [iteratees=[_.identity]]
			*  The iteratees to invoke.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var func = _.over([Math.max, Math.min]);
			*
			* func(1, 2, 3, 4);
			* // => [4, 1]
			*/
			var over = createOver(arrayMap);
			/**
			* Creates a function that checks if **all** of the `predicates` return
			* truthy when invoked with the arguments it receives.
			*
			* Following shorthands are possible for providing predicates.
			* Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
			* Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {...(Function|Function[])} [predicates=[_.identity]]
			*  The predicates to check.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var func = _.overEvery([Boolean, isFinite]);
			*
			* func('1');
			* // => true
			*
			* func(null);
			* // => false
			*
			* func(NaN);
			* // => false
			*/
			var overEvery = createOver(arrayEvery);
			/**
			* Creates a function that checks if **any** of the `predicates` return
			* truthy when invoked with the arguments it receives.
			*
			* Following shorthands are possible for providing predicates.
			* Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
			* Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {...(Function|Function[])} [predicates=[_.identity]]
			*  The predicates to check.
			* @returns {Function} Returns the new function.
			* @example
			*
			* var func = _.overSome([Boolean, isFinite]);
			*
			* func('1');
			* // => true
			*
			* func(null);
			* // => true
			*
			* func(NaN);
			* // => false
			*
			* var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
			* var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
			*/
			var overSome = createOver(arraySome);
			/**
			* Creates a function that returns the value at `path` of a given object.
			*
			* @static
			* @memberOf _
			* @since 2.4.0
			* @category Util
			* @param {Array|string} path The path of the property to get.
			* @returns {Function} Returns the new accessor function.
			* @example
			*
			* var objects = [
			*   { 'a': { 'b': 2 } },
			*   { 'a': { 'b': 1 } }
			* ];
			*
			* _.map(objects, _.property('a.b'));
			* // => [2, 1]
			*
			* _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
			* // => [1, 2]
			*/
			function property(path$28) {
				return isKey(path$28) ? baseProperty(toKey(path$28)) : basePropertyDeep(path$28);
			}
			/**
			* The opposite of `_.property`; this method creates a function that returns
			* the value at a given path of `object`.
			*
			* @static
			* @memberOf _
			* @since 3.0.0
			* @category Util
			* @param {Object} object The object to query.
			* @returns {Function} Returns the new accessor function.
			* @example
			*
			* var array = [0, 1, 2],
			*     object = { 'a': array, 'b': array, 'c': array };
			*
			* _.map(['a[2]', 'c[0]'], _.propertyOf(object));
			* // => [2, 0]
			*
			* _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
			* // => [2, 0]
			*/
			function propertyOf(object$2) {
				return function(path$28) {
					return object$2 == null ? undefined$1 : baseGet(object$2, path$28);
				};
			}
			/**
			* Creates an array of numbers (positive and/or negative) progressing from
			* `start` up to, but not including, `end`. A step of `-1` is used if a negative
			* `start` is specified without an `end` or `step`. If `end` is not specified,
			* it's set to `start` with `start` then set to `0`.
			*
			* **Note:** JavaScript follows the IEEE-754 standard for resolving
			* floating-point values which can produce unexpected results.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {number} [start=0] The start of the range.
			* @param {number} end The end of the range.
			* @param {number} [step=1] The value to increment or decrement by.
			* @returns {Array} Returns the range of numbers.
			* @see _.inRange, _.rangeRight
			* @example
			*
			* _.range(4);
			* // => [0, 1, 2, 3]
			*
			* _.range(-4);
			* // => [0, -1, -2, -3]
			*
			* _.range(1, 5);
			* // => [1, 2, 3, 4]
			*
			* _.range(0, 20, 5);
			* // => [0, 5, 10, 15]
			*
			* _.range(0, -4, -1);
			* // => [0, -1, -2, -3]
			*
			* _.range(1, 4, 0);
			* // => [1, 1, 1]
			*
			* _.range(0);
			* // => []
			*/
			var range$2 = createRange();
			/**
			* This method is like `_.range` except that it populates values in
			* descending order.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {number} [start=0] The start of the range.
			* @param {number} end The end of the range.
			* @param {number} [step=1] The value to increment or decrement by.
			* @returns {Array} Returns the range of numbers.
			* @see _.inRange, _.range
			* @example
			*
			* _.rangeRight(4);
			* // => [3, 2, 1, 0]
			*
			* _.rangeRight(-4);
			* // => [-3, -2, -1, 0]
			*
			* _.rangeRight(1, 5);
			* // => [4, 3, 2, 1]
			*
			* _.rangeRight(0, 20, 5);
			* // => [15, 10, 5, 0]
			*
			* _.rangeRight(0, -4, -1);
			* // => [-3, -2, -1, 0]
			*
			* _.rangeRight(1, 4, 0);
			* // => [1, 1, 1]
			*
			* _.rangeRight(0);
			* // => []
			*/
			var rangeRight = createRange(true);
			/**
			* This method returns a new empty array.
			*
			* @static
			* @memberOf _
			* @since 4.13.0
			* @category Util
			* @returns {Array} Returns the new empty array.
			* @example
			*
			* var arrays = _.times(2, _.stubArray);
			*
			* console.log(arrays);
			* // => [[], []]
			*
			* console.log(arrays[0] === arrays[1]);
			* // => false
			*/
			function stubArray() {
				return [];
			}
			/**
			* This method returns `false`.
			*
			* @static
			* @memberOf _
			* @since 4.13.0
			* @category Util
			* @returns {boolean} Returns `false`.
			* @example
			*
			* _.times(2, _.stubFalse);
			* // => [false, false]
			*/
			function stubFalse() {
				return false;
			}
			/**
			* This method returns a new empty object.
			*
			* @static
			* @memberOf _
			* @since 4.13.0
			* @category Util
			* @returns {Object} Returns the new empty object.
			* @example
			*
			* var objects = _.times(2, _.stubObject);
			*
			* console.log(objects);
			* // => [{}, {}]
			*
			* console.log(objects[0] === objects[1]);
			* // => false
			*/
			function stubObject() {
				return {};
			}
			/**
			* This method returns an empty string.
			*
			* @static
			* @memberOf _
			* @since 4.13.0
			* @category Util
			* @returns {string} Returns the empty string.
			* @example
			*
			* _.times(2, _.stubString);
			* // => ['', '']
			*/
			function stubString() {
				return "";
			}
			/**
			* This method returns `true`.
			*
			* @static
			* @memberOf _
			* @since 4.13.0
			* @category Util
			* @returns {boolean} Returns `true`.
			* @example
			*
			* _.times(2, _.stubTrue);
			* // => [true, true]
			*/
			function stubTrue() {
				return true;
			}
			/**
			* Invokes the iteratee `n` times, returning an array of the results of
			* each invocation. The iteratee is invoked with one argument; (index).
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {number} n The number of times to invoke `iteratee`.
			* @param {Function} [iteratee=_.identity] The function invoked per iteration.
			* @returns {Array} Returns the array of results.
			* @example
			*
			* _.times(3, String);
			* // => ['0', '1', '2']
			*
			*  _.times(4, _.constant(0));
			* // => [0, 0, 0, 0]
			*/
			function times(n$4, iteratee$1) {
				n$4 = toInteger(n$4);
				if (n$4 < 1 || n$4 > MAX_SAFE_INTEGER) return [];
				var index$1 = MAX_ARRAY_LENGTH, length = nativeMin(n$4, MAX_ARRAY_LENGTH);
				iteratee$1 = getIteratee(iteratee$1);
				n$4 -= MAX_ARRAY_LENGTH;
				var result$1 = baseTimes(length, iteratee$1);
				while (++index$1 < n$4) iteratee$1(index$1);
				return result$1;
			}
			/**
			* Converts `value` to a property path array.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Util
			* @param {*} value The value to convert.
			* @returns {Array} Returns the new property path array.
			* @example
			*
			* _.toPath('a.b.c');
			* // => ['a', 'b', 'c']
			*
			* _.toPath('a[0].b.c');
			* // => ['a', '0', 'b', 'c']
			*/
			function toPath(value) {
				if (isArray$5(value)) return arrayMap(value, toKey);
				return isSymbol$2(value) ? [value] : copyArray(stringToPath(toString$5(value)));
			}
			/**
			* Generates a unique ID. If `prefix` is given, the ID is appended to it.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Util
			* @param {string} [prefix=''] The value to prefix the ID with.
			* @returns {string} Returns the unique ID.
			* @example
			*
			* _.uniqueId('contact_');
			* // => 'contact_104'
			*
			* _.uniqueId();
			* // => '105'
			*/
			function uniqueId(prefix$1) {
				var id$4 = ++idCounter;
				return toString$5(prefix$1) + id$4;
			}
			/**
			* Adds two numbers.
			*
			* @static
			* @memberOf _
			* @since 3.4.0
			* @category Math
			* @param {number} augend The first number in an addition.
			* @param {number} addend The second number in an addition.
			* @returns {number} Returns the total.
			* @example
			*
			* _.add(6, 4);
			* // => 10
			*/
			var add = createMathOperation(function(augend, addend) {
				return augend + addend;
			}, 0);
			/**
			* Computes `number` rounded up to `precision`.
			*
			* @static
			* @memberOf _
			* @since 3.10.0
			* @category Math
			* @param {number} number The number to round up.
			* @param {number} [precision=0] The precision to round up to.
			* @returns {number} Returns the rounded up number.
			* @example
			*
			* _.ceil(4.006);
			* // => 5
			*
			* _.ceil(6.004, 2);
			* // => 6.01
			*
			* _.ceil(6040, -2);
			* // => 6100
			*/
			var ceil = createRound("ceil");
			/**
			* Divide two numbers.
			*
			* @static
			* @memberOf _
			* @since 4.7.0
			* @category Math
			* @param {number} dividend The first number in a division.
			* @param {number} divisor The second number in a division.
			* @returns {number} Returns the quotient.
			* @example
			*
			* _.divide(6, 4);
			* // => 1.5
			*/
			var divide = createMathOperation(function(dividend, divisor) {
				return dividend / divisor;
			}, 1);
			/**
			* Computes `number` rounded down to `precision`.
			*
			* @static
			* @memberOf _
			* @since 3.10.0
			* @category Math
			* @param {number} number The number to round down.
			* @param {number} [precision=0] The precision to round down to.
			* @returns {number} Returns the rounded down number.
			* @example
			*
			* _.floor(4.006);
			* // => 4
			*
			* _.floor(0.046, 2);
			* // => 0.04
			*
			* _.floor(4060, -2);
			* // => 4000
			*/
			var floor = createRound("floor");
			/**
			* Computes the maximum value of `array`. If `array` is empty or falsey,
			* `undefined` is returned.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Math
			* @param {Array} array The array to iterate over.
			* @returns {*} Returns the maximum value.
			* @example
			*
			* _.max([4, 2, 8, 6]);
			* // => 8
			*
			* _.max([]);
			* // => undefined
			*/
			function max$1(array) {
				return array && array.length ? baseExtremum(array, identity$2, baseGt) : undefined$1;
			}
			/**
			* This method is like `_.max` except that it accepts `iteratee` which is
			* invoked for each element in `array` to generate the criterion by which
			* the value is ranked. The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {*} Returns the maximum value.
			* @example
			*
			* var objects = [{ 'n': 1 }, { 'n': 2 }];
			*
			* _.maxBy(objects, function(o) { return o.n; });
			* // => { 'n': 2 }
			*
			* // The `_.property` iteratee shorthand.
			* _.maxBy(objects, 'n');
			* // => { 'n': 2 }
			*/
			function maxBy(array, iteratee$1) {
				return array && array.length ? baseExtremum(array, getIteratee(iteratee$1, 2), baseGt) : undefined$1;
			}
			/**
			* Computes the mean of the values in `array`.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @returns {number} Returns the mean.
			* @example
			*
			* _.mean([4, 2, 8, 6]);
			* // => 5
			*/
			function mean(array) {
				return baseMean(array, identity$2);
			}
			/**
			* This method is like `_.mean` except that it accepts `iteratee` which is
			* invoked for each element in `array` to generate the value to be averaged.
			* The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.7.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {number} Returns the mean.
			* @example
			*
			* var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
			*
			* _.meanBy(objects, function(o) { return o.n; });
			* // => 5
			*
			* // The `_.property` iteratee shorthand.
			* _.meanBy(objects, 'n');
			* // => 5
			*/
			function meanBy(array, iteratee$1) {
				return baseMean(array, getIteratee(iteratee$1, 2));
			}
			/**
			* Computes the minimum value of `array`. If `array` is empty or falsey,
			* `undefined` is returned.
			*
			* @static
			* @since 0.1.0
			* @memberOf _
			* @category Math
			* @param {Array} array The array to iterate over.
			* @returns {*} Returns the minimum value.
			* @example
			*
			* _.min([4, 2, 8, 6]);
			* // => 2
			*
			* _.min([]);
			* // => undefined
			*/
			function min(array) {
				return array && array.length ? baseExtremum(array, identity$2, baseLt) : undefined$1;
			}
			/**
			* This method is like `_.min` except that it accepts `iteratee` which is
			* invoked for each element in `array` to generate the criterion by which
			* the value is ranked. The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {*} Returns the minimum value.
			* @example
			*
			* var objects = [{ 'n': 1 }, { 'n': 2 }];
			*
			* _.minBy(objects, function(o) { return o.n; });
			* // => { 'n': 1 }
			*
			* // The `_.property` iteratee shorthand.
			* _.minBy(objects, 'n');
			* // => { 'n': 1 }
			*/
			function minBy(array, iteratee$1) {
				return array && array.length ? baseExtremum(array, getIteratee(iteratee$1, 2), baseLt) : undefined$1;
			}
			/**
			* Multiply two numbers.
			*
			* @static
			* @memberOf _
			* @since 4.7.0
			* @category Math
			* @param {number} multiplier The first number in a multiplication.
			* @param {number} multiplicand The second number in a multiplication.
			* @returns {number} Returns the product.
			* @example
			*
			* _.multiply(6, 4);
			* // => 24
			*/
			var multiply = createMathOperation(function(multiplier, multiplicand) {
				return multiplier * multiplicand;
			}, 1);
			/**
			* Computes `number` rounded to `precision`.
			*
			* @static
			* @memberOf _
			* @since 3.10.0
			* @category Math
			* @param {number} number The number to round.
			* @param {number} [precision=0] The precision to round to.
			* @returns {number} Returns the rounded number.
			* @example
			*
			* _.round(4.006);
			* // => 4
			*
			* _.round(4.006, 2);
			* // => 4.01
			*
			* _.round(4060, -2);
			* // => 4100
			*/
			var round = createRound("round");
			/**
			* Subtract two numbers.
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Math
			* @param {number} minuend The first number in a subtraction.
			* @param {number} subtrahend The second number in a subtraction.
			* @returns {number} Returns the difference.
			* @example
			*
			* _.subtract(6, 4);
			* // => 2
			*/
			var subtract = createMathOperation(function(minuend, subtrahend) {
				return minuend - subtrahend;
			}, 0);
			/**
			* Computes the sum of the values in `array`.
			*
			* @static
			* @memberOf _
			* @since 3.4.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @returns {number} Returns the sum.
			* @example
			*
			* _.sum([4, 2, 8, 6]);
			* // => 20
			*/
			function sum$1(array) {
				return array && array.length ? baseSum(array, identity$2) : 0;
			}
			/**
			* This method is like `_.sum` except that it accepts `iteratee` which is
			* invoked for each element in `array` to generate the value to be summed.
			* The iteratee is invoked with one argument: (value).
			*
			* @static
			* @memberOf _
			* @since 4.0.0
			* @category Math
			* @param {Array} array The array to iterate over.
			* @param {Function} [iteratee=_.identity] The iteratee invoked per element.
			* @returns {number} Returns the sum.
			* @example
			*
			* var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
			*
			* _.sumBy(objects, function(o) { return o.n; });
			* // => 20
			*
			* // The `_.property` iteratee shorthand.
			* _.sumBy(objects, 'n');
			* // => 20
			*/
			function sumBy(array, iteratee$1) {
				return array && array.length ? baseSum(array, getIteratee(iteratee$1, 2)) : 0;
			}
			lodash.after = after;
			lodash.ary = ary;
			lodash.assign = assign;
			lodash.assignIn = assignIn;
			lodash.assignInWith = assignInWith;
			lodash.assignWith = assignWith;
			lodash.at = at$3;
			lodash.before = before;
			lodash.bind = bind$1;
			lodash.bindAll = bindAll;
			lodash.bindKey = bindKey;
			lodash.castArray = castArray;
			lodash.chain = chain$1;
			lodash.chunk = chunk;
			lodash.compact = compact;
			lodash.concat = concat;
			lodash.cond = cond;
			lodash.conforms = conforms;
			lodash.constant = constant;
			lodash.countBy = countBy;
			lodash.create = create$5;
			lodash.curry = curry;
			lodash.curryRight = curryRight;
			lodash.debounce = debounce;
			lodash.defaults = defaults$2;
			lodash.defaultsDeep = defaultsDeep;
			lodash.defer = defer;
			lodash.delay = delay;
			lodash.difference = difference;
			lodash.differenceBy = differenceBy;
			lodash.differenceWith = differenceWith;
			lodash.drop = drop;
			lodash.dropRight = dropRight;
			lodash.dropRightWhile = dropRightWhile;
			lodash.dropWhile = dropWhile;
			lodash.fill = fill;
			lodash.filter = filter$2;
			lodash.flatMap = flatMap;
			lodash.flatMapDeep = flatMapDeep;
			lodash.flatMapDepth = flatMapDepth;
			lodash.flatten = flatten;
			lodash.flattenDeep = flattenDeep;
			lodash.flattenDepth = flattenDepth;
			lodash.flip = flip;
			lodash.flow = flow$1;
			lodash.flowRight = flowRight;
			lodash.fromPairs = fromPairs;
			lodash.functions = functions;
			lodash.functionsIn = functionsIn;
			lodash.groupBy = groupBy;
			lodash.initial = initial;
			lodash.intersection = intersection;
			lodash.intersectionBy = intersectionBy;
			lodash.intersectionWith = intersectionWith;
			lodash.invert = invert;
			lodash.invertBy = invertBy;
			lodash.invokeMap = invokeMap;
			lodash.iteratee = iteratee;
			lodash.keyBy = keyBy;
			lodash.keys = keys$1;
			lodash.keysIn = keysIn;
			lodash.map = map;
			lodash.mapKeys = mapKeys;
			lodash.mapValues = mapValues;
			lodash.matches = matches;
			lodash.matchesProperty = matchesProperty;
			lodash.memoize = memoize;
			lodash.merge = merge$5;
			lodash.mergeWith = mergeWith;
			lodash.method = method;
			lodash.methodOf = methodOf;
			lodash.mixin = mixin;
			lodash.negate = negate;
			lodash.nthArg = nthArg;
			lodash.omit = omit;
			lodash.omitBy = omitBy;
			lodash.once = once$3;
			lodash.orderBy = orderBy;
			lodash.over = over;
			lodash.overArgs = overArgs;
			lodash.overEvery = overEvery;
			lodash.overSome = overSome;
			lodash.partial = partial;
			lodash.partialRight = partialRight;
			lodash.partition = partition$1;
			lodash.pick = pick;
			lodash.pickBy = pickBy;
			lodash.property = property;
			lodash.propertyOf = propertyOf;
			lodash.pull = pull;
			lodash.pullAll = pullAll;
			lodash.pullAllBy = pullAllBy;
			lodash.pullAllWith = pullAllWith;
			lodash.pullAt = pullAt;
			lodash.range = range$2;
			lodash.rangeRight = rangeRight;
			lodash.rearg = rearg;
			lodash.reject = reject;
			lodash.remove = remove$4;
			lodash.rest = rest;
			lodash.reverse = reverse;
			lodash.sampleSize = sampleSize;
			lodash.set = set;
			lodash.setWith = setWith;
			lodash.shuffle = shuffle;
			lodash.slice = slice$2;
			lodash.sortBy = sortBy;
			lodash.sortedUniq = sortedUniq;
			lodash.sortedUniqBy = sortedUniqBy;
			lodash.split = split;
			lodash.spread = spread;
			lodash.tail = tail;
			lodash.take = take;
			lodash.takeRight = takeRight;
			lodash.takeRightWhile = takeRightWhile;
			lodash.takeWhile = takeWhile;
			lodash.tap = tap;
			lodash.throttle = throttle;
			lodash.thru = thru;
			lodash.toArray = toArray;
			lodash.toPairs = toPairs;
			lodash.toPairsIn = toPairsIn;
			lodash.toPath = toPath;
			lodash.toPlainObject = toPlainObject;
			lodash.transform = transform$1;
			lodash.unary = unary;
			lodash.union = union;
			lodash.unionBy = unionBy;
			lodash.unionWith = unionWith;
			lodash.uniq = uniq;
			lodash.uniqBy = uniqBy;
			lodash.uniqWith = uniqWith;
			lodash.unset = unset;
			lodash.unzip = unzip;
			lodash.unzipWith = unzipWith;
			lodash.update = update;
			lodash.updateWith = updateWith;
			lodash.values = values;
			lodash.valuesIn = valuesIn;
			lodash.without = without;
			lodash.words = words$1;
			lodash.wrap = wrap;
			lodash.xor = xor;
			lodash.xorBy = xorBy;
			lodash.xorWith = xorWith;
			lodash.zip = zip;
			lodash.zipObject = zipObject;
			lodash.zipObjectDeep = zipObjectDeep;
			lodash.zipWith = zipWith;
			lodash.entries = toPairs;
			lodash.entriesIn = toPairsIn;
			lodash.extend = assignIn;
			lodash.extendWith = assignInWith;
			mixin(lodash, lodash);
			lodash.add = add;
			lodash.attempt = attempt;
			lodash.camelCase = camelCase$2;
			lodash.capitalize = capitalize$3;
			lodash.ceil = ceil;
			lodash.clamp = clamp;
			lodash.clone = clone$4;
			lodash.cloneDeep = cloneDeep$1;
			lodash.cloneDeepWith = cloneDeepWith;
			lodash.cloneWith = cloneWith;
			lodash.conformsTo = conformsTo;
			lodash.deburr = deburr$1;
			lodash.defaultTo = defaultTo;
			lodash.divide = divide;
			lodash.endsWith = endsWith;
			lodash.eq = eq;
			lodash.escape = escape$2;
			lodash.escapeRegExp = escapeRegExp;
			lodash.every = every;
			lodash.find = find$2;
			lodash.findIndex = findIndex;
			lodash.findKey = findKey;
			lodash.findLast = findLast;
			lodash.findLastIndex = findLastIndex;
			lodash.findLastKey = findLastKey;
			lodash.floor = floor;
			lodash.forEach = forEach$1;
			lodash.forEachRight = forEachRight;
			lodash.forIn = forIn;
			lodash.forInRight = forInRight;
			lodash.forOwn = forOwn$1;
			lodash.forOwnRight = forOwnRight;
			lodash.get = get$2;
			lodash.gt = gt;
			lodash.gte = gte$1;
			lodash.has = has$3;
			lodash.hasIn = hasIn;
			lodash.head = head;
			lodash.identity = identity$2;
			lodash.includes = includes;
			lodash.indexOf = indexOf$1;
			lodash.inRange = inRange;
			lodash.invoke = invoke;
			lodash.isArguments = isArguments;
			lodash.isArray = isArray$5;
			lodash.isArrayBuffer = isArrayBuffer;
			lodash.isArrayLike = isArrayLike;
			lodash.isArrayLikeObject = isArrayLikeObject;
			lodash.isBoolean = isBoolean;
			lodash.isBuffer = isBuffer$1;
			lodash.isDate = isDate$1;
			lodash.isElement = isElement;
			lodash.isEmpty = isEmpty$1;
			lodash.isEqual = isEqual;
			lodash.isEqualWith = isEqualWith;
			lodash.isError = isError$1;
			lodash.isFinite = isFinite$1;
			lodash.isFunction = isFunction$10;
			lodash.isInteger = isInteger;
			lodash.isLength = isLength;
			lodash.isMap = isMap$2;
			lodash.isMatch = isMatch;
			lodash.isMatchWith = isMatchWith;
			lodash.isNaN = isNaN$1;
			lodash.isNative = isNative;
			lodash.isNil = isNil;
			lodash.isNull = isNull;
			lodash.isNumber = isNumber$2;
			lodash.isObject = isObject$5;
			lodash.isObjectLike = isObjectLike$1;
			lodash.isPlainObject = isPlainObject$2;
			lodash.isRegExp = isRegExp$1;
			lodash.isSafeInteger = isSafeInteger;
			lodash.isSet = isSet$2;
			lodash.isString = isString$5;
			lodash.isSymbol = isSymbol$2;
			lodash.isTypedArray = isTypedArray;
			lodash.isUndefined = isUndefined;
			lodash.isWeakMap = isWeakMap;
			lodash.isWeakSet = isWeakSet;
			lodash.join = join$4;
			lodash.kebabCase = kebabCase$1;
			lodash.last = last$2;
			lodash.lastIndexOf = lastIndexOf;
			lodash.lowerCase = lowerCase;
			lodash.lowerFirst = lowerFirst;
			lodash.lt = lt;
			lodash.lte = lte$1;
			lodash.max = max$1;
			lodash.maxBy = maxBy;
			lodash.mean = mean;
			lodash.meanBy = meanBy;
			lodash.min = min;
			lodash.minBy = minBy;
			lodash.stubArray = stubArray;
			lodash.stubFalse = stubFalse;
			lodash.stubObject = stubObject;
			lodash.stubString = stubString;
			lodash.stubTrue = stubTrue;
			lodash.multiply = multiply;
			lodash.nth = nth;
			lodash.noConflict = noConflict$1;
			lodash.noop = noop$3;
			lodash.now = now;
			lodash.pad = pad$1;
			lodash.padEnd = padEnd;
			lodash.padStart = padStart;
			lodash.parseInt = parseInt$1;
			lodash.random = random;
			lodash.reduce = reduce;
			lodash.reduceRight = reduceRight;
			lodash.repeat = repeat;
			lodash.replace = replace;
			lodash.result = result;
			lodash.round = round;
			lodash.runInContext = runInContext$1;
			lodash.sample = sample;
			lodash.size = size;
			lodash.snakeCase = snakeCase;
			lodash.some = some;
			lodash.sortedIndex = sortedIndex;
			lodash.sortedIndexBy = sortedIndexBy;
			lodash.sortedIndexOf = sortedIndexOf;
			lodash.sortedLastIndex = sortedLastIndex;
			lodash.sortedLastIndexBy = sortedLastIndexBy;
			lodash.sortedLastIndexOf = sortedLastIndexOf;
			lodash.startCase = startCase;
			lodash.startsWith = startsWith$1;
			lodash.subtract = subtract;
			lodash.sum = sum$1;
			lodash.sumBy = sumBy;
			lodash.template = template$1;
			lodash.times = times;
			lodash.toFinite = toFinite;
			lodash.toInteger = toInteger;
			lodash.toLength = toLength;
			lodash.toLower = toLower;
			lodash.toNumber = toNumber$1;
			lodash.toSafeInteger = toSafeInteger;
			lodash.toString = toString$5;
			lodash.toUpper = toUpper;
			lodash.trim = trim$1;
			lodash.trimEnd = trimEnd;
			lodash.trimStart = trimStart;
			lodash.truncate = truncate;
			lodash.unescape = unescape$2;
			lodash.uniqueId = uniqueId;
			lodash.upperCase = upperCase;
			lodash.upperFirst = upperFirst$1;
			lodash.each = forEach$1;
			lodash.eachRight = forEachRight;
			lodash.first = head;
			mixin(lodash, function() {
				var source = {};
				baseForOwn(lodash, function(func, methodName) {
					if (!hasOwnProperty$5.call(lodash.prototype, methodName)) source[methodName] = func;
				});
				return source;
			}(), { "chain": false });
			/**
			* The semantic version number.
			*
			* @static
			* @memberOf _
			* @type {string}
			*/
			lodash.VERSION = VERSION$1;
			arrayEach([
				"bind",
				"bindKey",
				"curry",
				"curryRight",
				"partial",
				"partialRight"
			], function(methodName) {
				lodash[methodName].placeholder = lodash;
			});
			arrayEach(["drop", "take"], function(methodName, index$1) {
				LazyWrapper.prototype[methodName] = function(n$4) {
					n$4 = n$4 === undefined$1 ? 1 : nativeMax(toInteger(n$4), 0);
					var result$1 = this.__filtered__ && !index$1 ? new LazyWrapper(this) : this.clone();
					if (result$1.__filtered__) result$1.__takeCount__ = nativeMin(n$4, result$1.__takeCount__);
					else result$1.__views__.push({
						"size": nativeMin(n$4, MAX_ARRAY_LENGTH),
						"type": methodName + (result$1.__dir__ < 0 ? "Right" : "")
					});
					return result$1;
				};
				LazyWrapper.prototype[methodName + "Right"] = function(n$4) {
					return this.reverse()[methodName](n$4).reverse();
				};
			});
			arrayEach([
				"filter",
				"map",
				"takeWhile"
			], function(methodName, index$1) {
				var type = index$1 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
				LazyWrapper.prototype[methodName] = function(iteratee$1) {
					var result$1 = this.clone();
					result$1.__iteratees__.push({
						"iteratee": getIteratee(iteratee$1, 3),
						"type": type
					});
					result$1.__filtered__ = result$1.__filtered__ || isFilter;
					return result$1;
				};
			});
			arrayEach(["head", "last"], function(methodName, index$1) {
				var takeName = "take" + (index$1 ? "Right" : "");
				LazyWrapper.prototype[methodName] = function() {
					return this[takeName](1).value()[0];
				};
			});
			arrayEach(["initial", "tail"], function(methodName, index$1) {
				var dropName = "drop" + (index$1 ? "" : "Right");
				LazyWrapper.prototype[methodName] = function() {
					return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
				};
			});
			LazyWrapper.prototype.compact = function() {
				return this.filter(identity$2);
			};
			LazyWrapper.prototype.find = function(predicate) {
				return this.filter(predicate).head();
			};
			LazyWrapper.prototype.findLast = function(predicate) {
				return this.reverse().find(predicate);
			};
			LazyWrapper.prototype.invokeMap = baseRest(function(path$28, args) {
				if (typeof path$28 == "function") return new LazyWrapper(this);
				return this.map(function(value) {
					return baseInvoke(value, path$28, args);
				});
			});
			LazyWrapper.prototype.reject = function(predicate) {
				return this.filter(negate(getIteratee(predicate)));
			};
			LazyWrapper.prototype.slice = function(start, end) {
				start = toInteger(start);
				var result$1 = this;
				if (result$1.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result$1);
				if (start < 0) result$1 = result$1.takeRight(-start);
				else if (start) result$1 = result$1.drop(start);
				if (end !== undefined$1) {
					end = toInteger(end);
					result$1 = end < 0 ? result$1.dropRight(-end) : result$1.take(end - start);
				}
				return result$1;
			};
			LazyWrapper.prototype.takeRightWhile = function(predicate) {
				return this.reverse().takeWhile(predicate).reverse();
			};
			LazyWrapper.prototype.toArray = function() {
				return this.take(MAX_ARRAY_LENGTH);
			};
			baseForOwn(LazyWrapper.prototype, function(func, methodName) {
				var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
				if (!lodashFunc) return;
				lodash.prototype[methodName] = function() {
					var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee$1 = args[0], useLazy = isLazy || isArray$5(value);
					var interceptor = function(value$1) {
						var result$2 = lodashFunc.apply(lodash, arrayPush([value$1], args));
						return isTaker && chainAll ? result$2[0] : result$2;
					};
					if (useLazy && checkIteratee && typeof iteratee$1 == "function" && iteratee$1.length != 1) isLazy = useLazy = false;
					var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
					if (!retUnwrapped && useLazy) {
						value = onlyLazy ? value : new LazyWrapper(this);
						var result$1 = func.apply(value, args);
						result$1.__actions__.push({
							"func": thru,
							"args": [interceptor],
							"thisArg": undefined$1
						});
						return new LodashWrapper(result$1, chainAll);
					}
					if (isUnwrapped && onlyLazy) return func.apply(this, args);
					result$1 = this.thru(interceptor);
					return isUnwrapped ? isTaker ? result$1.value()[0] : result$1.value() : result$1;
				};
			});
			arrayEach([
				"pop",
				"push",
				"shift",
				"sort",
				"splice",
				"unshift"
			], function(methodName) {
				var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
				lodash.prototype[methodName] = function() {
					var args = arguments;
					if (retUnwrapped && !this.__chain__) {
						var value = this.value();
						return func.apply(isArray$5(value) ? value : [], args);
					}
					return this[chainName](function(value$1) {
						return func.apply(isArray$5(value$1) ? value$1 : [], args);
					});
				};
			});
			baseForOwn(LazyWrapper.prototype, function(func, methodName) {
				var lodashFunc = lodash[methodName];
				if (lodashFunc) {
					var key = lodashFunc.name + "";
					if (!hasOwnProperty$5.call(realNames, key)) realNames[key] = [];
					realNames[key].push({
						"name": methodName,
						"func": lodashFunc
					});
				}
			});
			realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
				"name": "wrapper",
				"func": undefined$1
			}];
			LazyWrapper.prototype.clone = lazyClone;
			LazyWrapper.prototype.reverse = lazyReverse;
			LazyWrapper.prototype.value = lazyValue;
			lodash.prototype.at = wrapperAt;
			lodash.prototype.chain = wrapperChain;
			lodash.prototype.commit = wrapperCommit;
			lodash.prototype.next = wrapperNext;
			lodash.prototype.plant = wrapperPlant;
			lodash.prototype.reverse = wrapperReverse;
			lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
			lodash.prototype.first = lodash.prototype.head;
			if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
			return lodash;
		};
		var _ = runInContext();
		if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
			root$5._ = _;
			define(function() {
				return _;
			});
		} else if (freeModule) {
			(freeModule.exports = _)._ = _;
			freeExports._ = _;
		} else root$5._ = _;
	}).call(exports);
} });

//#endregion
//#region node_modules/consolidate/lib/consolidate.js
var require_consolidate$1 = __commonJS({ "node_modules/consolidate/lib/consolidate.js"(exports, module) {
	/**
	* Module dependencies.
	*/
	var fs$3 = __require("fs");
	var path$11 = __require("path");
	var Promise$1 = require_bluebird();
	var join = path$11.join;
	var resolve$2 = path$11.resolve;
	var extname = path$11.extname;
	var dirname = path$11.dirname;
	var isAbsolute$4 = path$11.isAbsolute;
	var readCache = {};
	/**
	* Require cache.
	*/
	var cacheStore = {};
	/**
	* Require cache.
	*/
	var requires = {};
	/**
	* Clear the cache.
	*
	* @api public
	*/
	exports.clearCache = function() {
		readCache = {};
		cacheStore = {};
	};
	/**
	* Conditionally cache `compiled` template based
	* on the `options` filename and `.cache` boolean.
	*
	* @param {Object} options
	* @param {Function} compiled
	* @return {Function}
	* @api private
	*/
	function cache$2(options, compiled) {
		if (compiled && options.filename && options.cache) {
			delete readCache[options.filename];
			cacheStore[options.filename] = compiled;
			return compiled;
		}
		if (options.filename && options.cache) return cacheStore[options.filename];
		return compiled;
	}
	/**
	* Read `path` with `options` with
	* callback `(err, str)`. When `options.cache`
	* is true the template string will be cached.
	*
	* @param {String} options
	* @param {Function} cb
	* @api private
	*/
	function read(path$28, options, cb) {
		var str$4 = readCache[path$28];
		var cached = options.cache && str$4 && typeof str$4 === "string";
		if (cached) return cb(null, str$4);
		fs$3.readFile(path$28, "utf8", function(err, str$5) {
			if (err) return cb(err);
			str$5 = str$5.replace(/^\uFEFF/, "");
			if (options.cache) readCache[path$28] = str$5;
			cb(null, str$5);
		});
	}
	/**
	* Read `path` with `options` with
	* callback `(err, str)`. When `options.cache`
	* is true the partial string will be cached.
	*
	* @param {String} options
	* @param {Function} fn
	* @api private
	*/
	function readPartials(path$28, options, cb) {
		if (!options.partials) return cb();
		var keys$1 = Object.keys(options.partials);
		var partials = {};
		function next(index$1) {
			if (index$1 === keys$1.length) return cb(null, partials);
			var key = keys$1[index$1];
			var partialPath = options.partials[key];
			if (partialPath === void 0 || partialPath === null || partialPath === false) return next(++index$1);
			var file$2;
			if (isAbsolute$4(partialPath)) if (extname(partialPath) !== "") file$2 = partialPath;
			else file$2 = join(partialPath + extname(path$28));
			else file$2 = join(dirname(path$28), partialPath + extname(path$28));
			read(file$2, options, function(err, str$4) {
				if (err) return cb(err);
				partials[key] = str$4;
				next(++index$1);
			});
		}
		next(0);
	}
	/**
	* promisify
	*/
	function promisify(cb, fn) {
		return new Promise$1(function(resolve$5, reject) {
			cb = cb || function(err, html) {
				if (err) return reject(err);
				resolve$5(html);
			};
			fn(cb);
		});
	}
	/**
	* fromStringRenderer
	*/
	function fromStringRenderer(name) {
		return function(path$28, options, cb) {
			options.filename = path$28;
			return promisify(cb, function(cb$1) {
				readPartials(path$28, options, function(err, partials) {
					var extend$4 = requires.extend || (requires.extend = __require("util")._extend);
					var opts = extend$4({}, options);
					opts.partials = partials;
					if (err) return cb$1(err);
					if (cache$2(opts)) exports[name].render("", opts, cb$1);
					else read(path$28, opts, function(err$1, str$4) {
						if (err$1) return cb$1(err$1);
						exports[name].render(str$4, opts, cb$1);
					});
				});
			});
		};
	}
	/**
	* velocity support.
	*/
	exports.velocityjs = fromStringRenderer("velocityjs");
	/**
	* velocity string support.
	*/
	exports.velocityjs.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.velocityjs || (requires.velocityjs = __require("velocityjs"));
			try {
				options.locals = options;
				cb$1(null, engine.render(str$4, options).trimLeft());
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Liquid support.
	*/
	exports.liquid = fromStringRenderer("liquid");
	/**
	* Liquid string support.
	*/
	/**
	* Note that in order to get filters and custom tags we've had to push
	* all user-defined locals down into @locals. However, just to make things
	* backwards-compatible, any property of `options` that is left after
	* processing and removing `locals`, `meta`, `filters`, `customTags` and
	* `includeDir` will also become a local.
	*/
	function _renderTinyliquid(engine, str$4, options, cb) {
		var context = engine.newContext();
		var k$1;
		/**
		* Note that there's a bug in the library that doesn't allow us to pass
		* the locals to newContext(), hence looping through the keys:
		*/
		if (options.locals) {
			for (k$1 in options.locals) context.setLocals(k$1, options.locals[k$1]);
			delete options.locals;
		}
		if (options.meta) {
			context.setLocals("page", options.meta);
			delete options.meta;
		}
		/**
		* Add any defined filters:
		*/
		if (options.filters) {
			for (k$1 in options.filters) context.setFilter(k$1, options.filters[k$1]);
			delete options.filters;
		}
		/**
		* Set up a callback for the include directory:
		*/
		var includeDir = options.includeDir || process.cwd();
		context.onInclude(function(name, callback) {
			var extname$1 = path$11.extname(name) ? "" : ".liquid";
			var filename = path$11.resolve(includeDir, name + extname$1);
			fs$3.readFile(filename, { encoding: "utf8" }, function(err, data$2) {
				if (err) return callback(err);
				callback(null, engine.parse(data$2));
			});
		});
		delete options.includeDir;
		/**
		* The custom tag functions need to have their results pushed back
		* through the parser, so set up a shim before calling the provided
		* callback:
		*/
		var compileOptions = { customTags: {} };
		if (options.customTags) {
			var tagFunctions = options.customTags;
			for (k$1 in options.customTags) compileOptions.customTags[k$1] = function(context$1, name, body) {
				var tpl = tagFunctions[name](body.trim());
				context$1.astStack.push(engine.parse(tpl));
			};
			delete options.customTags;
		}
		/**
		* Now anything left in `options` becomes a local:
		*/
		for (k$1 in options) context.setLocals(k$1, options[k$1]);
		/**
		* Finally, execute the template:
		*/
		var tmpl = cache$2(context) || cache$2(context, engine.compile(str$4, compileOptions));
		tmpl(context, cb);
	}
	exports.liquid.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.liquid;
			var Liquid;
			try {
				engine = requires.liquid = __require("tinyliquid");
				_renderTinyliquid(engine, str$4, options, cb$1);
				return;
			} catch (err) {
				try {
					Liquid = requires.liquid = __require("liquid-node");
					engine = new Liquid.Engine();
				} catch (err$1) {
					throw err$1;
				}
			}
			try {
				var locals = options.locals || {};
				if (options.meta) {
					locals.pages = options.meta;
					delete options.meta;
				}
				/**
				* Add any defined filters:
				*/
				if (options.filters) {
					engine.registerFilters(options.filters);
					delete options.filters;
				}
				/**
				* Set up a callback for the include directory:
				*/
				var includeDir = options.includeDir || process.cwd();
				engine.fileSystem = new Liquid.LocalFileSystem(includeDir, "liquid");
				delete options.includeDir;
				/**
				* The custom tag functions need to have their results pushed back
				* through the parser, so set up a shim before calling the provided
				* callback:
				*/
				if (options.customTags) {
					var tagFunctions = options.customTags;
					for (k$1 in options.customTags) engine.registerTag(k$1, tagFunctions[k$1]);
					delete options.customTags;
				}
				/**
				* Now anything left in `options` becomes a local:
				*/
				for (var k$1 in options) locals[k$1] = options[k$1];
				/**
				* Finally, execute the template:
				*/
				return engine.parseAndRender(str$4, locals).nodeify(function(err, result) {
					if (err) throw new Error(err);
					else return cb$1(null, result);
				});
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Jade support.
	*/
	exports.jade = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.jade;
			if (!engine) try {
				engine = requires.jade = __require("jade");
			} catch (err) {
				try {
					engine = requires.jade = __require("then-jade");
				} catch (otherError) {
					throw err;
				}
			}
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compileFile(path$28, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Jade string support.
	*/
	exports.jade.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.jade;
			if (!engine) try {
				engine = requires.jade = __require("jade");
			} catch (err) {
				try {
					engine = requires.jade = __require("then-jade");
				} catch (otherError) {
					throw err;
				}
			}
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Dust support.
	*/
	exports.dust = fromStringRenderer("dust");
	/**
	* Dust string support.
	*/
	exports.dust.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.dust;
			if (!engine) try {
				engine = requires.dust = __require("dust");
			} catch (err) {
				try {
					engine = requires.dust = __require("dustjs-helpers");
				} catch (err$1) {
					engine = requires.dust = __require("dustjs-linkedin");
				}
			}
			var ext$1 = "dust";
			var views = ".";
			if (options) {
				if (options.ext) ext$1 = options.ext;
				if (options.views) views = options.views;
				if (options.settings && options.settings.views) views = options.settings.views;
			}
			if (!options || options && !options.cache) engine.cache = {};
			engine.onLoad = function(path$28, callback) {
				if (extname(path$28) === "") path$28 += "." + ext$1;
				if (path$28[0] !== "/") path$28 = views + "/" + path$28;
				read(path$28, options, callback);
			};
			try {
				var templateName;
				if (options.filename) templateName = options.filename.replace(new RegExp("^" + views + "/"), "").replace(new RegExp("\\." + ext$1), "");
				var tmpl = cache$2(options) || cache$2(options, engine.compileFn(str$4, templateName));
				tmpl(options, cb$1);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Swig support.
	*/
	exports.swig = fromStringRenderer("swig");
	/**
	* Swig string support.
	*/
	exports.swig.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.swig;
			if (!engine) try {
				engine = requires.swig = __require("swig");
			} catch (err) {
				try {
					engine = requires.swig = __require("swig-templates");
				} catch (otherError) {
					throw err;
				}
			}
			try {
				if (options.cache === true) options.cache = "memory";
				engine.setDefaults({ cache: options.cache });
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Razor support.
	*/
	exports.razor = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.razor;
			if (!engine) try {
				engine = requires.razor = __require("razor-tmpl");
			} catch (err) {
				throw err;
			}
			try {
				var tmpl = cache$2(options) || cache$2(options, (locals) => {
					console.log("Rendering razor file", path$28);
					return engine.renderFileSync(path$28, locals);
				});
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* razor string support.
	*/
	exports.razor.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			try {
				var engine = requires.razor = __require("razor-tmpl");
			} catch (err) {
				throw err;
			}
			try {
				var tf = engine.compile(str$4);
				var tmpl = cache$2(options) || cache$2(options, tf);
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Atpl support.
	*/
	exports.atpl = fromStringRenderer("atpl");
	/**
	* Atpl string support.
	*/
	exports.atpl.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.atpl || (requires.atpl = __require("atpl"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Liquor support,
	*/
	exports.liquor = fromStringRenderer("liquor");
	/**
	* Liquor string support.
	*/
	exports.liquor.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.liquor || (requires.liquor = __require("liquor"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Twig support.
	*/
	exports.twig = fromStringRenderer("twig");
	/**
	* Twig string support.
	*/
	exports.twig.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.twig || (requires.twig = __require("twig").twig);
			var templateData = {
				data: str$4,
				allowInlineIncludes: options.allowInlineIncludes,
				namespaces: options.namespaces,
				path: options.path
			};
			try {
				var tmpl = cache$2(templateData) || cache$2(templateData, engine(templateData));
				cb$1(null, tmpl.render(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* EJS support.
	*/
	exports.ejs = fromStringRenderer("ejs");
	/**
	* EJS string support.
	*/
	exports.ejs.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.ejs || (requires.ejs = __require("ejs"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Eco support.
	*/
	exports.eco = fromStringRenderer("eco");
	/**
	* Eco string support.
	*/
	exports.eco.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.eco || (requires.eco = __require("eco"));
			try {
				cb$1(null, engine.render(str$4, options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Jazz support.
	*/
	exports.jazz = fromStringRenderer("jazz");
	/**
	* Jazz string support.
	*/
	exports.jazz.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.jazz || (requires.jazz = __require("jazz"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				tmpl.eval(options, function(str$5) {
					cb$1(null, str$5);
				});
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* JQTPL support.
	*/
	exports.jqtpl = fromStringRenderer("jqtpl");
	/**
	* JQTPL string support.
	*/
	exports.jqtpl.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.jqtpl || (requires.jqtpl = __require("jqtpl"));
			try {
				engine.template(str$4, str$4);
				cb$1(null, engine.tmpl(str$4, options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Haml support.
	*/
	exports.haml = fromStringRenderer("haml");
	/**
	* Haml string support.
	*/
	exports.haml.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.haml || (requires.haml = __require("hamljs"));
			try {
				options.locals = options;
				cb$1(null, engine.render(str$4, options).trimLeft());
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Hamlet support.
	*/
	exports.hamlet = fromStringRenderer("hamlet");
	/**
	* Hamlet string support.
	*/
	exports.hamlet.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.hamlet || (requires.hamlet = __require("hamlet"));
			try {
				options.locals = options;
				cb$1(null, engine.render(str$4, options).trimLeft());
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Whiskers support.
	*/
	exports.whiskers = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.whiskers || (requires.whiskers = __require("whiskers"));
			engine.__express(path$28, options, cb$1);
		});
	};
	/**
	* Whiskers string support.
	*/
	exports.whiskers.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.whiskers || (requires.whiskers = __require("whiskers"));
			try {
				cb$1(null, engine.render(str$4, options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Coffee-HAML support.
	*/
	exports["haml-coffee"] = fromStringRenderer("haml-coffee");
	/**
	* Coffee-HAML string support.
	*/
	exports["haml-coffee"].render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires["haml-coffee"] || (requires["haml-coffee"] = __require("haml-coffee"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Hogan support.
	*/
	exports.hogan = fromStringRenderer("hogan");
	/**
	* Hogan string support.
	*/
	exports.hogan.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.hogan || (requires.hogan = __require("hogan.js"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl.render(options, options.partials));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* templayed.js support.
	*/
	exports.templayed = fromStringRenderer("templayed");
	/**
	* templayed.js string support.
	*/
	exports.templayed.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.templayed || (requires.templayed = __require("templayed"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine(str$4));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Handlebars support.
	*/
	exports.handlebars = fromStringRenderer("handlebars");
	/**
	* Handlebars string support.
	*/
	exports.handlebars.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.handlebars || (requires.handlebars = require_lib$16());
			try {
				for (var partial in options.partials) engine.registerPartial(partial, options.partials[partial]);
				for (var helper in options.helpers) engine.registerHelper(helper, options.helpers[helper]);
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Underscore support.
	*/
	exports.underscore = fromStringRenderer("underscore");
	/**
	* Underscore string support.
	*/
	exports.underscore.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.underscore || (requires.underscore = require_underscore());
			try {
				const partials = {};
				for (var partial in options.partials) partials[partial] = engine.template(options.partials[partial]);
				options.partials = partials;
				var tmpl = cache$2(options) || cache$2(options, engine.template(str$4, null, options));
				cb$1(null, tmpl(options).replace(/\n$/, ""));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Lodash support.
	*/
	exports.lodash = fromStringRenderer("lodash");
	/**
	* Lodash string support.
	*/
	exports.lodash.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.lodash || (requires.lodash = require_lodash$1());
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.template(str$4, options));
				cb$1(null, tmpl(options).replace(/\n$/, ""));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Pug support. (formerly Jade)
	*/
	exports.pug = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.pug;
			if (!engine) try {
				engine = requires.pug = __require("pug");
			} catch (err) {
				try {
					engine = requires.pug = __require("then-pug");
				} catch (otherError) {
					throw err;
				}
			}
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compileFile(path$28, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Pug string support.
	*/
	exports.pug.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.pug;
			if (!engine) try {
				engine = requires.pug = __require("pug");
			} catch (err) {
				try {
					engine = requires.pug = __require("then-pug");
				} catch (otherError) {
					throw err;
				}
			}
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* QEJS support.
	*/
	exports.qejs = fromStringRenderer("qejs");
	/**
	* QEJS string support.
	*/
	exports.qejs.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			try {
				var engine = requires.qejs || (requires.qejs = __require("qejs"));
				engine.render(str$4, options).then(function(result) {
					cb$1(null, result);
				}, function(err) {
					cb$1(err);
				}).done();
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Walrus support.
	*/
	exports.walrus = fromStringRenderer("walrus");
	/**
	* Walrus string support.
	*/
	exports.walrus.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.walrus || (requires.walrus = __require("walrus"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.parse(str$4));
				cb$1(null, tmpl.compile(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Mustache support.
	*/
	exports.mustache = fromStringRenderer("mustache");
	/**
	* Mustache string support.
	*/
	exports.mustache.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.mustache || (requires.mustache = __require("mustache"));
			try {
				cb$1(null, engine.render(str$4, options, options.partials));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Just support.
	*/
	exports.just = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.just;
			if (!engine) {
				var JUST = __require("just");
				engine = requires.just = new JUST();
			}
			engine.configure({ useCache: options.cache });
			engine.render(path$28, options, cb$1);
		});
	};
	/**
	* Just string support.
	*/
	exports.just.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var JUST = __require("just");
			var engine = new JUST({ root: { page: str$4 } });
			engine.render("page", options, cb$1);
		});
	};
	/**
	* ECT support.
	*/
	exports.ect = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.ect;
			if (!engine) {
				var ECT = __require("ect");
				engine = requires.ect = new ECT(options);
			}
			engine.configure({ cache: options.cache });
			engine.render(path$28, options, cb$1);
		});
	};
	/**
	* ECT string support.
	*/
	exports.ect.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var ECT = __require("ect");
			var engine = new ECT({ root: { page: str$4 } });
			engine.render("page", options, cb$1);
		});
	};
	/**
	* mote support.
	*/
	exports.mote = fromStringRenderer("mote");
	/**
	* mote string support.
	*/
	exports.mote.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.mote || (requires.mote = __require("mote"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Toffee support.
	*/
	exports.toffee = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var toffee = requires.toffee || (requires.toffee = __require("toffee"));
			toffee.__consolidate_engine_render(path$28, options, cb$1);
		});
	};
	/**
	* Toffee string support.
	*/
	exports.toffee.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.toffee || (requires.toffee = __require("toffee"));
			try {
				engine.str_render(str$4, options, cb$1);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* doT support.
	*/
	exports.dot = fromStringRenderer("dot");
	/**
	* doT string support.
	*/
	exports.dot.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.dot || (requires.dot = __require("dot"));
			var extend$4 = requires.extend || (requires.extend = __require("util")._extend);
			try {
				var settings = {};
				settings = extend$4(settings, engine.templateSettings);
				settings = extend$4(settings, options ? options.dot : {});
				var tmpl = cache$2(options) || cache$2(options, engine.template(str$4, settings, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* bracket support.
	*/
	exports.bracket = fromStringRenderer("bracket");
	/**
	* bracket string support.
	*/
	exports.bracket.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.bracket || (requires.bracket = __require("bracket-template"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.default.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Ractive support.
	*/
	exports.ractive = fromStringRenderer("ractive");
	/**
	* Ractive string support.
	*/
	exports.ractive.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var Engine = requires.ractive || (requires.ractive = __require("ractive"));
			var template$1 = cache$2(options) || cache$2(options, Engine.parse(str$4));
			options.template = template$1;
			if (options.data === null || options.data === void 0) {
				var extend$4 = requires.extend || (requires.extend = __require("util")._extend);
				options.data = extend$4({}, options);
				var i$6;
				var length;
				var properties = [
					"template",
					"filename",
					"cache",
					"partials"
				];
				for (i$6 = 0, length = properties.length; i$6 < length; i$6++) {
					var property = properties[i$6];
					delete options.data[property];
				}
			}
			try {
				cb$1(null, new Engine(options).toHTML());
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Nunjucks support.
	*/
	exports.nunjucks = fromStringRenderer("nunjucks");
	/**
	* Nunjucks string support.
	*/
	exports.nunjucks.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			try {
				var engine = options.nunjucksEnv || requires.nunjucks || (requires.nunjucks = __require("nunjucks"));
				var env$3 = engine;
				if (options.settings && options.settings.views) env$3 = engine.configure(options.settings.views);
				else if (options.nunjucks && options.nunjucks.configure) env$3 = engine.configure.apply(engine, options.nunjucks.configure);
				if (options.loader) env$3 = new engine.Environment(options.loader);
				else if (options.settings && options.settings.views) env$3 = new engine.Environment(new engine.FileSystemLoader(options.settings.views));
				else if (options.nunjucks && options.nunjucks.loader) if (typeof options.nunjucks.loader === "string") env$3 = new engine.Environment(new engine.FileSystemLoader(options.nunjucks.loader));
				else env$3 = new engine.Environment(new engine.FileSystemLoader(options.nunjucks.loader[0], options.nunjucks.loader[1]));
				env$3.renderString(str$4, options, cb$1);
			} catch (err) {
				throw cb$1(err);
			}
		});
	};
	/**
	* HTMLing support.
	*/
	exports.htmling = fromStringRenderer("htmling");
	/**
	* HTMLing string support.
	*/
	exports.htmling.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.htmling || (requires.htmling = __require("htmling"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.string(str$4));
				cb$1(null, tmpl.render(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	*  Rendering function
	*/
	function requireReact(module$1, filename) {
		var babel = requires.babel || (requires.babel = __require("babel-core"));
		var compiled = babel.transformFileSync(filename, { presets: ["react"] }).code;
		return module$1._compile(compiled, filename);
	}
	exports.requireReact = requireReact;
	/**
	*  Converting a string into a node module.
	*/
	function requireReactString(src, filename) {
		var babel = requires.babel || (requires.babel = __require("babel-core"));
		if (!filename) filename = "";
		var m$2 = new module.constructor();
		filename = filename || "";
		var compiled = babel.transform(src, { presets: ["react"] }).code;
		m$2.paths = module.paths;
		m$2._compile(compiled, filename);
		return m$2.exports;
	}
	/**
	* A naive helper to replace {{tags}} with options.tags content
	*/
	function reactBaseTmpl(data$2, options) {
		var exp$1;
		var regex;
		for (var k$1 in options) if (options.hasOwnProperty(k$1)) {
			exp$1 = "{{" + k$1 + "}}";
			regex = new RegExp(exp$1, "g");
			if (data$2.match(regex)) data$2 = data$2.replace(regex, options[k$1]);
		}
		return data$2;
	}
	/**
	* Plates Support.
	*/
	exports.plates = fromStringRenderer("plates");
	/**
	* Plates string support.
	*/
	exports.plates.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.plates || (requires.plates = __require("plates"));
			var map = options.map || void 0;
			try {
				var tmpl = engine.bind(str$4, options, map);
				cb$1(null, tmpl);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	*  The main render parser for React bsaed templates
	*/
	function reactRenderer(type) {
		if (__require.extensions) {
			if (!__require.extensions[".jsx"]) __require.extensions[".jsx"] = requireReact;
			if (!__require.extensions[".react"]) __require.extensions[".react"] = requireReact;
		}
		return function(str$4, options, cb) {
			return promisify(cb, function(cb$1) {
				var ReactDOM = requires.ReactDOM || (requires.ReactDOM = __require("react-dom/server"));
				var react$3 = requires.react || (requires.react = __require("react"));
				var base$1 = options.base;
				delete options.base;
				var enableCache = options.cache;
				delete options.cache;
				var isNonStatic = options.isNonStatic;
				delete options.isNonStatic;
				try {
					var Code;
					var Factory;
					var baseStr;
					var content;
					var parsed;
					if (!cache$2(options)) {
						if (type === "path") {
							var path$28 = resolve$2(str$4);
							delete __require.cache[path$28];
							Code = __require(path$28);
						} else Code = requireReactString(str$4);
						Factory = cache$2(options, react$3.createFactory(Code));
					} else Factory = cache$2(options);
					parsed = new Factory(options);
					content = isNonStatic ? ReactDOM.renderToString(parsed) : ReactDOM.renderToStaticMarkup(parsed);
					if (base$1) {
						baseStr = readCache[str$4] || fs$3.readFileSync(resolve$2(base$1), "utf8");
						if (enableCache) readCache[str$4] = baseStr;
						options.content = content;
						content = reactBaseTmpl(baseStr, options);
					}
					cb$1(null, content);
				} catch (err) {
					cb$1(err);
				}
			});
		};
	}
	/**
	* React JS Support
	*/
	exports.react = reactRenderer("path");
	/**
	* React JS string support.
	*/
	exports.react.render = reactRenderer("string");
	/**
	* ARC-templates support.
	*/
	exports["arc-templates"] = fromStringRenderer("arc-templates");
	/**
	* ARC-templates string support.
	*/
	exports["arc-templates"].render = function(str$4, options, cb) {
		var readFileWithOptions = Promise$1.promisify(read);
		var consolidateFileSystem = {};
		consolidateFileSystem.readFile = function(path$28) {
			return readFileWithOptions(path$28, options);
		};
		return promisify(cb, function(cb$1) {
			try {
				var engine = requires["arc-templates"];
				if (!engine) {
					var Engine = __require("arc-templates/dist/es5");
					engine = requires["arc-templates"] = new Engine({ filesystem: consolidateFileSystem });
				}
				var compiler = cache$2(options) || cache$2(options, engine.compileString(str$4, options.filename));
				compiler.then(function(func) {
					return func(options);
				}).then(function(result) {
					cb$1(null, result.content);
				}).catch(cb$1);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Vash support
	*/
	exports.vash = fromStringRenderer("vash");
	/**
	* Vash string support
	*/
	exports.vash.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.vash || (requires.vash = __require("vash"));
			try {
				if (options.helpers) for (var key in options.helpers) {
					if (!options.helpers.hasOwnProperty(key) || typeof options.helpers[key] !== "function") continue;
					engine.helpers[key] = options.helpers[key];
				}
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				tmpl(options, function sealLayout(err, ctx) {
					if (err) cb$1(err);
					ctx.finishLayout();
					cb$1(null, ctx.toString().replace(/\n$/, ""));
				});
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Slm support.
	*/
	exports.slm = fromStringRenderer("slm");
	/**
	* Slm string support.
	*/
	exports.slm.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.slm || (requires.slm = __require("slm"));
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.compile(str$4, options));
				cb$1(null, tmpl(options));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Marko support.
	*/
	exports.marko = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.marko || (requires.marko = __require("marko"));
			options.writeToDisk = !!options.cache;
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.load(path$28, options));
				tmpl.renderToString(options, cb$1);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Marko string support.
	*/
	exports.marko.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.marko || (requires.marko = __require("marko"));
			options.writeToDisk = !!options.cache;
			options.filename = options.filename || "string.marko";
			try {
				var tmpl = cache$2(options) || cache$2(options, engine.load(options.filename, str$4, options));
				tmpl.renderToString(options, cb$1);
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Teacup support.
	*/
	exports.teacup = function(path$28, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.teacup || (requires.teacup = __require("teacup/lib/express"));
			__require.extensions[".teacup"] = __require.extensions[".coffee"];
			if (path$28[0] !== "/") path$28 = join(process.cwd(), path$28);
			if (!options.cache) {
				var callback = cb$1;
				cb$1 = function() {
					delete __require.cache[path$28];
					callback.apply(this, arguments);
				};
			}
			engine.renderFile(path$28, options, cb$1);
		});
	};
	/**
	* Teacup string support.
	*/
	exports.teacup.render = function(str$4, options, cb) {
		var coffee = __require("coffee-script");
		var vm = __require("vm");
		var sandbox = {
			module: { exports: {} },
			require: __require
		};
		return promisify(cb, function(cb$1) {
			vm.runInNewContext(coffee.compile(str$4), sandbox);
			var tmpl = sandbox.module.exports;
			cb$1(null, tmpl(options));
		});
	};
	/**
	* Squirrelly support.
	*/
	exports.squirrelly = fromStringRenderer("squirrelly");
	/**
	* Squirrelly string support.
	*/
	exports.squirrelly.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.squirrelly || (requires.squirrelly = __require("squirrelly"));
			try {
				for (var partial in options.partials) engine.definePartial(partial, options.partials[partial]);
				for (var helper in options.helpers) engine.defineHelper(helper, options.helpers[helper]);
				var tmpl = cache$2(options) || cache$2(options, engine.Compile(str$4, options));
				cb$1(null, tmpl(options, engine));
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* Twing support.
	*/
	exports.twing = fromStringRenderer("twing");
	/**
	* Twing string support.
	*/
	exports.twing.render = function(str$4, options, cb) {
		return promisify(cb, function(cb$1) {
			var engine = requires.twing || (requires.twing = __require("twing"));
			try {
				new engine.TwingEnvironment(new engine.TwingLoaderNull()).createTemplate(str$4).then((twingTemplate) => {
					twingTemplate.render(options).then((rendTmpl) => {
						var tmpl = cache$2(options) || cache$2(options, rendTmpl);
						cb$1(null, tmpl);
					});
				});
			} catch (err) {
				cb$1(err);
			}
		});
	};
	/**
	* expose the instance of the engine
	*/
	exports.requires = requires;
} });

//#endregion
//#region node_modules/consolidate/index.js
var require_consolidate = __commonJS({ "node_modules/consolidate/index.js"(exports, module) {
	module.exports = require_consolidate$1();
} });

//#endregion
//#region node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS({ "node_modules/lodash.camelcase/index.js"(exports, module) {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** Used as references for various `Number` constants. */
	var INFINITY = Infinity;
	/** `Object#toString` result references. */
	var symbolTag = "[object Symbol]";
	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	/** Used to compose unicode character classes. */
	var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23", rsComboSymbolsRange = "\\u20d0-\\u20f0", rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	/** Used to compose unicode capture groups. */
	var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
	/** Used to compose unicode regexes. */
	var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")", rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
		rsNonAstral,
		rsRegional,
		rsSurrPair
	].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
		rsDingbat,
		rsRegional,
		rsSurrPair
	].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
		rsNonAstral + rsCombo + "?",
		rsCombo,
		rsRegional,
		rsSurrPair,
		rsAstral
	].join("|") + ")";
	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, "g");
	/**
	* Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	* [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	*/
	var reComboMark = RegExp(rsCombo, "g");
	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
		rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [
			rsBreak,
			rsUpper,
			"$"
		].join("|") + ")",
		rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [
			rsBreak,
			rsUpper + rsLowerMisc,
			"$"
		].join("|") + ")",
		rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
		rsUpper + "+" + rsOptUpperContr,
		rsDigits,
		rsEmoji
	].join("|"), "g");
	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
		"À": "A",
		"Á": "A",
		"Â": "A",
		"Ã": "A",
		"Ä": "A",
		"Å": "A",
		"à": "a",
		"á": "a",
		"â": "a",
		"ã": "a",
		"ä": "a",
		"å": "a",
		"Ç": "C",
		"ç": "c",
		"Ð": "D",
		"ð": "d",
		"È": "E",
		"É": "E",
		"Ê": "E",
		"Ë": "E",
		"è": "e",
		"é": "e",
		"ê": "e",
		"ë": "e",
		"Ì": "I",
		"Í": "I",
		"Î": "I",
		"Ï": "I",
		"ì": "i",
		"í": "i",
		"î": "i",
		"ï": "i",
		"Ñ": "N",
		"ñ": "n",
		"Ò": "O",
		"Ó": "O",
		"Ô": "O",
		"Õ": "O",
		"Ö": "O",
		"Ø": "O",
		"ò": "o",
		"ó": "o",
		"ô": "o",
		"õ": "o",
		"ö": "o",
		"ø": "o",
		"Ù": "U",
		"Ú": "U",
		"Û": "U",
		"Ü": "U",
		"ù": "u",
		"ú": "u",
		"û": "u",
		"ü": "u",
		"Ý": "Y",
		"ý": "y",
		"ÿ": "y",
		"Æ": "Ae",
		"æ": "ae",
		"Þ": "Th",
		"þ": "th",
		"ß": "ss",
		"Ā": "A",
		"Ă": "A",
		"Ą": "A",
		"ā": "a",
		"ă": "a",
		"ą": "a",
		"Ć": "C",
		"Ĉ": "C",
		"Ċ": "C",
		"Č": "C",
		"ć": "c",
		"ĉ": "c",
		"ċ": "c",
		"č": "c",
		"Ď": "D",
		"Đ": "D",
		"ď": "d",
		"đ": "d",
		"Ē": "E",
		"Ĕ": "E",
		"Ė": "E",
		"Ę": "E",
		"Ě": "E",
		"ē": "e",
		"ĕ": "e",
		"ė": "e",
		"ę": "e",
		"ě": "e",
		"Ĝ": "G",
		"Ğ": "G",
		"Ġ": "G",
		"Ģ": "G",
		"ĝ": "g",
		"ğ": "g",
		"ġ": "g",
		"ģ": "g",
		"Ĥ": "H",
		"Ħ": "H",
		"ĥ": "h",
		"ħ": "h",
		"Ĩ": "I",
		"Ī": "I",
		"Ĭ": "I",
		"Į": "I",
		"İ": "I",
		"ĩ": "i",
		"ī": "i",
		"ĭ": "i",
		"į": "i",
		"ı": "i",
		"Ĵ": "J",
		"ĵ": "j",
		"Ķ": "K",
		"ķ": "k",
		"ĸ": "k",
		"Ĺ": "L",
		"Ļ": "L",
		"Ľ": "L",
		"Ŀ": "L",
		"Ł": "L",
		"ĺ": "l",
		"ļ": "l",
		"ľ": "l",
		"ŀ": "l",
		"ł": "l",
		"Ń": "N",
		"Ņ": "N",
		"Ň": "N",
		"Ŋ": "N",
		"ń": "n",
		"ņ": "n",
		"ň": "n",
		"ŋ": "n",
		"Ō": "O",
		"Ŏ": "O",
		"Ő": "O",
		"ō": "o",
		"ŏ": "o",
		"ő": "o",
		"Ŕ": "R",
		"Ŗ": "R",
		"Ř": "R",
		"ŕ": "r",
		"ŗ": "r",
		"ř": "r",
		"Ś": "S",
		"Ŝ": "S",
		"Ş": "S",
		"Š": "S",
		"ś": "s",
		"ŝ": "s",
		"ş": "s",
		"š": "s",
		"Ţ": "T",
		"Ť": "T",
		"Ŧ": "T",
		"ţ": "t",
		"ť": "t",
		"ŧ": "t",
		"Ũ": "U",
		"Ū": "U",
		"Ŭ": "U",
		"Ů": "U",
		"Ű": "U",
		"Ų": "U",
		"ũ": "u",
		"ū": "u",
		"ŭ": "u",
		"ů": "u",
		"ű": "u",
		"ų": "u",
		"Ŵ": "W",
		"ŵ": "w",
		"Ŷ": "Y",
		"ŷ": "y",
		"Ÿ": "Y",
		"Ź": "Z",
		"Ż": "Z",
		"Ž": "Z",
		"ź": "z",
		"ż": "z",
		"ž": "z",
		"Ĳ": "IJ",
		"ĳ": "ij",
		"Œ": "Oe",
		"œ": "oe",
		"ŉ": "'n",
		"ſ": "ss"
	};
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
	/** Detect free variable `self`. */
	var freeSelf = typeof self == "object" && self && self.Object === Object && self;
	/** Used as a reference to the global object. */
	var root$2 = freeGlobal || freeSelf || Function("return this")();
	/**
	* A specialized version of `_.reduce` for arrays without support for
	* iteratee shorthands.
	*
	* @private
	* @param {Array} [array] The array to iterate over.
	* @param {Function} iteratee The function invoked per iteration.
	* @param {*} [accumulator] The initial value.
	* @param {boolean} [initAccum] Specify using the first element of `array` as
	*  the initial value.
	* @returns {*} Returns the accumulated value.
	*/
	function arrayReduce(array, iteratee, accumulator, initAccum) {
		var index$1 = -1, length = array ? array.length : 0;
		if (initAccum && length) accumulator = array[++index$1];
		while (++index$1 < length) accumulator = iteratee(accumulator, array[index$1], index$1, array);
		return accumulator;
	}
	/**
	* Converts an ASCII `string` to an array.
	*
	* @private
	* @param {string} string The string to convert.
	* @returns {Array} Returns the converted array.
	*/
	function asciiToArray(string$3) {
		return string$3.split("");
	}
	/**
	* Splits an ASCII `string` into an array of its words.
	*
	* @private
	* @param {string} The string to inspect.
	* @returns {Array} Returns the words of `string`.
	*/
	function asciiWords(string$3) {
		return string$3.match(reAsciiWord) || [];
	}
	/**
	* The base implementation of `_.propertyOf` without support for deep paths.
	*
	* @private
	* @param {Object} object The object to query.
	* @returns {Function} Returns the new accessor function.
	*/
	function basePropertyOf(object$2) {
		return function(key) {
			return object$2 == null ? void 0 : object$2[key];
		};
	}
	/**
	* Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	* letters to basic Latin letters.
	*
	* @private
	* @param {string} letter The matched letter to deburr.
	* @returns {string} Returns the deburred letter.
	*/
	var deburrLetter = basePropertyOf(deburredLetters);
	/**
	* Checks if `string` contains Unicode symbols.
	*
	* @private
	* @param {string} string The string to inspect.
	* @returns {boolean} Returns `true` if a symbol is found, else `false`.
	*/
	function hasUnicode(string$3) {
		return reHasUnicode.test(string$3);
	}
	/**
	* Checks if `string` contains a word composed of Unicode symbols.
	*
	* @private
	* @param {string} string The string to inspect.
	* @returns {boolean} Returns `true` if a word is found, else `false`.
	*/
	function hasUnicodeWord(string$3) {
		return reHasUnicodeWord.test(string$3);
	}
	/**
	* Converts `string` to an array.
	*
	* @private
	* @param {string} string The string to convert.
	* @returns {Array} Returns the converted array.
	*/
	function stringToArray(string$3) {
		return hasUnicode(string$3) ? unicodeToArray(string$3) : asciiToArray(string$3);
	}
	/**
	* Converts a Unicode `string` to an array.
	*
	* @private
	* @param {string} string The string to convert.
	* @returns {Array} Returns the converted array.
	*/
	function unicodeToArray(string$3) {
		return string$3.match(reUnicode) || [];
	}
	/**
	* Splits a Unicode `string` into an array of its words.
	*
	* @private
	* @param {string} The string to inspect.
	* @returns {Array} Returns the words of `string`.
	*/
	function unicodeWords(string$3) {
		return string$3.match(reUnicodeWord) || [];
	}
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$1 = objectProto.toString;
	/** Built-in value references. */
	var Symbol$1 = root$2.Symbol;
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
	/**
	* The base implementation of `_.slice` without an iteratee call guard.
	*
	* @private
	* @param {Array} array The array to slice.
	* @param {number} [start=0] The start position.
	* @param {number} [end=array.length] The end position.
	* @returns {Array} Returns the slice of `array`.
	*/
	function baseSlice(array, start, end) {
		var index$1 = -1, length = array.length;
		if (start < 0) start = -start > length ? 0 : length + start;
		end = end > length ? length : end;
		if (end < 0) end += length;
		length = start > end ? 0 : end - start >>> 0;
		start >>>= 0;
		var result = Array(length);
		while (++index$1 < length) result[index$1] = array[index$1 + start];
		return result;
	}
	/**
	* The base implementation of `_.toString` which doesn't convert nullish
	* values to empty strings.
	*
	* @private
	* @param {*} value The value to process.
	* @returns {string} Returns the string.
	*/
	function baseToString(value) {
		if (typeof value == "string") return value;
		if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
		var result = value + "";
		return result == "0" && 1 / value == -INFINITY ? "-0" : result;
	}
	/**
	* Casts `array` to a slice if it's needed.
	*
	* @private
	* @param {Array} array The array to inspect.
	* @param {number} start The start position.
	* @param {number} [end=array.length] The end position.
	* @returns {Array} Returns the cast slice.
	*/
	function castSlice(array, start, end) {
		var length = array.length;
		end = end === void 0 ? length : end;
		return !start && end >= length ? array : baseSlice(array, start, end);
	}
	/**
	* Creates a function like `_.lowerFirst`.
	*
	* @private
	* @param {string} methodName The name of the `String` case method to use.
	* @returns {Function} Returns the new case function.
	*/
	function createCaseFirst(methodName) {
		return function(string$3) {
			string$3 = toString$1(string$3);
			var strSymbols = hasUnicode(string$3) ? stringToArray(string$3) : void 0;
			var chr = strSymbols ? strSymbols[0] : string$3.charAt(0);
			var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string$3.slice(1);
			return chr[methodName]() + trailing;
		};
	}
	/**
	* Creates a function like `_.camelCase`.
	*
	* @private
	* @param {Function} callback The function to combine each word.
	* @returns {Function} Returns the new compounder function.
	*/
	function createCompounder(callback) {
		return function(string$3) {
			return arrayReduce(words(deburr(string$3).replace(reApos, "")), callback, "");
		};
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `Symbol` primitive or object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	* @example
	*
	* _.isSymbol(Symbol.iterator);
	* // => true
	*
	* _.isSymbol('abc');
	* // => false
	*/
	function isSymbol(value) {
		return typeof value == "symbol" || isObjectLike(value) && objectToString$1.call(value) == symbolTag;
	}
	/**
	* Converts `value` to a string. An empty string is returned for `null`
	* and `undefined` values. The sign of `-0` is preserved.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to process.
	* @returns {string} Returns the string.
	* @example
	*
	* _.toString(null);
	* // => ''
	*
	* _.toString(-0);
	* // => '-0'
	*
	* _.toString([1, 2, 3]);
	* // => '1,2,3'
	*/
	function toString$1(value) {
		return value == null ? "" : baseToString(value);
	}
	/**
	* Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	*
	* @static
	* @memberOf _
	* @since 3.0.0
	* @category String
	* @param {string} [string=''] The string to convert.
	* @returns {string} Returns the camel cased string.
	* @example
	*
	* _.camelCase('Foo Bar');
	* // => 'fooBar'
	*
	* _.camelCase('--foo-bar--');
	* // => 'fooBar'
	*
	* _.camelCase('__FOO_BAR__');
	* // => 'fooBar'
	*/
	var camelCase = createCompounder(function(result, word$3, index$1) {
		word$3 = word$3.toLowerCase();
		return result + (index$1 ? capitalize(word$3) : word$3);
	});
	/**
	* Converts the first character of `string` to upper case and the remaining
	* to lower case.
	*
	* @static
	* @memberOf _
	* @since 3.0.0
	* @category String
	* @param {string} [string=''] The string to capitalize.
	* @returns {string} Returns the capitalized string.
	* @example
	*
	* _.capitalize('FRED');
	* // => 'Fred'
	*/
	function capitalize(string$3) {
		return upperFirst(toString$1(string$3).toLowerCase());
	}
	/**
	* Deburrs `string` by converting
	* [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	* and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	* letters to basic Latin letters and removing
	* [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	*
	* @static
	* @memberOf _
	* @since 3.0.0
	* @category String
	* @param {string} [string=''] The string to deburr.
	* @returns {string} Returns the deburred string.
	* @example
	*
	* _.deburr('déjà vu');
	* // => 'deja vu'
	*/
	function deburr(string$3) {
		string$3 = toString$1(string$3);
		return string$3 && string$3.replace(reLatin, deburrLetter).replace(reComboMark, "");
	}
	/**
	* Converts the first character of `string` to upper case.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category String
	* @param {string} [string=''] The string to convert.
	* @returns {string} Returns the converted string.
	* @example
	*
	* _.upperFirst('fred');
	* // => 'Fred'
	*
	* _.upperFirst('FRED');
	* // => 'FRED'
	*/
	var upperFirst = createCaseFirst("toUpperCase");
	/**
	* Splits `string` into an array of its words.
	*
	* @static
	* @memberOf _
	* @since 3.0.0
	* @category String
	* @param {string} [string=''] The string to inspect.
	* @param {RegExp|string} [pattern] The pattern to match words.
	* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	* @returns {Array} Returns the words of `string`.
	* @example
	*
	* _.words('fred, barney, & pebbles');
	* // => ['fred', 'barney', 'pebbles']
	*
	* _.words('fred, barney, & pebbles', /[^, ]+/g);
	* // => ['fred', 'barney', '&', 'pebbles']
	*/
	function words(string$3, pattern, guard) {
		string$3 = toString$1(string$3);
		pattern = guard ? void 0 : pattern;
		if (pattern === void 0) return hasUnicodeWord(string$3) ? unicodeWords(string$3) : asciiWords(string$3);
		return string$3.match(pattern) || [];
	}
	module.exports = camelCase;
} });

//#endregion
//#region node_modules/loader-utils/lib/hash/wasm-hash.js
var require_wasm_hash = __commonJS({ "node_modules/loader-utils/lib/hash/wasm-hash.js"(exports, module) {
	const MAX_SHORT_STRING$1 = Math.floor(65472 / 4) & -4;
	var WasmHash = class {
		/**
		* @param {WebAssembly.Instance} instance wasm instance
		* @param {WebAssembly.Instance[]} instancesPool pool of instances
		* @param {number} chunkSize size of data chunks passed to wasm
		* @param {number} digestSize size of digest returned by wasm
		*/
		constructor(instance, instancesPool, chunkSize, digestSize) {
			const exports$1 = instance.exports;
			exports$1.init();
			this.exports = exports$1;
			this.mem = Buffer.from(exports$1.memory.buffer, 0, 65536);
			this.buffered = 0;
			this.instancesPool = instancesPool;
			this.chunkSize = chunkSize;
			this.digestSize = digestSize;
		}
		reset() {
			this.buffered = 0;
			this.exports.init();
		}
		/**
		* @param {Buffer | string} data data
		* @param {BufferEncoding=} encoding encoding
		* @returns {this} itself
		*/
		update(data$2, encoding) {
			if (typeof data$2 === "string") {
				while (data$2.length > MAX_SHORT_STRING$1) {
					this._updateWithShortString(data$2.slice(0, MAX_SHORT_STRING$1), encoding);
					data$2 = data$2.slice(MAX_SHORT_STRING$1);
				}
				this._updateWithShortString(data$2, encoding);
				return this;
			}
			this._updateWithBuffer(data$2);
			return this;
		}
		/**
		* @param {string} data data
		* @param {BufferEncoding=} encoding encoding
		* @returns {void}
		*/
		_updateWithShortString(data$2, encoding) {
			const { exports: exports$1, buffered, mem, chunkSize } = this;
			let endPos;
			if (data$2.length < 70) if (!encoding || encoding === "utf-8" || encoding === "utf8") {
				endPos = buffered;
				for (let i$6 = 0; i$6 < data$2.length; i$6++) {
					const cc = data$2.charCodeAt(i$6);
					if (cc < 128) mem[endPos++] = cc;
					else if (cc < 2048) {
						mem[endPos] = cc >> 6 | 192;
						mem[endPos + 1] = cc & 63 | 128;
						endPos += 2;
					} else {
						endPos += mem.write(data$2.slice(i$6), endPos, encoding);
						break;
					}
				}
			} else if (encoding === "latin1") {
				endPos = buffered;
				for (let i$6 = 0; i$6 < data$2.length; i$6++) {
					const cc = data$2.charCodeAt(i$6);
					mem[endPos++] = cc;
				}
			} else endPos = buffered + mem.write(data$2, buffered, encoding);
			else endPos = buffered + mem.write(data$2, buffered, encoding);
			if (endPos < chunkSize) this.buffered = endPos;
			else {
				const l$1 = endPos & ~(this.chunkSize - 1);
				exports$1.update(l$1);
				const newBuffered = endPos - l$1;
				this.buffered = newBuffered;
				if (newBuffered > 0) mem.copyWithin(0, l$1, endPos);
			}
		}
		/**
		* @param {Buffer} data data
		* @returns {void}
		*/
		_updateWithBuffer(data$2) {
			const { exports: exports$1, buffered, mem } = this;
			const length = data$2.length;
			if (buffered + length < this.chunkSize) {
				data$2.copy(mem, buffered, 0, length);
				this.buffered += length;
			} else {
				const l$1 = buffered + length & ~(this.chunkSize - 1);
				if (l$1 > 65536) {
					let i$6 = 65536 - buffered;
					data$2.copy(mem, buffered, 0, i$6);
					exports$1.update(65536);
					const stop$1 = l$1 - buffered - 65536;
					while (i$6 < stop$1) {
						data$2.copy(mem, 0, i$6, i$6 + 65536);
						exports$1.update(65536);
						i$6 += 65536;
					}
					data$2.copy(mem, 0, i$6, l$1 - buffered);
					exports$1.update(l$1 - buffered - i$6);
				} else {
					data$2.copy(mem, buffered, 0, l$1 - buffered);
					exports$1.update(l$1);
				}
				const newBuffered = length + buffered - l$1;
				this.buffered = newBuffered;
				if (newBuffered > 0) data$2.copy(mem, 0, length - newBuffered, length);
			}
		}
		digest(type) {
			const { exports: exports$1, buffered, mem, digestSize } = this;
			exports$1.final(buffered);
			this.instancesPool.push(this);
			const hex$3 = mem.toString("latin1", 0, digestSize);
			if (type === "hex") return hex$3;
			if (type === "binary" || !type) return Buffer.from(hex$3, "hex");
			return Buffer.from(hex$3, "hex").toString(type);
		}
	};
	const create$2 = (wasmModule, instancesPool, chunkSize, digestSize) => {
		if (instancesPool.length > 0) {
			const old$2 = instancesPool.pop();
			old$2.reset();
			return old$2;
		} else return new WasmHash(new WebAssembly.Instance(wasmModule), instancesPool, chunkSize, digestSize);
	};
	module.exports = create$2;
	module.exports.MAX_SHORT_STRING = MAX_SHORT_STRING$1;
} });

//#endregion
//#region node_modules/loader-utils/lib/hash/xxhash64.js
var require_xxhash64 = __commonJS({ "node_modules/loader-utils/lib/hash/xxhash64.js"(exports, module) {
	const create$1 = require_wasm_hash();
	const xxhash64 = new WebAssembly.Module(Buffer.from(
		// 1173 bytes
		"AGFzbQEAAAABCAJgAX8AYAAAAwQDAQAABQMBAAEGGgV+AUIAC34BQgALfgFCAAt+AUIAC34BQgALByIEBGluaXQAAAZ1cGRhdGUAAQVmaW5hbAACBm1lbW9yeQIACrUIAzAAQtbrgu7q/Yn14AAkAELP1tO+0ser2UIkAUIAJAJC+erQ0OfJoeThACQDQgAkBAvUAQIBfwR+IABFBEAPCyMEIACtfCQEIwAhAiMBIQMjAiEEIwMhBQNAIAIgASkDAELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiECIAMgASkDCELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEDIAQgASkDEELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEEIAUgASkDGELP1tO+0ser2UJ+fEIfiUKHla+vmLbem55/fiEFIAAgAUEgaiIBSw0ACyACJAAgAyQBIAQkAiAFJAMLqwYCAX8EfiMEQgBSBH4jACICQgGJIwEiA0IHiXwjAiIEQgyJfCMDIgVCEol8IAJCz9bTvtLHq9lCfkIfiUKHla+vmLbem55/foVCh5Wvr5i23puef35CnaO16oOxjYr6AH0gA0LP1tO+0ser2UJ+Qh+JQoeVr6+Ytt6bnn9+hUKHla+vmLbem55/fkKdo7Xqg7GNivoAfSAEQs/W077Sx6vZQn5CH4lCh5Wvr5i23puef36FQoeVr6+Ytt6bnn9+Qp2jteqDsY2K+gB9IAVCz9bTvtLHq9lCfkIfiUKHla+vmLbem55/foVCh5Wvr5i23puef35CnaO16oOxjYr6AH0FQsXP2bLx5brqJwsjBCAArXx8IQIDQCABQQhqIABNBEAgAiABKQMAQs/W077Sx6vZQn5CH4lCh5Wvr5i23puef36FQhuJQoeVr6+Ytt6bnn9+Qp2jteqDsY2K+gB9IQIgAUEIaiEBDAELCyABQQRqIABNBEACfyACIAE1AgBCh5Wvr5i23puef36FQheJQs/W077Sx6vZQn5C+fPd8Zn2masWfCECIAFBBGoLIQELA0AgACABRwRAIAIgATEAAELFz9my8eW66id+hUILiUKHla+vmLbem55/fiECIAFBAWohAQwBCwtBACACIAJCIYiFQs/W077Sx6vZQn4iAiACQh2IhUL5893xmfaZqxZ+IgIgAkIgiIUiAkIgiCIDQv//A4NCIIYgA0KAgPz/D4NCEIiEIgNC/4GAgPAfg0IQhiADQoD+g4CA4D+DQgiIhCIDQo+AvIDwgcAHg0IIhiADQvCBwIeAnoD4AINCBIiEIgNChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IANCsODAgYOGjJgwhHw3AwBBCCACQv////8PgyICQv//A4NCIIYgAkKAgPz/D4NCEIiEIgJC/4GAgPAfg0IQhiACQoD+g4CA4D+DQgiIhCICQo+AvIDwgcAHg0IIhiACQvCBwIeAnoD4AINCBIiEIgJChoyYsODAgYMGfEIEiEKBgoSIkKDAgAGDQid+IAJCsODAgYOGjJgwhHw3AwAL",
		"base64"
));
	module.exports = create$1.bind(null, xxhash64, [], 32, 16);
} });

//#endregion
//#region node_modules/loader-utils/lib/hash/BatchedHash.js
var require_BatchedHash = __commonJS({ "node_modules/loader-utils/lib/hash/BatchedHash.js"(exports, module) {
	const MAX_SHORT_STRING = require_wasm_hash().MAX_SHORT_STRING;
	var BatchedHash$1 = class {
		constructor(hash$2) {
			this.string = void 0;
			this.encoding = void 0;
			this.hash = hash$2;
		}
		/**
		* Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}
		* @param {string|Buffer} data data
		* @param {string=} inputEncoding data encoding
		* @returns {this} updated hash
		*/
		update(data$2, inputEncoding) {
			if (this.string !== void 0) {
				if (typeof data$2 === "string" && inputEncoding === this.encoding && this.string.length + data$2.length < MAX_SHORT_STRING) {
					this.string += data$2;
					return this;
				}
				this.hash.update(this.string, this.encoding);
				this.string = void 0;
			}
			if (typeof data$2 === "string") if (data$2.length < MAX_SHORT_STRING && (!inputEncoding || !inputEncoding.startsWith("ba"))) {
				this.string = data$2;
				this.encoding = inputEncoding;
			} else this.hash.update(data$2, inputEncoding);
			else this.hash.update(data$2);
			return this;
		}
		/**
		* Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}
		* @param {string=} encoding encoding of the return value
		* @returns {string|Buffer} digest
		*/
		digest(encoding) {
			if (this.string !== void 0) this.hash.update(this.string, this.encoding);
			return this.hash.digest(encoding);
		}
	};
	module.exports = BatchedHash$1;
} });

//#endregion
//#region node_modules/loader-utils/lib/hash/md4.js
var require_md4 = __commonJS({ "node_modules/loader-utils/lib/hash/md4.js"(exports, module) {
	const create = require_wasm_hash();
	const md4 = new WebAssembly.Module(Buffer.from(
		// 2150 bytes
		"AGFzbQEAAAABCAJgAX8AYAAAAwUEAQAAAAUDAQABBhoFfwFBAAt/AUEAC38BQQALfwFBAAt/AUEACwciBARpbml0AAAGdXBkYXRlAAIFZmluYWwAAwZtZW1vcnkCAAqFEAQmAEGBxpS6BiQBQYnXtv5+JAJB/rnrxXkkA0H2qMmBASQEQQAkAAvMCgEYfyMBIQojAiEGIwMhByMEIQgDQCAAIAVLBEAgBSgCCCINIAcgBiAFKAIEIgsgCCAHIAUoAgAiDCAKIAggBiAHIAhzcXNqakEDdyIDIAYgB3Nxc2pqQQd3IgEgAyAGc3FzampBC3chAiAFKAIUIg8gASACIAUoAhAiCSADIAEgBSgCDCIOIAYgAyACIAEgA3Nxc2pqQRN3IgQgASACc3FzampBA3ciAyACIARzcXNqakEHdyEBIAUoAiAiEiADIAEgBSgCHCIRIAQgAyAFKAIYIhAgAiAEIAEgAyAEc3FzampBC3ciAiABIANzcXNqakETdyIEIAEgAnNxc2pqQQN3IQMgBSgCLCIVIAQgAyAFKAIoIhQgAiAEIAUoAiQiEyABIAIgAyACIARzcXNqakEHdyIBIAMgBHNxc2pqQQt3IgIgASADc3FzampBE3chBCAPIBAgCSAVIBQgEyAFKAI4IhYgAiAEIAUoAjQiFyABIAIgBSgCMCIYIAMgASAEIAEgAnNxc2pqQQN3IgEgAiAEc3FzampBB3ciAiABIARzcXNqakELdyIDIAkgAiAMIAEgBSgCPCIJIAQgASADIAEgAnNxc2pqQRN3IgEgAiADcnEgAiADcXJqakGZ84nUBWpBA3ciAiABIANycSABIANxcmpqQZnzidQFakEFdyIEIAEgAnJxIAEgAnFyaiASakGZ84nUBWpBCXciAyAPIAQgCyACIBggASADIAIgBHJxIAIgBHFyampBmfOJ1AVqQQ13IgEgAyAEcnEgAyAEcXJqakGZ84nUBWpBA3ciAiABIANycSABIANxcmpqQZnzidQFakEFdyIEIAEgAnJxIAEgAnFyampBmfOJ1AVqQQl3IgMgECAEIAIgFyABIAMgAiAEcnEgAiAEcXJqakGZ84nUBWpBDXciASADIARycSADIARxcmogDWpBmfOJ1AVqQQN3IgIgASADcnEgASADcXJqakGZ84nUBWpBBXciBCABIAJycSABIAJxcmpqQZnzidQFakEJdyIDIBEgBCAOIAIgFiABIAMgAiAEcnEgAiAEcXJqakGZ84nUBWpBDXciASADIARycSADIARxcmpqQZnzidQFakEDdyICIAEgA3JxIAEgA3FyampBmfOJ1AVqQQV3IgQgASACcnEgASACcXJqakGZ84nUBWpBCXciAyAMIAIgAyAJIAEgAyACIARycSACIARxcmpqQZnzidQFakENdyIBcyAEc2pqQaHX5/YGakEDdyICIAQgASACcyADc2ogEmpBodfn9gZqQQl3IgRzIAFzampBodfn9gZqQQt3IgMgAiADIBggASADIARzIAJzampBodfn9gZqQQ93IgFzIARzaiANakGh1+f2BmpBA3ciAiAUIAQgASACcyADc2pqQaHX5/YGakEJdyIEcyABc2pqQaHX5/YGakELdyIDIAsgAiADIBYgASADIARzIAJzampBodfn9gZqQQ93IgFzIARzampBodfn9gZqQQN3IgIgEyAEIAEgAnMgA3NqakGh1+f2BmpBCXciBHMgAXNqakGh1+f2BmpBC3chAyAKIA4gAiADIBcgASADIARzIAJzampBodfn9gZqQQ93IgFzIARzampBodfn9gZqQQN3IgJqIQogBiAJIAEgESADIAIgFSAEIAEgAnMgA3NqakGh1+f2BmpBCXciBHMgAXNqakGh1+f2BmpBC3ciAyAEcyACc2pqQaHX5/YGakEPd2ohBiADIAdqIQcgBCAIaiEIIAVBQGshBQwBCwsgCiQBIAYkAiAHJAMgCCQECw0AIAAQASMAIABqJAAL/wQCA38BfiMAIABqrUIDhiEEIABByABqQUBxIgJBCGshAyAAIgFBAWohACABQYABOgAAA0AgACACSUEAIABBB3EbBEAgAEEAOgAAIABBAWohAAwBCwsDQCAAIAJJBEAgAEIANwMAIABBCGohAAwBCwsgAyAENwMAIAIQAUEAIwGtIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEIIwKtIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEQIwOtIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAEEYIwStIgRC//8DgyAEQoCA/P8Pg0IQhoQiBEL/gYCA8B+DIARCgP6DgIDgP4NCCIaEIgRCj4C8gPCBwAeDQgiGIARC8IHAh4CegPgAg0IEiIQiBEKGjJiw4MCBgwZ8QgSIQoGChIiQoMCAAYNCJ34gBEKw4MCBg4aMmDCEfDcDAAs=",
		"base64"
));
	module.exports = create.bind(null, md4, [], 64, 32);
} });

//#endregion
//#region node_modules/loader-utils/lib/hash/BulkUpdateDecorator.js
var require_BulkUpdateDecorator = __commonJS({ "node_modules/loader-utils/lib/hash/BulkUpdateDecorator.js"(exports, module) {
	const BULK_SIZE = 2e3;
	const digestCaches = {};
	var BulkUpdateDecorator$1 = class {
		/**
		* @param {Hash | function(): Hash} hashOrFactory function to create a hash
		* @param {string=} hashKey key for caching
		*/
		constructor(hashOrFactory, hashKey) {
			this.hashKey = hashKey;
			if (typeof hashOrFactory === "function") {
				this.hashFactory = hashOrFactory;
				this.hash = void 0;
			} else {
				this.hashFactory = void 0;
				this.hash = hashOrFactory;
			}
			this.buffer = "";
		}
		/**
		* Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}
		* @param {string|Buffer} data data
		* @param {string=} inputEncoding data encoding
		* @returns {this} updated hash
		*/
		update(data$2, inputEncoding) {
			if (inputEncoding !== void 0 || typeof data$2 !== "string" || data$2.length > BULK_SIZE) {
				if (this.hash === void 0) this.hash = this.hashFactory();
				if (this.buffer.length > 0) {
					this.hash.update(this.buffer);
					this.buffer = "";
				}
				this.hash.update(data$2, inputEncoding);
			} else {
				this.buffer += data$2;
				if (this.buffer.length > BULK_SIZE) {
					if (this.hash === void 0) this.hash = this.hashFactory();
					this.hash.update(this.buffer);
					this.buffer = "";
				}
			}
			return this;
		}
		/**
		* Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}
		* @param {string=} encoding encoding of the return value
		* @returns {string|Buffer} digest
		*/
		digest(encoding) {
			let digestCache;
			const buffer = this.buffer;
			if (this.hash === void 0) {
				const cacheKey = `${this.hashKey}-${encoding}`;
				digestCache = digestCaches[cacheKey];
				if (digestCache === void 0) digestCache = digestCaches[cacheKey] = new Map();
				const cacheEntry = digestCache.get(buffer);
				if (cacheEntry !== void 0) return cacheEntry;
				this.hash = this.hashFactory();
			}
			if (buffer.length > 0) this.hash.update(buffer);
			const digestResult = this.hash.digest(encoding);
			if (digestCache !== void 0) digestCache.set(buffer, digestResult);
			return digestResult;
		}
	};
	module.exports = BulkUpdateDecorator$1;
} });

//#endregion
//#region node_modules/loader-utils/lib/getHashDigest.js
var require_getHashDigest = __commonJS({ "node_modules/loader-utils/lib/getHashDigest.js"(exports, module) {
	const baseEncodeTables = {
		26: "abcdefghijklmnopqrstuvwxyz",
		32: "123456789abcdefghjkmnpqrstuvwxyz",
		36: "0123456789abcdefghijklmnopqrstuvwxyz",
		49: "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
		52: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
		58: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
		62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
		64: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
	};
	/**
	* @param {Uint32Array} uint32Array Treated as a long base-0x100000000 number, little endian
	* @param {number} divisor The divisor
	* @return {number} Modulo (remainder) of the division
	*/
	function divmod32(uint32Array, divisor) {
		let carry = 0;
		for (let i$6 = uint32Array.length - 1; i$6 >= 0; i$6--) {
			const value = carry * 4294967296 + uint32Array[i$6];
			carry = value % divisor;
			uint32Array[i$6] = Math.floor(value / divisor);
		}
		return carry;
	}
	function encodeBufferToBase(buffer, base$1, length) {
		const encodeTable = baseEncodeTables[base$1];
		if (!encodeTable) throw new Error("Unknown encoding base" + base$1);
		const limit = Math.ceil(buffer.length * 8 / Math.log2(base$1));
		length = Math.min(length, limit);
		const uint32Array = new Uint32Array(Math.ceil(buffer.length / 4));
		buffer.copy(Buffer.from(uint32Array.buffer));
		let output = "";
		for (let i$6 = 0; i$6 < length; i$6++) output = encodeTable[divmod32(uint32Array, base$1)] + output;
		return output;
	}
	let crypto = void 0;
	let createXXHash64 = void 0;
	let createMd4 = void 0;
	let BatchedHash = void 0;
	let BulkUpdateDecorator = void 0;
	function getHashDigest$1(buffer, algorithm, digestType, maxLength) {
		algorithm = algorithm || "xxhash64";
		maxLength = maxLength || 9999;
		let hash$2;
		if (algorithm === "xxhash64") {
			if (createXXHash64 === void 0) {
				createXXHash64 = require_xxhash64();
				if (BatchedHash === void 0) BatchedHash = require_BatchedHash();
			}
			hash$2 = new BatchedHash(createXXHash64());
		} else if (algorithm === "md4") {
			if (createMd4 === void 0) {
				createMd4 = require_md4();
				if (BatchedHash === void 0) BatchedHash = require_BatchedHash();
			}
			hash$2 = new BatchedHash(createMd4());
		} else if (algorithm === "native-md4") {
			if (typeof crypto === "undefined") {
				crypto = __require("crypto");
				if (BulkUpdateDecorator === void 0) BulkUpdateDecorator = require_BulkUpdateDecorator();
			}
			hash$2 = new BulkUpdateDecorator(() => crypto.createHash("md4"), "md4");
		} else {
			if (typeof crypto === "undefined") {
				crypto = __require("crypto");
				if (BulkUpdateDecorator === void 0) BulkUpdateDecorator = require_BulkUpdateDecorator();
			}
			hash$2 = new BulkUpdateDecorator(() => crypto.createHash(algorithm), algorithm);
		}
		hash$2.update(buffer);
		if (digestType === "base26" || digestType === "base32" || digestType === "base36" || digestType === "base49" || digestType === "base52" || digestType === "base58" || digestType === "base62" || digestType === "base64safe") return encodeBufferToBase(hash$2.digest(), digestType === "base64safe" ? 64 : digestType.substr(4), maxLength);
		return hash$2.digest(digestType || "hex").substr(0, maxLength);
	}
	module.exports = getHashDigest$1;
} });

//#endregion
//#region node_modules/loader-utils/lib/interpolateName.js
var require_interpolateName = __commonJS({ "node_modules/loader-utils/lib/interpolateName.js"(exports, module) {
	const path$10 = __require("path");
	const getHashDigest = require_getHashDigest();
	function interpolateName$1(loaderContext, name, options = {}) {
		let filename;
		const hasQuery = loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;
		if (typeof name === "function") filename = name(loaderContext.resourcePath, hasQuery ? loaderContext.resourceQuery : void 0);
		else filename = name || "[hash].[ext]";
		const context = options.context;
		const content = options.content;
		const regExp = options.regExp;
		let ext$1 = "bin";
		let basename = "file";
		let directory = "";
		let folder = "";
		let query = "";
		if (loaderContext.resourcePath) {
			const parsed = path$10.parse(loaderContext.resourcePath);
			let resourcePath = loaderContext.resourcePath;
			if (parsed.ext) ext$1 = parsed.ext.substr(1);
			if (parsed.dir) {
				basename = parsed.name;
				resourcePath = parsed.dir + path$10.sep;
			}
			if (typeof context !== "undefined") {
				directory = path$10.relative(context, resourcePath + "_").replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
				directory = directory.substr(0, directory.length - 1);
			} else directory = resourcePath.replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
			if (directory.length <= 1) directory = "";
			else folder = path$10.basename(directory);
		}
		if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {
			query = loaderContext.resourceQuery;
			const hashIdx = query.indexOf("#");
			if (hashIdx >= 0) query = query.substr(0, hashIdx);
		}
		let url$1 = filename;
		if (content) url$1 = url$1.replace(/\[(?:([^[:\]]+):)?(?:hash|contenthash)(?::([a-z]+\d*(?:safe)?))?(?::(\d+))?\]/gi, (all, hashType, digestType, maxLength) => getHashDigest(content, hashType, digestType, parseInt(maxLength, 10)));
		url$1 = url$1.replace(/\[ext\]/gi, () => ext$1).replace(/\[name\]/gi, () => basename).replace(/\[path\]/gi, () => directory).replace(/\[folder\]/gi, () => folder).replace(/\[query\]/gi, () => query);
		if (regExp && loaderContext.resourcePath) {
			const match = loaderContext.resourcePath.match(new RegExp(regExp));
			match && match.forEach((matched, i$6) => {
				url$1 = url$1.replace(new RegExp("\\[" + i$6 + "\\]", "ig"), matched);
			});
		}
		if (typeof loaderContext.options === "object" && typeof loaderContext.options.customInterpolateName === "function") url$1 = loaderContext.options.customInterpolateName.call(loaderContext, url$1, name, options);
		return url$1;
	}
	module.exports = interpolateName$1;
} });

//#endregion
//#region node_modules/generic-names/index.js
var require_generic_names = __commonJS({ "node_modules/generic-names/index.js"(exports, module) {
	var interpolateName = require_interpolateName();
	var path$9 = __require("path");
	/**
	* @param  {string} pattern
	* @param  {object} options
	* @param  {string} options.context
	* @param  {string} options.hashPrefix
	* @return {function}
	*/
	module.exports = function createGenerator(pattern, options) {
		options = options || {};
		var context = options && typeof options.context === "string" ? options.context : process.cwd();
		var hashPrefix = options && typeof options.hashPrefix === "string" ? options.hashPrefix : "";
		/**
		* @param  {string} localName Usually a class name
		* @param  {string} filepath  Absolute path
		* @return {string}
		*/
		return function generate$2(localName, filepath) {
			var name = pattern.replace(/\[local\]/gi, localName);
			var loaderContext = { resourcePath: filepath };
			var loaderOptions = {
				content: hashPrefix + path$9.relative(context, filepath).replace(/\\/g, "/") + "\0" + localName,
				context
			};
			var genericName = interpolateName(loaderContext, name, loaderOptions);
			return genericName.replace(new RegExp("[^a-zA-Z0-9\\-_\xA0-￿]", "g"), "-").replace(/^((-?[0-9])|--)/, "_$1");
		};
	};
} });

//#endregion
//#region node_modules/postcss-modules/build/unquote/index.js
var require_unquote = __commonJS({ "node_modules/postcss-modules/build/unquote/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = unquote;
	var reg = /['"]/;
	function unquote(str$4) {
		if (!str$4) return "";
		if (reg.test(str$4.charAt(0))) str$4 = str$4.substr(1);
		if (reg.test(str$4.charAt(str$4.length - 1))) str$4 = str$4.substr(0, str$4.length - 1);
		return str$4;
	}
} });

//#endregion
//#region node_modules/icss-replace-symbols/lib/index.js
var require_lib$15 = __commonJS({ "node_modules/icss-replace-symbols/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.replaceAll = replaceAll;
	var matchConstName = /[$#]?[\w-\.]+/g;
	function replaceAll(replacements, text) {
		var matches = void 0;
		while (matches = matchConstName.exec(text)) {
			var replacement = replacements[matches[0]];
			if (replacement) {
				text = text.slice(0, matches.index) + replacement + text.slice(matchConstName.lastIndex);
				matchConstName.lastIndex -= matches[0].length - replacement.length;
			}
		}
		return text;
	}
	exports.default = function(css, translations) {
		css.walkDecls(function(decl$1) {
			return decl$1.value = replaceAll(translations, decl$1.value);
		});
		css.walkAtRules("media", function(atRule$1) {
			return atRule$1.params = replaceAll(translations, atRule$1.params);
		});
	};
} });

//#endregion
//#region node_modules/postcss-modules/build/css-loader-core/parser.js
var require_parser$2 = __commonJS({ "node_modules/postcss-modules/build/css-loader-core/parser.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _icssReplaceSymbols = require_lib$15();
	var _icssReplaceSymbols2 = _interopRequireDefault$42(_icssReplaceSymbols);
	function _interopRequireDefault$42(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	const importRegexp = /^:import\((.+)\)$/;
	var Parser$3 = class {
		constructor(pathFetcher, trace) {
			this.pathFetcher = pathFetcher;
			this.plugin = this.plugin.bind(this);
			this.exportTokens = {};
			this.translations = {};
			this.trace = trace;
		}
		plugin() {
			const parser$5 = this;
			return {
				postcssPlugin: "css-modules-parser",
				OnceExit(css) {
					return Promise.all(parser$5.fetchAllImports(css)).then(() => parser$5.linkImportedSymbols(css)).then(() => parser$5.extractExports(css));
				}
			};
		}
		fetchAllImports(css) {
			let imports = [];
			css.each((node) => {
				if (node.type == "rule" && node.selector.match(importRegexp)) imports.push(this.fetchImport(node, css.source.input.from, imports.length));
			});
			return imports;
		}
		linkImportedSymbols(css) {
			(0, _icssReplaceSymbols2.default)(css, this.translations);
		}
		extractExports(css) {
			css.each((node) => {
				if (node.type == "rule" && node.selector == ":export") this.handleExport(node);
			});
		}
		handleExport(exportNode) {
			exportNode.each((decl$1) => {
				if (decl$1.type == "decl") {
					Object.keys(this.translations).forEach((translation) => {
						decl$1.value = decl$1.value.replace(translation, this.translations[translation]);
					});
					this.exportTokens[decl$1.prop] = decl$1.value;
				}
			});
			exportNode.remove();
		}
		fetchImport(importNode, relativeTo, depNr) {
			let file$2 = importNode.selector.match(importRegexp)[1], depTrace = this.trace + String.fromCharCode(depNr);
			return this.pathFetcher(file$2, relativeTo, depTrace).then((exports$1) => {
				importNode.each((decl$1) => {
					if (decl$1.type == "decl") this.translations[decl$1.prop] = exports$1[decl$1.value];
				});
				importNode.remove();
			}, (err) => console.log(err));
		}
	};
	exports.default = Parser$3;
} });

//#endregion
//#region node_modules/postcss-modules/build/css-loader-core/loader.js
var require_loader = __commonJS({ "node_modules/postcss-modules/build/css-loader-core/loader.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _postcss$1 = require_postcss();
	var _postcss2$1 = _interopRequireDefault$41(_postcss$1);
	var _fs$1 = __require("fs");
	var _fs2 = _interopRequireDefault$41(_fs$1);
	var _path = __require("path");
	var _path2 = _interopRequireDefault$41(_path);
	var _parser$5 = require_parser$2();
	var _parser2$1 = _interopRequireDefault$41(_parser$5);
	function _interopRequireDefault$41(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	var Core = class Core {
		constructor(plugins) {
			this.plugins = plugins || Core.defaultPlugins;
		}
		load(sourceString, sourcePath, trace, pathFetcher) {
			let parser$5 = new _parser2$1.default(pathFetcher, trace);
			return (0, _postcss2$1.default)(this.plugins.concat([parser$5.plugin()])).process(sourceString, { from: "/" + sourcePath }).then((result) => {
				return {
					injectableSource: result.css,
					exportTokens: parser$5.exportTokens
				};
			});
		}
	};
	const traceKeySorter = (a$1, b$1) => {
		if (a$1.length < b$1.length) return a$1 < b$1.substring(0, a$1.length) ? -1 : 1;
		else if (a$1.length > b$1.length) return a$1.substring(0, b$1.length) <= b$1 ? -1 : 1;
		else return a$1 < b$1 ? -1 : 1;
	};
	var FileSystemLoader = class {
		constructor(root$5, plugins) {
			this.root = root$5;
			this.sources = {};
			this.traces = {};
			this.importNr = 0;
			this.core = new Core(plugins);
			this.tokensByFile = {};
		}
		fetch(_newPath, relativeTo, _trace) {
			let newPath = _newPath.replace(/^["']|["']$/g, ""), trace = _trace || String.fromCharCode(this.importNr++);
			return new Promise((resolve$5, reject) => {
				let relativeDir = _path2.default.dirname(relativeTo), rootRelativePath = _path2.default.resolve(relativeDir, newPath), fileRelativePath = _path2.default.resolve(_path2.default.join(this.root, relativeDir), newPath);
				if (newPath[0] !== "." && newPath[0] !== "/") try {
					fileRelativePath = __require.resolve(newPath);
				} catch (e$2) {}
				const tokens$3 = this.tokensByFile[fileRelativePath];
				if (tokens$3) return resolve$5(tokens$3);
				_fs2.default.readFile(fileRelativePath, "utf-8", (err, source) => {
					if (err) reject(err);
					this.core.load(source, rootRelativePath, trace, this.fetch.bind(this)).then(({ injectableSource, exportTokens }) => {
						this.sources[fileRelativePath] = injectableSource;
						this.traces[trace] = fileRelativePath;
						this.tokensByFile[fileRelativePath] = exportTokens;
						resolve$5(exportTokens);
					}, reject);
				});
			});
		}
		get finalSource() {
			const traces = this.traces;
			const sources = this.sources;
			let written = new Set();
			return Object.keys(traces).sort(traceKeySorter).map((key) => {
				const filename = traces[key];
				if (written.has(filename)) return null;
				written.add(filename);
				return sources[filename];
			}).join("");
		}
	};
	exports.default = FileSystemLoader;
} });

//#endregion
//#region node_modules/string-hash/index.js
var require_string_hash = __commonJS({ "node_modules/string-hash/index.js"(exports, module) {
	function hash$1(str$4) {
		var hash$2 = 5381, i$6 = str$4.length;
		while (i$6) hash$2 = hash$2 * 33 ^ str$4.charCodeAt(--i$6);
		return hash$2 >>> 0;
	}
	module.exports = hash$1;
} });

//#endregion
//#region node_modules/postcss-modules/build/generateScopedName.js
var require_generateScopedName = __commonJS({ "node_modules/postcss-modules/build/generateScopedName.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = generateScopedName;
	var _stringHash = require_string_hash();
	var _stringHash2 = _interopRequireDefault$40(_stringHash);
	function _interopRequireDefault$40(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function generateScopedName(name, filename, css) {
		const i$6 = css.indexOf(`.${name}`);
		const lineNumber = css.substr(0, i$6).split(/[\r\n]/).length;
		const hash$2 = (0, _stringHash2.default)(css).toString(36).substr(0, 5);
		return `_${name}_${hash$2}_${lineNumber}`;
	}
} });

//#endregion
//#region node_modules/postcss-modules/build/saveJSON.js
var require_saveJSON = __commonJS({ "node_modules/postcss-modules/build/saveJSON.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = saveJSON;
	var _fs = __require("fs");
	function saveJSON(cssFile, json) {
		return new Promise((resolve$5, reject) => {
			(0, _fs.writeFile)(`${cssFile}.json`, JSON.stringify(json), (e$2) => e$2 ? reject(e$2) : resolve$5(json));
		});
	}
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/unesc.js
var require_unesc$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/unesc.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = unesc$1;
	/**
	* 
	* @param {string} str 
	* @returns {[string, number]|undefined}
	*/
	function gobbleHex$1(str$4) {
		var lower = str$4.toLowerCase();
		var hex$3 = "";
		var spaceTerminated = false;
		for (var i$6 = 0; i$6 < 6 && lower[i$6] !== void 0; i$6++) {
			var code$1 = lower.charCodeAt(i$6);
			var valid = code$1 >= 97 && code$1 <= 102 || code$1 >= 48 && code$1 <= 57;
			spaceTerminated = code$1 === 32;
			if (!valid) break;
			hex$3 += lower[i$6];
		}
		if (hex$3.length === 0) return void 0;
		var codePoint = parseInt(hex$3, 16);
		var isSurrogate = codePoint >= 55296 && codePoint <= 57343;
		if (isSurrogate || codePoint === 0 || codePoint > 1114111) return ["�", hex$3.length + (spaceTerminated ? 1 : 0)];
		return [String.fromCodePoint(codePoint), hex$3.length + (spaceTerminated ? 1 : 0)];
	}
	var CONTAINS_ESCAPE$1 = /\\/;
	function unesc$1(str$4) {
		var needToProcess = CONTAINS_ESCAPE$1.test(str$4);
		if (!needToProcess) return str$4;
		var ret$1 = "";
		for (var i$6 = 0; i$6 < str$4.length; i$6++) {
			if (str$4[i$6] === "\\") {
				var gobbled = gobbleHex$1(str$4.slice(i$6 + 1, i$6 + 7));
				if (gobbled !== void 0) {
					ret$1 += gobbled[0];
					i$6 += gobbled[1];
					continue;
				}
				if (str$4[i$6 + 1] === "\\") {
					ret$1 += "\\";
					i$6++;
					continue;
				}
				if (str$4.length === i$6 + 1) ret$1 += str$4[i$6];
				continue;
			}
			ret$1 += str$4[i$6];
		}
		return ret$1;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/getProp.js
var require_getProp$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/getProp.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = getProp$1;
	function getProp$1(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) return void 0;
			obj = obj[prop];
		}
		return obj;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/ensureObject.js
var require_ensureObject$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/ensureObject.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = ensureObject$1;
	function ensureObject$1(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) obj[prop] = {};
			obj = obj[prop];
		}
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/stripComments.js
var require_stripComments$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/stripComments.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = stripComments$1;
	function stripComments$1(str$4) {
		var s$3 = "";
		var commentStart = str$4.indexOf("/*");
		var lastEnd = 0;
		while (commentStart >= 0) {
			s$3 = s$3 + str$4.slice(lastEnd, commentStart);
			var commentEnd = str$4.indexOf("*/", commentStart + 2);
			if (commentEnd < 0) return s$3;
			lastEnd = commentEnd + 2;
			commentStart = str$4.indexOf("/*", lastEnd);
		}
		s$3 = s$3 + str$4.slice(lastEnd);
		return s$3;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/index.js
var require_util$2 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/util/index.js"(exports) {
	exports.__esModule = true;
	exports.unesc = exports.stripComments = exports.getProp = exports.ensureObject = void 0;
	var _unesc$3 = _interopRequireDefault$39(require_unesc$1());
	exports.unesc = _unesc$3["default"];
	var _getProp$1 = _interopRequireDefault$39(require_getProp$1());
	exports.getProp = _getProp$1["default"];
	var _ensureObject$1 = _interopRequireDefault$39(require_ensureObject$1());
	exports.ensureObject = _ensureObject$1["default"];
	var _stripComments$1 = _interopRequireDefault$39(require_stripComments$1());
	exports.stripComments = _stripComments$1["default"];
	function _interopRequireDefault$39(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/node.js
var require_node$5 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/node.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _util$9 = require_util$2();
	function _defineProperties$13(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$13(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$13(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$13(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var cloneNode$10 = function cloneNode$13(obj, parent) {
		if (typeof obj !== "object" || obj === null) return obj;
		var cloned = new obj.constructor();
		for (var i$6 in obj) {
			if (!obj.hasOwnProperty(i$6)) continue;
			var value = obj[i$6];
			var type = typeof value;
			if (i$6 === "parent" && type === "object") {
				if (parent) cloned[i$6] = parent;
			} else if (value instanceof Array) cloned[i$6] = value.map(function(j$1) {
				return cloneNode$13(j$1, cloned);
			});
			else cloned[i$6] = cloneNode$13(value, cloned);
		}
		return cloned;
	};
	var Node$3 = /* @__PURE__ */ function() {
		function Node$20(opts) {
			if (opts === void 0) opts = {};
			Object.assign(this, opts);
			this.spaces = this.spaces || {};
			this.spaces.before = this.spaces.before || "";
			this.spaces.after = this.spaces.after || "";
		}
		var _proto = Node$20.prototype;
		_proto.remove = function remove$4() {
			if (this.parent) this.parent.removeChild(this);
			this.parent = void 0;
			return this;
		};
		_proto.replaceWith = function replaceWith$1() {
			if (this.parent) {
				for (var index$1 in arguments) this.parent.insertBefore(this, arguments[index$1]);
				this.remove();
			}
			return this;
		};
		_proto.next = function next() {
			return this.parent.at(this.parent.index(this) + 1);
		};
		_proto.prev = function prev() {
			return this.parent.at(this.parent.index(this) - 1);
		};
		_proto.clone = function clone$4(overrides) {
			if (overrides === void 0) overrides = {};
			var cloned = cloneNode$10(this);
			for (var name in overrides) cloned[name] = overrides[name];
			return cloned;
		};
		_proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			var originalValue = this[name];
			var originalEscaped = this.raws[name];
			this[name] = originalValue + value;
			if (originalEscaped || valueEscaped !== value) this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
			else delete this.raws[name];
		};
		_proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			this[name] = value;
			this.raws[name] = valueEscaped;
		};
		_proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
			this[name] = value;
			if (this.raws) delete this.raws[name];
		};
		_proto.isAtPosition = function isAtPosition(line, column) {
			if (this.source && this.source.start && this.source.end) {
				if (this.source.start.line > line) return false;
				if (this.source.end.line < line) return false;
				if (this.source.start.line === line && this.source.start.column > column) return false;
				if (this.source.end.line === line && this.source.end.column < column) return false;
				return true;
			}
			return void 0;
		};
		_proto.stringifyProperty = function stringifyProperty(name) {
			return this.raws && this.raws[name] || this[name];
		};
		_proto.valueToString = function valueToString() {
			return String(this.stringifyProperty("value"));
		};
		_proto.toString = function toString$5() {
			return [
				this.rawSpaceBefore,
				this.valueToString(),
				this.rawSpaceAfter
			].join("");
		};
		_createClass$13(Node$20, [{
			key: "rawSpaceBefore",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;
				if (rawSpace === void 0) rawSpace = this.spaces && this.spaces.before;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$9.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.before = raw;
			}
		}, {
			key: "rawSpaceAfter",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;
				if (rawSpace === void 0) rawSpace = this.spaces.after;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$9.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.after = raw;
			}
		}]);
		return Node$20;
	}();
	exports["default"] = Node$3;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/types.js
var require_types$2 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/types.js"(exports) {
	exports.__esModule = true;
	exports.UNIVERSAL = exports.TAG = exports.STRING = exports.SELECTOR = exports.ROOT = exports.PSEUDO = exports.NESTING = exports.ID = exports.COMMENT = exports.COMBINATOR = exports.CLASS = exports.ATTRIBUTE = void 0;
	var TAG$1 = "tag";
	exports.TAG = TAG$1;
	var STRING$1 = "string";
	exports.STRING = STRING$1;
	var SELECTOR$1 = "selector";
	exports.SELECTOR = SELECTOR$1;
	var ROOT$1 = "root";
	exports.ROOT = ROOT$1;
	var PSEUDO$1 = "pseudo";
	exports.PSEUDO = PSEUDO$1;
	var NESTING$1 = "nesting";
	exports.NESTING = NESTING$1;
	var ID$3 = "id";
	exports.ID = ID$3;
	var COMMENT$1 = "comment";
	exports.COMMENT = COMMENT$1;
	var COMBINATOR$1 = "combinator";
	exports.COMBINATOR = COMBINATOR$1;
	var CLASS$1 = "class";
	exports.CLASS = CLASS$1;
	var ATTRIBUTE$1 = "attribute";
	exports.ATTRIBUTE = ATTRIBUTE$1;
	var UNIVERSAL$1 = "universal";
	exports.UNIVERSAL = UNIVERSAL$1;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/container.js
var require_container$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/container.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$15 = _interopRequireDefault$38(require_node$5());
	var types$3 = _interopRequireWildcard$7(require_types$2());
	function _getRequireWildcardCache$7(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$7 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$7(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$7(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$38(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _createForOfIteratorHelperLoose$1(o$2, allowArrayLike) {
		var it = typeof Symbol !== "undefined" && o$2[Symbol.iterator] || o$2["@@iterator"];
		if (it) return (it = it.call(o$2)).next.bind(it);
		if (Array.isArray(o$2) || (it = _unsupportedIterableToArray$1(o$2)) || allowArrayLike && o$2 && typeof o$2.length === "number") {
			if (it) o$2 = it;
			var i$6 = 0;
			return function() {
				if (i$6 >= o$2.length) return { done: true };
				return {
					done: false,
					value: o$2[i$6++]
				};
			};
		}
		throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _unsupportedIterableToArray$1(o$2, minLen) {
		if (!o$2) return;
		if (typeof o$2 === "string") return _arrayLikeToArray$1(o$2, minLen);
		var n$4 = Object.prototype.toString.call(o$2).slice(8, -1);
		if (n$4 === "Object" && o$2.constructor) n$4 = o$2.constructor.name;
		if (n$4 === "Map" || n$4 === "Set") return Array.from(o$2);
		if (n$4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n$4)) return _arrayLikeToArray$1(o$2, minLen);
	}
	function _arrayLikeToArray$1(arr, len) {
		if (len == null || len > arr.length) len = arr.length;
		for (var i$6 = 0, arr2 = new Array(len); i$6 < len; i$6++) arr2[i$6] = arr[i$6];
		return arr2;
	}
	function _defineProperties$12(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$12(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$12(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$12(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$27(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$27(subClass, superClass);
	}
	function _setPrototypeOf$27(o$2, p$2) {
		_setPrototypeOf$27 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$27(o$2, p$2);
	}
	var Container$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$27(Container$16, _Node);
		function Container$16(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			if (!_this.nodes) _this.nodes = [];
			return _this;
		}
		var _proto = Container$16.prototype;
		_proto.append = function append$1(selector$3) {
			selector$3.parent = this;
			this.nodes.push(selector$3);
			return this;
		};
		_proto.prepend = function prepend$1(selector$3) {
			selector$3.parent = this;
			this.nodes.unshift(selector$3);
			for (var id$4 in this.indexes) this.indexes[id$4]++;
			return this;
		};
		_proto.at = function at$3(index$1) {
			return this.nodes[index$1];
		};
		_proto.index = function index$1(child) {
			if (typeof child === "number") return child;
			return this.nodes.indexOf(child);
		};
		_proto.removeChild = function removeChild(child) {
			child = this.index(child);
			this.at(child).parent = void 0;
			this.nodes.splice(child, 1);
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= child) this.indexes[id$4] = index$1 - 1;
			}
			return this;
		};
		_proto.removeAll = function removeAll() {
			for (var _iterator = _createForOfIteratorHelperLoose$1(this.nodes), _step; !(_step = _iterator()).done;) {
				var node = _step.value;
				node.parent = void 0;
			}
			this.nodes = [];
			return this;
		};
		_proto.empty = function empty() {
			return this.removeAll();
		};
		_proto.insertAfter = function insertAfter$1(oldNode, newNode) {
			var _this$nodes;
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			var resetNode = [];
			for (var i$6 = 2; i$6 < arguments.length; i$6++) resetNode.push(arguments[i$6]);
			(_this$nodes = this.nodes).splice.apply(_this$nodes, [
				oldIndex + 1,
				0,
				newNode
			].concat(resetNode));
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (oldIndex < index$1) this.indexes[id$4] = index$1 + arguments.length - 1;
			}
			return this;
		};
		_proto.insertBefore = function insertBefore$1(oldNode, newNode) {
			var _this$nodes2;
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			var resetNode = [];
			for (var i$6 = 2; i$6 < arguments.length; i$6++) resetNode.push(arguments[i$6]);
			(_this$nodes2 = this.nodes).splice.apply(_this$nodes2, [
				oldIndex,
				0,
				newNode
			].concat(resetNode));
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= oldIndex) this.indexes[id$4] = index$1 + arguments.length - 1;
			}
			return this;
		};
		_proto._findChildAtPosition = function _findChildAtPosition(line, col) {
			var found = void 0;
			this.each(function(node) {
				if (node.atPosition) {
					var foundChild = node.atPosition(line, col);
					if (foundChild) {
						found = foundChild;
						return false;
					}
				} else if (node.isAtPosition(line, col)) {
					found = node;
					return false;
				}
			});
			return found;
		};
		_proto.atPosition = function atPosition(line, col) {
			if (this.isAtPosition(line, col)) return this._findChildAtPosition(line, col) || this;
			else return void 0;
		};
		_proto._inferEndPosition = function _inferEndPosition() {
			if (this.last && this.last.source && this.last.source.end) {
				this.source = this.source || {};
				this.source.end = this.source.end || {};
				Object.assign(this.source.end, this.last.source.end);
			}
		};
		_proto.each = function each(callback) {
			if (!this.lastEach) this.lastEach = 0;
			if (!this.indexes) this.indexes = {};
			this.lastEach++;
			var id$4 = this.lastEach;
			this.indexes[id$4] = 0;
			if (!this.length) return void 0;
			var index$1, result;
			while (this.indexes[id$4] < this.length) {
				index$1 = this.indexes[id$4];
				result = callback(this.at(index$1), index$1);
				if (result === false) break;
				this.indexes[id$4] += 1;
			}
			delete this.indexes[id$4];
			if (result === false) return false;
		};
		_proto.walk = function walk$2(callback) {
			return this.each(function(node, i$6) {
				var result = callback(node, i$6);
				if (result !== false && node.length) result = node.walk(callback);
				if (result === false) return false;
			});
		};
		_proto.walkAttributes = function walkAttributes(callback) {
			var _this2 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.ATTRIBUTE) return callback.call(_this2, selector$3);
			});
		};
		_proto.walkClasses = function walkClasses(callback) {
			var _this3 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.CLASS) return callback.call(_this3, selector$3);
			});
		};
		_proto.walkCombinators = function walkCombinators(callback) {
			var _this4 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.COMBINATOR) return callback.call(_this4, selector$3);
			});
		};
		_proto.walkComments = function walkComments(callback) {
			var _this5 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.COMMENT) return callback.call(_this5, selector$3);
			});
		};
		_proto.walkIds = function walkIds(callback) {
			var _this6 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.ID) return callback.call(_this6, selector$3);
			});
		};
		_proto.walkNesting = function walkNesting(callback) {
			var _this7 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.NESTING) return callback.call(_this7, selector$3);
			});
		};
		_proto.walkPseudos = function walkPseudos(callback) {
			var _this8 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.PSEUDO) return callback.call(_this8, selector$3);
			});
		};
		_proto.walkTags = function walkTags(callback) {
			var _this9 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.TAG) return callback.call(_this9, selector$3);
			});
		};
		_proto.walkUniversals = function walkUniversals(callback) {
			var _this10 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$3.UNIVERSAL) return callback.call(_this10, selector$3);
			});
		};
		_proto.split = function split(callback) {
			var _this11 = this;
			var current = [];
			return this.reduce(function(memo, node, index$1) {
				var split$1 = callback.call(_this11, node);
				current.push(node);
				if (split$1) {
					memo.push(current);
					current = [];
				} else if (index$1 === _this11.length - 1) memo.push(current);
				return memo;
			}, []);
		};
		_proto.map = function map(callback) {
			return this.nodes.map(callback);
		};
		_proto.reduce = function reduce(callback, memo) {
			return this.nodes.reduce(callback, memo);
		};
		_proto.every = function every(callback) {
			return this.nodes.every(callback);
		};
		_proto.some = function some(callback) {
			return this.nodes.some(callback);
		};
		_proto.filter = function filter$2(callback) {
			return this.nodes.filter(callback);
		};
		_proto.sort = function sort(callback) {
			return this.nodes.sort(callback);
		};
		_proto.toString = function toString$5() {
			return this.map(String).join("");
		};
		_createClass$12(Container$16, [
			{
				key: "first",
				get: function get$2() {
					return this.at(0);
				}
			},
			{
				key: "last",
				get: function get$2() {
					return this.at(this.length - 1);
				}
			},
			{
				key: "length",
				get: function get$2() {
					return this.nodes.length;
				}
			}
		]);
		return Container$16;
	}(_node$15["default"]);
	exports["default"] = Container$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/root.js
var require_root$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/root.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$5 = _interopRequireDefault$37(require_container$1());
	var _types$28 = require_types$2();
	function _interopRequireDefault$37(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$11(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$11(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$11(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$11(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$26(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$26(subClass, superClass);
	}
	function _setPrototypeOf$26(o$2, p$2) {
		_setPrototypeOf$26 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$26(o$2, p$2);
	}
	var Root$1 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$26(Root$11, _Container);
		function Root$11(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$28.ROOT;
			return _this;
		}
		var _proto = Root$11.prototype;
		_proto.toString = function toString$5() {
			var str$4 = this.reduce(function(memo, selector$3) {
				memo.push(String(selector$3));
				return memo;
			}, []).join(",");
			return this.trailingComma ? str$4 + "," : str$4;
		};
		_proto.error = function error(message, options) {
			if (this._error) return this._error(message, options);
			else return new Error(message);
		};
		_createClass$11(Root$11, [{
			key: "errorGenerator",
			set: function set(handler) {
				this._error = handler;
			}
		}]);
		return Root$11;
	}(_container$5["default"]);
	exports["default"] = Root$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/selector.js
var require_selector$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/selector.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$4 = _interopRequireDefault$36(require_container$1());
	var _types$27 = require_types$2();
	function _interopRequireDefault$36(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$25(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$25(subClass, superClass);
	}
	function _setPrototypeOf$25(o$2, p$2) {
		_setPrototypeOf$25 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$25(o$2, p$2);
	}
	var Selector$1 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$25(Selector$3, _Container);
		function Selector$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$27.SELECTOR;
			return _this;
		}
		return Selector$3;
	}(_container$4["default"]);
	exports["default"] = Selector$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/className.js
var require_className$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/className.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$5 = _interopRequireDefault$35(require_cssesc());
	var _util$8 = require_util$2();
	var _node$14 = _interopRequireDefault$35(require_node$5());
	var _types$26 = require_types$2();
	function _interopRequireDefault$35(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$10(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$10(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$10(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$10(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$24(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$24(subClass, superClass);
	}
	function _setPrototypeOf$24(o$2, p$2) {
		_setPrototypeOf$24 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$24(o$2, p$2);
	}
	var ClassName$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$24(ClassName$3, _Node);
		function ClassName$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$26.CLASS;
			_this._constructed = true;
			return _this;
		}
		var _proto = ClassName$3.prototype;
		_proto.valueToString = function valueToString() {
			return "." + _Node.prototype.valueToString.call(this);
		};
		_createClass$10(ClassName$3, [{
			key: "value",
			get: function get$2() {
				return this._value;
			},
			set: function set(v$1) {
				if (this._constructed) {
					var escaped = (0, _cssesc$5["default"])(v$1, { isIdentifier: true });
					if (escaped !== v$1) {
						(0, _util$8.ensureObject)(this, "raws");
						this.raws.value = escaped;
					} else if (this.raws) delete this.raws.value;
				}
				this._value = v$1;
			}
		}]);
		return ClassName$3;
	}(_node$14["default"]);
	exports["default"] = ClassName$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/comment.js
var require_comment$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/comment.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$13 = _interopRequireDefault$34(require_node$5());
	var _types$25 = require_types$2();
	function _interopRequireDefault$34(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$23(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$23(subClass, superClass);
	}
	function _setPrototypeOf$23(o$2, p$2) {
		_setPrototypeOf$23 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$23(o$2, p$2);
	}
	var Comment$3 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$23(Comment$13, _Node);
		function Comment$13(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$25.COMMENT;
			return _this;
		}
		return Comment$13;
	}(_node$13["default"]);
	exports["default"] = Comment$3;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/id.js
var require_id$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/id.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$12 = _interopRequireDefault$33(require_node$5());
	var _types$24 = require_types$2();
	function _interopRequireDefault$33(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$22(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$22(subClass, superClass);
	}
	function _setPrototypeOf$22(o$2, p$2) {
		_setPrototypeOf$22 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$22(o$2, p$2);
	}
	var ID$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$22(ID$6, _Node);
		function ID$6(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$24.ID;
			return _this;
		}
		var _proto = ID$6.prototype;
		_proto.valueToString = function valueToString() {
			return "#" + _Node.prototype.valueToString.call(this);
		};
		return ID$6;
	}(_node$12["default"]);
	exports["default"] = ID$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/namespace.js
var require_namespace$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/namespace.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$4 = _interopRequireDefault$32(require_cssesc());
	var _util$7 = require_util$2();
	var _node$11 = _interopRequireDefault$32(require_node$5());
	function _interopRequireDefault$32(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$9(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$9(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$9(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$9(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$21(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$21(subClass, superClass);
	}
	function _setPrototypeOf$21(o$2, p$2) {
		_setPrototypeOf$21 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$21(o$2, p$2);
	}
	var Namespace$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$21(Namespace$3, _Node);
		function Namespace$3() {
			return _Node.apply(this, arguments) || this;
		}
		var _proto = Namespace$3.prototype;
		_proto.qualifiedName = function qualifiedName(value) {
			if (this.namespace) return this.namespaceString + "|" + value;
			else return value;
		};
		_proto.valueToString = function valueToString() {
			return this.qualifiedName(_Node.prototype.valueToString.call(this));
		};
		_createClass$9(Namespace$3, [
			{
				key: "namespace",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					if (namespace === true || namespace === "*" || namespace === "&") {
						this._namespace = namespace;
						if (this.raws) delete this.raws.namespace;
						return;
					}
					var escaped = (0, _cssesc$4["default"])(namespace, { isIdentifier: true });
					this._namespace = namespace;
					if (escaped !== namespace) {
						(0, _util$7.ensureObject)(this, "raws");
						this.raws.namespace = escaped;
					} else if (this.raws) delete this.raws.namespace;
				}
			},
			{
				key: "ns",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					this.namespace = namespace;
				}
			},
			{
				key: "namespaceString",
				get: function get$2() {
					if (this.namespace) {
						var ns = this.stringifyProperty("namespace");
						if (ns === true) return "";
						else return ns;
					} else return "";
				}
			}
		]);
		return Namespace$3;
	}(_node$11["default"]);
	exports["default"] = Namespace$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/tag.js
var require_tag$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/tag.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace$5 = _interopRequireDefault$31(require_namespace$1());
	var _types$23 = require_types$2();
	function _interopRequireDefault$31(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$20(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$20(subClass, superClass);
	}
	function _setPrototypeOf$20(o$2, p$2) {
		_setPrototypeOf$20 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$20(o$2, p$2);
	}
	var Tag$1 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$20(Tag$3, _Namespace);
		function Tag$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$23.TAG;
			return _this;
		}
		return Tag$3;
	}(_namespace$5["default"]);
	exports["default"] = Tag$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/string.js
var require_string$2 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/string.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$10 = _interopRequireDefault$30(require_node$5());
	var _types$22 = require_types$2();
	function _interopRequireDefault$30(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$19(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$19(subClass, superClass);
	}
	function _setPrototypeOf$19(o$2, p$2) {
		_setPrototypeOf$19 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$19(o$2, p$2);
	}
	var String$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$19(String$4, _Node);
		function String$4(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$22.STRING;
			return _this;
		}
		return String$4;
	}(_node$10["default"]);
	exports["default"] = String$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/pseudo.js
var require_pseudo$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/pseudo.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$3 = _interopRequireDefault$29(require_container$1());
	var _types$21 = require_types$2();
	function _interopRequireDefault$29(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$18(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$18(subClass, superClass);
	}
	function _setPrototypeOf$18(o$2, p$2) {
		_setPrototypeOf$18 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$18(o$2, p$2);
	}
	var Pseudo$1 = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$18(Pseudo$3, _Container);
		function Pseudo$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$21.PSEUDO;
			return _this;
		}
		var _proto = Pseudo$3.prototype;
		_proto.toString = function toString$5() {
			var params = this.length ? "(" + this.map(String).join(",") + ")" : "";
			return [
				this.rawSpaceBefore,
				this.stringifyProperty("value"),
				params,
				this.rawSpaceAfter
			].join("");
		};
		return Pseudo$3;
	}(_container$3["default"]);
	exports["default"] = Pseudo$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/attribute.js
var require_attribute$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/attribute.js"(exports) {
	exports.__esModule = true;
	exports["default"] = void 0;
	exports.unescapeValue = unescapeValue$1;
	var _cssesc$3 = _interopRequireDefault$28(require_cssesc());
	var _unesc$2 = _interopRequireDefault$28(require_unesc$1());
	var _namespace$4 = _interopRequireDefault$28(require_namespace$1());
	var _types$20 = require_types$2();
	var _CSSESC_QUOTE_OPTIONS$1;
	function _interopRequireDefault$28(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$8(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$8(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$8(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$17(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$17(subClass, superClass);
	}
	function _setPrototypeOf$17(o$2, p$2) {
		_setPrototypeOf$17 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$17(o$2, p$2);
	}
	var deprecate$1 = require_node$6();
	var WRAPPED_IN_QUOTES$1 = /^('|")([^]*)\1$/;
	var warnOfDeprecatedValueAssignment$1 = deprecate$1(function() {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.");
	var warnOfDeprecatedQuotedAssignment$1 = deprecate$1(function() {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
	var warnOfDeprecatedConstructor$1 = deprecate$1(function() {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
	function unescapeValue$1(value) {
		var deprecatedUsage = false;
		var quoteMark = null;
		var unescaped = value;
		var m$2 = unescaped.match(WRAPPED_IN_QUOTES$1);
		if (m$2) {
			quoteMark = m$2[1];
			unescaped = m$2[2];
		}
		unescaped = (0, _unesc$2["default"])(unescaped);
		if (unescaped !== value) deprecatedUsage = true;
		return {
			deprecatedUsage,
			unescaped,
			quoteMark
		};
	}
	function handleDeprecatedContructorOpts$1(opts) {
		if (opts.quoteMark !== void 0) return opts;
		if (opts.value === void 0) return opts;
		warnOfDeprecatedConstructor$1();
		var _unescapeValue = unescapeValue$1(opts.value), quoteMark = _unescapeValue.quoteMark, unescaped = _unescapeValue.unescaped;
		if (!opts.raws) opts.raws = {};
		if (opts.raws.value === void 0) opts.raws.value = opts.value;
		opts.value = unescaped;
		opts.quoteMark = quoteMark;
		return opts;
	}
	var Attribute$1 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$17(Attribute$3, _Namespace);
		function Attribute$3(opts) {
			var _this;
			if (opts === void 0) opts = {};
			_this = _Namespace.call(this, handleDeprecatedContructorOpts$1(opts)) || this;
			_this.type = _types$20.ATTRIBUTE;
			_this.raws = _this.raws || {};
			Object.defineProperty(_this.raws, "unquoted", {
				get: deprecate$1(function() {
					return _this.value;
				}, "attr.raws.unquoted is deprecated. Call attr.value instead."),
				set: deprecate$1(function() {
					return _this.value;
				}, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
			});
			_this._constructed = true;
			return _this;
		}
		/**
		* Returns the Attribute's value quoted such that it would be legal to use
		* in the value of a css file. The original value's quotation setting
		* used for stringification is left unchanged. See `setValue(value, options)`
		* if you want to control the quote settings of a new value for the attribute.
		*
		* You can also change the quotation used for the current value by setting quoteMark.
		*
		* Options:
		*   * quoteMark {'"' | "'" | null} - Use this value to quote the value. If this
		*     option is not set, the original value for quoteMark will be used. If
		*     indeterminate, a double quote is used. The legal values are:
		*     * `null` - the value will be unquoted and characters will be escaped as necessary.
		*     * `'` - the value will be quoted with a single quote and single quotes are escaped.
		*     * `"` - the value will be quoted with a double quote and double quotes are escaped.
		*   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark
		*     over the quoteMark option value.
		*   * smart {boolean} - if true, will select a quote mark based on the value
		*     and the other options specified here. See the `smartQuoteMark()`
		*     method.
		**/
		var _proto = Attribute$3.prototype;
		_proto.getQuotedValue = function getQuotedValue(options) {
			if (options === void 0) options = {};
			var quoteMark = this._determineQuoteMark(options);
			var cssescopts = CSSESC_QUOTE_OPTIONS$1[quoteMark];
			var escaped = (0, _cssesc$3["default"])(this._value, cssescopts);
			return escaped;
		};
		_proto._determineQuoteMark = function _determineQuoteMark(options) {
			return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
		};
		_proto.setValue = function setValue(value, options) {
			if (options === void 0) options = {};
			this._value = value;
			this._quoteMark = this._determineQuoteMark(options);
			this._syncRawValue();
		};
		_proto.smartQuoteMark = function smartQuoteMark(options) {
			var v$1 = this.value;
			var numSingleQuotes = v$1.replace(/[^']/g, "").length;
			var numDoubleQuotes = v$1.replace(/[^"]/g, "").length;
			if (numSingleQuotes + numDoubleQuotes === 0) {
				var escaped = (0, _cssesc$3["default"])(v$1, { isIdentifier: true });
				if (escaped === v$1) return Attribute$3.NO_QUOTE;
				else {
					var pref = this.preferredQuoteMark(options);
					if (pref === Attribute$3.NO_QUOTE) {
						var quote = this.quoteMark || options.quoteMark || Attribute$3.DOUBLE_QUOTE;
						var opts = CSSESC_QUOTE_OPTIONS$1[quote];
						var quoteValue = (0, _cssesc$3["default"])(v$1, opts);
						if (quoteValue.length < escaped.length) return quote;
					}
					return pref;
				}
			} else if (numDoubleQuotes === numSingleQuotes) return this.preferredQuoteMark(options);
			else if (numDoubleQuotes < numSingleQuotes) return Attribute$3.DOUBLE_QUOTE;
			else return Attribute$3.SINGLE_QUOTE;
		};
		_proto.preferredQuoteMark = function preferredQuoteMark(options) {
			var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;
			if (quoteMark === void 0) quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
			if (quoteMark === void 0) quoteMark = Attribute$3.DOUBLE_QUOTE;
			return quoteMark;
		};
		_proto._syncRawValue = function _syncRawValue() {
			var rawValue = (0, _cssesc$3["default"])(this._value, CSSESC_QUOTE_OPTIONS$1[this.quoteMark]);
			if (rawValue === this._value) {
				if (this.raws) delete this.raws.value;
			} else this.raws.value = rawValue;
		};
		_proto._handleEscapes = function _handleEscapes(prop, value) {
			if (this._constructed) {
				var escaped = (0, _cssesc$3["default"])(value, { isIdentifier: true });
				if (escaped !== value) this.raws[prop] = escaped;
				else delete this.raws[prop];
			}
		};
		_proto._spacesFor = function _spacesFor(name) {
			var attrSpaces = {
				before: "",
				after: ""
			};
			var spaces = this.spaces[name] || {};
			var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
			return Object.assign(attrSpaces, spaces, rawSpaces);
		};
		_proto._stringFor = function _stringFor(name, spaceName, concat) {
			if (spaceName === void 0) spaceName = name;
			if (concat === void 0) concat = defaultAttrConcat$1;
			var attrSpaces = this._spacesFor(spaceName);
			return concat(this.stringifyProperty(name), attrSpaces);
		};
		_proto.offsetOf = function offsetOf(name) {
			var count = 1;
			var attributeSpaces = this._spacesFor("attribute");
			count += attributeSpaces.before.length;
			if (name === "namespace" || name === "ns") return this.namespace ? count : -1;
			if (name === "attributeNS") return count;
			count += this.namespaceString.length;
			if (this.namespace) count += 1;
			if (name === "attribute") return count;
			count += this.stringifyProperty("attribute").length;
			count += attributeSpaces.after.length;
			var operatorSpaces = this._spacesFor("operator");
			count += operatorSpaces.before.length;
			var operator$1 = this.stringifyProperty("operator");
			if (name === "operator") return operator$1 ? count : -1;
			count += operator$1.length;
			count += operatorSpaces.after.length;
			var valueSpaces = this._spacesFor("value");
			count += valueSpaces.before.length;
			var value = this.stringifyProperty("value");
			if (name === "value") return value ? count : -1;
			count += value.length;
			count += valueSpaces.after.length;
			var insensitiveSpaces = this._spacesFor("insensitive");
			count += insensitiveSpaces.before.length;
			if (name === "insensitive") return this.insensitive ? count : -1;
			return -1;
		};
		_proto.toString = function toString$5() {
			var _this2 = this;
			var selector$3 = [this.rawSpaceBefore, "["];
			selector$3.push(this._stringFor("qualifiedAttribute", "attribute"));
			if (this.operator && (this.value || this.value === "")) {
				selector$3.push(this._stringFor("operator"));
				selector$3.push(this._stringFor("value"));
				selector$3.push(this._stringFor("insensitiveFlag", "insensitive", function(attrValue, attrSpaces) {
					if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) attrSpaces.before = " ";
					return defaultAttrConcat$1(attrValue, attrSpaces);
				}));
			}
			selector$3.push("]");
			selector$3.push(this.rawSpaceAfter);
			return selector$3.join("");
		};
		_createClass$8(Attribute$3, [
			{
				key: "quoted",
				get: function get$2() {
					var qm = this.quoteMark;
					return qm === "'" || qm === "\"";
				},
				set: function set(value) {
					warnOfDeprecatedQuotedAssignment$1();
				}
			},
			{
				key: "quoteMark",
				get: function get$2() {
					return this._quoteMark;
				},
				set: function set(quoteMark) {
					if (!this._constructed) {
						this._quoteMark = quoteMark;
						return;
					}
					if (this._quoteMark !== quoteMark) {
						this._quoteMark = quoteMark;
						this._syncRawValue();
					}
				}
			},
			{
				key: "qualifiedAttribute",
				get: function get$2() {
					return this.qualifiedName(this.raws.attribute || this.attribute);
				}
			},
			{
				key: "insensitiveFlag",
				get: function get$2() {
					return this.insensitive ? "i" : "";
				}
			},
			{
				key: "value",
				get: function get$2() {
					return this._value;
				},
				set: function set(v$1) {
					if (this._constructed) {
						var _unescapeValue2 = unescapeValue$1(v$1), deprecatedUsage = _unescapeValue2.deprecatedUsage, unescaped = _unescapeValue2.unescaped, quoteMark = _unescapeValue2.quoteMark;
						if (deprecatedUsage) warnOfDeprecatedValueAssignment$1();
						if (unescaped === this._value && quoteMark === this._quoteMark) return;
						this._value = unescaped;
						this._quoteMark = quoteMark;
						this._syncRawValue();
					} else this._value = v$1;
				}
			},
			{
				key: "insensitive",
				get: function get$2() {
					return this._insensitive;
				},
				set: function set(insensitive) {
					if (!insensitive) {
						this._insensitive = false;
						if (this.raws && (this.raws.insensitiveFlag === "I" || this.raws.insensitiveFlag === "i")) this.raws.insensitiveFlag = void 0;
					}
					this._insensitive = insensitive;
				}
			},
			{
				key: "attribute",
				get: function get$2() {
					return this._attribute;
				},
				set: function set(name) {
					this._handleEscapes("attribute", name);
					this._attribute = name;
				}
			}
		]);
		return Attribute$3;
	}(_namespace$4["default"]);
	exports["default"] = Attribute$1;
	Attribute$1.NO_QUOTE = null;
	Attribute$1.SINGLE_QUOTE = "'";
	Attribute$1.DOUBLE_QUOTE = "\"";
	var CSSESC_QUOTE_OPTIONS$1 = (_CSSESC_QUOTE_OPTIONS$1 = {
		"'": {
			quotes: "single",
			wrap: true
		},
		"\"": {
			quotes: "double",
			wrap: true
		}
	}, _CSSESC_QUOTE_OPTIONS$1[null] = { isIdentifier: true }, _CSSESC_QUOTE_OPTIONS$1);
	function defaultAttrConcat$1(attrValue, attrSpaces) {
		return "" + attrSpaces.before + attrValue + attrSpaces.after;
	}
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/universal.js
var require_universal$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/universal.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace$3 = _interopRequireDefault$27(require_namespace$1());
	var _types$19 = require_types$2();
	function _interopRequireDefault$27(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$16(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$16(subClass, superClass);
	}
	function _setPrototypeOf$16(o$2, p$2) {
		_setPrototypeOf$16 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$16(o$2, p$2);
	}
	var Universal$1 = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$16(Universal$3, _Namespace);
		function Universal$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$19.UNIVERSAL;
			_this.value = "*";
			return _this;
		}
		return Universal$3;
	}(_namespace$3["default"]);
	exports["default"] = Universal$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/combinator.js
var require_combinator$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/combinator.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$9 = _interopRequireDefault$26(require_node$5());
	var _types$18 = require_types$2();
	function _interopRequireDefault$26(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$15(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$15(subClass, superClass);
	}
	function _setPrototypeOf$15(o$2, p$2) {
		_setPrototypeOf$15 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$15(o$2, p$2);
	}
	var Combinator$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$15(Combinator$3, _Node);
		function Combinator$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$18.COMBINATOR;
			return _this;
		}
		return Combinator$3;
	}(_node$9["default"]);
	exports["default"] = Combinator$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/nesting.js
var require_nesting$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/nesting.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$8 = _interopRequireDefault$25(require_node$5());
	var _types$17 = require_types$2();
	function _interopRequireDefault$25(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$14(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$14(subClass, superClass);
	}
	function _setPrototypeOf$14(o$2, p$2) {
		_setPrototypeOf$14 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$14(o$2, p$2);
	}
	var Nesting$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$14(Nesting$3, _Node);
		function Nesting$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$17.NESTING;
			_this.value = "&";
			return _this;
		}
		return Nesting$3;
	}(_node$8["default"]);
	exports["default"] = Nesting$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/sortAscending.js
var require_sortAscending$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/sortAscending.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = sortAscending$1;
	function sortAscending$1(list$4) {
		return list$4.sort(function(a$1, b$1) {
			return a$1 - b$1;
		});
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/tokenTypes.js
var require_tokenTypes$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/tokenTypes.js"(exports) {
	exports.__esModule = true;
	exports.word = exports.tilde = exports.tab = exports.str = exports.space = exports.slash = exports.singleQuote = exports.semicolon = exports.plus = exports.pipe = exports.openSquare = exports.openParenthesis = exports.newline = exports.greaterThan = exports.feed = exports.equals = exports.doubleQuote = exports.dollar = exports.cr = exports.comment = exports.comma = exports.combinator = exports.colon = exports.closeSquare = exports.closeParenthesis = exports.caret = exports.bang = exports.backslash = exports.at = exports.asterisk = exports.ampersand = void 0;
	var ampersand$1 = 38;
	exports.ampersand = ampersand$1;
	var asterisk$1 = 42;
	exports.asterisk = asterisk$1;
	var at$1 = 64;
	exports.at = at$1;
	var comma$2 = 44;
	exports.comma = comma$2;
	var colon$2 = 58;
	exports.colon = colon$2;
	var semicolon$1 = 59;
	exports.semicolon = semicolon$1;
	var openParenthesis$1 = 40;
	exports.openParenthesis = openParenthesis$1;
	var closeParenthesis$1 = 41;
	exports.closeParenthesis = closeParenthesis$1;
	var openSquare$1 = 91;
	exports.openSquare = openSquare$1;
	var closeSquare$1 = 93;
	exports.closeSquare = closeSquare$1;
	var dollar$1 = 36;
	exports.dollar = dollar$1;
	var tilde$1 = 126;
	exports.tilde = tilde$1;
	var caret$1 = 94;
	exports.caret = caret$1;
	var plus$3 = 43;
	exports.plus = plus$3;
	var equals$1 = 61;
	exports.equals = equals$1;
	var pipe$1 = 124;
	exports.pipe = pipe$1;
	var greaterThan$1 = 62;
	exports.greaterThan = greaterThan$1;
	var space$1 = 32;
	exports.space = space$1;
	var singleQuote$2 = 39;
	exports.singleQuote = singleQuote$2;
	var doubleQuote$2 = 34;
	exports.doubleQuote = doubleQuote$2;
	var slash$2 = 47;
	exports.slash = slash$2;
	var bang$1 = 33;
	exports.bang = bang$1;
	var backslash$2 = 92;
	exports.backslash = backslash$2;
	var cr$1 = 13;
	exports.cr = cr$1;
	var feed$1 = 12;
	exports.feed = feed$1;
	var newline$1 = 10;
	exports.newline = newline$1;
	var tab$1 = 9;
	exports.tab = tab$1;
	var str$1 = singleQuote$2;
	exports.str = str$1;
	var comment$3 = -1;
	exports.comment = comment$3;
	var word$1 = -2;
	exports.word = word$1;
	var combinator$3 = -3;
	exports.combinator = combinator$3;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/tokenize.js
var require_tokenize$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/tokenize.js"(exports) {
	exports.__esModule = true;
	exports.FIELDS = void 0;
	exports["default"] = tokenize$2;
	var t$7 = _interopRequireWildcard$6(require_tokenTypes$1());
	var _unescapable$1, _wordDelimiters$1;
	function _getRequireWildcardCache$6(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$6 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$6(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$6(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	var unescapable$1 = (_unescapable$1 = {}, _unescapable$1[t$7.tab] = true, _unescapable$1[t$7.newline] = true, _unescapable$1[t$7.cr] = true, _unescapable$1[t$7.feed] = true, _unescapable$1);
	var wordDelimiters$1 = (_wordDelimiters$1 = {}, _wordDelimiters$1[t$7.space] = true, _wordDelimiters$1[t$7.tab] = true, _wordDelimiters$1[t$7.newline] = true, _wordDelimiters$1[t$7.cr] = true, _wordDelimiters$1[t$7.feed] = true, _wordDelimiters$1[t$7.ampersand] = true, _wordDelimiters$1[t$7.asterisk] = true, _wordDelimiters$1[t$7.bang] = true, _wordDelimiters$1[t$7.comma] = true, _wordDelimiters$1[t$7.colon] = true, _wordDelimiters$1[t$7.semicolon] = true, _wordDelimiters$1[t$7.openParenthesis] = true, _wordDelimiters$1[t$7.closeParenthesis] = true, _wordDelimiters$1[t$7.openSquare] = true, _wordDelimiters$1[t$7.closeSquare] = true, _wordDelimiters$1[t$7.singleQuote] = true, _wordDelimiters$1[t$7.doubleQuote] = true, _wordDelimiters$1[t$7.plus] = true, _wordDelimiters$1[t$7.pipe] = true, _wordDelimiters$1[t$7.tilde] = true, _wordDelimiters$1[t$7.greaterThan] = true, _wordDelimiters$1[t$7.equals] = true, _wordDelimiters$1[t$7.dollar] = true, _wordDelimiters$1[t$7.caret] = true, _wordDelimiters$1[t$7.slash] = true, _wordDelimiters$1);
	var hex$1 = {};
	var hexChars$1 = "0123456789abcdefABCDEF";
	for (var i$3 = 0; i$3 < hexChars$1.length; i$3++) hex$1[hexChars$1.charCodeAt(i$3)] = true;
	/**
	*  Returns the last index of the bar css word
	* @param {string} css The string in which the word begins
	* @param {number} start The index into the string where word's first letter occurs
	*/
	function consumeWord$1(css, start) {
		var next = start;
		var code$1;
		do {
			code$1 = css.charCodeAt(next);
			if (wordDelimiters$1[code$1]) return next - 1;
			else if (code$1 === t$7.backslash) next = consumeEscape$1(css, next) + 1;
			else next++;
		} while (next < css.length);
		return next - 1;
	}
	/**
	*  Returns the last index of the escape sequence
	* @param {string} css The string in which the sequence begins
	* @param {number} start The index into the string where escape character (`\`) occurs.
	*/
	function consumeEscape$1(css, start) {
		var next = start;
		var code$1 = css.charCodeAt(next + 1);
		if (unescapable$1[code$1]) {} else if (hex$1[code$1]) {
			var hexDigits = 0;
			do {
				next++;
				hexDigits++;
				code$1 = css.charCodeAt(next + 1);
			} while (hex$1[code$1] && hexDigits < 6);
			if (hexDigits < 6 && code$1 === t$7.space) next++;
		} else next++;
		return next;
	}
	var FIELDS$1 = {
		TYPE: 0,
		START_LINE: 1,
		START_COL: 2,
		END_LINE: 3,
		END_COL: 4,
		START_POS: 5,
		END_POS: 6
	};
	exports.FIELDS = FIELDS$1;
	function tokenize$2(input) {
		var tokens$3 = [];
		var css = input.css.valueOf();
		var _css = css, length = _css.length;
		var offset = -1;
		var line = 1;
		var start = 0;
		var end = 0;
		var code$1, content, endColumn, endLine, escaped, escapePos, last$2, lines, next, nextLine, nextOffset, quote, tokenType;
		function unclosed(what, fix) {
			if (input.safe) {
				css += fix;
				next = css.length - 1;
			} else throw input.error("Unclosed " + what, line, start - offset, start);
		}
		while (start < length) {
			code$1 = css.charCodeAt(start);
			if (code$1 === t$7.newline) {
				offset = start;
				line += 1;
			}
			switch (code$1) {
				case t$7.space:
				case t$7.tab:
				case t$7.newline:
				case t$7.cr:
				case t$7.feed:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
						if (code$1 === t$7.newline) {
							offset = next;
							line += 1;
						}
					} while (code$1 === t$7.space || code$1 === t$7.newline || code$1 === t$7.tab || code$1 === t$7.cr || code$1 === t$7.feed);
					tokenType = t$7.space;
					endLine = line;
					endColumn = next - offset - 1;
					end = next;
					break;
				case t$7.plus:
				case t$7.greaterThan:
				case t$7.tilde:
				case t$7.pipe:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
					} while (code$1 === t$7.plus || code$1 === t$7.greaterThan || code$1 === t$7.tilde || code$1 === t$7.pipe);
					tokenType = t$7.combinator;
					endLine = line;
					endColumn = start - offset;
					end = next;
					break;
				case t$7.asterisk:
				case t$7.ampersand:
				case t$7.bang:
				case t$7.comma:
				case t$7.equals:
				case t$7.dollar:
				case t$7.caret:
				case t$7.openSquare:
				case t$7.closeSquare:
				case t$7.colon:
				case t$7.semicolon:
				case t$7.openParenthesis:
				case t$7.closeParenthesis:
					next = start;
					tokenType = code$1;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				case t$7.singleQuote:
				case t$7.doubleQuote:
					quote = code$1 === t$7.singleQuote ? "'" : "\"";
					next = start;
					do {
						escaped = false;
						next = css.indexOf(quote, next + 1);
						if (next === -1) unclosed("quote", quote);
						escapePos = next;
						while (css.charCodeAt(escapePos - 1) === t$7.backslash) {
							escapePos -= 1;
							escaped = !escaped;
						}
					} while (escaped);
					tokenType = t$7.str;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				default:
					if (code$1 === t$7.slash && css.charCodeAt(start + 1) === t$7.asterisk) {
						next = css.indexOf("*/", start + 2) + 1;
						if (next === 0) unclosed("comment", "*/");
						content = css.slice(start, next + 1);
						lines = content.split("\n");
						last$2 = lines.length - 1;
						if (last$2 > 0) {
							nextLine = line + last$2;
							nextOffset = next - lines[last$2].length;
						} else {
							nextLine = line;
							nextOffset = offset;
						}
						tokenType = t$7.comment;
						line = nextLine;
						endLine = nextLine;
						endColumn = next - nextOffset;
					} else if (code$1 === t$7.slash) {
						next = start;
						tokenType = code$1;
						endLine = line;
						endColumn = start - offset;
						end = next + 1;
					} else {
						next = consumeWord$1(css, start);
						tokenType = t$7.word;
						endLine = line;
						endColumn = next - offset;
					}
					end = next + 1;
					break;
			}
			tokens$3.push([
				tokenType,
				line,
				start - offset,
				endLine,
				endColumn,
				start,
				end
			]);
			if (nextOffset) {
				offset = nextOffset;
				nextOffset = null;
			}
			start = end;
		}
		return tokens$3;
	}
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/parser.js
var require_parser$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/parser.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _root$3 = _interopRequireDefault$24(require_root$1());
	var _selector$3 = _interopRequireDefault$24(require_selector$1());
	var _className$3 = _interopRequireDefault$24(require_className$1());
	var _comment$3 = _interopRequireDefault$24(require_comment$1());
	var _id$3 = _interopRequireDefault$24(require_id$1());
	var _tag$3 = _interopRequireDefault$24(require_tag$1());
	var _string$4 = _interopRequireDefault$24(require_string$2());
	var _pseudo$3 = _interopRequireDefault$24(require_pseudo$1());
	var _attribute$3 = _interopRequireWildcard$5(require_attribute$1());
	var _universal$3 = _interopRequireDefault$24(require_universal$1());
	var _combinator$3 = _interopRequireDefault$24(require_combinator$1());
	var _nesting$3 = _interopRequireDefault$24(require_nesting$1());
	var _sortAscending$1 = _interopRequireDefault$24(require_sortAscending$1());
	var _tokenize$1 = _interopRequireWildcard$5(require_tokenize$1());
	var tokens$1 = _interopRequireWildcard$5(require_tokenTypes$1());
	var types$2 = _interopRequireWildcard$5(require_types$2());
	var _util$6 = require_util$2();
	var _WHITESPACE_TOKENS$1, _Object$assign$1;
	function _getRequireWildcardCache$5(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$5 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$5(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$5(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$24(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$7(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$7(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$7(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var WHITESPACE_TOKENS$1 = (_WHITESPACE_TOKENS$1 = {}, _WHITESPACE_TOKENS$1[tokens$1.space] = true, _WHITESPACE_TOKENS$1[tokens$1.cr] = true, _WHITESPACE_TOKENS$1[tokens$1.feed] = true, _WHITESPACE_TOKENS$1[tokens$1.newline] = true, _WHITESPACE_TOKENS$1[tokens$1.tab] = true, _WHITESPACE_TOKENS$1);
	var WHITESPACE_EQUIV_TOKENS$1 = Object.assign({}, WHITESPACE_TOKENS$1, (_Object$assign$1 = {}, _Object$assign$1[tokens$1.comment] = true, _Object$assign$1));
	function tokenStart$1(token$1) {
		return {
			line: token$1[_tokenize$1.FIELDS.START_LINE],
			column: token$1[_tokenize$1.FIELDS.START_COL]
		};
	}
	function tokenEnd$1(token$1) {
		return {
			line: token$1[_tokenize$1.FIELDS.END_LINE],
			column: token$1[_tokenize$1.FIELDS.END_COL]
		};
	}
	function getSource$3(startLine, startColumn, endLine, endColumn) {
		return {
			start: {
				line: startLine,
				column: startColumn
			},
			end: {
				line: endLine,
				column: endColumn
			}
		};
	}
	function getTokenSource$1(token$1) {
		return getSource$3(token$1[_tokenize$1.FIELDS.START_LINE], token$1[_tokenize$1.FIELDS.START_COL], token$1[_tokenize$1.FIELDS.END_LINE], token$1[_tokenize$1.FIELDS.END_COL]);
	}
	function getTokenSourceSpan$1(startToken, endToken) {
		if (!startToken) return void 0;
		return getSource$3(startToken[_tokenize$1.FIELDS.START_LINE], startToken[_tokenize$1.FIELDS.START_COL], endToken[_tokenize$1.FIELDS.END_LINE], endToken[_tokenize$1.FIELDS.END_COL]);
	}
	function unescapeProp$1(node, prop) {
		var value = node[prop];
		if (typeof value !== "string") return;
		if (value.indexOf("\\") !== -1) {
			(0, _util$6.ensureObject)(node, "raws");
			node[prop] = (0, _util$6.unesc)(value);
			if (node.raws[prop] === void 0) node.raws[prop] = value;
		}
		return node;
	}
	function indexesOf$1(array, item) {
		var i$6 = -1;
		var indexes = [];
		while ((i$6 = array.indexOf(item, i$6 + 1)) !== -1) indexes.push(i$6);
		return indexes;
	}
	function uniqs$1() {
		var list$4 = Array.prototype.concat.apply([], arguments);
		return list$4.filter(function(item, i$6) {
			return i$6 === list$4.indexOf(item);
		});
	}
	var Parser$2 = /* @__PURE__ */ function() {
		function Parser$10(rule$1, options) {
			if (options === void 0) options = {};
			this.rule = rule$1;
			this.options = Object.assign({
				lossy: false,
				safe: false
			}, options);
			this.position = 0;
			this.css = typeof this.rule === "string" ? this.rule : this.rule.selector;
			this.tokens = (0, _tokenize$1["default"])({
				css: this.css,
				error: this._errorGenerator(),
				safe: this.options.safe
			});
			var rootSource = getTokenSourceSpan$1(this.tokens[0], this.tokens[this.tokens.length - 1]);
			this.root = new _root$3["default"]({ source: rootSource });
			this.root.errorGenerator = this._errorGenerator();
			var selector$3 = new _selector$3["default"]({
				source: { start: {
					line: 1,
					column: 1
				} },
				sourceIndex: 0
			});
			this.root.append(selector$3);
			this.current = selector$3;
			this.loop();
		}
		var _proto = Parser$10.prototype;
		_proto._errorGenerator = function _errorGenerator() {
			var _this = this;
			return function(message, errorOptions) {
				if (typeof _this.rule === "string") return new Error(message);
				return _this.rule.error(message, errorOptions);
			};
		};
		_proto.attribute = function attribute$3() {
			var attr = [];
			var startingToken = this.currToken;
			this.position++;
			while (this.position < this.tokens.length && this.currToken[_tokenize$1.FIELDS.TYPE] !== tokens$1.closeSquare) {
				attr.push(this.currToken);
				this.position++;
			}
			if (this.currToken[_tokenize$1.FIELDS.TYPE] !== tokens$1.closeSquare) return this.expected("closing square bracket", this.currToken[_tokenize$1.FIELDS.START_POS]);
			var len = attr.length;
			var node = {
				source: getSource$3(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
				sourceIndex: startingToken[_tokenize$1.FIELDS.START_POS]
			};
			if (len === 1 && !~[tokens$1.word].indexOf(attr[0][_tokenize$1.FIELDS.TYPE])) return this.expected("attribute", attr[0][_tokenize$1.FIELDS.START_POS]);
			var pos = 0;
			var spaceBefore = "";
			var commentBefore = "";
			var lastAdded = null;
			var spaceAfterMeaningfulToken = false;
			while (pos < len) {
				var token$1 = attr[pos];
				var content = this.content(token$1);
				var next = attr[pos + 1];
				switch (token$1[_tokenize$1.FIELDS.TYPE]) {
					case tokens$1.space:
						spaceAfterMeaningfulToken = true;
						if (this.options.lossy) break;
						if (lastAdded) {
							(0, _util$6.ensureObject)(node, "spaces", lastAdded);
							var prevContent = node.spaces[lastAdded].after || "";
							node.spaces[lastAdded].after = prevContent + content;
							var existingComment = (0, _util$6.getProp)(node, "raws", "spaces", lastAdded, "after") || null;
							if (existingComment) node.raws.spaces[lastAdded].after = existingComment + content;
						} else {
							spaceBefore = spaceBefore + content;
							commentBefore = commentBefore + content;
						}
						break;
					case tokens$1.asterisk:
						if (next[_tokenize$1.FIELDS.TYPE] === tokens$1.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
							if (spaceBefore) {
								(0, _util$6.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$6.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = spaceBefore;
								commentBefore = "";
							}
							node.namespace = (node.namespace || "") + content;
							var rawValue = (0, _util$6.getProp)(node, "raws", "namespace") || null;
							if (rawValue) node.raws.namespace += content;
							lastAdded = "namespace";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.dollar: if (lastAdded === "value") {
						var oldRawValue = (0, _util$6.getProp)(node, "raws", "value");
						node.value += "$";
						if (oldRawValue) node.raws.value = oldRawValue + "$";
						break;
					}
					case tokens$1.caret:
						if (next[_tokenize$1.FIELDS.TYPE] === tokens$1.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.combinator:
						if (content === "~" && next[_tokenize$1.FIELDS.TYPE] === tokens$1.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						if (content !== "|") {
							spaceAfterMeaningfulToken = false;
							break;
						}
						if (next[_tokenize$1.FIELDS.TYPE] === tokens$1.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if (!node.namespace && !node.attribute) node.namespace = true;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.word:
						if (next && this.content(next) === "|" && attr[pos + 2] && attr[pos + 2][_tokenize$1.FIELDS.TYPE] !== tokens$1.equals && !node.operator && !node.namespace) {
							node.namespace = content;
							lastAdded = "namespace";
						} else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
							if (spaceBefore) {
								(0, _util$6.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$6.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = commentBefore;
								commentBefore = "";
							}
							node.attribute = (node.attribute || "") + content;
							var _rawValue = (0, _util$6.getProp)(node, "raws", "attribute") || null;
							if (_rawValue) node.raws.attribute += content;
							lastAdded = "attribute";
						} else if (!node.value && node.value !== "" || lastAdded === "value" && !(spaceAfterMeaningfulToken || node.quoteMark)) {
							var _unescaped = (0, _util$6.unesc)(content);
							var _oldRawValue = (0, _util$6.getProp)(node, "raws", "value") || "";
							var oldValue = node.value || "";
							node.value = oldValue + _unescaped;
							node.quoteMark = null;
							if (_unescaped !== content || _oldRawValue) {
								(0, _util$6.ensureObject)(node, "raws");
								node.raws.value = (_oldRawValue || oldValue) + content;
							}
							lastAdded = "value";
						} else {
							var insensitive = content === "i" || content === "I";
							if ((node.value || node.value === "") && (node.quoteMark || spaceAfterMeaningfulToken)) {
								node.insensitive = insensitive;
								if (!insensitive || content === "I") {
									(0, _util$6.ensureObject)(node, "raws");
									node.raws.insensitiveFlag = content;
								}
								lastAdded = "insensitive";
								if (spaceBefore) {
									(0, _util$6.ensureObject)(node, "spaces", "insensitive");
									node.spaces.insensitive.before = spaceBefore;
									spaceBefore = "";
								}
								if (commentBefore) {
									(0, _util$6.ensureObject)(node, "raws", "spaces", "insensitive");
									node.raws.spaces.insensitive.before = commentBefore;
									commentBefore = "";
								}
							} else if (node.value || node.value === "") {
								lastAdded = "value";
								node.value += content;
								if (node.raws.value) node.raws.value += content;
							}
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.str:
						if (!node.attribute || !node.operator) return this.error("Expected an attribute followed by an operator preceding the string.", { index: token$1[_tokenize$1.FIELDS.START_POS] });
						var _unescapeValue = (0, _attribute$3.unescapeValue)(content), unescaped = _unescapeValue.unescaped, quoteMark = _unescapeValue.quoteMark;
						node.value = unescaped;
						node.quoteMark = quoteMark;
						lastAdded = "value";
						(0, _util$6.ensureObject)(node, "raws");
						node.raws.value = content;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.equals:
						if (!node.attribute) return this.expected("attribute", token$1[_tokenize$1.FIELDS.START_POS], content);
						if (node.value) return this.error("Unexpected \"=\" found; an operator was already defined.", { index: token$1[_tokenize$1.FIELDS.START_POS] });
						node.operator = node.operator ? node.operator + content : content;
						lastAdded = "operator";
						spaceAfterMeaningfulToken = false;
						break;
					case tokens$1.comment:
						if (lastAdded) if (spaceAfterMeaningfulToken || next && next[_tokenize$1.FIELDS.TYPE] === tokens$1.space || lastAdded === "insensitive") {
							var lastComment = (0, _util$6.getProp)(node, "spaces", lastAdded, "after") || "";
							var rawLastComment = (0, _util$6.getProp)(node, "raws", "spaces", lastAdded, "after") || lastComment;
							(0, _util$6.ensureObject)(node, "raws", "spaces", lastAdded);
							node.raws.spaces[lastAdded].after = rawLastComment + content;
						} else {
							var lastValue = node[lastAdded] || "";
							var rawLastValue = (0, _util$6.getProp)(node, "raws", lastAdded) || lastValue;
							(0, _util$6.ensureObject)(node, "raws");
							node.raws[lastAdded] = rawLastValue + content;
						}
						else commentBefore = commentBefore + content;
						break;
					default: return this.error("Unexpected \"" + content + "\" found.", { index: token$1[_tokenize$1.FIELDS.START_POS] });
				}
				pos++;
			}
			unescapeProp$1(node, "attribute");
			unescapeProp$1(node, "namespace");
			this.newNode(new _attribute$3["default"](node));
			this.position++;
		};
		_proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
			if (stopPosition < 0) stopPosition = this.tokens.length;
			var startPosition = this.position;
			var nodes$1 = [];
			var space$3 = "";
			var lastComment = void 0;
			do
				if (WHITESPACE_TOKENS$1[this.currToken[_tokenize$1.FIELDS.TYPE]]) {
					if (!this.options.lossy) space$3 += this.content();
				} else if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.comment) {
					var spaces = {};
					if (space$3) {
						spaces.before = space$3;
						space$3 = "";
					}
					lastComment = new _comment$3["default"]({
						value: this.content(),
						source: getTokenSource$1(this.currToken),
						sourceIndex: this.currToken[_tokenize$1.FIELDS.START_POS],
						spaces
					});
					nodes$1.push(lastComment);
				}
			while (++this.position < stopPosition);
			if (space$3) {
				if (lastComment) lastComment.spaces.after = space$3;
				else if (!this.options.lossy) {
					var firstToken = this.tokens[startPosition];
					var lastToken = this.tokens[this.position - 1];
					nodes$1.push(new _string$4["default"]({
						value: "",
						source: getSource$3(firstToken[_tokenize$1.FIELDS.START_LINE], firstToken[_tokenize$1.FIELDS.START_COL], lastToken[_tokenize$1.FIELDS.END_LINE], lastToken[_tokenize$1.FIELDS.END_COL]),
						sourceIndex: firstToken[_tokenize$1.FIELDS.START_POS],
						spaces: {
							before: space$3,
							after: ""
						}
					}));
				}
			}
			return nodes$1;
		};
		_proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes$1, requiredSpace) {
			var _this2 = this;
			if (requiredSpace === void 0) requiredSpace = false;
			var space$3 = "";
			var rawSpace = "";
			nodes$1.forEach(function(n$4) {
				var spaceBefore = _this2.lossySpace(n$4.spaces.before, requiredSpace);
				var rawSpaceBefore = _this2.lossySpace(n$4.rawSpaceBefore, requiredSpace);
				space$3 += spaceBefore + _this2.lossySpace(n$4.spaces.after, requiredSpace && spaceBefore.length === 0);
				rawSpace += spaceBefore + n$4.value + _this2.lossySpace(n$4.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
			});
			if (rawSpace === space$3) rawSpace = void 0;
			var result = {
				space: space$3,
				rawSpace
			};
			return result;
		};
		_proto.isNamedCombinator = function isNamedCombinator(position) {
			if (position === void 0) position = this.position;
			return this.tokens[position + 0] && this.tokens[position + 0][_tokenize$1.FIELDS.TYPE] === tokens$1.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize$1.FIELDS.TYPE] === tokens$1.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize$1.FIELDS.TYPE] === tokens$1.slash;
		};
		_proto.namedCombinator = function namedCombinator() {
			if (this.isNamedCombinator()) {
				var nameRaw = this.content(this.tokens[this.position + 1]);
				var name = (0, _util$6.unesc)(nameRaw).toLowerCase();
				var raws = {};
				if (name !== nameRaw) raws.value = "/" + nameRaw + "/";
				var node = new _combinator$3["default"]({
					value: "/" + name + "/",
					source: getSource$3(this.currToken[_tokenize$1.FIELDS.START_LINE], this.currToken[_tokenize$1.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize$1.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize$1.FIELDS.END_COL]),
					sourceIndex: this.currToken[_tokenize$1.FIELDS.START_POS],
					raws
				});
				this.position = this.position + 3;
				return node;
			} else this.unexpected();
		};
		_proto.combinator = function combinator$6() {
			var _this3 = this;
			if (this.content() === "|") return this.namespace();
			var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);
			if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize$1.FIELDS.TYPE] === tokens$1.comma || this.tokens[nextSigTokenPos][_tokenize$1.FIELDS.TYPE] === tokens$1.closeParenthesis) {
				var nodes$1 = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
				if (nodes$1.length > 0) {
					var last$2 = this.current.last;
					if (last$2) {
						var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes$1), space$3 = _this$convertWhitespa.space, rawSpace = _this$convertWhitespa.rawSpace;
						if (rawSpace !== void 0) last$2.rawSpaceAfter += rawSpace;
						last$2.spaces.after += space$3;
					} else nodes$1.forEach(function(n$4) {
						return _this3.newNode(n$4);
					});
				}
				return;
			}
			var firstToken = this.currToken;
			var spaceOrDescendantSelectorNodes = void 0;
			if (nextSigTokenPos > this.position) spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
			var node;
			if (this.isNamedCombinator()) node = this.namedCombinator();
			else if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.combinator) {
				node = new _combinator$3["default"]({
					value: this.content(),
					source: getTokenSource$1(this.currToken),
					sourceIndex: this.currToken[_tokenize$1.FIELDS.START_POS]
				});
				this.position++;
			} else if (WHITESPACE_TOKENS$1[this.currToken[_tokenize$1.FIELDS.TYPE]]) {} else if (!spaceOrDescendantSelectorNodes) this.unexpected();
			if (node) {
				if (spaceOrDescendantSelectorNodes) {
					var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes), _space = _this$convertWhitespa2.space, _rawSpace = _this$convertWhitespa2.rawSpace;
					node.spaces.before = _space;
					node.rawSpaceBefore = _rawSpace;
				}
			} else {
				var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true), _space2 = _this$convertWhitespa3.space, _rawSpace2 = _this$convertWhitespa3.rawSpace;
				if (!_rawSpace2) _rawSpace2 = _space2;
				var spaces = {};
				var raws = { spaces: {} };
				if (_space2.endsWith(" ") && _rawSpace2.endsWith(" ")) {
					spaces.before = _space2.slice(0, _space2.length - 1);
					raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
				} else if (_space2.startsWith(" ") && _rawSpace2.startsWith(" ")) {
					spaces.after = _space2.slice(1);
					raws.spaces.after = _rawSpace2.slice(1);
				} else raws.value = _rawSpace2;
				node = new _combinator$3["default"]({
					value: " ",
					source: getTokenSourceSpan$1(firstToken, this.tokens[this.position - 1]),
					sourceIndex: firstToken[_tokenize$1.FIELDS.START_POS],
					spaces,
					raws
				});
			}
			if (this.currToken && this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.space) {
				node.spaces.after = this.optionalSpace(this.content());
				this.position++;
			}
			return this.newNode(node);
		};
		_proto.comma = function comma$5() {
			if (this.position === this.tokens.length - 1) {
				this.root.trailingComma = true;
				this.position++;
				return;
			}
			this.current._inferEndPosition();
			var selector$3 = new _selector$3["default"]({
				source: { start: tokenStart$1(this.tokens[this.position + 1]) },
				sourceIndex: this.tokens[this.position + 1][_tokenize$1.FIELDS.START_POS]
			});
			this.current.parent.append(selector$3);
			this.current = selector$3;
			this.position++;
		};
		_proto.comment = function comment$7() {
			var current = this.currToken;
			this.newNode(new _comment$3["default"]({
				value: this.content(),
				source: getTokenSource$1(current),
				sourceIndex: current[_tokenize$1.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.error = function error(message, opts) {
			throw this.root.error(message, opts);
		};
		_proto.missingBackslash = function missingBackslash() {
			return this.error("Expected a backslash preceding the semicolon.", { index: this.currToken[_tokenize$1.FIELDS.START_POS] });
		};
		_proto.missingParenthesis = function missingParenthesis() {
			return this.expected("opening parenthesis", this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.missingSquareBracket = function missingSquareBracket() {
			return this.expected("opening square bracket", this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.unexpected = function unexpected() {
			return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.unexpectedPipe = function unexpectedPipe() {
			return this.error("Unexpected '|'.", this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.namespace = function namespace() {
			var before = this.prevToken && this.content(this.prevToken) || true;
			if (this.nextToken[_tokenize$1.FIELDS.TYPE] === tokens$1.word) {
				this.position++;
				return this.word(before);
			} else if (this.nextToken[_tokenize$1.FIELDS.TYPE] === tokens$1.asterisk) {
				this.position++;
				return this.universal(before);
			}
			this.unexpectedPipe();
		};
		_proto.nesting = function nesting$3() {
			if (this.nextToken) {
				var nextContent = this.content(this.nextToken);
				if (nextContent === "|") {
					this.position++;
					return;
				}
			}
			var current = this.currToken;
			this.newNode(new _nesting$3["default"]({
				value: this.content(),
				source: getTokenSource$1(current),
				sourceIndex: current[_tokenize$1.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.parentheses = function parentheses() {
			var last$2 = this.current.last;
			var unbalanced = 1;
			this.position++;
			if (last$2 && last$2.type === types$2.PSEUDO) {
				var selector$3 = new _selector$3["default"]({
					source: { start: tokenStart$1(this.tokens[this.position]) },
					sourceIndex: this.tokens[this.position][_tokenize$1.FIELDS.START_POS]
				});
				var cache$3 = this.current;
				last$2.append(selector$3);
				this.current = selector$3;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.closeParenthesis) unbalanced--;
					if (unbalanced) this.parse();
					else {
						this.current.source.end = tokenEnd$1(this.currToken);
						this.current.parent.source.end = tokenEnd$1(this.currToken);
						this.position++;
					}
				}
				this.current = cache$3;
			} else {
				var parenStart = this.currToken;
				var parenValue = "(";
				var parenEnd;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.closeParenthesis) unbalanced--;
					parenEnd = this.currToken;
					parenValue += this.parseParenthesisToken(this.currToken);
					this.position++;
				}
				if (last$2) last$2.appendToPropertyAndEscape("value", parenValue, parenValue);
				else this.newNode(new _string$4["default"]({
					value: parenValue,
					source: getSource$3(parenStart[_tokenize$1.FIELDS.START_LINE], parenStart[_tokenize$1.FIELDS.START_COL], parenEnd[_tokenize$1.FIELDS.END_LINE], parenEnd[_tokenize$1.FIELDS.END_COL]),
					sourceIndex: parenStart[_tokenize$1.FIELDS.START_POS]
				}));
			}
			if (unbalanced) return this.expected("closing parenthesis", this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.pseudo = function pseudo$3() {
			var _this4 = this;
			var pseudoStr = "";
			var startingToken = this.currToken;
			while (this.currToken && this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.colon) {
				pseudoStr += this.content();
				this.position++;
			}
			if (!this.currToken) return this.expected(["pseudo-class", "pseudo-element"], this.position - 1);
			if (this.currToken[_tokenize$1.FIELDS.TYPE] === tokens$1.word) this.splitWord(false, function(first, length) {
				pseudoStr += first;
				_this4.newNode(new _pseudo$3["default"]({
					value: pseudoStr,
					source: getTokenSourceSpan$1(startingToken, _this4.currToken),
					sourceIndex: startingToken[_tokenize$1.FIELDS.START_POS]
				}));
				if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize$1.FIELDS.TYPE] === tokens$1.openParenthesis) _this4.error("Misplaced parenthesis.", { index: _this4.nextToken[_tokenize$1.FIELDS.START_POS] });
			});
			else return this.expected(["pseudo-class", "pseudo-element"], this.currToken[_tokenize$1.FIELDS.START_POS]);
		};
		_proto.space = function space$3() {
			var content = this.content();
			if (this.position === 0 || this.prevToken[_tokenize$1.FIELDS.TYPE] === tokens$1.comma || this.prevToken[_tokenize$1.FIELDS.TYPE] === tokens$1.openParenthesis || this.current.nodes.every(function(node) {
				return node.type === "comment";
			})) {
				this.spaces = this.optionalSpace(content);
				this.position++;
			} else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize$1.FIELDS.TYPE] === tokens$1.comma || this.nextToken[_tokenize$1.FIELDS.TYPE] === tokens$1.closeParenthesis) {
				this.current.last.spaces.after = this.optionalSpace(content);
				this.position++;
			} else this.combinator();
		};
		_proto.string = function string$3() {
			var current = this.currToken;
			this.newNode(new _string$4["default"]({
				value: this.content(),
				source: getTokenSource$1(current),
				sourceIndex: current[_tokenize$1.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.universal = function universal$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			var current = this.currToken;
			this.newNode(new _universal$3["default"]({
				value: this.content(),
				source: getTokenSource$1(current),
				sourceIndex: current[_tokenize$1.FIELDS.START_POS]
			}), namespace);
			this.position++;
		};
		_proto.splitWord = function splitWord(namespace, firstCallback) {
			var _this5 = this;
			var nextToken = this.nextToken;
			var word$3 = this.content();
			while (nextToken && ~[
				tokens$1.dollar,
				tokens$1.caret,
				tokens$1.equals,
				tokens$1.word
			].indexOf(nextToken[_tokenize$1.FIELDS.TYPE])) {
				this.position++;
				var current = this.content();
				word$3 += current;
				if (current.lastIndexOf("\\") === current.length - 1) {
					var next = this.nextToken;
					if (next && next[_tokenize$1.FIELDS.TYPE] === tokens$1.space) {
						word$3 += this.requiredSpace(this.content(next));
						this.position++;
					}
				}
				nextToken = this.nextToken;
			}
			var hasClass = indexesOf$1(word$3, ".").filter(function(i$6) {
				var escapedDot = word$3[i$6 - 1] === "\\";
				var isKeyframesPercent = /^\d+\.\d+%$/.test(word$3);
				return !escapedDot && !isKeyframesPercent;
			});
			var hasId = indexesOf$1(word$3, "#").filter(function(i$6) {
				return word$3[i$6 - 1] !== "\\";
			});
			var interpolations = indexesOf$1(word$3, "#{");
			if (interpolations.length) hasId = hasId.filter(function(hashIndex) {
				return !~interpolations.indexOf(hashIndex);
			});
			var indices = (0, _sortAscending$1["default"])(uniqs$1([0].concat(hasClass, hasId)));
			indices.forEach(function(ind, i$6) {
				var index$1 = indices[i$6 + 1] || word$3.length;
				var value = word$3.slice(ind, index$1);
				if (i$6 === 0 && firstCallback) return firstCallback.call(_this5, value, indices.length);
				var node;
				var current$1 = _this5.currToken;
				var sourceIndex = current$1[_tokenize$1.FIELDS.START_POS] + indices[i$6];
				var source = getSource$3(current$1[1], current$1[2] + ind, current$1[3], current$1[2] + (index$1 - 1));
				if (~hasClass.indexOf(ind)) {
					var classNameOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _className$3["default"](unescapeProp$1(classNameOpts, "value"));
				} else if (~hasId.indexOf(ind)) {
					var idOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _id$3["default"](unescapeProp$1(idOpts, "value"));
				} else {
					var tagOpts = {
						value,
						source,
						sourceIndex
					};
					unescapeProp$1(tagOpts, "value");
					node = new _tag$3["default"](tagOpts);
				}
				_this5.newNode(node, namespace);
				namespace = null;
			});
			this.position++;
		};
		_proto.word = function word$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			return this.splitWord(namespace);
		};
		_proto.loop = function loop() {
			while (this.position < this.tokens.length) this.parse(true);
			this.current._inferEndPosition();
			return this.root;
		};
		_proto.parse = function parse$17(throwOnParenthesis) {
			switch (this.currToken[_tokenize$1.FIELDS.TYPE]) {
				case tokens$1.space:
					this.space();
					break;
				case tokens$1.comment:
					this.comment();
					break;
				case tokens$1.openParenthesis:
					this.parentheses();
					break;
				case tokens$1.closeParenthesis:
					if (throwOnParenthesis) this.missingParenthesis();
					break;
				case tokens$1.openSquare:
					this.attribute();
					break;
				case tokens$1.dollar:
				case tokens$1.caret:
				case tokens$1.equals:
				case tokens$1.word:
					this.word();
					break;
				case tokens$1.colon:
					this.pseudo();
					break;
				case tokens$1.comma:
					this.comma();
					break;
				case tokens$1.asterisk:
					this.universal();
					break;
				case tokens$1.ampersand:
					this.nesting();
					break;
				case tokens$1.slash:
				case tokens$1.combinator:
					this.combinator();
					break;
				case tokens$1.str:
					this.string();
					break;
				case tokens$1.closeSquare: this.missingSquareBracket();
				case tokens$1.semicolon: this.missingBackslash();
				default: this.unexpected();
			}
		};
		_proto.expected = function expected(description, index$1, found) {
			if (Array.isArray(description)) {
				var last$2 = description.pop();
				description = description.join(", ") + " or " + last$2;
			}
			var an = /^[aeiou]/.test(description[0]) ? "an" : "a";
			if (!found) return this.error("Expected " + an + " " + description + ".", { index: index$1 });
			return this.error("Expected " + an + " " + description + ", found \"" + found + "\" instead.", { index: index$1 });
		};
		_proto.requiredSpace = function requiredSpace(space$3) {
			return this.options.lossy ? " " : space$3;
		};
		_proto.optionalSpace = function optionalSpace(space$3) {
			return this.options.lossy ? "" : space$3;
		};
		_proto.lossySpace = function lossySpace(space$3, required) {
			if (this.options.lossy) return required ? " " : "";
			else return space$3;
		};
		_proto.parseParenthesisToken = function parseParenthesisToken(token$1) {
			var content = this.content(token$1);
			if (token$1[_tokenize$1.FIELDS.TYPE] === tokens$1.space) return this.requiredSpace(content);
			else return content;
		};
		_proto.newNode = function newNode(node, namespace) {
			if (namespace) {
				if (/^ +$/.test(namespace)) {
					if (!this.options.lossy) this.spaces = (this.spaces || "") + namespace;
					namespace = true;
				}
				node.namespace = namespace;
				unescapeProp$1(node, "namespace");
			}
			if (this.spaces) {
				node.spaces.before = this.spaces;
				this.spaces = "";
			}
			return this.current.append(node);
		};
		_proto.content = function content(token$1) {
			if (token$1 === void 0) token$1 = this.currToken;
			return this.css.slice(token$1[_tokenize$1.FIELDS.START_POS], token$1[_tokenize$1.FIELDS.END_POS]);
		};
		/**
		* returns the index of the next non-whitespace, non-comment token.
		* returns -1 if no meaningful token is found.
		*/
		_proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
			if (startPosition === void 0) startPosition = this.position + 1;
			var searchPosition = startPosition;
			while (searchPosition < this.tokens.length) if (WHITESPACE_EQUIV_TOKENS$1[this.tokens[searchPosition][_tokenize$1.FIELDS.TYPE]]) {
				searchPosition++;
				continue;
			} else return searchPosition;
			return -1;
		};
		_createClass$7(Parser$10, [
			{
				key: "currToken",
				get: function get$2() {
					return this.tokens[this.position];
				}
			},
			{
				key: "nextToken",
				get: function get$2() {
					return this.tokens[this.position + 1];
				}
			},
			{
				key: "prevToken",
				get: function get$2() {
					return this.tokens[this.position - 1];
				}
			}
		]);
		return Parser$10;
	}();
	exports["default"] = Parser$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/processor.js
var require_processor$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/processor.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _parser$4 = _interopRequireDefault$23(require_parser$1());
	function _interopRequireDefault$23(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var Processor$1 = /* @__PURE__ */ function() {
		function Processor$8(func, options) {
			this.func = func || function noop$3() {};
			this.funcRes = null;
			this.options = options;
		}
		var _proto = Processor$8.prototype;
		_proto._shouldUpdateSelector = function _shouldUpdateSelector(rule$1, options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.updateSelector === false) return false;
			else return typeof rule$1 !== "string";
		};
		_proto._isLossy = function _isLossy(options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.lossless === false) return true;
			else return false;
		};
		_proto._root = function _root$6(rule$1, options) {
			if (options === void 0) options = {};
			var parser$5 = new _parser$4["default"](rule$1, this._parseOptions(options));
			return parser$5.root;
		};
		_proto._parseOptions = function _parseOptions(options) {
			return { lossy: this._isLossy(options) };
		};
		_proto._run = function _run(rule$1, options) {
			var _this = this;
			if (options === void 0) options = {};
			return new Promise(function(resolve$5, reject) {
				try {
					var root$5 = _this._root(rule$1, options);
					Promise.resolve(_this.func(root$5)).then(function(transform$1) {
						var string$3 = void 0;
						if (_this._shouldUpdateSelector(rule$1, options)) {
							string$3 = root$5.toString();
							rule$1.selector = string$3;
						}
						return {
							transform: transform$1,
							root: root$5,
							string: string$3
						};
					}).then(resolve$5, reject);
				} catch (e$2) {
					reject(e$2);
					return;
				}
			});
		};
		_proto._runSync = function _runSync(rule$1, options) {
			if (options === void 0) options = {};
			var root$5 = this._root(rule$1, options);
			var transform$1 = this.func(root$5);
			if (transform$1 && typeof transform$1.then === "function") throw new Error("Selector processor returned a promise to a synchronous call.");
			var string$3 = void 0;
			if (options.updateSelector && typeof rule$1 !== "string") {
				string$3 = root$5.toString();
				rule$1.selector = string$3;
			}
			return {
				transform: transform$1,
				root: root$5,
				string: string$3
			};
		};
		_proto.ast = function ast(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.root;
			});
		};
		_proto.astSync = function astSync(rule$1, options) {
			return this._runSync(rule$1, options).root;
		};
		_proto.transform = function transform$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.transform;
			});
		};
		_proto.transformSync = function transformSync(rule$1, options) {
			return this._runSync(rule$1, options).transform;
		};
		_proto.process = function process$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.string || result.root.toString();
			});
		};
		_proto.processSync = function processSync(rule$1, options) {
			var result = this._runSync(rule$1, options);
			return result.string || result.root.toString();
		};
		return Processor$8;
	}();
	exports["default"] = Processor$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/constructors.js
var require_constructors$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/constructors.js"(exports) {
	exports.__esModule = true;
	exports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;
	var _attribute$2 = _interopRequireDefault$22(require_attribute$1());
	var _className$2 = _interopRequireDefault$22(require_className$1());
	var _combinator$2 = _interopRequireDefault$22(require_combinator$1());
	var _comment$2 = _interopRequireDefault$22(require_comment$1());
	var _id$2 = _interopRequireDefault$22(require_id$1());
	var _nesting$2 = _interopRequireDefault$22(require_nesting$1());
	var _pseudo$2 = _interopRequireDefault$22(require_pseudo$1());
	var _root$2 = _interopRequireDefault$22(require_root$1());
	var _selector$2 = _interopRequireDefault$22(require_selector$1());
	var _string$3 = _interopRequireDefault$22(require_string$2());
	var _tag$2 = _interopRequireDefault$22(require_tag$1());
	var _universal$2 = _interopRequireDefault$22(require_universal$1());
	function _interopRequireDefault$22(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var attribute$1 = function attribute$3(opts) {
		return new _attribute$2["default"](opts);
	};
	exports.attribute = attribute$1;
	var className$1 = function className$3(opts) {
		return new _className$2["default"](opts);
	};
	exports.className = className$1;
	var combinator$2 = function combinator$6(opts) {
		return new _combinator$2["default"](opts);
	};
	exports.combinator = combinator$2;
	var comment$2 = function comment$7(opts) {
		return new _comment$2["default"](opts);
	};
	exports.comment = comment$2;
	var id$1 = function id$4(opts) {
		return new _id$2["default"](opts);
	};
	exports.id = id$1;
	var nesting$1 = function nesting$3(opts) {
		return new _nesting$2["default"](opts);
	};
	exports.nesting = nesting$1;
	var pseudo$1 = function pseudo$3(opts) {
		return new _pseudo$2["default"](opts);
	};
	exports.pseudo = pseudo$1;
	var root$1 = function root$5(opts) {
		return new _root$2["default"](opts);
	};
	exports.root = root$1;
	var selector$1 = function selector$3(opts) {
		return new _selector$2["default"](opts);
	};
	exports.selector = selector$1;
	var string$1 = function string$3(opts) {
		return new _string$3["default"](opts);
	};
	exports.string = string$1;
	var tag$1 = function tag$3(opts) {
		return new _tag$2["default"](opts);
	};
	exports.tag = tag$1;
	var universal$1 = function universal$3(opts) {
		return new _universal$2["default"](opts);
	};
	exports.universal = universal$1;
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/guards.js
var require_guards$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/guards.js"(exports) {
	exports.__esModule = true;
	exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;
	exports.isContainer = isContainer$1;
	exports.isIdentifier = void 0;
	exports.isNamespace = isNamespace$1;
	exports.isNesting = void 0;
	exports.isNode = isNode$2;
	exports.isPseudo = void 0;
	exports.isPseudoClass = isPseudoClass$1;
	exports.isPseudoElement = isPseudoElement$1;
	exports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = void 0;
	var _types$16 = require_types$2();
	var _IS_TYPE$1;
	var IS_TYPE$1 = (_IS_TYPE$1 = {}, _IS_TYPE$1[_types$16.ATTRIBUTE] = true, _IS_TYPE$1[_types$16.CLASS] = true, _IS_TYPE$1[_types$16.COMBINATOR] = true, _IS_TYPE$1[_types$16.COMMENT] = true, _IS_TYPE$1[_types$16.ID] = true, _IS_TYPE$1[_types$16.NESTING] = true, _IS_TYPE$1[_types$16.PSEUDO] = true, _IS_TYPE$1[_types$16.ROOT] = true, _IS_TYPE$1[_types$16.SELECTOR] = true, _IS_TYPE$1[_types$16.STRING] = true, _IS_TYPE$1[_types$16.TAG] = true, _IS_TYPE$1[_types$16.UNIVERSAL] = true, _IS_TYPE$1);
	function isNode$2(node) {
		return typeof node === "object" && IS_TYPE$1[node.type];
	}
	function isNodeType$2(type, node) {
		return isNode$2(node) && node.type === type;
	}
	var isAttribute$1 = isNodeType$2.bind(null, _types$16.ATTRIBUTE);
	exports.isAttribute = isAttribute$1;
	var isClassName$1 = isNodeType$2.bind(null, _types$16.CLASS);
	exports.isClassName = isClassName$1;
	var isCombinator$1 = isNodeType$2.bind(null, _types$16.COMBINATOR);
	exports.isCombinator = isCombinator$1;
	var isComment$3 = isNodeType$2.bind(null, _types$16.COMMENT);
	exports.isComment = isComment$3;
	var isIdentifier$13 = isNodeType$2.bind(null, _types$16.ID);
	exports.isIdentifier = isIdentifier$13;
	var isNesting$1 = isNodeType$2.bind(null, _types$16.NESTING);
	exports.isNesting = isNesting$1;
	var isPseudo$1 = isNodeType$2.bind(null, _types$16.PSEUDO);
	exports.isPseudo = isPseudo$1;
	var isRoot$1 = isNodeType$2.bind(null, _types$16.ROOT);
	exports.isRoot = isRoot$1;
	var isSelector$1 = isNodeType$2.bind(null, _types$16.SELECTOR);
	exports.isSelector = isSelector$1;
	var isString$2 = isNodeType$2.bind(null, _types$16.STRING);
	exports.isString = isString$2;
	var isTag$4 = isNodeType$2.bind(null, _types$16.TAG);
	exports.isTag = isTag$4;
	var isUniversal$1 = isNodeType$2.bind(null, _types$16.UNIVERSAL);
	exports.isUniversal = isUniversal$1;
	function isPseudoElement$1(node) {
		return isPseudo$1(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after" || node.value.toLowerCase() === ":first-letter" || node.value.toLowerCase() === ":first-line");
	}
	function isPseudoClass$1(node) {
		return isPseudo$1(node) && !isPseudoElement$1(node);
	}
	function isContainer$1(node) {
		return !!(isNode$2(node) && node.walk);
	}
	function isNamespace$1(node) {
		return isAttribute$1(node) || isTag$4(node);
	}
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/index.js
var require_selectors$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/selectors/index.js"(exports) {
	exports.__esModule = true;
	var _types$15 = require_types$2();
	Object.keys(_types$15).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _types$15[key]) return;
		exports[key] = _types$15[key];
	});
	var _constructors$1 = require_constructors$1();
	Object.keys(_constructors$1).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _constructors$1[key]) return;
		exports[key] = _constructors$1[key];
	});
	var _guards$1 = require_guards$1();
	Object.keys(_guards$1).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _guards$1[key]) return;
		exports[key] = _guards$1[key];
	});
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/index.js
var require_dist$1 = __commonJS({ "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser/dist/index.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _processor$1 = _interopRequireDefault$21(require_processor$1());
	var selectors$1 = _interopRequireWildcard$4(require_selectors$1());
	function _getRequireWildcardCache$4(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$4 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$4(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$4(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$21(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var parser$2 = function parser$5(processor) {
		return new _processor$1["default"](processor);
	};
	Object.assign(parser$2, selectors$1);
	delete parser$2.__esModule;
	var _default$12 = parser$2;
	exports["default"] = _default$12;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-value-parser/lib/parse.js
var require_parse$2 = __commonJS({ "node_modules/postcss-value-parser/lib/parse.js"(exports, module) {
	var openParentheses = "(".charCodeAt(0);
	var closeParentheses = ")".charCodeAt(0);
	var singleQuote$1 = "'".charCodeAt(0);
	var doubleQuote$1 = "\"".charCodeAt(0);
	var backslash$1 = "\\".charCodeAt(0);
	var slash$1 = "/".charCodeAt(0);
	var comma$1 = ",".charCodeAt(0);
	var colon$1 = ":".charCodeAt(0);
	var star$1 = "*".charCodeAt(0);
	var uLower = "u".charCodeAt(0);
	var uUpper = "U".charCodeAt(0);
	var plus$2 = "+".charCodeAt(0);
	var isUnicodeRange = /^[a-f0-9?-]+$/i;
	module.exports = function(input) {
		var tokens$3 = [];
		var value = input;
		var next, quote, prev, token$1, escape$2, escapePos, whitespacePos, parenthesesOpenPos;
		var pos = 0;
		var code$1 = value.charCodeAt(pos);
		var max$1 = value.length;
		var stack = [{ nodes: tokens$3 }];
		var balanced$2 = 0;
		var parent;
		var name = "";
		var before = "";
		var after = "";
		while (pos < max$1) if (code$1 <= 32) {
			next = pos;
			do {
				next += 1;
				code$1 = value.charCodeAt(next);
			} while (code$1 <= 32);
			token$1 = value.slice(pos, next);
			prev = tokens$3[tokens$3.length - 1];
			if (code$1 === closeParentheses && balanced$2) after = token$1;
			else if (prev && prev.type === "div") {
				prev.after = token$1;
				prev.sourceEndIndex += token$1.length;
			} else if (code$1 === comma$1 || code$1 === colon$1 || code$1 === slash$1 && value.charCodeAt(next + 1) !== star$1 && (!parent || parent && parent.type === "function" && parent.value !== "calc")) before = token$1;
			else tokens$3.push({
				type: "space",
				sourceIndex: pos,
				sourceEndIndex: next,
				value: token$1
			});
			pos = next;
		} else if (code$1 === singleQuote$1 || code$1 === doubleQuote$1) {
			next = pos;
			quote = code$1 === singleQuote$1 ? "'" : "\"";
			token$1 = {
				type: "string",
				sourceIndex: pos,
				quote
			};
			do {
				escape$2 = false;
				next = value.indexOf(quote, next + 1);
				if (~next) {
					escapePos = next;
					while (value.charCodeAt(escapePos - 1) === backslash$1) {
						escapePos -= 1;
						escape$2 = !escape$2;
					}
				} else {
					value += quote;
					next = value.length - 1;
					token$1.unclosed = true;
				}
			} while (escape$2);
			token$1.value = value.slice(pos + 1, next);
			token$1.sourceEndIndex = token$1.unclosed ? next : next + 1;
			tokens$3.push(token$1);
			pos = next + 1;
			code$1 = value.charCodeAt(pos);
		} else if (code$1 === slash$1 && value.charCodeAt(pos + 1) === star$1) {
			next = value.indexOf("*/", pos);
			token$1 = {
				type: "comment",
				sourceIndex: pos,
				sourceEndIndex: next + 2
			};
			if (next === -1) {
				token$1.unclosed = true;
				next = value.length;
				token$1.sourceEndIndex = next;
			}
			token$1.value = value.slice(pos + 2, next);
			tokens$3.push(token$1);
			pos = next + 2;
			code$1 = value.charCodeAt(pos);
		} else if ((code$1 === slash$1 || code$1 === star$1) && parent && parent.type === "function" && parent.value === "calc") {
			token$1 = value[pos];
			tokens$3.push({
				type: "word",
				sourceIndex: pos - before.length,
				sourceEndIndex: pos + token$1.length,
				value: token$1
			});
			pos += 1;
			code$1 = value.charCodeAt(pos);
		} else if (code$1 === slash$1 || code$1 === comma$1 || code$1 === colon$1) {
			token$1 = value[pos];
			tokens$3.push({
				type: "div",
				sourceIndex: pos - before.length,
				sourceEndIndex: pos + token$1.length,
				value: token$1,
				before,
				after: ""
			});
			before = "";
			pos += 1;
			code$1 = value.charCodeAt(pos);
		} else if (openParentheses === code$1) {
			next = pos;
			do {
				next += 1;
				code$1 = value.charCodeAt(next);
			} while (code$1 <= 32);
			parenthesesOpenPos = pos;
			token$1 = {
				type: "function",
				sourceIndex: pos - name.length,
				value: name,
				before: value.slice(parenthesesOpenPos + 1, next)
			};
			pos = next;
			if (name === "url" && code$1 !== singleQuote$1 && code$1 !== doubleQuote$1) {
				next -= 1;
				do {
					escape$2 = false;
					next = value.indexOf(")", next + 1);
					if (~next) {
						escapePos = next;
						while (value.charCodeAt(escapePos - 1) === backslash$1) {
							escapePos -= 1;
							escape$2 = !escape$2;
						}
					} else {
						value += ")";
						next = value.length - 1;
						token$1.unclosed = true;
					}
				} while (escape$2);
				whitespacePos = next;
				do {
					whitespacePos -= 1;
					code$1 = value.charCodeAt(whitespacePos);
				} while (code$1 <= 32);
				if (parenthesesOpenPos < whitespacePos) {
					if (pos !== whitespacePos + 1) token$1.nodes = [{
						type: "word",
						sourceIndex: pos,
						sourceEndIndex: whitespacePos + 1,
						value: value.slice(pos, whitespacePos + 1)
					}];
					else token$1.nodes = [];
					if (token$1.unclosed && whitespacePos + 1 !== next) {
						token$1.after = "";
						token$1.nodes.push({
							type: "space",
							sourceIndex: whitespacePos + 1,
							sourceEndIndex: next,
							value: value.slice(whitespacePos + 1, next)
						});
					} else {
						token$1.after = value.slice(whitespacePos + 1, next);
						token$1.sourceEndIndex = next;
					}
				} else {
					token$1.after = "";
					token$1.nodes = [];
				}
				pos = next + 1;
				token$1.sourceEndIndex = token$1.unclosed ? next : pos;
				code$1 = value.charCodeAt(pos);
				tokens$3.push(token$1);
			} else {
				balanced$2 += 1;
				token$1.after = "";
				token$1.sourceEndIndex = pos + 1;
				tokens$3.push(token$1);
				stack.push(token$1);
				tokens$3 = token$1.nodes = [];
				parent = token$1;
			}
			name = "";
		} else if (closeParentheses === code$1 && balanced$2) {
			pos += 1;
			code$1 = value.charCodeAt(pos);
			parent.after = after;
			parent.sourceEndIndex += after.length;
			after = "";
			balanced$2 -= 1;
			stack[stack.length - 1].sourceEndIndex = pos;
			stack.pop();
			parent = stack[balanced$2];
			tokens$3 = parent.nodes;
		} else {
			next = pos;
			do {
				if (code$1 === backslash$1) next += 1;
				next += 1;
				code$1 = value.charCodeAt(next);
			} while (next < max$1 && !(code$1 <= 32 || code$1 === singleQuote$1 || code$1 === doubleQuote$1 || code$1 === comma$1 || code$1 === colon$1 || code$1 === slash$1 || code$1 === openParentheses || code$1 === star$1 && parent && parent.type === "function" && parent.value === "calc" || code$1 === slash$1 && parent.type === "function" && parent.value === "calc" || code$1 === closeParentheses && balanced$2));
			token$1 = value.slice(pos, next);
			if (openParentheses === code$1) name = token$1;
			else if ((uLower === token$1.charCodeAt(0) || uUpper === token$1.charCodeAt(0)) && plus$2 === token$1.charCodeAt(1) && isUnicodeRange.test(token$1.slice(2))) tokens$3.push({
				type: "unicode-range",
				sourceIndex: pos,
				sourceEndIndex: next,
				value: token$1
			});
			else tokens$3.push({
				type: "word",
				sourceIndex: pos,
				sourceEndIndex: next,
				value: token$1
			});
			pos = next;
		}
		for (pos = stack.length - 1; pos; pos -= 1) {
			stack[pos].unclosed = true;
			stack[pos].sourceEndIndex = value.length;
		}
		return stack[0].nodes;
	};
} });

//#endregion
//#region node_modules/postcss-value-parser/lib/walk.js
var require_walk = __commonJS({ "node_modules/postcss-value-parser/lib/walk.js"(exports, module) {
	module.exports = function walk$2(nodes$1, cb, bubble) {
		var i$6, max$1, node, result;
		for (i$6 = 0, max$1 = nodes$1.length; i$6 < max$1; i$6 += 1) {
			node = nodes$1[i$6];
			if (!bubble) result = cb(node, i$6, nodes$1);
			if (result !== false && node.type === "function" && Array.isArray(node.nodes)) walk$2(node.nodes, cb, bubble);
			if (bubble) cb(node, i$6, nodes$1);
		}
	};
} });

//#endregion
//#region node_modules/postcss-value-parser/lib/stringify.js
var require_stringify$1 = __commonJS({ "node_modules/postcss-value-parser/lib/stringify.js"(exports, module) {
	function stringifyNode(node, custom) {
		var type = node.type;
		var value = node.value;
		var buf;
		var customResult;
		if (custom && (customResult = custom(node)) !== void 0) return customResult;
		else if (type === "word" || type === "space") return value;
		else if (type === "string") {
			buf = node.quote || "";
			return buf + value + (node.unclosed ? "" : buf);
		} else if (type === "comment") return "/*" + value + (node.unclosed ? "" : "*/");
		else if (type === "div") return (node.before || "") + value + (node.after || "");
		else if (Array.isArray(node.nodes)) {
			buf = stringify$1(node.nodes, custom);
			if (type !== "function") return buf;
			return value + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
		}
		return value;
	}
	function stringify$1(nodes$1, custom) {
		var result, i$6;
		if (Array.isArray(nodes$1)) {
			result = "";
			for (i$6 = nodes$1.length - 1; ~i$6; i$6 -= 1) result = stringifyNode(nodes$1[i$6], custom) + result;
			return result;
		}
		return stringifyNode(nodes$1, custom);
	}
	module.exports = stringify$1;
} });

//#endregion
//#region node_modules/postcss-value-parser/lib/unit.js
var require_unit = __commonJS({ "node_modules/postcss-value-parser/lib/unit.js"(exports, module) {
	var minus = "-".charCodeAt(0);
	var plus$1 = "+".charCodeAt(0);
	var dot = ".".charCodeAt(0);
	var exp = "e".charCodeAt(0);
	var EXP = "E".charCodeAt(0);
	function likeNumber(value) {
		var code$1 = value.charCodeAt(0);
		var nextCode;
		if (code$1 === plus$1 || code$1 === minus) {
			nextCode = value.charCodeAt(1);
			if (nextCode >= 48 && nextCode <= 57) return true;
			var nextNextCode = value.charCodeAt(2);
			if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) return true;
			return false;
		}
		if (code$1 === dot) {
			nextCode = value.charCodeAt(1);
			if (nextCode >= 48 && nextCode <= 57) return true;
			return false;
		}
		if (code$1 >= 48 && code$1 <= 57) return true;
		return false;
	}
	module.exports = function(value) {
		var pos = 0;
		var length = value.length;
		var code$1;
		var nextCode;
		var nextNextCode;
		if (length === 0 || !likeNumber(value)) return false;
		code$1 = value.charCodeAt(pos);
		if (code$1 === plus$1 || code$1 === minus) pos++;
		while (pos < length) {
			code$1 = value.charCodeAt(pos);
			if (code$1 < 48 || code$1 > 57) break;
			pos += 1;
		}
		code$1 = value.charCodeAt(pos);
		nextCode = value.charCodeAt(pos + 1);
		if (code$1 === dot && nextCode >= 48 && nextCode <= 57) {
			pos += 2;
			while (pos < length) {
				code$1 = value.charCodeAt(pos);
				if (code$1 < 48 || code$1 > 57) break;
				pos += 1;
			}
		}
		code$1 = value.charCodeAt(pos);
		nextCode = value.charCodeAt(pos + 1);
		nextNextCode = value.charCodeAt(pos + 2);
		if ((code$1 === exp || code$1 === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus$1 || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {
			pos += nextCode === plus$1 || nextCode === minus ? 3 : 2;
			while (pos < length) {
				code$1 = value.charCodeAt(pos);
				if (code$1 < 48 || code$1 > 57) break;
				pos += 1;
			}
		}
		return {
			number: value.slice(0, pos),
			unit: value.slice(pos)
		};
	};
} });

//#endregion
//#region node_modules/postcss-value-parser/lib/index.js
var require_lib$14 = __commonJS({ "node_modules/postcss-value-parser/lib/index.js"(exports, module) {
	var parse$5 = require_parse$2();
	var walk = require_walk();
	var stringify = require_stringify$1();
	function ValueParser(value) {
		if (this instanceof ValueParser) {
			this.nodes = parse$5(value);
			return this;
		}
		return new ValueParser(value);
	}
	ValueParser.prototype.toString = function() {
		return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
	};
	ValueParser.prototype.walk = function(cb, bubble) {
		walk(this.nodes, cb, bubble);
		return this;
	};
	ValueParser.unit = require_unit();
	ValueParser.walk = walk;
	ValueParser.stringify = stringify;
	module.exports = ValueParser;
} });

//#endregion
//#region node_modules/icss-utils/src/replaceValueSymbols.js
var require_replaceValueSymbols = __commonJS({ "node_modules/icss-utils/src/replaceValueSymbols.js"(exports, module) {
	const matchValueName = /[$]?[\w-]+/g;
	const replaceValueSymbols$2 = (value, replacements) => {
		let matches;
		while (matches = matchValueName.exec(value)) {
			const replacement = replacements[matches[0]];
			if (replacement) {
				value = value.slice(0, matches.index) + replacement + value.slice(matchValueName.lastIndex);
				matchValueName.lastIndex -= matches[0].length - replacement.length;
			}
		}
		return value;
	};
	module.exports = replaceValueSymbols$2;
} });

//#endregion
//#region node_modules/icss-utils/src/replaceSymbols.js
var require_replaceSymbols = __commonJS({ "node_modules/icss-utils/src/replaceSymbols.js"(exports, module) {
	const replaceValueSymbols$1 = require_replaceValueSymbols();
	const replaceSymbols$1 = (css, replacements) => {
		css.walk((node) => {
			if (node.type === "decl" && node.value) node.value = replaceValueSymbols$1(node.value.toString(), replacements);
			else if (node.type === "rule" && node.selector) node.selector = replaceValueSymbols$1(node.selector.toString(), replacements);
			else if (node.type === "atrule" && node.params) node.params = replaceValueSymbols$1(node.params.toString(), replacements);
		});
	};
	module.exports = replaceSymbols$1;
} });

//#endregion
//#region node_modules/icss-utils/src/extractICSS.js
var require_extractICSS = __commonJS({ "node_modules/icss-utils/src/extractICSS.js"(exports, module) {
	const importPattern = /^:import\(("[^"]*"|'[^']*'|[^"']+)\)$/;
	const balancedQuotes = /^("[^"]*"|'[^']*'|[^"']+)$/;
	const getDeclsObject = (rule$1) => {
		const object$2 = {};
		rule$1.walkDecls((decl$1) => {
			const before = decl$1.raws.before ? decl$1.raws.before.trim() : "";
			object$2[before + decl$1.prop] = decl$1.value;
		});
		return object$2;
	};
	/**
	*
	* @param {string} css
	* @param {boolean} removeRules
	* @param {'auto' | 'rule' | 'at-rule'} mode
	*/
	const extractICSS$2 = (css, removeRules = true, mode = "auto") => {
		const icssImports = {};
		const icssExports = {};
		function addImports(node, path$28) {
			const unquoted = path$28.replace(/'|"/g, "");
			icssImports[unquoted] = Object.assign(icssImports[unquoted] || {}, getDeclsObject(node));
			if (removeRules) node.remove();
		}
		function addExports(node) {
			Object.assign(icssExports, getDeclsObject(node));
			if (removeRules) node.remove();
		}
		css.each((node) => {
			if (node.type === "rule" && mode !== "at-rule") {
				if (node.selector.slice(0, 7) === ":import") {
					const matches = importPattern.exec(node.selector);
					if (matches) addImports(node, matches[1]);
				}
				if (node.selector === ":export") addExports(node);
			}
			if (node.type === "atrule" && mode !== "rule") {
				if (node.name === "icss-import") {
					const matches = balancedQuotes.exec(node.params);
					if (matches) addImports(node, matches[1]);
				}
				if (node.name === "icss-export") addExports(node);
			}
		});
		return {
			icssImports,
			icssExports
		};
	};
	module.exports = extractICSS$2;
} });

//#endregion
//#region node_modules/icss-utils/src/createICSSRules.js
var require_createICSSRules = __commonJS({ "node_modules/icss-utils/src/createICSSRules.js"(exports, module) {
	const createImports = (imports, postcss$3, mode = "rule") => {
		return Object.keys(imports).map((path$28) => {
			const aliases = imports[path$28];
			const declarations = Object.keys(aliases).map((key) => postcss$3.decl({
				prop: key,
				value: aliases[key],
				raws: { before: "\n  " }
			}));
			const hasDeclarations = declarations.length > 0;
			const rule$1 = mode === "rule" ? postcss$3.rule({
				selector: `:import('${path$28}')`,
				raws: { after: hasDeclarations ? "\n" : "" }
			}) : postcss$3.atRule({
				name: "icss-import",
				params: `'${path$28}'`,
				raws: { after: hasDeclarations ? "\n" : "" }
			});
			if (hasDeclarations) rule$1.append(declarations);
			return rule$1;
		});
	};
	const createExports = (exports$1, postcss$3, mode = "rule") => {
		const declarations = Object.keys(exports$1).map((key) => postcss$3.decl({
			prop: key,
			value: exports$1[key],
			raws: { before: "\n  " }
		}));
		if (declarations.length === 0) return [];
		const rule$1 = mode === "rule" ? postcss$3.rule({
			selector: `:export`,
			raws: { after: "\n" }
		}) : postcss$3.atRule({
			name: "icss-export",
			raws: { after: "\n" }
		});
		rule$1.append(declarations);
		return [rule$1];
	};
	const createICSSRules$1 = (imports, exports$1, postcss$3, mode) => [...createImports(imports, postcss$3, mode), ...createExports(exports$1, postcss$3, mode)];
	module.exports = createICSSRules$1;
} });

//#endregion
//#region node_modules/icss-utils/src/index.js
var require_src$5 = __commonJS({ "node_modules/icss-utils/src/index.js"(exports, module) {
	const replaceValueSymbols = require_replaceValueSymbols();
	const replaceSymbols = require_replaceSymbols();
	const extractICSS$1 = require_extractICSS();
	const createICSSRules = require_createICSSRules();
	module.exports = {
		replaceValueSymbols,
		replaceSymbols,
		extractICSS: extractICSS$1,
		createICSSRules
	};
} });

//#endregion
//#region node_modules/postcss-modules-local-by-default/src/index.js
var require_src$4 = __commonJS({ "node_modules/postcss-modules-local-by-default/src/index.js"(exports, module) {
	const selectorParser$2 = require_dist$1();
	const valueParser = require_lib$14();
	const { extractICSS } = require_src$5();
	const IGNORE_FILE_MARKER = "cssmodules-pure-no-check";
	const IGNORE_NEXT_LINE_MARKER = "cssmodules-pure-ignore";
	const isSpacing = (node) => node.type === "combinator" && node.value === " ";
	const isPureCheckDisabled = (root$5) => {
		for (const node of root$5.nodes) {
			if (node.type !== "comment") return false;
			if (node.text.trim().startsWith(IGNORE_FILE_MARKER)) return true;
		}
		return false;
	};
	function getIgnoreComment(node) {
		if (!node.parent) return;
		const indexInParent = node.parent.index(node);
		for (let i$6 = indexInParent - 1; i$6 >= 0; i$6--) {
			const prevNode = node.parent.nodes[i$6];
			if (prevNode.type === "comment") {
				if (prevNode.text.trimStart().startsWith(IGNORE_NEXT_LINE_MARKER)) return prevNode;
			} else break;
		}
	}
	function normalizeNodeArray(nodes$1) {
		const array = [];
		nodes$1.forEach((x$1) => {
			if (Array.isArray(x$1)) normalizeNodeArray(x$1).forEach((item) => {
				array.push(item);
			});
			else if (x$1) array.push(x$1);
		});
		if (array.length > 0 && isSpacing(array[array.length - 1])) array.pop();
		return array;
	}
	const isPureSelectorSymbol = Symbol("is-pure-selector");
	function localizeNode(rule$1, mode, localAliasMap) {
		const transform$1 = (node, context) => {
			if (context.ignoreNextSpacing && !isSpacing(node)) throw new Error("Missing whitespace after " + context.ignoreNextSpacing);
			if (context.enforceNoSpacing && isSpacing(node)) throw new Error("Missing whitespace before " + context.enforceNoSpacing);
			let newNodes;
			switch (node.type) {
				case "root": {
					let resultingGlobal;
					context.hasPureGlobals = false;
					newNodes = node.nodes.map((n$4) => {
						const nContext = {
							global: context.global,
							lastWasSpacing: true,
							hasLocals: false,
							explicit: false
						};
						n$4 = transform$1(n$4, nContext);
						if (typeof resultingGlobal === "undefined") resultingGlobal = nContext.global;
						else if (resultingGlobal !== nContext.global) throw new Error("Inconsistent rule global/local result in rule \"" + node + "\" (multiple selectors must result in the same mode for the rule)");
						if (!nContext.hasLocals) context.hasPureGlobals = true;
						return n$4;
					});
					context.global = resultingGlobal;
					node.nodes = normalizeNodeArray(newNodes);
					break;
				}
				case "selector": {
					newNodes = node.map((childNode) => transform$1(childNode, context));
					node = node.clone();
					node.nodes = normalizeNodeArray(newNodes);
					break;
				}
				case "combinator": {
					if (isSpacing(node)) {
						if (context.ignoreNextSpacing) {
							context.ignoreNextSpacing = false;
							context.lastWasSpacing = false;
							context.enforceNoSpacing = false;
							return null;
						}
						context.lastWasSpacing = true;
						return node;
					}
					break;
				}
				case "pseudo": {
					let childContext;
					const isNested = !!node.length;
					const isScoped = node.value === ":local" || node.value === ":global";
					const isImportExport = node.value === ":import" || node.value === ":export";
					if (isImportExport) context.hasLocals = true;
					else if (isNested) {
						if (isScoped) {
							if (node.nodes.length === 0) throw new Error(`${node.value}() can't be empty`);
							if (context.inside) throw new Error(`A ${node.value} is not allowed inside of a ${context.inside}(...)`);
							childContext = {
								global: node.value === ":global",
								inside: node.value,
								hasLocals: false,
								explicit: true
							};
							newNodes = node.map((childNode) => transform$1(childNode, childContext)).reduce((acc, next) => acc.concat(next.nodes), []);
							if (newNodes.length) {
								const { before, after } = node.spaces;
								const first = newNodes[0];
								const last$2 = newNodes[newNodes.length - 1];
								first.spaces = {
									before,
									after: first.spaces.after
								};
								last$2.spaces = {
									before: last$2.spaces.before,
									after
								};
							}
							node = newNodes;
							break;
						} else {
							childContext = {
								global: context.global,
								inside: context.inside,
								lastWasSpacing: true,
								hasLocals: false,
								explicit: context.explicit
							};
							newNodes = node.map((childNode) => {
								const newContext = {
									...childContext,
									enforceNoSpacing: false
								};
								const result = transform$1(childNode, newContext);
								childContext.global = newContext.global;
								childContext.hasLocals = newContext.hasLocals;
								return result;
							});
							node = node.clone();
							node.nodes = normalizeNodeArray(newNodes);
							if (childContext.hasLocals) context.hasLocals = true;
						}
						break;
					} else if (isScoped) {
						if (context.inside) throw new Error(`A ${node.value} is not allowed inside of a ${context.inside}(...)`);
						const addBackSpacing = !!node.spaces.before;
						context.ignoreNextSpacing = context.lastWasSpacing ? node.value : false;
						context.enforceNoSpacing = context.lastWasSpacing ? false : node.value;
						context.global = node.value === ":global";
						context.explicit = true;
						return addBackSpacing ? selectorParser$2.combinator({ value: " " }) : null;
					}
					break;
				}
				case "id":
				case "class": {
					if (!node.value) throw new Error("Invalid class or id selector syntax");
					if (context.global) break;
					const isImportedValue = localAliasMap.has(node.value);
					const isImportedWithExplicitScope = isImportedValue && context.explicit;
					if (!isImportedValue || isImportedWithExplicitScope) {
						const innerNode = node.clone();
						innerNode.spaces = {
							before: "",
							after: ""
						};
						node = selectorParser$2.pseudo({
							value: ":local",
							nodes: [innerNode],
							spaces: node.spaces
						});
						context.hasLocals = true;
					}
					break;
				}
				case "nesting": if (node.value === "&") context.hasLocals = rule$1.parent[isPureSelectorSymbol];
			}
			context.lastWasSpacing = false;
			context.ignoreNextSpacing = false;
			context.enforceNoSpacing = false;
			return node;
		};
		const rootContext = {
			global: mode === "global",
			hasPureGlobals: false
		};
		rootContext.selector = selectorParser$2((root$5) => {
			transform$1(root$5, rootContext);
		}).processSync(rule$1, {
			updateSelector: false,
			lossless: true
		});
		return rootContext;
	}
	function localizeDeclNode(node, context) {
		switch (node.type) {
			case "word":
				if (context.localizeNextItem) {
					if (!context.localAliasMap.has(node.value)) {
						node.value = ":local(" + node.value + ")";
						context.localizeNextItem = false;
					}
				}
				break;
			case "function":
				if (context.options && context.options.rewriteUrl && node.value.toLowerCase() === "url") node.nodes.map((nestedNode) => {
					if (nestedNode.type !== "string" && nestedNode.type !== "word") return;
					let newUrl = context.options.rewriteUrl(context.global, nestedNode.value);
					switch (nestedNode.type) {
						case "string":
							if (nestedNode.quote === "'") newUrl = newUrl.replace(/(\\)/g, "\\$1").replace(/'/g, "\\'");
							if (nestedNode.quote === "\"") newUrl = newUrl.replace(/(\\)/g, "\\$1").replace(/"/g, "\\\"");
							break;
						case "word":
							newUrl = newUrl.replace(/("|'|\)|\\)/g, "\\$1");
							break;
					}
					nestedNode.value = newUrl;
				});
				break;
		}
		return node;
	}
	const specialKeywords = [
		"none",
		"inherit",
		"initial",
		"revert",
		"revert-layer",
		"unset"
	];
	function localizeDeclarationValues(localize, declaration, context) {
		const valueNodes = valueParser(declaration.value);
		valueNodes.walk((node, index$1, nodes$1) => {
			if (node.type === "function" && (node.value.toLowerCase() === "var" || node.value.toLowerCase() === "env")) return false;
			if (node.type === "word" && specialKeywords.includes(node.value.toLowerCase())) return;
			const subContext = {
				options: context.options,
				global: context.global,
				localizeNextItem: localize && !context.global,
				localAliasMap: context.localAliasMap
			};
			nodes$1[index$1] = localizeDeclNode(node, subContext);
		});
		declaration.value = valueNodes.toString();
	}
	const validIdent = /^-?([a-z\u0080-\uFFFF_]|(\\[^\r\n\f])|-(?![0-9]))((\\[^\r\n\f])|[a-z\u0080-\uFFFF_0-9-])*$/i;
	const animationKeywords = {
		$normal: 1,
		$reverse: 1,
		$alternate: 1,
		"$alternate-reverse": 1,
		$forwards: 1,
		$backwards: 1,
		$both: 1,
		$infinite: 1,
		$paused: 1,
		$running: 1,
		$ease: 1,
		"$ease-in": 1,
		"$ease-out": 1,
		"$ease-in-out": 1,
		$linear: 1,
		"$step-end": 1,
		"$step-start": 1,
		$none: Infinity,
		$initial: Infinity,
		$inherit: Infinity,
		$unset: Infinity,
		$revert: Infinity,
		"$revert-layer": Infinity
	};
	function localizeDeclaration(declaration, context) {
		const isAnimation = /animation(-name)?$/i.test(declaration.prop);
		if (isAnimation) {
			let parsedAnimationKeywords = {};
			const valueNodes = valueParser(declaration.value).walk((node) => {
				if (node.type === "div") {
					parsedAnimationKeywords = {};
					return;
				} else if (node.type === "function" && node.value.toLowerCase() === "local" && node.nodes.length === 1) {
					node.type = "word";
					node.value = node.nodes[0].value;
					return localizeDeclNode(node, {
						options: context.options,
						global: context.global,
						localizeNextItem: true,
						localAliasMap: context.localAliasMap
					});
				} else if (node.type === "function") {
					if (node.value.toLowerCase() === "global" && node.nodes.length === 1) {
						node.type = "word";
						node.value = node.nodes[0].value;
					}
					return false;
				} else if (node.type !== "word") return;
				const value = node.type === "word" ? node.value.toLowerCase() : null;
				let shouldParseAnimationName = false;
				if (value && validIdent.test(value)) if ("$" + value in animationKeywords) {
					parsedAnimationKeywords["$" + value] = "$" + value in parsedAnimationKeywords ? parsedAnimationKeywords["$" + value] + 1 : 0;
					shouldParseAnimationName = parsedAnimationKeywords["$" + value] >= animationKeywords["$" + value];
				} else shouldParseAnimationName = true;
				return localizeDeclNode(node, {
					options: context.options,
					global: context.global,
					localizeNextItem: shouldParseAnimationName && !context.global,
					localAliasMap: context.localAliasMap
				});
			});
			declaration.value = valueNodes.toString();
			return;
		}
		if (/url\(/i.test(declaration.value)) return localizeDeclarationValues(false, declaration, context);
	}
	const isPureSelector = (context, rule$1) => {
		if (!rule$1.parent || rule$1.type === "root") return !context.hasPureGlobals;
		if (rule$1.type === "rule" && rule$1[isPureSelectorSymbol]) return rule$1[isPureSelectorSymbol] || isPureSelector(context, rule$1.parent);
		return !context.hasPureGlobals || isPureSelector(context, rule$1.parent);
	};
	const isNodeWithoutDeclarations = (rule$1) => {
		if (rule$1.nodes.length > 0) return !rule$1.nodes.every((item) => item.type === "rule" || item.type === "atrule" && !isNodeWithoutDeclarations(item));
		return true;
	};
	module.exports = (options = {}) => {
		if (options && options.mode && options.mode !== "global" && options.mode !== "local" && options.mode !== "pure") throw new Error("options.mode must be either \"global\", \"local\" or \"pure\" (default \"local\")");
		const pureMode = options && options.mode === "pure";
		const globalMode = options && options.mode === "global";
		return {
			postcssPlugin: "postcss-modules-local-by-default",
			prepare() {
				const localAliasMap = new Map();
				return { Once(root$5) {
					const { icssImports } = extractICSS(root$5, false);
					const enforcePureMode = pureMode && !isPureCheckDisabled(root$5);
					Object.keys(icssImports).forEach((key) => {
						Object.keys(icssImports[key]).forEach((prop) => {
							localAliasMap.set(prop, icssImports[key][prop]);
						});
					});
					root$5.walkAtRules((atRule$1) => {
						if (/keyframes$/i.test(atRule$1.name)) {
							const globalMatch = /^\s*:global\s*\((.+)\)\s*$/.exec(atRule$1.params);
							const localMatch = /^\s*:local\s*\((.+)\)\s*$/.exec(atRule$1.params);
							let globalKeyframes = globalMode;
							if (globalMatch) {
								if (enforcePureMode) {
									const ignoreComment = getIgnoreComment(atRule$1);
									if (!ignoreComment) throw atRule$1.error("@keyframes :global(...) is not allowed in pure mode");
									else ignoreComment.remove();
								}
								atRule$1.params = globalMatch[1];
								globalKeyframes = true;
							} else if (localMatch) {
								atRule$1.params = localMatch[0];
								globalKeyframes = false;
							} else if (atRule$1.params && !globalMode && !localAliasMap.has(atRule$1.params)) atRule$1.params = ":local(" + atRule$1.params + ")";
							atRule$1.walkDecls((declaration) => {
								localizeDeclaration(declaration, {
									localAliasMap,
									options,
									global: globalKeyframes
								});
							});
						} else if (/scope$/i.test(atRule$1.name)) {
							if (atRule$1.params) {
								const ignoreComment = pureMode ? getIgnoreComment(atRule$1) : void 0;
								if (ignoreComment) ignoreComment.remove();
								atRule$1.params = atRule$1.params.split("to").map((item) => {
									const selector$3 = item.trim().slice(1, -1).trim();
									const context = localizeNode(selector$3, options.mode, localAliasMap);
									context.options = options;
									context.localAliasMap = localAliasMap;
									if (enforcePureMode && context.hasPureGlobals && !ignoreComment) throw atRule$1.error("Selector in at-rule\"" + selector$3 + "\" is not pure (pure selectors must contain at least one local class or id)");
									return `(${context.selector})`;
								}).join(" to ");
							}
							atRule$1.nodes.forEach((declaration) => {
								if (declaration.type === "decl") localizeDeclaration(declaration, {
									localAliasMap,
									options,
									global: globalMode
								});
							});
						} else if (atRule$1.nodes) atRule$1.nodes.forEach((declaration) => {
							if (declaration.type === "decl") localizeDeclaration(declaration, {
								localAliasMap,
								options,
								global: globalMode
							});
						});
					});
					root$5.walkRules((rule$1) => {
						if (rule$1.parent && rule$1.parent.type === "atrule" && /keyframes$/i.test(rule$1.parent.name)) return;
						const context = localizeNode(rule$1, options.mode, localAliasMap);
						context.options = options;
						context.localAliasMap = localAliasMap;
						const ignoreComment = enforcePureMode ? getIgnoreComment(rule$1) : void 0;
						const isNotPure = enforcePureMode && !isPureSelector(context, rule$1);
						if (isNotPure && isNodeWithoutDeclarations(rule$1) && !ignoreComment) throw rule$1.error("Selector \"" + rule$1.selector + "\" is not pure (pure selectors must contain at least one local class or id)");
						else if (ignoreComment) ignoreComment.remove();
						if (pureMode) rule$1[isPureSelectorSymbol] = !isNotPure;
						rule$1.selector = context.selector;
						if (rule$1.nodes) rule$1.nodes.forEach((declaration) => localizeDeclaration(declaration, context));
					});
				} };
			}
		};
	};
	module.exports.postcss = true;
} });

//#endregion
//#region node_modules/postcss-modules-extract-imports/src/topologicalSort.js
var require_topologicalSort = __commonJS({ "node_modules/postcss-modules-extract-imports/src/topologicalSort.js"(exports, module) {
	const PERMANENT_MARKER = 2;
	const TEMPORARY_MARKER = 1;
	function createError(node, graph) {
		const er = new Error("Nondeterministic import's order");
		const related = graph[node];
		const relatedNode = related.find((relatedNode$1) => graph[relatedNode$1].indexOf(node) > -1);
		er.nodes = [node, relatedNode];
		return er;
	}
	function walkGraph(node, graph, state, result, strict) {
		if (state[node] === PERMANENT_MARKER) return;
		if (state[node] === TEMPORARY_MARKER) {
			if (strict) return createError(node, graph);
			return;
		}
		state[node] = TEMPORARY_MARKER;
		const children = graph[node];
		const length = children.length;
		for (let i$6 = 0; i$6 < length; ++i$6) {
			const error = walkGraph(children[i$6], graph, state, result, strict);
			if (error instanceof Error) return error;
		}
		state[node] = PERMANENT_MARKER;
		result.push(node);
	}
	function topologicalSort$1(graph, strict) {
		const result = [];
		const state = {};
		const nodes$1 = Object.keys(graph);
		const length = nodes$1.length;
		for (let i$6 = 0; i$6 < length; ++i$6) {
			const er = walkGraph(nodes$1[i$6], graph, state, result, strict);
			if (er instanceof Error) return er;
		}
		return result;
	}
	module.exports = topologicalSort$1;
} });

//#endregion
//#region node_modules/postcss-modules-extract-imports/src/index.js
var require_src$3 = __commonJS({ "node_modules/postcss-modules-extract-imports/src/index.js"(exports, module) {
	const topologicalSort = require_topologicalSort();
	const matchImports$1 = /^(.+?)\s+from\s+(?:"([^"]+)"|'([^']+)'|(global))$/;
	const icssImport = /^:import\((?:"([^"]+)"|'([^']+)')\)/;
	const VISITED_MARKER = 1;
	/**
	* :import('G') {}
	*
	* Rule
	*   composes: ... from 'A'
	*   composes: ... from 'B'
	
	* Rule
	*   composes: ... from 'A'
	*   composes: ... from 'A'
	*   composes: ... from 'C'
	*
	* Results in:
	*
	* graph: {
	*   G: [],
	*   A: [],
	*   B: ['A'],
	*   C: ['A'],
	* }
	*/
	function addImportToGraph(importId, parentId, graph, visited) {
		const siblingsId = parentId + "_siblings";
		const visitedId = parentId + "_" + importId;
		if (visited[visitedId] !== VISITED_MARKER) {
			if (!Array.isArray(visited[siblingsId])) visited[siblingsId] = [];
			const siblings = visited[siblingsId];
			if (Array.isArray(graph[importId])) graph[importId] = graph[importId].concat(siblings);
			else graph[importId] = siblings.slice();
			visited[visitedId] = VISITED_MARKER;
			siblings.push(importId);
		}
	}
	module.exports = (options = {}) => {
		let importIndex = 0;
		const createImportedName = typeof options.createImportedName !== "function" ? (importName) => `i__imported_${importName.replace(/\W/g, "_")}_${importIndex++}` : options.createImportedName;
		const failOnWrongOrder = options.failOnWrongOrder;
		return {
			postcssPlugin: "postcss-modules-extract-imports",
			prepare() {
				const graph = {};
				const visited = {};
				const existingImports = {};
				const importDecls = {};
				const imports = {};
				return { Once(root$5, postcss$3) {
					root$5.walkRules((rule$1) => {
						const matches = icssImport.exec(rule$1.selector);
						if (matches) {
							const [, doubleQuotePath, singleQuotePath] = matches;
							const importPath = doubleQuotePath || singleQuotePath;
							addImportToGraph(importPath, "root", graph, visited);
							existingImports[importPath] = rule$1;
						}
					});
					root$5.walkDecls(/^composes$/, (declaration) => {
						const multiple = declaration.value.split(",");
						const values = [];
						multiple.forEach((value) => {
							const matches = value.trim().match(matchImports$1);
							if (!matches) {
								values.push(value);
								return;
							}
							let tmpSymbols;
							let [, symbols, doubleQuotePath, singleQuotePath, global$1] = matches;
							if (global$1) tmpSymbols = symbols.split(/\s+/).map((s$3) => `global(${s$3})`);
							else {
								const importPath = doubleQuotePath || singleQuotePath;
								let parent = declaration.parent;
								let parentIndexes = "";
								while (parent.type !== "root") {
									parentIndexes = parent.parent.index(parent) + "_" + parentIndexes;
									parent = parent.parent;
								}
								const { selector: selector$3 } = declaration.parent;
								const parentRule = `_${parentIndexes}${selector$3}`;
								addImportToGraph(importPath, parentRule, graph, visited);
								importDecls[importPath] = declaration;
								imports[importPath] = imports[importPath] || {};
								tmpSymbols = symbols.split(/\s+/).map((s$3) => {
									if (!imports[importPath][s$3]) imports[importPath][s$3] = createImportedName(s$3, importPath);
									return imports[importPath][s$3];
								});
							}
							values.push(tmpSymbols.join(" "));
						});
						declaration.value = values.join(", ");
					});
					const importsOrder = topologicalSort(graph, failOnWrongOrder);
					if (importsOrder instanceof Error) {
						const importPath = importsOrder.nodes.find((importPath$1) => importDecls.hasOwnProperty(importPath$1));
						const decl$1 = importDecls[importPath];
						throw decl$1.error("Failed to resolve order of composed modules " + importsOrder.nodes.map((importPath$1) => "`" + importPath$1 + "`").join(", ") + ".", {
							plugin: "postcss-modules-extract-imports",
							word: "composes"
						});
					}
					let lastImportRule;
					importsOrder.forEach((path$28) => {
						const importedSymbols = imports[path$28];
						let rule$1 = existingImports[path$28];
						if (!rule$1 && importedSymbols) {
							rule$1 = postcss$3.rule({
								selector: `:import("${path$28}")`,
								raws: { after: "\n" }
							});
							if (lastImportRule) root$5.insertAfter(lastImportRule, rule$1);
							else root$5.prepend(rule$1);
						}
						lastImportRule = rule$1;
						if (!importedSymbols) return;
						Object.keys(importedSymbols).forEach((importedSymbol) => {
							rule$1.append(postcss$3.decl({
								value: importedSymbol,
								prop: importedSymbols[importedSymbol],
								raws: { before: "\n  " }
							}));
						});
					});
				} };
			}
		};
	};
	module.exports.postcss = true;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/unesc.js
var require_unesc = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/unesc.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = unesc;
	/**
	* 
	* @param {string} str 
	* @returns {[string, number]|undefined}
	*/
	function gobbleHex(str$4) {
		var lower = str$4.toLowerCase();
		var hex$3 = "";
		var spaceTerminated = false;
		for (var i$6 = 0; i$6 < 6 && lower[i$6] !== void 0; i$6++) {
			var code$1 = lower.charCodeAt(i$6);
			var valid = code$1 >= 97 && code$1 <= 102 || code$1 >= 48 && code$1 <= 57;
			spaceTerminated = code$1 === 32;
			if (!valid) break;
			hex$3 += lower[i$6];
		}
		if (hex$3.length === 0) return void 0;
		var codePoint = parseInt(hex$3, 16);
		var isSurrogate = codePoint >= 55296 && codePoint <= 57343;
		if (isSurrogate || codePoint === 0 || codePoint > 1114111) return ["�", hex$3.length + (spaceTerminated ? 1 : 0)];
		return [String.fromCodePoint(codePoint), hex$3.length + (spaceTerminated ? 1 : 0)];
	}
	var CONTAINS_ESCAPE = /\\/;
	function unesc(str$4) {
		var needToProcess = CONTAINS_ESCAPE.test(str$4);
		if (!needToProcess) return str$4;
		var ret$1 = "";
		for (var i$6 = 0; i$6 < str$4.length; i$6++) {
			if (str$4[i$6] === "\\") {
				var gobbled = gobbleHex(str$4.slice(i$6 + 1, i$6 + 7));
				if (gobbled !== void 0) {
					ret$1 += gobbled[0];
					i$6 += gobbled[1];
					continue;
				}
				if (str$4[i$6 + 1] === "\\") {
					ret$1 += "\\";
					i$6++;
					continue;
				}
				if (str$4.length === i$6 + 1) ret$1 += str$4[i$6];
				continue;
			}
			ret$1 += str$4[i$6];
		}
		return ret$1;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/getProp.js
var require_getProp = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/getProp.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = getProp;
	function getProp(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) return void 0;
			obj = obj[prop];
		}
		return obj;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/ensureObject.js
var require_ensureObject = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/ensureObject.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = ensureObject;
	function ensureObject(obj) {
		for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) props[_key - 1] = arguments[_key];
		while (props.length > 0) {
			var prop = props.shift();
			if (!obj[prop]) obj[prop] = {};
			obj = obj[prop];
		}
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/stripComments.js
var require_stripComments = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/stripComments.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = stripComments;
	function stripComments(str$4) {
		var s$3 = "";
		var commentStart = str$4.indexOf("/*");
		var lastEnd = 0;
		while (commentStart >= 0) {
			s$3 = s$3 + str$4.slice(lastEnd, commentStart);
			var commentEnd = str$4.indexOf("*/", commentStart + 2);
			if (commentEnd < 0) return s$3;
			lastEnd = commentEnd + 2;
			commentStart = str$4.indexOf("/*", lastEnd);
		}
		s$3 = s$3 + str$4.slice(lastEnd);
		return s$3;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/index.js
var require_util$1 = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/util/index.js"(exports) {
	exports.__esModule = true;
	exports.unesc = exports.stripComments = exports.getProp = exports.ensureObject = void 0;
	var _unesc$1 = _interopRequireDefault$20(require_unesc());
	exports.unesc = _unesc$1["default"];
	var _getProp = _interopRequireDefault$20(require_getProp());
	exports.getProp = _getProp["default"];
	var _ensureObject = _interopRequireDefault$20(require_ensureObject());
	exports.ensureObject = _ensureObject["default"];
	var _stripComments = _interopRequireDefault$20(require_stripComments());
	exports.stripComments = _stripComments["default"];
	function _interopRequireDefault$20(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/node.js
var require_node$4 = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/node.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _util$5 = require_util$1();
	function _defineProperties$6(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$6(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$6(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var cloneNode$9 = function cloneNode$13(obj, parent) {
		if (typeof obj !== "object" || obj === null) return obj;
		var cloned = new obj.constructor();
		for (var i$6 in obj) {
			if (!obj.hasOwnProperty(i$6)) continue;
			var value = obj[i$6];
			var type = typeof value;
			if (i$6 === "parent" && type === "object") {
				if (parent) cloned[i$6] = parent;
			} else if (value instanceof Array) cloned[i$6] = value.map(function(j$1) {
				return cloneNode$13(j$1, cloned);
			});
			else cloned[i$6] = cloneNode$13(value, cloned);
		}
		return cloned;
	};
	var Node$2 = /* @__PURE__ */ function() {
		function Node$20(opts) {
			if (opts === void 0) opts = {};
			Object.assign(this, opts);
			this.spaces = this.spaces || {};
			this.spaces.before = this.spaces.before || "";
			this.spaces.after = this.spaces.after || "";
		}
		var _proto = Node$20.prototype;
		_proto.remove = function remove$4() {
			if (this.parent) this.parent.removeChild(this);
			this.parent = void 0;
			return this;
		};
		_proto.replaceWith = function replaceWith$1() {
			if (this.parent) {
				for (var index$1 in arguments) this.parent.insertBefore(this, arguments[index$1]);
				this.remove();
			}
			return this;
		};
		_proto.next = function next() {
			return this.parent.at(this.parent.index(this) + 1);
		};
		_proto.prev = function prev() {
			return this.parent.at(this.parent.index(this) - 1);
		};
		_proto.clone = function clone$4(overrides) {
			if (overrides === void 0) overrides = {};
			var cloned = cloneNode$9(this);
			for (var name in overrides) cloned[name] = overrides[name];
			return cloned;
		};
		_proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			var originalValue = this[name];
			var originalEscaped = this.raws[name];
			this[name] = originalValue + value;
			if (originalEscaped || valueEscaped !== value) this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
			else delete this.raws[name];
		};
		_proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
			if (!this.raws) this.raws = {};
			this[name] = value;
			this.raws[name] = valueEscaped;
		};
		_proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
			this[name] = value;
			if (this.raws) delete this.raws[name];
		};
		_proto.isAtPosition = function isAtPosition(line, column) {
			if (this.source && this.source.start && this.source.end) {
				if (this.source.start.line > line) return false;
				if (this.source.end.line < line) return false;
				if (this.source.start.line === line && this.source.start.column > column) return false;
				if (this.source.end.line === line && this.source.end.column < column) return false;
				return true;
			}
			return void 0;
		};
		_proto.stringifyProperty = function stringifyProperty(name) {
			return this.raws && this.raws[name] || this[name];
		};
		_proto.valueToString = function valueToString() {
			return String(this.stringifyProperty("value"));
		};
		_proto.toString = function toString$5() {
			return [
				this.rawSpaceBefore,
				this.valueToString(),
				this.rawSpaceAfter
			].join("");
		};
		_createClass$6(Node$20, [{
			key: "rawSpaceBefore",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;
				if (rawSpace === void 0) rawSpace = this.spaces && this.spaces.before;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$5.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.before = raw;
			}
		}, {
			key: "rawSpaceAfter",
			get: function get$2() {
				var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;
				if (rawSpace === void 0) rawSpace = this.spaces.after;
				return rawSpace || "";
			},
			set: function set(raw) {
				(0, _util$5.ensureObject)(this, "raws", "spaces");
				this.raws.spaces.after = raw;
			}
		}]);
		return Node$20;
	}();
	exports["default"] = Node$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/types.js
var require_types$1 = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/types.js"(exports) {
	exports.__esModule = true;
	exports.UNIVERSAL = exports.TAG = exports.STRING = exports.SELECTOR = exports.ROOT = exports.PSEUDO = exports.NESTING = exports.ID = exports.COMMENT = exports.COMBINATOR = exports.CLASS = exports.ATTRIBUTE = void 0;
	var TAG = "tag";
	exports.TAG = TAG;
	var STRING = "string";
	exports.STRING = STRING;
	var SELECTOR = "selector";
	exports.SELECTOR = SELECTOR;
	var ROOT = "root";
	exports.ROOT = ROOT;
	var PSEUDO = "pseudo";
	exports.PSEUDO = PSEUDO;
	var NESTING = "nesting";
	exports.NESTING = NESTING;
	var ID$1 = "id";
	exports.ID = ID$1;
	var COMMENT = "comment";
	exports.COMMENT = COMMENT;
	var COMBINATOR = "combinator";
	exports.COMBINATOR = COMBINATOR;
	var CLASS = "class";
	exports.CLASS = CLASS;
	var ATTRIBUTE = "attribute";
	exports.ATTRIBUTE = ATTRIBUTE;
	var UNIVERSAL = "universal";
	exports.UNIVERSAL = UNIVERSAL;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/container.js
var require_container = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/container.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$7 = _interopRequireDefault$19(require_node$4());
	var types$1 = _interopRequireWildcard$3(require_types$1());
	function _getRequireWildcardCache$3(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$3 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$3(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$3(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$19(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _createForOfIteratorHelperLoose(o$2, allowArrayLike) {
		var it = typeof Symbol !== "undefined" && o$2[Symbol.iterator] || o$2["@@iterator"];
		if (it) return (it = it.call(o$2)).next.bind(it);
		if (Array.isArray(o$2) || (it = _unsupportedIterableToArray(o$2)) || allowArrayLike && o$2 && typeof o$2.length === "number") {
			if (it) o$2 = it;
			var i$6 = 0;
			return function() {
				if (i$6 >= o$2.length) return { done: true };
				return {
					done: false,
					value: o$2[i$6++]
				};
			};
		}
		throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _unsupportedIterableToArray(o$2, minLen) {
		if (!o$2) return;
		if (typeof o$2 === "string") return _arrayLikeToArray(o$2, minLen);
		var n$4 = Object.prototype.toString.call(o$2).slice(8, -1);
		if (n$4 === "Object" && o$2.constructor) n$4 = o$2.constructor.name;
		if (n$4 === "Map" || n$4 === "Set") return Array.from(o$2);
		if (n$4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n$4)) return _arrayLikeToArray(o$2, minLen);
	}
	function _arrayLikeToArray(arr, len) {
		if (len == null || len > arr.length) len = arr.length;
		for (var i$6 = 0, arr2 = new Array(len); i$6 < len; i$6++) arr2[i$6] = arr[i$6];
		return arr2;
	}
	function _defineProperties$5(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$5(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$5(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$13(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$13(subClass, superClass);
	}
	function _setPrototypeOf$13(o$2, p$2) {
		_setPrototypeOf$13 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$13(o$2, p$2);
	}
	var Container = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$13(Container$16, _Node);
		function Container$16(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			if (!_this.nodes) _this.nodes = [];
			return _this;
		}
		var _proto = Container$16.prototype;
		_proto.append = function append$1(selector$3) {
			selector$3.parent = this;
			this.nodes.push(selector$3);
			return this;
		};
		_proto.prepend = function prepend$1(selector$3) {
			selector$3.parent = this;
			this.nodes.unshift(selector$3);
			for (var id$4 in this.indexes) this.indexes[id$4]++;
			return this;
		};
		_proto.at = function at$3(index$1) {
			return this.nodes[index$1];
		};
		_proto.index = function index$1(child) {
			if (typeof child === "number") return child;
			return this.nodes.indexOf(child);
		};
		_proto.removeChild = function removeChild(child) {
			child = this.index(child);
			this.at(child).parent = void 0;
			this.nodes.splice(child, 1);
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= child) this.indexes[id$4] = index$1 - 1;
			}
			return this;
		};
		_proto.removeAll = function removeAll() {
			for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {
				var node = _step.value;
				node.parent = void 0;
			}
			this.nodes = [];
			return this;
		};
		_proto.empty = function empty() {
			return this.removeAll();
		};
		_proto.insertAfter = function insertAfter$1(oldNode, newNode) {
			var _this$nodes;
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			var resetNode = [];
			for (var i$6 = 2; i$6 < arguments.length; i$6++) resetNode.push(arguments[i$6]);
			(_this$nodes = this.nodes).splice.apply(_this$nodes, [
				oldIndex + 1,
				0,
				newNode
			].concat(resetNode));
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (oldIndex < index$1) this.indexes[id$4] = index$1 + arguments.length - 1;
			}
			return this;
		};
		_proto.insertBefore = function insertBefore$1(oldNode, newNode) {
			var _this$nodes2;
			newNode.parent = this;
			var oldIndex = this.index(oldNode);
			var resetNode = [];
			for (var i$6 = 2; i$6 < arguments.length; i$6++) resetNode.push(arguments[i$6]);
			(_this$nodes2 = this.nodes).splice.apply(_this$nodes2, [
				oldIndex,
				0,
				newNode
			].concat(resetNode));
			newNode.parent = this;
			var index$1;
			for (var id$4 in this.indexes) {
				index$1 = this.indexes[id$4];
				if (index$1 >= oldIndex) this.indexes[id$4] = index$1 + arguments.length - 1;
			}
			return this;
		};
		_proto._findChildAtPosition = function _findChildAtPosition(line, col) {
			var found = void 0;
			this.each(function(node) {
				if (node.atPosition) {
					var foundChild = node.atPosition(line, col);
					if (foundChild) {
						found = foundChild;
						return false;
					}
				} else if (node.isAtPosition(line, col)) {
					found = node;
					return false;
				}
			});
			return found;
		};
		_proto.atPosition = function atPosition(line, col) {
			if (this.isAtPosition(line, col)) return this._findChildAtPosition(line, col) || this;
			else return void 0;
		};
		_proto._inferEndPosition = function _inferEndPosition() {
			if (this.last && this.last.source && this.last.source.end) {
				this.source = this.source || {};
				this.source.end = this.source.end || {};
				Object.assign(this.source.end, this.last.source.end);
			}
		};
		_proto.each = function each(callback) {
			if (!this.lastEach) this.lastEach = 0;
			if (!this.indexes) this.indexes = {};
			this.lastEach++;
			var id$4 = this.lastEach;
			this.indexes[id$4] = 0;
			if (!this.length) return void 0;
			var index$1, result;
			while (this.indexes[id$4] < this.length) {
				index$1 = this.indexes[id$4];
				result = callback(this.at(index$1), index$1);
				if (result === false) break;
				this.indexes[id$4] += 1;
			}
			delete this.indexes[id$4];
			if (result === false) return false;
		};
		_proto.walk = function walk$2(callback) {
			return this.each(function(node, i$6) {
				var result = callback(node, i$6);
				if (result !== false && node.length) result = node.walk(callback);
				if (result === false) return false;
			});
		};
		_proto.walkAttributes = function walkAttributes(callback) {
			var _this2 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.ATTRIBUTE) return callback.call(_this2, selector$3);
			});
		};
		_proto.walkClasses = function walkClasses(callback) {
			var _this3 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.CLASS) return callback.call(_this3, selector$3);
			});
		};
		_proto.walkCombinators = function walkCombinators(callback) {
			var _this4 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.COMBINATOR) return callback.call(_this4, selector$3);
			});
		};
		_proto.walkComments = function walkComments(callback) {
			var _this5 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.COMMENT) return callback.call(_this5, selector$3);
			});
		};
		_proto.walkIds = function walkIds(callback) {
			var _this6 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.ID) return callback.call(_this6, selector$3);
			});
		};
		_proto.walkNesting = function walkNesting(callback) {
			var _this7 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.NESTING) return callback.call(_this7, selector$3);
			});
		};
		_proto.walkPseudos = function walkPseudos(callback) {
			var _this8 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.PSEUDO) return callback.call(_this8, selector$3);
			});
		};
		_proto.walkTags = function walkTags(callback) {
			var _this9 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.TAG) return callback.call(_this9, selector$3);
			});
		};
		_proto.walkUniversals = function walkUniversals(callback) {
			var _this10 = this;
			return this.walk(function(selector$3) {
				if (selector$3.type === types$1.UNIVERSAL) return callback.call(_this10, selector$3);
			});
		};
		_proto.split = function split(callback) {
			var _this11 = this;
			var current = [];
			return this.reduce(function(memo, node, index$1) {
				var split$1 = callback.call(_this11, node);
				current.push(node);
				if (split$1) {
					memo.push(current);
					current = [];
				} else if (index$1 === _this11.length - 1) memo.push(current);
				return memo;
			}, []);
		};
		_proto.map = function map(callback) {
			return this.nodes.map(callback);
		};
		_proto.reduce = function reduce(callback, memo) {
			return this.nodes.reduce(callback, memo);
		};
		_proto.every = function every(callback) {
			return this.nodes.every(callback);
		};
		_proto.some = function some(callback) {
			return this.nodes.some(callback);
		};
		_proto.filter = function filter$2(callback) {
			return this.nodes.filter(callback);
		};
		_proto.sort = function sort(callback) {
			return this.nodes.sort(callback);
		};
		_proto.toString = function toString$5() {
			return this.map(String).join("");
		};
		_createClass$5(Container$16, [
			{
				key: "first",
				get: function get$2() {
					return this.at(0);
				}
			},
			{
				key: "last",
				get: function get$2() {
					return this.at(this.length - 1);
				}
			},
			{
				key: "length",
				get: function get$2() {
					return this.nodes.length;
				}
			}
		]);
		return Container$16;
	}(_node$7["default"]);
	exports["default"] = Container;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/root.js
var require_root = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/root.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$2 = _interopRequireDefault$18(require_container());
	var _types$14 = require_types$1();
	function _interopRequireDefault$18(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$4(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$4(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$4(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$12(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$12(subClass, superClass);
	}
	function _setPrototypeOf$12(o$2, p$2) {
		_setPrototypeOf$12 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$12(o$2, p$2);
	}
	var Root = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$12(Root$11, _Container);
		function Root$11(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$14.ROOT;
			return _this;
		}
		var _proto = Root$11.prototype;
		_proto.toString = function toString$5() {
			var str$4 = this.reduce(function(memo, selector$3) {
				memo.push(String(selector$3));
				return memo;
			}, []).join(",");
			return this.trailingComma ? str$4 + "," : str$4;
		};
		_proto.error = function error(message, options) {
			if (this._error) return this._error(message, options);
			else return new Error(message);
		};
		_createClass$4(Root$11, [{
			key: "errorGenerator",
			set: function set(handler) {
				this._error = handler;
			}
		}]);
		return Root$11;
	}(_container$2["default"]);
	exports["default"] = Root;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/selector.js
var require_selector = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/selector.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container$1 = _interopRequireDefault$17(require_container());
	var _types$13 = require_types$1();
	function _interopRequireDefault$17(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$11(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$11(subClass, superClass);
	}
	function _setPrototypeOf$11(o$2, p$2) {
		_setPrototypeOf$11 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$11(o$2, p$2);
	}
	var Selector = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$11(Selector$3, _Container);
		function Selector$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$13.SELECTOR;
			return _this;
		}
		return Selector$3;
	}(_container$1["default"]);
	exports["default"] = Selector;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/className.js
var require_className = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/className.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$2 = _interopRequireDefault$16(require_cssesc());
	var _util$4 = require_util$1();
	var _node$6 = _interopRequireDefault$16(require_node$4());
	var _types$12 = require_types$1();
	function _interopRequireDefault$16(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$3(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$3(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$3(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$10(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$10(subClass, superClass);
	}
	function _setPrototypeOf$10(o$2, p$2) {
		_setPrototypeOf$10 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$10(o$2, p$2);
	}
	var ClassName = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$10(ClassName$3, _Node);
		function ClassName$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$12.CLASS;
			_this._constructed = true;
			return _this;
		}
		var _proto = ClassName$3.prototype;
		_proto.valueToString = function valueToString() {
			return "." + _Node.prototype.valueToString.call(this);
		};
		_createClass$3(ClassName$3, [{
			key: "value",
			get: function get$2() {
				return this._value;
			},
			set: function set(v$1) {
				if (this._constructed) {
					var escaped = (0, _cssesc$2["default"])(v$1, { isIdentifier: true });
					if (escaped !== v$1) {
						(0, _util$4.ensureObject)(this, "raws");
						this.raws.value = escaped;
					} else if (this.raws) delete this.raws.value;
				}
				this._value = v$1;
			}
		}]);
		return ClassName$3;
	}(_node$6["default"]);
	exports["default"] = ClassName;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/comment.js
var require_comment = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/comment.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$5 = _interopRequireDefault$15(require_node$4());
	var _types$11 = require_types$1();
	function _interopRequireDefault$15(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$9(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$9(subClass, superClass);
	}
	function _setPrototypeOf$9(o$2, p$2) {
		_setPrototypeOf$9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$9(o$2, p$2);
	}
	var Comment$2 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$9(Comment$13, _Node);
		function Comment$13(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$11.COMMENT;
			return _this;
		}
		return Comment$13;
	}(_node$5["default"]);
	exports["default"] = Comment$2;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/id.js
var require_id = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/id.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$4 = _interopRequireDefault$14(require_node$4());
	var _types$10 = require_types$1();
	function _interopRequireDefault$14(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$8(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$8(subClass, superClass);
	}
	function _setPrototypeOf$8(o$2, p$2) {
		_setPrototypeOf$8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$8(o$2, p$2);
	}
	var ID = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$8(ID$6, _Node);
		function ID$6(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$10.ID;
			return _this;
		}
		var _proto = ID$6.prototype;
		_proto.valueToString = function valueToString() {
			return "#" + _Node.prototype.valueToString.call(this);
		};
		return ID$6;
	}(_node$4["default"]);
	exports["default"] = ID;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/namespace.js
var require_namespace = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/namespace.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _cssesc$1 = _interopRequireDefault$13(require_cssesc());
	var _util$3 = require_util$1();
	var _node$3 = _interopRequireDefault$13(require_node$4());
	function _interopRequireDefault$13(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$2(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$2(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$2(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$7(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$7(subClass, superClass);
	}
	function _setPrototypeOf$7(o$2, p$2) {
		_setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$7(o$2, p$2);
	}
	var Namespace = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$7(Namespace$3, _Node);
		function Namespace$3() {
			return _Node.apply(this, arguments) || this;
		}
		var _proto = Namespace$3.prototype;
		_proto.qualifiedName = function qualifiedName(value) {
			if (this.namespace) return this.namespaceString + "|" + value;
			else return value;
		};
		_proto.valueToString = function valueToString() {
			return this.qualifiedName(_Node.prototype.valueToString.call(this));
		};
		_createClass$2(Namespace$3, [
			{
				key: "namespace",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					if (namespace === true || namespace === "*" || namespace === "&") {
						this._namespace = namespace;
						if (this.raws) delete this.raws.namespace;
						return;
					}
					var escaped = (0, _cssesc$1["default"])(namespace, { isIdentifier: true });
					this._namespace = namespace;
					if (escaped !== namespace) {
						(0, _util$3.ensureObject)(this, "raws");
						this.raws.namespace = escaped;
					} else if (this.raws) delete this.raws.namespace;
				}
			},
			{
				key: "ns",
				get: function get$2() {
					return this._namespace;
				},
				set: function set(namespace) {
					this.namespace = namespace;
				}
			},
			{
				key: "namespaceString",
				get: function get$2() {
					if (this.namespace) {
						var ns = this.stringifyProperty("namespace");
						if (ns === true) return "";
						else return ns;
					} else return "";
				}
			}
		]);
		return Namespace$3;
	}(_node$3["default"]);
	exports["default"] = Namespace;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/tag.js
var require_tag = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/tag.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace$2 = _interopRequireDefault$12(require_namespace());
	var _types$9 = require_types$1();
	function _interopRequireDefault$12(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$6(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$6(subClass, superClass);
	}
	function _setPrototypeOf$6(o$2, p$2) {
		_setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$6(o$2, p$2);
	}
	var Tag = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$6(Tag$3, _Namespace);
		function Tag$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$9.TAG;
			return _this;
		}
		return Tag$3;
	}(_namespace$2["default"]);
	exports["default"] = Tag;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/string.js
var require_string$1 = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/string.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$2 = _interopRequireDefault$11(require_node$4());
	var _types$8 = require_types$1();
	function _interopRequireDefault$11(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$5(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$5(subClass, superClass);
	}
	function _setPrototypeOf$5(o$2, p$2) {
		_setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$5(o$2, p$2);
	}
	var String$1 = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$5(String$4, _Node);
		function String$4(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$8.STRING;
			return _this;
		}
		return String$4;
	}(_node$2["default"]);
	exports["default"] = String$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/pseudo.js
var require_pseudo = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/pseudo.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _container = _interopRequireDefault$10(require_container());
	var _types$7 = require_types$1();
	function _interopRequireDefault$10(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$4(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$4(subClass, superClass);
	}
	function _setPrototypeOf$4(o$2, p$2) {
		_setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$4(o$2, p$2);
	}
	var Pseudo = /* @__PURE__ */ function(_Container) {
		_inheritsLoose$4(Pseudo$3, _Container);
		function Pseudo$3(opts) {
			var _this;
			_this = _Container.call(this, opts) || this;
			_this.type = _types$7.PSEUDO;
			return _this;
		}
		var _proto = Pseudo$3.prototype;
		_proto.toString = function toString$5() {
			var params = this.length ? "(" + this.map(String).join(",") + ")" : "";
			return [
				this.rawSpaceBefore,
				this.stringifyProperty("value"),
				params,
				this.rawSpaceAfter
			].join("");
		};
		return Pseudo$3;
	}(_container["default"]);
	exports["default"] = Pseudo;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/attribute.js
var require_attribute = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/attribute.js"(exports) {
	exports.__esModule = true;
	exports["default"] = void 0;
	exports.unescapeValue = unescapeValue;
	var _cssesc = _interopRequireDefault$9(require_cssesc());
	var _unesc = _interopRequireDefault$9(require_unesc());
	var _namespace$1 = _interopRequireDefault$9(require_namespace());
	var _types$6 = require_types$1();
	var _CSSESC_QUOTE_OPTIONS;
	function _interopRequireDefault$9(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties$1(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass$1(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties$1(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _inheritsLoose$3(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$3(subClass, superClass);
	}
	function _setPrototypeOf$3(o$2, p$2) {
		_setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$3(o$2, p$2);
	}
	var deprecate = require_node$6();
	var WRAPPED_IN_QUOTES = /^('|")([^]*)\1$/;
	var warnOfDeprecatedValueAssignment = deprecate(function() {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.");
	var warnOfDeprecatedQuotedAssignment = deprecate(function() {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
	var warnOfDeprecatedConstructor = deprecate(function() {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
	function unescapeValue(value) {
		var deprecatedUsage = false;
		var quoteMark = null;
		var unescaped = value;
		var m$2 = unescaped.match(WRAPPED_IN_QUOTES);
		if (m$2) {
			quoteMark = m$2[1];
			unescaped = m$2[2];
		}
		unescaped = (0, _unesc["default"])(unescaped);
		if (unescaped !== value) deprecatedUsage = true;
		return {
			deprecatedUsage,
			unescaped,
			quoteMark
		};
	}
	function handleDeprecatedContructorOpts(opts) {
		if (opts.quoteMark !== void 0) return opts;
		if (opts.value === void 0) return opts;
		warnOfDeprecatedConstructor();
		var _unescapeValue = unescapeValue(opts.value), quoteMark = _unescapeValue.quoteMark, unescaped = _unescapeValue.unescaped;
		if (!opts.raws) opts.raws = {};
		if (opts.raws.value === void 0) opts.raws.value = opts.value;
		opts.value = unescaped;
		opts.quoteMark = quoteMark;
		return opts;
	}
	var Attribute = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$3(Attribute$3, _Namespace);
		function Attribute$3(opts) {
			var _this;
			if (opts === void 0) opts = {};
			_this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;
			_this.type = _types$6.ATTRIBUTE;
			_this.raws = _this.raws || {};
			Object.defineProperty(_this.raws, "unquoted", {
				get: deprecate(function() {
					return _this.value;
				}, "attr.raws.unquoted is deprecated. Call attr.value instead."),
				set: deprecate(function() {
					return _this.value;
				}, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
			});
			_this._constructed = true;
			return _this;
		}
		/**
		* Returns the Attribute's value quoted such that it would be legal to use
		* in the value of a css file. The original value's quotation setting
		* used for stringification is left unchanged. See `setValue(value, options)`
		* if you want to control the quote settings of a new value for the attribute.
		*
		* You can also change the quotation used for the current value by setting quoteMark.
		*
		* Options:
		*   * quoteMark {'"' | "'" | null} - Use this value to quote the value. If this
		*     option is not set, the original value for quoteMark will be used. If
		*     indeterminate, a double quote is used. The legal values are:
		*     * `null` - the value will be unquoted and characters will be escaped as necessary.
		*     * `'` - the value will be quoted with a single quote and single quotes are escaped.
		*     * `"` - the value will be quoted with a double quote and double quotes are escaped.
		*   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark
		*     over the quoteMark option value.
		*   * smart {boolean} - if true, will select a quote mark based on the value
		*     and the other options specified here. See the `smartQuoteMark()`
		*     method.
		**/
		var _proto = Attribute$3.prototype;
		_proto.getQuotedValue = function getQuotedValue(options) {
			if (options === void 0) options = {};
			var quoteMark = this._determineQuoteMark(options);
			var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];
			var escaped = (0, _cssesc["default"])(this._value, cssescopts);
			return escaped;
		};
		_proto._determineQuoteMark = function _determineQuoteMark(options) {
			return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
		};
		_proto.setValue = function setValue(value, options) {
			if (options === void 0) options = {};
			this._value = value;
			this._quoteMark = this._determineQuoteMark(options);
			this._syncRawValue();
		};
		_proto.smartQuoteMark = function smartQuoteMark(options) {
			var v$1 = this.value;
			var numSingleQuotes = v$1.replace(/[^']/g, "").length;
			var numDoubleQuotes = v$1.replace(/[^"]/g, "").length;
			if (numSingleQuotes + numDoubleQuotes === 0) {
				var escaped = (0, _cssesc["default"])(v$1, { isIdentifier: true });
				if (escaped === v$1) return Attribute$3.NO_QUOTE;
				else {
					var pref = this.preferredQuoteMark(options);
					if (pref === Attribute$3.NO_QUOTE) {
						var quote = this.quoteMark || options.quoteMark || Attribute$3.DOUBLE_QUOTE;
						var opts = CSSESC_QUOTE_OPTIONS[quote];
						var quoteValue = (0, _cssesc["default"])(v$1, opts);
						if (quoteValue.length < escaped.length) return quote;
					}
					return pref;
				}
			} else if (numDoubleQuotes === numSingleQuotes) return this.preferredQuoteMark(options);
			else if (numDoubleQuotes < numSingleQuotes) return Attribute$3.DOUBLE_QUOTE;
			else return Attribute$3.SINGLE_QUOTE;
		};
		_proto.preferredQuoteMark = function preferredQuoteMark(options) {
			var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;
			if (quoteMark === void 0) quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
			if (quoteMark === void 0) quoteMark = Attribute$3.DOUBLE_QUOTE;
			return quoteMark;
		};
		_proto._syncRawValue = function _syncRawValue() {
			var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);
			if (rawValue === this._value) {
				if (this.raws) delete this.raws.value;
			} else this.raws.value = rawValue;
		};
		_proto._handleEscapes = function _handleEscapes(prop, value) {
			if (this._constructed) {
				var escaped = (0, _cssesc["default"])(value, { isIdentifier: true });
				if (escaped !== value) this.raws[prop] = escaped;
				else delete this.raws[prop];
			}
		};
		_proto._spacesFor = function _spacesFor(name) {
			var attrSpaces = {
				before: "",
				after: ""
			};
			var spaces = this.spaces[name] || {};
			var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
			return Object.assign(attrSpaces, spaces, rawSpaces);
		};
		_proto._stringFor = function _stringFor(name, spaceName, concat) {
			if (spaceName === void 0) spaceName = name;
			if (concat === void 0) concat = defaultAttrConcat;
			var attrSpaces = this._spacesFor(spaceName);
			return concat(this.stringifyProperty(name), attrSpaces);
		};
		_proto.offsetOf = function offsetOf(name) {
			var count = 1;
			var attributeSpaces = this._spacesFor("attribute");
			count += attributeSpaces.before.length;
			if (name === "namespace" || name === "ns") return this.namespace ? count : -1;
			if (name === "attributeNS") return count;
			count += this.namespaceString.length;
			if (this.namespace) count += 1;
			if (name === "attribute") return count;
			count += this.stringifyProperty("attribute").length;
			count += attributeSpaces.after.length;
			var operatorSpaces = this._spacesFor("operator");
			count += operatorSpaces.before.length;
			var operator$1 = this.stringifyProperty("operator");
			if (name === "operator") return operator$1 ? count : -1;
			count += operator$1.length;
			count += operatorSpaces.after.length;
			var valueSpaces = this._spacesFor("value");
			count += valueSpaces.before.length;
			var value = this.stringifyProperty("value");
			if (name === "value") return value ? count : -1;
			count += value.length;
			count += valueSpaces.after.length;
			var insensitiveSpaces = this._spacesFor("insensitive");
			count += insensitiveSpaces.before.length;
			if (name === "insensitive") return this.insensitive ? count : -1;
			return -1;
		};
		_proto.toString = function toString$5() {
			var _this2 = this;
			var selector$3 = [this.rawSpaceBefore, "["];
			selector$3.push(this._stringFor("qualifiedAttribute", "attribute"));
			if (this.operator && (this.value || this.value === "")) {
				selector$3.push(this._stringFor("operator"));
				selector$3.push(this._stringFor("value"));
				selector$3.push(this._stringFor("insensitiveFlag", "insensitive", function(attrValue, attrSpaces) {
					if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) attrSpaces.before = " ";
					return defaultAttrConcat(attrValue, attrSpaces);
				}));
			}
			selector$3.push("]");
			selector$3.push(this.rawSpaceAfter);
			return selector$3.join("");
		};
		_createClass$1(Attribute$3, [
			{
				key: "quoted",
				get: function get$2() {
					var qm = this.quoteMark;
					return qm === "'" || qm === "\"";
				},
				set: function set(value) {
					warnOfDeprecatedQuotedAssignment();
				}
			},
			{
				key: "quoteMark",
				get: function get$2() {
					return this._quoteMark;
				},
				set: function set(quoteMark) {
					if (!this._constructed) {
						this._quoteMark = quoteMark;
						return;
					}
					if (this._quoteMark !== quoteMark) {
						this._quoteMark = quoteMark;
						this._syncRawValue();
					}
				}
			},
			{
				key: "qualifiedAttribute",
				get: function get$2() {
					return this.qualifiedName(this.raws.attribute || this.attribute);
				}
			},
			{
				key: "insensitiveFlag",
				get: function get$2() {
					return this.insensitive ? "i" : "";
				}
			},
			{
				key: "value",
				get: function get$2() {
					return this._value;
				},
				set: function set(v$1) {
					if (this._constructed) {
						var _unescapeValue2 = unescapeValue(v$1), deprecatedUsage = _unescapeValue2.deprecatedUsage, unescaped = _unescapeValue2.unescaped, quoteMark = _unescapeValue2.quoteMark;
						if (deprecatedUsage) warnOfDeprecatedValueAssignment();
						if (unescaped === this._value && quoteMark === this._quoteMark) return;
						this._value = unescaped;
						this._quoteMark = quoteMark;
						this._syncRawValue();
					} else this._value = v$1;
				}
			},
			{
				key: "insensitive",
				get: function get$2() {
					return this._insensitive;
				},
				set: function set(insensitive) {
					if (!insensitive) {
						this._insensitive = false;
						if (this.raws && (this.raws.insensitiveFlag === "I" || this.raws.insensitiveFlag === "i")) this.raws.insensitiveFlag = void 0;
					}
					this._insensitive = insensitive;
				}
			},
			{
				key: "attribute",
				get: function get$2() {
					return this._attribute;
				},
				set: function set(name) {
					this._handleEscapes("attribute", name);
					this._attribute = name;
				}
			}
		]);
		return Attribute$3;
	}(_namespace$1["default"]);
	exports["default"] = Attribute;
	Attribute.NO_QUOTE = null;
	Attribute.SINGLE_QUOTE = "'";
	Attribute.DOUBLE_QUOTE = "\"";
	var CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {
		"'": {
			quotes: "single",
			wrap: true
		},
		"\"": {
			quotes: "double",
			wrap: true
		}
	}, _CSSESC_QUOTE_OPTIONS[null] = { isIdentifier: true }, _CSSESC_QUOTE_OPTIONS);
	function defaultAttrConcat(attrValue, attrSpaces) {
		return "" + attrSpaces.before + attrValue + attrSpaces.after;
	}
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/universal.js
var require_universal = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/universal.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _namespace = _interopRequireDefault$8(require_namespace());
	var _types$5 = require_types$1();
	function _interopRequireDefault$8(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$2(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$2(subClass, superClass);
	}
	function _setPrototypeOf$2(o$2, p$2) {
		_setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$2(o$2, p$2);
	}
	var Universal = /* @__PURE__ */ function(_Namespace) {
		_inheritsLoose$2(Universal$3, _Namespace);
		function Universal$3(opts) {
			var _this;
			_this = _Namespace.call(this, opts) || this;
			_this.type = _types$5.UNIVERSAL;
			_this.value = "*";
			return _this;
		}
		return Universal$3;
	}(_namespace["default"]);
	exports["default"] = Universal;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/combinator.js
var require_combinator = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/combinator.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node$1 = _interopRequireDefault$7(require_node$4());
	var _types$4 = require_types$1();
	function _interopRequireDefault$7(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose$1(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf$1(subClass, superClass);
	}
	function _setPrototypeOf$1(o$2, p$2) {
		_setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf$1(o$2, p$2);
	}
	var Combinator = /* @__PURE__ */ function(_Node) {
		_inheritsLoose$1(Combinator$3, _Node);
		function Combinator$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$4.COMBINATOR;
			return _this;
		}
		return Combinator$3;
	}(_node$1["default"]);
	exports["default"] = Combinator;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/nesting.js
var require_nesting = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/nesting.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _node = _interopRequireDefault$6(require_node$4());
	var _types$3 = require_types$1();
	function _interopRequireDefault$6(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _inheritsLoose(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o$2, p$2) {
		_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf$42(o$3, p$3) {
			o$3.__proto__ = p$3;
			return o$3;
		};
		return _setPrototypeOf(o$2, p$2);
	}
	var Nesting = /* @__PURE__ */ function(_Node) {
		_inheritsLoose(Nesting$3, _Node);
		function Nesting$3(opts) {
			var _this;
			_this = _Node.call(this, opts) || this;
			_this.type = _types$3.NESTING;
			_this.value = "&";
			return _this;
		}
		return Nesting$3;
	}(_node["default"]);
	exports["default"] = Nesting;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/sortAscending.js
var require_sortAscending = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/sortAscending.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = sortAscending;
	function sortAscending(list$4) {
		return list$4.sort(function(a$1, b$1) {
			return a$1 - b$1;
		});
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/tokenTypes.js
var require_tokenTypes = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/tokenTypes.js"(exports) {
	exports.__esModule = true;
	exports.word = exports.tilde = exports.tab = exports.str = exports.space = exports.slash = exports.singleQuote = exports.semicolon = exports.plus = exports.pipe = exports.openSquare = exports.openParenthesis = exports.newline = exports.greaterThan = exports.feed = exports.equals = exports.doubleQuote = exports.dollar = exports.cr = exports.comment = exports.comma = exports.combinator = exports.colon = exports.closeSquare = exports.closeParenthesis = exports.caret = exports.bang = exports.backslash = exports.at = exports.asterisk = exports.ampersand = void 0;
	var ampersand = 38;
	exports.ampersand = ampersand;
	var asterisk = 42;
	exports.asterisk = asterisk;
	var at = 64;
	exports.at = at;
	var comma = 44;
	exports.comma = comma;
	var colon = 58;
	exports.colon = colon;
	var semicolon = 59;
	exports.semicolon = semicolon;
	var openParenthesis = 40;
	exports.openParenthesis = openParenthesis;
	var closeParenthesis = 41;
	exports.closeParenthesis = closeParenthesis;
	var openSquare = 91;
	exports.openSquare = openSquare;
	var closeSquare = 93;
	exports.closeSquare = closeSquare;
	var dollar = 36;
	exports.dollar = dollar;
	var tilde = 126;
	exports.tilde = tilde;
	var caret = 94;
	exports.caret = caret;
	var plus = 43;
	exports.plus = plus;
	var equals = 61;
	exports.equals = equals;
	var pipe = 124;
	exports.pipe = pipe;
	var greaterThan = 62;
	exports.greaterThan = greaterThan;
	var space = 32;
	exports.space = space;
	var singleQuote = 39;
	exports.singleQuote = singleQuote;
	var doubleQuote = 34;
	exports.doubleQuote = doubleQuote;
	var slash = 47;
	exports.slash = slash;
	var bang = 33;
	exports.bang = bang;
	var backslash = 92;
	exports.backslash = backslash;
	var cr = 13;
	exports.cr = cr;
	var feed = 12;
	exports.feed = feed;
	var newline = 10;
	exports.newline = newline;
	var tab = 9;
	exports.tab = tab;
	var str = singleQuote;
	exports.str = str;
	var comment$1 = -1;
	exports.comment = comment$1;
	var word = -2;
	exports.word = word;
	var combinator$1 = -3;
	exports.combinator = combinator$1;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/tokenize.js
var require_tokenize = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/tokenize.js"(exports) {
	exports.__esModule = true;
	exports.FIELDS = void 0;
	exports["default"] = tokenize$1;
	var t$6 = _interopRequireWildcard$2(require_tokenTypes());
	var _unescapable, _wordDelimiters;
	function _getRequireWildcardCache$2(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$2 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$2(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$2(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	var unescapable = (_unescapable = {}, _unescapable[t$6.tab] = true, _unescapable[t$6.newline] = true, _unescapable[t$6.cr] = true, _unescapable[t$6.feed] = true, _unescapable);
	var wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t$6.space] = true, _wordDelimiters[t$6.tab] = true, _wordDelimiters[t$6.newline] = true, _wordDelimiters[t$6.cr] = true, _wordDelimiters[t$6.feed] = true, _wordDelimiters[t$6.ampersand] = true, _wordDelimiters[t$6.asterisk] = true, _wordDelimiters[t$6.bang] = true, _wordDelimiters[t$6.comma] = true, _wordDelimiters[t$6.colon] = true, _wordDelimiters[t$6.semicolon] = true, _wordDelimiters[t$6.openParenthesis] = true, _wordDelimiters[t$6.closeParenthesis] = true, _wordDelimiters[t$6.openSquare] = true, _wordDelimiters[t$6.closeSquare] = true, _wordDelimiters[t$6.singleQuote] = true, _wordDelimiters[t$6.doubleQuote] = true, _wordDelimiters[t$6.plus] = true, _wordDelimiters[t$6.pipe] = true, _wordDelimiters[t$6.tilde] = true, _wordDelimiters[t$6.greaterThan] = true, _wordDelimiters[t$6.equals] = true, _wordDelimiters[t$6.dollar] = true, _wordDelimiters[t$6.caret] = true, _wordDelimiters[t$6.slash] = true, _wordDelimiters);
	var hex = {};
	var hexChars = "0123456789abcdefABCDEF";
	for (var i$2 = 0; i$2 < hexChars.length; i$2++) hex[hexChars.charCodeAt(i$2)] = true;
	/**
	*  Returns the last index of the bar css word
	* @param {string} css The string in which the word begins
	* @param {number} start The index into the string where word's first letter occurs
	*/
	function consumeWord(css, start) {
		var next = start;
		var code$1;
		do {
			code$1 = css.charCodeAt(next);
			if (wordDelimiters[code$1]) return next - 1;
			else if (code$1 === t$6.backslash) next = consumeEscape(css, next) + 1;
			else next++;
		} while (next < css.length);
		return next - 1;
	}
	/**
	*  Returns the last index of the escape sequence
	* @param {string} css The string in which the sequence begins
	* @param {number} start The index into the string where escape character (`\`) occurs.
	*/
	function consumeEscape(css, start) {
		var next = start;
		var code$1 = css.charCodeAt(next + 1);
		if (unescapable[code$1]) {} else if (hex[code$1]) {
			var hexDigits = 0;
			do {
				next++;
				hexDigits++;
				code$1 = css.charCodeAt(next + 1);
			} while (hex[code$1] && hexDigits < 6);
			if (hexDigits < 6 && code$1 === t$6.space) next++;
		} else next++;
		return next;
	}
	var FIELDS = {
		TYPE: 0,
		START_LINE: 1,
		START_COL: 2,
		END_LINE: 3,
		END_COL: 4,
		START_POS: 5,
		END_POS: 6
	};
	exports.FIELDS = FIELDS;
	function tokenize$1(input) {
		var tokens$3 = [];
		var css = input.css.valueOf();
		var _css = css, length = _css.length;
		var offset = -1;
		var line = 1;
		var start = 0;
		var end = 0;
		var code$1, content, endColumn, endLine, escaped, escapePos, last$2, lines, next, nextLine, nextOffset, quote, tokenType;
		function unclosed(what, fix) {
			if (input.safe) {
				css += fix;
				next = css.length - 1;
			} else throw input.error("Unclosed " + what, line, start - offset, start);
		}
		while (start < length) {
			code$1 = css.charCodeAt(start);
			if (code$1 === t$6.newline) {
				offset = start;
				line += 1;
			}
			switch (code$1) {
				case t$6.space:
				case t$6.tab:
				case t$6.newline:
				case t$6.cr:
				case t$6.feed:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
						if (code$1 === t$6.newline) {
							offset = next;
							line += 1;
						}
					} while (code$1 === t$6.space || code$1 === t$6.newline || code$1 === t$6.tab || code$1 === t$6.cr || code$1 === t$6.feed);
					tokenType = t$6.space;
					endLine = line;
					endColumn = next - offset - 1;
					end = next;
					break;
				case t$6.plus:
				case t$6.greaterThan:
				case t$6.tilde:
				case t$6.pipe:
					next = start;
					do {
						next += 1;
						code$1 = css.charCodeAt(next);
					} while (code$1 === t$6.plus || code$1 === t$6.greaterThan || code$1 === t$6.tilde || code$1 === t$6.pipe);
					tokenType = t$6.combinator;
					endLine = line;
					endColumn = start - offset;
					end = next;
					break;
				case t$6.asterisk:
				case t$6.ampersand:
				case t$6.bang:
				case t$6.comma:
				case t$6.equals:
				case t$6.dollar:
				case t$6.caret:
				case t$6.openSquare:
				case t$6.closeSquare:
				case t$6.colon:
				case t$6.semicolon:
				case t$6.openParenthesis:
				case t$6.closeParenthesis:
					next = start;
					tokenType = code$1;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				case t$6.singleQuote:
				case t$6.doubleQuote:
					quote = code$1 === t$6.singleQuote ? "'" : "\"";
					next = start;
					do {
						escaped = false;
						next = css.indexOf(quote, next + 1);
						if (next === -1) unclosed("quote", quote);
						escapePos = next;
						while (css.charCodeAt(escapePos - 1) === t$6.backslash) {
							escapePos -= 1;
							escaped = !escaped;
						}
					} while (escaped);
					tokenType = t$6.str;
					endLine = line;
					endColumn = start - offset;
					end = next + 1;
					break;
				default:
					if (code$1 === t$6.slash && css.charCodeAt(start + 1) === t$6.asterisk) {
						next = css.indexOf("*/", start + 2) + 1;
						if (next === 0) unclosed("comment", "*/");
						content = css.slice(start, next + 1);
						lines = content.split("\n");
						last$2 = lines.length - 1;
						if (last$2 > 0) {
							nextLine = line + last$2;
							nextOffset = next - lines[last$2].length;
						} else {
							nextLine = line;
							nextOffset = offset;
						}
						tokenType = t$6.comment;
						line = nextLine;
						endLine = nextLine;
						endColumn = next - nextOffset;
					} else if (code$1 === t$6.slash) {
						next = start;
						tokenType = code$1;
						endLine = line;
						endColumn = start - offset;
						end = next + 1;
					} else {
						next = consumeWord(css, start);
						tokenType = t$6.word;
						endLine = line;
						endColumn = next - offset;
					}
					end = next + 1;
					break;
			}
			tokens$3.push([
				tokenType,
				line,
				start - offset,
				endLine,
				endColumn,
				start,
				end
			]);
			if (nextOffset) {
				offset = nextOffset;
				nextOffset = null;
			}
			start = end;
		}
		return tokens$3;
	}
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/parser.js
var require_parser = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/parser.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _root$1 = _interopRequireDefault$5(require_root());
	var _selector$1 = _interopRequireDefault$5(require_selector());
	var _className$1 = _interopRequireDefault$5(require_className());
	var _comment$1 = _interopRequireDefault$5(require_comment());
	var _id$1 = _interopRequireDefault$5(require_id());
	var _tag$1 = _interopRequireDefault$5(require_tag());
	var _string$2 = _interopRequireDefault$5(require_string$1());
	var _pseudo$1 = _interopRequireDefault$5(require_pseudo());
	var _attribute$1 = _interopRequireWildcard$1(require_attribute());
	var _universal$1 = _interopRequireDefault$5(require_universal());
	var _combinator$1 = _interopRequireDefault$5(require_combinator());
	var _nesting$1 = _interopRequireDefault$5(require_nesting());
	var _sortAscending = _interopRequireDefault$5(require_sortAscending());
	var _tokenize = _interopRequireWildcard$1(require_tokenize());
	var tokens = _interopRequireWildcard$1(require_tokenTypes());
	var types = _interopRequireWildcard$1(require_types$1());
	var _util$2 = require_util$1();
	var _WHITESPACE_TOKENS, _Object$assign;
	function _getRequireWildcardCache$1(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache$1 = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard$1(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache$1(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$5(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	function _defineProperties(target, props) {
		for (var i$6 = 0; i$6 < props.length; i$6++) {
			var descriptor = props[i$6];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, descriptor.key, descriptor);
		}
	}
	function _createClass(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	var WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);
	var WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));
	function tokenStart(token$1) {
		return {
			line: token$1[_tokenize.FIELDS.START_LINE],
			column: token$1[_tokenize.FIELDS.START_COL]
		};
	}
	function tokenEnd(token$1) {
		return {
			line: token$1[_tokenize.FIELDS.END_LINE],
			column: token$1[_tokenize.FIELDS.END_COL]
		};
	}
	function getSource$2(startLine, startColumn, endLine, endColumn) {
		return {
			start: {
				line: startLine,
				column: startColumn
			},
			end: {
				line: endLine,
				column: endColumn
			}
		};
	}
	function getTokenSource(token$1) {
		return getSource$2(token$1[_tokenize.FIELDS.START_LINE], token$1[_tokenize.FIELDS.START_COL], token$1[_tokenize.FIELDS.END_LINE], token$1[_tokenize.FIELDS.END_COL]);
	}
	function getTokenSourceSpan(startToken, endToken) {
		if (!startToken) return void 0;
		return getSource$2(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);
	}
	function unescapeProp(node, prop) {
		var value = node[prop];
		if (typeof value !== "string") return;
		if (value.indexOf("\\") !== -1) {
			(0, _util$2.ensureObject)(node, "raws");
			node[prop] = (0, _util$2.unesc)(value);
			if (node.raws[prop] === void 0) node.raws[prop] = value;
		}
		return node;
	}
	function indexesOf(array, item) {
		var i$6 = -1;
		var indexes = [];
		while ((i$6 = array.indexOf(item, i$6 + 1)) !== -1) indexes.push(i$6);
		return indexes;
	}
	function uniqs() {
		var list$4 = Array.prototype.concat.apply([], arguments);
		return list$4.filter(function(item, i$6) {
			return i$6 === list$4.indexOf(item);
		});
	}
	var Parser$1 = /* @__PURE__ */ function() {
		function Parser$10(rule$1, options) {
			if (options === void 0) options = {};
			this.rule = rule$1;
			this.options = Object.assign({
				lossy: false,
				safe: false
			}, options);
			this.position = 0;
			this.css = typeof this.rule === "string" ? this.rule : this.rule.selector;
			this.tokens = (0, _tokenize["default"])({
				css: this.css,
				error: this._errorGenerator(),
				safe: this.options.safe
			});
			var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);
			this.root = new _root$1["default"]({ source: rootSource });
			this.root.errorGenerator = this._errorGenerator();
			var selector$3 = new _selector$1["default"]({
				source: { start: {
					line: 1,
					column: 1
				} },
				sourceIndex: 0
			});
			this.root.append(selector$3);
			this.current = selector$3;
			this.loop();
		}
		var _proto = Parser$10.prototype;
		_proto._errorGenerator = function _errorGenerator() {
			var _this = this;
			return function(message, errorOptions) {
				if (typeof _this.rule === "string") return new Error(message);
				return _this.rule.error(message, errorOptions);
			};
		};
		_proto.attribute = function attribute$3() {
			var attr = [];
			var startingToken = this.currToken;
			this.position++;
			while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
				attr.push(this.currToken);
				this.position++;
			}
			if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) return this.expected("closing square bracket", this.currToken[_tokenize.FIELDS.START_POS]);
			var len = attr.length;
			var node = {
				source: getSource$2(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
				sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
			};
			if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) return this.expected("attribute", attr[0][_tokenize.FIELDS.START_POS]);
			var pos = 0;
			var spaceBefore = "";
			var commentBefore = "";
			var lastAdded = null;
			var spaceAfterMeaningfulToken = false;
			while (pos < len) {
				var token$1 = attr[pos];
				var content = this.content(token$1);
				var next = attr[pos + 1];
				switch (token$1[_tokenize.FIELDS.TYPE]) {
					case tokens.space:
						spaceAfterMeaningfulToken = true;
						if (this.options.lossy) break;
						if (lastAdded) {
							(0, _util$2.ensureObject)(node, "spaces", lastAdded);
							var prevContent = node.spaces[lastAdded].after || "";
							node.spaces[lastAdded].after = prevContent + content;
							var existingComment = (0, _util$2.getProp)(node, "raws", "spaces", lastAdded, "after") || null;
							if (existingComment) node.raws.spaces[lastAdded].after = existingComment + content;
						} else {
							spaceBefore = spaceBefore + content;
							commentBefore = commentBefore + content;
						}
						break;
					case tokens.asterisk:
						if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
							if (spaceBefore) {
								(0, _util$2.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$2.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = spaceBefore;
								commentBefore = "";
							}
							node.namespace = (node.namespace || "") + content;
							var rawValue = (0, _util$2.getProp)(node, "raws", "namespace") || null;
							if (rawValue) node.raws.namespace += content;
							lastAdded = "namespace";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.dollar: if (lastAdded === "value") {
						var oldRawValue = (0, _util$2.getProp)(node, "raws", "value");
						node.value += "$";
						if (oldRawValue) node.raws.value = oldRawValue + "$";
						break;
					}
					case tokens.caret:
						if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.combinator:
						if (content === "~" && next[_tokenize.FIELDS.TYPE] === tokens.equals) {
							node.operator = content;
							lastAdded = "operator";
						}
						if (content !== "|") {
							spaceAfterMeaningfulToken = false;
							break;
						}
						if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
							node.operator = content;
							lastAdded = "operator";
						} else if (!node.namespace && !node.attribute) node.namespace = true;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.word:
						if (next && this.content(next) === "|" && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && !node.operator && !node.namespace) {
							node.namespace = content;
							lastAdded = "namespace";
						} else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
							if (spaceBefore) {
								(0, _util$2.ensureObject)(node, "spaces", "attribute");
								node.spaces.attribute.before = spaceBefore;
								spaceBefore = "";
							}
							if (commentBefore) {
								(0, _util$2.ensureObject)(node, "raws", "spaces", "attribute");
								node.raws.spaces.attribute.before = commentBefore;
								commentBefore = "";
							}
							node.attribute = (node.attribute || "") + content;
							var _rawValue = (0, _util$2.getProp)(node, "raws", "attribute") || null;
							if (_rawValue) node.raws.attribute += content;
							lastAdded = "attribute";
						} else if (!node.value && node.value !== "" || lastAdded === "value" && !(spaceAfterMeaningfulToken || node.quoteMark)) {
							var _unescaped = (0, _util$2.unesc)(content);
							var _oldRawValue = (0, _util$2.getProp)(node, "raws", "value") || "";
							var oldValue = node.value || "";
							node.value = oldValue + _unescaped;
							node.quoteMark = null;
							if (_unescaped !== content || _oldRawValue) {
								(0, _util$2.ensureObject)(node, "raws");
								node.raws.value = (_oldRawValue || oldValue) + content;
							}
							lastAdded = "value";
						} else {
							var insensitive = content === "i" || content === "I";
							if ((node.value || node.value === "") && (node.quoteMark || spaceAfterMeaningfulToken)) {
								node.insensitive = insensitive;
								if (!insensitive || content === "I") {
									(0, _util$2.ensureObject)(node, "raws");
									node.raws.insensitiveFlag = content;
								}
								lastAdded = "insensitive";
								if (spaceBefore) {
									(0, _util$2.ensureObject)(node, "spaces", "insensitive");
									node.spaces.insensitive.before = spaceBefore;
									spaceBefore = "";
								}
								if (commentBefore) {
									(0, _util$2.ensureObject)(node, "raws", "spaces", "insensitive");
									node.raws.spaces.insensitive.before = commentBefore;
									commentBefore = "";
								}
							} else if (node.value || node.value === "") {
								lastAdded = "value";
								node.value += content;
								if (node.raws.value) node.raws.value += content;
							}
						}
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.str:
						if (!node.attribute || !node.operator) return this.error("Expected an attribute followed by an operator preceding the string.", { index: token$1[_tokenize.FIELDS.START_POS] });
						var _unescapeValue = (0, _attribute$1.unescapeValue)(content), unescaped = _unescapeValue.unescaped, quoteMark = _unescapeValue.quoteMark;
						node.value = unescaped;
						node.quoteMark = quoteMark;
						lastAdded = "value";
						(0, _util$2.ensureObject)(node, "raws");
						node.raws.value = content;
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.equals:
						if (!node.attribute) return this.expected("attribute", token$1[_tokenize.FIELDS.START_POS], content);
						if (node.value) return this.error("Unexpected \"=\" found; an operator was already defined.", { index: token$1[_tokenize.FIELDS.START_POS] });
						node.operator = node.operator ? node.operator + content : content;
						lastAdded = "operator";
						spaceAfterMeaningfulToken = false;
						break;
					case tokens.comment:
						if (lastAdded) if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === "insensitive") {
							var lastComment = (0, _util$2.getProp)(node, "spaces", lastAdded, "after") || "";
							var rawLastComment = (0, _util$2.getProp)(node, "raws", "spaces", lastAdded, "after") || lastComment;
							(0, _util$2.ensureObject)(node, "raws", "spaces", lastAdded);
							node.raws.spaces[lastAdded].after = rawLastComment + content;
						} else {
							var lastValue = node[lastAdded] || "";
							var rawLastValue = (0, _util$2.getProp)(node, "raws", lastAdded) || lastValue;
							(0, _util$2.ensureObject)(node, "raws");
							node.raws[lastAdded] = rawLastValue + content;
						}
						else commentBefore = commentBefore + content;
						break;
					default: return this.error("Unexpected \"" + content + "\" found.", { index: token$1[_tokenize.FIELDS.START_POS] });
				}
				pos++;
			}
			unescapeProp(node, "attribute");
			unescapeProp(node, "namespace");
			this.newNode(new _attribute$1["default"](node));
			this.position++;
		};
		_proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
			if (stopPosition < 0) stopPosition = this.tokens.length;
			var startPosition = this.position;
			var nodes$1 = [];
			var space$3 = "";
			var lastComment = void 0;
			do
				if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {
					if (!this.options.lossy) space$3 += this.content();
				} else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {
					var spaces = {};
					if (space$3) {
						spaces.before = space$3;
						space$3 = "";
					}
					lastComment = new _comment$1["default"]({
						value: this.content(),
						source: getTokenSource(this.currToken),
						sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
						spaces
					});
					nodes$1.push(lastComment);
				}
			while (++this.position < stopPosition);
			if (space$3) {
				if (lastComment) lastComment.spaces.after = space$3;
				else if (!this.options.lossy) {
					var firstToken = this.tokens[startPosition];
					var lastToken = this.tokens[this.position - 1];
					nodes$1.push(new _string$2["default"]({
						value: "",
						source: getSource$2(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),
						sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
						spaces: {
							before: space$3,
							after: ""
						}
					}));
				}
			}
			return nodes$1;
		};
		_proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes$1, requiredSpace) {
			var _this2 = this;
			if (requiredSpace === void 0) requiredSpace = false;
			var space$3 = "";
			var rawSpace = "";
			nodes$1.forEach(function(n$4) {
				var spaceBefore = _this2.lossySpace(n$4.spaces.before, requiredSpace);
				var rawSpaceBefore = _this2.lossySpace(n$4.rawSpaceBefore, requiredSpace);
				space$3 += spaceBefore + _this2.lossySpace(n$4.spaces.after, requiredSpace && spaceBefore.length === 0);
				rawSpace += spaceBefore + n$4.value + _this2.lossySpace(n$4.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
			});
			if (rawSpace === space$3) rawSpace = void 0;
			var result = {
				space: space$3,
				rawSpace
			};
			return result;
		};
		_proto.isNamedCombinator = function isNamedCombinator(position) {
			if (position === void 0) position = this.position;
			return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;
		};
		_proto.namedCombinator = function namedCombinator() {
			if (this.isNamedCombinator()) {
				var nameRaw = this.content(this.tokens[this.position + 1]);
				var name = (0, _util$2.unesc)(nameRaw).toLowerCase();
				var raws = {};
				if (name !== nameRaw) raws.value = "/" + nameRaw + "/";
				var node = new _combinator$1["default"]({
					value: "/" + name + "/",
					source: getSource$2(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),
					sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
					raws
				});
				this.position = this.position + 3;
				return node;
			} else this.unexpected();
		};
		_proto.combinator = function combinator$6() {
			var _this3 = this;
			if (this.content() === "|") return this.namespace();
			var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);
			if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
				var nodes$1 = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
				if (nodes$1.length > 0) {
					var last$2 = this.current.last;
					if (last$2) {
						var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes$1), space$3 = _this$convertWhitespa.space, rawSpace = _this$convertWhitespa.rawSpace;
						if (rawSpace !== void 0) last$2.rawSpaceAfter += rawSpace;
						last$2.spaces.after += space$3;
					} else nodes$1.forEach(function(n$4) {
						return _this3.newNode(n$4);
					});
				}
				return;
			}
			var firstToken = this.currToken;
			var spaceOrDescendantSelectorNodes = void 0;
			if (nextSigTokenPos > this.position) spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
			var node;
			if (this.isNamedCombinator()) node = this.namedCombinator();
			else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {
				node = new _combinator$1["default"]({
					value: this.content(),
					source: getTokenSource(this.currToken),
					sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]
				});
				this.position++;
			} else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {} else if (!spaceOrDescendantSelectorNodes) this.unexpected();
			if (node) {
				if (spaceOrDescendantSelectorNodes) {
					var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes), _space = _this$convertWhitespa2.space, _rawSpace = _this$convertWhitespa2.rawSpace;
					node.spaces.before = _space;
					node.rawSpaceBefore = _rawSpace;
				}
			} else {
				var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true), _space2 = _this$convertWhitespa3.space, _rawSpace2 = _this$convertWhitespa3.rawSpace;
				if (!_rawSpace2) _rawSpace2 = _space2;
				var spaces = {};
				var raws = { spaces: {} };
				if (_space2.endsWith(" ") && _rawSpace2.endsWith(" ")) {
					spaces.before = _space2.slice(0, _space2.length - 1);
					raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
				} else if (_space2.startsWith(" ") && _rawSpace2.startsWith(" ")) {
					spaces.after = _space2.slice(1);
					raws.spaces.after = _rawSpace2.slice(1);
				} else raws.value = _rawSpace2;
				node = new _combinator$1["default"]({
					value: " ",
					source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),
					sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
					spaces,
					raws
				});
			}
			if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {
				node.spaces.after = this.optionalSpace(this.content());
				this.position++;
			}
			return this.newNode(node);
		};
		_proto.comma = function comma$5() {
			if (this.position === this.tokens.length - 1) {
				this.root.trailingComma = true;
				this.position++;
				return;
			}
			this.current._inferEndPosition();
			var selector$3 = new _selector$1["default"]({
				source: { start: tokenStart(this.tokens[this.position + 1]) },
				sourceIndex: this.tokens[this.position + 1][_tokenize.FIELDS.START_POS]
			});
			this.current.parent.append(selector$3);
			this.current = selector$3;
			this.position++;
		};
		_proto.comment = function comment$7() {
			var current = this.currToken;
			this.newNode(new _comment$1["default"]({
				value: this.content(),
				source: getTokenSource(current),
				sourceIndex: current[_tokenize.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.error = function error(message, opts) {
			throw this.root.error(message, opts);
		};
		_proto.missingBackslash = function missingBackslash() {
			return this.error("Expected a backslash preceding the semicolon.", { index: this.currToken[_tokenize.FIELDS.START_POS] });
		};
		_proto.missingParenthesis = function missingParenthesis() {
			return this.expected("opening parenthesis", this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.missingSquareBracket = function missingSquareBracket() {
			return this.expected("opening square bracket", this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.unexpected = function unexpected() {
			return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.unexpectedPipe = function unexpectedPipe() {
			return this.error("Unexpected '|'.", this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.namespace = function namespace() {
			var before = this.prevToken && this.content(this.prevToken) || true;
			if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {
				this.position++;
				return this.word(before);
			} else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {
				this.position++;
				return this.universal(before);
			}
			this.unexpectedPipe();
		};
		_proto.nesting = function nesting$3() {
			if (this.nextToken) {
				var nextContent = this.content(this.nextToken);
				if (nextContent === "|") {
					this.position++;
					return;
				}
			}
			var current = this.currToken;
			this.newNode(new _nesting$1["default"]({
				value: this.content(),
				source: getTokenSource(current),
				sourceIndex: current[_tokenize.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.parentheses = function parentheses() {
			var last$2 = this.current.last;
			var unbalanced = 1;
			this.position++;
			if (last$2 && last$2.type === types.PSEUDO) {
				var selector$3 = new _selector$1["default"]({
					source: { start: tokenStart(this.tokens[this.position]) },
					sourceIndex: this.tokens[this.position][_tokenize.FIELDS.START_POS]
				});
				var cache$3 = this.current;
				last$2.append(selector$3);
				this.current = selector$3;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) unbalanced--;
					if (unbalanced) this.parse();
					else {
						this.current.source.end = tokenEnd(this.currToken);
						this.current.parent.source.end = tokenEnd(this.currToken);
						this.position++;
					}
				}
				this.current = cache$3;
			} else {
				var parenStart = this.currToken;
				var parenValue = "(";
				var parenEnd;
				while (this.position < this.tokens.length && unbalanced) {
					if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) unbalanced++;
					if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) unbalanced--;
					parenEnd = this.currToken;
					parenValue += this.parseParenthesisToken(this.currToken);
					this.position++;
				}
				if (last$2) last$2.appendToPropertyAndEscape("value", parenValue, parenValue);
				else this.newNode(new _string$2["default"]({
					value: parenValue,
					source: getSource$2(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),
					sourceIndex: parenStart[_tokenize.FIELDS.START_POS]
				}));
			}
			if (unbalanced) return this.expected("closing parenthesis", this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.pseudo = function pseudo$3() {
			var _this4 = this;
			var pseudoStr = "";
			var startingToken = this.currToken;
			while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {
				pseudoStr += this.content();
				this.position++;
			}
			if (!this.currToken) return this.expected(["pseudo-class", "pseudo-element"], this.position - 1);
			if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) this.splitWord(false, function(first, length) {
				pseudoStr += first;
				_this4.newNode(new _pseudo$1["default"]({
					value: pseudoStr,
					source: getTokenSourceSpan(startingToken, _this4.currToken),
					sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
				}));
				if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) _this4.error("Misplaced parenthesis.", { index: _this4.nextToken[_tokenize.FIELDS.START_POS] });
			});
			else return this.expected(["pseudo-class", "pseudo-element"], this.currToken[_tokenize.FIELDS.START_POS]);
		};
		_proto.space = function space$3() {
			var content = this.content();
			if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function(node) {
				return node.type === "comment";
			})) {
				this.spaces = this.optionalSpace(content);
				this.position++;
			} else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
				this.current.last.spaces.after = this.optionalSpace(content);
				this.position++;
			} else this.combinator();
		};
		_proto.string = function string$3() {
			var current = this.currToken;
			this.newNode(new _string$2["default"]({
				value: this.content(),
				source: getTokenSource(current),
				sourceIndex: current[_tokenize.FIELDS.START_POS]
			}));
			this.position++;
		};
		_proto.universal = function universal$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			var current = this.currToken;
			this.newNode(new _universal$1["default"]({
				value: this.content(),
				source: getTokenSource(current),
				sourceIndex: current[_tokenize.FIELDS.START_POS]
			}), namespace);
			this.position++;
		};
		_proto.splitWord = function splitWord(namespace, firstCallback) {
			var _this5 = this;
			var nextToken = this.nextToken;
			var word$3 = this.content();
			while (nextToken && ~[
				tokens.dollar,
				tokens.caret,
				tokens.equals,
				tokens.word
			].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {
				this.position++;
				var current = this.content();
				word$3 += current;
				if (current.lastIndexOf("\\") === current.length - 1) {
					var next = this.nextToken;
					if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {
						word$3 += this.requiredSpace(this.content(next));
						this.position++;
					}
				}
				nextToken = this.nextToken;
			}
			var hasClass = indexesOf(word$3, ".").filter(function(i$6) {
				var escapedDot = word$3[i$6 - 1] === "\\";
				var isKeyframesPercent = /^\d+\.\d+%$/.test(word$3);
				return !escapedDot && !isKeyframesPercent;
			});
			var hasId = indexesOf(word$3, "#").filter(function(i$6) {
				return word$3[i$6 - 1] !== "\\";
			});
			var interpolations = indexesOf(word$3, "#{");
			if (interpolations.length) hasId = hasId.filter(function(hashIndex) {
				return !~interpolations.indexOf(hashIndex);
			});
			var indices = (0, _sortAscending["default"])(uniqs([0].concat(hasClass, hasId)));
			indices.forEach(function(ind, i$6) {
				var index$1 = indices[i$6 + 1] || word$3.length;
				var value = word$3.slice(ind, index$1);
				if (i$6 === 0 && firstCallback) return firstCallback.call(_this5, value, indices.length);
				var node;
				var current$1 = _this5.currToken;
				var sourceIndex = current$1[_tokenize.FIELDS.START_POS] + indices[i$6];
				var source = getSource$2(current$1[1], current$1[2] + ind, current$1[3], current$1[2] + (index$1 - 1));
				if (~hasClass.indexOf(ind)) {
					var classNameOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _className$1["default"](unescapeProp(classNameOpts, "value"));
				} else if (~hasId.indexOf(ind)) {
					var idOpts = {
						value: value.slice(1),
						source,
						sourceIndex
					};
					node = new _id$1["default"](unescapeProp(idOpts, "value"));
				} else {
					var tagOpts = {
						value,
						source,
						sourceIndex
					};
					unescapeProp(tagOpts, "value");
					node = new _tag$1["default"](tagOpts);
				}
				_this5.newNode(node, namespace);
				namespace = null;
			});
			this.position++;
		};
		_proto.word = function word$3(namespace) {
			var nextToken = this.nextToken;
			if (nextToken && this.content(nextToken) === "|") {
				this.position++;
				return this.namespace();
			}
			return this.splitWord(namespace);
		};
		_proto.loop = function loop() {
			while (this.position < this.tokens.length) this.parse(true);
			this.current._inferEndPosition();
			return this.root;
		};
		_proto.parse = function parse$17(throwOnParenthesis) {
			switch (this.currToken[_tokenize.FIELDS.TYPE]) {
				case tokens.space:
					this.space();
					break;
				case tokens.comment:
					this.comment();
					break;
				case tokens.openParenthesis:
					this.parentheses();
					break;
				case tokens.closeParenthesis:
					if (throwOnParenthesis) this.missingParenthesis();
					break;
				case tokens.openSquare:
					this.attribute();
					break;
				case tokens.dollar:
				case tokens.caret:
				case tokens.equals:
				case tokens.word:
					this.word();
					break;
				case tokens.colon:
					this.pseudo();
					break;
				case tokens.comma:
					this.comma();
					break;
				case tokens.asterisk:
					this.universal();
					break;
				case tokens.ampersand:
					this.nesting();
					break;
				case tokens.slash:
				case tokens.combinator:
					this.combinator();
					break;
				case tokens.str:
					this.string();
					break;
				case tokens.closeSquare: this.missingSquareBracket();
				case tokens.semicolon: this.missingBackslash();
				default: this.unexpected();
			}
		};
		_proto.expected = function expected(description, index$1, found) {
			if (Array.isArray(description)) {
				var last$2 = description.pop();
				description = description.join(", ") + " or " + last$2;
			}
			var an = /^[aeiou]/.test(description[0]) ? "an" : "a";
			if (!found) return this.error("Expected " + an + " " + description + ".", { index: index$1 });
			return this.error("Expected " + an + " " + description + ", found \"" + found + "\" instead.", { index: index$1 });
		};
		_proto.requiredSpace = function requiredSpace(space$3) {
			return this.options.lossy ? " " : space$3;
		};
		_proto.optionalSpace = function optionalSpace(space$3) {
			return this.options.lossy ? "" : space$3;
		};
		_proto.lossySpace = function lossySpace(space$3, required) {
			if (this.options.lossy) return required ? " " : "";
			else return space$3;
		};
		_proto.parseParenthesisToken = function parseParenthesisToken(token$1) {
			var content = this.content(token$1);
			if (token$1[_tokenize.FIELDS.TYPE] === tokens.space) return this.requiredSpace(content);
			else return content;
		};
		_proto.newNode = function newNode(node, namespace) {
			if (namespace) {
				if (/^ +$/.test(namespace)) {
					if (!this.options.lossy) this.spaces = (this.spaces || "") + namespace;
					namespace = true;
				}
				node.namespace = namespace;
				unescapeProp(node, "namespace");
			}
			if (this.spaces) {
				node.spaces.before = this.spaces;
				this.spaces = "";
			}
			return this.current.append(node);
		};
		_proto.content = function content(token$1) {
			if (token$1 === void 0) token$1 = this.currToken;
			return this.css.slice(token$1[_tokenize.FIELDS.START_POS], token$1[_tokenize.FIELDS.END_POS]);
		};
		/**
		* returns the index of the next non-whitespace, non-comment token.
		* returns -1 if no meaningful token is found.
		*/
		_proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
			if (startPosition === void 0) startPosition = this.position + 1;
			var searchPosition = startPosition;
			while (searchPosition < this.tokens.length) if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {
				searchPosition++;
				continue;
			} else return searchPosition;
			return -1;
		};
		_createClass(Parser$10, [
			{
				key: "currToken",
				get: function get$2() {
					return this.tokens[this.position];
				}
			},
			{
				key: "nextToken",
				get: function get$2() {
					return this.tokens[this.position + 1];
				}
			},
			{
				key: "prevToken",
				get: function get$2() {
					return this.tokens[this.position - 1];
				}
			}
		]);
		return Parser$10;
	}();
	exports["default"] = Parser$1;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/processor.js
var require_processor = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/processor.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _parser$3 = _interopRequireDefault$4(require_parser());
	function _interopRequireDefault$4(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var Processor = /* @__PURE__ */ function() {
		function Processor$8(func, options) {
			this.func = func || function noop$3() {};
			this.funcRes = null;
			this.options = options;
		}
		var _proto = Processor$8.prototype;
		_proto._shouldUpdateSelector = function _shouldUpdateSelector(rule$1, options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.updateSelector === false) return false;
			else return typeof rule$1 !== "string";
		};
		_proto._isLossy = function _isLossy(options) {
			if (options === void 0) options = {};
			var merged = Object.assign({}, this.options, options);
			if (merged.lossless === false) return true;
			else return false;
		};
		_proto._root = function _root$6(rule$1, options) {
			if (options === void 0) options = {};
			var parser$5 = new _parser$3["default"](rule$1, this._parseOptions(options));
			return parser$5.root;
		};
		_proto._parseOptions = function _parseOptions(options) {
			return { lossy: this._isLossy(options) };
		};
		_proto._run = function _run(rule$1, options) {
			var _this = this;
			if (options === void 0) options = {};
			return new Promise(function(resolve$5, reject) {
				try {
					var root$5 = _this._root(rule$1, options);
					Promise.resolve(_this.func(root$5)).then(function(transform$1) {
						var string$3 = void 0;
						if (_this._shouldUpdateSelector(rule$1, options)) {
							string$3 = root$5.toString();
							rule$1.selector = string$3;
						}
						return {
							transform: transform$1,
							root: root$5,
							string: string$3
						};
					}).then(resolve$5, reject);
				} catch (e$2) {
					reject(e$2);
					return;
				}
			});
		};
		_proto._runSync = function _runSync(rule$1, options) {
			if (options === void 0) options = {};
			var root$5 = this._root(rule$1, options);
			var transform$1 = this.func(root$5);
			if (transform$1 && typeof transform$1.then === "function") throw new Error("Selector processor returned a promise to a synchronous call.");
			var string$3 = void 0;
			if (options.updateSelector && typeof rule$1 !== "string") {
				string$3 = root$5.toString();
				rule$1.selector = string$3;
			}
			return {
				transform: transform$1,
				root: root$5,
				string: string$3
			};
		};
		_proto.ast = function ast(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.root;
			});
		};
		_proto.astSync = function astSync(rule$1, options) {
			return this._runSync(rule$1, options).root;
		};
		_proto.transform = function transform$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.transform;
			});
		};
		_proto.transformSync = function transformSync(rule$1, options) {
			return this._runSync(rule$1, options).transform;
		};
		_proto.process = function process$1(rule$1, options) {
			return this._run(rule$1, options).then(function(result) {
				return result.string || result.root.toString();
			});
		};
		_proto.processSync = function processSync(rule$1, options) {
			var result = this._runSync(rule$1, options);
			return result.string || result.root.toString();
		};
		return Processor$8;
	}();
	exports["default"] = Processor;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/constructors.js
var require_constructors = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/constructors.js"(exports) {
	exports.__esModule = true;
	exports.universal = exports.tag = exports.string = exports.selector = exports.root = exports.pseudo = exports.nesting = exports.id = exports.comment = exports.combinator = exports.className = exports.attribute = void 0;
	var _attribute = _interopRequireDefault$3(require_attribute());
	var _className = _interopRequireDefault$3(require_className());
	var _combinator = _interopRequireDefault$3(require_combinator());
	var _comment = _interopRequireDefault$3(require_comment());
	var _id = _interopRequireDefault$3(require_id());
	var _nesting = _interopRequireDefault$3(require_nesting());
	var _pseudo = _interopRequireDefault$3(require_pseudo());
	var _root = _interopRequireDefault$3(require_root());
	var _selector = _interopRequireDefault$3(require_selector());
	var _string$1 = _interopRequireDefault$3(require_string$1());
	var _tag = _interopRequireDefault$3(require_tag());
	var _universal = _interopRequireDefault$3(require_universal());
	function _interopRequireDefault$3(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var attribute = function attribute$3(opts) {
		return new _attribute["default"](opts);
	};
	exports.attribute = attribute;
	var className = function className$3(opts) {
		return new _className["default"](opts);
	};
	exports.className = className;
	var combinator = function combinator$6(opts) {
		return new _combinator["default"](opts);
	};
	exports.combinator = combinator;
	var comment = function comment$7(opts) {
		return new _comment["default"](opts);
	};
	exports.comment = comment;
	var id = function id$4(opts) {
		return new _id["default"](opts);
	};
	exports.id = id;
	var nesting = function nesting$3(opts) {
		return new _nesting["default"](opts);
	};
	exports.nesting = nesting;
	var pseudo = function pseudo$3(opts) {
		return new _pseudo["default"](opts);
	};
	exports.pseudo = pseudo;
	var root = function root$5(opts) {
		return new _root["default"](opts);
	};
	exports.root = root;
	var selector = function selector$3(opts) {
		return new _selector["default"](opts);
	};
	exports.selector = selector;
	var string = function string$3(opts) {
		return new _string$1["default"](opts);
	};
	exports.string = string;
	var tag = function tag$3(opts) {
		return new _tag["default"](opts);
	};
	exports.tag = tag;
	var universal = function universal$3(opts) {
		return new _universal["default"](opts);
	};
	exports.universal = universal;
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/guards.js
var require_guards = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/guards.js"(exports) {
	exports.__esModule = true;
	exports.isComment = exports.isCombinator = exports.isClassName = exports.isAttribute = void 0;
	exports.isContainer = isContainer;
	exports.isIdentifier = void 0;
	exports.isNamespace = isNamespace;
	exports.isNesting = void 0;
	exports.isNode = isNode$1;
	exports.isPseudo = void 0;
	exports.isPseudoClass = isPseudoClass;
	exports.isPseudoElement = isPseudoElement;
	exports.isUniversal = exports.isTag = exports.isString = exports.isSelector = exports.isRoot = void 0;
	var _types$2 = require_types$1();
	var _IS_TYPE;
	var IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types$2.ATTRIBUTE] = true, _IS_TYPE[_types$2.CLASS] = true, _IS_TYPE[_types$2.COMBINATOR] = true, _IS_TYPE[_types$2.COMMENT] = true, _IS_TYPE[_types$2.ID] = true, _IS_TYPE[_types$2.NESTING] = true, _IS_TYPE[_types$2.PSEUDO] = true, _IS_TYPE[_types$2.ROOT] = true, _IS_TYPE[_types$2.SELECTOR] = true, _IS_TYPE[_types$2.STRING] = true, _IS_TYPE[_types$2.TAG] = true, _IS_TYPE[_types$2.UNIVERSAL] = true, _IS_TYPE);
	function isNode$1(node) {
		return typeof node === "object" && IS_TYPE[node.type];
	}
	function isNodeType$1(type, node) {
		return isNode$1(node) && node.type === type;
	}
	var isAttribute = isNodeType$1.bind(null, _types$2.ATTRIBUTE);
	exports.isAttribute = isAttribute;
	var isClassName = isNodeType$1.bind(null, _types$2.CLASS);
	exports.isClassName = isClassName;
	var isCombinator = isNodeType$1.bind(null, _types$2.COMBINATOR);
	exports.isCombinator = isCombinator;
	var isComment$2 = isNodeType$1.bind(null, _types$2.COMMENT);
	exports.isComment = isComment$2;
	var isIdentifier$12 = isNodeType$1.bind(null, _types$2.ID);
	exports.isIdentifier = isIdentifier$12;
	var isNesting = isNodeType$1.bind(null, _types$2.NESTING);
	exports.isNesting = isNesting;
	var isPseudo = isNodeType$1.bind(null, _types$2.PSEUDO);
	exports.isPseudo = isPseudo;
	var isRoot = isNodeType$1.bind(null, _types$2.ROOT);
	exports.isRoot = isRoot;
	var isSelector = isNodeType$1.bind(null, _types$2.SELECTOR);
	exports.isSelector = isSelector;
	var isString$1 = isNodeType$1.bind(null, _types$2.STRING);
	exports.isString = isString$1;
	var isTag$3 = isNodeType$1.bind(null, _types$2.TAG);
	exports.isTag = isTag$3;
	var isUniversal = isNodeType$1.bind(null, _types$2.UNIVERSAL);
	exports.isUniversal = isUniversal;
	function isPseudoElement(node) {
		return isPseudo(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after" || node.value.toLowerCase() === ":first-letter" || node.value.toLowerCase() === ":first-line");
	}
	function isPseudoClass(node) {
		return isPseudo(node) && !isPseudoElement(node);
	}
	function isContainer(node) {
		return !!(isNode$1(node) && node.walk);
	}
	function isNamespace(node) {
		return isAttribute(node) || isTag$3(node);
	}
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/index.js
var require_selectors = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/selectors/index.js"(exports) {
	exports.__esModule = true;
	var _types$1 = require_types$1();
	Object.keys(_types$1).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _types$1[key]) return;
		exports[key] = _types$1[key];
	});
	var _constructors = require_constructors();
	Object.keys(_constructors).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _constructors[key]) return;
		exports[key] = _constructors[key];
	});
	var _guards = require_guards();
	Object.keys(_guards).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _guards[key]) return;
		exports[key] = _guards[key];
	});
} });

//#endregion
//#region node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/index.js
var require_dist = __commonJS({ "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser/dist/index.js"(exports, module) {
	exports.__esModule = true;
	exports["default"] = void 0;
	var _processor = _interopRequireDefault$2(require_processor());
	var selectors = _interopRequireWildcard(require_selectors());
	function _getRequireWildcardCache(nodeInterop) {
		if (typeof WeakMap !== "function") return null;
		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireWildcardCache = function _getRequireWildcardCache$12(nodeInterop$1) {
			return nodeInterop$1 ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}
	function _interopRequireWildcard(obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) return obj;
		if (obj === null || typeof obj !== "object" && typeof obj !== "function") return { "default": obj };
		var cache$3 = _getRequireWildcardCache(nodeInterop);
		if (cache$3 && cache$3.has(obj)) return cache$3.get(obj);
		var newObj = {};
		var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
			var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
			if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
			else newObj[key] = obj[key];
		}
		newObj["default"] = obj;
		if (cache$3) cache$3.set(obj, newObj);
		return newObj;
	}
	function _interopRequireDefault$2(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}
	var parser$1 = function parser$5(processor) {
		return new _processor["default"](processor);
	};
	Object.assign(parser$1, selectors);
	delete parser$1.__esModule;
	var _default$11 = parser$1;
	exports["default"] = _default$11;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/postcss-modules-scope/src/index.js
var require_src$2 = __commonJS({ "node_modules/postcss-modules-scope/src/index.js"(exports, module) {
	const selectorParser$1 = require_dist();
	const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	function isNestedRule(rule$1) {
		if (!rule$1.parent || rule$1.parent.type === "root") return false;
		if (rule$1.parent.type === "rule") return true;
		return isNestedRule(rule$1.parent);
	}
	function getSingleLocalNamesForComposes(root$5, rule$1) {
		if (isNestedRule(rule$1)) throw new Error(`composition is not allowed in nested rule \n\n${rule$1}`);
		return root$5.nodes.map((node) => {
			if (node.type !== "selector" || node.nodes.length !== 1) throw new Error(`composition is only allowed when selector is single :local class name not in "${root$5}"`);
			node = node.nodes[0];
			if (node.type !== "pseudo" || node.value !== ":local" || node.nodes.length !== 1) throw new Error("composition is only allowed when selector is single :local class name not in \"" + root$5 + "\", \"" + node + "\" is weird");
			node = node.first;
			if (node.type !== "selector" || node.length !== 1) throw new Error("composition is only allowed when selector is single :local class name not in \"" + root$5 + "\", \"" + node + "\" is weird");
			node = node.first;
			if (node.type !== "class") throw new Error("composition is only allowed when selector is single :local class name not in \"" + root$5 + "\", \"" + node + "\" is weird");
			return node.value;
		});
	}
	const whitespace$2 = "[\\x20\\t\\r\\n\\f]";
	const unescapeRegExp = new RegExp("\\\\([\\da-f]{1,6}" + whitespace$2 + "?|(" + whitespace$2 + ")|.)", "ig");
	function unescape$1(str$4) {
		return str$4.replace(unescapeRegExp, (_, escaped, escapedWhitespace) => {
			const high = "0x" + escaped - 65536;
			return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
		});
	}
	const plugin = (options = {}) => {
		const generateScopedName$1 = options && options.generateScopedName || plugin.generateScopedName;
		const generateExportEntry = options && options.generateExportEntry || plugin.generateExportEntry;
		const exportGlobals = options && options.exportGlobals;
		return {
			postcssPlugin: "postcss-modules-scope",
			Once(root$5, { rule: rule$1 }) {
				const exports$1 = Object.create(null);
				function exportScopedName(name, rawName, node) {
					const scopedName = generateScopedName$1(rawName ? rawName : name, root$5.source.input.from, root$5.source.input.css, node);
					const exportEntry = generateExportEntry(rawName ? rawName : name, scopedName, root$5.source.input.from, root$5.source.input.css, node);
					const { key, value } = exportEntry;
					exports$1[key] = exports$1[key] || [];
					if (exports$1[key].indexOf(value) < 0) exports$1[key].push(value);
					return scopedName;
				}
				function localizeNode$1(node) {
					switch (node.type) {
						case "selector":
							node.nodes = node.map((item) => localizeNode$1(item));
							return node;
						case "class": return selectorParser$1.className({ value: exportScopedName(node.value, node.raws && node.raws.value ? node.raws.value : null, node) });
						case "id": return selectorParser$1.id({ value: exportScopedName(node.value, node.raws && node.raws.value ? node.raws.value : null, node) });
						case "attribute": if (node.attribute === "class" && node.operator === "=") return selectorParser$1.attribute({
							attribute: node.attribute,
							operator: node.operator,
							quoteMark: "'",
							value: exportScopedName(node.value, null, null)
						});
					}
					throw new Error(`${node.type} ("${node}") is not allowed in a :local block`);
				}
				function traverseNode$2(node) {
					switch (node.type) {
						case "pseudo": if (node.value === ":local") {
							if (node.nodes.length !== 1) throw new Error("Unexpected comma (\",\") in :local block");
							const selector$3 = localizeNode$1(node.first);
							selector$3.first.spaces = node.spaces;
							const nextNode = node.next();
							if (nextNode && nextNode.type === "combinator" && nextNode.value === " " && /\\[A-F0-9]{1,6}$/.test(selector$3.last.value)) selector$3.last.spaces.after = " ";
							node.replaceWith(selector$3);
							return;
						}
						case "root":
						case "selector": {
							node.each((item) => traverseNode$2(item));
							break;
						}
						case "id":
						case "class":
							if (exportGlobals) exports$1[node.value] = [node.value];
							break;
					}
					return node;
				}
				const importedNames = {};
				root$5.walkRules(/^:import\(.+\)$/, (rule$2) => {
					rule$2.walkDecls((decl$1) => {
						importedNames[decl$1.prop] = true;
					});
				});
				root$5.walkRules((rule$2) => {
					let parsedSelector = selectorParser$1().astSync(rule$2);
					rule$2.selector = traverseNode$2(parsedSelector.clone()).toString();
					rule$2.walkDecls(/^(composes|compose-with)$/i, (decl$1) => {
						const localNames = getSingleLocalNamesForComposes(parsedSelector, decl$1.parent);
						const multiple = decl$1.value.split(",");
						multiple.forEach((value) => {
							const classes = value.trim().split(/\s+/);
							classes.forEach((className$3) => {
								const global$1 = /^global\(([^)]+)\)$/.exec(className$3);
								if (global$1) localNames.forEach((exportedName) => {
									exports$1[exportedName].push(global$1[1]);
								});
								else if (hasOwnProperty$2.call(importedNames, className$3)) localNames.forEach((exportedName) => {
									exports$1[exportedName].push(className$3);
								});
								else if (hasOwnProperty$2.call(exports$1, className$3)) localNames.forEach((exportedName) => {
									exports$1[className$3].forEach((item) => {
										exports$1[exportedName].push(item);
									});
								});
								else throw decl$1.error(`referenced class name "${className$3}" in ${decl$1.prop} not found`);
							});
						});
						decl$1.remove();
					});
					rule$2.walkDecls((decl$1) => {
						if (!/:local\s*\((.+?)\)/.test(decl$1.value)) return;
						let tokens$3 = decl$1.value.split(/(,|'[^']*'|"[^"]*")/);
						tokens$3 = tokens$3.map((token$1, idx) => {
							if (idx === 0 || tokens$3[idx - 1] === ",") {
								let result = token$1;
								const localMatch = /:local\s*\((.+?)\)/.exec(token$1);
								if (localMatch) {
									const input = localMatch.input;
									const matchPattern = localMatch[0];
									const matchVal = localMatch[1];
									const newVal = exportScopedName(matchVal);
									result = input.replace(matchPattern, newVal);
								} else return token$1;
								return result;
							} else return token$1;
						});
						decl$1.value = tokens$3.join("");
					});
				});
				root$5.walkAtRules(/keyframes$/i, (atRule$1) => {
					const localMatch = /^\s*:local\s*\((.+?)\)\s*$/.exec(atRule$1.params);
					if (!localMatch) return;
					atRule$1.params = exportScopedName(localMatch[1]);
				});
				root$5.walkAtRules(/scope$/i, (atRule$1) => {
					if (atRule$1.params) atRule$1.params = atRule$1.params.split("to").map((item) => {
						const selector$3 = item.trim().slice(1, -1).trim();
						const localMatch = /^\s*:local\s*\((.+?)\)\s*$/.exec(selector$3);
						if (!localMatch) return `(${selector$3})`;
						let parsedSelector = selectorParser$1().astSync(selector$3);
						return `(${traverseNode$2(parsedSelector).toString()})`;
					}).join(" to ");
				});
				const exportedNames = Object.keys(exports$1);
				if (exportedNames.length > 0) {
					const exportRule = rule$1({ selector: ":export" });
					exportedNames.forEach((exportedName) => exportRule.append({
						prop: exportedName,
						value: exports$1[exportedName].join(" "),
						raws: { before: "\n  " }
					}));
					root$5.append(exportRule);
				}
			}
		};
	};
	plugin.postcss = true;
	plugin.generateScopedName = function(name, path$28) {
		const sanitisedPath = path$28.replace(/\.[^./\\]+$/, "").replace(/[\W_]+/g, "_").replace(/^_|_$/g, "");
		return `_${sanitisedPath}__${name}`.trim();
	};
	plugin.generateExportEntry = function(name, scopedName) {
		return {
			key: unescape$1(name),
			value: unescape$1(scopedName)
		};
	};
	module.exports = plugin;
} });

//#endregion
//#region node_modules/postcss-modules-values/src/index.js
var require_src$1 = __commonJS({ "node_modules/postcss-modules-values/src/index.js"(exports, module) {
	const ICSSUtils = require_src$5();
	const matchImports = /^(.+?|\([\s\S]+?\))\s+from\s+("[^"]*"|'[^']*'|[\w-]+)$/;
	const matchValueDefinition = /(?:\s+|^)([\w-]+):?(.*?)$/;
	const matchImport = /^([\w-]+)(?:\s+as\s+([\w-]+))?/;
	module.exports = (options) => {
		let importIndex = 0;
		const createImportedName = options && options.createImportedName || ((importName) => `i__const_${importName.replace(/\W/g, "_")}_${importIndex++}`);
		return {
			postcssPlugin: "postcss-modules-values",
			prepare(result) {
				const importAliases = [];
				const definitions = {};
				return { Once(root$5, postcss$3) {
					root$5.walkAtRules(/value/i, (atRule$1) => {
						const matches = atRule$1.params.match(matchImports);
						if (matches) {
							let [, aliases, path$28] = matches;
							if (definitions[path$28]) path$28 = definitions[path$28];
							const imports = aliases.replace(/^\(\s*([\s\S]+)\s*\)$/, "$1").split(/\s*,\s*/).map((alias) => {
								const tokens$3 = matchImport.exec(alias);
								if (tokens$3) {
									const [, theirName, myName = theirName] = tokens$3;
									const importedName = createImportedName(myName);
									definitions[myName] = importedName;
									return {
										theirName,
										importedName
									};
								} else throw new Error(`@import statement "${alias}" is invalid!`);
							});
							importAliases.push({
								path: path$28,
								imports
							});
							atRule$1.remove();
							return;
						}
						if (atRule$1.params.indexOf("@value") !== -1) result.warn("Invalid value definition: " + atRule$1.params);
						let [, key, value] = `${atRule$1.params}${atRule$1.raws.between}`.match(matchValueDefinition);
						const normalizedValue = value.replace(/\/\*((?!\*\/).*?)\*\//g, "");
						if (normalizedValue.length === 0) {
							result.warn("Invalid value definition: " + atRule$1.params);
							atRule$1.remove();
							return;
						}
						let isOnlySpace = /^\s+$/.test(normalizedValue);
						if (!isOnlySpace) value = value.trim();
						definitions[key] = ICSSUtils.replaceValueSymbols(value, definitions);
						atRule$1.remove();
					});
					if (!Object.keys(definitions).length) return;
					ICSSUtils.replaceSymbols(root$5, definitions);
					const exportDeclarations = Object.keys(definitions).map((key) => postcss$3.decl({
						value: definitions[key],
						prop: key,
						raws: { before: "\n  " }
					}));
					if (exportDeclarations.length > 0) {
						const exportRule = postcss$3.rule({
							selector: ":export",
							raws: { after: "\n" }
						});
						exportRule.append(exportDeclarations);
						root$5.prepend(exportRule);
					}
					importAliases.reverse().forEach(({ path: path$28, imports }) => {
						const importRule = postcss$3.rule({
							selector: `:import(${path$28})`,
							raws: { after: "\n" }
						});
						imports.forEach(({ theirName, importedName }) => {
							importRule.append({
								value: theirName,
								prop: importedName,
								raws: { before: "\n  " }
							});
						});
						root$5.prepend(importRule);
					});
				} };
			}
		};
	};
	module.exports.postcss = true;
} });

//#endregion
//#region node_modules/postcss-modules/build/behaviours.js
var require_behaviours = __commonJS({ "node_modules/postcss-modules/build/behaviours.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.behaviours = void 0;
	exports.getDefaultPlugins = getDefaultPlugins;
	exports.isValidBehaviour = isValidBehaviour;
	var _postcssModulesLocalByDefault = require_src$4();
	var _postcssModulesLocalByDefault2 = _interopRequireDefault$1(_postcssModulesLocalByDefault);
	var _postcssModulesExtractImports = require_src$3();
	var _postcssModulesExtractImports2 = _interopRequireDefault$1(_postcssModulesExtractImports);
	var _postcssModulesScope = require_src$2();
	var _postcssModulesScope2 = _interopRequireDefault$1(_postcssModulesScope);
	var _postcssModulesValues = require_src$1();
	var _postcssModulesValues2 = _interopRequireDefault$1(_postcssModulesValues);
	function _interopRequireDefault$1(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	const behaviours = exports.behaviours = {
		LOCAL: "local",
		GLOBAL: "global"
	};
	function getDefaultPlugins({ behaviour, generateScopedName: generateScopedName$1, exportGlobals }) {
		const scope$1 = (0, _postcssModulesScope2.default)({
			generateScopedName: generateScopedName$1,
			exportGlobals
		});
		const plugins = {
			[behaviours.LOCAL]: [
				_postcssModulesValues2.default,
				(0, _postcssModulesLocalByDefault2.default)({ mode: "local" }),
				_postcssModulesExtractImports2.default,
				scope$1
			],
			[behaviours.GLOBAL]: [
				_postcssModulesValues2.default,
				(0, _postcssModulesLocalByDefault2.default)({ mode: "global" }),
				_postcssModulesExtractImports2.default,
				scope$1
			]
		};
		return plugins[behaviour];
	}
	function isValidBehaviour(behaviour) {
		return Object.keys(behaviours).map((key) => behaviours[key]).indexOf(behaviour) > -1;
	}
} });

//#endregion
//#region node_modules/postcss-modules/build/index.js
var require_build = __commonJS({ "node_modules/postcss-modules/build/index.js"(exports, module) {
	var _postcss = require_postcss();
	var _postcss2 = _interopRequireDefault(_postcss);
	var _lodash = require_lodash();
	var _lodash2 = _interopRequireDefault(_lodash);
	var _genericNames = require_generic_names();
	var _genericNames2 = _interopRequireDefault(_genericNames);
	var _unquote = require_unquote();
	var _unquote2 = _interopRequireDefault(_unquote);
	var _parser$2 = require_parser$2();
	var _parser2 = _interopRequireDefault(_parser$2);
	var _loader = require_loader();
	var _loader2 = _interopRequireDefault(_loader);
	var _generateScopedName = require_generateScopedName();
	var _generateScopedName2 = _interopRequireDefault(_generateScopedName);
	var _saveJSON = require_saveJSON();
	var _saveJSON2 = _interopRequireDefault(_saveJSON);
	var _behaviours = require_behaviours();
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function _asyncToGenerator(fn) {
		return function() {
			var gen = fn.apply(this, arguments);
			return new Promise(function(resolve$5, reject) {
				function step(key, arg) {
					try {
						var info = gen[key](arg);
						var value = info.value;
					} catch (error) {
						reject(error);
						return;
					}
					if (info.done) resolve$5(value);
					else return Promise.resolve(value).then(function(value$1) {
						step("next", value$1);
					}, function(err) {
						step("throw", err);
					});
				}
				return step("next");
			});
		};
	}
	const PLUGIN_NAME = "postcss-modules";
	function getDefaultScopeBehaviour(opts) {
		if (opts.scopeBehaviour && (0, _behaviours.isValidBehaviour)(opts.scopeBehaviour)) return opts.scopeBehaviour;
		return _behaviours.behaviours.LOCAL;
	}
	function getScopedNameGenerator(opts) {
		const scopedNameGenerator = opts.generateScopedName || _generateScopedName2.default;
		if (typeof scopedNameGenerator === "function") return scopedNameGenerator;
		return (0, _genericNames2.default)(scopedNameGenerator, {
			context: process.cwd(),
			hashPrefix: opts.hashPrefix
		});
	}
	function getLoader(opts, plugins) {
		const root$5 = typeof opts.root === "undefined" ? "/" : opts.root;
		return typeof opts.Loader === "function" ? new opts.Loader(root$5, plugins) : new _loader2.default(root$5, plugins);
	}
	function isGlobalModule(globalModules, inputFile) {
		return globalModules.some((regex) => inputFile.match(regex));
	}
	function getDefaultPluginsList(opts, inputFile) {
		const globalModulesList = opts.globalModulePaths || null;
		const exportGlobals = opts.exportGlobals || false;
		const defaultBehaviour = getDefaultScopeBehaviour(opts);
		const generateScopedName$1 = getScopedNameGenerator(opts);
		if (globalModulesList && isGlobalModule(globalModulesList, inputFile)) return (0, _behaviours.getDefaultPlugins)({
			behaviour: _behaviours.behaviours.GLOBAL,
			generateScopedName: generateScopedName$1,
			exportGlobals
		});
		return (0, _behaviours.getDefaultPlugins)({
			behaviour: defaultBehaviour,
			generateScopedName: generateScopedName$1,
			exportGlobals
		});
	}
	function isOurPlugin(plugin$2) {
		return plugin$2.postcssPlugin === PLUGIN_NAME;
	}
	function dashesCamelCase(string$3) {
		return string$3.replace(/-+(\w)/g, (_, firstLetter) => firstLetter.toUpperCase());
	}
	module.exports = (opts = {}) => {
		return {
			postcssPlugin: PLUGIN_NAME,
			OnceExit(css, { result }) {
				return _asyncToGenerator(function* () {
					const getJSON = opts.getJSON || _saveJSON2.default;
					const inputFile = css.source.input.file;
					const pluginList = getDefaultPluginsList(opts, inputFile);
					const resultPluginIndex = result.processor.plugins.findIndex(function(plugin$2) {
						return isOurPlugin(plugin$2);
					});
					if (resultPluginIndex === -1) throw new Error("Plugin missing from options.");
					const earlierPlugins = result.processor.plugins.slice(0, resultPluginIndex);
					const loaderPlugins = [...earlierPlugins, ...pluginList];
					const loader = getLoader(opts, loaderPlugins);
					const fetcher = function fetcher$1(file$2, relativeTo, depTrace) {
						const unquoteFile = (0, _unquote2.default)(file$2);
						const resolvedResult = typeof opts.resolve === "function" && opts.resolve(unquoteFile);
						const resolvedFile = resolvedResult instanceof Promise ? resolvedResult : Promise.resolve(resolvedResult);
						return resolvedFile.then(function(f$1) {
							return loader.fetch.call(loader, `"${f$1 || unquoteFile}"`, relativeTo, depTrace);
						});
					};
					const parser$5 = new _parser2.default(fetcher);
					yield (0, _postcss2.default)([...pluginList, parser$5.plugin()]).process(css, { from: inputFile });
					const out = loader.finalSource;
					if (out) css.prepend(out);
					if (opts.localsConvention) {
						const isFunc = typeof opts.localsConvention === "function";
						parser$5.exportTokens = Object.entries(parser$5.exportTokens).reduce(function(tokens$3, [className$3, value]) {
							if (isFunc) {
								tokens$3[opts.localsConvention(className$3, value, inputFile)] = value;
								return tokens$3;
							}
							switch (opts.localsConvention) {
								case "camelCase":
									tokens$3[className$3] = value;
									tokens$3[(0, _lodash2.default)(className$3)] = value;
									break;
								case "camelCaseOnly":
									tokens$3[(0, _lodash2.default)(className$3)] = value;
									break;
								case "dashes":
									tokens$3[className$3] = value;
									tokens$3[dashesCamelCase(className$3)] = value;
									break;
								case "dashesOnly":
									tokens$3[dashesCamelCase(className$3)] = value;
									break;
							}
							return tokens$3;
						}, {});
					}
					result.messages.push({
						type: "export",
						plugin: "postcss-modules",
						exportTokens: parser$5.exportTokens
					});
					return getJSON(css.source.input.file, parser$5.exportTokens, result.opts.to);
				})();
			}
		};
	};
	module.exports.postcss = true;
} });

//#endregion
//#region node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js
var require_compiler_sfc_cjs = __commonJS({ "node_modules/@vue/compiler-sfc/dist/compiler-sfc.cjs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var CompilerDOM = require_compiler_dom();
	var sourceMap = require_source_map$1();
	var hash = require_hash_sum();
	var path$8 = __require("path");
	var compilerCore = require_compiler_core();
	var url = __require("url");
	var shared = require_shared();
	var CompilerSSR = require_compiler_ssr_cjs();
	var postcss = require_postcss();
	var selectorParser = require_dist$2();
	var merge$2 = require_merge_source_map();
	var MagicString = require_magic_string_cjs();
	var parser = require_lib$17();
	var estreeWalker = require_estree_walker();
	function _interopDefaultLegacy(e$2) {
		return e$2 && typeof e$2 === "object" && "default" in e$2 ? e$2["default"] : e$2;
	}
	function _interopNamespace(e$2) {
		if (e$2 && e$2.__esModule) return e$2;
		var n$4 = Object.create(null);
		if (e$2) Object.keys(e$2).forEach(function(k$1) {
			n$4[k$1] = e$2[k$1];
		});
		n$4["default"] = e$2;
		return Object.freeze(n$4);
	}
	var CompilerDOM__namespace = /* @__PURE__ */ _interopNamespace(CompilerDOM);
	var hash__default = /* @__PURE__ */ _interopDefaultLegacy(hash);
	var path__default = /* @__PURE__ */ _interopDefaultLegacy(path$8);
	var CompilerSSR__namespace = /* @__PURE__ */ _interopNamespace(CompilerSSR);
	var postcss__default = /* @__PURE__ */ _interopDefaultLegacy(postcss);
	var selectorParser__default = /* @__PURE__ */ _interopDefaultLegacy(selectorParser);
	var merge__default = /* @__PURE__ */ _interopDefaultLegacy(merge$2);
	var MagicString__default = /* @__PURE__ */ _interopDefaultLegacy(MagicString);
	const CSS_VARS_HELPER = `useCssVars`;
	const cssVarRE = /\bv-bind\(\s*(?:'([^']+)'|"([^"]+)"|([^'"][^)]*))\s*\)/g;
	function genCssVarsFromList(vars, id$4, isProd) {
		return `{\n  ${vars.map((key) => `"${genVarName(id$4, key, isProd)}": (${key})`).join(",\n  ")}\n}`;
	}
	function genVarName(id$4, raw, isProd) {
		if (isProd) return hash__default(id$4 + raw);
		else return `${id$4}-${raw.replace(/([^\w-])/g, "_")}`;
	}
	function parseCssVars(sfc) {
		const vars = [];
		sfc.styles.forEach((style) => {
			let match;
			while (match = cssVarRE.exec(style.content)) vars.push(match[1] || match[2] || match[3]);
		});
		return vars;
	}
	const cssVarsPlugin = (opts) => {
		const { id: id$4, isProd } = opts;
		return {
			postcssPlugin: "vue-sfc-vars",
			Declaration(decl$1) {
				if (cssVarRE.test(decl$1.value)) decl$1.value = decl$1.value.replace(cssVarRE, (_, $1, $2, $3) => {
					return `var(--${genVarName(id$4, $1 || $2 || $3, isProd)})`;
				});
			}
		};
	};
	cssVarsPlugin.postcss = true;
	function genCssVarsCode(vars, bindings, id$4, isProd) {
		const varsExp = genCssVarsFromList(vars, id$4, isProd);
		const exp$1 = CompilerDOM.createSimpleExpression(varsExp, false);
		const context = CompilerDOM.createTransformContext(CompilerDOM.createRoot([]), {
			prefixIdentifiers: true,
			inline: true,
			bindingMetadata: bindings
		});
		const transformed = CompilerDOM.processExpression(exp$1, context);
		const transformedString = transformed.type === 4 ? transformed.content : transformed.children.map((c$2) => {
			return typeof c$2 === "string" ? c$2 : c$2.content;
		}).join("");
		return `_${CSS_VARS_HELPER}(_ctx => (${transformedString}))`;
	}
	function genNormalScriptCssVarsCode(cssVars, bindings, id$4, isProd) {
		return `\nimport { ${CSS_VARS_HELPER} as _${CSS_VARS_HELPER} } from 'vue'\nconst __injectCSSVars__ = () => {\n${genCssVarsCode(cssVars, bindings, id$4, isProd)}}\nconst __setup__ = __default__.setup\n__default__.setup = __setup__\n  ? (props, ctx) => { __injectCSSVars__();return __setup__(props, ctx) }\n  : __injectCSSVars__\n`;
	}
	const hasWarned = {};
	function warnOnce(msg) {
		const isNodeProd = typeof process !== "undefined" && true;
		if (!isNodeProd && !hasWarned[msg]) {
			hasWarned[msg] = true;
			warn(msg);
		}
	}
	function warn(msg) {
		console.warn(`\x1b[1m\x1b[33m[@vue/compiler-sfc]\x1b[0m\x1b[33m ${msg}\x1b[0m\n`);
	}
	function warnExperimental(feature, rfcId) {
		warnOnce(`${feature} is still an experimental proposal.\nFollow its status at https://github.com/vuejs/rfcs/pull/${rfcId}.`);
		warnOnce("When using experimental features,\nit is recommended to pin your vue dependencies to exact versions to avoid breakage.");
	}
	const SFC_CACHE_MAX_SIZE = 500;
	const sourceToSFC = new (require_lru_cache())(SFC_CACHE_MAX_SIZE);
	function parse$4(source, { sourceMap: sourceMap$3 = true, filename = "anonymous.vue", sourceRoot = "", pad: pad$1 = false, compiler = CompilerDOM__namespace } = {}) {
		const sourceKey = source + sourceMap$3 + filename + sourceRoot + pad$1 + compiler.parse;
		const cache$3 = sourceToSFC.get(sourceKey);
		if (cache$3) return cache$3;
		const descriptor = {
			filename,
			source,
			template: null,
			script: null,
			scriptSetup: null,
			styles: [],
			customBlocks: [],
			cssVars: []
		};
		const errors$1 = [];
		const ast = compiler.parse(source, {
			isNativeTag: () => true,
			isPreTag: () => true,
			getTextMode: ({ tag: tag$3, props }, parent) => {
				if (!parent && tag$3 !== "template" || tag$3 === "template" && props.some((p$2) => p$2.type === 6 && p$2.name === "lang" && p$2.value && p$2.value.content && p$2.value.content !== "html")) return 2;
				else return 0;
			},
			onError: (e$2) => {
				errors$1.push(e$2);
			}
		});
		ast.children.forEach((node) => {
			if (node.type !== 1) return;
			if (!node.children.length && !hasSrc(node) && node.tag !== "template") return;
			switch (node.tag) {
				case "template":
					if (!descriptor.template) {
						const templateBlock = descriptor.template = createBlock(node, source, false);
						templateBlock.ast = node;
					} else errors$1.push(createDuplicateBlockError(node));
					break;
				case "script":
					const scriptBlock = createBlock(node, source, pad$1);
					const isSetup = !!scriptBlock.attrs.setup;
					if (isSetup && !descriptor.scriptSetup) {
						descriptor.scriptSetup = scriptBlock;
						break;
					}
					if (!isSetup && !descriptor.script) {
						descriptor.script = scriptBlock;
						break;
					}
					errors$1.push(createDuplicateBlockError(node, isSetup));
					break;
				case "style":
					const styleBlock = createBlock(node, source, pad$1);
					if (styleBlock.attrs.vars) errors$1.push(new SyntaxError("<style vars> has been replaced by a new proposal: https://github.com/vuejs/rfcs/pull/231"));
					descriptor.styles.push(styleBlock);
					break;
				default:
					descriptor.customBlocks.push(createBlock(node, source, pad$1));
					break;
			}
		});
		if (descriptor.scriptSetup) {
			if (descriptor.scriptSetup.src) {
				errors$1.push(new SyntaxError("<script setup> cannot use the \"src\" attribute because its syntax will be ambiguous outside of the component."));
				descriptor.scriptSetup = null;
			}
			if (descriptor.script && descriptor.script.src) {
				errors$1.push(new SyntaxError("<script> cannot use the \"src\" attribute when <script setup> is also present because they must be processed together."));
				descriptor.script = null;
			}
		}
		if (sourceMap$3) {
			const genMap = (block) => {
				if (block && !block.src) block.map = generateSourceMap(filename, source, block.content, sourceRoot, !pad$1 || block.type === "template" ? block.loc.start.line - 1 : 0);
			};
			genMap(descriptor.template);
			genMap(descriptor.script);
			descriptor.styles.forEach(genMap);
			descriptor.customBlocks.forEach(genMap);
		}
		descriptor.cssVars = parseCssVars(descriptor);
		if (descriptor.cssVars.length) warnExperimental(`v-bind() CSS variable injection`, 231);
		const result = {
			descriptor,
			errors: errors$1
		};
		sourceToSFC.set(sourceKey, result);
		return result;
	}
	function createDuplicateBlockError(node, isScriptSetup = false) {
		const err = new SyntaxError(`Single file component can contain only one <${node.tag}${isScriptSetup ? ` setup` : ``}> element`);
		err.loc = node.loc;
		return err;
	}
	function createBlock(node, source, pad$1) {
		const type = node.tag;
		let { start, end } = node.loc;
		let content = "";
		if (node.children.length) {
			start = node.children[0].loc.start;
			end = node.children[node.children.length - 1].loc.end;
			content = source.slice(start.offset, end.offset);
		}
		const loc = {
			source: content,
			start,
			end
		};
		const attrs = {};
		const block = {
			type,
			content,
			loc,
			attrs
		};
		if (pad$1) block.content = padContent(source, block, pad$1) + block.content;
		node.props.forEach((p$2) => {
			if (p$2.type === 6) {
				attrs[p$2.name] = p$2.value ? p$2.value.content || true : true;
				if (p$2.name === "lang") block.lang = p$2.value && p$2.value.content;
				else if (p$2.name === "src") block.src = p$2.value && p$2.value.content;
				else if (type === "style") {
					if (p$2.name === "scoped") block.scoped = true;
					else if (p$2.name === "module") block.module = attrs[p$2.name];
				} else if (type === "script" && p$2.name === "setup") block.setup = attrs.setup;
			}
		});
		return block;
	}
	const splitRE = /\r?\n/g;
	const emptyRE = /^(?:\/\/)?\s*$/;
	const replaceRE = /./g;
	function generateSourceMap(filename, source, generated, sourceRoot, lineOffset) {
		const map = new sourceMap.SourceMapGenerator({
			file: filename.replace(/\\/g, "/"),
			sourceRoot: sourceRoot.replace(/\\/g, "/")
		});
		map.setSourceContent(filename, source);
		generated.split(splitRE).forEach((line, index$1) => {
			if (!emptyRE.test(line)) {
				const originalLine = index$1 + 1 + lineOffset;
				const generatedLine = index$1 + 1;
				for (let i$6 = 0; i$6 < line.length; i$6++) if (!/\s/.test(line[i$6])) map.addMapping({
					source: filename,
					original: {
						line: originalLine,
						column: i$6
					},
					generated: {
						line: generatedLine,
						column: i$6
					}
				});
			}
		});
		return JSON.parse(map.toString());
	}
	function padContent(content, block, pad$1) {
		content = content.slice(0, block.loc.start.offset);
		if (pad$1 === "space") return content.replace(replaceRE, " ");
		else {
			const offset = content.split(splitRE).length;
			const padChar = block.type === "script" && !block.lang ? "//\n" : "\n";
			return Array(offset).join(padChar);
		}
	}
	function hasSrc(node) {
		return node.props.some((p$2) => {
			if (p$2.type !== 6) return false;
			return p$2.name === "src";
		});
	}
	function isRelativeUrl(url$1) {
		const firstChar = url$1.charAt(0);
		return firstChar === "." || firstChar === "~" || firstChar === "@";
	}
	const externalRE = /^https?:\/\//;
	function isExternalUrl(url$1) {
		return externalRE.test(url$1);
	}
	const dataUrlRE = /^\s*data:/i;
	function isDataUrl(url$1) {
		return dataUrlRE.test(url$1);
	}
	/**
	
	* Parses string url into URL object.
	
	*/
	function parseUrl(url$1) {
		const firstChar = url$1.charAt(0);
		if (firstChar === "~") {
			const secondChar = url$1.charAt(1);
			url$1 = url$1.slice(secondChar === "/" ? 2 : 1);
		}
		return parseUriParts(url$1);
	}
	/**
	
	* vuejs/component-compiler-utils#22 Support uri fragment in transformed require
	
	* @param urlString an url as a string
	
	*/
	function parseUriParts(urlString) {
		return url.parse(shared.isString(urlString) ? urlString : "", false, true);
	}
	const defaultAssetUrlOptions = {
		base: null,
		includeAbsolute: false,
		tags: {
			video: ["src", "poster"],
			source: ["src"],
			img: ["src"],
			image: ["xlink:href", "href"],
			use: ["xlink:href", "href"]
		}
	};
	const normalizeOptions$1 = (options) => {
		if (Object.keys(options).some((key) => shared.isArray(options[key]))) return {
			...defaultAssetUrlOptions,
			tags: options
		};
		return {
			...defaultAssetUrlOptions,
			...options
		};
	};
	const createAssetUrlTransformWithOptions = (options) => {
		return (node, context) => transformAssetUrl(node, context, options);
	};
	/**
	
	* A `@vue/compiler-core` plugin that transforms relative asset urls into
	
	* either imports or absolute urls.
	
	*
	
	* ``` js
	
	* // Before
	
	* createVNode('img', { src: './logo.png' })
	
	*
	
	* // After
	
	* import _imports_0 from './logo.png'
	
	* createVNode('img', { src: _imports_0 })
	
	* ```
	
	*/
	const transformAssetUrl = (node, context, options = defaultAssetUrlOptions) => {
		if (node.type === 1) {
			if (!node.props.length) return;
			const tags = options.tags || defaultAssetUrlOptions.tags;
			const attrs = tags[node.tag];
			const wildCardAttrs = tags["*"];
			if (!attrs && !wildCardAttrs) return;
			const assetAttrs = (attrs || []).concat(wildCardAttrs || []);
			node.props.forEach((attr, index$1) => {
				if (attr.type !== 6 || !assetAttrs.includes(attr.name) || !attr.value || isExternalUrl(attr.value.content) || isDataUrl(attr.value.content) || attr.value.content[0] === "#" || !options.includeAbsolute && !isRelativeUrl(attr.value.content)) return;
				const url$1 = parseUrl(attr.value.content);
				if (options.base && attr.value.content[0] === ".") {
					const base$1 = parseUrl(options.base);
					const protocol = base$1.protocol || "";
					const host = base$1.host ? protocol + "//" + base$1.host : "";
					const basePath = base$1.path || "/";
					attr.value.content = host + (path__default.posix || path__default).join(basePath, url$1.path + (url$1.hash || ""));
					return;
				}
				const exp$1 = getImportsExpressionExp(url$1.path, url$1.hash, attr.loc, context);
				node.props[index$1] = {
					type: 7,
					name: "bind",
					arg: compilerCore.createSimpleExpression(attr.name, true, attr.loc),
					exp: exp$1,
					modifiers: [],
					loc: attr.loc
				};
			});
		}
	};
	function getImportsExpressionExp(path$28, hash$2, loc, context) {
		if (path$28) {
			const existing = context.imports.find((i$6) => i$6.path === path$28);
			if (existing) return existing.exp;
			const name = `_imports_${context.imports.length}`;
			const exp$1 = compilerCore.createSimpleExpression(
				name,
				false,
				loc,
				2
				/* CAN_HOIST */
);
			context.imports.push({
				exp: exp$1,
				path: path$28
			});
			if (hash$2 && path$28) return context.hoist(compilerCore.createSimpleExpression(
				`${name} + '${hash$2}'`,
				false,
				loc,
				2
				/* CAN_HOIST */
));
			else return exp$1;
		} else return compilerCore.createSimpleExpression(
			`''`,
			false,
			loc,
			2
			/* CAN_HOIST */
);
	}
	const srcsetTags = ["img", "source"];
	const escapedSpaceCharacters = /( |\\t|\\n|\\f|\\r)+/g;
	const createSrcsetTransformWithOptions = (options) => {
		return (node, context) => transformSrcset(node, context, options);
	};
	const transformSrcset = (node, context, options = defaultAssetUrlOptions) => {
		if (node.type === 1) {
			if (srcsetTags.includes(node.tag) && node.props.length) node.props.forEach((attr, index$1) => {
				if (attr.name === "srcset" && attr.type === 6) {
					if (!attr.value) return;
					const value = attr.value.content;
					if (!value) return;
					const imageCandidates = value.split(",").map((s$3) => {
						const [url$1, descriptor] = s$3.replace(escapedSpaceCharacters, " ").trim().split(" ", 2);
						return {
							url: url$1,
							descriptor
						};
					});
					for (let i$6 = 0; i$6 < imageCandidates.length; i$6++) if (imageCandidates[i$6].url.trim().startsWith("data:")) {
						imageCandidates[i$6 + 1].url = imageCandidates[i$6].url + "," + imageCandidates[i$6 + 1].url;
						imageCandidates.splice(i$6, 1);
					}
					if (!options.includeAbsolute && !imageCandidates.some(({ url: url$1 }) => isRelativeUrl(url$1))) return;
					if (options.base) {
						const base$1 = options.base;
						const set = [];
						imageCandidates.forEach(({ url: url$1, descriptor }) => {
							descriptor = descriptor ? ` ${descriptor}` : ``;
							if (isRelativeUrl(url$1)) set.push((path__default.posix || path__default).join(base$1, url$1) + descriptor);
							else set.push(url$1 + descriptor);
						});
						attr.value.content = set.join(", ");
						return;
					}
					const compoundExpression = compilerCore.createCompoundExpression([], attr.loc);
					imageCandidates.forEach(({ url: url$1, descriptor }, index$2) => {
						if (!isExternalUrl(url$1) && !isDataUrl(url$1) && (options.includeAbsolute || isRelativeUrl(url$1))) {
							const { path: path$28 } = parseUrl(url$1);
							let exp$1;
							if (path$28) {
								const existingImportsIndex = context.imports.findIndex((i$6) => i$6.path === path$28);
								if (existingImportsIndex > -1) exp$1 = compilerCore.createSimpleExpression(
									`_imports_${existingImportsIndex}`,
									false,
									attr.loc,
									2
									/* CAN_HOIST */
);
								else {
									exp$1 = compilerCore.createSimpleExpression(
										`_imports_${context.imports.length}`,
										false,
										attr.loc,
										2
										/* CAN_HOIST */
);
									context.imports.push({
										exp: exp$1,
										path: path$28
									});
								}
								compoundExpression.children.push(exp$1);
							}
						} else {
							const exp$1 = compilerCore.createSimpleExpression(
								`"${url$1}"`,
								false,
								attr.loc,
								2
								/* CAN_HOIST */
);
							compoundExpression.children.push(exp$1);
						}
						const isNotLast = imageCandidates.length - 1 > index$2;
						if (descriptor && isNotLast) compoundExpression.children.push(` + '${descriptor}, ' + `);
						else if (descriptor) compoundExpression.children.push(` + '${descriptor}'`);
						else if (isNotLast) compoundExpression.children.push(` + ', ' + `);
					});
					const hoisted = context.hoist(compoundExpression);
					hoisted.constType = 2;
					node.props[index$1] = {
						type: 7,
						name: "bind",
						arg: compilerCore.createSimpleExpression("srcset", true, attr.loc),
						exp: hoisted,
						modifiers: [],
						loc: attr.loc
					};
				}
			});
		}
	};
	function preprocess({ source, filename, preprocessOptions }, preprocessor) {
		let res = "";
		let err = null;
		preprocessor.render(source, {
			filename,
			...preprocessOptions
		}, (_err, _res) => {
			if (_err) err = _err;
			res = _res;
		});
		if (err) throw err;
		return res;
	}
	function compileTemplate(options) {
		const { preprocessLang, preprocessCustomRequire } = options;
		const preprocessor = preprocessLang ? preprocessCustomRequire ? preprocessCustomRequire(preprocessLang) : require_consolidate()[preprocessLang] : false;
		if (preprocessor) try {
			return doCompileTemplate({
				...options,
				source: preprocess(options, preprocessor)
			});
		} catch (e$2) {
			return {
				code: `export default function render() {}`,
				source: options.source,
				tips: [],
				errors: [e$2]
			};
		}
		else if (preprocessLang) return {
			code: `export default function render() {}`,
			source: options.source,
			tips: [`Component ${options.filename} uses lang ${preprocessLang} for template. Please install the language preprocessor.`],
			errors: [`Component ${options.filename} uses lang ${preprocessLang} for template, however it is not installed.`]
		};
		else return doCompileTemplate(options);
	}
	function doCompileTemplate({ filename, id: id$4, scoped, inMap, source, ssr = false, ssrCssVars, isProd = false, compiler = ssr ? CompilerSSR__namespace : CompilerDOM__namespace, compilerOptions = {}, transformAssetUrls }) {
		const errors$1 = [];
		let nodeTransforms = [];
		if (shared.isObject(transformAssetUrls)) {
			const assetOptions = normalizeOptions$1(transformAssetUrls);
			nodeTransforms = [createAssetUrlTransformWithOptions(assetOptions), createSrcsetTransformWithOptions(assetOptions)];
		} else if (transformAssetUrls !== false) nodeTransforms = [transformAssetUrl, transformSrcset];
		if (ssr && !ssrCssVars) warnOnce("compileTemplate is called with `ssr: true` but no corresponding `cssVars` option.`.");
		if (!id$4) {
			warnOnce(`compileTemplate now requires the \`id\` option.\`.`);
			id$4 = "";
		}
		const shortId = id$4.replace(/^data-v-/, "");
		const longId = `data-v-${shortId}`;
		let { code: code$1, ast, preamble, map } = compiler.compile(source, {
			mode: "module",
			prefixIdentifiers: true,
			hoistStatic: true,
			cacheHandlers: true,
			ssrCssVars: ssr && ssrCssVars && ssrCssVars.length ? genCssVarsFromList(ssrCssVars, shortId, isProd) : "",
			scopeId: scoped ? longId : void 0,
			...compilerOptions,
			nodeTransforms: nodeTransforms.concat(compilerOptions.nodeTransforms || []),
			filename,
			sourceMap: true,
			onError: (e$2) => errors$1.push(e$2)
		});
		if (inMap) {
			if (map) map = mapLines(inMap, map);
			if (errors$1.length) patchErrors(errors$1, source, inMap);
		}
		return {
			code: code$1,
			ast,
			preamble,
			source,
			errors: errors$1,
			tips: [],
			map
		};
	}
	function mapLines(oldMap, newMap) {
		if (!oldMap) return newMap;
		if (!newMap) return oldMap;
		const oldMapConsumer = new sourceMap.SourceMapConsumer(oldMap);
		const newMapConsumer = new sourceMap.SourceMapConsumer(newMap);
		const mergedMapGenerator = new sourceMap.SourceMapGenerator();
		newMapConsumer.eachMapping((m$2) => {
			if (m$2.originalLine == null) return;
			const origPosInOldMap = oldMapConsumer.originalPositionFor({
				line: m$2.originalLine,
				column: m$2.originalColumn
			});
			if (origPosInOldMap.source == null) return;
			mergedMapGenerator.addMapping({
				generated: {
					line: m$2.generatedLine,
					column: m$2.generatedColumn
				},
				original: {
					line: origPosInOldMap.line,
					column: m$2.originalColumn
				},
				source: origPosInOldMap.source,
				name: origPosInOldMap.name
			});
		});
		const generator$1 = mergedMapGenerator;
		oldMapConsumer.sources.forEach((sourceFile) => {
			generator$1._sources.add(sourceFile);
			const sourceContent = oldMapConsumer.sourceContentFor(sourceFile);
			if (sourceContent != null) mergedMapGenerator.setSourceContent(sourceFile, sourceContent);
		});
		generator$1._sourceRoot = oldMap.sourceRoot;
		generator$1._file = oldMap.file;
		return generator$1.toJSON();
	}
	function patchErrors(errors$1, source, inMap) {
		const originalSource = inMap.sourcesContent[0];
		const offset = originalSource.indexOf(source);
		const lineOffset = originalSource.slice(0, offset).split(/\r?\n/).length - 1;
		errors$1.forEach((err) => {
			if (err.loc) {
				err.loc.start.line += lineOffset;
				err.loc.start.offset += offset;
				if (err.loc.end !== err.loc.start) {
					err.loc.end.line += lineOffset;
					err.loc.end.offset += offset;
				}
			}
		});
	}
	const trimPlugin = () => {
		return {
			postcssPlugin: "vue-sfc-trim",
			Once(root$5) {
				root$5.walk(({ type, raws }) => {
					if (type === "rule" || type === "atrule") {
						if (raws.before) raws.before = "\n";
						if ("after" in raws && raws.after) raws.after = "\n";
					}
				});
			}
		};
	};
	trimPlugin.postcss = true;
	const animationNameRE = /^(-\w+-)?animation-name$/;
	const animationRE = /^(-\w+-)?animation$/;
	const scopedPlugin = (id$4 = "") => {
		const keyframes = Object.create(null);
		const shortId = id$4.replace(/^data-v-/, "");
		return {
			postcssPlugin: "vue-sfc-scoped",
			Rule(rule$1) {
				processRule(id$4, rule$1);
			},
			AtRule(node) {
				if (/-?keyframes$/.test(node.name) && !node.params.endsWith(`-${shortId}`)) keyframes[node.params] = node.params = node.params + "-" + shortId;
			},
			OnceExit(root$5) {
				if (Object.keys(keyframes).length) root$5.walkDecls((decl$1) => {
					if (animationNameRE.test(decl$1.prop)) decl$1.value = decl$1.value.split(",").map((v$1) => keyframes[v$1.trim()] || v$1.trim()).join(",");
					if (animationRE.test(decl$1.prop)) decl$1.value = decl$1.value.split(",").map((v$1) => {
						const vals = v$1.trim().split(/\s+/);
						const i$6 = vals.findIndex((val) => keyframes[val]);
						if (i$6 !== -1) {
							vals.splice(i$6, 1, keyframes[vals[i$6]]);
							return vals.join(" ");
						} else return v$1;
					}).join(",");
				});
			}
		};
	};
	const processedRules = new WeakSet();
	function processRule(id$4, rule$1) {
		if (processedRules.has(rule$1)) return;
		processedRules.add(rule$1);
		rule$1.selector = selectorParser__default((selectorRoot) => {
			selectorRoot.each((selector$3) => {
				rewriteSelector(id$4, selector$3, selectorRoot);
			});
		}).processSync(rule$1.selector);
	}
	function rewriteSelector(id$4, selector$3, selectorRoot, slotted = false) {
		let node = null;
		let shouldInject = true;
		selector$3.each((n$4) => {
			if (n$4.type === "combinator" && (n$4.value === ">>>" || n$4.value === "/deep/")) {
				n$4.value = " ";
				n$4.spaces.before = n$4.spaces.after = "";
				warn("the >>> and /deep/ combinators have been deprecated. Use :deep() instead.");
				return false;
			}
			if (n$4.type === "pseudo") {
				const { value } = n$4;
				if (value === ":deep" || value === "::v-deep") {
					if (n$4.nodes.length) {
						let last$2 = n$4;
						n$4.nodes[0].each((ss) => {
							selector$3.insertAfter(last$2, ss);
							last$2 = ss;
						});
						const prev = selector$3.at(selector$3.index(n$4) - 1);
						if (!prev || !isSpaceCombinator(prev)) selector$3.insertAfter(n$4, selectorParser__default.combinator({ value: " " }));
						selector$3.removeChild(n$4);
					} else {
						warn("::v-deep usage as a combinator has been deprecated. Use :deep(<inner-selector>) instead.");
						const prev = selector$3.at(selector$3.index(n$4) - 1);
						if (prev && isSpaceCombinator(prev)) selector$3.removeChild(prev);
						selector$3.removeChild(n$4);
					}
					return false;
				}
				if (value === ":slotted" || value === "::v-slotted") {
					rewriteSelector(
						id$4,
						n$4.nodes[0],
						selectorRoot,
						true
						/* slotted */
);
					let last$2 = n$4;
					n$4.nodes[0].each((ss) => {
						selector$3.insertAfter(last$2, ss);
						last$2 = ss;
					});
					selector$3.removeChild(n$4);
					shouldInject = false;
					return false;
				}
				if (value === ":global" || value === "::v-global") {
					selectorRoot.insertAfter(selector$3, n$4.nodes[0]);
					selectorRoot.removeChild(selector$3);
					return false;
				}
			}
			if (n$4.type !== "pseudo" && n$4.type !== "combinator") node = n$4;
		});
		if (node) node.spaces.after = "";
		else selector$3.first.spaces.before = "";
		if (shouldInject) {
			const idToAdd = slotted ? id$4 + "-s" : id$4;
			selector$3.insertAfter(
				// If node is null it means we need to inject [id] at the start
				// insertAfter can handle `null` here
				node,
				selectorParser__default.attribute({
					attribute: idToAdd,
					value: idToAdd,
					raws: {},
					quoteMark: `"`
				})
);
		}
	}
	function isSpaceCombinator(node) {
		return node.type === "combinator" && /^\s+$/.test(node.value);
	}
	scopedPlugin.postcss = true;
	const scss = (source, map, options, load$2 = __require) => {
		const nodeSass = load$2("sass");
		const finalOptions = {
			...options,
			data: getSource$1(source, options.filename, options.additionalData),
			file: options.filename,
			outFile: options.filename,
			sourceMap: !!map
		};
		try {
			const result = nodeSass.renderSync(finalOptions);
			const dependencies = result.stats.includedFiles;
			if (map) return {
				code: result.css.toString(),
				map: merge__default(map, JSON.parse(result.map.toString())),
				errors: [],
				dependencies
			};
			return {
				code: result.css.toString(),
				errors: [],
				dependencies
			};
		} catch (e$2) {
			return {
				code: "",
				errors: [e$2],
				dependencies: []
			};
		}
	};
	const sass = (source, map, options, load$2) => scss(source, map, {
		...options,
		indentedSyntax: true
	}, load$2);
	const less = (source, map, options, load$2 = __require) => {
		const nodeLess = load$2("less");
		let result;
		let error = null;
		nodeLess.render(getSource$1(source, options.filename, options.additionalData), {
			...options,
			syncImport: true
		}, (err, output) => {
			error = err;
			result = output;
		});
		if (error) return {
			code: "",
			errors: [error],
			dependencies: []
		};
		const dependencies = result.imports;
		if (map) return {
			code: result.css.toString(),
			map: merge__default(map, result.map),
			errors: [],
			dependencies
		};
		return {
			code: result.css.toString(),
			errors: [],
			dependencies
		};
	};
	const styl = (source, map, options, load$2 = __require) => {
		const nodeStylus = load$2("stylus");
		try {
			const ref = nodeStylus(source);
			Object.keys(options).forEach((key) => ref.set(key, options[key]));
			if (map) ref.set("sourcemap", {
				inline: false,
				comment: false
			});
			const result = ref.render();
			const dependencies = ref.deps();
			if (map) return {
				code: result,
				map: merge__default(map, ref.sourcemap),
				errors: [],
				dependencies
			};
			return {
				code: result,
				errors: [],
				dependencies
			};
		} catch (e$2) {
			return {
				code: "",
				errors: [e$2],
				dependencies: []
			};
		}
	};
	function getSource$1(source, filename, additionalData) {
		if (!additionalData) return source;
		if (shared.isFunction(additionalData)) return additionalData(source, filename);
		return additionalData + source;
	}
	const processors = {
		less,
		sass,
		scss,
		styl,
		stylus: styl
	};
	function compileStyle(options) {
		return doCompileStyle({
			...options,
			isAsync: false
		});
	}
	function compileStyleAsync(options) {
		return doCompileStyle({
			...options,
			isAsync: true
		});
	}
	function doCompileStyle(options) {
		const { filename, id: id$4, scoped = false, trim: trim$1 = true, isProd = false, modules = false, modulesOptions = {}, preprocessLang, postcssOptions, postcssPlugins } = options;
		const preprocessor = preprocessLang && processors[preprocessLang];
		const preProcessedSource = preprocessor && preprocess$1(options, preprocessor);
		const map = preProcessedSource ? preProcessedSource.map : options.inMap || options.map;
		const source = preProcessedSource ? preProcessedSource.code : options.source;
		const shortId = id$4.replace(/^data-v-/, "");
		const longId = `data-v-${shortId}`;
		const plugins = (postcssPlugins || []).slice();
		plugins.unshift(cssVarsPlugin({
			id: shortId,
			isProd
		}));
		if (trim$1) plugins.push(trimPlugin());
		if (scoped) plugins.push(scopedPlugin(longId));
		let cssModules;
		if (modules) {
			if (!options.isAsync) throw new Error("[@vue/compiler-sfc] `modules` option can only be used with compileStyleAsync().");
			plugins.push(require_build()({
				...modulesOptions,
				getJSON: (_cssFileName, json) => {
					cssModules = json;
				}
			}));
		}
		const postCSSOptions = {
			...postcssOptions,
			to: filename,
			from: filename
		};
		if (map) postCSSOptions.map = {
			inline: false,
			annotation: false,
			prev: map
		};
		let result;
		let code$1;
		let outMap;
		const dependencies = new Set(preProcessedSource ? preProcessedSource.dependencies : []);
		dependencies.delete(filename);
		const errors$1 = [];
		if (preProcessedSource && preProcessedSource.errors.length) errors$1.push(...preProcessedSource.errors);
		const recordPlainCssDependencies = (messages) => {
			messages.forEach((msg) => {
				if (msg.type === "dependency") dependencies.add(msg.file);
			});
			return dependencies;
		};
		try {
			result = postcss__default(plugins).process(source, postCSSOptions);
			if (options.isAsync) return result.then((result$1) => ({
				code: result$1.css || "",
				map: result$1.map && result$1.map.toJSON(),
				errors: errors$1,
				modules: cssModules,
				rawResult: result$1,
				dependencies: recordPlainCssDependencies(result$1.messages)
			})).catch((error) => ({
				code: "",
				map: void 0,
				errors: [...errors$1, error],
				rawResult: void 0,
				dependencies
			}));
			recordPlainCssDependencies(result.messages);
			code$1 = result.css;
			outMap = result.map;
		} catch (e$2) {
			errors$1.push(e$2);
		}
		return {
			code: code$1 || ``,
			map: outMap && outMap.toJSON(),
			errors: errors$1,
			rawResult: result,
			dependencies
		};
	}
	function preprocess$1(options, preprocessor) {
		return preprocessor(options.source, options.inMap || options.map, {
			filename: options.filename,
			...options.preprocessOptions
		}, options.preprocessCustomRequire);
	}
	const defaultExportRE = /((?:^|\n|;)\s*)export(\s*)default/;
	const namedDefaultExportRE = /((?:^|\n|;)\s*)export(.+)as(\s*)default/;
	const exportDefaultClassRE = /((?:^|\n|;)\s*)export\s+default\s+class\s+([\w$]+)/;
	/**
	
	* Utility for rewriting `export default` in a script block into a variable
	
	* declaration so that we can inject things into it
	
	*/
	function rewriteDefault(input, as, parserPlugins) {
		if (!hasDefaultExport(input)) return input + `\nconst ${as} = {}`;
		let replaced;
		const classMatch = input.match(exportDefaultClassRE);
		if (classMatch) replaced = input.replace(exportDefaultClassRE, "$1class $2") + `\nconst ${as} = ${classMatch[2]}`;
		else replaced = input.replace(defaultExportRE, `$1const ${as} =`);
		if (!hasDefaultExport(replaced)) return replaced;
		const s$3 = new MagicString__default(input);
		const ast = parser.parse(input, {
			sourceType: "module",
			plugins: parserPlugins
		}).program.body;
		ast.forEach((node) => {
			if (node.type === "ExportDefaultDeclaration") s$3.overwrite(node.start, node.declaration.start, `const ${as} = `);
			if (node.type === "ExportNamedDeclaration") node.specifiers.forEach((specifier) => {
				if (specifier.type === "ExportSpecifier" && specifier.exported.type === "Identifier" && specifier.exported.name === "default") {
					const end = specifier.end;
					s$3.overwrite(specifier.start, input.charAt(end) === "," ? end + 1 : end, ``);
					s$3.append(`\nconst ${as} = ${specifier.local.name}`);
				}
			});
		});
		return s$3.toString();
	}
	function hasDefaultExport(input) {
		return defaultExportRE.test(input) || namedDefaultExportRE.test(input);
	}
	const DEFINE_PROPS = "defineProps";
	const DEFINE_EMIT = "defineEmit";
	/**
	
	* Compile `<script setup>`
	
	* It requires the whole SFC descriptor because we need to handle and merge
	
	* normal `<script>` + `<script setup>` if both are present.
	
	*/
	function compileScript(sfc, options) {
		const { script, scriptSetup, source, filename } = sfc;
		if (scriptSetup) warnExperimental(`<script setup>`, 227);
		if (!options) options = { id: "" };
		if (!options.id) warnOnce("compileScript now requires passing the `id` option.\nUpgrade your vite or vue-loader version for compatibility with the latest experimental proposals.");
		const scopeId = options.id ? options.id.replace(/^data-v-/, "") : "";
		const cssVars = sfc.cssVars;
		const hasInheritAttrsFlag = sfc.template && sfc.template.attrs["inherit-attrs"] === "false";
		const scriptLang = script && script.lang;
		const scriptSetupLang = scriptSetup && scriptSetup.lang;
		const isTS = scriptLang === "ts" || scriptSetupLang === "ts";
		const plugins = [...shared.babelParserDefaultPlugins, "jsx"];
		if (options.babelParserPlugins) plugins.push(...options.babelParserPlugins);
		if (isTS) plugins.push("typescript", "decorators-legacy");
		if (!scriptSetup) {
			if (!script) throw new Error(`[@vue/compiler-sfc] SFC contains no <script> tags.`);
			if (scriptLang && scriptLang !== "ts") return script;
			try {
				const scriptAst$1 = parser.parse(script.content, {
					plugins,
					sourceType: "module"
				}).program.body;
				const bindings = analyzeScriptBindings(scriptAst$1);
				const needRewrite = cssVars.length || hasInheritAttrsFlag;
				let content = script.content;
				if (needRewrite) {
					content = rewriteDefault(content, `__default__`, plugins);
					if (cssVars.length) content += genNormalScriptCssVarsCode(cssVars, bindings, scopeId, !!options.isProd);
					if (hasInheritAttrsFlag) content += `__default__.inheritAttrs = false`;
					content += `\nexport default __default__`;
				}
				return {
					...script,
					content,
					bindings,
					scriptAst: scriptAst$1
				};
			} catch (e$2) {
				return script;
			}
		}
		if (script && scriptLang !== scriptSetupLang) throw new Error(`[@vue/compiler-sfc] <script> and <script setup> must have the same language type.`);
		if (scriptSetupLang && scriptSetupLang !== "ts") return scriptSetup;
		const defaultTempVar = `__default__`;
		const bindingMetadata = {};
		const helperImports = new Set();
		const userImports = Object.create(null);
		const userImportAlias = Object.create(null);
		const setupBindings = Object.create(null);
		const refBindings = Object.create(null);
		const refIdentifiers = new Set();
		const enableRefSugar = options.refSugar !== false;
		let defaultExport;
		let hasDefinePropsCall = false;
		let hasDefineEmitCall = false;
		let propsRuntimeDecl;
		let propsTypeDecl;
		let propsIdentifier;
		let emitRuntimeDecl;
		let emitTypeDecl;
		let emitIdentifier;
		let hasAwait = false;
		let hasInlinedSsrRenderFn = false;
		const typeDeclaredProps = {};
		const typeDeclaredEmits = new Set();
		const declaredTypes = {};
		const s$3 = new MagicString__default(source);
		const startOffset = scriptSetup.loc.start.offset;
		const endOffset = scriptSetup.loc.end.offset;
		const scriptStartOffset = script && script.loc.start.offset;
		const scriptEndOffset = script && script.loc.end.offset;
		function helper(key) {
			helperImports.add(key);
			return `_${key}`;
		}
		function parse$17(input, options$1, offset) {
			try {
				return parser.parse(input, options$1).program.body;
			} catch (e$2) {
				e$2.message = `[@vue/compiler-sfc] ${e$2.message}\n\n${sfc.filename}\n${shared.generateCodeFrame(source, e$2.pos + offset, e$2.pos + offset + 1)}`;
				throw e$2;
			}
		}
		function error(msg, node, end = node.end + startOffset) {
			throw new Error(`[@vue/compiler-sfc] ${msg}\n\n${sfc.filename}\n${shared.generateCodeFrame(source, node.start + startOffset, end)}`);
		}
		function registerUserImport(source$1, local, imported, isType$3) {
			if (source$1 === "vue" && imported) userImportAlias[imported] = local;
			userImports[local] = {
				isType: isType$3,
				imported: imported || "default",
				source: source$1
			};
		}
		function processDefineProps(node) {
			if (isCallOf(node, DEFINE_PROPS)) {
				if (hasDefinePropsCall) error(`duplicate ${DEFINE_PROPS}() call`, node);
				hasDefinePropsCall = true;
				propsRuntimeDecl = node.arguments[0];
				if (node.typeParameters) {
					if (propsRuntimeDecl) error(`${DEFINE_PROPS}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node);
					const typeArg = node.typeParameters.params[0];
					if (typeArg.type === "TSTypeLiteral") propsTypeDecl = typeArg;
					else error(`type argument passed to ${DEFINE_PROPS}() must be a literal type.`, typeArg);
				}
				return true;
			}
			return false;
		}
		function processDefineEmit(node) {
			if (isCallOf(node, DEFINE_EMIT)) {
				if (hasDefineEmitCall) error(`duplicate ${DEFINE_EMIT}() call`, node);
				hasDefineEmitCall = true;
				emitRuntimeDecl = node.arguments[0];
				if (node.typeParameters) {
					if (emitRuntimeDecl) error(`${DEFINE_EMIT}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node);
					const typeArg = node.typeParameters.params[0];
					if (typeArg.type === "TSFunctionType" || typeArg.type === "TSUnionType") emitTypeDecl = typeArg;
					else error(`type argument passed to ${DEFINE_EMIT}() must be a function type or a union of function types.`, typeArg);
				}
				return true;
			}
			return false;
		}
		function checkInvalidScopeReference(node, method) {
			if (!node) return;
			walkIdentifiers(node, (id$4) => {
				if (setupBindings[id$4.name]) error(`\`${method}()\` in <script setup> cannot reference locally declared variables because it will be hoisted outside of the setup() function. If your component options requires initialization in the module scope, use a separate normal <script> to export the options instead.`, id$4);
			});
		}
		function processRefExpression(exp$1, statement$2) {
			if (exp$1.type === "AssignmentExpression") {
				const { left, right } = exp$1;
				if (left.type === "Identifier") {
					registerRefBinding(left);
					s$3.prependRight(right.start + startOffset, `${helper("ref")}(`);
					s$3.appendLeft(right.end + startOffset, ")");
				} else if (left.type === "ObjectPattern") {
					for (let i$6 = left.start; i$6 > 0; i$6--) {
						const char = source[i$6 + startOffset];
						if (char === "(") {
							s$3.remove(i$6 + startOffset, i$6 + startOffset + 1);
							break;
						}
					}
					for (let i$6 = left.end; i$6 > 0; i$6++) {
						const char = source[i$6 + startOffset];
						if (char === ")") {
							s$3.remove(i$6 + startOffset, i$6 + startOffset + 1);
							break;
						}
					}
					processRefObjectPattern(left, statement$2);
				} else if (left.type === "ArrayPattern") processRefArrayPattern(left, statement$2);
			} else if (exp$1.type === "SequenceExpression") exp$1.expressions.forEach((e$2) => processRefExpression(e$2, statement$2));
			else if (exp$1.type === "Identifier") {
				registerRefBinding(exp$1);
				s$3.appendLeft(exp$1.end + startOffset, ` = ${helper("ref")}()`);
			} else error(`ref: statements can only contain assignment expressions.`, exp$1);
		}
		function registerRefBinding(id$4) {
			if (id$4.name[0] === "$") error(`ref variable identifiers cannot start with $.`, id$4);
			refBindings[id$4.name] = setupBindings[id$4.name] = "setup-ref";
			refIdentifiers.add(id$4);
		}
		function processRefObjectPattern(pattern, statement$2) {
			for (const p$2 of pattern.properties) {
				let nameId;
				if (p$2.type === "ObjectProperty") {
					if (p$2.key.start === p$2.value.start) {
						nameId = p$2.key;
						s$3.appendLeft(nameId.end + startOffset, `: __${nameId.name}`);
						if (p$2.value.type === "AssignmentPattern") refIdentifiers.add(p$2.value.left);
					} else if (p$2.value.type === "Identifier") {
						nameId = p$2.value;
						s$3.prependRight(nameId.start + startOffset, `__`);
					} else if (p$2.value.type === "ObjectPattern") processRefObjectPattern(p$2.value, statement$2);
					else if (p$2.value.type === "ArrayPattern") processRefArrayPattern(p$2.value, statement$2);
					else if (p$2.value.type === "AssignmentPattern") {
						nameId = p$2.value.left;
						s$3.prependRight(nameId.start + startOffset, `__`);
					}
				} else {
					nameId = p$2.argument;
					s$3.prependRight(nameId.start + startOffset, `__`);
				}
				if (nameId) {
					registerRefBinding(nameId);
					s$3.appendLeft(statement$2.end + startOffset, `\nconst ${nameId.name} = ${helper("ref")}(__${nameId.name});`);
				}
			}
		}
		function processRefArrayPattern(pattern, statement$2) {
			for (const e$2 of pattern.elements) {
				if (!e$2) continue;
				let nameId;
				if (e$2.type === "Identifier") nameId = e$2;
				else if (e$2.type === "AssignmentPattern") nameId = e$2.left;
				else if (e$2.type === "RestElement") nameId = e$2.argument;
				else if (e$2.type === "ObjectPattern") processRefObjectPattern(e$2, statement$2);
				else if (e$2.type === "ArrayPattern") processRefArrayPattern(e$2, statement$2);
				if (nameId) {
					registerRefBinding(nameId);
					s$3.prependRight(nameId.start + startOffset, `__`);
					s$3.appendLeft(statement$2.end + startOffset, `\nconst ${nameId.name} = ${helper("ref")}(__${nameId.name});`);
				}
			}
		}
		let scriptAst;
		if (script) {
			scriptAst = parse$17(script.content, {
				plugins,
				sourceType: "module"
			}, scriptStartOffset);
			for (const node of scriptAst) if (node.type === "ImportDeclaration") for (const specifier of node.specifiers) {
				const imported = specifier.type === "ImportSpecifier" && specifier.imported.type === "Identifier" && specifier.imported.name;
				registerUserImport(node.source.value, specifier.local.name, imported, node.importKind === "type");
			}
			else if (node.type === "ExportDefaultDeclaration") {
				defaultExport = node;
				const start = node.start + scriptStartOffset;
				s$3.overwrite(start, start + `export default`.length, `const ${defaultTempVar} =`);
			} else if (node.type === "ExportNamedDeclaration" && node.specifiers) {
				const defaultSpecifier = node.specifiers.find((s$4) => s$4.exported.type === "Identifier" && s$4.exported.name === "default");
				if (defaultSpecifier) {
					defaultExport = node;
					if (node.specifiers.length > 1) s$3.remove(defaultSpecifier.start + scriptStartOffset, defaultSpecifier.end + scriptStartOffset);
					else s$3.remove(node.start + scriptStartOffset, node.end + scriptStartOffset);
					if (node.source) s$3.prepend(`import { ${defaultSpecifier.local.name} as ${defaultTempVar} } from '${node.source.value}'\n`);
					else s$3.append(`\nconst ${defaultTempVar} = ${defaultSpecifier.local.name}\n`);
				}
			}
		}
		const scriptSetupAst = parse$17(scriptSetup.content, {
			plugins: [...plugins, "topLevelAwait"],
			sourceType: "module"
		}, startOffset);
		for (const node of scriptSetupAst) {
			const start = node.start + startOffset;
			let end = node.end + startOffset;
			if (node.trailingComments && node.trailingComments.length > 0) {
				const lastCommentNode = node.trailingComments[node.trailingComments.length - 1];
				end = lastCommentNode.end + startOffset;
			}
			while (end <= source.length) {
				if (!/\s/.test(source.charAt(end))) break;
				end++;
			}
			if (node.type === "LabeledStatement" && node.label.name === "ref" && node.body.type === "ExpressionStatement") if (enableRefSugar) {
				warnExperimental(`ref: sugar`, 228);
				s$3.overwrite(node.label.start + startOffset, node.body.start + startOffset, "const ");
				processRefExpression(node.body.expression, node);
			} else error(`ref: sugar needs to be explicitly enabled via vite or vue-loader options.`, node);
			if (node.type === "ImportDeclaration") {
				s$3.move(start, end, 0);
				let removed = 0;
				const removeSpecifier = (i$6) => {
					const removeLeft = i$6 > removed;
					removed++;
					const current = node.specifiers[i$6];
					const next = node.specifiers[i$6 + 1];
					s$3.remove(removeLeft ? node.specifiers[i$6 - 1].end + startOffset : current.start + startOffset, next && !removeLeft ? next.start + startOffset : current.end + startOffset);
				};
				for (let i$6 = 0; i$6 < node.specifiers.length; i$6++) {
					const specifier = node.specifiers[i$6];
					const local = specifier.local.name;
					const imported = specifier.type === "ImportSpecifier" && specifier.imported.type === "Identifier" && specifier.imported.name;
					const source$1 = node.source.value;
					const existing = userImports[local];
					if (source$1 === "vue" && (imported === DEFINE_PROPS || imported === DEFINE_EMIT)) removeSpecifier(i$6);
					else if (existing) if (existing.source === source$1 && existing.imported === imported) removeSpecifier(i$6);
					else error(`different imports aliased to same local name.`, specifier);
					else registerUserImport(source$1, local, imported, node.importKind === "type");
				}
				if (node.specifiers.length && removed === node.specifiers.length) s$3.remove(node.start + startOffset, node.end + startOffset);
			}
			if (node.type === "ExpressionStatement" && (processDefineProps(node.expression) || processDefineEmit(node.expression))) s$3.remove(node.start + startOffset, node.end + startOffset);
			if (node.type === "VariableDeclaration" && !node.declare) {
				for (const decl$1 of node.declarations) if (decl$1.init) {
					const isDefineProps = processDefineProps(decl$1.init);
					if (isDefineProps) propsIdentifier = scriptSetup.content.slice(decl$1.id.start, decl$1.id.end);
					const isDefineEmit = processDefineEmit(decl$1.init);
					if (isDefineEmit) emitIdentifier = scriptSetup.content.slice(decl$1.id.start, decl$1.id.end);
					if (isDefineProps || isDefineEmit) if (node.declarations.length === 1) s$3.remove(node.start + startOffset, node.end + startOffset);
					else s$3.remove(decl$1.start + startOffset, decl$1.end + startOffset);
				}
			}
			if ((node.type === "VariableDeclaration" || node.type === "FunctionDeclaration" || node.type === "ClassDeclaration") && !node.declare) walkDeclaration(node, setupBindings, userImportAlias);
			if (node.type === "VariableDeclaration" && node.declare) s$3.remove(start, end);
			if (node.type.startsWith("TS") || node.type === "ExportNamedDeclaration" && node.exportKind === "type") {
				recordType(node, declaredTypes);
				s$3.move(start, end, 0);
			}
			if (node.type === "VariableDeclaration" && !node.declare || node.type.endsWith("Statement")) estreeWalker.walk(node, { enter(node$1) {
				if (isFunction$6(node$1)) this.skip();
				if (node$1.type === "AwaitExpression") hasAwait = true;
			} });
			if (node.type === "ExportNamedDeclaration" && node.exportKind !== "type" || node.type === "ExportAllDeclaration" || node.type === "ExportDefaultDeclaration") error("<script setup> cannot contain ES module exports. If you are using a previous version of <script setup>, please consult the updated RFC at https://github.com/vuejs/rfcs/pull/227.", node);
		}
		if (enableRefSugar && Object.keys(refBindings).length) {
			for (const node of scriptSetupAst) if (node.type !== "ImportDeclaration") walkIdentifiers(node, (id$4, parent, parentStack) => {
				if (refBindings[id$4.name] && !refIdentifiers.has(id$4)) if (isStaticProperty(parent) && parent.shorthand) {
					if (!parent.inPattern || isInDestructureAssignment(parent, parentStack)) s$3.appendLeft(id$4.end + startOffset, `: ${id$4.name}.value`);
				} else s$3.appendLeft(id$4.end + startOffset, ".value");
				else if (id$4.name[0] === "$" && refBindings[id$4.name.slice(1)]) s$3.remove(id$4.start + startOffset, id$4.start + startOffset + 1);
			});
		}
		if (propsTypeDecl) extractRuntimeProps(propsTypeDecl, typeDeclaredProps, declaredTypes);
		if (emitTypeDecl) extractRuntimeEmits(emitTypeDecl, typeDeclaredEmits);
		checkInvalidScopeReference(propsRuntimeDecl, DEFINE_PROPS);
		checkInvalidScopeReference(emitRuntimeDecl, DEFINE_PROPS);
		if (script) if (startOffset < scriptStartOffset) {
			s$3.remove(0, startOffset);
			s$3.remove(endOffset, scriptStartOffset);
			s$3.remove(scriptEndOffset, source.length);
		} else {
			s$3.remove(0, scriptStartOffset);
			s$3.remove(scriptEndOffset, startOffset);
			s$3.remove(endOffset, source.length);
		}
		else {
			s$3.remove(0, startOffset);
			s$3.remove(endOffset, source.length);
		}
		if (scriptAst) Object.assign(bindingMetadata, analyzeScriptBindings(scriptAst));
		if (propsRuntimeDecl) for (const key of getObjectOrArrayExpressionKeys(propsRuntimeDecl)) bindingMetadata[key] = "props";
		for (const key in typeDeclaredProps) bindingMetadata[key] = "props";
		for (const [key, { isType: isType$3, imported, source: source$1 }] of Object.entries(userImports)) {
			if (isType$3) continue;
			bindingMetadata[key] = imported === "default" && source$1.endsWith(".vue") || source$1 === "vue" ? "setup-const" : "setup-maybe-ref";
		}
		for (const key in setupBindings) bindingMetadata[key] = setupBindings[key];
		if (cssVars.length) {
			helperImports.add(CSS_VARS_HELPER);
			helperImports.add("unref");
			s$3.prependRight(startOffset, `\n${genCssVarsCode(cssVars, bindingMetadata, scopeId, !!options.isProd)}\n`);
		}
		let args = `__props`;
		if (propsTypeDecl) args += `: ${scriptSetup.content.slice(propsTypeDecl.start, propsTypeDecl.end)}`;
		if (propsIdentifier) s$3.prependRight(startOffset, `\nconst ${propsIdentifier} = __props`);
		if (emitIdentifier) {
			args += emitIdentifier === `emit` ? `, { emit }` : `, { emit: ${emitIdentifier} }`;
			if (emitTypeDecl) args += `: {
        emit: (${scriptSetup.content.slice(emitTypeDecl.start, emitTypeDecl.end)}),
        slots: any,
        attrs: any
      }`;
		}
		let returned;
		if (options.inlineTemplate) if (sfc.template && !sfc.template.src) {
			if (options.templateOptions && options.templateOptions.ssr) hasInlinedSsrRenderFn = true;
			const { code: code$1, ast, preamble, tips, errors: errors$1 } = compileTemplate({
				filename,
				source: sfc.template.content,
				inMap: sfc.template.map,
				...options.templateOptions,
				id: scopeId,
				scoped: sfc.styles.some((s$4) => s$4.scoped),
				isProd: options.isProd,
				ssrCssVars: sfc.cssVars,
				compilerOptions: {
					...options.templateOptions && options.templateOptions.compilerOptions,
					inline: true,
					isTS,
					bindingMetadata
				}
			});
			if (tips.length) tips.forEach(warnOnce);
			const err = errors$1[0];
			if (typeof err === "string") throw new Error(err);
			else if (err) {
				if (err.loc) err.message += `\n\n` + sfc.filename + "\n" + shared.generateCodeFrame(source, err.loc.start.offset, err.loc.end.offset) + `\n`;
				throw err;
			}
			if (preamble) s$3.prepend(preamble);
			if (ast && ast.helpers.includes(compilerCore.UNREF)) helperImports.delete("unref");
			returned = code$1;
		} else returned = `() => {}`;
		else {
			const allBindings = { ...setupBindings };
			for (const key in userImports) if (!userImports[key].isType) allBindings[key] = true;
			returned = `{ ${Object.keys(allBindings).join(", ")} }`;
		}
		s$3.appendRight(endOffset, `\nreturn ${returned}\n}\n\n`);
		let runtimeOptions = `\n  expose: [],`;
		if (hasInheritAttrsFlag) runtimeOptions += `\n  inheritAttrs: false,`;
		if (hasInlinedSsrRenderFn) runtimeOptions += `\n  __ssrInlineRender: true,`;
		if (propsRuntimeDecl) runtimeOptions += `\n  props: ${scriptSetup.content.slice(propsRuntimeDecl.start, propsRuntimeDecl.end).trim()},`;
		else if (propsTypeDecl) runtimeOptions += genRuntimeProps(typeDeclaredProps);
		if (emitRuntimeDecl) runtimeOptions += `\n  emits: ${scriptSetup.content.slice(emitRuntimeDecl.start, emitRuntimeDecl.end).trim()},`;
		else if (emitTypeDecl) runtimeOptions += genRuntimeEmits(typeDeclaredEmits);
		if (isTS) {
			const def$1 = defaultExport ? `\n  ...${defaultTempVar},` : ``;
			s$3.prependLeft(startOffset, `\nexport default ${helper(`defineComponent`)}({${def$1}${runtimeOptions}\n  ${hasAwait ? `async ` : ``}setup(${args}) {\n`);
			s$3.appendRight(endOffset, `})`);
		} else if (defaultExport) {
			s$3.prependLeft(startOffset, `\n${hasAwait ? `async ` : ``}function setup(${args}) {\n`);
			s$3.append(`\nexport default /*#__PURE__*/ Object.assign(${defaultTempVar}, {${runtimeOptions}\n  setup\n})\n`);
		} else {
			s$3.prependLeft(startOffset, `\nexport default {${runtimeOptions}\n  ${hasAwait ? `async ` : ``}setup(${args}) {\n`);
			s$3.appendRight(endOffset, `}`);
		}
		if (helperImports.size > 0) s$3.prepend(`import { ${[...helperImports].map((h$2) => `${h$2} as _${h$2}`).join(", ")} } from 'vue'\n`);
		s$3.trim();
		return {
			...scriptSetup,
			bindings: bindingMetadata,
			content: s$3.toString(),
			map: s$3.generateMap({
				source: filename,
				hires: true,
				includeContent: true
			}),
			scriptAst,
			scriptSetupAst
		};
	}
	function walkDeclaration(node, bindings, userImportAlias) {
		if (node.type === "VariableDeclaration") {
			const isConst = node.kind === "const";
			for (const { id: id$4, init: init$1 } of node.declarations) {
				const isDefineCall = !!(isConst && (isCallOf(init$1, DEFINE_PROPS) || isCallOf(init$1, DEFINE_EMIT)));
				if (id$4.type === "Identifier") {
					let bindingType;
					const userReactiveBinding = userImportAlias["reactive"] || "reactive";
					if (isCallOf(init$1, userReactiveBinding)) bindingType = "setup-let";
					else if (isDefineCall || isConst && canNeverBeRef(init$1, userReactiveBinding)) bindingType = "setup-const";
					else if (isConst) if (isCallOf(init$1, userImportAlias["ref"] || "ref")) bindingType = "setup-ref";
					else bindingType = "setup-maybe-ref";
					else bindingType = "setup-let";
					bindings[id$4.name] = bindingType;
				} else if (id$4.type === "ObjectPattern") walkObjectPattern(id$4, bindings, isConst, isDefineCall);
				else if (id$4.type === "ArrayPattern") walkArrayPattern(id$4, bindings, isConst, isDefineCall);
			}
		} else if (node.type === "FunctionDeclaration" || node.type === "ClassDeclaration") bindings[node.id.name] = "setup-const";
	}
	function walkObjectPattern(node, bindings, isConst, isDefineCall = false) {
		for (const p$2 of node.properties) if (p$2.type === "ObjectProperty") {
			if (p$2.key.type === "Identifier") if (p$2.key === p$2.value) bindings[p$2.key.name] = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
			else walkPattern(p$2.value, bindings, isConst, isDefineCall);
		} else bindings[p$2.argument.name] = isConst ? "setup-const" : "setup-let";
	}
	function walkArrayPattern(node, bindings, isConst, isDefineCall = false) {
		for (const e$2 of node.elements) e$2 && walkPattern(e$2, bindings, isConst, isDefineCall);
	}
	function walkPattern(node, bindings, isConst, isDefineCall = false) {
		if (node.type === "Identifier") bindings[node.name] = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
		else if (node.type === "RestElement") bindings[node.argument.name] = isConst ? "setup-const" : "setup-let";
		else if (node.type === "ObjectPattern") walkObjectPattern(node, bindings, isConst);
		else if (node.type === "ArrayPattern") walkArrayPattern(node, bindings, isConst);
		else if (node.type === "AssignmentPattern") if (node.left.type === "Identifier") bindings[node.left.name] = isDefineCall ? "setup-const" : isConst ? "setup-maybe-ref" : "setup-let";
		else walkPattern(node.left, bindings, isConst);
	}
	function recordType(node, declaredTypes) {
		if (node.type === "TSInterfaceDeclaration") declaredTypes[node.id.name] = [`Object`];
		else if (node.type === "TSTypeAliasDeclaration") declaredTypes[node.id.name] = inferRuntimeType(node.typeAnnotation, declaredTypes);
		else if (node.type === "ExportNamedDeclaration" && node.declaration) recordType(node.declaration, declaredTypes);
	}
	function extractRuntimeProps(node, props, declaredTypes) {
		for (const m$2 of node.members) if (m$2.type === "TSPropertySignature" && m$2.key.type === "Identifier") props[m$2.key.name] = {
			key: m$2.key.name,
			required: !m$2.optional,
			type: m$2.typeAnnotation ? inferRuntimeType(m$2.typeAnnotation.typeAnnotation, declaredTypes) : [`null`]
		};
	}
	function inferRuntimeType(node, declaredTypes) {
		switch (node.type) {
			case "TSStringKeyword": return ["String"];
			case "TSNumberKeyword": return ["Number"];
			case "TSBooleanKeyword": return ["Boolean"];
			case "TSObjectKeyword": return ["Object"];
			case "TSTypeLiteral": return ["Object"];
			case "TSFunctionType": return ["Function"];
			case "TSArrayType":
			case "TSTupleType": return ["Array"];
			case "TSLiteralType": switch (node.literal.type) {
				case "StringLiteral": return ["String"];
				case "BooleanLiteral": return ["Boolean"];
				case "NumericLiteral":
				case "BigIntLiteral": return ["Number"];
				default: return [`null`];
			}
			case "TSTypeReference":
				if (node.typeName.type === "Identifier") {
					if (declaredTypes[node.typeName.name]) return declaredTypes[node.typeName.name];
					switch (node.typeName.name) {
						case "Array":
						case "Function":
						case "Object":
						case "Set":
						case "Map":
						case "WeakSet":
						case "WeakMap": return [node.typeName.name];
						case "Record":
						case "Partial":
						case "Readonly":
						case "Pick":
						case "Omit":
						case "Exclude":
						case "Extract":
						case "Required":
						case "InstanceType": return ["Object"];
					}
				}
				return [`null`];
			case "TSUnionType": return [...new Set([].concat(node.types.map((t$9) => inferRuntimeType(t$9, declaredTypes))))];
			case "TSIntersectionType": return ["Object"];
			default: return [`null`];
		}
	}
	function genRuntimeProps(props) {
		const keys$1 = Object.keys(props);
		if (!keys$1.length) return ``;
		return `\n  props: {\n    ${keys$1.map((key) => {
			const { type, required } = props[key];
			return `${key}: { type: ${toRuntimeTypeString(type)}, required: ${required} }`;
		}).join(",\n    ")}\n  } as unknown as undefined,`;
	}
	function toRuntimeTypeString(types$7) {
		return types$7.some((t$9) => t$9 === "null") ? `null` : types$7.length > 1 ? `[${types$7.join(", ")}]` : types$7[0];
	}
	function extractRuntimeEmits(node, emits) {
		if (node.type === "TSUnionType") {
			for (let t$9 of node.types) {
				if (t$9.type === "TSParenthesizedType") t$9 = t$9.typeAnnotation;
				if (t$9.type === "TSFunctionType") extractRuntimeEmits(t$9, emits);
			}
			return;
		}
		const eventName = node.parameters[0];
		if (eventName.type === "Identifier" && eventName.typeAnnotation && eventName.typeAnnotation.type === "TSTypeAnnotation") {
			const typeNode = eventName.typeAnnotation.typeAnnotation;
			if (typeNode.type === "TSLiteralType") emits.add(String(typeNode.literal.value));
			else if (typeNode.type === "TSUnionType") {
				for (const t$9 of typeNode.types) if (t$9.type === "TSLiteralType") emits.add(String(t$9.literal.value));
			}
		}
	}
	function genRuntimeEmits(emits) {
		return emits.size ? `\n  emits: [${Array.from(emits).map((p$2) => JSON.stringify(p$2)).join(", ")}] as unknown as undefined,` : ``;
	}
	/**
	
	* Walk an AST and find identifiers that are variable references.
	
	* This is largely the same logic with `transformExpressions` in compiler-core
	
	* but with some subtle differences as this needs to handle a wider range of
	
	* possible syntax.
	
	*/
	function walkIdentifiers(root$5, onIdentifier) {
		const parentStack = [];
		const knownIds = Object.create(null);
		estreeWalker.walk(root$5, {
			enter(node, parent) {
				parent && parentStack.push(parent);
				if (node.type === "Identifier") {
					if (!knownIds[node.name] && isRefIdentifier(node, parent, parentStack)) onIdentifier(node, parent, parentStack);
				} else if (isFunction$6(node)) node.params.forEach((p$2) => estreeWalker.walk(p$2, { enter(child, parent$1) {
					if (child.type === "Identifier" && !isStaticPropertyKey(child, parent$1) && !(parent$1 && parent$1.type === "AssignmentPattern" && parent$1.right === child)) {
						const { name } = child;
						if (node.scopeIds && node.scopeIds.has(name)) return;
						if (name in knownIds) knownIds[name]++;
						else knownIds[name] = 1;
						(node.scopeIds || (node.scopeIds = new Set())).add(name);
					}
				} }));
				else if (node.type === "ObjectProperty" && parent.type === "ObjectPattern") node.inPattern = true;
			},
			leave(node, parent) {
				parent && parentStack.pop();
				if (node.scopeIds) node.scopeIds.forEach((id$4) => {
					knownIds[id$4]--;
					if (knownIds[id$4] === 0) delete knownIds[id$4];
				});
			}
		});
	}
	function isRefIdentifier(id$4, parent, parentStack) {
		if ((parent.type === "VariableDeclarator" || parent.type === "ClassDeclaration") && parent.id === id$4) return false;
		if (isFunction$6(parent)) {
			if (parent.id === id$4) return false;
			if (parent.params.includes(id$4)) return false;
		}
		if (isStaticPropertyKey(id$4, parent)) return false;
		if (parent.type === "ArrayPattern" && !isInDestructureAssignment(parent, parentStack)) return false;
		if ((parent.type === "MemberExpression" || parent.type === "OptionalMemberExpression") && parent.property === id$4 && !parent.computed) return false;
		if (id$4.name === "arguments") return false;
		return true;
	}
	const isStaticProperty = (node) => node && (node.type === "ObjectProperty" || node.type === "ObjectMethod") && !node.computed;
	const isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;
	function isFunction$6(node) {
		return /Function(?:Expression|Declaration)$|Method$/.test(node.type);
	}
	function isCallOf(node, name) {
		return !!(node && node.type === "CallExpression" && node.callee.type === "Identifier" && node.callee.name === name);
	}
	function canNeverBeRef(node, userReactiveImport) {
		if (isCallOf(node, userReactiveImport)) return true;
		switch (node.type) {
			case "UnaryExpression":
			case "BinaryExpression":
			case "ArrayExpression":
			case "ObjectExpression":
			case "FunctionExpression":
			case "ArrowFunctionExpression":
			case "UpdateExpression":
			case "ClassExpression":
			case "TaggedTemplateExpression": return true;
			case "SequenceExpression": return canNeverBeRef(node.expressions[node.expressions.length - 1], userReactiveImport);
			default:
				if (node.type.endsWith("Literal")) return true;
				return false;
		}
	}
	function isInDestructureAssignment(parent, parentStack) {
		if (parent && (parent.type === "ObjectProperty" || parent.type === "ArrayPattern")) {
			let i$6 = parentStack.length;
			while (i$6--) {
				const p$2 = parentStack[i$6];
				if (p$2.type === "AssignmentExpression") {
					const root$5 = parentStack[0];
					return !(root$5.type === "LabeledStatement" && root$5.label.name === "ref");
				} else if (p$2.type !== "ObjectProperty" && !p$2.type.endsWith("Pattern")) break;
			}
		}
		return false;
	}
	/**
	
	* Analyze bindings in normal `<script>`
	
	* Note that `compileScriptSetup` already analyzes bindings as part of its
	
	* compilation process so this should only be used on single `<script>` SFCs.
	
	*/
	function analyzeScriptBindings(ast) {
		for (const node of ast) if (node.type === "ExportDefaultDeclaration" && node.declaration.type === "ObjectExpression") return analyzeBindingsFromOptions(node.declaration);
		return {};
	}
	function analyzeBindingsFromOptions(node) {
		const bindings = {};
		for (const property of node.properties) if (property.type === "ObjectProperty" && !property.computed && property.key.type === "Identifier") {
			if (property.key.name === "props") for (const key of getObjectOrArrayExpressionKeys(property.value)) bindings[key] = "props";
			else if (property.key.name === "inject") for (const key of getObjectOrArrayExpressionKeys(property.value)) bindings[key] = "options";
			else if (property.value.type === "ObjectExpression" && (property.key.name === "computed" || property.key.name === "methods")) for (const key of getObjectExpressionKeys(property.value)) bindings[key] = "options";
		} else if (property.type === "ObjectMethod" && property.key.type === "Identifier" && (property.key.name === "setup" || property.key.name === "data")) {
			for (const bodyItem of property.body.body) if (bodyItem.type === "ReturnStatement" && bodyItem.argument && bodyItem.argument.type === "ObjectExpression") for (const key of getObjectExpressionKeys(bodyItem.argument)) bindings[key] = property.key.name === "setup" ? "setup-maybe-ref" : "data";
		}
		return bindings;
	}
	function getObjectExpressionKeys(node) {
		const keys$1 = [];
		for (const prop of node.properties) if ((prop.type === "ObjectProperty" || prop.type === "ObjectMethod") && !prop.computed) {
			if (prop.key.type === "Identifier") keys$1.push(prop.key.name);
			else if (prop.key.type === "StringLiteral") keys$1.push(prop.key.value);
		}
		return keys$1;
	}
	function getArrayExpressionKeys(node) {
		const keys$1 = [];
		for (const element of node.elements) if (element && element.type === "StringLiteral") keys$1.push(element.value);
		return keys$1;
	}
	function getObjectOrArrayExpressionKeys(value) {
		if (value.type === "ArrayExpression") return getArrayExpressionKeys(value);
		if (value.type === "ObjectExpression") return getObjectExpressionKeys(value);
		return [];
	}
	exports.generateCodeFrame = compilerCore.generateCodeFrame;
	exports.compileScript = compileScript;
	exports.compileStyle = compileStyle;
	exports.compileStyleAsync = compileStyleAsync;
	exports.compileTemplate = compileTemplate;
	exports.parse = parse$4;
	exports.rewriteDefault = rewriteDefault;
} });
var import_compiler_sfc_cjs = __toESM(require_compiler_sfc_cjs());

//#endregion
//#region src/analyzer-utils.ts
function parseSFC(code$1, id$4) {
	const { descriptor: { template: template$1, script } } = import_compiler_sfc_cjs.parse(code$1, {
		sourceMap: false,
		sourceRoot: process.cwd(),
		filename: id$4,
		pad: "line"
	});
	return {
		template: template$1,
		script
	};
}
function isVueSFC(id$4) {
	return /\.vue$/i.test(id$4);
}

//#endregion
//#region node_modules/entities/lib/maps/decode.json
var require_decode$1 = __commonJS({ "node_modules/entities/lib/maps/decode.json"(exports, module) {
	module.exports = {
		"0": 65533,
		"128": 8364,
		"130": 8218,
		"131": 402,
		"132": 8222,
		"133": 8230,
		"134": 8224,
		"135": 8225,
		"136": 710,
		"137": 8240,
		"138": 352,
		"139": 8249,
		"140": 338,
		"142": 381,
		"145": 8216,
		"146": 8217,
		"147": 8220,
		"148": 8221,
		"149": 8226,
		"150": 8211,
		"151": 8212,
		"152": 732,
		"153": 8482,
		"154": 353,
		"155": 8250,
		"156": 339,
		"158": 382,
		"159": 376
	};
} });

//#endregion
//#region node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({ "node_modules/entities/lib/decode_codepoint.js"(exports) {
	var __importDefault$7 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var decode_json_1 = __importDefault$7(require_decode$1());
	var fromCodePoint = String.fromCodePoint || function(codePoint) {
		var output = "";
		if (codePoint > 65535) {
			codePoint -= 65536;
			output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
			codePoint = 56320 | codePoint & 1023;
		}
		output += String.fromCharCode(codePoint);
		return output;
	};
	function decodeCodePoint(codePoint) {
		if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) return "�";
		if (codePoint in decode_json_1.default) codePoint = decode_json_1.default[codePoint];
		return fromCodePoint(codePoint);
	}
	exports.default = decodeCodePoint;
} });

//#endregion
//#region node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({ "node_modules/entities/lib/maps/entities.json"(exports, module) {
	module.exports = {
		"Aacute": "Á",
		"aacute": "á",
		"Abreve": "Ă",
		"abreve": "ă",
		"ac": "∾",
		"acd": "∿",
		"acE": "∾̳",
		"Acirc": "Â",
		"acirc": "â",
		"acute": "´",
		"Acy": "А",
		"acy": "а",
		"AElig": "Æ",
		"aelig": "æ",
		"af": "⁡",
		"Afr": "𝔄",
		"afr": "𝔞",
		"Agrave": "À",
		"agrave": "à",
		"alefsym": "ℵ",
		"aleph": "ℵ",
		"Alpha": "Α",
		"alpha": "α",
		"Amacr": "Ā",
		"amacr": "ā",
		"amalg": "⨿",
		"amp": "&",
		"AMP": "&",
		"andand": "⩕",
		"And": "⩓",
		"and": "∧",
		"andd": "⩜",
		"andslope": "⩘",
		"andv": "⩚",
		"ang": "∠",
		"ange": "⦤",
		"angle": "∠",
		"angmsdaa": "⦨",
		"angmsdab": "⦩",
		"angmsdac": "⦪",
		"angmsdad": "⦫",
		"angmsdae": "⦬",
		"angmsdaf": "⦭",
		"angmsdag": "⦮",
		"angmsdah": "⦯",
		"angmsd": "∡",
		"angrt": "∟",
		"angrtvb": "⊾",
		"angrtvbd": "⦝",
		"angsph": "∢",
		"angst": "Å",
		"angzarr": "⍼",
		"Aogon": "Ą",
		"aogon": "ą",
		"Aopf": "𝔸",
		"aopf": "𝕒",
		"apacir": "⩯",
		"ap": "≈",
		"apE": "⩰",
		"ape": "≊",
		"apid": "≋",
		"apos": "'",
		"ApplyFunction": "⁡",
		"approx": "≈",
		"approxeq": "≊",
		"Aring": "Å",
		"aring": "å",
		"Ascr": "𝒜",
		"ascr": "𝒶",
		"Assign": "≔",
		"ast": "*",
		"asymp": "≈",
		"asympeq": "≍",
		"Atilde": "Ã",
		"atilde": "ã",
		"Auml": "Ä",
		"auml": "ä",
		"awconint": "∳",
		"awint": "⨑",
		"backcong": "≌",
		"backepsilon": "϶",
		"backprime": "‵",
		"backsim": "∽",
		"backsimeq": "⋍",
		"Backslash": "∖",
		"Barv": "⫧",
		"barvee": "⊽",
		"barwed": "⌅",
		"Barwed": "⌆",
		"barwedge": "⌅",
		"bbrk": "⎵",
		"bbrktbrk": "⎶",
		"bcong": "≌",
		"Bcy": "Б",
		"bcy": "б",
		"bdquo": "„",
		"becaus": "∵",
		"because": "∵",
		"Because": "∵",
		"bemptyv": "⦰",
		"bepsi": "϶",
		"bernou": "ℬ",
		"Bernoullis": "ℬ",
		"Beta": "Β",
		"beta": "β",
		"beth": "ℶ",
		"between": "≬",
		"Bfr": "𝔅",
		"bfr": "𝔟",
		"bigcap": "⋂",
		"bigcirc": "◯",
		"bigcup": "⋃",
		"bigodot": "⨀",
		"bigoplus": "⨁",
		"bigotimes": "⨂",
		"bigsqcup": "⨆",
		"bigstar": "★",
		"bigtriangledown": "▽",
		"bigtriangleup": "△",
		"biguplus": "⨄",
		"bigvee": "⋁",
		"bigwedge": "⋀",
		"bkarow": "⤍",
		"blacklozenge": "⧫",
		"blacksquare": "▪",
		"blacktriangle": "▴",
		"blacktriangledown": "▾",
		"blacktriangleleft": "◂",
		"blacktriangleright": "▸",
		"blank": "␣",
		"blk12": "▒",
		"blk14": "░",
		"blk34": "▓",
		"block": "█",
		"bne": "=⃥",
		"bnequiv": "≡⃥",
		"bNot": "⫭",
		"bnot": "⌐",
		"Bopf": "𝔹",
		"bopf": "𝕓",
		"bot": "⊥",
		"bottom": "⊥",
		"bowtie": "⋈",
		"boxbox": "⧉",
		"boxdl": "┐",
		"boxdL": "╕",
		"boxDl": "╖",
		"boxDL": "╗",
		"boxdr": "┌",
		"boxdR": "╒",
		"boxDr": "╓",
		"boxDR": "╔",
		"boxh": "─",
		"boxH": "═",
		"boxhd": "┬",
		"boxHd": "╤",
		"boxhD": "╥",
		"boxHD": "╦",
		"boxhu": "┴",
		"boxHu": "╧",
		"boxhU": "╨",
		"boxHU": "╩",
		"boxminus": "⊟",
		"boxplus": "⊞",
		"boxtimes": "⊠",
		"boxul": "┘",
		"boxuL": "╛",
		"boxUl": "╜",
		"boxUL": "╝",
		"boxur": "└",
		"boxuR": "╘",
		"boxUr": "╙",
		"boxUR": "╚",
		"boxv": "│",
		"boxV": "║",
		"boxvh": "┼",
		"boxvH": "╪",
		"boxVh": "╫",
		"boxVH": "╬",
		"boxvl": "┤",
		"boxvL": "╡",
		"boxVl": "╢",
		"boxVL": "╣",
		"boxvr": "├",
		"boxvR": "╞",
		"boxVr": "╟",
		"boxVR": "╠",
		"bprime": "‵",
		"breve": "˘",
		"Breve": "˘",
		"brvbar": "¦",
		"bscr": "𝒷",
		"Bscr": "ℬ",
		"bsemi": "⁏",
		"bsim": "∽",
		"bsime": "⋍",
		"bsolb": "⧅",
		"bsol": "\\",
		"bsolhsub": "⟈",
		"bull": "•",
		"bullet": "•",
		"bump": "≎",
		"bumpE": "⪮",
		"bumpe": "≏",
		"Bumpeq": "≎",
		"bumpeq": "≏",
		"Cacute": "Ć",
		"cacute": "ć",
		"capand": "⩄",
		"capbrcup": "⩉",
		"capcap": "⩋",
		"cap": "∩",
		"Cap": "⋒",
		"capcup": "⩇",
		"capdot": "⩀",
		"CapitalDifferentialD": "ⅅ",
		"caps": "∩︀",
		"caret": "⁁",
		"caron": "ˇ",
		"Cayleys": "ℭ",
		"ccaps": "⩍",
		"Ccaron": "Č",
		"ccaron": "č",
		"Ccedil": "Ç",
		"ccedil": "ç",
		"Ccirc": "Ĉ",
		"ccirc": "ĉ",
		"Cconint": "∰",
		"ccups": "⩌",
		"ccupssm": "⩐",
		"Cdot": "Ċ",
		"cdot": "ċ",
		"cedil": "¸",
		"Cedilla": "¸",
		"cemptyv": "⦲",
		"cent": "¢",
		"centerdot": "·",
		"CenterDot": "·",
		"cfr": "𝔠",
		"Cfr": "ℭ",
		"CHcy": "Ч",
		"chcy": "ч",
		"check": "✓",
		"checkmark": "✓",
		"Chi": "Χ",
		"chi": "χ",
		"circ": "ˆ",
		"circeq": "≗",
		"circlearrowleft": "↺",
		"circlearrowright": "↻",
		"circledast": "⊛",
		"circledcirc": "⊚",
		"circleddash": "⊝",
		"CircleDot": "⊙",
		"circledR": "®",
		"circledS": "Ⓢ",
		"CircleMinus": "⊖",
		"CirclePlus": "⊕",
		"CircleTimes": "⊗",
		"cir": "○",
		"cirE": "⧃",
		"cire": "≗",
		"cirfnint": "⨐",
		"cirmid": "⫯",
		"cirscir": "⧂",
		"ClockwiseContourIntegral": "∲",
		"CloseCurlyDoubleQuote": "”",
		"CloseCurlyQuote": "’",
		"clubs": "♣",
		"clubsuit": "♣",
		"colon": ":",
		"Colon": "∷",
		"Colone": "⩴",
		"colone": "≔",
		"coloneq": "≔",
		"comma": ",",
		"commat": "@",
		"comp": "∁",
		"compfn": "∘",
		"complement": "∁",
		"complexes": "ℂ",
		"cong": "≅",
		"congdot": "⩭",
		"Congruent": "≡",
		"conint": "∮",
		"Conint": "∯",
		"ContourIntegral": "∮",
		"copf": "𝕔",
		"Copf": "ℂ",
		"coprod": "∐",
		"Coproduct": "∐",
		"copy": "©",
		"COPY": "©",
		"copysr": "℗",
		"CounterClockwiseContourIntegral": "∳",
		"crarr": "↵",
		"cross": "✗",
		"Cross": "⨯",
		"Cscr": "𝒞",
		"cscr": "𝒸",
		"csub": "⫏",
		"csube": "⫑",
		"csup": "⫐",
		"csupe": "⫒",
		"ctdot": "⋯",
		"cudarrl": "⤸",
		"cudarrr": "⤵",
		"cuepr": "⋞",
		"cuesc": "⋟",
		"cularr": "↶",
		"cularrp": "⤽",
		"cupbrcap": "⩈",
		"cupcap": "⩆",
		"CupCap": "≍",
		"cup": "∪",
		"Cup": "⋓",
		"cupcup": "⩊",
		"cupdot": "⊍",
		"cupor": "⩅",
		"cups": "∪︀",
		"curarr": "↷",
		"curarrm": "⤼",
		"curlyeqprec": "⋞",
		"curlyeqsucc": "⋟",
		"curlyvee": "⋎",
		"curlywedge": "⋏",
		"curren": "¤",
		"curvearrowleft": "↶",
		"curvearrowright": "↷",
		"cuvee": "⋎",
		"cuwed": "⋏",
		"cwconint": "∲",
		"cwint": "∱",
		"cylcty": "⌭",
		"dagger": "†",
		"Dagger": "‡",
		"daleth": "ℸ",
		"darr": "↓",
		"Darr": "↡",
		"dArr": "⇓",
		"dash": "‐",
		"Dashv": "⫤",
		"dashv": "⊣",
		"dbkarow": "⤏",
		"dblac": "˝",
		"Dcaron": "Ď",
		"dcaron": "ď",
		"Dcy": "Д",
		"dcy": "д",
		"ddagger": "‡",
		"ddarr": "⇊",
		"DD": "ⅅ",
		"dd": "ⅆ",
		"DDotrahd": "⤑",
		"ddotseq": "⩷",
		"deg": "°",
		"Del": "∇",
		"Delta": "Δ",
		"delta": "δ",
		"demptyv": "⦱",
		"dfisht": "⥿",
		"Dfr": "𝔇",
		"dfr": "𝔡",
		"dHar": "⥥",
		"dharl": "⇃",
		"dharr": "⇂",
		"DiacriticalAcute": "´",
		"DiacriticalDot": "˙",
		"DiacriticalDoubleAcute": "˝",
		"DiacriticalGrave": "`",
		"DiacriticalTilde": "˜",
		"diam": "⋄",
		"diamond": "⋄",
		"Diamond": "⋄",
		"diamondsuit": "♦",
		"diams": "♦",
		"die": "¨",
		"DifferentialD": "ⅆ",
		"digamma": "ϝ",
		"disin": "⋲",
		"div": "÷",
		"divide": "÷",
		"divideontimes": "⋇",
		"divonx": "⋇",
		"DJcy": "Ђ",
		"djcy": "ђ",
		"dlcorn": "⌞",
		"dlcrop": "⌍",
		"dollar": "$",
		"Dopf": "𝔻",
		"dopf": "𝕕",
		"Dot": "¨",
		"dot": "˙",
		"DotDot": "⃜",
		"doteq": "≐",
		"doteqdot": "≑",
		"DotEqual": "≐",
		"dotminus": "∸",
		"dotplus": "∔",
		"dotsquare": "⊡",
		"doublebarwedge": "⌆",
		"DoubleContourIntegral": "∯",
		"DoubleDot": "¨",
		"DoubleDownArrow": "⇓",
		"DoubleLeftArrow": "⇐",
		"DoubleLeftRightArrow": "⇔",
		"DoubleLeftTee": "⫤",
		"DoubleLongLeftArrow": "⟸",
		"DoubleLongLeftRightArrow": "⟺",
		"DoubleLongRightArrow": "⟹",
		"DoubleRightArrow": "⇒",
		"DoubleRightTee": "⊨",
		"DoubleUpArrow": "⇑",
		"DoubleUpDownArrow": "⇕",
		"DoubleVerticalBar": "∥",
		"DownArrowBar": "⤓",
		"downarrow": "↓",
		"DownArrow": "↓",
		"Downarrow": "⇓",
		"DownArrowUpArrow": "⇵",
		"DownBreve": "̑",
		"downdownarrows": "⇊",
		"downharpoonleft": "⇃",
		"downharpoonright": "⇂",
		"DownLeftRightVector": "⥐",
		"DownLeftTeeVector": "⥞",
		"DownLeftVectorBar": "⥖",
		"DownLeftVector": "↽",
		"DownRightTeeVector": "⥟",
		"DownRightVectorBar": "⥗",
		"DownRightVector": "⇁",
		"DownTeeArrow": "↧",
		"DownTee": "⊤",
		"drbkarow": "⤐",
		"drcorn": "⌟",
		"drcrop": "⌌",
		"Dscr": "𝒟",
		"dscr": "𝒹",
		"DScy": "Ѕ",
		"dscy": "ѕ",
		"dsol": "⧶",
		"Dstrok": "Đ",
		"dstrok": "đ",
		"dtdot": "⋱",
		"dtri": "▿",
		"dtrif": "▾",
		"duarr": "⇵",
		"duhar": "⥯",
		"dwangle": "⦦",
		"DZcy": "Џ",
		"dzcy": "џ",
		"dzigrarr": "⟿",
		"Eacute": "É",
		"eacute": "é",
		"easter": "⩮",
		"Ecaron": "Ě",
		"ecaron": "ě",
		"Ecirc": "Ê",
		"ecirc": "ê",
		"ecir": "≖",
		"ecolon": "≕",
		"Ecy": "Э",
		"ecy": "э",
		"eDDot": "⩷",
		"Edot": "Ė",
		"edot": "ė",
		"eDot": "≑",
		"ee": "ⅇ",
		"efDot": "≒",
		"Efr": "𝔈",
		"efr": "𝔢",
		"eg": "⪚",
		"Egrave": "È",
		"egrave": "è",
		"egs": "⪖",
		"egsdot": "⪘",
		"el": "⪙",
		"Element": "∈",
		"elinters": "⏧",
		"ell": "ℓ",
		"els": "⪕",
		"elsdot": "⪗",
		"Emacr": "Ē",
		"emacr": "ē",
		"empty": "∅",
		"emptyset": "∅",
		"EmptySmallSquare": "◻",
		"emptyv": "∅",
		"EmptyVerySmallSquare": "▫",
		"emsp13": " ",
		"emsp14": " ",
		"emsp": " ",
		"ENG": "Ŋ",
		"eng": "ŋ",
		"ensp": " ",
		"Eogon": "Ę",
		"eogon": "ę",
		"Eopf": "𝔼",
		"eopf": "𝕖",
		"epar": "⋕",
		"eparsl": "⧣",
		"eplus": "⩱",
		"epsi": "ε",
		"Epsilon": "Ε",
		"epsilon": "ε",
		"epsiv": "ϵ",
		"eqcirc": "≖",
		"eqcolon": "≕",
		"eqsim": "≂",
		"eqslantgtr": "⪖",
		"eqslantless": "⪕",
		"Equal": "⩵",
		"equals": "=",
		"EqualTilde": "≂",
		"equest": "≟",
		"Equilibrium": "⇌",
		"equiv": "≡",
		"equivDD": "⩸",
		"eqvparsl": "⧥",
		"erarr": "⥱",
		"erDot": "≓",
		"escr": "ℯ",
		"Escr": "ℰ",
		"esdot": "≐",
		"Esim": "⩳",
		"esim": "≂",
		"Eta": "Η",
		"eta": "η",
		"ETH": "Ð",
		"eth": "ð",
		"Euml": "Ë",
		"euml": "ë",
		"euro": "€",
		"excl": "!",
		"exist": "∃",
		"Exists": "∃",
		"expectation": "ℰ",
		"exponentiale": "ⅇ",
		"ExponentialE": "ⅇ",
		"fallingdotseq": "≒",
		"Fcy": "Ф",
		"fcy": "ф",
		"female": "♀",
		"ffilig": "ﬃ",
		"fflig": "ﬀ",
		"ffllig": "ﬄ",
		"Ffr": "𝔉",
		"ffr": "𝔣",
		"filig": "ﬁ",
		"FilledSmallSquare": "◼",
		"FilledVerySmallSquare": "▪",
		"fjlig": "fj",
		"flat": "♭",
		"fllig": "ﬂ",
		"fltns": "▱",
		"fnof": "ƒ",
		"Fopf": "𝔽",
		"fopf": "𝕗",
		"forall": "∀",
		"ForAll": "∀",
		"fork": "⋔",
		"forkv": "⫙",
		"Fouriertrf": "ℱ",
		"fpartint": "⨍",
		"frac12": "½",
		"frac13": "⅓",
		"frac14": "¼",
		"frac15": "⅕",
		"frac16": "⅙",
		"frac18": "⅛",
		"frac23": "⅔",
		"frac25": "⅖",
		"frac34": "¾",
		"frac35": "⅗",
		"frac38": "⅜",
		"frac45": "⅘",
		"frac56": "⅚",
		"frac58": "⅝",
		"frac78": "⅞",
		"frasl": "⁄",
		"frown": "⌢",
		"fscr": "𝒻",
		"Fscr": "ℱ",
		"gacute": "ǵ",
		"Gamma": "Γ",
		"gamma": "γ",
		"Gammad": "Ϝ",
		"gammad": "ϝ",
		"gap": "⪆",
		"Gbreve": "Ğ",
		"gbreve": "ğ",
		"Gcedil": "Ģ",
		"Gcirc": "Ĝ",
		"gcirc": "ĝ",
		"Gcy": "Г",
		"gcy": "г",
		"Gdot": "Ġ",
		"gdot": "ġ",
		"ge": "≥",
		"gE": "≧",
		"gEl": "⪌",
		"gel": "⋛",
		"geq": "≥",
		"geqq": "≧",
		"geqslant": "⩾",
		"gescc": "⪩",
		"ges": "⩾",
		"gesdot": "⪀",
		"gesdoto": "⪂",
		"gesdotol": "⪄",
		"gesl": "⋛︀",
		"gesles": "⪔",
		"Gfr": "𝔊",
		"gfr": "𝔤",
		"gg": "≫",
		"Gg": "⋙",
		"ggg": "⋙",
		"gimel": "ℷ",
		"GJcy": "Ѓ",
		"gjcy": "ѓ",
		"gla": "⪥",
		"gl": "≷",
		"glE": "⪒",
		"glj": "⪤",
		"gnap": "⪊",
		"gnapprox": "⪊",
		"gne": "⪈",
		"gnE": "≩",
		"gneq": "⪈",
		"gneqq": "≩",
		"gnsim": "⋧",
		"Gopf": "𝔾",
		"gopf": "𝕘",
		"grave": "`",
		"GreaterEqual": "≥",
		"GreaterEqualLess": "⋛",
		"GreaterFullEqual": "≧",
		"GreaterGreater": "⪢",
		"GreaterLess": "≷",
		"GreaterSlantEqual": "⩾",
		"GreaterTilde": "≳",
		"Gscr": "𝒢",
		"gscr": "ℊ",
		"gsim": "≳",
		"gsime": "⪎",
		"gsiml": "⪐",
		"gtcc": "⪧",
		"gtcir": "⩺",
		"gt": ">",
		"GT": ">",
		"Gt": "≫",
		"gtdot": "⋗",
		"gtlPar": "⦕",
		"gtquest": "⩼",
		"gtrapprox": "⪆",
		"gtrarr": "⥸",
		"gtrdot": "⋗",
		"gtreqless": "⋛",
		"gtreqqless": "⪌",
		"gtrless": "≷",
		"gtrsim": "≳",
		"gvertneqq": "≩︀",
		"gvnE": "≩︀",
		"Hacek": "ˇ",
		"hairsp": " ",
		"half": "½",
		"hamilt": "ℋ",
		"HARDcy": "Ъ",
		"hardcy": "ъ",
		"harrcir": "⥈",
		"harr": "↔",
		"hArr": "⇔",
		"harrw": "↭",
		"Hat": "^",
		"hbar": "ℏ",
		"Hcirc": "Ĥ",
		"hcirc": "ĥ",
		"hearts": "♥",
		"heartsuit": "♥",
		"hellip": "…",
		"hercon": "⊹",
		"hfr": "𝔥",
		"Hfr": "ℌ",
		"HilbertSpace": "ℋ",
		"hksearow": "⤥",
		"hkswarow": "⤦",
		"hoarr": "⇿",
		"homtht": "∻",
		"hookleftarrow": "↩",
		"hookrightarrow": "↪",
		"hopf": "𝕙",
		"Hopf": "ℍ",
		"horbar": "―",
		"HorizontalLine": "─",
		"hscr": "𝒽",
		"Hscr": "ℋ",
		"hslash": "ℏ",
		"Hstrok": "Ħ",
		"hstrok": "ħ",
		"HumpDownHump": "≎",
		"HumpEqual": "≏",
		"hybull": "⁃",
		"hyphen": "‐",
		"Iacute": "Í",
		"iacute": "í",
		"ic": "⁣",
		"Icirc": "Î",
		"icirc": "î",
		"Icy": "И",
		"icy": "и",
		"Idot": "İ",
		"IEcy": "Е",
		"iecy": "е",
		"iexcl": "¡",
		"iff": "⇔",
		"ifr": "𝔦",
		"Ifr": "ℑ",
		"Igrave": "Ì",
		"igrave": "ì",
		"ii": "ⅈ",
		"iiiint": "⨌",
		"iiint": "∭",
		"iinfin": "⧜",
		"iiota": "℩",
		"IJlig": "Ĳ",
		"ijlig": "ĳ",
		"Imacr": "Ī",
		"imacr": "ī",
		"image": "ℑ",
		"ImaginaryI": "ⅈ",
		"imagline": "ℐ",
		"imagpart": "ℑ",
		"imath": "ı",
		"Im": "ℑ",
		"imof": "⊷",
		"imped": "Ƶ",
		"Implies": "⇒",
		"incare": "℅",
		"in": "∈",
		"infin": "∞",
		"infintie": "⧝",
		"inodot": "ı",
		"intcal": "⊺",
		"int": "∫",
		"Int": "∬",
		"integers": "ℤ",
		"Integral": "∫",
		"intercal": "⊺",
		"Intersection": "⋂",
		"intlarhk": "⨗",
		"intprod": "⨼",
		"InvisibleComma": "⁣",
		"InvisibleTimes": "⁢",
		"IOcy": "Ё",
		"iocy": "ё",
		"Iogon": "Į",
		"iogon": "į",
		"Iopf": "𝕀",
		"iopf": "𝕚",
		"Iota": "Ι",
		"iota": "ι",
		"iprod": "⨼",
		"iquest": "¿",
		"iscr": "𝒾",
		"Iscr": "ℐ",
		"isin": "∈",
		"isindot": "⋵",
		"isinE": "⋹",
		"isins": "⋴",
		"isinsv": "⋳",
		"isinv": "∈",
		"it": "⁢",
		"Itilde": "Ĩ",
		"itilde": "ĩ",
		"Iukcy": "І",
		"iukcy": "і",
		"Iuml": "Ï",
		"iuml": "ï",
		"Jcirc": "Ĵ",
		"jcirc": "ĵ",
		"Jcy": "Й",
		"jcy": "й",
		"Jfr": "𝔍",
		"jfr": "𝔧",
		"jmath": "ȷ",
		"Jopf": "𝕁",
		"jopf": "𝕛",
		"Jscr": "𝒥",
		"jscr": "𝒿",
		"Jsercy": "Ј",
		"jsercy": "ј",
		"Jukcy": "Є",
		"jukcy": "є",
		"Kappa": "Κ",
		"kappa": "κ",
		"kappav": "ϰ",
		"Kcedil": "Ķ",
		"kcedil": "ķ",
		"Kcy": "К",
		"kcy": "к",
		"Kfr": "𝔎",
		"kfr": "𝔨",
		"kgreen": "ĸ",
		"KHcy": "Х",
		"khcy": "х",
		"KJcy": "Ќ",
		"kjcy": "ќ",
		"Kopf": "𝕂",
		"kopf": "𝕜",
		"Kscr": "𝒦",
		"kscr": "𝓀",
		"lAarr": "⇚",
		"Lacute": "Ĺ",
		"lacute": "ĺ",
		"laemptyv": "⦴",
		"lagran": "ℒ",
		"Lambda": "Λ",
		"lambda": "λ",
		"lang": "⟨",
		"Lang": "⟪",
		"langd": "⦑",
		"langle": "⟨",
		"lap": "⪅",
		"Laplacetrf": "ℒ",
		"laquo": "«",
		"larrb": "⇤",
		"larrbfs": "⤟",
		"larr": "←",
		"Larr": "↞",
		"lArr": "⇐",
		"larrfs": "⤝",
		"larrhk": "↩",
		"larrlp": "↫",
		"larrpl": "⤹",
		"larrsim": "⥳",
		"larrtl": "↢",
		"latail": "⤙",
		"lAtail": "⤛",
		"lat": "⪫",
		"late": "⪭",
		"lates": "⪭︀",
		"lbarr": "⤌",
		"lBarr": "⤎",
		"lbbrk": "❲",
		"lbrace": "{",
		"lbrack": "[",
		"lbrke": "⦋",
		"lbrksld": "⦏",
		"lbrkslu": "⦍",
		"Lcaron": "Ľ",
		"lcaron": "ľ",
		"Lcedil": "Ļ",
		"lcedil": "ļ",
		"lceil": "⌈",
		"lcub": "{",
		"Lcy": "Л",
		"lcy": "л",
		"ldca": "⤶",
		"ldquo": "“",
		"ldquor": "„",
		"ldrdhar": "⥧",
		"ldrushar": "⥋",
		"ldsh": "↲",
		"le": "≤",
		"lE": "≦",
		"LeftAngleBracket": "⟨",
		"LeftArrowBar": "⇤",
		"leftarrow": "←",
		"LeftArrow": "←",
		"Leftarrow": "⇐",
		"LeftArrowRightArrow": "⇆",
		"leftarrowtail": "↢",
		"LeftCeiling": "⌈",
		"LeftDoubleBracket": "⟦",
		"LeftDownTeeVector": "⥡",
		"LeftDownVectorBar": "⥙",
		"LeftDownVector": "⇃",
		"LeftFloor": "⌊",
		"leftharpoondown": "↽",
		"leftharpoonup": "↼",
		"leftleftarrows": "⇇",
		"leftrightarrow": "↔",
		"LeftRightArrow": "↔",
		"Leftrightarrow": "⇔",
		"leftrightarrows": "⇆",
		"leftrightharpoons": "⇋",
		"leftrightsquigarrow": "↭",
		"LeftRightVector": "⥎",
		"LeftTeeArrow": "↤",
		"LeftTee": "⊣",
		"LeftTeeVector": "⥚",
		"leftthreetimes": "⋋",
		"LeftTriangleBar": "⧏",
		"LeftTriangle": "⊲",
		"LeftTriangleEqual": "⊴",
		"LeftUpDownVector": "⥑",
		"LeftUpTeeVector": "⥠",
		"LeftUpVectorBar": "⥘",
		"LeftUpVector": "↿",
		"LeftVectorBar": "⥒",
		"LeftVector": "↼",
		"lEg": "⪋",
		"leg": "⋚",
		"leq": "≤",
		"leqq": "≦",
		"leqslant": "⩽",
		"lescc": "⪨",
		"les": "⩽",
		"lesdot": "⩿",
		"lesdoto": "⪁",
		"lesdotor": "⪃",
		"lesg": "⋚︀",
		"lesges": "⪓",
		"lessapprox": "⪅",
		"lessdot": "⋖",
		"lesseqgtr": "⋚",
		"lesseqqgtr": "⪋",
		"LessEqualGreater": "⋚",
		"LessFullEqual": "≦",
		"LessGreater": "≶",
		"lessgtr": "≶",
		"LessLess": "⪡",
		"lesssim": "≲",
		"LessSlantEqual": "⩽",
		"LessTilde": "≲",
		"lfisht": "⥼",
		"lfloor": "⌊",
		"Lfr": "𝔏",
		"lfr": "𝔩",
		"lg": "≶",
		"lgE": "⪑",
		"lHar": "⥢",
		"lhard": "↽",
		"lharu": "↼",
		"lharul": "⥪",
		"lhblk": "▄",
		"LJcy": "Љ",
		"ljcy": "љ",
		"llarr": "⇇",
		"ll": "≪",
		"Ll": "⋘",
		"llcorner": "⌞",
		"Lleftarrow": "⇚",
		"llhard": "⥫",
		"lltri": "◺",
		"Lmidot": "Ŀ",
		"lmidot": "ŀ",
		"lmoustache": "⎰",
		"lmoust": "⎰",
		"lnap": "⪉",
		"lnapprox": "⪉",
		"lne": "⪇",
		"lnE": "≨",
		"lneq": "⪇",
		"lneqq": "≨",
		"lnsim": "⋦",
		"loang": "⟬",
		"loarr": "⇽",
		"lobrk": "⟦",
		"longleftarrow": "⟵",
		"LongLeftArrow": "⟵",
		"Longleftarrow": "⟸",
		"longleftrightarrow": "⟷",
		"LongLeftRightArrow": "⟷",
		"Longleftrightarrow": "⟺",
		"longmapsto": "⟼",
		"longrightarrow": "⟶",
		"LongRightArrow": "⟶",
		"Longrightarrow": "⟹",
		"looparrowleft": "↫",
		"looparrowright": "↬",
		"lopar": "⦅",
		"Lopf": "𝕃",
		"lopf": "𝕝",
		"loplus": "⨭",
		"lotimes": "⨴",
		"lowast": "∗",
		"lowbar": "_",
		"LowerLeftArrow": "↙",
		"LowerRightArrow": "↘",
		"loz": "◊",
		"lozenge": "◊",
		"lozf": "⧫",
		"lpar": "(",
		"lparlt": "⦓",
		"lrarr": "⇆",
		"lrcorner": "⌟",
		"lrhar": "⇋",
		"lrhard": "⥭",
		"lrm": "‎",
		"lrtri": "⊿",
		"lsaquo": "‹",
		"lscr": "𝓁",
		"Lscr": "ℒ",
		"lsh": "↰",
		"Lsh": "↰",
		"lsim": "≲",
		"lsime": "⪍",
		"lsimg": "⪏",
		"lsqb": "[",
		"lsquo": "‘",
		"lsquor": "‚",
		"Lstrok": "Ł",
		"lstrok": "ł",
		"ltcc": "⪦",
		"ltcir": "⩹",
		"lt": "<",
		"LT": "<",
		"Lt": "≪",
		"ltdot": "⋖",
		"lthree": "⋋",
		"ltimes": "⋉",
		"ltlarr": "⥶",
		"ltquest": "⩻",
		"ltri": "◃",
		"ltrie": "⊴",
		"ltrif": "◂",
		"ltrPar": "⦖",
		"lurdshar": "⥊",
		"luruhar": "⥦",
		"lvertneqq": "≨︀",
		"lvnE": "≨︀",
		"macr": "¯",
		"male": "♂",
		"malt": "✠",
		"maltese": "✠",
		"Map": "⤅",
		"map": "↦",
		"mapsto": "↦",
		"mapstodown": "↧",
		"mapstoleft": "↤",
		"mapstoup": "↥",
		"marker": "▮",
		"mcomma": "⨩",
		"Mcy": "М",
		"mcy": "м",
		"mdash": "—",
		"mDDot": "∺",
		"measuredangle": "∡",
		"MediumSpace": " ",
		"Mellintrf": "ℳ",
		"Mfr": "𝔐",
		"mfr": "𝔪",
		"mho": "℧",
		"micro": "µ",
		"midast": "*",
		"midcir": "⫰",
		"mid": "∣",
		"middot": "·",
		"minusb": "⊟",
		"minus": "−",
		"minusd": "∸",
		"minusdu": "⨪",
		"MinusPlus": "∓",
		"mlcp": "⫛",
		"mldr": "…",
		"mnplus": "∓",
		"models": "⊧",
		"Mopf": "𝕄",
		"mopf": "𝕞",
		"mp": "∓",
		"mscr": "𝓂",
		"Mscr": "ℳ",
		"mstpos": "∾",
		"Mu": "Μ",
		"mu": "μ",
		"multimap": "⊸",
		"mumap": "⊸",
		"nabla": "∇",
		"Nacute": "Ń",
		"nacute": "ń",
		"nang": "∠⃒",
		"nap": "≉",
		"napE": "⩰̸",
		"napid": "≋̸",
		"napos": "ŉ",
		"napprox": "≉",
		"natural": "♮",
		"naturals": "ℕ",
		"natur": "♮",
		"nbsp": "\xA0",
		"nbump": "≎̸",
		"nbumpe": "≏̸",
		"ncap": "⩃",
		"Ncaron": "Ň",
		"ncaron": "ň",
		"Ncedil": "Ņ",
		"ncedil": "ņ",
		"ncong": "≇",
		"ncongdot": "⩭̸",
		"ncup": "⩂",
		"Ncy": "Н",
		"ncy": "н",
		"ndash": "–",
		"nearhk": "⤤",
		"nearr": "↗",
		"neArr": "⇗",
		"nearrow": "↗",
		"ne": "≠",
		"nedot": "≐̸",
		"NegativeMediumSpace": "​",
		"NegativeThickSpace": "​",
		"NegativeThinSpace": "​",
		"NegativeVeryThinSpace": "​",
		"nequiv": "≢",
		"nesear": "⤨",
		"nesim": "≂̸",
		"NestedGreaterGreater": "≫",
		"NestedLessLess": "≪",
		"NewLine": "\n",
		"nexist": "∄",
		"nexists": "∄",
		"Nfr": "𝔑",
		"nfr": "𝔫",
		"ngE": "≧̸",
		"nge": "≱",
		"ngeq": "≱",
		"ngeqq": "≧̸",
		"ngeqslant": "⩾̸",
		"nges": "⩾̸",
		"nGg": "⋙̸",
		"ngsim": "≵",
		"nGt": "≫⃒",
		"ngt": "≯",
		"ngtr": "≯",
		"nGtv": "≫̸",
		"nharr": "↮",
		"nhArr": "⇎",
		"nhpar": "⫲",
		"ni": "∋",
		"nis": "⋼",
		"nisd": "⋺",
		"niv": "∋",
		"NJcy": "Њ",
		"njcy": "њ",
		"nlarr": "↚",
		"nlArr": "⇍",
		"nldr": "‥",
		"nlE": "≦̸",
		"nle": "≰",
		"nleftarrow": "↚",
		"nLeftarrow": "⇍",
		"nleftrightarrow": "↮",
		"nLeftrightarrow": "⇎",
		"nleq": "≰",
		"nleqq": "≦̸",
		"nleqslant": "⩽̸",
		"nles": "⩽̸",
		"nless": "≮",
		"nLl": "⋘̸",
		"nlsim": "≴",
		"nLt": "≪⃒",
		"nlt": "≮",
		"nltri": "⋪",
		"nltrie": "⋬",
		"nLtv": "≪̸",
		"nmid": "∤",
		"NoBreak": "⁠",
		"NonBreakingSpace": "\xA0",
		"nopf": "𝕟",
		"Nopf": "ℕ",
		"Not": "⫬",
		"not": "¬",
		"NotCongruent": "≢",
		"NotCupCap": "≭",
		"NotDoubleVerticalBar": "∦",
		"NotElement": "∉",
		"NotEqual": "≠",
		"NotEqualTilde": "≂̸",
		"NotExists": "∄",
		"NotGreater": "≯",
		"NotGreaterEqual": "≱",
		"NotGreaterFullEqual": "≧̸",
		"NotGreaterGreater": "≫̸",
		"NotGreaterLess": "≹",
		"NotGreaterSlantEqual": "⩾̸",
		"NotGreaterTilde": "≵",
		"NotHumpDownHump": "≎̸",
		"NotHumpEqual": "≏̸",
		"notin": "∉",
		"notindot": "⋵̸",
		"notinE": "⋹̸",
		"notinva": "∉",
		"notinvb": "⋷",
		"notinvc": "⋶",
		"NotLeftTriangleBar": "⧏̸",
		"NotLeftTriangle": "⋪",
		"NotLeftTriangleEqual": "⋬",
		"NotLess": "≮",
		"NotLessEqual": "≰",
		"NotLessGreater": "≸",
		"NotLessLess": "≪̸",
		"NotLessSlantEqual": "⩽̸",
		"NotLessTilde": "≴",
		"NotNestedGreaterGreater": "⪢̸",
		"NotNestedLessLess": "⪡̸",
		"notni": "∌",
		"notniva": "∌",
		"notnivb": "⋾",
		"notnivc": "⋽",
		"NotPrecedes": "⊀",
		"NotPrecedesEqual": "⪯̸",
		"NotPrecedesSlantEqual": "⋠",
		"NotReverseElement": "∌",
		"NotRightTriangleBar": "⧐̸",
		"NotRightTriangle": "⋫",
		"NotRightTriangleEqual": "⋭",
		"NotSquareSubset": "⊏̸",
		"NotSquareSubsetEqual": "⋢",
		"NotSquareSuperset": "⊐̸",
		"NotSquareSupersetEqual": "⋣",
		"NotSubset": "⊂⃒",
		"NotSubsetEqual": "⊈",
		"NotSucceeds": "⊁",
		"NotSucceedsEqual": "⪰̸",
		"NotSucceedsSlantEqual": "⋡",
		"NotSucceedsTilde": "≿̸",
		"NotSuperset": "⊃⃒",
		"NotSupersetEqual": "⊉",
		"NotTilde": "≁",
		"NotTildeEqual": "≄",
		"NotTildeFullEqual": "≇",
		"NotTildeTilde": "≉",
		"NotVerticalBar": "∤",
		"nparallel": "∦",
		"npar": "∦",
		"nparsl": "⫽⃥",
		"npart": "∂̸",
		"npolint": "⨔",
		"npr": "⊀",
		"nprcue": "⋠",
		"nprec": "⊀",
		"npreceq": "⪯̸",
		"npre": "⪯̸",
		"nrarrc": "⤳̸",
		"nrarr": "↛",
		"nrArr": "⇏",
		"nrarrw": "↝̸",
		"nrightarrow": "↛",
		"nRightarrow": "⇏",
		"nrtri": "⋫",
		"nrtrie": "⋭",
		"nsc": "⊁",
		"nsccue": "⋡",
		"nsce": "⪰̸",
		"Nscr": "𝒩",
		"nscr": "𝓃",
		"nshortmid": "∤",
		"nshortparallel": "∦",
		"nsim": "≁",
		"nsime": "≄",
		"nsimeq": "≄",
		"nsmid": "∤",
		"nspar": "∦",
		"nsqsube": "⋢",
		"nsqsupe": "⋣",
		"nsub": "⊄",
		"nsubE": "⫅̸",
		"nsube": "⊈",
		"nsubset": "⊂⃒",
		"nsubseteq": "⊈",
		"nsubseteqq": "⫅̸",
		"nsucc": "⊁",
		"nsucceq": "⪰̸",
		"nsup": "⊅",
		"nsupE": "⫆̸",
		"nsupe": "⊉",
		"nsupset": "⊃⃒",
		"nsupseteq": "⊉",
		"nsupseteqq": "⫆̸",
		"ntgl": "≹",
		"Ntilde": "Ñ",
		"ntilde": "ñ",
		"ntlg": "≸",
		"ntriangleleft": "⋪",
		"ntrianglelefteq": "⋬",
		"ntriangleright": "⋫",
		"ntrianglerighteq": "⋭",
		"Nu": "Ν",
		"nu": "ν",
		"num": "#",
		"numero": "№",
		"numsp": " ",
		"nvap": "≍⃒",
		"nvdash": "⊬",
		"nvDash": "⊭",
		"nVdash": "⊮",
		"nVDash": "⊯",
		"nvge": "≥⃒",
		"nvgt": ">⃒",
		"nvHarr": "⤄",
		"nvinfin": "⧞",
		"nvlArr": "⤂",
		"nvle": "≤⃒",
		"nvlt": "<⃒",
		"nvltrie": "⊴⃒",
		"nvrArr": "⤃",
		"nvrtrie": "⊵⃒",
		"nvsim": "∼⃒",
		"nwarhk": "⤣",
		"nwarr": "↖",
		"nwArr": "⇖",
		"nwarrow": "↖",
		"nwnear": "⤧",
		"Oacute": "Ó",
		"oacute": "ó",
		"oast": "⊛",
		"Ocirc": "Ô",
		"ocirc": "ô",
		"ocir": "⊚",
		"Ocy": "О",
		"ocy": "о",
		"odash": "⊝",
		"Odblac": "Ő",
		"odblac": "ő",
		"odiv": "⨸",
		"odot": "⊙",
		"odsold": "⦼",
		"OElig": "Œ",
		"oelig": "œ",
		"ofcir": "⦿",
		"Ofr": "𝔒",
		"ofr": "𝔬",
		"ogon": "˛",
		"Ograve": "Ò",
		"ograve": "ò",
		"ogt": "⧁",
		"ohbar": "⦵",
		"ohm": "Ω",
		"oint": "∮",
		"olarr": "↺",
		"olcir": "⦾",
		"olcross": "⦻",
		"oline": "‾",
		"olt": "⧀",
		"Omacr": "Ō",
		"omacr": "ō",
		"Omega": "Ω",
		"omega": "ω",
		"Omicron": "Ο",
		"omicron": "ο",
		"omid": "⦶",
		"ominus": "⊖",
		"Oopf": "𝕆",
		"oopf": "𝕠",
		"opar": "⦷",
		"OpenCurlyDoubleQuote": "“",
		"OpenCurlyQuote": "‘",
		"operp": "⦹",
		"oplus": "⊕",
		"orarr": "↻",
		"Or": "⩔",
		"or": "∨",
		"ord": "⩝",
		"order": "ℴ",
		"orderof": "ℴ",
		"ordf": "ª",
		"ordm": "º",
		"origof": "⊶",
		"oror": "⩖",
		"orslope": "⩗",
		"orv": "⩛",
		"oS": "Ⓢ",
		"Oscr": "𝒪",
		"oscr": "ℴ",
		"Oslash": "Ø",
		"oslash": "ø",
		"osol": "⊘",
		"Otilde": "Õ",
		"otilde": "õ",
		"otimesas": "⨶",
		"Otimes": "⨷",
		"otimes": "⊗",
		"Ouml": "Ö",
		"ouml": "ö",
		"ovbar": "⌽",
		"OverBar": "‾",
		"OverBrace": "⏞",
		"OverBracket": "⎴",
		"OverParenthesis": "⏜",
		"para": "¶",
		"parallel": "∥",
		"par": "∥",
		"parsim": "⫳",
		"parsl": "⫽",
		"part": "∂",
		"PartialD": "∂",
		"Pcy": "П",
		"pcy": "п",
		"percnt": "%",
		"period": ".",
		"permil": "‰",
		"perp": "⊥",
		"pertenk": "‱",
		"Pfr": "𝔓",
		"pfr": "𝔭",
		"Phi": "Φ",
		"phi": "φ",
		"phiv": "ϕ",
		"phmmat": "ℳ",
		"phone": "☎",
		"Pi": "Π",
		"pi": "π",
		"pitchfork": "⋔",
		"piv": "ϖ",
		"planck": "ℏ",
		"planckh": "ℎ",
		"plankv": "ℏ",
		"plusacir": "⨣",
		"plusb": "⊞",
		"pluscir": "⨢",
		"plus": "+",
		"plusdo": "∔",
		"plusdu": "⨥",
		"pluse": "⩲",
		"PlusMinus": "±",
		"plusmn": "±",
		"plussim": "⨦",
		"plustwo": "⨧",
		"pm": "±",
		"Poincareplane": "ℌ",
		"pointint": "⨕",
		"popf": "𝕡",
		"Popf": "ℙ",
		"pound": "£",
		"prap": "⪷",
		"Pr": "⪻",
		"pr": "≺",
		"prcue": "≼",
		"precapprox": "⪷",
		"prec": "≺",
		"preccurlyeq": "≼",
		"Precedes": "≺",
		"PrecedesEqual": "⪯",
		"PrecedesSlantEqual": "≼",
		"PrecedesTilde": "≾",
		"preceq": "⪯",
		"precnapprox": "⪹",
		"precneqq": "⪵",
		"precnsim": "⋨",
		"pre": "⪯",
		"prE": "⪳",
		"precsim": "≾",
		"prime": "′",
		"Prime": "″",
		"primes": "ℙ",
		"prnap": "⪹",
		"prnE": "⪵",
		"prnsim": "⋨",
		"prod": "∏",
		"Product": "∏",
		"profalar": "⌮",
		"profline": "⌒",
		"profsurf": "⌓",
		"prop": "∝",
		"Proportional": "∝",
		"Proportion": "∷",
		"propto": "∝",
		"prsim": "≾",
		"prurel": "⊰",
		"Pscr": "𝒫",
		"pscr": "𝓅",
		"Psi": "Ψ",
		"psi": "ψ",
		"puncsp": " ",
		"Qfr": "𝔔",
		"qfr": "𝔮",
		"qint": "⨌",
		"qopf": "𝕢",
		"Qopf": "ℚ",
		"qprime": "⁗",
		"Qscr": "𝒬",
		"qscr": "𝓆",
		"quaternions": "ℍ",
		"quatint": "⨖",
		"quest": "?",
		"questeq": "≟",
		"quot": "\"",
		"QUOT": "\"",
		"rAarr": "⇛",
		"race": "∽̱",
		"Racute": "Ŕ",
		"racute": "ŕ",
		"radic": "√",
		"raemptyv": "⦳",
		"rang": "⟩",
		"Rang": "⟫",
		"rangd": "⦒",
		"range": "⦥",
		"rangle": "⟩",
		"raquo": "»",
		"rarrap": "⥵",
		"rarrb": "⇥",
		"rarrbfs": "⤠",
		"rarrc": "⤳",
		"rarr": "→",
		"Rarr": "↠",
		"rArr": "⇒",
		"rarrfs": "⤞",
		"rarrhk": "↪",
		"rarrlp": "↬",
		"rarrpl": "⥅",
		"rarrsim": "⥴",
		"Rarrtl": "⤖",
		"rarrtl": "↣",
		"rarrw": "↝",
		"ratail": "⤚",
		"rAtail": "⤜",
		"ratio": "∶",
		"rationals": "ℚ",
		"rbarr": "⤍",
		"rBarr": "⤏",
		"RBarr": "⤐",
		"rbbrk": "❳",
		"rbrace": "}",
		"rbrack": "]",
		"rbrke": "⦌",
		"rbrksld": "⦎",
		"rbrkslu": "⦐",
		"Rcaron": "Ř",
		"rcaron": "ř",
		"Rcedil": "Ŗ",
		"rcedil": "ŗ",
		"rceil": "⌉",
		"rcub": "}",
		"Rcy": "Р",
		"rcy": "р",
		"rdca": "⤷",
		"rdldhar": "⥩",
		"rdquo": "”",
		"rdquor": "”",
		"rdsh": "↳",
		"real": "ℜ",
		"realine": "ℛ",
		"realpart": "ℜ",
		"reals": "ℝ",
		"Re": "ℜ",
		"rect": "▭",
		"reg": "®",
		"REG": "®",
		"ReverseElement": "∋",
		"ReverseEquilibrium": "⇋",
		"ReverseUpEquilibrium": "⥯",
		"rfisht": "⥽",
		"rfloor": "⌋",
		"rfr": "𝔯",
		"Rfr": "ℜ",
		"rHar": "⥤",
		"rhard": "⇁",
		"rharu": "⇀",
		"rharul": "⥬",
		"Rho": "Ρ",
		"rho": "ρ",
		"rhov": "ϱ",
		"RightAngleBracket": "⟩",
		"RightArrowBar": "⇥",
		"rightarrow": "→",
		"RightArrow": "→",
		"Rightarrow": "⇒",
		"RightArrowLeftArrow": "⇄",
		"rightarrowtail": "↣",
		"RightCeiling": "⌉",
		"RightDoubleBracket": "⟧",
		"RightDownTeeVector": "⥝",
		"RightDownVectorBar": "⥕",
		"RightDownVector": "⇂",
		"RightFloor": "⌋",
		"rightharpoondown": "⇁",
		"rightharpoonup": "⇀",
		"rightleftarrows": "⇄",
		"rightleftharpoons": "⇌",
		"rightrightarrows": "⇉",
		"rightsquigarrow": "↝",
		"RightTeeArrow": "↦",
		"RightTee": "⊢",
		"RightTeeVector": "⥛",
		"rightthreetimes": "⋌",
		"RightTriangleBar": "⧐",
		"RightTriangle": "⊳",
		"RightTriangleEqual": "⊵",
		"RightUpDownVector": "⥏",
		"RightUpTeeVector": "⥜",
		"RightUpVectorBar": "⥔",
		"RightUpVector": "↾",
		"RightVectorBar": "⥓",
		"RightVector": "⇀",
		"ring": "˚",
		"risingdotseq": "≓",
		"rlarr": "⇄",
		"rlhar": "⇌",
		"rlm": "‏",
		"rmoustache": "⎱",
		"rmoust": "⎱",
		"rnmid": "⫮",
		"roang": "⟭",
		"roarr": "⇾",
		"robrk": "⟧",
		"ropar": "⦆",
		"ropf": "𝕣",
		"Ropf": "ℝ",
		"roplus": "⨮",
		"rotimes": "⨵",
		"RoundImplies": "⥰",
		"rpar": ")",
		"rpargt": "⦔",
		"rppolint": "⨒",
		"rrarr": "⇉",
		"Rrightarrow": "⇛",
		"rsaquo": "›",
		"rscr": "𝓇",
		"Rscr": "ℛ",
		"rsh": "↱",
		"Rsh": "↱",
		"rsqb": "]",
		"rsquo": "’",
		"rsquor": "’",
		"rthree": "⋌",
		"rtimes": "⋊",
		"rtri": "▹",
		"rtrie": "⊵",
		"rtrif": "▸",
		"rtriltri": "⧎",
		"RuleDelayed": "⧴",
		"ruluhar": "⥨",
		"rx": "℞",
		"Sacute": "Ś",
		"sacute": "ś",
		"sbquo": "‚",
		"scap": "⪸",
		"Scaron": "Š",
		"scaron": "š",
		"Sc": "⪼",
		"sc": "≻",
		"sccue": "≽",
		"sce": "⪰",
		"scE": "⪴",
		"Scedil": "Ş",
		"scedil": "ş",
		"Scirc": "Ŝ",
		"scirc": "ŝ",
		"scnap": "⪺",
		"scnE": "⪶",
		"scnsim": "⋩",
		"scpolint": "⨓",
		"scsim": "≿",
		"Scy": "С",
		"scy": "с",
		"sdotb": "⊡",
		"sdot": "⋅",
		"sdote": "⩦",
		"searhk": "⤥",
		"searr": "↘",
		"seArr": "⇘",
		"searrow": "↘",
		"sect": "§",
		"semi": ";",
		"seswar": "⤩",
		"setminus": "∖",
		"setmn": "∖",
		"sext": "✶",
		"Sfr": "𝔖",
		"sfr": "𝔰",
		"sfrown": "⌢",
		"sharp": "♯",
		"SHCHcy": "Щ",
		"shchcy": "щ",
		"SHcy": "Ш",
		"shcy": "ш",
		"ShortDownArrow": "↓",
		"ShortLeftArrow": "←",
		"shortmid": "∣",
		"shortparallel": "∥",
		"ShortRightArrow": "→",
		"ShortUpArrow": "↑",
		"shy": "­",
		"Sigma": "Σ",
		"sigma": "σ",
		"sigmaf": "ς",
		"sigmav": "ς",
		"sim": "∼",
		"simdot": "⩪",
		"sime": "≃",
		"simeq": "≃",
		"simg": "⪞",
		"simgE": "⪠",
		"siml": "⪝",
		"simlE": "⪟",
		"simne": "≆",
		"simplus": "⨤",
		"simrarr": "⥲",
		"slarr": "←",
		"SmallCircle": "∘",
		"smallsetminus": "∖",
		"smashp": "⨳",
		"smeparsl": "⧤",
		"smid": "∣",
		"smile": "⌣",
		"smt": "⪪",
		"smte": "⪬",
		"smtes": "⪬︀",
		"SOFTcy": "Ь",
		"softcy": "ь",
		"solbar": "⌿",
		"solb": "⧄",
		"sol": "/",
		"Sopf": "𝕊",
		"sopf": "𝕤",
		"spades": "♠",
		"spadesuit": "♠",
		"spar": "∥",
		"sqcap": "⊓",
		"sqcaps": "⊓︀",
		"sqcup": "⊔",
		"sqcups": "⊔︀",
		"Sqrt": "√",
		"sqsub": "⊏",
		"sqsube": "⊑",
		"sqsubset": "⊏",
		"sqsubseteq": "⊑",
		"sqsup": "⊐",
		"sqsupe": "⊒",
		"sqsupset": "⊐",
		"sqsupseteq": "⊒",
		"square": "□",
		"Square": "□",
		"SquareIntersection": "⊓",
		"SquareSubset": "⊏",
		"SquareSubsetEqual": "⊑",
		"SquareSuperset": "⊐",
		"SquareSupersetEqual": "⊒",
		"SquareUnion": "⊔",
		"squarf": "▪",
		"squ": "□",
		"squf": "▪",
		"srarr": "→",
		"Sscr": "𝒮",
		"sscr": "𝓈",
		"ssetmn": "∖",
		"ssmile": "⌣",
		"sstarf": "⋆",
		"Star": "⋆",
		"star": "☆",
		"starf": "★",
		"straightepsilon": "ϵ",
		"straightphi": "ϕ",
		"strns": "¯",
		"sub": "⊂",
		"Sub": "⋐",
		"subdot": "⪽",
		"subE": "⫅",
		"sube": "⊆",
		"subedot": "⫃",
		"submult": "⫁",
		"subnE": "⫋",
		"subne": "⊊",
		"subplus": "⪿",
		"subrarr": "⥹",
		"subset": "⊂",
		"Subset": "⋐",
		"subseteq": "⊆",
		"subseteqq": "⫅",
		"SubsetEqual": "⊆",
		"subsetneq": "⊊",
		"subsetneqq": "⫋",
		"subsim": "⫇",
		"subsub": "⫕",
		"subsup": "⫓",
		"succapprox": "⪸",
		"succ": "≻",
		"succcurlyeq": "≽",
		"Succeeds": "≻",
		"SucceedsEqual": "⪰",
		"SucceedsSlantEqual": "≽",
		"SucceedsTilde": "≿",
		"succeq": "⪰",
		"succnapprox": "⪺",
		"succneqq": "⪶",
		"succnsim": "⋩",
		"succsim": "≿",
		"SuchThat": "∋",
		"sum": "∑",
		"Sum": "∑",
		"sung": "♪",
		"sup1": "¹",
		"sup2": "²",
		"sup3": "³",
		"sup": "⊃",
		"Sup": "⋑",
		"supdot": "⪾",
		"supdsub": "⫘",
		"supE": "⫆",
		"supe": "⊇",
		"supedot": "⫄",
		"Superset": "⊃",
		"SupersetEqual": "⊇",
		"suphsol": "⟉",
		"suphsub": "⫗",
		"suplarr": "⥻",
		"supmult": "⫂",
		"supnE": "⫌",
		"supne": "⊋",
		"supplus": "⫀",
		"supset": "⊃",
		"Supset": "⋑",
		"supseteq": "⊇",
		"supseteqq": "⫆",
		"supsetneq": "⊋",
		"supsetneqq": "⫌",
		"supsim": "⫈",
		"supsub": "⫔",
		"supsup": "⫖",
		"swarhk": "⤦",
		"swarr": "↙",
		"swArr": "⇙",
		"swarrow": "↙",
		"swnwar": "⤪",
		"szlig": "ß",
		"Tab": "	",
		"target": "⌖",
		"Tau": "Τ",
		"tau": "τ",
		"tbrk": "⎴",
		"Tcaron": "Ť",
		"tcaron": "ť",
		"Tcedil": "Ţ",
		"tcedil": "ţ",
		"Tcy": "Т",
		"tcy": "т",
		"tdot": "⃛",
		"telrec": "⌕",
		"Tfr": "𝔗",
		"tfr": "𝔱",
		"there4": "∴",
		"therefore": "∴",
		"Therefore": "∴",
		"Theta": "Θ",
		"theta": "θ",
		"thetasym": "ϑ",
		"thetav": "ϑ",
		"thickapprox": "≈",
		"thicksim": "∼",
		"ThickSpace": "  ",
		"ThinSpace": " ",
		"thinsp": " ",
		"thkap": "≈",
		"thksim": "∼",
		"THORN": "Þ",
		"thorn": "þ",
		"tilde": "˜",
		"Tilde": "∼",
		"TildeEqual": "≃",
		"TildeFullEqual": "≅",
		"TildeTilde": "≈",
		"timesbar": "⨱",
		"timesb": "⊠",
		"times": "×",
		"timesd": "⨰",
		"tint": "∭",
		"toea": "⤨",
		"topbot": "⌶",
		"topcir": "⫱",
		"top": "⊤",
		"Topf": "𝕋",
		"topf": "𝕥",
		"topfork": "⫚",
		"tosa": "⤩",
		"tprime": "‴",
		"trade": "™",
		"TRADE": "™",
		"triangle": "▵",
		"triangledown": "▿",
		"triangleleft": "◃",
		"trianglelefteq": "⊴",
		"triangleq": "≜",
		"triangleright": "▹",
		"trianglerighteq": "⊵",
		"tridot": "◬",
		"trie": "≜",
		"triminus": "⨺",
		"TripleDot": "⃛",
		"triplus": "⨹",
		"trisb": "⧍",
		"tritime": "⨻",
		"trpezium": "⏢",
		"Tscr": "𝒯",
		"tscr": "𝓉",
		"TScy": "Ц",
		"tscy": "ц",
		"TSHcy": "Ћ",
		"tshcy": "ћ",
		"Tstrok": "Ŧ",
		"tstrok": "ŧ",
		"twixt": "≬",
		"twoheadleftarrow": "↞",
		"twoheadrightarrow": "↠",
		"Uacute": "Ú",
		"uacute": "ú",
		"uarr": "↑",
		"Uarr": "↟",
		"uArr": "⇑",
		"Uarrocir": "⥉",
		"Ubrcy": "Ў",
		"ubrcy": "ў",
		"Ubreve": "Ŭ",
		"ubreve": "ŭ",
		"Ucirc": "Û",
		"ucirc": "û",
		"Ucy": "У",
		"ucy": "у",
		"udarr": "⇅",
		"Udblac": "Ű",
		"udblac": "ű",
		"udhar": "⥮",
		"ufisht": "⥾",
		"Ufr": "𝔘",
		"ufr": "𝔲",
		"Ugrave": "Ù",
		"ugrave": "ù",
		"uHar": "⥣",
		"uharl": "↿",
		"uharr": "↾",
		"uhblk": "▀",
		"ulcorn": "⌜",
		"ulcorner": "⌜",
		"ulcrop": "⌏",
		"ultri": "◸",
		"Umacr": "Ū",
		"umacr": "ū",
		"uml": "¨",
		"UnderBar": "_",
		"UnderBrace": "⏟",
		"UnderBracket": "⎵",
		"UnderParenthesis": "⏝",
		"Union": "⋃",
		"UnionPlus": "⊎",
		"Uogon": "Ų",
		"uogon": "ų",
		"Uopf": "𝕌",
		"uopf": "𝕦",
		"UpArrowBar": "⤒",
		"uparrow": "↑",
		"UpArrow": "↑",
		"Uparrow": "⇑",
		"UpArrowDownArrow": "⇅",
		"updownarrow": "↕",
		"UpDownArrow": "↕",
		"Updownarrow": "⇕",
		"UpEquilibrium": "⥮",
		"upharpoonleft": "↿",
		"upharpoonright": "↾",
		"uplus": "⊎",
		"UpperLeftArrow": "↖",
		"UpperRightArrow": "↗",
		"upsi": "υ",
		"Upsi": "ϒ",
		"upsih": "ϒ",
		"Upsilon": "Υ",
		"upsilon": "υ",
		"UpTeeArrow": "↥",
		"UpTee": "⊥",
		"upuparrows": "⇈",
		"urcorn": "⌝",
		"urcorner": "⌝",
		"urcrop": "⌎",
		"Uring": "Ů",
		"uring": "ů",
		"urtri": "◹",
		"Uscr": "𝒰",
		"uscr": "𝓊",
		"utdot": "⋰",
		"Utilde": "Ũ",
		"utilde": "ũ",
		"utri": "▵",
		"utrif": "▴",
		"uuarr": "⇈",
		"Uuml": "Ü",
		"uuml": "ü",
		"uwangle": "⦧",
		"vangrt": "⦜",
		"varepsilon": "ϵ",
		"varkappa": "ϰ",
		"varnothing": "∅",
		"varphi": "ϕ",
		"varpi": "ϖ",
		"varpropto": "∝",
		"varr": "↕",
		"vArr": "⇕",
		"varrho": "ϱ",
		"varsigma": "ς",
		"varsubsetneq": "⊊︀",
		"varsubsetneqq": "⫋︀",
		"varsupsetneq": "⊋︀",
		"varsupsetneqq": "⫌︀",
		"vartheta": "ϑ",
		"vartriangleleft": "⊲",
		"vartriangleright": "⊳",
		"vBar": "⫨",
		"Vbar": "⫫",
		"vBarv": "⫩",
		"Vcy": "В",
		"vcy": "в",
		"vdash": "⊢",
		"vDash": "⊨",
		"Vdash": "⊩",
		"VDash": "⊫",
		"Vdashl": "⫦",
		"veebar": "⊻",
		"vee": "∨",
		"Vee": "⋁",
		"veeeq": "≚",
		"vellip": "⋮",
		"verbar": "|",
		"Verbar": "‖",
		"vert": "|",
		"Vert": "‖",
		"VerticalBar": "∣",
		"VerticalLine": "|",
		"VerticalSeparator": "❘",
		"VerticalTilde": "≀",
		"VeryThinSpace": " ",
		"Vfr": "𝔙",
		"vfr": "𝔳",
		"vltri": "⊲",
		"vnsub": "⊂⃒",
		"vnsup": "⊃⃒",
		"Vopf": "𝕍",
		"vopf": "𝕧",
		"vprop": "∝",
		"vrtri": "⊳",
		"Vscr": "𝒱",
		"vscr": "𝓋",
		"vsubnE": "⫋︀",
		"vsubne": "⊊︀",
		"vsupnE": "⫌︀",
		"vsupne": "⊋︀",
		"Vvdash": "⊪",
		"vzigzag": "⦚",
		"Wcirc": "Ŵ",
		"wcirc": "ŵ",
		"wedbar": "⩟",
		"wedge": "∧",
		"Wedge": "⋀",
		"wedgeq": "≙",
		"weierp": "℘",
		"Wfr": "𝔚",
		"wfr": "𝔴",
		"Wopf": "𝕎",
		"wopf": "𝕨",
		"wp": "℘",
		"wr": "≀",
		"wreath": "≀",
		"Wscr": "𝒲",
		"wscr": "𝓌",
		"xcap": "⋂",
		"xcirc": "◯",
		"xcup": "⋃",
		"xdtri": "▽",
		"Xfr": "𝔛",
		"xfr": "𝔵",
		"xharr": "⟷",
		"xhArr": "⟺",
		"Xi": "Ξ",
		"xi": "ξ",
		"xlarr": "⟵",
		"xlArr": "⟸",
		"xmap": "⟼",
		"xnis": "⋻",
		"xodot": "⨀",
		"Xopf": "𝕏",
		"xopf": "𝕩",
		"xoplus": "⨁",
		"xotime": "⨂",
		"xrarr": "⟶",
		"xrArr": "⟹",
		"Xscr": "𝒳",
		"xscr": "𝓍",
		"xsqcup": "⨆",
		"xuplus": "⨄",
		"xutri": "△",
		"xvee": "⋁",
		"xwedge": "⋀",
		"Yacute": "Ý",
		"yacute": "ý",
		"YAcy": "Я",
		"yacy": "я",
		"Ycirc": "Ŷ",
		"ycirc": "ŷ",
		"Ycy": "Ы",
		"ycy": "ы",
		"yen": "¥",
		"Yfr": "𝔜",
		"yfr": "𝔶",
		"YIcy": "Ї",
		"yicy": "ї",
		"Yopf": "𝕐",
		"yopf": "𝕪",
		"Yscr": "𝒴",
		"yscr": "𝓎",
		"YUcy": "Ю",
		"yucy": "ю",
		"yuml": "ÿ",
		"Yuml": "Ÿ",
		"Zacute": "Ź",
		"zacute": "ź",
		"Zcaron": "Ž",
		"zcaron": "ž",
		"Zcy": "З",
		"zcy": "з",
		"Zdot": "Ż",
		"zdot": "ż",
		"zeetrf": "ℨ",
		"ZeroWidthSpace": "​",
		"Zeta": "Ζ",
		"zeta": "ζ",
		"zfr": "𝔷",
		"Zfr": "ℨ",
		"ZHcy": "Ж",
		"zhcy": "ж",
		"zigrarr": "⇝",
		"zopf": "𝕫",
		"Zopf": "ℤ",
		"Zscr": "𝒵",
		"zscr": "𝓏",
		"zwj": "‍",
		"zwnj": "‌"
	};
} });

//#endregion
//#region node_modules/entities/lib/maps/legacy.json
var require_legacy$1 = __commonJS({ "node_modules/entities/lib/maps/legacy.json"(exports, module) {
	module.exports = {
		"Aacute": "Á",
		"aacute": "á",
		"Acirc": "Â",
		"acirc": "â",
		"acute": "´",
		"AElig": "Æ",
		"aelig": "æ",
		"Agrave": "À",
		"agrave": "à",
		"amp": "&",
		"AMP": "&",
		"Aring": "Å",
		"aring": "å",
		"Atilde": "Ã",
		"atilde": "ã",
		"Auml": "Ä",
		"auml": "ä",
		"brvbar": "¦",
		"Ccedil": "Ç",
		"ccedil": "ç",
		"cedil": "¸",
		"cent": "¢",
		"copy": "©",
		"COPY": "©",
		"curren": "¤",
		"deg": "°",
		"divide": "÷",
		"Eacute": "É",
		"eacute": "é",
		"Ecirc": "Ê",
		"ecirc": "ê",
		"Egrave": "È",
		"egrave": "è",
		"ETH": "Ð",
		"eth": "ð",
		"Euml": "Ë",
		"euml": "ë",
		"frac12": "½",
		"frac14": "¼",
		"frac34": "¾",
		"gt": ">",
		"GT": ">",
		"Iacute": "Í",
		"iacute": "í",
		"Icirc": "Î",
		"icirc": "î",
		"iexcl": "¡",
		"Igrave": "Ì",
		"igrave": "ì",
		"iquest": "¿",
		"Iuml": "Ï",
		"iuml": "ï",
		"laquo": "«",
		"lt": "<",
		"LT": "<",
		"macr": "¯",
		"micro": "µ",
		"middot": "·",
		"nbsp": "\xA0",
		"not": "¬",
		"Ntilde": "Ñ",
		"ntilde": "ñ",
		"Oacute": "Ó",
		"oacute": "ó",
		"Ocirc": "Ô",
		"ocirc": "ô",
		"Ograve": "Ò",
		"ograve": "ò",
		"ordf": "ª",
		"ordm": "º",
		"Oslash": "Ø",
		"oslash": "ø",
		"Otilde": "Õ",
		"otilde": "õ",
		"Ouml": "Ö",
		"ouml": "ö",
		"para": "¶",
		"plusmn": "±",
		"pound": "£",
		"quot": "\"",
		"QUOT": "\"",
		"raquo": "»",
		"reg": "®",
		"REG": "®",
		"sect": "§",
		"shy": "­",
		"sup1": "¹",
		"sup2": "²",
		"sup3": "³",
		"szlig": "ß",
		"THORN": "Þ",
		"thorn": "þ",
		"times": "×",
		"Uacute": "Ú",
		"uacute": "ú",
		"Ucirc": "Û",
		"ucirc": "û",
		"Ugrave": "Ù",
		"ugrave": "ù",
		"uml": "¨",
		"Uuml": "Ü",
		"uuml": "ü",
		"Yacute": "Ý",
		"yacute": "ý",
		"yen": "¥",
		"yuml": "ÿ"
	};
} });

//#endregion
//#region node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({ "node_modules/entities/lib/maps/xml.json"(exports, module) {
	module.exports = {
		"amp": "&",
		"apos": "'",
		"gt": ">",
		"lt": "<",
		"quot": "\""
	};
} });

//#endregion
//#region node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer = __commonJS({ "node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
	var __importDefault$6 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var decode_codepoint_1$1 = __importDefault$6(require_decode_codepoint());
	var entities_json_1$2 = __importDefault$6(require_entities());
	var legacy_json_1$1 = __importDefault$6(require_legacy$1());
	var xml_json_1$2 = __importDefault$6(require_xml());
	function whitespace$1(c$2) {
		return c$2 === " " || c$2 === "\n" || c$2 === "	" || c$2 === "\f" || c$2 === "\r";
	}
	function isASCIIAlpha(c$2) {
		return c$2 >= "a" && c$2 <= "z" || c$2 >= "A" && c$2 <= "Z";
	}
	function ifElseState(upper, SUCCESS, FAILURE) {
		var lower = upper.toLowerCase();
		if (upper === lower) return function(t$9, c$2) {
			if (c$2 === lower) t$9._state = SUCCESS;
			else {
				t$9._state = FAILURE;
				t$9._index--;
			}
		};
		return function(t$9, c$2) {
			if (c$2 === lower || c$2 === upper) t$9._state = SUCCESS;
			else {
				t$9._state = FAILURE;
				t$9._index--;
			}
		};
	}
	function consumeSpecialNameChar(upper, NEXT_STATE) {
		var lower = upper.toLowerCase();
		return function(t$9, c$2) {
			if (c$2 === lower || c$2 === upper) t$9._state = NEXT_STATE;
			else {
				t$9._state = 3;
				t$9._index--;
			}
		};
	}
	var stateBeforeCdata1 = ifElseState(
		"C",
		24,
		16
		/* InDeclaration */
);
	var stateBeforeCdata2 = ifElseState(
		"D",
		25,
		16
		/* InDeclaration */
);
	var stateBeforeCdata3 = ifElseState(
		"A",
		26,
		16
		/* InDeclaration */
);
	var stateBeforeCdata4 = ifElseState(
		"T",
		27,
		16
		/* InDeclaration */
);
	var stateBeforeCdata5 = ifElseState(
		"A",
		28,
		16
		/* InDeclaration */
);
	var stateBeforeScript1 = consumeSpecialNameChar(
		"R",
		35
		/* BeforeScript2 */
);
	var stateBeforeScript2 = consumeSpecialNameChar(
		"I",
		36
		/* BeforeScript3 */
);
	var stateBeforeScript3 = consumeSpecialNameChar(
		"P",
		37
		/* BeforeScript4 */
);
	var stateBeforeScript4 = consumeSpecialNameChar(
		"T",
		38
		/* BeforeScript5 */
);
	var stateAfterScript1 = ifElseState(
		"R",
		40,
		1
		/* Text */
);
	var stateAfterScript2 = ifElseState(
		"I",
		41,
		1
		/* Text */
);
	var stateAfterScript3 = ifElseState(
		"P",
		42,
		1
		/* Text */
);
	var stateAfterScript4 = ifElseState(
		"T",
		43,
		1
		/* Text */
);
	var stateBeforeStyle1 = consumeSpecialNameChar(
		"Y",
		45
		/* BeforeStyle2 */
);
	var stateBeforeStyle2 = consumeSpecialNameChar(
		"L",
		46
		/* BeforeStyle3 */
);
	var stateBeforeStyle3 = consumeSpecialNameChar(
		"E",
		47
		/* BeforeStyle4 */
);
	var stateAfterStyle1 = ifElseState(
		"Y",
		49,
		1
		/* Text */
);
	var stateAfterStyle2 = ifElseState(
		"L",
		50,
		1
		/* Text */
);
	var stateAfterStyle3 = ifElseState(
		"E",
		51,
		1
		/* Text */
);
	var stateBeforeSpecialT = consumeSpecialNameChar(
		"I",
		54
		/* BeforeTitle1 */
);
	var stateBeforeTitle1 = consumeSpecialNameChar(
		"T",
		55
		/* BeforeTitle2 */
);
	var stateBeforeTitle2 = consumeSpecialNameChar(
		"L",
		56
		/* BeforeTitle3 */
);
	var stateBeforeTitle3 = consumeSpecialNameChar(
		"E",
		57
		/* BeforeTitle4 */
);
	var stateAfterSpecialTEnd = ifElseState(
		"I",
		58,
		1
		/* Text */
);
	var stateAfterTitle1 = ifElseState(
		"T",
		59,
		1
		/* Text */
);
	var stateAfterTitle2 = ifElseState(
		"L",
		60,
		1
		/* Text */
);
	var stateAfterTitle3 = ifElseState(
		"E",
		61,
		1
		/* Text */
);
	var stateBeforeEntity = ifElseState(
		"#",
		63,
		64
		/* InNamedEntity */
);
	var stateBeforeNumericEntity = ifElseState(
		"X",
		66,
		65
		/* InNumericEntity */
);
	var Tokenizer = function() {
		function Tokenizer$2(options, cbs) {
			var _a;
			/** The current state the tokenizer is in. */
			this._state = 1;
			/** The read buffer. */
			this.buffer = "";
			/** The beginning of the section that is currently being read. */
			this.sectionStart = 0;
			/** The index within the buffer that we are currently looking at. */
			this._index = 0;
			/**
			* Data that has already been processed will be removed from the buffer occasionally.
			* `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
			*/
			this.bufferOffset = 0;
			/** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
			this.baseState = 1;
			/** For special parsing behavior inside of script and style tags. */
			this.special = 1;
			/** Indicates whether the tokenizer has been paused. */
			this.running = true;
			/** Indicates whether the tokenizer has finished running / `.end` has been called. */
			this.ended = false;
			this.cbs = cbs;
			this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
			this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;
		}
		Tokenizer$2.prototype.reset = function() {
			this._state = 1;
			this.buffer = "";
			this.sectionStart = 0;
			this._index = 0;
			this.bufferOffset = 0;
			this.baseState = 1;
			this.special = 1;
			this.running = true;
			this.ended = false;
		};
		Tokenizer$2.prototype.write = function(chunk) {
			if (this.ended) this.cbs.onerror(Error(".write() after done!"));
			this.buffer += chunk;
			this.parse();
		};
		Tokenizer$2.prototype.end = function(chunk) {
			if (this.ended) this.cbs.onerror(Error(".end() after done!"));
			if (chunk) this.write(chunk);
			this.ended = true;
			if (this.running) this.finish();
		};
		Tokenizer$2.prototype.pause = function() {
			this.running = false;
		};
		Tokenizer$2.prototype.resume = function() {
			this.running = true;
			if (this._index < this.buffer.length) this.parse();
			if (this.ended) this.finish();
		};
		/**
		* The current index within all of the written data.
		*/
		Tokenizer$2.prototype.getAbsoluteIndex = function() {
			return this.bufferOffset + this._index;
		};
		Tokenizer$2.prototype.stateText = function(c$2) {
			if (c$2 === "<") {
				if (this._index > this.sectionStart) this.cbs.ontext(this.getSection());
				this._state = 2;
				this.sectionStart = this._index;
			} else if (this.decodeEntities && c$2 === "&" && (this.special === 1 || this.special === 4)) {
				if (this._index > this.sectionStart) this.cbs.ontext(this.getSection());
				this.baseState = 1;
				this._state = 62;
				this.sectionStart = this._index;
			}
		};
		/**
		* HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
		*
		* XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
		* We allow anything that wouldn't end the tag.
		*/
		Tokenizer$2.prototype.isTagStartChar = function(c$2) {
			return isASCIIAlpha(c$2) || this.xmlMode && !whitespace$1(c$2) && c$2 !== "/" && c$2 !== ">";
		};
		Tokenizer$2.prototype.stateBeforeTagName = function(c$2) {
			if (c$2 === "/") this._state = 5;
			else if (c$2 === "<") {
				this.cbs.ontext(this.getSection());
				this.sectionStart = this._index;
			} else if (c$2 === ">" || this.special !== 1 || whitespace$1(c$2)) this._state = 1;
			else if (c$2 === "!") {
				this._state = 15;
				this.sectionStart = this._index + 1;
			} else if (c$2 === "?") {
				this._state = 17;
				this.sectionStart = this._index + 1;
			} else if (!this.isTagStartChar(c$2)) this._state = 1;
			else {
				this._state = !this.xmlMode && (c$2 === "s" || c$2 === "S") ? 32 : !this.xmlMode && (c$2 === "t" || c$2 === "T") ? 52 : 3;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateInTagName = function(c$2) {
			if (c$2 === "/" || c$2 === ">" || whitespace$1(c$2)) {
				this.emitToken("onopentagname");
				this._state = 8;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateBeforeClosingTagName = function(c$2) {
			if (whitespace$1(c$2)) {} else if (c$2 === ">") this._state = 1;
			else if (this.special !== 1) if (this.special !== 4 && (c$2 === "s" || c$2 === "S")) this._state = 33;
			else if (this.special === 4 && (c$2 === "t" || c$2 === "T")) this._state = 53;
			else {
				this._state = 1;
				this._index--;
			}
			else if (!this.isTagStartChar(c$2)) {
				this._state = 20;
				this.sectionStart = this._index;
			} else {
				this._state = 6;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateInClosingTagName = function(c$2) {
			if (c$2 === ">" || whitespace$1(c$2)) {
				this.emitToken("onclosetag");
				this._state = 7;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateAfterClosingTagName = function(c$2) {
			if (c$2 === ">") {
				this._state = 1;
				this.sectionStart = this._index + 1;
			}
		};
		Tokenizer$2.prototype.stateBeforeAttributeName = function(c$2) {
			if (c$2 === ">") {
				this.cbs.onopentagend();
				this._state = 1;
				this.sectionStart = this._index + 1;
			} else if (c$2 === "/") this._state = 4;
			else if (!whitespace$1(c$2)) {
				this._state = 9;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateInSelfClosingTag = function(c$2) {
			if (c$2 === ">") {
				this.cbs.onselfclosingtag();
				this._state = 1;
				this.sectionStart = this._index + 1;
				this.special = 1;
			} else if (!whitespace$1(c$2)) {
				this._state = 8;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateInAttributeName = function(c$2) {
			if (c$2 === "=" || c$2 === "/" || c$2 === ">" || whitespace$1(c$2)) {
				this.cbs.onattribname(this.getSection());
				this.sectionStart = -1;
				this._state = 10;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateAfterAttributeName = function(c$2) {
			if (c$2 === "=") this._state = 11;
			else if (c$2 === "/" || c$2 === ">") {
				this.cbs.onattribend(void 0);
				this._state = 8;
				this._index--;
			} else if (!whitespace$1(c$2)) {
				this.cbs.onattribend(void 0);
				this._state = 9;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateBeforeAttributeValue = function(c$2) {
			if (c$2 === "\"") {
				this._state = 12;
				this.sectionStart = this._index + 1;
			} else if (c$2 === "'") {
				this._state = 13;
				this.sectionStart = this._index + 1;
			} else if (!whitespace$1(c$2)) {
				this._state = 14;
				this.sectionStart = this._index;
				this._index--;
			}
		};
		Tokenizer$2.prototype.handleInAttributeValue = function(c$2, quote) {
			if (c$2 === quote) {
				this.emitToken("onattribdata");
				this.cbs.onattribend(quote);
				this._state = 8;
			} else if (this.decodeEntities && c$2 === "&") {
				this.emitToken("onattribdata");
				this.baseState = this._state;
				this._state = 62;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateInAttributeValueDoubleQuotes = function(c$2) {
			this.handleInAttributeValue(c$2, "\"");
		};
		Tokenizer$2.prototype.stateInAttributeValueSingleQuotes = function(c$2) {
			this.handleInAttributeValue(c$2, "'");
		};
		Tokenizer$2.prototype.stateInAttributeValueNoQuotes = function(c$2) {
			if (whitespace$1(c$2) || c$2 === ">") {
				this.emitToken("onattribdata");
				this.cbs.onattribend(null);
				this._state = 8;
				this._index--;
			} else if (this.decodeEntities && c$2 === "&") {
				this.emitToken("onattribdata");
				this.baseState = this._state;
				this._state = 62;
				this.sectionStart = this._index;
			}
		};
		Tokenizer$2.prototype.stateBeforeDeclaration = function(c$2) {
			this._state = c$2 === "[" ? 23 : c$2 === "-" ? 18 : 16;
		};
		Tokenizer$2.prototype.stateInDeclaration = function(c$2) {
			if (c$2 === ">") {
				this.cbs.ondeclaration(this.getSection());
				this._state = 1;
				this.sectionStart = this._index + 1;
			}
		};
		Tokenizer$2.prototype.stateInProcessingInstruction = function(c$2) {
			if (c$2 === ">") {
				this.cbs.onprocessinginstruction(this.getSection());
				this._state = 1;
				this.sectionStart = this._index + 1;
			}
		};
		Tokenizer$2.prototype.stateBeforeComment = function(c$2) {
			if (c$2 === "-") {
				this._state = 19;
				this.sectionStart = this._index + 1;
			} else this._state = 16;
		};
		Tokenizer$2.prototype.stateInComment = function(c$2) {
			if (c$2 === "-") this._state = 21;
		};
		Tokenizer$2.prototype.stateInSpecialComment = function(c$2) {
			if (c$2 === ">") {
				this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
				this._state = 1;
				this.sectionStart = this._index + 1;
			}
		};
		Tokenizer$2.prototype.stateAfterComment1 = function(c$2) {
			if (c$2 === "-") this._state = 22;
			else this._state = 19;
		};
		Tokenizer$2.prototype.stateAfterComment2 = function(c$2) {
			if (c$2 === ">") {
				this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
				this._state = 1;
				this.sectionStart = this._index + 1;
			} else if (c$2 !== "-") this._state = 19;
		};
		Tokenizer$2.prototype.stateBeforeCdata6 = function(c$2) {
			if (c$2 === "[") {
				this._state = 29;
				this.sectionStart = this._index + 1;
			} else {
				this._state = 16;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateInCdata = function(c$2) {
			if (c$2 === "]") this._state = 30;
		};
		Tokenizer$2.prototype.stateAfterCdata1 = function(c$2) {
			if (c$2 === "]") this._state = 31;
			else this._state = 29;
		};
		Tokenizer$2.prototype.stateAfterCdata2 = function(c$2) {
			if (c$2 === ">") {
				this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
				this._state = 1;
				this.sectionStart = this._index + 1;
			} else if (c$2 !== "]") this._state = 29;
		};
		Tokenizer$2.prototype.stateBeforeSpecialS = function(c$2) {
			if (c$2 === "c" || c$2 === "C") this._state = 34;
			else if (c$2 === "t" || c$2 === "T") this._state = 44;
			else {
				this._state = 3;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateBeforeSpecialSEnd = function(c$2) {
			if (this.special === 2 && (c$2 === "c" || c$2 === "C")) this._state = 39;
			else if (this.special === 3 && (c$2 === "t" || c$2 === "T")) this._state = 48;
			else this._state = 1;
		};
		Tokenizer$2.prototype.stateBeforeSpecialLast = function(c$2, special) {
			if (c$2 === "/" || c$2 === ">" || whitespace$1(c$2)) this.special = special;
			this._state = 3;
			this._index--;
		};
		Tokenizer$2.prototype.stateAfterSpecialLast = function(c$2, sectionStartOffset) {
			if (c$2 === ">" || whitespace$1(c$2)) {
				this.special = 1;
				this._state = 6;
				this.sectionStart = this._index - sectionStartOffset;
				this._index--;
			} else this._state = 1;
		};
		Tokenizer$2.prototype.parseFixedEntity = function(map) {
			if (map === void 0) map = this.xmlMode ? xml_json_1$2.default : entities_json_1$2.default;
			if (this.sectionStart + 1 < this._index) {
				var entity = this.buffer.substring(this.sectionStart + 1, this._index);
				if (Object.prototype.hasOwnProperty.call(map, entity)) {
					this.emitPartial(map[entity]);
					this.sectionStart = this._index + 1;
				}
			}
		};
		Tokenizer$2.prototype.parseLegacyEntity = function() {
			var start = this.sectionStart + 1;
			var limit = Math.min(this._index - start, 6);
			while (limit >= 2) {
				var entity = this.buffer.substr(start, limit);
				if (Object.prototype.hasOwnProperty.call(legacy_json_1$1.default, entity)) {
					this.emitPartial(legacy_json_1$1.default[entity]);
					this.sectionStart += limit + 1;
					return;
				}
				limit--;
			}
		};
		Tokenizer$2.prototype.stateInNamedEntity = function(c$2) {
			if (c$2 === ";") {
				this.parseFixedEntity();
				if (this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode) this.parseLegacyEntity();
				this._state = this.baseState;
			} else if ((c$2 < "0" || c$2 > "9") && !isASCIIAlpha(c$2)) {
				if (this.xmlMode || this.sectionStart + 1 === this._index) {} else if (this.baseState !== 1) {
					if (c$2 !== "=") this.parseFixedEntity(legacy_json_1$1.default);
				} else this.parseLegacyEntity();
				this._state = this.baseState;
				this._index--;
			}
		};
		Tokenizer$2.prototype.decodeNumericEntity = function(offset, base$1, strict) {
			var sectionStart = this.sectionStart + offset;
			if (sectionStart !== this._index) {
				var entity = this.buffer.substring(sectionStart, this._index);
				var parsed = parseInt(entity, base$1);
				this.emitPartial(decode_codepoint_1$1.default(parsed));
				this.sectionStart = strict ? this._index + 1 : this._index;
			}
			this._state = this.baseState;
		};
		Tokenizer$2.prototype.stateInNumericEntity = function(c$2) {
			if (c$2 === ";") this.decodeNumericEntity(2, 10, true);
			else if (c$2 < "0" || c$2 > "9") {
				if (!this.xmlMode) this.decodeNumericEntity(2, 10, false);
				else this._state = this.baseState;
				this._index--;
			}
		};
		Tokenizer$2.prototype.stateInHexEntity = function(c$2) {
			if (c$2 === ";") this.decodeNumericEntity(3, 16, true);
			else if ((c$2 < "a" || c$2 > "f") && (c$2 < "A" || c$2 > "F") && (c$2 < "0" || c$2 > "9")) {
				if (!this.xmlMode) this.decodeNumericEntity(3, 16, false);
				else this._state = this.baseState;
				this._index--;
			}
		};
		Tokenizer$2.prototype.cleanup = function() {
			if (this.sectionStart < 0) {
				this.buffer = "";
				this.bufferOffset += this._index;
				this._index = 0;
			} else if (this.running) {
				if (this._state === 1) {
					if (this.sectionStart !== this._index) this.cbs.ontext(this.buffer.substr(this.sectionStart));
					this.buffer = "";
					this.bufferOffset += this._index;
					this._index = 0;
				} else if (this.sectionStart === this._index) {
					this.buffer = "";
					this.bufferOffset += this._index;
					this._index = 0;
				} else {
					this.buffer = this.buffer.substr(this.sectionStart);
					this._index -= this.sectionStart;
					this.bufferOffset += this.sectionStart;
				}
				this.sectionStart = 0;
			}
		};
		/**
		* Iterates through the buffer, calling the function corresponding to the current state.
		*
		* States that are more likely to be hit are higher up, as a performance improvement.
		*/
		Tokenizer$2.prototype.parse = function() {
			while (this._index < this.buffer.length && this.running) {
				var c$2 = this.buffer.charAt(this._index);
				if (this._state === 1) this.stateText(c$2);
				else if (this._state === 12) this.stateInAttributeValueDoubleQuotes(c$2);
				else if (this._state === 9) this.stateInAttributeName(c$2);
				else if (this._state === 19) this.stateInComment(c$2);
				else if (this._state === 20) this.stateInSpecialComment(c$2);
				else if (this._state === 8) this.stateBeforeAttributeName(c$2);
				else if (this._state === 3) this.stateInTagName(c$2);
				else if (this._state === 6) this.stateInClosingTagName(c$2);
				else if (this._state === 2) this.stateBeforeTagName(c$2);
				else if (this._state === 10) this.stateAfterAttributeName(c$2);
				else if (this._state === 13) this.stateInAttributeValueSingleQuotes(c$2);
				else if (this._state === 11) this.stateBeforeAttributeValue(c$2);
				else if (this._state === 5) this.stateBeforeClosingTagName(c$2);
				else if (this._state === 7) this.stateAfterClosingTagName(c$2);
				else if (this._state === 32) this.stateBeforeSpecialS(c$2);
				else if (this._state === 21) this.stateAfterComment1(c$2);
				else if (this._state === 14) this.stateInAttributeValueNoQuotes(c$2);
				else if (this._state === 4) this.stateInSelfClosingTag(c$2);
				else if (this._state === 16) this.stateInDeclaration(c$2);
				else if (this._state === 15) this.stateBeforeDeclaration(c$2);
				else if (this._state === 22) this.stateAfterComment2(c$2);
				else if (this._state === 18) this.stateBeforeComment(c$2);
				else if (this._state === 33) this.stateBeforeSpecialSEnd(c$2);
				else if (this._state === 53) stateAfterSpecialTEnd(this, c$2);
				else if (this._state === 39) stateAfterScript1(this, c$2);
				else if (this._state === 40) stateAfterScript2(this, c$2);
				else if (this._state === 41) stateAfterScript3(this, c$2);
				else if (this._state === 34) stateBeforeScript1(this, c$2);
				else if (this._state === 35) stateBeforeScript2(this, c$2);
				else if (this._state === 36) stateBeforeScript3(this, c$2);
				else if (this._state === 37) stateBeforeScript4(this, c$2);
				else if (this._state === 38) this.stateBeforeSpecialLast(
					c$2,
					2
					/* Script */
);
				else if (this._state === 42) stateAfterScript4(this, c$2);
				else if (this._state === 43) this.stateAfterSpecialLast(c$2, 6);
				else if (this._state === 44) stateBeforeStyle1(this, c$2);
				else if (this._state === 29) this.stateInCdata(c$2);
				else if (this._state === 45) stateBeforeStyle2(this, c$2);
				else if (this._state === 46) stateBeforeStyle3(this, c$2);
				else if (this._state === 47) this.stateBeforeSpecialLast(
					c$2,
					3
					/* Style */
);
				else if (this._state === 48) stateAfterStyle1(this, c$2);
				else if (this._state === 49) stateAfterStyle2(this, c$2);
				else if (this._state === 50) stateAfterStyle3(this, c$2);
				else if (this._state === 51) this.stateAfterSpecialLast(c$2, 5);
				else if (this._state === 52) stateBeforeSpecialT(this, c$2);
				else if (this._state === 54) stateBeforeTitle1(this, c$2);
				else if (this._state === 55) stateBeforeTitle2(this, c$2);
				else if (this._state === 56) stateBeforeTitle3(this, c$2);
				else if (this._state === 57) this.stateBeforeSpecialLast(
					c$2,
					4
					/* Title */
);
				else if (this._state === 58) stateAfterTitle1(this, c$2);
				else if (this._state === 59) stateAfterTitle2(this, c$2);
				else if (this._state === 60) stateAfterTitle3(this, c$2);
				else if (this._state === 61) this.stateAfterSpecialLast(c$2, 5);
				else if (this._state === 17) this.stateInProcessingInstruction(c$2);
				else if (this._state === 64) this.stateInNamedEntity(c$2);
				else if (this._state === 23) stateBeforeCdata1(this, c$2);
				else if (this._state === 62) stateBeforeEntity(this, c$2);
				else if (this._state === 24) stateBeforeCdata2(this, c$2);
				else if (this._state === 25) stateBeforeCdata3(this, c$2);
				else if (this._state === 30) this.stateAfterCdata1(c$2);
				else if (this._state === 31) this.stateAfterCdata2(c$2);
				else if (this._state === 26) stateBeforeCdata4(this, c$2);
				else if (this._state === 27) stateBeforeCdata5(this, c$2);
				else if (this._state === 28) this.stateBeforeCdata6(c$2);
				else if (this._state === 66) this.stateInHexEntity(c$2);
				else if (this._state === 65) this.stateInNumericEntity(c$2);
				else if (this._state === 63) stateBeforeNumericEntity(this, c$2);
				else this.cbs.onerror(Error("unknown _state"), this._state);
				this._index++;
			}
			this.cleanup();
		};
		Tokenizer$2.prototype.finish = function() {
			if (this.sectionStart < this._index) this.handleTrailingData();
			this.cbs.onend();
		};
		Tokenizer$2.prototype.handleTrailingData = function() {
			var data$2 = this.buffer.substr(this.sectionStart);
			if (this._state === 29 || this._state === 30 || this._state === 31) this.cbs.oncdata(data$2);
			else if (this._state === 19 || this._state === 21 || this._state === 22) this.cbs.oncomment(data$2);
			else if (this._state === 64 && !this.xmlMode) {
				this.parseLegacyEntity();
				if (this.sectionStart < this._index) {
					this._state = this.baseState;
					this.handleTrailingData();
				}
			} else if (this._state === 65 && !this.xmlMode) {
				this.decodeNumericEntity(2, 10, false);
				if (this.sectionStart < this._index) {
					this._state = this.baseState;
					this.handleTrailingData();
				}
			} else if (this._state === 66 && !this.xmlMode) {
				this.decodeNumericEntity(3, 16, false);
				if (this.sectionStart < this._index) {
					this._state = this.baseState;
					this.handleTrailingData();
				}
			} else if (this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6) this.cbs.ontext(data$2);
		};
		Tokenizer$2.prototype.getSection = function() {
			return this.buffer.substring(this.sectionStart, this._index);
		};
		Tokenizer$2.prototype.emitToken = function(name) {
			this.cbs[name](this.getSection());
			this.sectionStart = -1;
		};
		Tokenizer$2.prototype.emitPartial = function(value) {
			if (this.baseState !== 1) this.cbs.onattribdata(value);
			else this.cbs.ontext(value);
		};
		return Tokenizer$2;
	}();
	exports.default = Tokenizer;
} });

//#endregion
//#region node_modules/htmlparser2/lib/Parser.js
var require_Parser = __commonJS({ "node_modules/htmlparser2/lib/Parser.js"(exports) {
	var __importDefault$5 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Parser = void 0;
	var Tokenizer_1$1 = __importDefault$5(require_Tokenizer());
	var formTags = new Set([
		"input",
		"option",
		"optgroup",
		"select",
		"button",
		"datalist",
		"textarea"
	]);
	var pTag = new Set(["p"]);
	var openImpliesClose = {
		tr: new Set([
			"tr",
			"th",
			"td"
		]),
		th: new Set(["th"]),
		td: new Set([
			"thead",
			"th",
			"td"
		]),
		body: new Set([
			"head",
			"link",
			"script"
		]),
		li: new Set(["li"]),
		p: pTag,
		h1: pTag,
		h2: pTag,
		h3: pTag,
		h4: pTag,
		h5: pTag,
		h6: pTag,
		select: formTags,
		input: formTags,
		output: formTags,
		button: formTags,
		datalist: formTags,
		textarea: formTags,
		option: new Set(["option"]),
		optgroup: new Set(["optgroup", "option"]),
		dd: new Set(["dt", "dd"]),
		dt: new Set(["dt", "dd"]),
		address: pTag,
		article: pTag,
		aside: pTag,
		blockquote: pTag,
		details: pTag,
		div: pTag,
		dl: pTag,
		fieldset: pTag,
		figcaption: pTag,
		figure: pTag,
		footer: pTag,
		form: pTag,
		header: pTag,
		hr: pTag,
		main: pTag,
		nav: pTag,
		ol: pTag,
		pre: pTag,
		section: pTag,
		table: pTag,
		ul: pTag,
		rt: new Set(["rt", "rp"]),
		rp: new Set(["rt", "rp"]),
		tbody: new Set(["thead", "tbody"]),
		tfoot: new Set(["thead", "tbody"])
	};
	var voidElements = new Set([
		"area",
		"base",
		"basefont",
		"br",
		"col",
		"command",
		"embed",
		"frame",
		"hr",
		"img",
		"input",
		"isindex",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	]);
	var foreignContextElements = new Set(["math", "svg"]);
	var htmlIntegrationElements = new Set([
		"mi",
		"mo",
		"mn",
		"ms",
		"mtext",
		"annotation-xml",
		"foreignObject",
		"desc",
		"title"
	]);
	var reNameEnd = /\s|\//;
	var Parser = function() {
		function Parser$10(cbs, options) {
			if (options === void 0) options = {};
			var _a, _b, _c, _d, _e;
			/** The start index of the last event. */
			this.startIndex = 0;
			/** The end index of the last event. */
			this.endIndex = null;
			this.tagname = "";
			this.attribname = "";
			this.attribvalue = "";
			this.attribs = null;
			this.stack = [];
			this.foreignContext = [];
			this.options = options;
			this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
			this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
			this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
			this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1$1.default)(this.options, this);
			(_e = (_d = this.cbs).onparserinit) === null || _e === void 0 || _e.call(_d, this);
		}
		Parser$10.prototype.updatePosition = function(initialOffset) {
			if (this.endIndex === null) if (this.tokenizer.sectionStart <= initialOffset) this.startIndex = 0;
			else this.startIndex = this.tokenizer.sectionStart - initialOffset;
			else this.startIndex = this.endIndex + 1;
			this.endIndex = this.tokenizer.getAbsoluteIndex();
		};
		Parser$10.prototype.ontext = function(data$2) {
			var _a, _b;
			this.updatePosition(1);
			this.endIndex--;
			(_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, data$2);
		};
		Parser$10.prototype.onopentagname = function(name) {
			var _a, _b;
			if (this.lowerCaseTagNames) name = name.toLowerCase();
			this.tagname = name;
			if (!this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
				var el = void 0;
				while (this.stack.length > 0 && openImpliesClose[name].has(el = this.stack[this.stack.length - 1])) this.onclosetag(el);
			}
			if (this.options.xmlMode || !voidElements.has(name)) {
				this.stack.push(name);
				if (foreignContextElements.has(name)) this.foreignContext.push(true);
				else if (htmlIntegrationElements.has(name)) this.foreignContext.push(false);
			}
			(_b = (_a = this.cbs).onopentagname) === null || _b === void 0 || _b.call(_a, name);
			if (this.cbs.onopentag) this.attribs = {};
		};
		Parser$10.prototype.onopentagend = function() {
			var _a, _b;
			this.updatePosition(1);
			if (this.attribs) {
				(_b = (_a = this.cbs).onopentag) === null || _b === void 0 || _b.call(_a, this.tagname, this.attribs);
				this.attribs = null;
			}
			if (!this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname)) this.cbs.onclosetag(this.tagname);
			this.tagname = "";
		};
		Parser$10.prototype.onclosetag = function(name) {
			this.updatePosition(1);
			if (this.lowerCaseTagNames) name = name.toLowerCase();
			if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) this.foreignContext.pop();
			if (this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
				var pos = this.stack.lastIndexOf(name);
				if (pos !== -1) if (this.cbs.onclosetag) {
					pos = this.stack.length - pos;
					while (pos--) this.cbs.onclosetag(this.stack.pop());
				} else this.stack.length = pos;
				else if (name === "p" && !this.options.xmlMode) {
					this.onopentagname(name);
					this.closeCurrentTag();
				}
			} else if (!this.options.xmlMode && (name === "br" || name === "p")) {
				this.onopentagname(name);
				this.closeCurrentTag();
			}
		};
		Parser$10.prototype.onselfclosingtag = function() {
			if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) this.closeCurrentTag();
			else this.onopentagend();
		};
		Parser$10.prototype.closeCurrentTag = function() {
			var _a, _b;
			var name = this.tagname;
			this.onopentagend();
			if (this.stack[this.stack.length - 1] === name) {
				(_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, name);
				this.stack.pop();
			}
		};
		Parser$10.prototype.onattribname = function(name) {
			if (this.lowerCaseAttributeNames) name = name.toLowerCase();
			this.attribname = name;
		};
		Parser$10.prototype.onattribdata = function(value) {
			this.attribvalue += value;
		};
		Parser$10.prototype.onattribend = function(quote) {
			var _a, _b;
			(_b = (_a = this.cbs).onattribute) === null || _b === void 0 || _b.call(_a, this.attribname, this.attribvalue, quote);
			if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) this.attribs[this.attribname] = this.attribvalue;
			this.attribname = "";
			this.attribvalue = "";
		};
		Parser$10.prototype.getInstructionName = function(value) {
			var idx = value.search(reNameEnd);
			var name = idx < 0 ? value : value.substr(0, idx);
			if (this.lowerCaseTagNames) name = name.toLowerCase();
			return name;
		};
		Parser$10.prototype.ondeclaration = function(value) {
			if (this.cbs.onprocessinginstruction) {
				var name_1 = this.getInstructionName(value);
				this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
			}
		};
		Parser$10.prototype.onprocessinginstruction = function(value) {
			if (this.cbs.onprocessinginstruction) {
				var name_2 = this.getInstructionName(value);
				this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
			}
		};
		Parser$10.prototype.oncomment = function(value) {
			var _a, _b, _c, _d;
			this.updatePosition(4);
			(_b = (_a = this.cbs).oncomment) === null || _b === void 0 || _b.call(_a, value);
			(_d = (_c = this.cbs).oncommentend) === null || _d === void 0 || _d.call(_c);
		};
		Parser$10.prototype.oncdata = function(value) {
			var _a, _b, _c, _d, _e, _f;
			this.updatePosition(1);
			if (this.options.xmlMode || this.options.recognizeCDATA) {
				(_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 || _b.call(_a);
				(_d = (_c = this.cbs).ontext) === null || _d === void 0 || _d.call(_c, value);
				(_f = (_e = this.cbs).oncdataend) === null || _f === void 0 || _f.call(_e);
			} else this.oncomment("[CDATA[" + value + "]]");
		};
		Parser$10.prototype.onerror = function(err) {
			var _a, _b;
			(_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, err);
		};
		Parser$10.prototype.onend = function() {
			var _a, _b;
			if (this.cbs.onclosetag) for (var i$6 = this.stack.length; i$6 > 0; this.cbs.onclosetag(this.stack[--i$6]));
			(_b = (_a = this.cbs).onend) === null || _b === void 0 || _b.call(_a);
		};
		/**
		* Resets the parser to a blank state, ready to parse a new HTML document
		*/
		Parser$10.prototype.reset = function() {
			var _a, _b, _c, _d;
			(_b = (_a = this.cbs).onreset) === null || _b === void 0 || _b.call(_a);
			this.tokenizer.reset();
			this.tagname = "";
			this.attribname = "";
			this.attribs = null;
			this.stack = [];
			(_d = (_c = this.cbs).onparserinit) === null || _d === void 0 || _d.call(_c, this);
		};
		/**
		* Resets the parser, then parses a complete document and
		* pushes it to the handler.
		*
		* @param data Document to parse.
		*/
		Parser$10.prototype.parseComplete = function(data$2) {
			this.reset();
			this.end(data$2);
		};
		/**
		* Parses a chunk of data and calls the corresponding callbacks.
		*
		* @param chunk Chunk to parse.
		*/
		Parser$10.prototype.write = function(chunk) {
			this.tokenizer.write(chunk);
		};
		/**
		* Parses the end of the buffer and clears the stack, calls onend.
		*
		* @param chunk Optional final chunk to parse.
		*/
		Parser$10.prototype.end = function(chunk) {
			this.tokenizer.end(chunk);
		};
		/**
		* Pauses parsing. The parser won't emit events until `resume` is called.
		*/
		Parser$10.prototype.pause = function() {
			this.tokenizer.pause();
		};
		/**
		* Resumes parsing after `pause` was called.
		*/
		Parser$10.prototype.resume = function() {
			this.tokenizer.resume();
		};
		/**
		* Alias of `write`, for backwards compatibility.
		*
		* @param chunk Chunk to parse.
		* @deprecated
		*/
		Parser$10.prototype.parseChunk = function(chunk) {
			this.write(chunk);
		};
		/**
		* Alias of `end`, for backwards compatibility.
		*
		* @param chunk Optional final chunk to parse.
		* @deprecated
		*/
		Parser$10.prototype.done = function(chunk) {
			this.end(chunk);
		};
		return Parser$10;
	}();
	exports.Parser = Parser;
} });

//#endregion
//#region node_modules/domelementtype/lib/index.js
var require_lib$13 = __commonJS({ "node_modules/domelementtype/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
	/** Types of elements found in htmlparser2's DOM */
	var ElementType$2;
	(function(ElementType$3) {
		/** Type for the root element of a document */
		ElementType$3["Root"] = "root";
		/** Type for Text */
		ElementType$3["Text"] = "text";
		/** Type for <? ... ?> */
		ElementType$3["Directive"] = "directive";
		/** Type for <!-- ... --> */
		ElementType$3["Comment"] = "comment";
		/** Type for <script> tags */
		ElementType$3["Script"] = "script";
		/** Type for <style> tags */
		ElementType$3["Style"] = "style";
		/** Type for Any tag */
		ElementType$3["Tag"] = "tag";
		/** Type for <![CDATA[ ... ]]> */
		ElementType$3["CDATA"] = "cdata";
		/** Type for <!doctype ...> */
		ElementType$3["Doctype"] = "doctype";
	})(ElementType$2 = exports.ElementType || (exports.ElementType = {}));
	/**
	* Tests whether an element is a tag or not.
	*
	* @param elem Element to test
	*/
	function isTag$2(elem) {
		return elem.type === ElementType$2.Tag || elem.type === ElementType$2.Script || elem.type === ElementType$2.Style;
	}
	exports.isTag = isTag$2;
	/** Type for the root element of a document */
	exports.Root = ElementType$2.Root;
	/** Type for Text */
	exports.Text = ElementType$2.Text;
	/** Type for <? ... ?> */
	exports.Directive = ElementType$2.Directive;
	/** Type for <!-- ... --> */
	exports.Comment = ElementType$2.Comment;
	/** Type for <script> tags */
	exports.Script = ElementType$2.Script;
	/** Type for <style> tags */
	exports.Style = ElementType$2.Style;
	/** Type for Any tag */
	exports.Tag = ElementType$2.Tag;
	/** Type for <![CDATA[ ... ]]> */
	exports.CDATA = ElementType$2.CDATA;
	/** Type for <!doctype ...> */
	exports.Doctype = ElementType$2.Doctype;
} });

//#endregion
//#region node_modules/htmlparser2/node_modules/domhandler/lib/node.js
var require_node$3 = __commonJS({ "node_modules/htmlparser2/node_modules/domhandler/lib/node.js"(exports) {
	var __extends$2 = exports && exports.__extends || function() {
		var extendStatics = function(d$2, b$1) {
			extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d$3, b$2) {
				d$3.__proto__ = b$2;
			} || function(d$3, b$2) {
				for (var p$2 in b$2) if (Object.prototype.hasOwnProperty.call(b$2, p$2)) d$3[p$2] = b$2[p$2];
			};
			return extendStatics(d$2, b$1);
		};
		return function(d$2, b$1) {
			if (typeof b$1 !== "function" && b$1 !== null) throw new TypeError("Class extends value " + String(b$1) + " is not a constructor or null");
			extendStatics(d$2, b$1);
			function __() {
				this.constructor = d$2;
			}
			d$2.prototype = b$1 === null ? Object.create(b$1) : (__.prototype = b$1.prototype, new __());
		};
	}();
	var __assign$2 = exports && exports.__assign || function() {
		__assign$2 = Object.assign || function(t$9) {
			for (var s$3, i$6 = 1, n$4 = arguments.length; i$6 < n$4; i$6++) {
				s$3 = arguments[i$6];
				for (var p$2 in s$3) if (Object.prototype.hasOwnProperty.call(s$3, p$2)) t$9[p$2] = s$3[p$2];
			}
			return t$9;
		};
		return __assign$2.apply(this, arguments);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
	var domelementtype_1$4 = require_lib$13();
	var nodeTypes$1 = new Map([
		[domelementtype_1$4.ElementType.Tag, 1],
		[domelementtype_1$4.ElementType.Script, 1],
		[domelementtype_1$4.ElementType.Style, 1],
		[domelementtype_1$4.ElementType.Directive, 1],
		[domelementtype_1$4.ElementType.Text, 3],
		[domelementtype_1$4.ElementType.CDATA, 4],
		[domelementtype_1$4.ElementType.Comment, 8],
		[domelementtype_1$4.ElementType.Root, 9]
	]);
	/**
	* This object will be used as the prototype for Nodes when creating a
	* DOM-Level-1-compliant structure.
	*/
	var Node$1 = function() {
		/**
		*
		* @param type The type of the node.
		*/
		function Node$20(type) {
			this.type = type;
			/** Parent of the node */
			this.parent = null;
			/** Previous sibling */
			this.prev = null;
			/** Next sibling */
			this.next = null;
			/** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
			this.startIndex = null;
			/** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
			this.endIndex = null;
		}
		Object.defineProperty(Node$20.prototype, "nodeType", {
			get: function() {
				var _a;
				return (_a = nodeTypes$1.get(this.type)) !== null && _a !== void 0 ? _a : 1;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "parentNode", {
			get: function() {
				return this.parent;
			},
			set: function(parent) {
				this.parent = parent;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "previousSibling", {
			get: function() {
				return this.prev;
			},
			set: function(prev) {
				this.prev = prev;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "nextSibling", {
			get: function() {
				return this.next;
			},
			set: function(next) {
				this.next = next;
			},
			enumerable: false,
			configurable: true
		});
		/**
		* Clone this node, and optionally its children.
		*
		* @param recursive Clone child nodes as well.
		* @returns A clone of the node.
		*/
		Node$20.prototype.cloneNode = function(recursive) {
			if (recursive === void 0) recursive = false;
			return cloneNode$8(this, recursive);
		};
		return Node$20;
	}();
	exports.Node = Node$1;
	/**
	* A node that contains some data.
	*/
	var DataNode$1 = function(_super$2) {
		__extends$2(DataNode$2, _super$2);
		/**
		* @param type The type of the node
		* @param data The content of the data node
		*/
		function DataNode$2(type, data$2) {
			var _this = _super$2.call(this, type) || this;
			_this.data = data$2;
			return _this;
		}
		Object.defineProperty(DataNode$2.prototype, "nodeValue", {
			get: function() {
				return this.data;
			},
			set: function(data$2) {
				this.data = data$2;
			},
			enumerable: false,
			configurable: true
		});
		return DataNode$2;
	}(Node$1);
	exports.DataNode = DataNode$1;
	/**
	* Text within the document.
	*/
	var Text$1 = function(_super$2) {
		__extends$2(Text$2, _super$2);
		function Text$2(data$2) {
			return _super$2.call(this, domelementtype_1$4.ElementType.Text, data$2) || this;
		}
		return Text$2;
	}(DataNode$1);
	exports.Text = Text$1;
	/**
	* Comments within the document.
	*/
	var Comment$1 = function(_super$2) {
		__extends$2(Comment$13, _super$2);
		function Comment$13(data$2) {
			return _super$2.call(this, domelementtype_1$4.ElementType.Comment, data$2) || this;
		}
		return Comment$13;
	}(DataNode$1);
	exports.Comment = Comment$1;
	/**
	* Processing instructions, including doc types.
	*/
	var ProcessingInstruction$1 = function(_super$2) {
		__extends$2(ProcessingInstruction$2, _super$2);
		function ProcessingInstruction$2(name, data$2) {
			var _this = _super$2.call(this, domelementtype_1$4.ElementType.Directive, data$2) || this;
			_this.name = name;
			return _this;
		}
		return ProcessingInstruction$2;
	}(DataNode$1);
	exports.ProcessingInstruction = ProcessingInstruction$1;
	/**
	* A `Node` that can have children.
	*/
	var NodeWithChildren$1 = function(_super$2) {
		__extends$2(NodeWithChildren$2, _super$2);
		/**
		* @param type Type of the node.
		* @param children Children of the node. Only certain node types can have children.
		*/
		function NodeWithChildren$2(type, children) {
			var _this = _super$2.call(this, type) || this;
			_this.children = children;
			return _this;
		}
		Object.defineProperty(NodeWithChildren$2.prototype, "firstChild", {
			get: function() {
				var _a;
				return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(NodeWithChildren$2.prototype, "lastChild", {
			get: function() {
				return this.children.length > 0 ? this.children[this.children.length - 1] : null;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(NodeWithChildren$2.prototype, "childNodes", {
			get: function() {
				return this.children;
			},
			set: function(children) {
				this.children = children;
			},
			enumerable: false,
			configurable: true
		});
		return NodeWithChildren$2;
	}(Node$1);
	exports.NodeWithChildren = NodeWithChildren$1;
	/**
	* The root node of the document.
	*/
	var Document$1 = function(_super$2) {
		__extends$2(Document$7, _super$2);
		function Document$7(children) {
			return _super$2.call(this, domelementtype_1$4.ElementType.Root, children) || this;
		}
		return Document$7;
	}(NodeWithChildren$1);
	exports.Document = Document$1;
	/**
	* An element within the DOM.
	*/
	var Element$1 = function(_super$2) {
		__extends$2(Element$2, _super$2);
		/**
		* @param name Name of the tag, eg. `div`, `span`.
		* @param attribs Object mapping attribute names to attribute values.
		* @param children Children of the node.
		*/
		function Element$2(name, attribs, children, type) {
			if (children === void 0) children = [];
			if (type === void 0) type = name === "script" ? domelementtype_1$4.ElementType.Script : name === "style" ? domelementtype_1$4.ElementType.Style : domelementtype_1$4.ElementType.Tag;
			var _this = _super$2.call(this, type, children) || this;
			_this.name = name;
			_this.attribs = attribs;
			return _this;
		}
		Object.defineProperty(Element$2.prototype, "tagName", {
			get: function() {
				return this.name;
			},
			set: function(name) {
				this.name = name;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Element$2.prototype, "attributes", {
			get: function() {
				var _this = this;
				return Object.keys(this.attribs).map(function(name) {
					var _a, _b;
					return {
						name,
						value: _this.attribs[name],
						namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
						prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
					};
				});
			},
			enumerable: false,
			configurable: true
		});
		return Element$2;
	}(NodeWithChildren$1);
	exports.Element = Element$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node is a `Element`, `false` otherwise.
	*/
	function isTag$1(node) {
		return (0, domelementtype_1$4.isTag)(node);
	}
	exports.isTag = isTag$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `CDATA`, `false` otherwise.
	*/
	function isCDATA$1(node) {
		return node.type === domelementtype_1$4.ElementType.CDATA;
	}
	exports.isCDATA = isCDATA$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `Text`, `false` otherwise.
	*/
	function isText$1(node) {
		return node.type === domelementtype_1$4.ElementType.Text;
	}
	exports.isText = isText$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `Comment`, `false` otherwise.
	*/
	function isComment$1(node) {
		return node.type === domelementtype_1$4.ElementType.Comment;
	}
	exports.isComment = isComment$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	*/
	function isDirective$2(node) {
		return node.type === domelementtype_1$4.ElementType.Directive;
	}
	exports.isDirective = isDirective$2;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	*/
	function isDocument$1(node) {
		return node.type === domelementtype_1$4.ElementType.Root;
	}
	exports.isDocument = isDocument$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
	*/
	function hasChildren$1(node) {
		return Object.prototype.hasOwnProperty.call(node, "children");
	}
	exports.hasChildren = hasChildren$1;
	/**
	* Clone a node, and optionally its children.
	*
	* @param recursive Clone child nodes as well.
	* @returns A clone of the node.
	*/
	function cloneNode$8(node, recursive) {
		if (recursive === void 0) recursive = false;
		var result;
		if (isText$1(node)) result = new Text$1(node.data);
		else if (isComment$1(node)) result = new Comment$1(node.data);
		else if (isTag$1(node)) {
			var children = recursive ? cloneChildren$1(node.children) : [];
			var clone_1 = new Element$1(node.name, __assign$2({}, node.attribs), children);
			children.forEach(function(child) {
				return child.parent = clone_1;
			});
			if (node.namespace != null) clone_1.namespace = node.namespace;
			if (node["x-attribsNamespace"]) clone_1["x-attribsNamespace"] = __assign$2({}, node["x-attribsNamespace"]);
			if (node["x-attribsPrefix"]) clone_1["x-attribsPrefix"] = __assign$2({}, node["x-attribsPrefix"]);
			result = clone_1;
		} else if (isCDATA$1(node)) {
			var children = recursive ? cloneChildren$1(node.children) : [];
			var clone_2 = new NodeWithChildren$1(domelementtype_1$4.ElementType.CDATA, children);
			children.forEach(function(child) {
				return child.parent = clone_2;
			});
			result = clone_2;
		} else if (isDocument$1(node)) {
			var children = recursive ? cloneChildren$1(node.children) : [];
			var clone_3 = new Document$1(children);
			children.forEach(function(child) {
				return child.parent = clone_3;
			});
			if (node["x-mode"]) clone_3["x-mode"] = node["x-mode"];
			result = clone_3;
		} else if (isDirective$2(node)) {
			var instruction = new ProcessingInstruction$1(node.name, node.data);
			if (node["x-name"] != null) {
				instruction["x-name"] = node["x-name"];
				instruction["x-publicId"] = node["x-publicId"];
				instruction["x-systemId"] = node["x-systemId"];
			}
			result = instruction;
		} else throw new Error("Not implemented yet: ".concat(node.type));
		result.startIndex = node.startIndex;
		result.endIndex = node.endIndex;
		if (node.sourceCodeLocation != null) result.sourceCodeLocation = node.sourceCodeLocation;
		return result;
	}
	exports.cloneNode = cloneNode$8;
	function cloneChildren$1(childs) {
		var children = childs.map(function(child) {
			return cloneNode$8(child, true);
		});
		for (var i$6 = 1; i$6 < children.length; i$6++) {
			children[i$6].prev = children[i$6 - 1];
			children[i$6 - 1].next = children[i$6];
		}
		return children;
	}
} });

//#endregion
//#region node_modules/htmlparser2/node_modules/domhandler/lib/index.js
var require_lib$12 = __commonJS({ "node_modules/htmlparser2/node_modules/domhandler/lib/index.js"(exports) {
	var __createBinding$5 = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		var desc = Object.getOwnPropertyDescriptor(m$2, k$1);
		if (!desc || ("get" in desc ? !m$2.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		};
		Object.defineProperty(o$2, k2, desc);
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __exportStar$3 = exports && exports.__exportStar || function(m$2, exports$1) {
		for (var p$2 in m$2) if (p$2 !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p$2)) __createBinding$5(exports$1, m$2, p$2);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DomHandler = void 0;
	var domelementtype_1$3 = require_lib$13();
	var node_1$1 = require_node$3();
	__exportStar$3(require_node$3(), exports);
	var reWhitespace$1 = /\s+/g;
	var defaultOpts$1 = {
		normalizeWhitespace: false,
		withStartIndices: false,
		withEndIndices: false,
		xmlMode: false
	};
	var DomHandler$1 = function() {
		/**
		* @param callback Called once parsing has completed.
		* @param options Settings for the handler.
		* @param elementCB Callback whenever a tag is closed.
		*/
		function DomHandler$2(callback, options, elementCB) {
			/** The elements of the DOM */
			this.dom = [];
			/** The root element for the DOM */
			this.root = new node_1$1.Document(this.dom);
			/** Indicated whether parsing has been completed. */
			this.done = false;
			/** Stack of open tags. */
			this.tagStack = [this.root];
			/** A data node that is still being written to. */
			this.lastNode = null;
			/** Reference to the parser instance. Used for location information. */
			this.parser = null;
			if (typeof options === "function") {
				elementCB = options;
				options = defaultOpts$1;
			}
			if (typeof callback === "object") {
				options = callback;
				callback = void 0;
			}
			this.callback = callback !== null && callback !== void 0 ? callback : null;
			this.options = options !== null && options !== void 0 ? options : defaultOpts$1;
			this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
		}
		DomHandler$2.prototype.onparserinit = function(parser$5) {
			this.parser = parser$5;
		};
		DomHandler$2.prototype.onreset = function() {
			this.dom = [];
			this.root = new node_1$1.Document(this.dom);
			this.done = false;
			this.tagStack = [this.root];
			this.lastNode = null;
			this.parser = null;
		};
		DomHandler$2.prototype.onend = function() {
			if (this.done) return;
			this.done = true;
			this.parser = null;
			this.handleCallback(null);
		};
		DomHandler$2.prototype.onerror = function(error) {
			this.handleCallback(error);
		};
		DomHandler$2.prototype.onclosetag = function() {
			this.lastNode = null;
			var elem = this.tagStack.pop();
			if (this.options.withEndIndices) elem.endIndex = this.parser.endIndex;
			if (this.elementCB) this.elementCB(elem);
		};
		DomHandler$2.prototype.onopentag = function(name, attribs) {
			var type = this.options.xmlMode ? domelementtype_1$3.ElementType.Tag : void 0;
			var element = new node_1$1.Element(name, attribs, void 0, type);
			this.addNode(element);
			this.tagStack.push(element);
		};
		DomHandler$2.prototype.ontext = function(data$2) {
			var normalizeWhitespace = this.options.normalizeWhitespace;
			var lastNode = this.lastNode;
			if (lastNode && lastNode.type === domelementtype_1$3.ElementType.Text) {
				if (normalizeWhitespace) lastNode.data = (lastNode.data + data$2).replace(reWhitespace$1, " ");
				else lastNode.data += data$2;
				if (this.options.withEndIndices) lastNode.endIndex = this.parser.endIndex;
			} else {
				if (normalizeWhitespace) data$2 = data$2.replace(reWhitespace$1, " ");
				var node = new node_1$1.Text(data$2);
				this.addNode(node);
				this.lastNode = node;
			}
		};
		DomHandler$2.prototype.oncomment = function(data$2) {
			if (this.lastNode && this.lastNode.type === domelementtype_1$3.ElementType.Comment) {
				this.lastNode.data += data$2;
				return;
			}
			var node = new node_1$1.Comment(data$2);
			this.addNode(node);
			this.lastNode = node;
		};
		DomHandler$2.prototype.oncommentend = function() {
			this.lastNode = null;
		};
		DomHandler$2.prototype.oncdatastart = function() {
			var text = new node_1$1.Text("");
			var node = new node_1$1.NodeWithChildren(domelementtype_1$3.ElementType.CDATA, [text]);
			this.addNode(node);
			text.parent = node;
			this.lastNode = text;
		};
		DomHandler$2.prototype.oncdataend = function() {
			this.lastNode = null;
		};
		DomHandler$2.prototype.onprocessinginstruction = function(name, data$2) {
			var node = new node_1$1.ProcessingInstruction(name, data$2);
			this.addNode(node);
		};
		DomHandler$2.prototype.handleCallback = function(error) {
			if (typeof this.callback === "function") this.callback(error, this.dom);
			else if (error) throw error;
		};
		DomHandler$2.prototype.addNode = function(node) {
			var parent = this.tagStack[this.tagStack.length - 1];
			var previousSibling = parent.children[parent.children.length - 1];
			if (this.options.withStartIndices) node.startIndex = this.parser.startIndex;
			if (this.options.withEndIndices) node.endIndex = this.parser.endIndex;
			parent.children.push(node);
			if (previousSibling) {
				node.prev = previousSibling;
				previousSibling.next = node;
			}
			node.parent = parent;
			this.lastNode = null;
		};
		return DomHandler$2;
	}();
	exports.DomHandler = DomHandler$1;
	exports.default = DomHandler$1;
} });

//#endregion
//#region node_modules/domutils/node_modules/domhandler/lib/node.js
var require_node$2 = __commonJS({ "node_modules/domutils/node_modules/domhandler/lib/node.js"(exports) {
	var __extends$1 = exports && exports.__extends || function() {
		var extendStatics = function(d$2, b$1) {
			extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d$3, b$2) {
				d$3.__proto__ = b$2;
			} || function(d$3, b$2) {
				for (var p$2 in b$2) if (Object.prototype.hasOwnProperty.call(b$2, p$2)) d$3[p$2] = b$2[p$2];
			};
			return extendStatics(d$2, b$1);
		};
		return function(d$2, b$1) {
			if (typeof b$1 !== "function" && b$1 !== null) throw new TypeError("Class extends value " + String(b$1) + " is not a constructor or null");
			extendStatics(d$2, b$1);
			function __() {
				this.constructor = d$2;
			}
			d$2.prototype = b$1 === null ? Object.create(b$1) : (__.prototype = b$1.prototype, new __());
		};
	}();
	var __assign$1 = exports && exports.__assign || function() {
		__assign$1 = Object.assign || function(t$9) {
			for (var s$3, i$6 = 1, n$4 = arguments.length; i$6 < n$4; i$6++) {
				s$3 = arguments[i$6];
				for (var p$2 in s$3) if (Object.prototype.hasOwnProperty.call(s$3, p$2)) t$9[p$2] = s$3[p$2];
			}
			return t$9;
		};
		return __assign$1.apply(this, arguments);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
	var domelementtype_1$2 = require_lib$13();
	var nodeTypes = new Map([
		[domelementtype_1$2.ElementType.Tag, 1],
		[domelementtype_1$2.ElementType.Script, 1],
		[domelementtype_1$2.ElementType.Style, 1],
		[domelementtype_1$2.ElementType.Directive, 1],
		[domelementtype_1$2.ElementType.Text, 3],
		[domelementtype_1$2.ElementType.CDATA, 4],
		[domelementtype_1$2.ElementType.Comment, 8],
		[domelementtype_1$2.ElementType.Root, 9]
	]);
	/**
	* This object will be used as the prototype for Nodes when creating a
	* DOM-Level-1-compliant structure.
	*/
	var Node = function() {
		/**
		*
		* @param type The type of the node.
		*/
		function Node$20(type) {
			this.type = type;
			/** Parent of the node */
			this.parent = null;
			/** Previous sibling */
			this.prev = null;
			/** Next sibling */
			this.next = null;
			/** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
			this.startIndex = null;
			/** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
			this.endIndex = null;
		}
		Object.defineProperty(Node$20.prototype, "nodeType", {
			get: function() {
				var _a;
				return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "parentNode", {
			get: function() {
				return this.parent;
			},
			set: function(parent) {
				this.parent = parent;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "previousSibling", {
			get: function() {
				return this.prev;
			},
			set: function(prev) {
				this.prev = prev;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Node$20.prototype, "nextSibling", {
			get: function() {
				return this.next;
			},
			set: function(next) {
				this.next = next;
			},
			enumerable: false,
			configurable: true
		});
		/**
		* Clone this node, and optionally its children.
		*
		* @param recursive Clone child nodes as well.
		* @returns A clone of the node.
		*/
		Node$20.prototype.cloneNode = function(recursive) {
			if (recursive === void 0) recursive = false;
			return cloneNode$7(this, recursive);
		};
		return Node$20;
	}();
	exports.Node = Node;
	/**
	* A node that contains some data.
	*/
	var DataNode = function(_super$2) {
		__extends$1(DataNode$2, _super$2);
		/**
		* @param type The type of the node
		* @param data The content of the data node
		*/
		function DataNode$2(type, data$2) {
			var _this = _super$2.call(this, type) || this;
			_this.data = data$2;
			return _this;
		}
		Object.defineProperty(DataNode$2.prototype, "nodeValue", {
			get: function() {
				return this.data;
			},
			set: function(data$2) {
				this.data = data$2;
			},
			enumerable: false,
			configurable: true
		});
		return DataNode$2;
	}(Node);
	exports.DataNode = DataNode;
	/**
	* Text within the document.
	*/
	var Text = function(_super$2) {
		__extends$1(Text$2, _super$2);
		function Text$2(data$2) {
			return _super$2.call(this, domelementtype_1$2.ElementType.Text, data$2) || this;
		}
		return Text$2;
	}(DataNode);
	exports.Text = Text;
	/**
	* Comments within the document.
	*/
	var Comment = function(_super$2) {
		__extends$1(Comment$13, _super$2);
		function Comment$13(data$2) {
			return _super$2.call(this, domelementtype_1$2.ElementType.Comment, data$2) || this;
		}
		return Comment$13;
	}(DataNode);
	exports.Comment = Comment;
	/**
	* Processing instructions, including doc types.
	*/
	var ProcessingInstruction = function(_super$2) {
		__extends$1(ProcessingInstruction$2, _super$2);
		function ProcessingInstruction$2(name, data$2) {
			var _this = _super$2.call(this, domelementtype_1$2.ElementType.Directive, data$2) || this;
			_this.name = name;
			return _this;
		}
		return ProcessingInstruction$2;
	}(DataNode);
	exports.ProcessingInstruction = ProcessingInstruction;
	/**
	* A `Node` that can have children.
	*/
	var NodeWithChildren = function(_super$2) {
		__extends$1(NodeWithChildren$2, _super$2);
		/**
		* @param type Type of the node.
		* @param children Children of the node. Only certain node types can have children.
		*/
		function NodeWithChildren$2(type, children) {
			var _this = _super$2.call(this, type) || this;
			_this.children = children;
			return _this;
		}
		Object.defineProperty(NodeWithChildren$2.prototype, "firstChild", {
			get: function() {
				var _a;
				return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(NodeWithChildren$2.prototype, "lastChild", {
			get: function() {
				return this.children.length > 0 ? this.children[this.children.length - 1] : null;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(NodeWithChildren$2.prototype, "childNodes", {
			get: function() {
				return this.children;
			},
			set: function(children) {
				this.children = children;
			},
			enumerable: false,
			configurable: true
		});
		return NodeWithChildren$2;
	}(Node);
	exports.NodeWithChildren = NodeWithChildren;
	/**
	* The root node of the document.
	*/
	var Document = function(_super$2) {
		__extends$1(Document$7, _super$2);
		function Document$7(children) {
			return _super$2.call(this, domelementtype_1$2.ElementType.Root, children) || this;
		}
		return Document$7;
	}(NodeWithChildren);
	exports.Document = Document;
	/**
	* An element within the DOM.
	*/
	var Element = function(_super$2) {
		__extends$1(Element$2, _super$2);
		/**
		* @param name Name of the tag, eg. `div`, `span`.
		* @param attribs Object mapping attribute names to attribute values.
		* @param children Children of the node.
		*/
		function Element$2(name, attribs, children, type) {
			if (children === void 0) children = [];
			if (type === void 0) type = name === "script" ? domelementtype_1$2.ElementType.Script : name === "style" ? domelementtype_1$2.ElementType.Style : domelementtype_1$2.ElementType.Tag;
			var _this = _super$2.call(this, type, children) || this;
			_this.name = name;
			_this.attribs = attribs;
			return _this;
		}
		Object.defineProperty(Element$2.prototype, "tagName", {
			get: function() {
				return this.name;
			},
			set: function(name) {
				this.name = name;
			},
			enumerable: false,
			configurable: true
		});
		Object.defineProperty(Element$2.prototype, "attributes", {
			get: function() {
				var _this = this;
				return Object.keys(this.attribs).map(function(name) {
					var _a, _b;
					return {
						name,
						value: _this.attribs[name],
						namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
						prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
					};
				});
			},
			enumerable: false,
			configurable: true
		});
		return Element$2;
	}(NodeWithChildren);
	exports.Element = Element;
	/**
	* @param node Node to check.
	* @returns `true` if the node is a `Element`, `false` otherwise.
	*/
	function isTag(node) {
		return (0, domelementtype_1$2.isTag)(node);
	}
	exports.isTag = isTag;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `CDATA`, `false` otherwise.
	*/
	function isCDATA(node) {
		return node.type === domelementtype_1$2.ElementType.CDATA;
	}
	exports.isCDATA = isCDATA;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `Text`, `false` otherwise.
	*/
	function isText(node) {
		return node.type === domelementtype_1$2.ElementType.Text;
	}
	exports.isText = isText;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `Comment`, `false` otherwise.
	*/
	function isComment(node) {
		return node.type === domelementtype_1$2.ElementType.Comment;
	}
	exports.isComment = isComment;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	*/
	function isDirective$1(node) {
		return node.type === domelementtype_1$2.ElementType.Directive;
	}
	exports.isDirective = isDirective$1;
	/**
	* @param node Node to check.
	* @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
	*/
	function isDocument(node) {
		return node.type === domelementtype_1$2.ElementType.Root;
	}
	exports.isDocument = isDocument;
	/**
	* @param node Node to check.
	* @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
	*/
	function hasChildren(node) {
		return Object.prototype.hasOwnProperty.call(node, "children");
	}
	exports.hasChildren = hasChildren;
	/**
	* Clone a node, and optionally its children.
	*
	* @param recursive Clone child nodes as well.
	* @returns A clone of the node.
	*/
	function cloneNode$7(node, recursive) {
		if (recursive === void 0) recursive = false;
		var result;
		if (isText(node)) result = new Text(node.data);
		else if (isComment(node)) result = new Comment(node.data);
		else if (isTag(node)) {
			var children = recursive ? cloneChildren(node.children) : [];
			var clone_1 = new Element(node.name, __assign$1({}, node.attribs), children);
			children.forEach(function(child) {
				return child.parent = clone_1;
			});
			if (node.namespace != null) clone_1.namespace = node.namespace;
			if (node["x-attribsNamespace"]) clone_1["x-attribsNamespace"] = __assign$1({}, node["x-attribsNamespace"]);
			if (node["x-attribsPrefix"]) clone_1["x-attribsPrefix"] = __assign$1({}, node["x-attribsPrefix"]);
			result = clone_1;
		} else if (isCDATA(node)) {
			var children = recursive ? cloneChildren(node.children) : [];
			var clone_2 = new NodeWithChildren(domelementtype_1$2.ElementType.CDATA, children);
			children.forEach(function(child) {
				return child.parent = clone_2;
			});
			result = clone_2;
		} else if (isDocument(node)) {
			var children = recursive ? cloneChildren(node.children) : [];
			var clone_3 = new Document(children);
			children.forEach(function(child) {
				return child.parent = clone_3;
			});
			if (node["x-mode"]) clone_3["x-mode"] = node["x-mode"];
			result = clone_3;
		} else if (isDirective$1(node)) {
			var instruction = new ProcessingInstruction(node.name, node.data);
			if (node["x-name"] != null) {
				instruction["x-name"] = node["x-name"];
				instruction["x-publicId"] = node["x-publicId"];
				instruction["x-systemId"] = node["x-systemId"];
			}
			result = instruction;
		} else throw new Error("Not implemented yet: ".concat(node.type));
		result.startIndex = node.startIndex;
		result.endIndex = node.endIndex;
		if (node.sourceCodeLocation != null) result.sourceCodeLocation = node.sourceCodeLocation;
		return result;
	}
	exports.cloneNode = cloneNode$7;
	function cloneChildren(childs) {
		var children = childs.map(function(child) {
			return cloneNode$7(child, true);
		});
		for (var i$6 = 1; i$6 < children.length; i$6++) {
			children[i$6].prev = children[i$6 - 1];
			children[i$6 - 1].next = children[i$6];
		}
		return children;
	}
} });

//#endregion
//#region node_modules/domutils/node_modules/domhandler/lib/index.js
var require_lib$11 = __commonJS({ "node_modules/domutils/node_modules/domhandler/lib/index.js"(exports) {
	var __createBinding$4 = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		var desc = Object.getOwnPropertyDescriptor(m$2, k$1);
		if (!desc || ("get" in desc ? !m$2.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		};
		Object.defineProperty(o$2, k2, desc);
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __exportStar$2 = exports && exports.__exportStar || function(m$2, exports$1) {
		for (var p$2 in m$2) if (p$2 !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p$2)) __createBinding$4(exports$1, m$2, p$2);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DomHandler = void 0;
	var domelementtype_1$1 = require_lib$13();
	var node_1 = require_node$2();
	__exportStar$2(require_node$2(), exports);
	var reWhitespace = /\s+/g;
	var defaultOpts = {
		normalizeWhitespace: false,
		withStartIndices: false,
		withEndIndices: false,
		xmlMode: false
	};
	var DomHandler = function() {
		/**
		* @param callback Called once parsing has completed.
		* @param options Settings for the handler.
		* @param elementCB Callback whenever a tag is closed.
		*/
		function DomHandler$2(callback, options, elementCB) {
			/** The elements of the DOM */
			this.dom = [];
			/** The root element for the DOM */
			this.root = new node_1.Document(this.dom);
			/** Indicated whether parsing has been completed. */
			this.done = false;
			/** Stack of open tags. */
			this.tagStack = [this.root];
			/** A data node that is still being written to. */
			this.lastNode = null;
			/** Reference to the parser instance. Used for location information. */
			this.parser = null;
			if (typeof options === "function") {
				elementCB = options;
				options = defaultOpts;
			}
			if (typeof callback === "object") {
				options = callback;
				callback = void 0;
			}
			this.callback = callback !== null && callback !== void 0 ? callback : null;
			this.options = options !== null && options !== void 0 ? options : defaultOpts;
			this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
		}
		DomHandler$2.prototype.onparserinit = function(parser$5) {
			this.parser = parser$5;
		};
		DomHandler$2.prototype.onreset = function() {
			this.dom = [];
			this.root = new node_1.Document(this.dom);
			this.done = false;
			this.tagStack = [this.root];
			this.lastNode = null;
			this.parser = null;
		};
		DomHandler$2.prototype.onend = function() {
			if (this.done) return;
			this.done = true;
			this.parser = null;
			this.handleCallback(null);
		};
		DomHandler$2.prototype.onerror = function(error) {
			this.handleCallback(error);
		};
		DomHandler$2.prototype.onclosetag = function() {
			this.lastNode = null;
			var elem = this.tagStack.pop();
			if (this.options.withEndIndices) elem.endIndex = this.parser.endIndex;
			if (this.elementCB) this.elementCB(elem);
		};
		DomHandler$2.prototype.onopentag = function(name, attribs) {
			var type = this.options.xmlMode ? domelementtype_1$1.ElementType.Tag : void 0;
			var element = new node_1.Element(name, attribs, void 0, type);
			this.addNode(element);
			this.tagStack.push(element);
		};
		DomHandler$2.prototype.ontext = function(data$2) {
			var normalizeWhitespace = this.options.normalizeWhitespace;
			var lastNode = this.lastNode;
			if (lastNode && lastNode.type === domelementtype_1$1.ElementType.Text) {
				if (normalizeWhitespace) lastNode.data = (lastNode.data + data$2).replace(reWhitespace, " ");
				else lastNode.data += data$2;
				if (this.options.withEndIndices) lastNode.endIndex = this.parser.endIndex;
			} else {
				if (normalizeWhitespace) data$2 = data$2.replace(reWhitespace, " ");
				var node = new node_1.Text(data$2);
				this.addNode(node);
				this.lastNode = node;
			}
		};
		DomHandler$2.prototype.oncomment = function(data$2) {
			if (this.lastNode && this.lastNode.type === domelementtype_1$1.ElementType.Comment) {
				this.lastNode.data += data$2;
				return;
			}
			var node = new node_1.Comment(data$2);
			this.addNode(node);
			this.lastNode = node;
		};
		DomHandler$2.prototype.oncommentend = function() {
			this.lastNode = null;
		};
		DomHandler$2.prototype.oncdatastart = function() {
			var text = new node_1.Text("");
			var node = new node_1.NodeWithChildren(domelementtype_1$1.ElementType.CDATA, [text]);
			this.addNode(node);
			text.parent = node;
			this.lastNode = text;
		};
		DomHandler$2.prototype.oncdataend = function() {
			this.lastNode = null;
		};
		DomHandler$2.prototype.onprocessinginstruction = function(name, data$2) {
			var node = new node_1.ProcessingInstruction(name, data$2);
			this.addNode(node);
		};
		DomHandler$2.prototype.handleCallback = function(error) {
			if (typeof this.callback === "function") this.callback(error, this.dom);
			else if (error) throw error;
		};
		DomHandler$2.prototype.addNode = function(node) {
			var parent = this.tagStack[this.tagStack.length - 1];
			var previousSibling = parent.children[parent.children.length - 1];
			if (this.options.withStartIndices) node.startIndex = this.parser.startIndex;
			if (this.options.withEndIndices) node.endIndex = this.parser.endIndex;
			parent.children.push(node);
			if (previousSibling) {
				node.prev = previousSibling;
				previousSibling.next = node;
			}
			node.parent = parent;
			this.lastNode = null;
		};
		return DomHandler$2;
	}();
	exports.DomHandler = DomHandler;
	exports.default = DomHandler;
} });

//#endregion
//#region node_modules/entities/lib/decode.js
var require_decode = __commonJS({ "node_modules/entities/lib/decode.js"(exports) {
	var __importDefault$4 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
	var entities_json_1$1 = __importDefault$4(require_entities());
	var legacy_json_1 = __importDefault$4(require_legacy$1());
	var xml_json_1$1 = __importDefault$4(require_xml());
	var decode_codepoint_1 = __importDefault$4(require_decode_codepoint());
	var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
	exports.decodeXML = getStrictDecoder(xml_json_1$1.default);
	exports.decodeHTMLStrict = getStrictDecoder(entities_json_1$1.default);
	function getStrictDecoder(map) {
		var replace = getReplacer(map);
		return function(str$4) {
			return String(str$4).replace(strictEntityRe, replace);
		};
	}
	var sorter = function(a$1, b$1) {
		return a$1 < b$1 ? 1 : -1;
	};
	exports.decodeHTML = function() {
		var legacy$2 = Object.keys(legacy_json_1.default).sort(sorter);
		var keys$1 = Object.keys(entities_json_1$1.default).sort(sorter);
		for (var i$6 = 0, j$1 = 0; i$6 < keys$1.length; i$6++) if (legacy$2[j$1] === keys$1[i$6]) {
			keys$1[i$6] += ";?";
			j$1++;
		} else keys$1[i$6] += ";";
		var re = new RegExp("&(?:" + keys$1.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
		var replace = getReplacer(entities_json_1$1.default);
		function replacer$1(str$4) {
			if (str$4.substr(-1) !== ";") str$4 += ";";
			return replace(str$4);
		}
		return function(str$4) {
			return String(str$4).replace(re, replacer$1);
		};
	}();
	function getReplacer(map) {
		return function replace(str$4) {
			if (str$4.charAt(1) === "#") {
				var secondChar = str$4.charAt(2);
				if (secondChar === "X" || secondChar === "x") return decode_codepoint_1.default(parseInt(str$4.substr(3), 16));
				return decode_codepoint_1.default(parseInt(str$4.substr(2), 10));
			}
			return map[str$4.slice(1, -1)] || str$4;
		};
	}
} });

//#endregion
//#region node_modules/entities/lib/encode.js
var require_encode = __commonJS({ "node_modules/entities/lib/encode.js"(exports) {
	var __importDefault$3 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
	var xml_json_1 = __importDefault$3(require_xml());
	var inverseXML = getInverseObj(xml_json_1.default);
	var xmlReplacer = getInverseReplacer(inverseXML);
	/**
	* Encodes all non-ASCII characters, as well as characters not valid in XML
	* documents using XML entities.
	*
	* If a character has no equivalent entity, a
	* numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	*/
	exports.encodeXML = getASCIIEncoder(inverseXML);
	var entities_json_1 = __importDefault$3(require_entities());
	var inverseHTML = getInverseObj(entities_json_1.default);
	var htmlReplacer = getInverseReplacer(inverseHTML);
	/**
	* Encodes all entities and non-ASCII characters in the input.
	*
	* This includes characters that are valid ASCII characters in HTML documents.
	* For example `#` will be encoded as `&num;`. To get a more compact output,
	* consider using the `encodeNonAsciiHTML` function.
	*
	* If a character has no equivalent entity, a
	* numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	*/
	exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
	/**
	* Encodes all non-ASCII characters, as well as characters not valid in HTML
	* documents using HTML entities.
	*
	* If a character has no equivalent entity, a
	* numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	*/
	exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
	function getInverseObj(obj) {
		return Object.keys(obj).sort().reduce(function(inverse, name) {
			inverse[obj[name]] = "&" + name + ";";
			return inverse;
		}, {});
	}
	function getInverseReplacer(inverse) {
		var single$1 = [];
		var multiple = [];
		for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
			var k$1 = _a[_i];
			if (k$1.length === 1) single$1.push("\\" + k$1);
			else multiple.push(k$1);
		}
		single$1.sort();
		for (var start = 0; start < single$1.length - 1; start++) {
			var end = start;
			while (end < single$1.length - 1 && single$1[end].charCodeAt(1) + 1 === single$1[end + 1].charCodeAt(1)) end += 1;
			var count = 1 + end - start;
			if (count < 3) continue;
			single$1.splice(start, count, single$1[start] + "-" + single$1[end]);
		}
		multiple.unshift("[" + single$1.join("") + "]");
		return new RegExp(multiple.join("|"), "g");
	}
	var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
	var getCodePoint = String.prototype.codePointAt != null ? function(str$4) {
		return str$4.codePointAt(0);
	} : function(c$2) {
		return (c$2.charCodeAt(0) - 55296) * 1024 + c$2.charCodeAt(1) - 56320 + 65536;
	};
	function singleCharReplacer(c$2) {
		return "&#x" + (c$2.length > 1 ? getCodePoint(c$2) : c$2.charCodeAt(0)).toString(16).toUpperCase() + ";";
	}
	function getInverse(inverse, re) {
		return function(data$2) {
			return data$2.replace(re, function(name) {
				return inverse[name];
			}).replace(reNonASCII, singleCharReplacer);
		};
	}
	var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
	/**
	* Encodes all non-ASCII characters, as well as characters not valid in XML
	* documents using numeric hexadecimal reference (eg. `&#xfc;`).
	*
	* Have a look at `escapeUTF8` if you want a more concise output at the expense
	* of reduced transportability.
	*
	* @param data String to escape.
	*/
	function escape(data$2) {
		return data$2.replace(reEscapeChars, singleCharReplacer);
	}
	exports.escape = escape;
	/**
	* Encodes all characters not valid in XML documents using numeric hexadecimal
	* reference (eg. `&#xfc;`).
	*
	* Note that the output will be character-set dependent.
	*
	* @param data String to escape.
	*/
	function escapeUTF8(data$2) {
		return data$2.replace(xmlReplacer, singleCharReplacer);
	}
	exports.escapeUTF8 = escapeUTF8;
	function getASCIIEncoder(obj) {
		return function(data$2) {
			return data$2.replace(reEscapeChars, function(c$2) {
				return obj[c$2] || singleCharReplacer(c$2);
			});
		};
	}
} });

//#endregion
//#region node_modules/entities/lib/index.js
var require_lib$10 = __commonJS({ "node_modules/entities/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
	var decode_1 = require_decode();
	var encode_1 = require_encode();
	/**
	* Decodes a string with entities.
	*
	* @param data String to decode.
	* @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	* @deprecated Use `decodeXML` or `decodeHTML` directly.
	*/
	function decode(data$2, level$1) {
		return (!level$1 || level$1 <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data$2);
	}
	exports.decode = decode;
	/**
	* Decodes a string with entities. Does not allow missing trailing semicolons for entities.
	*
	* @param data String to decode.
	* @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	* @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
	*/
	function decodeStrict(data$2, level$1) {
		return (!level$1 || level$1 <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data$2);
	}
	exports.decodeStrict = decodeStrict;
	/**
	* Encodes a string with entities.
	*
	* @param data String to encode.
	* @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
	* @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
	*/
	function encode(data$2, level$1) {
		return (!level$1 || level$1 <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data$2);
	}
	exports.encode = encode;
	var encode_2 = require_encode();
	Object.defineProperty(exports, "encodeXML", {
		enumerable: true,
		get: function() {
			return encode_2.encodeXML;
		}
	});
	Object.defineProperty(exports, "encodeHTML", {
		enumerable: true,
		get: function() {
			return encode_2.encodeHTML;
		}
	});
	Object.defineProperty(exports, "encodeNonAsciiHTML", {
		enumerable: true,
		get: function() {
			return encode_2.encodeNonAsciiHTML;
		}
	});
	Object.defineProperty(exports, "escape", {
		enumerable: true,
		get: function() {
			return encode_2.escape;
		}
	});
	Object.defineProperty(exports, "escapeUTF8", {
		enumerable: true,
		get: function() {
			return encode_2.escapeUTF8;
		}
	});
	Object.defineProperty(exports, "encodeHTML4", {
		enumerable: true,
		get: function() {
			return encode_2.encodeHTML;
		}
	});
	Object.defineProperty(exports, "encodeHTML5", {
		enumerable: true,
		get: function() {
			return encode_2.encodeHTML;
		}
	});
	var decode_2 = require_decode();
	Object.defineProperty(exports, "decodeXML", {
		enumerable: true,
		get: function() {
			return decode_2.decodeXML;
		}
	});
	Object.defineProperty(exports, "decodeHTML", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTML;
		}
	});
	Object.defineProperty(exports, "decodeHTMLStrict", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTMLStrict;
		}
	});
	Object.defineProperty(exports, "decodeHTML4", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTML;
		}
	});
	Object.defineProperty(exports, "decodeHTML5", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTML;
		}
	});
	Object.defineProperty(exports, "decodeHTML4Strict", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTMLStrict;
		}
	});
	Object.defineProperty(exports, "decodeHTML5Strict", {
		enumerable: true,
		get: function() {
			return decode_2.decodeHTMLStrict;
		}
	});
	Object.defineProperty(exports, "decodeXMLStrict", {
		enumerable: true,
		get: function() {
			return decode_2.decodeXML;
		}
	});
} });

//#endregion
//#region node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS({ "node_modules/dom-serializer/lib/foreignNames.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.attributeNames = exports.elementNames = void 0;
	exports.elementNames = new Map([
		["altglyph", "altGlyph"],
		["altglyphdef", "altGlyphDef"],
		["altglyphitem", "altGlyphItem"],
		["animatecolor", "animateColor"],
		["animatemotion", "animateMotion"],
		["animatetransform", "animateTransform"],
		["clippath", "clipPath"],
		["feblend", "feBlend"],
		["fecolormatrix", "feColorMatrix"],
		["fecomponenttransfer", "feComponentTransfer"],
		["fecomposite", "feComposite"],
		["feconvolvematrix", "feConvolveMatrix"],
		["fediffuselighting", "feDiffuseLighting"],
		["fedisplacementmap", "feDisplacementMap"],
		["fedistantlight", "feDistantLight"],
		["fedropshadow", "feDropShadow"],
		["feflood", "feFlood"],
		["fefunca", "feFuncA"],
		["fefuncb", "feFuncB"],
		["fefuncg", "feFuncG"],
		["fefuncr", "feFuncR"],
		["fegaussianblur", "feGaussianBlur"],
		["feimage", "feImage"],
		["femerge", "feMerge"],
		["femergenode", "feMergeNode"],
		["femorphology", "feMorphology"],
		["feoffset", "feOffset"],
		["fepointlight", "fePointLight"],
		["fespecularlighting", "feSpecularLighting"],
		["fespotlight", "feSpotLight"],
		["fetile", "feTile"],
		["feturbulence", "feTurbulence"],
		["foreignobject", "foreignObject"],
		["glyphref", "glyphRef"],
		["lineargradient", "linearGradient"],
		["radialgradient", "radialGradient"],
		["textpath", "textPath"]
	]);
	exports.attributeNames = new Map([
		["definitionurl", "definitionURL"],
		["attributename", "attributeName"],
		["attributetype", "attributeType"],
		["basefrequency", "baseFrequency"],
		["baseprofile", "baseProfile"],
		["calcmode", "calcMode"],
		["clippathunits", "clipPathUnits"],
		["diffuseconstant", "diffuseConstant"],
		["edgemode", "edgeMode"],
		["filterunits", "filterUnits"],
		["glyphref", "glyphRef"],
		["gradienttransform", "gradientTransform"],
		["gradientunits", "gradientUnits"],
		["kernelmatrix", "kernelMatrix"],
		["kernelunitlength", "kernelUnitLength"],
		["keypoints", "keyPoints"],
		["keysplines", "keySplines"],
		["keytimes", "keyTimes"],
		["lengthadjust", "lengthAdjust"],
		["limitingconeangle", "limitingConeAngle"],
		["markerheight", "markerHeight"],
		["markerunits", "markerUnits"],
		["markerwidth", "markerWidth"],
		["maskcontentunits", "maskContentUnits"],
		["maskunits", "maskUnits"],
		["numoctaves", "numOctaves"],
		["pathlength", "pathLength"],
		["patterncontentunits", "patternContentUnits"],
		["patterntransform", "patternTransform"],
		["patternunits", "patternUnits"],
		["pointsatx", "pointsAtX"],
		["pointsaty", "pointsAtY"],
		["pointsatz", "pointsAtZ"],
		["preservealpha", "preserveAlpha"],
		["preserveaspectratio", "preserveAspectRatio"],
		["primitiveunits", "primitiveUnits"],
		["refx", "refX"],
		["refy", "refY"],
		["repeatcount", "repeatCount"],
		["repeatdur", "repeatDur"],
		["requiredextensions", "requiredExtensions"],
		["requiredfeatures", "requiredFeatures"],
		["specularconstant", "specularConstant"],
		["specularexponent", "specularExponent"],
		["spreadmethod", "spreadMethod"],
		["startoffset", "startOffset"],
		["stddeviation", "stdDeviation"],
		["stitchtiles", "stitchTiles"],
		["surfacescale", "surfaceScale"],
		["systemlanguage", "systemLanguage"],
		["tablevalues", "tableValues"],
		["targetx", "targetX"],
		["targety", "targetY"],
		["textlength", "textLength"],
		["viewbox", "viewBox"],
		["viewtarget", "viewTarget"],
		["xchannelselector", "xChannelSelector"],
		["ychannelselector", "yChannelSelector"],
		["zoomandpan", "zoomAndPan"]
	]);
} });

//#endregion
//#region node_modules/dom-serializer/lib/index.js
var require_lib$9 = __commonJS({ "node_modules/dom-serializer/lib/index.js"(exports) {
	var __assign = exports && exports.__assign || function() {
		__assign = Object.assign || function(t$9) {
			for (var s$3, i$6 = 1, n$4 = arguments.length; i$6 < n$4; i$6++) {
				s$3 = arguments[i$6];
				for (var p$2 in s$3) if (Object.prototype.hasOwnProperty.call(s$3, p$2)) t$9[p$2] = s$3[p$2];
			}
			return t$9;
		};
		return __assign.apply(this, arguments);
	};
	var __createBinding$3 = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		Object.defineProperty(o$2, k2, {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		});
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __setModuleDefault$2 = exports && exports.__setModuleDefault || (Object.create ? function(o$2, v$1) {
		Object.defineProperty(o$2, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$2, v$1) {
		o$2["default"] = v$1;
	});
	var __importStar$2 = exports && exports.__importStar || function(mod$1) {
		if (mod$1 && mod$1.__esModule) return mod$1;
		var result = {};
		if (mod$1 != null) {
			for (var k$1 in mod$1) if (k$1 !== "default" && Object.prototype.hasOwnProperty.call(mod$1, k$1)) __createBinding$3(result, mod$1, k$1);
		}
		__setModuleDefault$2(result, mod$1);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ElementType$1 = __importStar$2(require_lib$13());
	var entities_1 = require_lib$10();
	/**
	* Mixed-case SVG and MathML tags & attributes
	* recognized by the HTML parser.
	*
	* @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
	*/
	var foreignNames_1 = require_foreignNames();
	var unencodedElements = new Set([
		"style",
		"script",
		"xmp",
		"iframe",
		"noembed",
		"noframes",
		"plaintext",
		"noscript"
	]);
	/**
	* Format attributes
	*/
	function formatAttributes(attributes, opts) {
		if (!attributes) return;
		return Object.keys(attributes).map(function(key) {
			var _a, _b;
			var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
			if (opts.xmlMode === "foreign") key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
			if (!opts.emptyAttrs && !opts.xmlMode && value === "") return key;
			return key + "=\"" + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + "\"";
		}).join(" ");
	}
	/**
	* Self-enclosing tags
	*/
	var singleTag = new Set([
		"area",
		"base",
		"basefont",
		"br",
		"col",
		"command",
		"embed",
		"frame",
		"hr",
		"img",
		"input",
		"isindex",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	]);
	/**
	* Renders a DOM node or an array of DOM nodes to a string.
	*
	* Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
	*
	* @param node Node to be rendered.
	* @param options Changes serialization behavior
	*/
	function render(node, options) {
		if (options === void 0) options = {};
		var nodes$1 = "length" in node ? node : [node];
		var output = "";
		for (var i$6 = 0; i$6 < nodes$1.length; i$6++) output += renderNode(nodes$1[i$6], options);
		return output;
	}
	exports.default = render;
	function renderNode(node, options) {
		switch (node.type) {
			case ElementType$1.Root: return render(node.children, options);
			case ElementType$1.Directive:
			case ElementType$1.Doctype: return renderDirective(node);
			case ElementType$1.Comment: return renderComment(node);
			case ElementType$1.CDATA: return renderCdata(node);
			case ElementType$1.Script:
			case ElementType$1.Style:
			case ElementType$1.Tag: return renderTag(node, options);
			case ElementType$1.Text: return renderText(node, options);
		}
	}
	var foreignModeIntegrationPoints = new Set([
		"mi",
		"mo",
		"mn",
		"ms",
		"mtext",
		"annotation-xml",
		"foreignObject",
		"desc",
		"title"
	]);
	var foreignElements = new Set(["svg", "math"]);
	function renderTag(elem, opts) {
		var _a;
		if (opts.xmlMode === "foreign") {
			elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
			if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) opts = __assign(__assign({}, opts), { xmlMode: false });
		}
		if (!opts.xmlMode && foreignElements.has(elem.name)) opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
		var tag$3 = "<" + elem.name;
		var attribs = formatAttributes(elem.attribs, opts);
		if (attribs) tag$3 += " " + attribs;
		if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
			if (!opts.xmlMode) tag$3 += " ";
			tag$3 += "/>";
		} else {
			tag$3 += ">";
			if (elem.children.length > 0) tag$3 += render(elem.children, opts);
			if (opts.xmlMode || !singleTag.has(elem.name)) tag$3 += "</" + elem.name + ">";
		}
		return tag$3;
	}
	function renderDirective(elem) {
		return "<" + elem.data + ">";
	}
	function renderText(elem, opts) {
		var data$2 = elem.data || "";
		if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) data$2 = entities_1.encodeXML(data$2);
		return data$2;
	}
	function renderCdata(elem) {
		return "<![CDATA[" + elem.children[0].data + "]]>";
	}
	function renderComment(elem) {
		return "<!--" + elem.data + "-->";
	}
} });

//#endregion
//#region node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS({ "node_modules/domutils/lib/stringify.js"(exports) {
	var __importDefault$2 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
	var domhandler_1$7 = require_lib$11();
	var dom_serializer_1 = __importDefault$2(require_lib$9());
	var domelementtype_1 = require_lib$13();
	/**
	* @param node Node to get the outer HTML of.
	* @param options Options for serialization.
	* @deprecated Use the `dom-serializer` module directly.
	* @returns `node`'s outer HTML.
	*/
	function getOuterHTML(node, options) {
		return (0, dom_serializer_1.default)(node, options);
	}
	exports.getOuterHTML = getOuterHTML;
	/**
	* @param node Node to get the inner HTML of.
	* @param options Options for serialization.
	* @deprecated Use the `dom-serializer` module directly.
	* @returns `node`'s inner HTML.
	*/
	function getInnerHTML(node, options) {
		return (0, domhandler_1$7.hasChildren)(node) ? node.children.map(function(node$1) {
			return getOuterHTML(node$1, options);
		}).join("") : "";
	}
	exports.getInnerHTML = getInnerHTML;
	/**
	* Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags.
	*
	* @deprecated Use `textContent` instead.
	* @param node Node to get the inner text of.
	* @returns `node`'s inner text.
	*/
	function getText(node) {
		if (Array.isArray(node)) return node.map(getText).join("");
		if ((0, domhandler_1$7.isTag)(node)) return node.name === "br" ? "\n" : getText(node.children);
		if ((0, domhandler_1$7.isCDATA)(node)) return getText(node.children);
		if ((0, domhandler_1$7.isText)(node)) return node.data;
		return "";
	}
	exports.getText = getText;
	/**
	* Get a node's text content.
	*
	* @param node Node to get the text content of.
	* @returns `node`'s text content.
	* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
	*/
	function textContent(node) {
		if (Array.isArray(node)) return node.map(textContent).join("");
		if ((0, domhandler_1$7.hasChildren)(node) && !(0, domhandler_1$7.isComment)(node)) return textContent(node.children);
		if ((0, domhandler_1$7.isText)(node)) return node.data;
		return "";
	}
	exports.textContent = textContent;
	/**
	* Get a node's inner text.
	*
	* @param node Node to get the inner text of.
	* @returns `node`'s inner text.
	* @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
	*/
	function innerText(node) {
		if (Array.isArray(node)) return node.map(innerText).join("");
		if ((0, domhandler_1$7.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1$7.isCDATA)(node))) return innerText(node.children);
		if ((0, domhandler_1$7.isText)(node)) return node.data;
		return "";
	}
	exports.innerText = innerText;
} });

//#endregion
//#region node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS({ "node_modules/domutils/lib/traversal.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
	var domhandler_1$6 = require_lib$11();
	var emptyArray = [];
	/**
	* Get a node's children.
	*
	* @param elem Node to get the children of.
	* @returns `elem`'s children, or an empty array.
	*/
	function getChildren(elem) {
		var _a;
		return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
	}
	exports.getChildren = getChildren;
	/**
	* Get a node's parent.
	*
	* @param elem Node to get the parent of.
	* @returns `elem`'s parent node.
	*/
	function getParent(elem) {
		return elem.parent || null;
	}
	exports.getParent = getParent;
	/**
	* Gets an elements siblings, including the element itself.
	*
	* Attempts to get the children through the element's parent first.
	* If we don't have a parent (the element is a root node),
	* we walk the element's `prev` & `next` to get all remaining nodes.
	*
	* @param elem Element to get the siblings of.
	* @returns `elem`'s siblings.
	*/
	function getSiblings(elem) {
		var _a, _b;
		var parent = getParent(elem);
		if (parent != null) return getChildren(parent);
		var siblings = [elem];
		var prev = elem.prev, next = elem.next;
		while (prev != null) {
			siblings.unshift(prev);
			_a = prev, prev = _a.prev;
		}
		while (next != null) {
			siblings.push(next);
			_b = next, next = _b.next;
		}
		return siblings;
	}
	exports.getSiblings = getSiblings;
	/**
	* Gets an attribute from an element.
	*
	* @param elem Element to check.
	* @param name Attribute name to retrieve.
	* @returns The element's attribute value, or `undefined`.
	*/
	function getAttributeValue(elem, name) {
		var _a;
		return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
	}
	exports.getAttributeValue = getAttributeValue;
	/**
	* Checks whether an element has an attribute.
	*
	* @param elem Element to check.
	* @param name Attribute name to look for.
	* @returns Returns whether `elem` has the attribute `name`.
	*/
	function hasAttrib(elem, name) {
		return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
	}
	exports.hasAttrib = hasAttrib;
	/**
	* Get the tag name of an element.
	*
	* @param elem The element to get the name for.
	* @returns The tag name of `elem`.
	*/
	function getName(elem) {
		return elem.name;
	}
	exports.getName = getName;
	/**
	* Returns the next element sibling of a node.
	*
	* @param elem The element to get the next sibling of.
	* @returns `elem`'s next sibling that is a tag.
	*/
	function nextElementSibling(elem) {
		var _a;
		var next = elem.next;
		while (next !== null && !(0, domhandler_1$6.isTag)(next)) _a = next, next = _a.next;
		return next;
	}
	exports.nextElementSibling = nextElementSibling;
	/**
	* Returns the previous element sibling of a node.
	*
	* @param elem The element to get the previous sibling of.
	* @returns `elem`'s previous sibling that is a tag.
	*/
	function prevElementSibling(elem) {
		var _a;
		var prev = elem.prev;
		while (prev !== null && !(0, domhandler_1$6.isTag)(prev)) _a = prev, prev = _a.prev;
		return prev;
	}
	exports.prevElementSibling = prevElementSibling;
} });

//#endregion
//#region node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS({ "node_modules/domutils/lib/manipulation.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
	/**
	* Remove an element from the dom
	*
	* @param elem The element to be removed
	*/
	function removeElement(elem) {
		if (elem.prev) elem.prev.next = elem.next;
		if (elem.next) elem.next.prev = elem.prev;
		if (elem.parent) {
			var childs = elem.parent.children;
			childs.splice(childs.lastIndexOf(elem), 1);
		}
	}
	exports.removeElement = removeElement;
	/**
	* Replace an element in the dom
	*
	* @param elem The element to be replaced
	* @param replacement The element to be added
	*/
	function replaceElement(elem, replacement) {
		var prev = replacement.prev = elem.prev;
		if (prev) prev.next = replacement;
		var next = replacement.next = elem.next;
		if (next) next.prev = replacement;
		var parent = replacement.parent = elem.parent;
		if (parent) {
			var childs = parent.children;
			childs[childs.lastIndexOf(elem)] = replacement;
		}
	}
	exports.replaceElement = replaceElement;
	/**
	* Append a child to an element.
	*
	* @param elem The element to append to.
	* @param child The element to be added as a child.
	*/
	function appendChild(elem, child) {
		removeElement(child);
		child.next = null;
		child.parent = elem;
		if (elem.children.push(child) > 1) {
			var sibling = elem.children[elem.children.length - 2];
			sibling.next = child;
			child.prev = sibling;
		} else child.prev = null;
	}
	exports.appendChild = appendChild;
	/**
	* Append an element after another.
	*
	* @param elem The element to append after.
	* @param next The element be added.
	*/
	function append(elem, next) {
		removeElement(next);
		var parent = elem.parent;
		var currNext = elem.next;
		next.next = currNext;
		next.prev = elem;
		elem.next = next;
		next.parent = parent;
		if (currNext) {
			currNext.prev = next;
			if (parent) {
				var childs = parent.children;
				childs.splice(childs.lastIndexOf(currNext), 0, next);
			}
		} else if (parent) parent.children.push(next);
	}
	exports.append = append;
	/**
	* Prepend a child to an element.
	*
	* @param elem The element to prepend before.
	* @param child The element to be added as a child.
	*/
	function prependChild(elem, child) {
		removeElement(child);
		child.parent = elem;
		child.prev = null;
		if (elem.children.unshift(child) !== 1) {
			var sibling = elem.children[1];
			sibling.prev = child;
			child.next = sibling;
		} else child.next = null;
	}
	exports.prependChild = prependChild;
	/**
	* Prepend an element before another.
	*
	* @param elem The element to prepend before.
	* @param prev The element be added.
	*/
	function prepend(elem, prev) {
		removeElement(prev);
		var parent = elem.parent;
		if (parent) {
			var childs = parent.children;
			childs.splice(childs.indexOf(elem), 0, prev);
		}
		if (elem.prev) elem.prev.next = prev;
		prev.parent = parent;
		prev.prev = elem.prev;
		prev.next = elem;
		elem.prev = prev;
	}
	exports.prepend = prepend;
} });

//#endregion
//#region node_modules/domutils/lib/querying.js
var require_querying = __commonJS({ "node_modules/domutils/lib/querying.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
	var domhandler_1$5 = require_lib$11();
	/**
	* Search a node and its children for nodes passing a test function.
	*
	* @param test Function to test nodes on.
	* @param node Node to search. Will be included in the result set if it matches.
	* @param recurse Also consider child nodes.
	* @param limit Maximum number of nodes to return.
	* @returns All nodes passing `test`.
	*/
	function filter$1(test, node, recurse, limit) {
		if (recurse === void 0) recurse = true;
		if (limit === void 0) limit = Infinity;
		if (!Array.isArray(node)) node = [node];
		return find$1(test, node, recurse, limit);
	}
	exports.filter = filter$1;
	/**
	* Search an array of node and its children for nodes passing a test function.
	*
	* @param test Function to test nodes on.
	* @param nodes Array of nodes to search.
	* @param recurse Also consider child nodes.
	* @param limit Maximum number of nodes to return.
	* @returns All nodes passing `test`.
	*/
	function find$1(test, nodes$1, recurse, limit) {
		var result = [];
		for (var _i = 0, nodes_1 = nodes$1; _i < nodes_1.length; _i++) {
			var elem = nodes_1[_i];
			if (test(elem)) {
				result.push(elem);
				if (--limit <= 0) break;
			}
			if (recurse && (0, domhandler_1$5.hasChildren)(elem) && elem.children.length > 0) {
				var children = find$1(test, elem.children, recurse, limit);
				result.push.apply(result, children);
				limit -= children.length;
				if (limit <= 0) break;
			}
		}
		return result;
	}
	exports.find = find$1;
	/**
	* Finds the first element inside of an array that matches a test function.
	*
	* @param test Function to test nodes on.
	* @param nodes Array of nodes to search.
	* @returns The first node in the array that passes `test`.
	*/
	function findOneChild(test, nodes$1) {
		return nodes$1.find(test);
	}
	exports.findOneChild = findOneChild;
	/**
	* Finds one element in a tree that passes a test.
	*
	* @param test Function to test nodes on.
	* @param nodes Array of nodes to search.
	* @param recurse Also consider child nodes.
	* @returns The first child node that passes `test`.
	*/
	function findOne(test, nodes$1, recurse) {
		if (recurse === void 0) recurse = true;
		var elem = null;
		for (var i$6 = 0; i$6 < nodes$1.length && !elem; i$6++) {
			var checked = nodes$1[i$6];
			if (!(0, domhandler_1$5.isTag)(checked)) continue;
			else if (test(checked)) elem = checked;
			else if (recurse && checked.children.length > 0) elem = findOne(test, checked.children);
		}
		return elem;
	}
	exports.findOne = findOne;
	/**
	* @param test Function to test nodes on.
	* @param nodes Array of nodes to search.
	* @returns Whether a tree of nodes contains at least one node passing a test.
	*/
	function existsOne(test, nodes$1) {
		return nodes$1.some(function(checked) {
			return (0, domhandler_1$5.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
		});
	}
	exports.existsOne = existsOne;
	/**
	* Search and array of nodes and its children for nodes passing a test function.
	*
	* Same as `find`, only with less options, leading to reduced complexity.
	*
	* @param test Function to test nodes on.
	* @param nodes Array of nodes to search.
	* @returns All nodes passing `test`.
	*/
	function findAll(test, nodes$1) {
		var _a;
		var result = [];
		var stack = nodes$1.filter(domhandler_1$5.isTag);
		var elem;
		while (elem = stack.shift()) {
			var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1$5.isTag);
			if (children && children.length > 0) stack.unshift.apply(stack, children);
			if (test(elem)) result.push(elem);
		}
		return result;
	}
	exports.findAll = findAll;
} });

//#endregion
//#region node_modules/domutils/lib/legacy.js
var require_legacy = __commonJS({ "node_modules/domutils/lib/legacy.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
	var domhandler_1$4 = require_lib$11();
	var querying_1 = require_querying();
	var Checks = {
		tag_name: function(name) {
			if (typeof name === "function") return function(elem) {
				return (0, domhandler_1$4.isTag)(elem) && name(elem.name);
			};
			else if (name === "*") return domhandler_1$4.isTag;
			return function(elem) {
				return (0, domhandler_1$4.isTag)(elem) && elem.name === name;
			};
		},
		tag_type: function(type) {
			if (typeof type === "function") return function(elem) {
				return type(elem.type);
			};
			return function(elem) {
				return elem.type === type;
			};
		},
		tag_contains: function(data$2) {
			if (typeof data$2 === "function") return function(elem) {
				return (0, domhandler_1$4.isText)(elem) && data$2(elem.data);
			};
			return function(elem) {
				return (0, domhandler_1$4.isText)(elem) && elem.data === data$2;
			};
		}
	};
	/**
	* @param attrib Attribute to check.
	* @param value Attribute value to look for.
	* @returns A function to check whether the a node has an attribute with a particular value.
	*/
	function getAttribCheck(attrib, value) {
		if (typeof value === "function") return function(elem) {
			return (0, domhandler_1$4.isTag)(elem) && value(elem.attribs[attrib]);
		};
		return function(elem) {
			return (0, domhandler_1$4.isTag)(elem) && elem.attribs[attrib] === value;
		};
	}
	/**
	* @param a First function to combine.
	* @param b Second function to combine.
	* @returns A function taking a node and returning `true` if either
	* of the input functions returns `true` for the node.
	*/
	function combineFuncs(a$1, b$1) {
		return function(elem) {
			return a$1(elem) || b$1(elem);
		};
	}
	/**
	* @param options An object describing nodes to look for.
	* @returns A function executing all checks in `options` and returning `true`
	* if any of them match a node.
	*/
	function compileTest(options) {
		var funcs = Object.keys(options).map(function(key) {
			var value = options[key];
			return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
		});
		return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
	}
	/**
	* @param options An object describing nodes to look for.
	* @param node The element to test.
	* @returns Whether the element matches the description in `options`.
	*/
	function testElement(options, node) {
		var test = compileTest(options);
		return test ? test(node) : true;
	}
	exports.testElement = testElement;
	/**
	* @param options An object describing nodes to look for.
	* @param nodes Nodes to search through.
	* @param recurse Also consider child nodes.
	* @param limit Maximum number of nodes to return.
	* @returns All nodes that match `options`.
	*/
	function getElements$1(options, nodes$1, recurse, limit) {
		if (limit === void 0) limit = Infinity;
		var test = compileTest(options);
		return test ? (0, querying_1.filter)(test, nodes$1, recurse, limit) : [];
	}
	exports.getElements = getElements$1;
	/**
	* @param id The unique ID attribute value to look for.
	* @param nodes Nodes to search through.
	* @param recurse Also consider child nodes.
	* @returns The node with the supplied ID.
	*/
	function getElementById(id$4, nodes$1, recurse) {
		if (recurse === void 0) recurse = true;
		if (!Array.isArray(nodes$1)) nodes$1 = [nodes$1];
		return (0, querying_1.findOne)(getAttribCheck("id", id$4), nodes$1, recurse);
	}
	exports.getElementById = getElementById;
	/**
	* @param tagName Tag name to search for.
	* @param nodes Nodes to search through.
	* @param recurse Also consider child nodes.
	* @param limit Maximum number of nodes to return.
	* @returns All nodes with the supplied `tagName`.
	*/
	function getElementsByTagName(tagName, nodes$1, recurse, limit) {
		if (recurse === void 0) recurse = true;
		if (limit === void 0) limit = Infinity;
		return (0, querying_1.filter)(Checks.tag_name(tagName), nodes$1, recurse, limit);
	}
	exports.getElementsByTagName = getElementsByTagName;
	/**
	* @param type Element type to look for.
	* @param nodes Nodes to search through.
	* @param recurse Also consider child nodes.
	* @param limit Maximum number of nodes to return.
	* @returns All nodes with the supplied `type`.
	*/
	function getElementsByTagType(type, nodes$1, recurse, limit) {
		if (recurse === void 0) recurse = true;
		if (limit === void 0) limit = Infinity;
		return (0, querying_1.filter)(Checks.tag_type(type), nodes$1, recurse, limit);
	}
	exports.getElementsByTagType = getElementsByTagType;
} });

//#endregion
//#region node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS({ "node_modules/domutils/lib/helpers.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
	var domhandler_1$3 = require_lib$11();
	/**
	* Given an array of nodes, remove any member that is contained by another.
	*
	* @param nodes Nodes to filter.
	* @returns Remaining nodes that aren't subtrees of each other.
	*/
	function removeSubsets(nodes$1) {
		var idx = nodes$1.length;
		while (--idx >= 0) {
			var node = nodes$1[idx];
			if (idx > 0 && nodes$1.lastIndexOf(node, idx - 1) >= 0) {
				nodes$1.splice(idx, 1);
				continue;
			}
			for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) if (nodes$1.includes(ancestor)) {
				nodes$1.splice(idx, 1);
				break;
			}
		}
		return nodes$1;
	}
	exports.removeSubsets = removeSubsets;
	/**
	* Compare the position of one node against another node in any other document.
	* The return value is a bitmask with the following values:
	*
	* Document order:
	* > There is an ordering, document order, defined on all the nodes in the
	* > document corresponding to the order in which the first character of the
	* > XML representation of each node occurs in the XML representation of the
	* > document after expansion of general entities. Thus, the document element
	* > node will be the first node. Element nodes occur before their children.
	* > Thus, document order orders element nodes in order of the occurrence of
	* > their start-tag in the XML (after expansion of entities). The attribute
	* > nodes of an element occur after the element and before its children. The
	* > relative order of attribute nodes is implementation-dependent./
	*
	* Source:
	* http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
	*
	* @param nodeA The first node to use in the comparison
	* @param nodeB The second node to use in the comparison
	* @returns A bitmask describing the input nodes' relative position.
	*
	* See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
	* a description of these values.
	*/
	function compareDocumentPosition(nodeA, nodeB) {
		var aParents = [];
		var bParents = [];
		if (nodeA === nodeB) return 0;
		var current = (0, domhandler_1$3.hasChildren)(nodeA) ? nodeA : nodeA.parent;
		while (current) {
			aParents.unshift(current);
			current = current.parent;
		}
		current = (0, domhandler_1$3.hasChildren)(nodeB) ? nodeB : nodeB.parent;
		while (current) {
			bParents.unshift(current);
			current = current.parent;
		}
		var maxIdx = Math.min(aParents.length, bParents.length);
		var idx = 0;
		while (idx < maxIdx && aParents[idx] === bParents[idx]) idx++;
		if (idx === 0) return 1;
		var sharedParent = aParents[idx - 1];
		var siblings = sharedParent.children;
		var aSibling = aParents[idx];
		var bSibling = bParents[idx];
		if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
			if (sharedParent === nodeB) return 20;
			return 4;
		}
		if (sharedParent === nodeA) return 10;
		return 2;
	}
	exports.compareDocumentPosition = compareDocumentPosition;
	/**
	* Sort an array of nodes based on their relative position in the document and
	* remove any duplicate nodes. If the array contains nodes that do not belong
	* to the same document, sort order is unspecified.
	*
	* @param nodes Array of DOM nodes.
	* @returns Collection of unique nodes, sorted in document order.
	*/
	function uniqueSort(nodes$1) {
		nodes$1 = nodes$1.filter(function(node, i$6, arr) {
			return !arr.includes(node, i$6 + 1);
		});
		nodes$1.sort(function(a$1, b$1) {
			var relative$3 = compareDocumentPosition(a$1, b$1);
			if (relative$3 & 2) return -1;
			else if (relative$3 & 4) return 1;
			return 0;
		});
		return nodes$1;
	}
	exports.uniqueSort = uniqueSort;
} });

//#endregion
//#region node_modules/domutils/lib/feeds.js
var require_feeds = __commonJS({ "node_modules/domutils/lib/feeds.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getFeed = void 0;
	var stringify_1 = require_stringify();
	var legacy_1 = require_legacy();
	/**
	* Get the feed object from the root of a DOM tree.
	*
	* @param doc - The DOM to to extract the feed from.
	* @returns The feed.
	*/
	function getFeed(doc) {
		var feedRoot = getOneElement$1(isValidFeed$1, doc);
		return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
	}
	exports.getFeed = getFeed;
	/**
	* Parse an Atom feed.
	*
	* @param feedRoot The root of the feed.
	* @returns The parsed feed.
	*/
	function getAtomFeed(feedRoot) {
		var _a;
		var childs = feedRoot.children;
		var feed$3 = {
			type: "atom",
			items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function(item) {
				var _a$1;
				var children = item.children;
				var entry = { media: getMediaElements$1(children) };
				addConditionally$1(entry, "id", "id", children);
				addConditionally$1(entry, "title", "title", children);
				var href$1 = (_a$1 = getOneElement$1("link", children)) === null || _a$1 === void 0 ? void 0 : _a$1.attribs.href;
				if (href$1) entry.link = href$1;
				var description = fetch$1("summary", children) || fetch$1("content", children);
				if (description) entry.description = description;
				var pubDate = fetch$1("updated", children);
				if (pubDate) entry.pubDate = new Date(pubDate);
				return entry;
			})
		};
		addConditionally$1(feed$3, "id", "id", childs);
		addConditionally$1(feed$3, "title", "title", childs);
		var href = (_a = getOneElement$1("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;
		if (href) feed$3.link = href;
		addConditionally$1(feed$3, "description", "subtitle", childs);
		var updated = fetch$1("updated", childs);
		if (updated) feed$3.updated = new Date(updated);
		addConditionally$1(feed$3, "author", "email", childs, true);
		return feed$3;
	}
	/**
	* Parse a RSS feed.
	*
	* @param feedRoot The root of the feed.
	* @returns The parsed feed.
	*/
	function getRssFeed(feedRoot) {
		var _a, _b;
		var childs = (_b = (_a = getOneElement$1("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
		var feed$3 = {
			type: feedRoot.name.substr(0, 3),
			id: "",
			items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
				var children = item.children;
				var entry = { media: getMediaElements$1(children) };
				addConditionally$1(entry, "id", "guid", children);
				addConditionally$1(entry, "title", "title", children);
				addConditionally$1(entry, "link", "link", children);
				addConditionally$1(entry, "description", "description", children);
				var pubDate = fetch$1("pubDate", children);
				if (pubDate) entry.pubDate = new Date(pubDate);
				return entry;
			})
		};
		addConditionally$1(feed$3, "title", "title", childs);
		addConditionally$1(feed$3, "link", "link", childs);
		addConditionally$1(feed$3, "description", "description", childs);
		var updated = fetch$1("lastBuildDate", childs);
		if (updated) feed$3.updated = new Date(updated);
		addConditionally$1(feed$3, "author", "managingEditor", childs, true);
		return feed$3;
	}
	var MEDIA_KEYS_STRING = [
		"url",
		"type",
		"lang"
	];
	var MEDIA_KEYS_INT = [
		"fileSize",
		"bitrate",
		"framerate",
		"samplingrate",
		"channels",
		"duration",
		"height",
		"width"
	];
	/**
	* Get all media elements of a feed item.
	*
	* @param where Nodes to search in.
	* @returns Media elements.
	*/
	function getMediaElements$1(where) {
		return (0, legacy_1.getElementsByTagName)("media:content", where).map(function(elem) {
			var attribs = elem.attribs;
			var media = {
				medium: attribs.medium,
				isDefault: !!attribs.isDefault
			};
			for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
				var attrib = MEDIA_KEYS_STRING_1[_i];
				if (attribs[attrib]) media[attrib] = attribs[attrib];
			}
			for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
				var attrib = MEDIA_KEYS_INT_1[_a];
				if (attribs[attrib]) media[attrib] = parseInt(attribs[attrib], 10);
			}
			if (attribs.expression) media.expression = attribs.expression;
			return media;
		});
	}
	/**
	* Get one element by tag name.
	*
	* @param tagName Tag name to look for
	* @param node Node to search in
	* @returns The element or null
	*/
	function getOneElement$1(tagName, node) {
		return (0, legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];
	}
	/**
	* Get the text content of an element with a certain tag name.
	*
	* @param tagName Tag name to look for.
	* @param where  Node to search in.
	* @param recurse Whether to recurse into child nodes.
	* @returns The text content of the element.
	*/
	function fetch$1(tagName, where, recurse) {
		if (recurse === void 0) recurse = false;
		return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
	}
	/**
	* Adds a property to an object if it has a value.
	*
	* @param obj Object to be extended
	* @param prop Property name
	* @param tagName Tag name that contains the conditionally added property
	* @param where Element to search for the property
	* @param recurse Whether to recurse into child nodes.
	*/
	function addConditionally$1(obj, prop, tagName, where, recurse) {
		if (recurse === void 0) recurse = false;
		var val = fetch$1(tagName, where, recurse);
		if (val) obj[prop] = val;
	}
	/**
	* Checks if an element is a feed root node.
	*
	* @param value The name of the element to check.
	* @returns Whether an element is a feed root node.
	*/
	function isValidFeed$1(value) {
		return value === "rss" || value === "feed" || value === "rdf:RDF";
	}
} });

//#endregion
//#region node_modules/domutils/lib/index.js
var require_lib$8 = __commonJS({ "node_modules/domutils/lib/index.js"(exports) {
	var __createBinding$2 = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		Object.defineProperty(o$2, k2, {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		});
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __exportStar$1 = exports && exports.__exportStar || function(m$2, exports$1) {
		for (var p$2 in m$2) if (p$2 !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p$2)) __createBinding$2(exports$1, m$2, p$2);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
	__exportStar$1(require_stringify(), exports);
	__exportStar$1(require_traversal(), exports);
	__exportStar$1(require_manipulation(), exports);
	__exportStar$1(require_querying(), exports);
	__exportStar$1(require_legacy(), exports);
	__exportStar$1(require_helpers(), exports);
	__exportStar$1(require_feeds(), exports);
	/** @deprecated Use these methods from `domhandler` directly. */
	var domhandler_1$2 = require_lib$11();
	Object.defineProperty(exports, "isTag", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.isTag;
		}
	});
	Object.defineProperty(exports, "isCDATA", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.isCDATA;
		}
	});
	Object.defineProperty(exports, "isText", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.isText;
		}
	});
	Object.defineProperty(exports, "isComment", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.isComment;
		}
	});
	Object.defineProperty(exports, "isDocument", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.isDocument;
		}
	});
	Object.defineProperty(exports, "hasChildren", {
		enumerable: true,
		get: function() {
			return domhandler_1$2.hasChildren;
		}
	});
} });

//#endregion
//#region node_modules/htmlparser2/lib/FeedHandler.js
var require_FeedHandler = __commonJS({ "node_modules/htmlparser2/lib/FeedHandler.js"(exports) {
	var __extends = exports && exports.__extends || function() {
		var extendStatics = function(d$2, b$1) {
			extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d$3, b$2) {
				d$3.__proto__ = b$2;
			} || function(d$3, b$2) {
				for (var p$2 in b$2) if (Object.prototype.hasOwnProperty.call(b$2, p$2)) d$3[p$2] = b$2[p$2];
			};
			return extendStatics(d$2, b$1);
		};
		return function(d$2, b$1) {
			if (typeof b$1 !== "function" && b$1 !== null) throw new TypeError("Class extends value " + String(b$1) + " is not a constructor or null");
			extendStatics(d$2, b$1);
			function __() {
				this.constructor = d$2;
			}
			d$2.prototype = b$1 === null ? Object.create(b$1) : (__.prototype = b$1.prototype, new __());
		};
	}();
	var __createBinding$1 = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		Object.defineProperty(o$2, k2, {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		});
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __setModuleDefault$1 = exports && exports.__setModuleDefault || (Object.create ? function(o$2, v$1) {
		Object.defineProperty(o$2, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$2, v$1) {
		o$2["default"] = v$1;
	});
	var __importStar$1 = exports && exports.__importStar || function(mod$1) {
		if (mod$1 && mod$1.__esModule) return mod$1;
		var result = {};
		if (mod$1 != null) {
			for (var k$1 in mod$1) if (k$1 !== "default" && Object.prototype.hasOwnProperty.call(mod$1, k$1)) __createBinding$1(result, mod$1, k$1);
		}
		__setModuleDefault$1(result, mod$1);
		return result;
	};
	var __importDefault$1 = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseFeed = exports.FeedHandler = void 0;
	var domhandler_1$1 = __importDefault$1(require_lib$12());
	var DomUtils = __importStar$1(require_lib$8());
	var Parser_1$1 = require_Parser();
	var FeedItemMediaMedium;
	(function(FeedItemMediaMedium$1) {
		FeedItemMediaMedium$1[FeedItemMediaMedium$1["image"] = 0] = "image";
		FeedItemMediaMedium$1[FeedItemMediaMedium$1["audio"] = 1] = "audio";
		FeedItemMediaMedium$1[FeedItemMediaMedium$1["video"] = 2] = "video";
		FeedItemMediaMedium$1[FeedItemMediaMedium$1["document"] = 3] = "document";
		FeedItemMediaMedium$1[FeedItemMediaMedium$1["executable"] = 4] = "executable";
	})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
	var FeedItemMediaExpression;
	(function(FeedItemMediaExpression$1) {
		FeedItemMediaExpression$1[FeedItemMediaExpression$1["sample"] = 0] = "sample";
		FeedItemMediaExpression$1[FeedItemMediaExpression$1["full"] = 1] = "full";
		FeedItemMediaExpression$1[FeedItemMediaExpression$1["nonstop"] = 2] = "nonstop";
	})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
	var FeedHandler = function(_super$2) {
		__extends(FeedHandler$1, _super$2);
		/**
		*
		* @param callback
		* @param options
		*/
		function FeedHandler$1(callback, options) {
			var _this = this;
			if (typeof callback === "object") {
				callback = void 0;
				options = callback;
			}
			_this = _super$2.call(this, callback, options) || this;
			return _this;
		}
		FeedHandler$1.prototype.onend = function() {
			var _a, _b;
			var feedRoot = getOneElement(isValidFeed, this.dom);
			if (!feedRoot) {
				this.handleCallback(new Error("couldn't find root of feed"));
				return;
			}
			var feed$3 = {};
			if (feedRoot.name === "feed") {
				var childs = feedRoot.children;
				feed$3.type = "atom";
				addConditionally(feed$3, "id", "id", childs);
				addConditionally(feed$3, "title", "title", childs);
				var href = getAttribute("href", getOneElement("link", childs));
				if (href) feed$3.link = href;
				addConditionally(feed$3, "description", "subtitle", childs);
				var updated = fetch("updated", childs);
				if (updated) feed$3.updated = new Date(updated);
				addConditionally(feed$3, "author", "email", childs, true);
				feed$3.items = getElements("entry", childs).map(function(item) {
					var entry = {};
					var children = item.children;
					addConditionally(entry, "id", "id", children);
					addConditionally(entry, "title", "title", children);
					var href$1 = getAttribute("href", getOneElement("link", children));
					if (href$1) entry.link = href$1;
					var description = fetch("summary", children) || fetch("content", children);
					if (description) entry.description = description;
					var pubDate = fetch("updated", children);
					if (pubDate) entry.pubDate = new Date(pubDate);
					entry.media = getMediaElements(children);
					return entry;
				});
			} else {
				var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
				feed$3.type = feedRoot.name.substr(0, 3);
				feed$3.id = "";
				addConditionally(feed$3, "title", "title", childs);
				addConditionally(feed$3, "link", "link", childs);
				addConditionally(feed$3, "description", "description", childs);
				var updated = fetch("lastBuildDate", childs);
				if (updated) feed$3.updated = new Date(updated);
				addConditionally(feed$3, "author", "managingEditor", childs, true);
				feed$3.items = getElements("item", feedRoot.children).map(function(item) {
					var entry = {};
					var children = item.children;
					addConditionally(entry, "id", "guid", children);
					addConditionally(entry, "title", "title", children);
					addConditionally(entry, "link", "link", children);
					addConditionally(entry, "description", "description", children);
					var pubDate = fetch("pubDate", children);
					if (pubDate) entry.pubDate = new Date(pubDate);
					entry.media = getMediaElements(children);
					return entry;
				});
			}
			this.feed = feed$3;
			this.handleCallback(null);
		};
		return FeedHandler$1;
	}(domhandler_1$1.default);
	exports.FeedHandler = FeedHandler;
	function getMediaElements(where) {
		return getElements("media:content", where).map(function(elem) {
			var media = {
				medium: elem.attribs.medium,
				isDefault: !!elem.attribs.isDefault
			};
			if (elem.attribs.url) media.url = elem.attribs.url;
			if (elem.attribs.fileSize) media.fileSize = parseInt(elem.attribs.fileSize, 10);
			if (elem.attribs.type) media.type = elem.attribs.type;
			if (elem.attribs.expression) media.expression = elem.attribs.expression;
			if (elem.attribs.bitrate) media.bitrate = parseInt(elem.attribs.bitrate, 10);
			if (elem.attribs.framerate) media.framerate = parseInt(elem.attribs.framerate, 10);
			if (elem.attribs.samplingrate) media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
			if (elem.attribs.channels) media.channels = parseInt(elem.attribs.channels, 10);
			if (elem.attribs.duration) media.duration = parseInt(elem.attribs.duration, 10);
			if (elem.attribs.height) media.height = parseInt(elem.attribs.height, 10);
			if (elem.attribs.width) media.width = parseInt(elem.attribs.width, 10);
			if (elem.attribs.lang) media.lang = elem.attribs.lang;
			return media;
		});
	}
	function getElements(tagName, where) {
		return DomUtils.getElementsByTagName(tagName, where, true);
	}
	function getOneElement(tagName, node) {
		return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];
	}
	function fetch(tagName, where, recurse) {
		if (recurse === void 0) recurse = false;
		return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
	}
	function getAttribute(name, elem) {
		if (!elem) return null;
		var attribs = elem.attribs;
		return attribs[name];
	}
	function addConditionally(obj, prop, what, where, recurse) {
		if (recurse === void 0) recurse = false;
		var tmp = fetch(what, where, recurse);
		if (tmp) obj[prop] = tmp;
	}
	function isValidFeed(value) {
		return value === "rss" || value === "feed" || value === "rdf:RDF";
	}
	/**
	* Parse a feed.
	*
	* @param feed The feed that should be parsed, as a string.
	* @param options Optionally, options for parsing. When using this option, you should set `xmlMode` to `true`.
	*/
	function parseFeed(feed$3, options) {
		if (options === void 0) options = { xmlMode: true };
		var handler = new FeedHandler(options);
		new Parser_1$1.Parser(handler, options).end(feed$3);
		return handler.feed;
	}
	exports.parseFeed = parseFeed;
} });

//#endregion
//#region node_modules/htmlparser2/lib/index.js
var require_lib$7 = __commonJS({ "node_modules/htmlparser2/lib/index.js"(exports) {
	var __createBinding = exports && exports.__createBinding || (Object.create ? function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		Object.defineProperty(o$2, k2, {
			enumerable: true,
			get: function() {
				return m$2[k$1];
			}
		});
	} : function(o$2, m$2, k$1, k2) {
		if (k2 === void 0) k2 = k$1;
		o$2[k2] = m$2[k$1];
	});
	var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o$2, v$1) {
		Object.defineProperty(o$2, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$2, v$1) {
		o$2["default"] = v$1;
	});
	var __importStar = exports && exports.__importStar || function(mod$1) {
		if (mod$1 && mod$1.__esModule) return mod$1;
		var result = {};
		if (mod$1 != null) {
			for (var k$1 in mod$1) if (k$1 !== "default" && Object.prototype.hasOwnProperty.call(mod$1, k$1)) __createBinding(result, mod$1, k$1);
		}
		__setModuleDefault(result, mod$1);
		return result;
	};
	var __exportStar = exports && exports.__exportStar || function(m$2, exports$1) {
		for (var p$2 in m$2) if (p$2 !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p$2)) __createBinding(exports$1, m$2, p$2);
	};
	var __importDefault = exports && exports.__importDefault || function(mod$1) {
		return mod$1 && mod$1.__esModule ? mod$1 : { "default": mod$1 };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
	var Parser_1 = require_Parser();
	Object.defineProperty(exports, "Parser", {
		enumerable: true,
		get: function() {
			return Parser_1.Parser;
		}
	});
	var domhandler_1 = require_lib$12();
	Object.defineProperty(exports, "DomHandler", {
		enumerable: true,
		get: function() {
			return domhandler_1.DomHandler;
		}
	});
	Object.defineProperty(exports, "DefaultHandler", {
		enumerable: true,
		get: function() {
			return domhandler_1.DomHandler;
		}
	});
	/**
	* Parses the data, returns the resulting document.
	*
	* @param data The data that should be parsed.
	* @param options Optional options for the parser and DOM builder.
	*/
	function parseDocument(data$2, options) {
		var handler = new domhandler_1.DomHandler(void 0, options);
		new Parser_1.Parser(handler, options).end(data$2);
		return handler.root;
	}
	exports.parseDocument = parseDocument;
	/**
	* Parses data, returns an array of the root nodes.
	*
	* Note that the root nodes still have a `Document` node as their parent.
	* Use `parseDocument` to get the `Document` node instead.
	*
	* @param data The data that should be parsed.
	* @param options Optional options for the parser and DOM builder.
	* @deprecated Use `parseDocument` instead.
	*/
	function parseDOM(data$2, options) {
		return parseDocument(data$2, options).children;
	}
	exports.parseDOM = parseDOM;
	/**
	* Creates a parser instance, with an attached DOM handler.
	*
	* @param cb A callback that will be called once parsing has been completed.
	* @param options Optional options for the parser and DOM builder.
	* @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
	*/
	function createDomStream(cb, options, elementCb) {
		var handler = new domhandler_1.DomHandler(cb, options, elementCb);
		return new Parser_1.Parser(handler, options);
	}
	exports.createDomStream = createDomStream;
	var Tokenizer_1 = require_Tokenizer();
	Object.defineProperty(exports, "Tokenizer", {
		enumerable: true,
		get: function() {
			return __importDefault(Tokenizer_1).default;
		}
	});
	var ElementType = __importStar(require_lib$13());
	exports.ElementType = ElementType;
	__exportStar(require_FeedHandler(), exports);
	exports.DomUtils = __importStar(require_lib$8());
	var FeedHandler_1 = require_FeedHandler();
	Object.defineProperty(exports, "RssHandler", {
		enumerable: true,
		get: function() {
			return FeedHandler_1.FeedHandler;
		}
	});
} });
var import_lib$1 = __toESM(require_lib$7());

//#endregion
//#region node_modules/@babel/traverse/lib/path/lib/virtual-types.js
var require_virtual_types = __commonJS({ "node_modules/@babel/traverse/lib/path/lib/virtual-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;
	const ReferencedIdentifier = exports.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
	const ReferencedMemberExpression = exports.ReferencedMemberExpression = ["MemberExpression"];
	const BindingIdentifier = exports.BindingIdentifier = ["Identifier"];
	const Statement = exports.Statement = ["Statement"];
	const Expression = exports.Expression = ["Expression"];
	const Scope$1 = exports.Scope = ["Scopable", "Pattern"];
	const Referenced = exports.Referenced = null;
	const BlockScoped = exports.BlockScoped = null;
	const Var = exports.Var = ["VariableDeclaration"];
	const User = exports.User = null;
	const Generated = exports.Generated = null;
	const Pure = exports.Pure = null;
	const Flow = exports.Flow = [
		"Flow",
		"ImportDeclaration",
		"ExportDeclaration",
		"ImportSpecifier"
	];
	const RestProperty$1 = exports.RestProperty = ["RestElement"];
	const SpreadProperty$1 = exports.SpreadProperty = ["RestElement"];
	const ExistentialTypeParam = exports.ExistentialTypeParam = ["ExistsTypeAnnotation"];
	const NumericLiteralTypeAnnotation = exports.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
	const ForAwaitStatement = exports.ForAwaitStatement = ["ForOfStatement"];
} });

//#endregion
//#region node_modules/ms/index.js
var require_ms = __commonJS({ "node_modules/ms/index.js"(exports, module) {
	/**
	* Helpers.
	*/
	var s$2 = 1e3;
	var m$1 = s$2 * 60;
	var h$1 = m$1 * 60;
	var d$1 = h$1 * 24;
	var w$1 = d$1 * 7;
	var y$1 = d$1 * 365.25;
	/**
	* Parse or format the given `val`.
	*
	* Options:
	*
	*  - `long` verbose formatting [false]
	*
	* @param {String|Number} val
	* @param {Object} [options]
	* @throws {Error} throw an error if val is not a non-empty string or a number
	* @return {String|Number}
	* @api public
	*/
	module.exports = function(val, options) {
		options = options || {};
		var type = typeof val;
		if (type === "string" && val.length > 0) return parse$3(val);
		else if (type === "number" && isFinite(val)) return options.long ? fmtLong(val) : fmtShort(val);
		throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
	};
	/**
	* Parse the given `str` and return milliseconds.
	*
	* @param {String} str
	* @return {Number}
	* @api private
	*/
	function parse$3(str$4) {
		str$4 = String(str$4);
		if (str$4.length > 100) return;
		var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str$4);
		if (!match) return;
		var n$4 = parseFloat(match[1]);
		var type = (match[2] || "ms").toLowerCase();
		switch (type) {
			case "years":
			case "year":
			case "yrs":
			case "yr":
			case "y": return n$4 * y$1;
			case "weeks":
			case "week":
			case "w": return n$4 * w$1;
			case "days":
			case "day":
			case "d": return n$4 * d$1;
			case "hours":
			case "hour":
			case "hrs":
			case "hr":
			case "h": return n$4 * h$1;
			case "minutes":
			case "minute":
			case "mins":
			case "min":
			case "m": return n$4 * m$1;
			case "seconds":
			case "second":
			case "secs":
			case "sec":
			case "s": return n$4 * s$2;
			case "milliseconds":
			case "millisecond":
			case "msecs":
			case "msec":
			case "ms": return n$4;
			default: return void 0;
		}
	}
	/**
	* Short format for `ms`.
	*
	* @param {Number} ms
	* @return {String}
	* @api private
	*/
	function fmtShort(ms) {
		var msAbs = Math.abs(ms);
		if (msAbs >= d$1) return Math.round(ms / d$1) + "d";
		if (msAbs >= h$1) return Math.round(ms / h$1) + "h";
		if (msAbs >= m$1) return Math.round(ms / m$1) + "m";
		if (msAbs >= s$2) return Math.round(ms / s$2) + "s";
		return ms + "ms";
	}
	/**
	* Long format for `ms`.
	*
	* @param {Number} ms
	* @return {String}
	* @api private
	*/
	function fmtLong(ms) {
		var msAbs = Math.abs(ms);
		if (msAbs >= d$1) return plural(ms, msAbs, d$1, "day");
		if (msAbs >= h$1) return plural(ms, msAbs, h$1, "hour");
		if (msAbs >= m$1) return plural(ms, msAbs, m$1, "minute");
		if (msAbs >= s$2) return plural(ms, msAbs, s$2, "second");
		return ms + " ms";
	}
	/**
	* Pluralization helper.
	*/
	function plural(ms, msAbs, n$4, name) {
		var isPlural = msAbs >= n$4 * 1.5;
		return Math.round(ms / n$4) + " " + name + (isPlural ? "s" : "");
	}
} });

//#endregion
//#region node_modules/debug/src/common.js
var require_common$1 = __commonJS({ "node_modules/debug/src/common.js"(exports, module) {
	/**
	* This is the common logic for both the Node.js and web browser
	* implementations of `debug()`.
	*/
	function setup$1(env$3) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = require_ms();
		createDebug.destroy = destroy;
		Object.keys(env$3).forEach((key) => {
			createDebug[key] = env$3[key];
		});
		/**
		* The currently active debug mode names, and names to skip.
		*/
		createDebug.names = [];
		createDebug.skips = [];
		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};
		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash$2 = 0;
			for (let i$6 = 0; i$6 < namespace.length; i$6++) {
				hash$2 = (hash$2 << 5) - hash$2 + namespace.charCodeAt(i$6);
				hash$2 |= 0;
			}
			return createDebug.colors[Math.abs(hash$2) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;
		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;
			function debug$2(...args) {
				if (!debug$2.enabled) return;
				const self$1 = debug$2;
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self$1.diff = ms;
				self$1.prev = prevTime;
				self$1.curr = curr;
				prevTime = curr;
				args[0] = createDebug.coerce(args[0]);
				if (typeof args[0] !== "string") args.unshift("%O");
				let index$1 = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					if (match === "%%") return "%";
					index$1++;
					const formatter$1 = createDebug.formatters[format];
					if (typeof formatter$1 === "function") {
						const val = args[index$1];
						match = formatter$1.call(self$1, val);
						args.splice(index$1, 1);
						index$1--;
					}
					return match;
				});
				createDebug.formatArgs.call(self$1, args);
				const logFn = self$1.log || createDebug.log;
				logFn.apply(self$1, args);
			}
			debug$2.namespace = namespace;
			debug$2.useColors = createDebug.useColors();
			debug$2.color = createDebug.selectColor(namespace);
			debug$2.extend = extend$4;
			debug$2.destroy = createDebug.destroy;
			Object.defineProperty(debug$2, "enabled", {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) return enableOverride;
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}
					return enabledCache;
				},
				set: (v$1) => {
					enableOverride = v$1;
				}
			});
			if (typeof createDebug.init === "function") createDebug.init(debug$2);
			return debug$2;
		}
		function extend$4(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}
		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;
			createDebug.names = [];
			createDebug.skips = [];
			const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
			for (const ns of split) if (ns[0] === "-") createDebug.skips.push(ns.slice(1));
			else createDebug.names.push(ns);
		}
		/**
		* Checks if the given string matches a namespace template, honoring
		* asterisks as wildcards.
		*
		* @param {String} search
		* @param {String} template
		* @return {Boolean}
		*/
		function matchesTemplate(search, template$1) {
			let searchIndex = 0;
			let templateIndex = 0;
			let starIndex = -1;
			let matchIndex = 0;
			while (searchIndex < search.length) if (templateIndex < template$1.length && (template$1[templateIndex] === search[searchIndex] || template$1[templateIndex] === "*")) if (template$1[templateIndex] === "*") {
				starIndex = templateIndex;
				matchIndex = searchIndex;
				templateIndex++;
			} else {
				searchIndex++;
				templateIndex++;
			}
			else if (starIndex !== -1) {
				templateIndex = starIndex + 1;
				matchIndex++;
				searchIndex = matchIndex;
			} else return false;
			while (templateIndex < template$1.length && template$1[templateIndex] === "*") templateIndex++;
			return templateIndex === template$1.length;
		}
		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
			createDebug.enable("");
			return namespaces;
		}
		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			for (const skip$1 of createDebug.skips) if (matchesTemplate(name, skip$1)) return false;
			for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return true;
			return false;
		}
		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) return val.stack || val.message;
			return val;
		}
		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy() {
			console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
		}
		createDebug.enable(createDebug.load());
		return createDebug;
	}
	module.exports = setup$1;
} });

//#endregion
//#region node_modules/debug/src/browser.js
var require_browser = __commonJS({ "node_modules/debug/src/browser.js"(exports, module) {
	/**
	* This is the web browser implementation of `debug()`.
	*/
	exports.formatArgs = formatArgs$1;
	exports.save = save$1;
	exports.load = load$1;
	exports.useColors = useColors$1;
	exports.storage = localstorage();
	exports.destroy = (() => {
		let warned$1 = false;
		return () => {
			if (!warned$1) {
				warned$1 = true;
				console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
			}
		};
	})();
	/**
	* Colors.
	*/
	exports.colors = [
		"#0000CC",
		"#0000FF",
		"#0033CC",
		"#0033FF",
		"#0066CC",
		"#0066FF",
		"#0099CC",
		"#0099FF",
		"#00CC00",
		"#00CC33",
		"#00CC66",
		"#00CC99",
		"#00CCCC",
		"#00CCFF",
		"#3300CC",
		"#3300FF",
		"#3333CC",
		"#3333FF",
		"#3366CC",
		"#3366FF",
		"#3399CC",
		"#3399FF",
		"#33CC00",
		"#33CC33",
		"#33CC66",
		"#33CC99",
		"#33CCCC",
		"#33CCFF",
		"#6600CC",
		"#6600FF",
		"#6633CC",
		"#6633FF",
		"#66CC00",
		"#66CC33",
		"#9900CC",
		"#9900FF",
		"#9933CC",
		"#9933FF",
		"#99CC00",
		"#99CC33",
		"#CC0000",
		"#CC0033",
		"#CC0066",
		"#CC0099",
		"#CC00CC",
		"#CC00FF",
		"#CC3300",
		"#CC3333",
		"#CC3366",
		"#CC3399",
		"#CC33CC",
		"#CC33FF",
		"#CC6600",
		"#CC6633",
		"#CC9900",
		"#CC9933",
		"#CCCC00",
		"#CCCC33",
		"#FF0000",
		"#FF0033",
		"#FF0066",
		"#FF0099",
		"#FF00CC",
		"#FF00FF",
		"#FF3300",
		"#FF3333",
		"#FF3366",
		"#FF3399",
		"#FF33CC",
		"#FF33FF",
		"#FF6600",
		"#FF6633",
		"#FF9900",
		"#FF9933",
		"#FFCC00",
		"#FFCC33"
	];
	/**
	* Currently only WebKit-based Web Inspectors, Firefox >= v31,
	* and the Firebug extension (any Firefox version) are known
	* to support "%c" CSS customizations.
	*
	* TODO: add a `localStorage` variable to explicitly enable/disable colors
	*/
	function useColors$1() {
		if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
		if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
		let m$2;
		return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m$2 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m$2[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
	}
	/**
	* Colorize log arguments if enabled.
	*
	* @api public
	*/
	function formatArgs$1(args) {
		args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
		if (!this.useColors) return;
		const c$2 = "color: " + this.color;
		args.splice(1, 0, c$2, "color: inherit");
		let index$1 = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, (match) => {
			if (match === "%%") return;
			index$1++;
			if (match === "%c") lastC = index$1;
		});
		args.splice(lastC, 0, c$2);
	}
	/**
	* Invokes `console.debug()` when available.
	* No-op when `console.debug` is not a "function".
	* If `console.debug` is not available, falls back
	* to `console.log`.
	*
	* @api public
	*/
	exports.log = console.debug || console.log || (() => {});
	/**
	* Save `namespaces`.
	*
	* @param {String} namespaces
	* @api private
	*/
	function save$1(namespaces) {
		try {
			if (namespaces) exports.storage.setItem("debug", namespaces);
			else exports.storage.removeItem("debug");
		} catch (error) {}
	}
	/**
	* Load `namespaces`.
	*
	* @return {String} returns the previously persisted debug modes
	* @api private
	*/
	function load$1() {
		let r$2;
		try {
			r$2 = exports.storage.getItem("debug");
		} catch (error) {}
		if (!r$2 && typeof process !== "undefined" && "env" in process) r$2 = process.env.DEBUG;
		return r$2;
	}
	/**
	* Localstorage attempts to return the localstorage.
	*
	* This is necessary because safari throws
	* when a user disables cookies/localstorage
	* and you attempt to access it.
	*
	* @return {LocalStorage}
	* @api private
	*/
	function localstorage() {
		try {
			return localStorage;
		} catch (error) {}
	}
	module.exports = require_common$1()(exports);
	const { formatters: formatters$2 } = module.exports;
	/**
	* Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	*/
	formatters$2.j = function(v$1) {
		try {
			return JSON.stringify(v$1);
		} catch (error) {
			return "[UnexpectedJSONParseError]: " + error.message;
		}
	};
} });

//#endregion
//#region node_modules/has-flag/index.js
var require_has_flag = __commonJS({ "node_modules/has-flag/index.js"(exports, module) {
	module.exports = (flag, argv$1 = process.argv) => {
		const prefix$1 = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
		const position = argv$1.indexOf(prefix$1 + flag);
		const terminatorPosition = argv$1.indexOf("--");
		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
	};
} });

//#endregion
//#region node_modules/supports-color/index.js
var require_supports_color = __commonJS({ "node_modules/supports-color/index.js"(exports, module) {
	const os = __require("os");
	const tty$1 = __require("tty");
	const hasFlag = require_has_flag();
	const { env } = process;
	let forceColor;
	if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) forceColor = 0;
	else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) forceColor = 1;
	if ("FORCE_COLOR" in env) if (env.FORCE_COLOR === "true") forceColor = 1;
	else if (env.FORCE_COLOR === "false") forceColor = 0;
	else forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	function translateLevel(level$1) {
		if (level$1 === 0) return false;
		return {
			level: level$1,
			hasBasic: true,
			has256: level$1 >= 2,
			has16m: level$1 >= 3
		};
	}
	function supportsColor(haveStream, streamIsTTY) {
		if (forceColor === 0) return 0;
		if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
		if (hasFlag("color=256")) return 2;
		if (haveStream && !streamIsTTY && forceColor === void 0) return 0;
		const min = forceColor || 0;
		if (env.TERM === "dumb") return min;
		if (process.platform === "win32") {
			const osRelease = os.release().split(".");
			if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) return Number(osRelease[2]) >= 14931 ? 3 : 2;
			return 1;
		}
		if ("CI" in env) {
			if ([
				"TRAVIS",
				"CIRCLECI",
				"APPVEYOR",
				"GITLAB_CI",
				"GITHUB_ACTIONS",
				"BUILDKITE"
			].some((sign) => sign in env) || env.CI_NAME === "codeship") return 1;
			return min;
		}
		if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		if (env.COLORTERM === "truecolor") return 3;
		if ("TERM_PROGRAM" in env) {
			const version$1 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
			switch (env.TERM_PROGRAM) {
				case "iTerm.app": return version$1 >= 3 ? 3 : 2;
				case "Apple_Terminal": return 2;
			}
		}
		if (/-256(color)?$/i.test(env.TERM)) return 2;
		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) return 1;
		if ("COLORTERM" in env) return 1;
		return min;
	}
	function getSupportLevel(stream) {
		const level$1 = supportsColor(stream, stream && stream.isTTY);
		return translateLevel(level$1);
	}
	module.exports = {
		supportsColor: getSupportLevel,
		stdout: translateLevel(supportsColor(true, tty$1.isatty(1))),
		stderr: translateLevel(supportsColor(true, tty$1.isatty(2)))
	};
} });

//#endregion
//#region node_modules/debug/src/node.js
var require_node$1 = __commonJS({ "node_modules/debug/src/node.js"(exports, module) {
	/**
	* Module dependencies.
	*/
	const tty = __require("tty");
	const util$3 = __require("util");
	/**
	* This is the Node.js implementation of `debug()`.
	*/
	exports.init = init;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.destroy = util$3.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
	/**
	* Colors.
	*/
	exports.colors = [
		6,
		2,
		3,
		4,
		5,
		1
	];
	try {
		const supportsColor$1 = require_supports_color();
		if (supportsColor$1 && (supportsColor$1.stderr || supportsColor$1).level >= 2) exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	} catch (error) {}
	/**
	* Build up the default `inspectOpts` object from the environment variables.
	*
	*   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
	*/
	exports.inspectOpts = Object.keys(process.env).filter((key) => {
		return /^debug_/i.test(key);
	}).reduce((obj, key) => {
		const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k$1) => {
			return k$1.toUpperCase();
		});
		let val = process.env[key];
		if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
		else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
		else if (val === "null") val = null;
		else val = Number(val);
		obj[prop] = val;
		return obj;
	}, {});
	/**
	* Is stdout a TTY? Colored output is enabled when `true`.
	*/
	function useColors() {
		return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
	}
	/**
	* Adds ANSI color escape codes if enabled.
	*
	* @api public
	*/
	function formatArgs(args) {
		const { namespace: name, useColors: useColors$2 } = this;
		if (useColors$2) {
			const c$2 = this.color;
			const colorCode = "\x1B[3" + (c$2 < 8 ? c$2 : "8;5;" + c$2);
			const prefix$1 = `  ${colorCode};1m${name} \u001B[0m`;
			args[0] = prefix$1 + args[0].split("\n").join("\n" + prefix$1);
			args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
		} else args[0] = getDate() + name + " " + args[0];
	}
	function getDate() {
		if (exports.inspectOpts.hideDate) return "";
		return new Date().toISOString() + " ";
	}
	/**
	* Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
	*/
	function log(...args) {
		return process.stderr.write(util$3.formatWithOptions(exports.inspectOpts, ...args) + "\n");
	}
	/**
	* Save `namespaces`.
	*
	* @param {String} namespaces
	* @api private
	*/
	function save(namespaces) {
		if (namespaces) process.env.DEBUG = namespaces;
		else delete process.env.DEBUG;
	}
	/**
	* Load `namespaces`.
	*
	* @return {String} returns the previously persisted debug modes
	* @api private
	*/
	function load() {
		return process.env.DEBUG;
	}
	/**
	* Init logic for `debug` instances.
	*
	* Create a new `inspectOpts` object in case `useColors` is set
	* differently for a particular `debug` instance.
	*/
	function init(debug$2) {
		debug$2.inspectOpts = {};
		const keys$1 = Object.keys(exports.inspectOpts);
		for (let i$6 = 0; i$6 < keys$1.length; i$6++) debug$2.inspectOpts[keys$1[i$6]] = exports.inspectOpts[keys$1[i$6]];
	}
	module.exports = require_common$1()(exports);
	const { formatters: formatters$1 } = module.exports;
	/**
	* Map %o to `util.inspect()`, all on a single line.
	*/
	formatters$1.o = function(v$1) {
		this.inspectOpts.colors = this.useColors;
		return util$3.inspect(v$1, this.inspectOpts).split("\n").map((str$4) => str$4.trim()).join(" ");
	};
	/**
	* Map %O to `util.inspect()`, allowing multiple lines if needed.
	*/
	formatters$1.O = function(v$1) {
		this.inspectOpts.colors = this.useColors;
		return util$3.inspect(v$1, this.inspectOpts);
	};
} });

//#endregion
//#region node_modules/debug/src/index.js
var require_src = __commonJS({ "node_modules/debug/src/index.js"(exports, module) {
	/**
	* Detect Electron renderer / nwjs process, which is node, but we should
	* treat as a browser.
	*/
	if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) module.exports = require_browser();
	else module.exports = require_node$1();
} });

//#endregion
//#region node_modules/@babel/types/lib/utils/shallowEqual.js
var require_shallowEqual = __commonJS({ "node_modules/@babel/types/lib/utils/shallowEqual.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = shallowEqual;
	function shallowEqual(actual, expected) {
		const keys$1 = Object.keys(expected);
		for (const key of keys$1) if (actual[key] !== expected[key]) return false;
		return true;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/utils/deprecationWarning.js
var require_deprecationWarning = __commonJS({ "node_modules/@babel/types/lib/utils/deprecationWarning.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = deprecationWarning$1;
	const warnings = new Set();
	function deprecationWarning$1(oldName, newName, prefix$1 = "") {
		if (warnings.has(oldName)) return;
		warnings.add(oldName);
		const { internal, trace } = captureShortStackTrace(1, 2);
		if (internal) return;
		console.warn(`${prefix$1}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`\n${trace}`);
	}
	function captureShortStackTrace(skip$1, length) {
		const { stackTraceLimit, prepareStackTrace } = Error;
		let stackTrace;
		Error.stackTraceLimit = 1 + skip$1 + length;
		Error.prepareStackTrace = function(err, stack) {
			stackTrace = stack;
		};
		new Error().stack;
		Error.stackTraceLimit = stackTraceLimit;
		Error.prepareStackTrace = prepareStackTrace;
		if (!stackTrace) return {
			internal: false,
			trace: ""
		};
		const shortStackTrace = stackTrace.slice(1 + skip$1, 1 + skip$1 + length);
		return {
			internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
			trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
		};
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/generated/index.js
var require_generated$3 = __commonJS({ "node_modules/@babel/types/lib/validators/generated/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isAccessor = isAccessor;
	exports.isAnyTypeAnnotation = isAnyTypeAnnotation$1;
	exports.isArgumentPlaceholder = isArgumentPlaceholder;
	exports.isArrayExpression = isArrayExpression$2;
	exports.isArrayPattern = isArrayPattern;
	exports.isArrayTypeAnnotation = isArrayTypeAnnotation$2;
	exports.isArrowFunctionExpression = isArrowFunctionExpression;
	exports.isAssignmentExpression = isAssignmentExpression$2;
	exports.isAssignmentPattern = isAssignmentPattern$2;
	exports.isAwaitExpression = isAwaitExpression;
	exports.isBigIntLiteral = isBigIntLiteral;
	exports.isBinary = isBinary$2;
	exports.isBinaryExpression = isBinaryExpression$1;
	exports.isBindExpression = isBindExpression;
	exports.isBlock = isBlock;
	exports.isBlockParent = isBlockParent;
	exports.isBlockStatement = isBlockStatement$3;
	exports.isBooleanLiteral = isBooleanLiteral;
	exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
	exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation$1;
	exports.isBreakStatement = isBreakStatement;
	exports.isCallExpression = isCallExpression$7;
	exports.isCatchClause = isCatchClause;
	exports.isClass = isClass$1;
	exports.isClassAccessorProperty = isClassAccessorProperty;
	exports.isClassBody = isClassBody$2;
	exports.isClassDeclaration = isClassDeclaration$2;
	exports.isClassExpression = isClassExpression;
	exports.isClassImplements = isClassImplements;
	exports.isClassMethod = isClassMethod;
	exports.isClassPrivateMethod = isClassPrivateMethod;
	exports.isClassPrivateProperty = isClassPrivateProperty;
	exports.isClassProperty = isClassProperty;
	exports.isCompletionStatement = isCompletionStatement;
	exports.isConditional = isConditional;
	exports.isConditionalExpression = isConditionalExpression;
	exports.isContinueStatement = isContinueStatement;
	exports.isDebuggerStatement = isDebuggerStatement;
	exports.isDecimalLiteral = isDecimalLiteral;
	exports.isDeclaration = isDeclaration;
	exports.isDeclareClass = isDeclareClass;
	exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
	exports.isDeclareExportDeclaration = isDeclareExportDeclaration$1;
	exports.isDeclareFunction = isDeclareFunction;
	exports.isDeclareInterface = isDeclareInterface;
	exports.isDeclareModule = isDeclareModule;
	exports.isDeclareModuleExports = isDeclareModuleExports;
	exports.isDeclareOpaqueType = isDeclareOpaqueType;
	exports.isDeclareTypeAlias = isDeclareTypeAlias;
	exports.isDeclareVariable = isDeclareVariable;
	exports.isDeclaredPredicate = isDeclaredPredicate;
	exports.isDecorator = isDecorator$1;
	exports.isDirective = isDirective;
	exports.isDirectiveLiteral = isDirectiveLiteral;
	exports.isDoExpression = isDoExpression;
	exports.isDoWhileStatement = isDoWhileStatement;
	exports.isEmptyStatement = isEmptyStatement$1;
	exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation$1;
	exports.isEnumBody = isEnumBody;
	exports.isEnumBooleanBody = isEnumBooleanBody;
	exports.isEnumBooleanMember = isEnumBooleanMember;
	exports.isEnumDeclaration = isEnumDeclaration;
	exports.isEnumDefaultedMember = isEnumDefaultedMember;
	exports.isEnumMember = isEnumMember;
	exports.isEnumNumberBody = isEnumNumberBody;
	exports.isEnumNumberMember = isEnumNumberMember;
	exports.isEnumStringBody = isEnumStringBody;
	exports.isEnumStringMember = isEnumStringMember;
	exports.isEnumSymbolBody = isEnumSymbolBody;
	exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
	exports.isExportAllDeclaration = isExportAllDeclaration$1;
	exports.isExportDeclaration = isExportDeclaration$2;
	exports.isExportDefaultDeclaration = isExportDefaultDeclaration$2;
	exports.isExportDefaultSpecifier = isExportDefaultSpecifier$1;
	exports.isExportNamedDeclaration = isExportNamedDeclaration$3;
	exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier$1;
	exports.isExportSpecifier = isExportSpecifier;
	exports.isExpression = isExpression$5;
	exports.isExpressionStatement = isExpressionStatement$3;
	exports.isExpressionWrapper = isExpressionWrapper;
	exports.isFile = isFile;
	exports.isFlow = isFlow$1;
	exports.isFlowBaseAnnotation = isFlowBaseAnnotation$1;
	exports.isFlowDeclaration = isFlowDeclaration;
	exports.isFlowPredicate = isFlowPredicate;
	exports.isFlowType = isFlowType$1;
	exports.isFor = isFor$1;
	exports.isForInStatement = isForInStatement;
	exports.isForOfStatement = isForOfStatement$2;
	exports.isForStatement = isForStatement$2;
	exports.isForXStatement = isForXStatement$1;
	exports.isFunction = isFunction$5;
	exports.isFunctionDeclaration = isFunctionDeclaration$1;
	exports.isFunctionExpression = isFunctionExpression;
	exports.isFunctionParent = isFunctionParent;
	exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
	exports.isFunctionTypeParam = isFunctionTypeParam;
	exports.isGenericTypeAnnotation = isGenericTypeAnnotation$1;
	exports.isIdentifier = isIdentifier$11;
	exports.isIfStatement = isIfStatement$2;
	exports.isImmutable = isImmutable$1;
	exports.isImport = isImport;
	exports.isImportAttribute = isImportAttribute;
	exports.isImportDeclaration = isImportDeclaration$2;
	exports.isImportDefaultSpecifier = isImportDefaultSpecifier$1;
	exports.isImportExpression = isImportExpression;
	exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier$1;
	exports.isImportOrExportDeclaration = isImportOrExportDeclaration;
	exports.isImportSpecifier = isImportSpecifier$1;
	exports.isIndexedAccessType = isIndexedAccessType$1;
	exports.isInferredPredicate = isInferredPredicate;
	exports.isInterfaceDeclaration = isInterfaceDeclaration;
	exports.isInterfaceExtends = isInterfaceExtends;
	exports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
	exports.isInterpreterDirective = isInterpreterDirective;
	exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
	exports.isJSX = isJSX;
	exports.isJSXAttribute = isJSXAttribute;
	exports.isJSXClosingElement = isJSXClosingElement;
	exports.isJSXClosingFragment = isJSXClosingFragment;
	exports.isJSXElement = isJSXElement;
	exports.isJSXEmptyExpression = isJSXEmptyExpression;
	exports.isJSXExpressionContainer = isJSXExpressionContainer;
	exports.isJSXFragment = isJSXFragment;
	exports.isJSXIdentifier = isJSXIdentifier$2;
	exports.isJSXMemberExpression = isJSXMemberExpression$1;
	exports.isJSXNamespacedName = isJSXNamespacedName;
	exports.isJSXOpeningElement = isJSXOpeningElement;
	exports.isJSXOpeningFragment = isJSXOpeningFragment;
	exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
	exports.isJSXSpreadChild = isJSXSpreadChild;
	exports.isJSXText = isJSXText;
	exports.isLVal = isLVal;
	exports.isLabeledStatement = isLabeledStatement;
	exports.isLiteral = isLiteral$4;
	exports.isLogicalExpression = isLogicalExpression;
	exports.isLoop = isLoop;
	exports.isMemberExpression = isMemberExpression$6;
	exports.isMetaProperty = isMetaProperty$1;
	exports.isMethod = isMethod$1;
	exports.isMiscellaneous = isMiscellaneous;
	exports.isMixedTypeAnnotation = isMixedTypeAnnotation$1;
	exports.isModuleDeclaration = isModuleDeclaration;
	exports.isModuleExpression = isModuleExpression;
	exports.isModuleSpecifier = isModuleSpecifier$1;
	exports.isNewExpression = isNewExpression$3;
	exports.isNoop = isNoop;
	exports.isNullLiteral = isNullLiteral$1;
	exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
	exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
	exports.isNumberLiteral = isNumberLiteral;
	exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
	exports.isNumberTypeAnnotation = isNumberTypeAnnotation$1;
	exports.isNumericLiteral = isNumericLiteral;
	exports.isObjectExpression = isObjectExpression$2;
	exports.isObjectMember = isObjectMember;
	exports.isObjectMethod = isObjectMethod;
	exports.isObjectPattern = isObjectPattern$1;
	exports.isObjectProperty = isObjectProperty$1;
	exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
	exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
	exports.isObjectTypeIndexer = isObjectTypeIndexer;
	exports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
	exports.isObjectTypeProperty = isObjectTypeProperty;
	exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
	exports.isOpaqueType = isOpaqueType;
	exports.isOptionalCallExpression = isOptionalCallExpression$1;
	exports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
	exports.isOptionalMemberExpression = isOptionalMemberExpression$2;
	exports.isParenthesizedExpression = isParenthesizedExpression$1;
	exports.isPattern = isPattern$1;
	exports.isPatternLike = isPatternLike;
	exports.isPipelineBareFunction = isPipelineBareFunction;
	exports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
	exports.isPipelineTopicExpression = isPipelineTopicExpression;
	exports.isPlaceholder = isPlaceholder$1;
	exports.isPrivate = isPrivate;
	exports.isPrivateName = isPrivateName$1;
	exports.isProgram = isProgram$1;
	exports.isProperty = isProperty$1;
	exports.isPureish = isPureish$1;
	exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
	exports.isRecordExpression = isRecordExpression$1;
	exports.isRegExpLiteral = isRegExpLiteral$1;
	exports.isRegexLiteral = isRegexLiteral;
	exports.isRestElement = isRestElement$1;
	exports.isRestProperty = isRestProperty$1;
	exports.isReturnStatement = isReturnStatement;
	exports.isScopable = isScopable;
	exports.isSequenceExpression = isSequenceExpression$1;
	exports.isSpreadElement = isSpreadElement;
	exports.isSpreadProperty = isSpreadProperty$1;
	exports.isStandardized = isStandardized;
	exports.isStatement = isStatement$9;
	exports.isStaticBlock = isStaticBlock;
	exports.isStringLiteral = isStringLiteral$4;
	exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
	exports.isStringTypeAnnotation = isStringTypeAnnotation$1;
	exports.isSuper = isSuper$2;
	exports.isSwitchCase = isSwitchCase;
	exports.isSwitchStatement = isSwitchStatement;
	exports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
	exports.isTSAnyKeyword = isTSAnyKeyword;
	exports.isTSArrayType = isTSArrayType$1;
	exports.isTSAsExpression = isTSAsExpression;
	exports.isTSBaseType = isTSBaseType;
	exports.isTSBigIntKeyword = isTSBigIntKeyword;
	exports.isTSBooleanKeyword = isTSBooleanKeyword;
	exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
	exports.isTSConditionalType = isTSConditionalType;
	exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
	exports.isTSConstructorType = isTSConstructorType;
	exports.isTSDeclareFunction = isTSDeclareFunction;
	exports.isTSDeclareMethod = isTSDeclareMethod;
	exports.isTSEntityName = isTSEntityName;
	exports.isTSEnumBody = isTSEnumBody;
	exports.isTSEnumDeclaration = isTSEnumDeclaration;
	exports.isTSEnumMember = isTSEnumMember$1;
	exports.isTSExportAssignment = isTSExportAssignment;
	exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
	exports.isTSExternalModuleReference = isTSExternalModuleReference;
	exports.isTSFunctionType = isTSFunctionType;
	exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
	exports.isTSImportType = isTSImportType;
	exports.isTSIndexSignature = isTSIndexSignature;
	exports.isTSIndexedAccessType = isTSIndexedAccessType;
	exports.isTSInferType = isTSInferType;
	exports.isTSInstantiationExpression = isTSInstantiationExpression;
	exports.isTSInterfaceBody = isTSInterfaceBody$1;
	exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
	exports.isTSIntersectionType = isTSIntersectionType;
	exports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
	exports.isTSLiteralType = isTSLiteralType;
	exports.isTSMappedType = isTSMappedType;
	exports.isTSMethodSignature = isTSMethodSignature;
	exports.isTSModuleBlock = isTSModuleBlock;
	exports.isTSModuleDeclaration = isTSModuleDeclaration;
	exports.isTSNamedTupleMember = isTSNamedTupleMember;
	exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
	exports.isTSNeverKeyword = isTSNeverKeyword;
	exports.isTSNonNullExpression = isTSNonNullExpression;
	exports.isTSNullKeyword = isTSNullKeyword;
	exports.isTSNumberKeyword = isTSNumberKeyword;
	exports.isTSObjectKeyword = isTSObjectKeyword;
	exports.isTSOptionalType = isTSOptionalType;
	exports.isTSParameterProperty = isTSParameterProperty;
	exports.isTSParenthesizedType = isTSParenthesizedType;
	exports.isTSPropertySignature = isTSPropertySignature;
	exports.isTSQualifiedName = isTSQualifiedName;
	exports.isTSRestType = isTSRestType;
	exports.isTSSatisfiesExpression = isTSSatisfiesExpression;
	exports.isTSStringKeyword = isTSStringKeyword;
	exports.isTSSymbolKeyword = isTSSymbolKeyword;
	exports.isTSTemplateLiteralType = isTSTemplateLiteralType;
	exports.isTSThisType = isTSThisType;
	exports.isTSTupleType = isTSTupleType;
	exports.isTSType = isTSType$1;
	exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
	exports.isTSTypeAnnotation = isTSTypeAnnotation$1;
	exports.isTSTypeAssertion = isTSTypeAssertion;
	exports.isTSTypeElement = isTSTypeElement;
	exports.isTSTypeLiteral = isTSTypeLiteral;
	exports.isTSTypeOperator = isTSTypeOperator;
	exports.isTSTypeParameter = isTSTypeParameter;
	exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
	exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
	exports.isTSTypePredicate = isTSTypePredicate;
	exports.isTSTypeQuery = isTSTypeQuery;
	exports.isTSTypeReference = isTSTypeReference$1;
	exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
	exports.isTSUnionType = isTSUnionType;
	exports.isTSUnknownKeyword = isTSUnknownKeyword;
	exports.isTSVoidKeyword = isTSVoidKeyword;
	exports.isTaggedTemplateExpression = isTaggedTemplateExpression$1;
	exports.isTemplateElement = isTemplateElement;
	exports.isTemplateLiteral = isTemplateLiteral$1;
	exports.isTerminatorless = isTerminatorless;
	exports.isThisExpression = isThisExpression$1;
	exports.isThisTypeAnnotation = isThisTypeAnnotation;
	exports.isThrowStatement = isThrowStatement;
	exports.isTopicReference = isTopicReference$1;
	exports.isTryStatement = isTryStatement;
	exports.isTupleExpression = isTupleExpression$1;
	exports.isTupleTypeAnnotation = isTupleTypeAnnotation$1;
	exports.isTypeAlias = isTypeAlias;
	exports.isTypeAnnotation = isTypeAnnotation$1;
	exports.isTypeCastExpression = isTypeCastExpression;
	exports.isTypeParameter = isTypeParameter;
	exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
	exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
	exports.isTypeScript = isTypeScript;
	exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
	exports.isUnaryExpression = isUnaryExpression$1;
	exports.isUnaryLike = isUnaryLike;
	exports.isUnionTypeAnnotation = isUnionTypeAnnotation$1;
	exports.isUpdateExpression = isUpdateExpression;
	exports.isUserWhitespacable = isUserWhitespacable;
	exports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
	exports.isVariableDeclaration = isVariableDeclaration$3;
	exports.isVariableDeclarator = isVariableDeclarator;
	exports.isVariance = isVariance;
	exports.isVoidTypeAnnotation = isVoidTypeAnnotation$1;
	exports.isWhile = isWhile;
	exports.isWhileStatement = isWhileStatement;
	exports.isWithStatement = isWithStatement;
	exports.isYieldExpression = isYieldExpression$1;
	var _shallowEqual$2 = require_shallowEqual();
	var _deprecationWarning$3 = require_deprecationWarning();
	function isArrayExpression$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ArrayExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isAssignmentExpression$2(node, opts) {
		if (!node) return false;
		if (node.type !== "AssignmentExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBinaryExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "BinaryExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isInterpreterDirective(node, opts) {
		if (!node) return false;
		if (node.type !== "InterpreterDirective") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDirective(node, opts) {
		if (!node) return false;
		if (node.type !== "Directive") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDirectiveLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "DirectiveLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBlockStatement$3(node, opts) {
		if (!node) return false;
		if (node.type !== "BlockStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBreakStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "BreakStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isCallExpression$7(node, opts) {
		if (!node) return false;
		if (node.type !== "CallExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isCatchClause(node, opts) {
		if (!node) return false;
		if (node.type !== "CatchClause") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isConditionalExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "ConditionalExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isContinueStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "ContinueStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDebuggerStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "DebuggerStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDoWhileStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "DoWhileStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEmptyStatement$1(node, opts) {
		if (!node) return false;
		if (node.type !== "EmptyStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExpressionStatement$3(node, opts) {
		if (!node) return false;
		if (node.type !== "ExpressionStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFile(node, opts) {
		if (!node) return false;
		if (node.type !== "File") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isForInStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "ForInStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isForStatement$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ForStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunctionDeclaration$1(node, opts) {
		if (!node) return false;
		if (node.type !== "FunctionDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunctionExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "FunctionExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isIdentifier$11(node, opts) {
		if (!node) return false;
		if (node.type !== "Identifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isIfStatement$2(node, opts) {
		if (!node) return false;
		if (node.type !== "IfStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isLabeledStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "LabeledStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStringLiteral$4(node, opts) {
		if (!node) return false;
		if (node.type !== "StringLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNumericLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "NumericLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNullLiteral$1(node, opts) {
		if (!node) return false;
		if (node.type !== "NullLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBooleanLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "BooleanLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isRegExpLiteral$1(node, opts) {
		if (!node) return false;
		if (node.type !== "RegExpLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isLogicalExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "LogicalExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isMemberExpression$6(node, opts) {
		if (!node) return false;
		if (node.type !== "MemberExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNewExpression$3(node, opts) {
		if (!node) return false;
		if (node.type !== "NewExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isProgram$1(node, opts) {
		if (!node) return false;
		if (node.type !== "Program") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectExpression$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectMethod(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectMethod") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectProperty$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isRestElement$1(node, opts) {
		if (!node) return false;
		if (node.type !== "RestElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isReturnStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "ReturnStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSequenceExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "SequenceExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isParenthesizedExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ParenthesizedExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSwitchCase(node, opts) {
		if (!node) return false;
		if (node.type !== "SwitchCase") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSwitchStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "SwitchStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isThisExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ThisExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isThrowStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "ThrowStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTryStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "TryStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isUnaryExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "UnaryExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isUpdateExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "UpdateExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isVariableDeclaration$3(node, opts) {
		if (!node) return false;
		if (node.type !== "VariableDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isVariableDeclarator(node, opts) {
		if (!node) return false;
		if (node.type !== "VariableDeclarator") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isWhileStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "WhileStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isWithStatement(node, opts) {
		if (!node) return false;
		if (node.type !== "WithStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isAssignmentPattern$2(node, opts) {
		if (!node) return false;
		if (node.type !== "AssignmentPattern") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isArrayPattern(node, opts) {
		if (!node) return false;
		if (node.type !== "ArrayPattern") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isArrowFunctionExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "ArrowFunctionExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassBody$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassDeclaration$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportAllDeclaration$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportAllDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportDefaultDeclaration$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportDefaultDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportNamedDeclaration$3(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportNamedDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportSpecifier(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isForOfStatement$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ForOfStatement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportDeclaration$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportDefaultSpecifier$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportDefaultSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportNamespaceSpecifier$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportNamespaceSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportSpecifier$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isMetaProperty$1(node, opts) {
		if (!node) return false;
		if (node.type !== "MetaProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassMethod(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassMethod") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectPattern$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectPattern") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSpreadElement(node, opts) {
		if (!node) return false;
		if (node.type !== "SpreadElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSuper$2(node, opts) {
		if (!node) return false;
		if (node.type !== "Super") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTaggedTemplateExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TaggedTemplateExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTemplateElement(node, opts) {
		if (!node) return false;
		if (node.type !== "TemplateElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTemplateLiteral$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TemplateLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isYieldExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "YieldExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isAwaitExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "AwaitExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImport(node, opts) {
		if (!node) return false;
		if (node.type !== "Import") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBigIntLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "BigIntLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportNamespaceSpecifier$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportNamespaceSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isOptionalMemberExpression$2(node, opts) {
		if (!node) return false;
		if (node.type !== "OptionalMemberExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isOptionalCallExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "OptionalCallExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassAccessorProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassAccessorProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassPrivateProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassPrivateProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassPrivateMethod(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassPrivateMethod") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPrivateName$1(node, opts) {
		if (!node) return false;
		if (node.type !== "PrivateName") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStaticBlock(node, opts) {
		if (!node) return false;
		if (node.type !== "StaticBlock") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportAttribute(node, opts) {
		if (!node) return false;
		if (node.type !== "ImportAttribute") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isAnyTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "AnyTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isArrayTypeAnnotation$2(node, opts) {
		if (!node) return false;
		if (node.type !== "ArrayTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBooleanTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "BooleanTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBooleanLiteralTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "BooleanLiteralTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNullLiteralTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "NullLiteralTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClassImplements(node, opts) {
		if (!node) return false;
		if (node.type !== "ClassImplements") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareClass(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareClass") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareFunction(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareFunction") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareInterface(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareInterface") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareModule(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareModule") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareModuleExports(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareModuleExports") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareTypeAlias(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareTypeAlias") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareOpaqueType(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareOpaqueType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareVariable(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareVariable") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareExportDeclaration$1(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareExportDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclareExportAllDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclareExportAllDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclaredPredicate(node, opts) {
		if (!node) return false;
		if (node.type !== "DeclaredPredicate") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExistsTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "ExistsTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunctionTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "FunctionTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunctionTypeParam(node, opts) {
		if (!node) return false;
		if (node.type !== "FunctionTypeParam") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isGenericTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "GenericTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isInferredPredicate(node, opts) {
		if (!node) return false;
		if (node.type !== "InferredPredicate") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isInterfaceExtends(node, opts) {
		if (!node) return false;
		if (node.type !== "InterfaceExtends") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isInterfaceDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "InterfaceDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isInterfaceTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "InterfaceTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isIntersectionTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "IntersectionTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isMixedTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "MixedTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEmptyTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "EmptyTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNullableTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "NullableTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNumberLiteralTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "NumberLiteralTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNumberTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "NumberTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeInternalSlot(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeInternalSlot") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeCallProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeCallProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeIndexer(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeIndexer") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectTypeSpreadProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "ObjectTypeSpreadProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isOpaqueType(node, opts) {
		if (!node) return false;
		if (node.type !== "OpaqueType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isQualifiedTypeIdentifier(node, opts) {
		if (!node) return false;
		if (node.type !== "QualifiedTypeIdentifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStringLiteralTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "StringLiteralTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStringTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "StringTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSymbolTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "SymbolTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isThisTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "ThisTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTupleTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TupleTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeofTypeAnnotation(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeofTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeAlias(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeAlias") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeCastExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeCastExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeParameter(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeParameter") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeParameterDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeParameterDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeParameterInstantiation(node, opts) {
		if (!node) return false;
		if (node.type !== "TypeParameterInstantiation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isUnionTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "UnionTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isVariance(node, opts) {
		if (!node) return false;
		if (node.type !== "Variance") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isVoidTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "VoidTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumBooleanBody(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumBooleanBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumNumberBody(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumNumberBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumStringBody(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumStringBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumSymbolBody(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumSymbolBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumBooleanMember(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumBooleanMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumNumberMember(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumNumberMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumStringMember(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumStringMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumDefaultedMember(node, opts) {
		if (!node) return false;
		if (node.type !== "EnumDefaultedMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isIndexedAccessType$1(node, opts) {
		if (!node) return false;
		if (node.type !== "IndexedAccessType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isOptionalIndexedAccessType(node, opts) {
		if (!node) return false;
		if (node.type !== "OptionalIndexedAccessType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXAttribute(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXAttribute") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXClosingElement(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXClosingElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXElement(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXEmptyExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXEmptyExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXExpressionContainer(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXExpressionContainer") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXSpreadChild(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXSpreadChild") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXIdentifier$2(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXIdentifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXMemberExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXMemberExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXNamespacedName(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXNamespacedName") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXOpeningElement(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXOpeningElement") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXSpreadAttribute(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXSpreadAttribute") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXText(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXText") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXFragment(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXFragment") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXOpeningFragment(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXOpeningFragment") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSXClosingFragment(node, opts) {
		if (!node) return false;
		if (node.type !== "JSXClosingFragment") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNoop(node, opts) {
		if (!node) return false;
		if (node.type !== "Noop") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPlaceholder$1(node, opts) {
		if (!node) return false;
		if (node.type !== "Placeholder") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isV8IntrinsicIdentifier(node, opts) {
		if (!node) return false;
		if (node.type !== "V8IntrinsicIdentifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isArgumentPlaceholder(node, opts) {
		if (!node) return false;
		if (node.type !== "ArgumentPlaceholder") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBindExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "BindExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDecorator$1(node, opts) {
		if (!node) return false;
		if (node.type !== "Decorator") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDoExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "DoExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportDefaultSpecifier$1(node, opts) {
		if (!node) return false;
		if (node.type !== "ExportDefaultSpecifier") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isRecordExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "RecordExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTupleExpression$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TupleExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDecimalLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "DecimalLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isModuleExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "ModuleExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTopicReference$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TopicReference") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPipelineTopicExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "PipelineTopicExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPipelineBareFunction(node, opts) {
		if (!node) return false;
		if (node.type !== "PipelineBareFunction") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPipelinePrimaryTopicReference(node, opts) {
		if (!node) return false;
		if (node.type !== "PipelinePrimaryTopicReference") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSParameterProperty(node, opts) {
		if (!node) return false;
		if (node.type !== "TSParameterProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSDeclareFunction(node, opts) {
		if (!node) return false;
		if (node.type !== "TSDeclareFunction") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSDeclareMethod(node, opts) {
		if (!node) return false;
		if (node.type !== "TSDeclareMethod") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSQualifiedName(node, opts) {
		if (!node) return false;
		if (node.type !== "TSQualifiedName") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSCallSignatureDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSCallSignatureDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSConstructSignatureDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSConstructSignatureDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSPropertySignature(node, opts) {
		if (!node) return false;
		if (node.type !== "TSPropertySignature") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSMethodSignature(node, opts) {
		if (!node) return false;
		if (node.type !== "TSMethodSignature") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSIndexSignature(node, opts) {
		if (!node) return false;
		if (node.type !== "TSIndexSignature") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSAnyKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSAnyKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSBooleanKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSBooleanKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSBigIntKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSBigIntKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSIntrinsicKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSIntrinsicKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNeverKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNeverKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNullKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNullKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNumberKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNumberKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSObjectKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSObjectKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSStringKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSStringKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSSymbolKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSSymbolKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSUndefinedKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSUndefinedKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSUnknownKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSUnknownKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSVoidKeyword(node, opts) {
		if (!node) return false;
		if (node.type !== "TSVoidKeyword") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSThisType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSThisType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSFunctionType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSFunctionType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSConstructorType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSConstructorType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeReference$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeReference") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypePredicate(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypePredicate") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeQuery(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeQuery") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeLiteral(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSArrayType$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TSArrayType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTupleType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTupleType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSOptionalType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSOptionalType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSRestType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSRestType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNamedTupleMember(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNamedTupleMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSUnionType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSUnionType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSIntersectionType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSIntersectionType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSConditionalType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSConditionalType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSInferType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSInferType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSParenthesizedType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSParenthesizedType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeOperator(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeOperator") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSIndexedAccessType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSIndexedAccessType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSMappedType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSMappedType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTemplateLiteralType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTemplateLiteralType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSLiteralType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSLiteralType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSExpressionWithTypeArguments(node, opts) {
		if (!node) return false;
		if (node.type !== "TSExpressionWithTypeArguments") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSInterfaceDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSInterfaceDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSInterfaceBody$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TSInterfaceBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeAliasDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeAliasDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSInstantiationExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "TSInstantiationExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSAsExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "TSAsExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSSatisfiesExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "TSSatisfiesExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeAssertion(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeAssertion") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSEnumBody(node, opts) {
		if (!node) return false;
		if (node.type !== "TSEnumBody") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSEnumDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSEnumDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSEnumMember$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TSEnumMember") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSModuleDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSModuleDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSModuleBlock(node, opts) {
		if (!node) return false;
		if (node.type !== "TSModuleBlock") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSImportType(node, opts) {
		if (!node) return false;
		if (node.type !== "TSImportType") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSImportEqualsDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSImportEqualsDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSExternalModuleReference(node, opts) {
		if (!node) return false;
		if (node.type !== "TSExternalModuleReference") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNonNullExpression(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNonNullExpression") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSExportAssignment(node, opts) {
		if (!node) return false;
		if (node.type !== "TSExportAssignment") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSNamespaceExportDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSNamespaceExportDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeAnnotation$1(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeAnnotation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeParameterInstantiation(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeParameterInstantiation") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeParameterDeclaration(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeParameterDeclaration") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeParameter(node, opts) {
		if (!node) return false;
		if (node.type !== "TSTypeParameter") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStandardized(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ArrayExpression":
			case "AssignmentExpression":
			case "BinaryExpression":
			case "InterpreterDirective":
			case "Directive":
			case "DirectiveLiteral":
			case "BlockStatement":
			case "BreakStatement":
			case "CallExpression":
			case "CatchClause":
			case "ConditionalExpression":
			case "ContinueStatement":
			case "DebuggerStatement":
			case "DoWhileStatement":
			case "EmptyStatement":
			case "ExpressionStatement":
			case "File":
			case "ForInStatement":
			case "ForStatement":
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "Identifier":
			case "IfStatement":
			case "LabeledStatement":
			case "StringLiteral":
			case "NumericLiteral":
			case "NullLiteral":
			case "BooleanLiteral":
			case "RegExpLiteral":
			case "LogicalExpression":
			case "MemberExpression":
			case "NewExpression":
			case "Program":
			case "ObjectExpression":
			case "ObjectMethod":
			case "ObjectProperty":
			case "RestElement":
			case "ReturnStatement":
			case "SequenceExpression":
			case "ParenthesizedExpression":
			case "SwitchCase":
			case "SwitchStatement":
			case "ThisExpression":
			case "ThrowStatement":
			case "TryStatement":
			case "UnaryExpression":
			case "UpdateExpression":
			case "VariableDeclaration":
			case "VariableDeclarator":
			case "WhileStatement":
			case "WithStatement":
			case "AssignmentPattern":
			case "ArrayPattern":
			case "ArrowFunctionExpression":
			case "ClassBody":
			case "ClassExpression":
			case "ClassDeclaration":
			case "ExportAllDeclaration":
			case "ExportDefaultDeclaration":
			case "ExportNamedDeclaration":
			case "ExportSpecifier":
			case "ForOfStatement":
			case "ImportDeclaration":
			case "ImportDefaultSpecifier":
			case "ImportNamespaceSpecifier":
			case "ImportSpecifier":
			case "ImportExpression":
			case "MetaProperty":
			case "ClassMethod":
			case "ObjectPattern":
			case "SpreadElement":
			case "Super":
			case "TaggedTemplateExpression":
			case "TemplateElement":
			case "TemplateLiteral":
			case "YieldExpression":
			case "AwaitExpression":
			case "Import":
			case "BigIntLiteral":
			case "ExportNamespaceSpecifier":
			case "OptionalMemberExpression":
			case "OptionalCallExpression":
			case "ClassProperty":
			case "ClassAccessorProperty":
			case "ClassPrivateProperty":
			case "ClassPrivateMethod":
			case "PrivateName":
			case "StaticBlock":
			case "ImportAttribute": break;
			case "Placeholder":
				switch (node.expectedNode) {
					case "Identifier":
					case "StringLiteral":
					case "BlockStatement":
					case "ClassBody": break;
					default: return false;
				}
				break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExpression$5(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ArrayExpression":
			case "AssignmentExpression":
			case "BinaryExpression":
			case "CallExpression":
			case "ConditionalExpression":
			case "FunctionExpression":
			case "Identifier":
			case "StringLiteral":
			case "NumericLiteral":
			case "NullLiteral":
			case "BooleanLiteral":
			case "RegExpLiteral":
			case "LogicalExpression":
			case "MemberExpression":
			case "NewExpression":
			case "ObjectExpression":
			case "SequenceExpression":
			case "ParenthesizedExpression":
			case "ThisExpression":
			case "UnaryExpression":
			case "UpdateExpression":
			case "ArrowFunctionExpression":
			case "ClassExpression":
			case "ImportExpression":
			case "MetaProperty":
			case "Super":
			case "TaggedTemplateExpression":
			case "TemplateLiteral":
			case "YieldExpression":
			case "AwaitExpression":
			case "Import":
			case "BigIntLiteral":
			case "OptionalMemberExpression":
			case "OptionalCallExpression":
			case "TypeCastExpression":
			case "JSXElement":
			case "JSXFragment":
			case "BindExpression":
			case "DoExpression":
			case "RecordExpression":
			case "TupleExpression":
			case "DecimalLiteral":
			case "ModuleExpression":
			case "TopicReference":
			case "PipelineTopicExpression":
			case "PipelineBareFunction":
			case "PipelinePrimaryTopicReference":
			case "TSInstantiationExpression":
			case "TSAsExpression":
			case "TSSatisfiesExpression":
			case "TSTypeAssertion":
			case "TSNonNullExpression": break;
			case "Placeholder":
				switch (node.expectedNode) {
					case "Expression":
					case "Identifier":
					case "StringLiteral": break;
					default: return false;
				}
				break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBinary$2(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BinaryExpression":
			case "LogicalExpression": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isScopable(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BlockStatement":
			case "CatchClause":
			case "DoWhileStatement":
			case "ForInStatement":
			case "ForStatement":
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "Program":
			case "ObjectMethod":
			case "SwitchStatement":
			case "WhileStatement":
			case "ArrowFunctionExpression":
			case "ClassExpression":
			case "ClassDeclaration":
			case "ForOfStatement":
			case "ClassMethod":
			case "ClassPrivateMethod":
			case "StaticBlock":
			case "TSModuleBlock": break;
			case "Placeholder": if (node.expectedNode === "BlockStatement") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBlockParent(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BlockStatement":
			case "CatchClause":
			case "DoWhileStatement":
			case "ForInStatement":
			case "ForStatement":
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "Program":
			case "ObjectMethod":
			case "SwitchStatement":
			case "WhileStatement":
			case "ArrowFunctionExpression":
			case "ForOfStatement":
			case "ClassMethod":
			case "ClassPrivateMethod":
			case "StaticBlock":
			case "TSModuleBlock": break;
			case "Placeholder": if (node.expectedNode === "BlockStatement") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isBlock(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BlockStatement":
			case "Program":
			case "TSModuleBlock": break;
			case "Placeholder": if (node.expectedNode === "BlockStatement") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isStatement$9(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BlockStatement":
			case "BreakStatement":
			case "ContinueStatement":
			case "DebuggerStatement":
			case "DoWhileStatement":
			case "EmptyStatement":
			case "ExpressionStatement":
			case "ForInStatement":
			case "ForStatement":
			case "FunctionDeclaration":
			case "IfStatement":
			case "LabeledStatement":
			case "ReturnStatement":
			case "SwitchStatement":
			case "ThrowStatement":
			case "TryStatement":
			case "VariableDeclaration":
			case "WhileStatement":
			case "WithStatement":
			case "ClassDeclaration":
			case "ExportAllDeclaration":
			case "ExportDefaultDeclaration":
			case "ExportNamedDeclaration":
			case "ForOfStatement":
			case "ImportDeclaration":
			case "DeclareClass":
			case "DeclareFunction":
			case "DeclareInterface":
			case "DeclareModule":
			case "DeclareModuleExports":
			case "DeclareTypeAlias":
			case "DeclareOpaqueType":
			case "DeclareVariable":
			case "DeclareExportDeclaration":
			case "DeclareExportAllDeclaration":
			case "InterfaceDeclaration":
			case "OpaqueType":
			case "TypeAlias":
			case "EnumDeclaration":
			case "TSDeclareFunction":
			case "TSInterfaceDeclaration":
			case "TSTypeAliasDeclaration":
			case "TSEnumDeclaration":
			case "TSModuleDeclaration":
			case "TSImportEqualsDeclaration":
			case "TSExportAssignment":
			case "TSNamespaceExportDeclaration": break;
			case "Placeholder":
				switch (node.expectedNode) {
					case "Statement":
					case "Declaration":
					case "BlockStatement": break;
					default: return false;
				}
				break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTerminatorless(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BreakStatement":
			case "ContinueStatement":
			case "ReturnStatement":
			case "ThrowStatement":
			case "YieldExpression":
			case "AwaitExpression": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isCompletionStatement(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "BreakStatement":
			case "ContinueStatement":
			case "ReturnStatement":
			case "ThrowStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isConditional(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ConditionalExpression":
			case "IfStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isLoop(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "DoWhileStatement":
			case "ForInStatement":
			case "ForStatement":
			case "WhileStatement":
			case "ForOfStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isWhile(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "DoWhileStatement":
			case "WhileStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExpressionWrapper(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ExpressionStatement":
			case "ParenthesizedExpression":
			case "TypeCastExpression": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFor$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ForInStatement":
			case "ForStatement":
			case "ForOfStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isForXStatement$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ForInStatement":
			case "ForOfStatement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunction$5(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "ObjectMethod":
			case "ArrowFunctionExpression":
			case "ClassMethod":
			case "ClassPrivateMethod": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFunctionParent(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "ObjectMethod":
			case "ArrowFunctionExpression":
			case "ClassMethod":
			case "ClassPrivateMethod":
			case "StaticBlock":
			case "TSModuleBlock": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPureish$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "FunctionDeclaration":
			case "FunctionExpression":
			case "StringLiteral":
			case "NumericLiteral":
			case "NullLiteral":
			case "BooleanLiteral":
			case "RegExpLiteral":
			case "ArrowFunctionExpression":
			case "BigIntLiteral":
			case "DecimalLiteral": break;
			case "Placeholder": if (node.expectedNode === "StringLiteral") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isDeclaration(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "FunctionDeclaration":
			case "VariableDeclaration":
			case "ClassDeclaration":
			case "ExportAllDeclaration":
			case "ExportDefaultDeclaration":
			case "ExportNamedDeclaration":
			case "ImportDeclaration":
			case "DeclareClass":
			case "DeclareFunction":
			case "DeclareInterface":
			case "DeclareModule":
			case "DeclareModuleExports":
			case "DeclareTypeAlias":
			case "DeclareOpaqueType":
			case "DeclareVariable":
			case "DeclareExportDeclaration":
			case "DeclareExportAllDeclaration":
			case "InterfaceDeclaration":
			case "OpaqueType":
			case "TypeAlias":
			case "EnumDeclaration":
			case "TSDeclareFunction":
			case "TSInterfaceDeclaration":
			case "TSTypeAliasDeclaration":
			case "TSEnumDeclaration":
			case "TSModuleDeclaration":
			case "TSImportEqualsDeclaration": break;
			case "Placeholder": if (node.expectedNode === "Declaration") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPatternLike(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "Identifier":
			case "RestElement":
			case "AssignmentPattern":
			case "ArrayPattern":
			case "ObjectPattern":
			case "TSAsExpression":
			case "TSSatisfiesExpression":
			case "TSTypeAssertion":
			case "TSNonNullExpression": break;
			case "Placeholder":
				switch (node.expectedNode) {
					case "Pattern":
					case "Identifier": break;
					default: return false;
				}
				break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isLVal(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "Identifier":
			case "MemberExpression":
			case "RestElement":
			case "AssignmentPattern":
			case "ArrayPattern":
			case "ObjectPattern":
			case "TSParameterProperty":
			case "TSAsExpression":
			case "TSSatisfiesExpression":
			case "TSTypeAssertion":
			case "TSNonNullExpression": break;
			case "Placeholder":
				switch (node.expectedNode) {
					case "Pattern":
					case "Identifier": break;
					default: return false;
				}
				break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSEntityName(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "Identifier":
			case "TSQualifiedName": break;
			case "Placeholder": if (node.expectedNode === "Identifier") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isLiteral$4(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "StringLiteral":
			case "NumericLiteral":
			case "NullLiteral":
			case "BooleanLiteral":
			case "RegExpLiteral":
			case "TemplateLiteral":
			case "BigIntLiteral":
			case "DecimalLiteral": break;
			case "Placeholder": if (node.expectedNode === "StringLiteral") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImmutable$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "StringLiteral":
			case "NumericLiteral":
			case "NullLiteral":
			case "BooleanLiteral":
			case "BigIntLiteral":
			case "JSXAttribute":
			case "JSXClosingElement":
			case "JSXElement":
			case "JSXExpressionContainer":
			case "JSXSpreadChild":
			case "JSXOpeningElement":
			case "JSXText":
			case "JSXFragment":
			case "JSXOpeningFragment":
			case "JSXClosingFragment":
			case "DecimalLiteral": break;
			case "Placeholder": if (node.expectedNode === "StringLiteral") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isUserWhitespacable(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ObjectMethod":
			case "ObjectProperty":
			case "ObjectTypeInternalSlot":
			case "ObjectTypeCallProperty":
			case "ObjectTypeIndexer":
			case "ObjectTypeProperty":
			case "ObjectTypeSpreadProperty": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isMethod$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ObjectMethod":
			case "ClassMethod":
			case "ClassPrivateMethod": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isObjectMember(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ObjectMethod":
			case "ObjectProperty": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isProperty$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ObjectProperty":
			case "ClassProperty":
			case "ClassAccessorProperty":
			case "ClassPrivateProperty": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isUnaryLike(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "UnaryExpression":
			case "SpreadElement": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPattern$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "AssignmentPattern":
			case "ArrayPattern":
			case "ObjectPattern": break;
			case "Placeholder": if (node.expectedNode === "Pattern") break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isClass$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ClassExpression":
			case "ClassDeclaration": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isImportOrExportDeclaration(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ExportAllDeclaration":
			case "ExportDefaultDeclaration":
			case "ExportNamedDeclaration":
			case "ImportDeclaration": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isExportDeclaration$2(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ExportAllDeclaration":
			case "ExportDefaultDeclaration":
			case "ExportNamedDeclaration": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isModuleSpecifier$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ExportSpecifier":
			case "ImportDefaultSpecifier":
			case "ImportNamespaceSpecifier":
			case "ImportSpecifier":
			case "ExportNamespaceSpecifier":
			case "ExportDefaultSpecifier": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isAccessor(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ClassAccessorProperty": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isPrivate(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "ClassPrivateProperty":
			case "ClassPrivateMethod":
			case "PrivateName": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFlow$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "AnyTypeAnnotation":
			case "ArrayTypeAnnotation":
			case "BooleanTypeAnnotation":
			case "BooleanLiteralTypeAnnotation":
			case "NullLiteralTypeAnnotation":
			case "ClassImplements":
			case "DeclareClass":
			case "DeclareFunction":
			case "DeclareInterface":
			case "DeclareModule":
			case "DeclareModuleExports":
			case "DeclareTypeAlias":
			case "DeclareOpaqueType":
			case "DeclareVariable":
			case "DeclareExportDeclaration":
			case "DeclareExportAllDeclaration":
			case "DeclaredPredicate":
			case "ExistsTypeAnnotation":
			case "FunctionTypeAnnotation":
			case "FunctionTypeParam":
			case "GenericTypeAnnotation":
			case "InferredPredicate":
			case "InterfaceExtends":
			case "InterfaceDeclaration":
			case "InterfaceTypeAnnotation":
			case "IntersectionTypeAnnotation":
			case "MixedTypeAnnotation":
			case "EmptyTypeAnnotation":
			case "NullableTypeAnnotation":
			case "NumberLiteralTypeAnnotation":
			case "NumberTypeAnnotation":
			case "ObjectTypeAnnotation":
			case "ObjectTypeInternalSlot":
			case "ObjectTypeCallProperty":
			case "ObjectTypeIndexer":
			case "ObjectTypeProperty":
			case "ObjectTypeSpreadProperty":
			case "OpaqueType":
			case "QualifiedTypeIdentifier":
			case "StringLiteralTypeAnnotation":
			case "StringTypeAnnotation":
			case "SymbolTypeAnnotation":
			case "ThisTypeAnnotation":
			case "TupleTypeAnnotation":
			case "TypeofTypeAnnotation":
			case "TypeAlias":
			case "TypeAnnotation":
			case "TypeCastExpression":
			case "TypeParameter":
			case "TypeParameterDeclaration":
			case "TypeParameterInstantiation":
			case "UnionTypeAnnotation":
			case "Variance":
			case "VoidTypeAnnotation":
			case "EnumDeclaration":
			case "EnumBooleanBody":
			case "EnumNumberBody":
			case "EnumStringBody":
			case "EnumSymbolBody":
			case "EnumBooleanMember":
			case "EnumNumberMember":
			case "EnumStringMember":
			case "EnumDefaultedMember":
			case "IndexedAccessType":
			case "OptionalIndexedAccessType": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFlowType$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "AnyTypeAnnotation":
			case "ArrayTypeAnnotation":
			case "BooleanTypeAnnotation":
			case "BooleanLiteralTypeAnnotation":
			case "NullLiteralTypeAnnotation":
			case "ExistsTypeAnnotation":
			case "FunctionTypeAnnotation":
			case "GenericTypeAnnotation":
			case "InterfaceTypeAnnotation":
			case "IntersectionTypeAnnotation":
			case "MixedTypeAnnotation":
			case "EmptyTypeAnnotation":
			case "NullableTypeAnnotation":
			case "NumberLiteralTypeAnnotation":
			case "NumberTypeAnnotation":
			case "ObjectTypeAnnotation":
			case "StringLiteralTypeAnnotation":
			case "StringTypeAnnotation":
			case "SymbolTypeAnnotation":
			case "ThisTypeAnnotation":
			case "TupleTypeAnnotation":
			case "TypeofTypeAnnotation":
			case "UnionTypeAnnotation":
			case "VoidTypeAnnotation":
			case "IndexedAccessType":
			case "OptionalIndexedAccessType": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFlowBaseAnnotation$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "AnyTypeAnnotation":
			case "BooleanTypeAnnotation":
			case "NullLiteralTypeAnnotation":
			case "MixedTypeAnnotation":
			case "EmptyTypeAnnotation":
			case "NumberTypeAnnotation":
			case "StringTypeAnnotation":
			case "SymbolTypeAnnotation":
			case "ThisTypeAnnotation":
			case "VoidTypeAnnotation": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFlowDeclaration(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "DeclareClass":
			case "DeclareFunction":
			case "DeclareInterface":
			case "DeclareModule":
			case "DeclareModuleExports":
			case "DeclareTypeAlias":
			case "DeclareOpaqueType":
			case "DeclareVariable":
			case "DeclareExportDeclaration":
			case "DeclareExportAllDeclaration":
			case "InterfaceDeclaration":
			case "OpaqueType":
			case "TypeAlias": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isFlowPredicate(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "DeclaredPredicate":
			case "InferredPredicate": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumBody(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "EnumBooleanBody":
			case "EnumNumberBody":
			case "EnumStringBody":
			case "EnumSymbolBody": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isEnumMember(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "EnumBooleanMember":
			case "EnumNumberMember":
			case "EnumStringMember":
			case "EnumDefaultedMember": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isJSX(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "JSXAttribute":
			case "JSXClosingElement":
			case "JSXElement":
			case "JSXEmptyExpression":
			case "JSXExpressionContainer":
			case "JSXSpreadChild":
			case "JSXIdentifier":
			case "JSXMemberExpression":
			case "JSXNamespacedName":
			case "JSXOpeningElement":
			case "JSXSpreadAttribute":
			case "JSXText":
			case "JSXFragment":
			case "JSXOpeningFragment":
			case "JSXClosingFragment": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isMiscellaneous(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "Noop":
			case "Placeholder":
			case "V8IntrinsicIdentifier": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTypeScript(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "TSParameterProperty":
			case "TSDeclareFunction":
			case "TSDeclareMethod":
			case "TSQualifiedName":
			case "TSCallSignatureDeclaration":
			case "TSConstructSignatureDeclaration":
			case "TSPropertySignature":
			case "TSMethodSignature":
			case "TSIndexSignature":
			case "TSAnyKeyword":
			case "TSBooleanKeyword":
			case "TSBigIntKeyword":
			case "TSIntrinsicKeyword":
			case "TSNeverKeyword":
			case "TSNullKeyword":
			case "TSNumberKeyword":
			case "TSObjectKeyword":
			case "TSStringKeyword":
			case "TSSymbolKeyword":
			case "TSUndefinedKeyword":
			case "TSUnknownKeyword":
			case "TSVoidKeyword":
			case "TSThisType":
			case "TSFunctionType":
			case "TSConstructorType":
			case "TSTypeReference":
			case "TSTypePredicate":
			case "TSTypeQuery":
			case "TSTypeLiteral":
			case "TSArrayType":
			case "TSTupleType":
			case "TSOptionalType":
			case "TSRestType":
			case "TSNamedTupleMember":
			case "TSUnionType":
			case "TSIntersectionType":
			case "TSConditionalType":
			case "TSInferType":
			case "TSParenthesizedType":
			case "TSTypeOperator":
			case "TSIndexedAccessType":
			case "TSMappedType":
			case "TSTemplateLiteralType":
			case "TSLiteralType":
			case "TSExpressionWithTypeArguments":
			case "TSInterfaceDeclaration":
			case "TSInterfaceBody":
			case "TSTypeAliasDeclaration":
			case "TSInstantiationExpression":
			case "TSAsExpression":
			case "TSSatisfiesExpression":
			case "TSTypeAssertion":
			case "TSEnumBody":
			case "TSEnumDeclaration":
			case "TSEnumMember":
			case "TSModuleDeclaration":
			case "TSModuleBlock":
			case "TSImportType":
			case "TSImportEqualsDeclaration":
			case "TSExternalModuleReference":
			case "TSNonNullExpression":
			case "TSExportAssignment":
			case "TSNamespaceExportDeclaration":
			case "TSTypeAnnotation":
			case "TSTypeParameterInstantiation":
			case "TSTypeParameterDeclaration":
			case "TSTypeParameter": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSTypeElement(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "TSCallSignatureDeclaration":
			case "TSConstructSignatureDeclaration":
			case "TSPropertySignature":
			case "TSMethodSignature":
			case "TSIndexSignature": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSType$1(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "TSAnyKeyword":
			case "TSBooleanKeyword":
			case "TSBigIntKeyword":
			case "TSIntrinsicKeyword":
			case "TSNeverKeyword":
			case "TSNullKeyword":
			case "TSNumberKeyword":
			case "TSObjectKeyword":
			case "TSStringKeyword":
			case "TSSymbolKeyword":
			case "TSUndefinedKeyword":
			case "TSUnknownKeyword":
			case "TSVoidKeyword":
			case "TSThisType":
			case "TSFunctionType":
			case "TSConstructorType":
			case "TSTypeReference":
			case "TSTypePredicate":
			case "TSTypeQuery":
			case "TSTypeLiteral":
			case "TSArrayType":
			case "TSTupleType":
			case "TSOptionalType":
			case "TSRestType":
			case "TSUnionType":
			case "TSIntersectionType":
			case "TSConditionalType":
			case "TSInferType":
			case "TSParenthesizedType":
			case "TSTypeOperator":
			case "TSIndexedAccessType":
			case "TSMappedType":
			case "TSTemplateLiteralType":
			case "TSLiteralType":
			case "TSExpressionWithTypeArguments":
			case "TSImportType": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isTSBaseType(node, opts) {
		if (!node) return false;
		switch (node.type) {
			case "TSAnyKeyword":
			case "TSBooleanKeyword":
			case "TSBigIntKeyword":
			case "TSIntrinsicKeyword":
			case "TSNeverKeyword":
			case "TSNullKeyword":
			case "TSNumberKeyword":
			case "TSObjectKeyword":
			case "TSStringKeyword":
			case "TSSymbolKeyword":
			case "TSUndefinedKeyword":
			case "TSUnknownKeyword":
			case "TSVoidKeyword":
			case "TSThisType":
			case "TSTemplateLiteralType":
			case "TSLiteralType": break;
			default: return false;
		}
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isNumberLiteral(node, opts) {
		(0, _deprecationWarning$3.default)("isNumberLiteral", "isNumericLiteral");
		if (!node) return false;
		if (node.type !== "NumberLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isRegexLiteral(node, opts) {
		(0, _deprecationWarning$3.default)("isRegexLiteral", "isRegExpLiteral");
		if (!node) return false;
		if (node.type !== "RegexLiteral") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isRestProperty$1(node, opts) {
		(0, _deprecationWarning$3.default)("isRestProperty", "isRestElement");
		if (!node) return false;
		if (node.type !== "RestProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isSpreadProperty$1(node, opts) {
		(0, _deprecationWarning$3.default)("isSpreadProperty", "isSpreadElement");
		if (!node) return false;
		if (node.type !== "SpreadProperty") return false;
		return opts == null || (0, _shallowEqual$2.default)(node, opts);
	}
	function isModuleDeclaration(node, opts) {
		(0, _deprecationWarning$3.default)("isModuleDeclaration", "isImportOrExportDeclaration");
		return isImportOrExportDeclaration(node, opts);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/matchesPattern.js
var require_matchesPattern = __commonJS({ "node_modules/@babel/types/lib/validators/matchesPattern.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = matchesPattern$2;
	var _index$55 = require_generated$3();
	function matchesPattern$2(member, match, allowPartial) {
		if (!(0, _index$55.isMemberExpression)(member)) return false;
		const parts = Array.isArray(match) ? match : match.split(".");
		const nodes$1 = [];
		let node;
		for (node = member; (0, _index$55.isMemberExpression)(node); node = node.object) nodes$1.push(node.property);
		nodes$1.push(node);
		if (nodes$1.length < parts.length) return false;
		if (!allowPartial && nodes$1.length > parts.length) return false;
		for (let i$6 = 0, j$1 = nodes$1.length - 1; i$6 < parts.length; i$6++, j$1--) {
			const node$1 = nodes$1[j$1];
			let value;
			if ((0, _index$55.isIdentifier)(node$1)) value = node$1.name;
			else if ((0, _index$55.isStringLiteral)(node$1)) value = node$1.value;
			else if ((0, _index$55.isThisExpression)(node$1)) value = "this";
			else return false;
			if (parts[i$6] !== value) return false;
		}
		return true;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js
var require_buildMatchMemberExpression = __commonJS({ "node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = buildMatchMemberExpression$1;
	var _matchesPattern$2 = require_matchesPattern();
	function buildMatchMemberExpression$1(match, allowPartial) {
		const parts = match.split(".");
		return (member) => (0, _matchesPattern$2.default)(member, parts, allowPartial);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/react/isReactComponent.js
var require_isReactComponent = __commonJS({ "node_modules/@babel/types/lib/validators/react/isReactComponent.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _buildMatchMemberExpression$1 = require_buildMatchMemberExpression();
	const isReactComponent = (0, _buildMatchMemberExpression$1.default)("React.Component");
	var _default$10 = exports.default = isReactComponent;
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/react/isCompatTag.js
var require_isCompatTag = __commonJS({ "node_modules/@babel/types/lib/validators/react/isCompatTag.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isCompatTag$1;
	function isCompatTag$1(tagName) {
		return !!tagName && /^[a-z]/.test(tagName);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isType.js
var require_isType = __commonJS({ "node_modules/@babel/types/lib/validators/isType.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isType$2;
	var _index$54 = require_definitions();
	function isType$2(nodeType, targetType) {
		if (nodeType === targetType) return true;
		if (nodeType == null) return false;
		if (_index$54.ALIAS_KEYS[targetType]) return false;
		const aliases = _index$54.FLIPPED_ALIAS_KEYS[targetType];
		if (aliases != null && aliases.includes(nodeType)) return true;
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isPlaceholderType.js
var require_isPlaceholderType = __commonJS({ "node_modules/@babel/types/lib/validators/isPlaceholderType.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isPlaceholderType;
	var _index$53 = require_definitions();
	function isPlaceholderType(placeholderType, targetType) {
		if (placeholderType === targetType) return true;
		const aliases = _index$53.PLACEHOLDERS_ALIAS[placeholderType];
		if (aliases != null && aliases.includes(targetType)) return true;
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/is.js
var require_is = __commonJS({ "node_modules/@babel/types/lib/validators/is.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = is;
	var _shallowEqual$1 = require_shallowEqual();
	var _isType$2 = require_isType();
	var _isPlaceholderType$1 = require_isPlaceholderType();
	var _index$52 = require_definitions();
	function is(type, node, opts) {
		if (!node) return false;
		const matches = (0, _isType$2.default)(node.type, type);
		if (!matches) {
			if (!opts && node.type === "Placeholder" && type in _index$52.FLIPPED_ALIAS_KEYS) return (0, _isPlaceholderType$1.default)(node.expectedNode, type);
			return false;
		}
		if (opts === void 0) return true;
		else return (0, _shallowEqual$1.default)(node, opts);
	}
} });

//#endregion
//#region node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier = __commonJS({ "node_modules/@babel/helper-validator-identifier/lib/identifier.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isIdentifierChar = isIdentifierChar;
	exports.isIdentifierName = isIdentifierName;
	exports.isIdentifierStart = isIdentifierStart;
	let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	let nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
	const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	const astralIdentifierStartCodes = [
		0,
		11,
		2,
		25,
		2,
		18,
		2,
		1,
		2,
		14,
		3,
		13,
		35,
		122,
		70,
		52,
		268,
		28,
		4,
		48,
		48,
		31,
		14,
		29,
		6,
		37,
		11,
		29,
		3,
		35,
		5,
		7,
		2,
		4,
		43,
		157,
		19,
		35,
		5,
		35,
		5,
		39,
		9,
		51,
		13,
		10,
		2,
		14,
		2,
		6,
		2,
		1,
		2,
		10,
		2,
		14,
		2,
		6,
		2,
		1,
		4,
		51,
		13,
		310,
		10,
		21,
		11,
		7,
		25,
		5,
		2,
		41,
		2,
		8,
		70,
		5,
		3,
		0,
		2,
		43,
		2,
		1,
		4,
		0,
		3,
		22,
		11,
		22,
		10,
		30,
		66,
		18,
		2,
		1,
		11,
		21,
		11,
		25,
		71,
		55,
		7,
		1,
		65,
		0,
		16,
		3,
		2,
		2,
		2,
		28,
		43,
		28,
		4,
		28,
		36,
		7,
		2,
		27,
		28,
		53,
		11,
		21,
		11,
		18,
		14,
		17,
		111,
		72,
		56,
		50,
		14,
		50,
		14,
		35,
		39,
		27,
		10,
		22,
		251,
		41,
		7,
		1,
		17,
		2,
		60,
		28,
		11,
		0,
		9,
		21,
		43,
		17,
		47,
		20,
		28,
		22,
		13,
		52,
		58,
		1,
		3,
		0,
		14,
		44,
		33,
		24,
		27,
		35,
		30,
		0,
		3,
		0,
		9,
		34,
		4,
		0,
		13,
		47,
		15,
		3,
		22,
		0,
		2,
		0,
		36,
		17,
		2,
		24,
		20,
		1,
		64,
		6,
		2,
		0,
		2,
		3,
		2,
		14,
		2,
		9,
		8,
		46,
		39,
		7,
		3,
		1,
		3,
		21,
		2,
		6,
		2,
		1,
		2,
		4,
		4,
		0,
		19,
		0,
		13,
		4,
		31,
		9,
		2,
		0,
		3,
		0,
		2,
		37,
		2,
		0,
		26,
		0,
		2,
		0,
		45,
		52,
		19,
		3,
		21,
		2,
		31,
		47,
		21,
		1,
		2,
		0,
		185,
		46,
		42,
		3,
		37,
		47,
		21,
		0,
		60,
		42,
		14,
		0,
		72,
		26,
		38,
		6,
		186,
		43,
		117,
		63,
		32,
		7,
		3,
		0,
		3,
		7,
		2,
		1,
		2,
		23,
		16,
		0,
		2,
		0,
		95,
		7,
		3,
		38,
		17,
		0,
		2,
		0,
		29,
		0,
		11,
		39,
		8,
		0,
		22,
		0,
		12,
		45,
		20,
		0,
		19,
		72,
		200,
		32,
		32,
		8,
		2,
		36,
		18,
		0,
		50,
		29,
		113,
		6,
		2,
		1,
		2,
		37,
		22,
		0,
		26,
		5,
		2,
		1,
		2,
		31,
		15,
		0,
		328,
		18,
		16,
		0,
		2,
		12,
		2,
		33,
		125,
		0,
		80,
		921,
		103,
		110,
		18,
		195,
		2637,
		96,
		16,
		1071,
		18,
		5,
		26,
		3994,
		6,
		582,
		6842,
		29,
		1763,
		568,
		8,
		30,
		18,
		78,
		18,
		29,
		19,
		47,
		17,
		3,
		32,
		20,
		6,
		18,
		433,
		44,
		212,
		63,
		129,
		74,
		6,
		0,
		67,
		12,
		65,
		1,
		2,
		0,
		29,
		6135,
		9,
		1237,
		42,
		9,
		8936,
		3,
		2,
		6,
		2,
		1,
		2,
		290,
		16,
		0,
		30,
		2,
		3,
		0,
		15,
		3,
		9,
		395,
		2309,
		106,
		6,
		12,
		4,
		8,
		8,
		9,
		5991,
		84,
		2,
		70,
		2,
		1,
		3,
		0,
		3,
		1,
		3,
		3,
		2,
		11,
		2,
		0,
		2,
		6,
		2,
		64,
		2,
		3,
		3,
		7,
		2,
		6,
		2,
		27,
		2,
		3,
		2,
		4,
		2,
		0,
		4,
		6,
		2,
		339,
		3,
		24,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		30,
		2,
		24,
		2,
		7,
		1845,
		30,
		7,
		5,
		262,
		61,
		147,
		44,
		11,
		6,
		17,
		0,
		322,
		29,
		19,
		43,
		485,
		27,
		229,
		29,
		3,
		0,
		496,
		6,
		2,
		3,
		2,
		1,
		2,
		14,
		2,
		196,
		60,
		67,
		8,
		0,
		1205,
		3,
		2,
		26,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		9,
		2,
		3,
		2,
		0,
		2,
		0,
		7,
		0,
		5,
		0,
		2,
		0,
		2,
		0,
		2,
		2,
		2,
		1,
		2,
		0,
		3,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		0,
		2,
		1,
		2,
		0,
		3,
		3,
		2,
		6,
		2,
		3,
		2,
		3,
		2,
		0,
		2,
		9,
		2,
		16,
		6,
		2,
		2,
		4,
		2,
		16,
		4421,
		42719,
		33,
		4153,
		7,
		221,
		3,
		5761,
		15,
		7472,
		16,
		621,
		2467,
		541,
		1507,
		4938,
		6,
		4191
	];
	const astralIdentifierCodes = [
		509,
		0,
		227,
		0,
		150,
		4,
		294,
		9,
		1368,
		2,
		2,
		1,
		6,
		3,
		41,
		2,
		5,
		0,
		166,
		1,
		574,
		3,
		9,
		9,
		7,
		9,
		32,
		4,
		318,
		1,
		80,
		3,
		71,
		10,
		50,
		3,
		123,
		2,
		54,
		14,
		32,
		10,
		3,
		1,
		11,
		3,
		46,
		10,
		8,
		0,
		46,
		9,
		7,
		2,
		37,
		13,
		2,
		9,
		6,
		1,
		45,
		0,
		13,
		2,
		49,
		13,
		9,
		3,
		2,
		11,
		83,
		11,
		7,
		0,
		3,
		0,
		158,
		11,
		6,
		9,
		7,
		3,
		56,
		1,
		2,
		6,
		3,
		1,
		3,
		2,
		10,
		0,
		11,
		1,
		3,
		6,
		4,
		4,
		68,
		8,
		2,
		0,
		3,
		0,
		2,
		3,
		2,
		4,
		2,
		0,
		15,
		1,
		83,
		17,
		10,
		9,
		5,
		0,
		82,
		19,
		13,
		9,
		214,
		6,
		3,
		8,
		28,
		1,
		83,
		16,
		16,
		9,
		82,
		12,
		9,
		9,
		7,
		19,
		58,
		14,
		5,
		9,
		243,
		14,
		166,
		9,
		71,
		5,
		2,
		1,
		3,
		3,
		2,
		0,
		2,
		1,
		13,
		9,
		120,
		6,
		3,
		6,
		4,
		0,
		29,
		9,
		41,
		6,
		2,
		3,
		9,
		0,
		10,
		10,
		47,
		15,
		343,
		9,
		54,
		7,
		2,
		7,
		17,
		9,
		57,
		21,
		2,
		13,
		123,
		5,
		4,
		0,
		2,
		1,
		2,
		6,
		2,
		0,
		9,
		9,
		49,
		4,
		2,
		1,
		2,
		4,
		9,
		9,
		330,
		3,
		10,
		1,
		2,
		0,
		49,
		6,
		4,
		4,
		14,
		10,
		5350,
		0,
		7,
		14,
		11465,
		27,
		2343,
		9,
		87,
		9,
		39,
		4,
		60,
		6,
		26,
		9,
		535,
		9,
		470,
		0,
		2,
		54,
		8,
		3,
		82,
		0,
		12,
		1,
		19628,
		1,
		4178,
		9,
		519,
		45,
		3,
		22,
		543,
		4,
		4,
		5,
		9,
		7,
		3,
		6,
		31,
		3,
		149,
		2,
		1418,
		49,
		513,
		54,
		5,
		49,
		9,
		0,
		15,
		0,
		23,
		4,
		2,
		14,
		1361,
		6,
		2,
		16,
		3,
		6,
		2,
		1,
		2,
		4,
		101,
		0,
		161,
		6,
		10,
		9,
		357,
		0,
		62,
		13,
		499,
		13,
		245,
		1,
		2,
		9,
		726,
		6,
		110,
		6,
		6,
		9,
		4759,
		9,
		787719,
		239
	];
	function isInAstralSet(code$1, set) {
		let pos = 65536;
		for (let i$6 = 0, length = set.length; i$6 < length; i$6 += 2) {
			pos += set[i$6];
			if (pos > code$1) return false;
			pos += set[i$6 + 1];
			if (pos >= code$1) return true;
		}
		return false;
	}
	function isIdentifierStart(code$1) {
		if (code$1 < 65) return code$1 === 36;
		if (code$1 <= 90) return true;
		if (code$1 < 97) return code$1 === 95;
		if (code$1 <= 122) return true;
		if (code$1 <= 65535) return code$1 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code$1));
		return isInAstralSet(code$1, astralIdentifierStartCodes);
	}
	function isIdentifierChar(code$1) {
		if (code$1 < 48) return code$1 === 36;
		if (code$1 < 58) return true;
		if (code$1 < 65) return false;
		if (code$1 <= 90) return true;
		if (code$1 < 97) return code$1 === 95;
		if (code$1 <= 122) return true;
		if (code$1 <= 65535) return code$1 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code$1));
		return isInAstralSet(code$1, astralIdentifierStartCodes) || isInAstralSet(code$1, astralIdentifierCodes);
	}
	function isIdentifierName(name) {
		let isFirst = true;
		for (let i$6 = 0; i$6 < name.length; i$6++) {
			let cp = name.charCodeAt(i$6);
			if ((cp & 64512) === 55296 && i$6 + 1 < name.length) {
				const trail = name.charCodeAt(++i$6);
				if ((trail & 64512) === 56320) cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
			}
			if (isFirst) {
				isFirst = false;
				if (!isIdentifierStart(cp)) return false;
			} else if (!isIdentifierChar(cp)) return false;
		}
		return !isFirst;
	}
} });

//#endregion
//#region node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword = __commonJS({ "node_modules/@babel/helper-validator-identifier/lib/keyword.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isKeyword = isKeyword;
	exports.isReservedWord = isReservedWord;
	exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
	exports.isStrictBindReservedWord = isStrictBindReservedWord;
	exports.isStrictReservedWord = isStrictReservedWord;
	const reservedWords$1 = {
		keyword: [
			"break",
			"case",
			"catch",
			"continue",
			"debugger",
			"default",
			"do",
			"else",
			"finally",
			"for",
			"function",
			"if",
			"return",
			"switch",
			"throw",
			"try",
			"var",
			"const",
			"while",
			"with",
			"new",
			"this",
			"super",
			"class",
			"extends",
			"export",
			"import",
			"null",
			"true",
			"false",
			"in",
			"instanceof",
			"typeof",
			"void",
			"delete"
		],
		strict: [
			"implements",
			"interface",
			"let",
			"package",
			"private",
			"protected",
			"public",
			"static",
			"yield"
		],
		strictBind: ["eval", "arguments"]
	};
	const keywords = new Set(reservedWords$1.keyword);
	const reservedWordsStrictSet = new Set(reservedWords$1.strict);
	const reservedWordsStrictBindSet = new Set(reservedWords$1.strictBind);
	function isReservedWord(word$3, inModule) {
		return inModule && word$3 === "await" || word$3 === "enum";
	}
	function isStrictReservedWord(word$3, inModule) {
		return isReservedWord(word$3, inModule) || reservedWordsStrictSet.has(word$3);
	}
	function isStrictBindOnlyReservedWord(word$3) {
		return reservedWordsStrictBindSet.has(word$3);
	}
	function isStrictBindReservedWord(word$3, inModule) {
		return isStrictReservedWord(word$3, inModule) || isStrictBindOnlyReservedWord(word$3);
	}
	function isKeyword(word$3) {
		return keywords.has(word$3);
	}
} });

//#endregion
//#region node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib$6 = __commonJS({ "node_modules/@babel/helper-validator-identifier/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	Object.defineProperty(exports, "isIdentifierChar", {
		enumerable: true,
		get: function() {
			return _identifier.isIdentifierChar;
		}
	});
	Object.defineProperty(exports, "isIdentifierName", {
		enumerable: true,
		get: function() {
			return _identifier.isIdentifierName;
		}
	});
	Object.defineProperty(exports, "isIdentifierStart", {
		enumerable: true,
		get: function() {
			return _identifier.isIdentifierStart;
		}
	});
	Object.defineProperty(exports, "isKeyword", {
		enumerable: true,
		get: function() {
			return _keyword.isKeyword;
		}
	});
	Object.defineProperty(exports, "isReservedWord", {
		enumerable: true,
		get: function() {
			return _keyword.isReservedWord;
		}
	});
	Object.defineProperty(exports, "isStrictBindOnlyReservedWord", {
		enumerable: true,
		get: function() {
			return _keyword.isStrictBindOnlyReservedWord;
		}
	});
	Object.defineProperty(exports, "isStrictBindReservedWord", {
		enumerable: true,
		get: function() {
			return _keyword.isStrictBindReservedWord;
		}
	});
	Object.defineProperty(exports, "isStrictReservedWord", {
		enumerable: true,
		get: function() {
			return _keyword.isStrictReservedWord;
		}
	});
	var _identifier = require_identifier();
	var _keyword = require_keyword();
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isValidIdentifier.js
var require_isValidIdentifier = __commonJS({ "node_modules/@babel/types/lib/validators/isValidIdentifier.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isValidIdentifier;
	var _helperValidatorIdentifier$2 = require_lib$6();
	function isValidIdentifier(name, reserved = true) {
		if (typeof name !== "string") return false;
		if (reserved) {
			if ((0, _helperValidatorIdentifier$2.isKeyword)(name) || (0, _helperValidatorIdentifier$2.isStrictReservedWord)(name, true)) return false;
		}
		return (0, _helperValidatorIdentifier$2.isIdentifierName)(name);
	}
} });

//#endregion
//#region node_modules/@babel/helper-string-parser/lib/index.js
var require_lib$5 = __commonJS({ "node_modules/@babel/helper-string-parser/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.readCodePoint = readCodePoint;
	exports.readInt = readInt;
	exports.readStringContents = readStringContents;
	var _isDigit = function isDigit(code$1) {
		return code$1 >= 48 && code$1 <= 57;
	};
	const forbiddenNumericSeparatorSiblings = {
		decBinOct: new Set([
			46,
			66,
			69,
			79,
			95,
			98,
			101,
			111
		]),
		hex: new Set([
			46,
			88,
			95,
			120
		])
	};
	const isAllowedNumericSeparatorSibling = {
		bin: (ch) => ch === 48 || ch === 49,
		oct: (ch) => ch >= 48 && ch <= 55,
		dec: (ch) => ch >= 48 && ch <= 57,
		hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
	};
	function readStringContents(type, input, pos, lineStart, curLine, errors$1) {
		const initialPos = pos;
		const initialLineStart = lineStart;
		const initialCurLine = curLine;
		let out = "";
		let firstInvalidLoc = null;
		let chunkStart = pos;
		const { length } = input;
		for (;;) {
			if (pos >= length) {
				errors$1.unterminated(initialPos, initialLineStart, initialCurLine);
				out += input.slice(chunkStart, pos);
				break;
			}
			const ch = input.charCodeAt(pos);
			if (isStringEnd(type, ch, input, pos)) {
				out += input.slice(chunkStart, pos);
				break;
			}
			if (ch === 92) {
				out += input.slice(chunkStart, pos);
				const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors$1);
				if (res.ch === null && !firstInvalidLoc) firstInvalidLoc = {
					pos,
					lineStart,
					curLine
				};
				else out += res.ch;
				({pos, lineStart, curLine} = res);
				chunkStart = pos;
			} else if (ch === 8232 || ch === 8233) {
				++pos;
				++curLine;
				lineStart = pos;
			} else if (ch === 10 || ch === 13) if (type === "template") {
				out += input.slice(chunkStart, pos) + "\n";
				++pos;
				if (ch === 13 && input.charCodeAt(pos) === 10) ++pos;
				++curLine;
				chunkStart = lineStart = pos;
			} else errors$1.unterminated(initialPos, initialLineStart, initialCurLine);
			else ++pos;
		}
		return {
			pos,
			str: out,
			firstInvalidLoc,
			lineStart,
			curLine,
			containsInvalid: !!firstInvalidLoc
		};
	}
	function isStringEnd(type, ch, input, pos) {
		if (type === "template") return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
		return ch === (type === "double" ? 34 : 39);
	}
	function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors$1) {
		const throwOnInvalid = !inTemplate;
		pos++;
		const res = (ch$1) => ({
			pos,
			ch: ch$1,
			lineStart,
			curLine
		});
		const ch = input.charCodeAt(pos++);
		switch (ch) {
			case 110: return res("\n");
			case 114: return res("\r");
			case 120: {
				let code$1;
				({code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors$1));
				return res(code$1 === null ? null : String.fromCharCode(code$1));
			}
			case 117: {
				let code$1;
				({code: code$1, pos} = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1));
				return res(code$1 === null ? null : String.fromCodePoint(code$1));
			}
			case 116: return res("	");
			case 98: return res("\b");
			case 118: return res("\v");
			case 102: return res("\f");
			case 13: if (input.charCodeAt(pos) === 10) ++pos;
			case 10:
				lineStart = pos;
				++curLine;
			case 8232:
			case 8233: return res("");
			case 56:
			case 57: if (inTemplate) return res(null);
			else errors$1.strictNumericEscape(pos - 1, lineStart, curLine);
			default:
				if (ch >= 48 && ch <= 55) {
					const startPos = pos - 1;
					const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
					let octalStr = match[0];
					let octal = parseInt(octalStr, 8);
					if (octal > 255) {
						octalStr = octalStr.slice(0, -1);
						octal = parseInt(octalStr, 8);
					}
					pos += octalStr.length - 1;
					const next = input.charCodeAt(pos);
					if (octalStr !== "0" || next === 56 || next === 57) if (inTemplate) return res(null);
					else errors$1.strictNumericEscape(startPos, lineStart, curLine);
					return res(String.fromCharCode(octal));
				}
				return res(String.fromCharCode(ch));
		}
	}
	function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors$1) {
		const initialPos = pos;
		let n$4;
		({n: n$4, pos} = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors$1, !throwOnInvalid));
		if (n$4 === null) if (throwOnInvalid) errors$1.invalidEscapeSequence(initialPos, lineStart, curLine);
		else pos = initialPos - 1;
		return {
			code: n$4,
			pos
		};
	}
	function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors$1, bailOnError) {
		const start = pos;
		const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
		const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
		let invalid = false;
		let total = 0;
		for (let i$6 = 0, e$2 = len == null ? Infinity : len; i$6 < e$2; ++i$6) {
			const code$1 = input.charCodeAt(pos);
			let val;
			if (code$1 === 95 && allowNumSeparator !== "bail") {
				const prev = input.charCodeAt(pos - 1);
				const next = input.charCodeAt(pos + 1);
				if (!allowNumSeparator) {
					if (bailOnError) return {
						n: null,
						pos
					};
					errors$1.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
				} else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
					if (bailOnError) return {
						n: null,
						pos
					};
					errors$1.unexpectedNumericSeparator(pos, lineStart, curLine);
				}
				++pos;
				continue;
			}
			if (code$1 >= 97) val = code$1 - 97 + 10;
			else if (code$1 >= 65) val = code$1 - 65 + 10;
			else if (_isDigit(code$1)) val = code$1 - 48;
			else val = Infinity;
			if (val >= radix) if (val <= 9 && bailOnError) return {
				n: null,
				pos
			};
			else if (val <= 9 && errors$1.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
			else if (forceLen) {
				val = 0;
				invalid = true;
			} else break;
			++pos;
			total = total * radix + val;
		}
		if (pos === start || len != null && pos - start !== len || invalid) return {
			n: null,
			pos
		};
		return {
			n: total,
			pos
		};
	}
	function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1) {
		const ch = input.charCodeAt(pos);
		let code$1;
		if (ch === 123) {
			++pos;
			({code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors$1));
			++pos;
			if (code$1 !== null && code$1 > 1114111) if (throwOnInvalid) errors$1.invalidCodePoint(pos, lineStart, curLine);
			else return {
				code: null,
				pos
			};
		} else ({code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors$1));
		return {
			code: code$1,
			pos
		};
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/constants/index.js
var require_constants$1 = __commonJS({ "node_modules/@babel/types/lib/constants/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UPDATE_OPERATORS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.STATEMENT_OR_BLOCK_KEYS = exports.NUMBER_UNARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.LOGICAL_OPERATORS = exports.INHERIT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.EQUALITY_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.COMMENT_KEYS = exports.BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.BINARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = void 0;
	const STATEMENT_OR_BLOCK_KEYS$1 = exports.STATEMENT_OR_BLOCK_KEYS = [
		"consequent",
		"body",
		"alternate"
	];
	const FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
	const FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
	const COMMENT_KEYS = exports.COMMENT_KEYS = [
		"leadingComments",
		"trailingComments",
		"innerComments"
	];
	const LOGICAL_OPERATORS$1 = exports.LOGICAL_OPERATORS = [
		"||",
		"&&",
		"??"
	];
	const UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];
	const BOOLEAN_NUMBER_BINARY_OPERATORS$1 = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [
		">",
		"<",
		">=",
		"<="
	];
	const EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = [
		"==",
		"===",
		"!=",
		"!=="
	];
	const COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [
		...EQUALITY_BINARY_OPERATORS,
		"in",
		"instanceof"
	];
	const BOOLEAN_BINARY_OPERATORS$1 = exports.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS$1];
	const NUMBER_BINARY_OPERATORS$1 = exports.NUMBER_BINARY_OPERATORS = [
		"-",
		"/",
		"%",
		"*",
		"**",
		"&",
		"|",
		">>",
		">>>",
		"<<",
		"^"
	];
	const BINARY_OPERATORS = exports.BINARY_OPERATORS = [
		"+",
		...NUMBER_BINARY_OPERATORS$1,
		...BOOLEAN_BINARY_OPERATORS$1,
		"|>"
	];
	const ASSIGNMENT_OPERATORS = exports.ASSIGNMENT_OPERATORS = [
		"=",
		"+=",
		...NUMBER_BINARY_OPERATORS$1.map((op) => op + "="),
		...LOGICAL_OPERATORS$1.map((op) => op + "=")
	];
	const BOOLEAN_UNARY_OPERATORS$1 = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	const NUMBER_UNARY_OPERATORS$1 = exports.NUMBER_UNARY_OPERATORS = [
		"+",
		"-",
		"~"
	];
	const STRING_UNARY_OPERATORS$1 = exports.STRING_UNARY_OPERATORS = ["typeof"];
	const UNARY_OPERATORS = exports.UNARY_OPERATORS = [
		"void",
		"throw",
		...BOOLEAN_UNARY_OPERATORS$1,
		...NUMBER_UNARY_OPERATORS$1,
		...STRING_UNARY_OPERATORS$1
	];
	const INHERIT_KEYS = exports.INHERIT_KEYS = {
		optional: [
			"typeAnnotation",
			"typeParameters",
			"returnType"
		],
		force: [
			"start",
			"loc",
			"end"
		]
	};
	{
		exports.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
		exports.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/utils.js
var require_utils$1 = __commonJS({ "node_modules/@babel/types/lib/definitions/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.allExpandedTypes = exports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;
	exports.arrayOf = arrayOf;
	exports.arrayOfType = arrayOfType;
	exports.assertEach = assertEach;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertNodeType = assertNodeType;
	exports.assertOneOf = assertOneOf;
	exports.assertOptionalChainStart = assertOptionalChainStart;
	exports.assertShape = assertShape;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports.default = defineType$5;
	exports.defineAliasedType = defineAliasedType;
	exports.validate = validate$6;
	exports.validateArrayOfType = validateArrayOfType;
	exports.validateOptional = validateOptional;
	exports.validateOptionalType = validateOptionalType;
	exports.validateType = validateType;
	var _is$4 = require_is();
	var _validate$2 = require_validate();
	const VISITOR_KEYS$7 = exports.VISITOR_KEYS = {};
	const ALIAS_KEYS = exports.ALIAS_KEYS = {};
	const FLIPPED_ALIAS_KEYS$3 = exports.FLIPPED_ALIAS_KEYS = {};
	const NODE_FIELDS$1 = exports.NODE_FIELDS = {};
	const BUILDER_KEYS = exports.BUILDER_KEYS = {};
	const DEPRECATED_KEYS$1 = exports.DEPRECATED_KEYS = {};
	const NODE_PARENT_VALIDATIONS = exports.NODE_PARENT_VALIDATIONS = {};
	function getType(val) {
		if (Array.isArray(val)) return "array";
		else if (val === null) return "null";
		else return typeof val;
	}
	function validate$6(validate$7) {
		return { validate: validate$7 };
	}
	function validateType(...typeNames) {
		return validate$6(assertNodeType(...typeNames));
	}
	function validateOptional(validate$7) {
		return {
			validate: validate$7,
			optional: true
		};
	}
	function validateOptionalType(...typeNames) {
		return {
			validate: assertNodeType(...typeNames),
			optional: true
		};
	}
	function arrayOf(elementType) {
		return chain(assertValueType("array"), assertEach(elementType));
	}
	function arrayOfType(...typeNames) {
		return arrayOf(assertNodeType(...typeNames));
	}
	function validateArrayOfType(...typeNames) {
		return validate$6(arrayOfType(...typeNames));
	}
	function assertEach(callback) {
		const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate$2.validateChild : () => {};
		function validator(node, key, val) {
			if (!Array.isArray(val)) return;
			let i$6 = 0;
			const subKey = { toString() {
				return `${key}[${i$6}]`;
			} };
			for (; i$6 < val.length; i$6++) {
				const v$1 = val[i$6];
				callback(node, subKey, v$1);
				childValidator(node, subKey, v$1);
			}
		}
		validator.each = callback;
		return validator;
	}
	function assertOneOf(...values) {
		function validate$7(node, key, val) {
			if (!values.includes(val)) throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
		}
		validate$7.oneOf = values;
		return validate$7;
	}
	const allExpandedTypes = exports.allExpandedTypes = [];
	function assertNodeType(...types$7) {
		const expandedTypes = new Set();
		allExpandedTypes.push({
			types: types$7,
			set: expandedTypes
		});
		function validate$7(node, key, val) {
			const valType = val == null ? void 0 : val.type;
			if (valType != null) {
				if (expandedTypes.has(valType)) {
					(0, _validate$2.validateChild)(node, key, val);
					return;
				}
				if (valType === "Placeholder") {
					for (const type of types$7) if ((0, _is$4.default)(type, val)) {
						(0, _validate$2.validateChild)(node, key, val);
						return;
					}
				}
			}
			throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types$7)} but instead got ${JSON.stringify(valType)}`);
		}
		validate$7.oneOfNodeTypes = types$7;
		return validate$7;
	}
	function assertNodeOrValueType(...types$7) {
		function validate$7(node, key, val) {
			const primitiveType = getType(val);
			for (const type of types$7) if (primitiveType === type || (0, _is$4.default)(type, val)) {
				(0, _validate$2.validateChild)(node, key, val);
				return;
			}
			throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types$7)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
		}
		validate$7.oneOfNodeOrValueTypes = types$7;
		return validate$7;
	}
	function assertValueType(type) {
		function validate$7(node, key, val) {
			if (getType(val) === type) return;
			throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
		}
		validate$7.type = type;
		return validate$7;
	}
	function assertShape(shape) {
		const keys$1 = Object.keys(shape);
		function validate$7(node, key, val) {
			const errors$1 = [];
			for (const property of keys$1) try {
				(0, _validate$2.validateField)(node, property, val[property], shape[property]);
			} catch (error) {
				if (error instanceof TypeError) {
					errors$1.push(error.message);
					continue;
				}
				throw error;
			}
			if (errors$1.length) throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors$1.join("\n")}`);
		}
		validate$7.shapeOf = shape;
		return validate$7;
	}
	function assertOptionalChainStart() {
		function validate$7(node) {
			var _current;
			let current = node;
			while (node) {
				const { type } = current;
				if (type === "OptionalCallExpression") {
					if (current.optional) return;
					current = current.callee;
					continue;
				}
				if (type === "OptionalMemberExpression") {
					if (current.optional) return;
					current = current.object;
					continue;
				}
				break;
			}
			throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
		}
		return validate$7;
	}
	function chain(...fns) {
		function validate$7(...args) {
			for (const fn of fns) fn(...args);
		}
		validate$7.chainOf = fns;
		if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
		return validate$7;
	}
	const validTypeOpts = new Set([
		"aliases",
		"builder",
		"deprecatedAlias",
		"fields",
		"inherits",
		"visitor",
		"validate"
	]);
	const validFieldKeys = new Set([
		"default",
		"optional",
		"deprecated",
		"validate"
	]);
	const store = {};
	function defineAliasedType(...aliases) {
		return (type, opts = {}) => {
			let defined = opts.aliases;
			if (!defined) {
				var _store$opts$inherits$;
				if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
				defined != null || (defined = []);
				opts.aliases = defined;
			}
			const additional = aliases.filter((a$1) => !defined.includes(a$1));
			defined.unshift(...additional);
			defineType$5(type, opts);
		};
	}
	function defineType$5(type, opts = {}) {
		const inherits$5 = opts.inherits && store[opts.inherits] || {};
		let fields = opts.fields;
		if (!fields) {
			fields = {};
			if (inherits$5.fields) {
				const keys$1 = Object.getOwnPropertyNames(inherits$5.fields);
				for (const key of keys$1) {
					const field = inherits$5.fields[key];
					const def$1 = field.default;
					if (Array.isArray(def$1) ? def$1.length > 0 : def$1 && typeof def$1 === "object") throw new Error("field defaults can only be primitives or empty arrays currently");
					fields[key] = {
						default: Array.isArray(def$1) ? [] : def$1,
						optional: field.optional,
						deprecated: field.deprecated,
						validate: field.validate
					};
				}
			}
		}
		const visitor = opts.visitor || inherits$5.visitor || [];
		const aliases = opts.aliases || inherits$5.aliases || [];
		const builder = opts.builder || inherits$5.builder || opts.visitor || [];
		for (const k$1 of Object.keys(opts)) if (!validTypeOpts.has(k$1)) throw new Error(`Unknown type option "${k$1}" on ${type}`);
		if (opts.deprecatedAlias) DEPRECATED_KEYS$1[opts.deprecatedAlias] = type;
		for (const key of visitor.concat(builder)) fields[key] = fields[key] || {};
		for (const key of Object.keys(fields)) {
			const field = fields[key];
			if (field.default !== void 0 && !builder.includes(key)) field.optional = true;
			if (field.default === void 0) field.default = null;
			else if (!field.validate && field.default != null) field.validate = assertValueType(getType(field.default));
			for (const k$1 of Object.keys(field)) if (!validFieldKeys.has(k$1)) throw new Error(`Unknown field key "${k$1}" on ${type}.${key}`);
		}
		VISITOR_KEYS$7[type] = opts.visitor = visitor;
		BUILDER_KEYS[type] = opts.builder = builder;
		NODE_FIELDS$1[type] = opts.fields = fields;
		ALIAS_KEYS[type] = opts.aliases = aliases;
		aliases.forEach((alias) => {
			FLIPPED_ALIAS_KEYS$3[alias] = FLIPPED_ALIAS_KEYS$3[alias] || [];
			FLIPPED_ALIAS_KEYS$3[alias].push(type);
		});
		if (opts.validate) NODE_PARENT_VALIDATIONS[type] = opts.validate;
		store[type] = opts;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/core.js
var require_core = __commonJS({ "node_modules/@babel/types/lib/definitions/core.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.patternLikeCommon = exports.importAttributes = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;
	var _is$3 = require_is();
	var _isValidIdentifier$4 = require_isValidIdentifier();
	var _helperValidatorIdentifier$1 = require_lib$6();
	var _helperStringParser = require_lib$5();
	var _index$51 = require_constants$1();
	var _utils$7 = require_utils$1();
	const defineType$4 = (0, _utils$7.defineAliasedType)("Standardized");
	defineType$4("ArrayExpression", {
		fields: { elements: {
			validate: (0, _utils$7.arrayOf)((0, _utils$7.assertNodeOrValueType)("null", "Expression", "SpreadElement")),
			default: !process.env.BABEL_TYPES_8_BREAKING ? [] : void 0
		} },
		visitor: ["elements"],
		aliases: ["Expression"]
	});
	defineType$4("AssignmentExpression", {
		fields: {
			operator: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertValueType)("string") : Object.assign(function() {
				const identifier$6 = (0, _utils$7.assertOneOf)(..._index$51.ASSIGNMENT_OPERATORS);
				const pattern = (0, _utils$7.assertOneOf)("=");
				return function(node, key, val) {
					const validator = (0, _is$3.default)("Pattern", node.left) ? pattern : identifier$6;
					validator(node, key, val);
				};
			}(), { type: "string" }) },
			left: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils$7.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") }
		},
		builder: [
			"operator",
			"left",
			"right"
		],
		visitor: ["left", "right"],
		aliases: ["Expression"]
	});
	defineType$4("BinaryExpression", {
		builder: [
			"operator",
			"left",
			"right"
		],
		fields: {
			operator: { validate: (0, _utils$7.assertOneOf)(..._index$51.BINARY_OPERATORS) },
			left: { validate: function() {
				const expression$2 = (0, _utils$7.assertNodeType)("Expression");
				const inOp = (0, _utils$7.assertNodeType)("Expression", "PrivateName");
				const validator = Object.assign(function(node, key, val) {
					const validator$1 = node.operator === "in" ? inOp : expression$2;
					validator$1(node, key, val);
				}, { oneOfNodeTypes: ["Expression", "PrivateName"] });
				return validator;
			}() },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") }
		},
		visitor: ["left", "right"],
		aliases: ["Binary", "Expression"]
	});
	defineType$4("InterpreterDirective", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$7.assertValueType)("string") } }
	});
	defineType$4("Directive", {
		visitor: ["value"],
		fields: { value: { validate: (0, _utils$7.assertNodeType)("DirectiveLiteral") } }
	});
	defineType$4("DirectiveLiteral", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$7.assertValueType)("string") } }
	});
	defineType$4("BlockStatement", {
		builder: ["body", "directives"],
		visitor: ["directives", "body"],
		fields: {
			directives: {
				validate: (0, _utils$7.arrayOfType)("Directive"),
				default: []
			},
			body: (0, _utils$7.validateArrayOfType)("Statement")
		},
		aliases: [
			"Scopable",
			"BlockParent",
			"Block",
			"Statement"
		]
	});
	defineType$4("BreakStatement", {
		visitor: ["label"],
		fields: { label: {
			validate: (0, _utils$7.assertNodeType)("Identifier"),
			optional: true
		} },
		aliases: [
			"Statement",
			"Terminatorless",
			"CompletionStatement"
		]
	});
	defineType$4("CallExpression", {
		visitor: [
			"callee",
			"arguments",
			"typeParameters",
			"typeArguments"
		],
		builder: ["callee", "arguments"],
		aliases: ["Expression"],
		fields: Object.assign({
			callee: { validate: (0, _utils$7.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") },
			arguments: (0, _utils$7.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
			typeArguments: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterInstantiation"),
				optional: true
			}
		}, {
			optional: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			typeParameters: {
				validate: (0, _utils$7.assertNodeType)("TSTypeParameterInstantiation"),
				optional: true
			}
		}, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		} })
	});
	defineType$4("CatchClause", {
		visitor: ["param", "body"],
		fields: {
			param: {
				validate: (0, _utils$7.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") }
		},
		aliases: ["Scopable", "BlockParent"]
	});
	defineType$4("ConditionalExpression", {
		visitor: [
			"test",
			"consequent",
			"alternate"
		],
		fields: {
			test: { validate: (0, _utils$7.assertNodeType)("Expression") },
			consequent: { validate: (0, _utils$7.assertNodeType)("Expression") },
			alternate: { validate: (0, _utils$7.assertNodeType)("Expression") }
		},
		aliases: ["Expression", "Conditional"]
	});
	defineType$4("ContinueStatement", {
		visitor: ["label"],
		fields: { label: {
			validate: (0, _utils$7.assertNodeType)("Identifier"),
			optional: true
		} },
		aliases: [
			"Statement",
			"Terminatorless",
			"CompletionStatement"
		]
	});
	defineType$4("DebuggerStatement", { aliases: ["Statement"] });
	defineType$4("DoWhileStatement", {
		builder: ["test", "body"],
		visitor: ["body", "test"],
		fields: {
			test: { validate: (0, _utils$7.assertNodeType)("Expression") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		},
		aliases: [
			"Statement",
			"BlockParent",
			"Loop",
			"While",
			"Scopable"
		]
	});
	defineType$4("EmptyStatement", { aliases: ["Statement"] });
	defineType$4("ExpressionStatement", {
		visitor: ["expression"],
		fields: { expression: { validate: (0, _utils$7.assertNodeType)("Expression") } },
		aliases: ["Statement", "ExpressionWrapper"]
	});
	defineType$4("File", {
		builder: [
			"program",
			"comments",
			"tokens"
		],
		visitor: ["program"],
		fields: {
			program: { validate: (0, _utils$7.assertNodeType)("Program") },
			comments: {
				validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }) : (0, _utils$7.assertEach)((0, _utils$7.assertNodeType)("CommentBlock", "CommentLine")),
				optional: true
			},
			tokens: {
				validate: (0, _utils$7.assertEach)(Object.assign(() => {}, { type: "any" })),
				optional: true
			}
		}
	});
	defineType$4("ForInStatement", {
		visitor: [
			"left",
			"right",
			"body"
		],
		aliases: [
			"Scopable",
			"Statement",
			"For",
			"BlockParent",
			"Loop",
			"ForXStatement"
		],
		fields: {
			left: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils$7.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		}
	});
	defineType$4("ForStatement", {
		visitor: [
			"init",
			"test",
			"update",
			"body"
		],
		aliases: [
			"Scopable",
			"Statement",
			"For",
			"BlockParent",
			"Loop"
		],
		fields: {
			init: {
				validate: (0, _utils$7.assertNodeType)("VariableDeclaration", "Expression"),
				optional: true
			},
			test: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			update: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		}
	});
	const functionCommon = () => ({
		params: (0, _utils$7.validateArrayOfType)("Identifier", "Pattern", "RestElement"),
		generator: { default: false },
		async: { default: false }
	});
	exports.functionCommon = functionCommon;
	const functionTypeAnnotationCommon = () => ({
		returnType: {
			validate: (0, _utils$7.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
			optional: true
		},
		typeParameters: {
			validate: (0, _utils$7.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
			optional: true
		}
	});
	exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
	const functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
		declare: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		},
		id: {
			validate: (0, _utils$7.assertNodeType)("Identifier"),
			optional: true
		}
	});
	exports.functionDeclarationCommon = functionDeclarationCommon;
	defineType$4("FunctionDeclaration", {
		builder: [
			"id",
			"params",
			"body",
			"generator",
			"async"
		],
		visitor: [
			"id",
			"typeParameters",
			"params",
			"predicate",
			"returnType",
			"body"
		],
		fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") },
			predicate: {
				validate: (0, _utils$7.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
				optional: true
			}
		}),
		aliases: [
			"Scopable",
			"Function",
			"BlockParent",
			"FunctionParent",
			"Statement",
			"Pureish",
			"Declaration"
		],
		validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
			const identifier$6 = (0, _utils$7.assertNodeType)("Identifier");
			return function(parent, key, node) {
				if (!(0, _is$3.default)("ExportDefaultDeclaration", parent)) identifier$6(node, "id", node.id);
			};
		}()
	});
	defineType$4("FunctionExpression", {
		inherits: "FunctionDeclaration",
		aliases: [
			"Scopable",
			"Function",
			"BlockParent",
			"FunctionParent",
			"Expression",
			"Pureish"
		],
		fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
			id: {
				validate: (0, _utils$7.assertNodeType)("Identifier"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") },
			predicate: {
				validate: (0, _utils$7.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
				optional: true
			}
		})
	});
	const patternLikeCommon = () => ({
		typeAnnotation: {
			validate: (0, _utils$7.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
			optional: true
		},
		optional: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		},
		decorators: {
			validate: (0, _utils$7.arrayOfType)("Decorator"),
			optional: true
		}
	});
	exports.patternLikeCommon = patternLikeCommon;
	defineType$4("Identifier", {
		builder: ["name"],
		visitor: ["typeAnnotation", "decorators"],
		aliases: [
			"Expression",
			"PatternLike",
			"LVal",
			"TSEntityName"
		],
		fields: Object.assign({}, patternLikeCommon(), { name: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertValueType)("string"), Object.assign(function(node, key, val) {
			if (!(0, _isValidIdentifier$4.default)(val, false)) throw new TypeError(`"${val}" is not a valid identifier name`);
		}, { type: "string" })) : (0, _utils$7.assertValueType)("string") } }),
		validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
			const match = /\.(\w+)$/.exec(key.toString());
			if (!match) return;
			const [, parentKey] = match;
			const nonComp = { computed: false };
			if (parentKey === "property") {
				if ((0, _is$3.default)("MemberExpression", parent, nonComp)) return;
				if ((0, _is$3.default)("OptionalMemberExpression", parent, nonComp)) return;
			} else if (parentKey === "key") {
				if ((0, _is$3.default)("Property", parent, nonComp)) return;
				if ((0, _is$3.default)("Method", parent, nonComp)) return;
			} else if (parentKey === "exported") {
				if ((0, _is$3.default)("ExportSpecifier", parent)) return;
			} else if (parentKey === "imported") {
				if ((0, _is$3.default)("ImportSpecifier", parent, { imported: node })) return;
			} else if (parentKey === "meta") {
				if ((0, _is$3.default)("MetaProperty", parent, { meta: node })) return;
			}
			if (((0, _helperValidatorIdentifier$1.isKeyword)(node.name) || (0, _helperValidatorIdentifier$1.isReservedWord)(node.name, false)) && node.name !== "this") throw new TypeError(`"${node.name}" is not a valid identifier`);
		} : void 0
	});
	defineType$4("IfStatement", {
		visitor: [
			"test",
			"consequent",
			"alternate"
		],
		aliases: ["Statement", "Conditional"],
		fields: {
			test: { validate: (0, _utils$7.assertNodeType)("Expression") },
			consequent: { validate: (0, _utils$7.assertNodeType)("Statement") },
			alternate: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("Statement")
			}
		}
	});
	defineType$4("LabeledStatement", {
		visitor: ["label", "body"],
		aliases: ["Statement"],
		fields: {
			label: { validate: (0, _utils$7.assertNodeType)("Identifier") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		}
	});
	defineType$4("StringLiteral", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$7.assertValueType)("string") } },
		aliases: [
			"Expression",
			"Pureish",
			"Literal",
			"Immutable"
		]
	});
	defineType$4("NumericLiteral", {
		builder: ["value"],
		deprecatedAlias: "NumberLiteral",
		fields: { value: { validate: (0, _utils$7.chain)((0, _utils$7.assertValueType)("number"), Object.assign(function(node, key, val) {
			if (1 / val < 0 || !Number.isFinite(val)) {
				const error = new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
			}
		}, { type: "number" })) } },
		aliases: [
			"Expression",
			"Pureish",
			"Literal",
			"Immutable"
		]
	});
	defineType$4("NullLiteral", { aliases: [
		"Expression",
		"Pureish",
		"Literal",
		"Immutable"
	] });
	defineType$4("BooleanLiteral", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$7.assertValueType)("boolean") } },
		aliases: [
			"Expression",
			"Pureish",
			"Literal",
			"Immutable"
		]
	});
	defineType$4("RegExpLiteral", {
		builder: ["pattern", "flags"],
		deprecatedAlias: "RegexLiteral",
		aliases: [
			"Expression",
			"Pureish",
			"Literal"
		],
		fields: {
			pattern: { validate: (0, _utils$7.assertValueType)("string") },
			flags: {
				validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertValueType)("string"), Object.assign(function(node, key, val) {
					const invalid = /[^gimsuy]/.exec(val);
					if (invalid) throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
				}, { type: "string" })) : (0, _utils$7.assertValueType)("string"),
				default: ""
			}
		}
	});
	defineType$4("LogicalExpression", {
		builder: [
			"operator",
			"left",
			"right"
		],
		visitor: ["left", "right"],
		aliases: ["Binary", "Expression"],
		fields: {
			operator: { validate: (0, _utils$7.assertOneOf)(..._index$51.LOGICAL_OPERATORS) },
			left: { validate: (0, _utils$7.assertNodeType)("Expression") },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") }
		}
	});
	defineType$4("MemberExpression", {
		builder: [
			"object",
			"property",
			"computed",
			...!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : []
		],
		visitor: ["object", "property"],
		aliases: ["Expression", "LVal"],
		fields: Object.assign({
			object: { validate: (0, _utils$7.assertNodeType)("Expression", "Super") },
			property: { validate: function() {
				const normal = (0, _utils$7.assertNodeType)("Identifier", "PrivateName");
				const computed = (0, _utils$7.assertNodeType)("Expression");
				const validator = function(node, key, val) {
					const validator$1 = node.computed ? computed : normal;
					validator$1(node, key, val);
				};
				validator.oneOfNodeTypes = [
					"Expression",
					"Identifier",
					"PrivateName"
				];
				return validator;
			}() },
			computed: { default: false }
		}, !process.env.BABEL_TYPES_8_BREAKING ? { optional: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		} } : {})
	});
	defineType$4("NewExpression", { inherits: "CallExpression" });
	defineType$4("Program", {
		visitor: ["directives", "body"],
		builder: [
			"body",
			"directives",
			"sourceType",
			"interpreter"
		],
		fields: {
			sourceType: {
				validate: (0, _utils$7.assertOneOf)("script", "module"),
				default: "script"
			},
			interpreter: {
				validate: (0, _utils$7.assertNodeType)("InterpreterDirective"),
				default: null,
				optional: true
			},
			directives: {
				validate: (0, _utils$7.arrayOfType)("Directive"),
				default: []
			},
			body: (0, _utils$7.validateArrayOfType)("Statement")
		},
		aliases: [
			"Scopable",
			"BlockParent",
			"Block"
		]
	});
	defineType$4("ObjectExpression", {
		visitor: ["properties"],
		aliases: ["Expression"],
		fields: { properties: (0, _utils$7.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement") }
	});
	defineType$4("ObjectMethod", {
		builder: [
			"kind",
			"key",
			"params",
			"body",
			"computed",
			"generator",
			"async"
		],
		visitor: [
			"decorators",
			"key",
			"typeParameters",
			"params",
			"returnType",
			"body"
		],
		fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
			kind: Object.assign({ validate: (0, _utils$7.assertOneOf)("method", "get", "set") }, !process.env.BABEL_TYPES_8_BREAKING ? { default: "method" } : {}),
			computed: { default: false },
			key: { validate: function() {
				const normal = (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
				const computed = (0, _utils$7.assertNodeType)("Expression");
				const validator = function(node, key, val) {
					const validator$1 = node.computed ? computed : normal;
					validator$1(node, key, val);
				};
				validator.oneOfNodeTypes = [
					"Expression",
					"Identifier",
					"StringLiteral",
					"NumericLiteral",
					"BigIntLiteral"
				];
				return validator;
			}() },
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") }
		}),
		aliases: [
			"UserWhitespacable",
			"Function",
			"Scopable",
			"BlockParent",
			"FunctionParent",
			"Method",
			"ObjectMember"
		]
	});
	defineType$4("ObjectProperty", {
		builder: [
			"key",
			"value",
			"computed",
			"shorthand",
			...!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : []
		],
		fields: {
			computed: { default: false },
			key: { validate: function() {
				const normal = (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
				const computed = (0, _utils$7.assertNodeType)("Expression");
				const validator = Object.assign(function(node, key, val) {
					const validator$1 = node.computed ? computed : normal;
					validator$1(node, key, val);
				}, { oneOfNodeTypes: [
					"Expression",
					"Identifier",
					"StringLiteral",
					"NumericLiteral",
					"BigIntLiteral",
					"DecimalLiteral",
					"PrivateName"
				] });
				return validator;
			}() },
			value: { validate: (0, _utils$7.assertNodeType)("Expression", "PatternLike") },
			shorthand: {
				validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
					if (!shorthand) return;
					if (node.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
					if (!(0, _is$3.default)("Identifier", node.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
				}, { type: "boolean" })) : (0, _utils$7.assertValueType)("boolean"),
				default: false
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			}
		},
		visitor: [
			"key",
			"value",
			"decorators"
		],
		aliases: [
			"UserWhitespacable",
			"Property",
			"ObjectMember"
		],
		validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
			const pattern = (0, _utils$7.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
			const expression$2 = (0, _utils$7.assertNodeType)("Expression");
			return function(parent, key, node) {
				const validator = (0, _is$3.default)("ObjectPattern", parent) ? pattern : expression$2;
				validator(node, "value", node.value);
			};
		}()
	});
	defineType$4("RestElement", {
		visitor: ["argument", "typeAnnotation"],
		builder: ["argument"],
		aliases: ["LVal", "PatternLike"],
		deprecatedAlias: "RestProperty",
		fields: Object.assign({}, patternLikeCommon(), { argument: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertNodeType)("LVal") : (0, _utils$7.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") } }),
		validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
			const match = /(\w+)\[(\d+)\]/.exec(key.toString());
			if (!match) throw new Error("Internal Babel error: malformed key.");
			const [, listKey, index$1] = match;
			if (parent[listKey].length > +index$1 + 1) throw new TypeError(`RestElement must be last element of ${listKey}`);
		} : void 0
	});
	defineType$4("ReturnStatement", {
		visitor: ["argument"],
		aliases: [
			"Statement",
			"Terminatorless",
			"CompletionStatement"
		],
		fields: { argument: {
			validate: (0, _utils$7.assertNodeType)("Expression"),
			optional: true
		} }
	});
	defineType$4("SequenceExpression", {
		visitor: ["expressions"],
		fields: { expressions: (0, _utils$7.validateArrayOfType)("Expression") },
		aliases: ["Expression"]
	});
	defineType$4("ParenthesizedExpression", {
		visitor: ["expression"],
		aliases: ["Expression", "ExpressionWrapper"],
		fields: { expression: { validate: (0, _utils$7.assertNodeType)("Expression") } }
	});
	defineType$4("SwitchCase", {
		visitor: ["test", "consequent"],
		fields: {
			test: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			consequent: (0, _utils$7.validateArrayOfType)("Statement")
		}
	});
	defineType$4("SwitchStatement", {
		visitor: ["discriminant", "cases"],
		aliases: [
			"Statement",
			"BlockParent",
			"Scopable"
		],
		fields: {
			discriminant: { validate: (0, _utils$7.assertNodeType)("Expression") },
			cases: (0, _utils$7.validateArrayOfType)("SwitchCase")
		}
	});
	defineType$4("ThisExpression", { aliases: ["Expression"] });
	defineType$4("ThrowStatement", {
		visitor: ["argument"],
		aliases: [
			"Statement",
			"Terminatorless",
			"CompletionStatement"
		],
		fields: { argument: { validate: (0, _utils$7.assertNodeType)("Expression") } }
	});
	defineType$4("TryStatement", {
		visitor: [
			"block",
			"handler",
			"finalizer"
		],
		aliases: ["Statement"],
		fields: {
			block: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertNodeType)("BlockStatement"), Object.assign(function(node) {
				if (!node.handler && !node.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
			}, { oneOfNodeTypes: ["BlockStatement"] })) : (0, _utils$7.assertNodeType)("BlockStatement") },
			handler: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("CatchClause")
			},
			finalizer: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("BlockStatement")
			}
		}
	});
	defineType$4("UnaryExpression", {
		builder: [
			"operator",
			"argument",
			"prefix"
		],
		fields: {
			prefix: { default: true },
			argument: { validate: (0, _utils$7.assertNodeType)("Expression") },
			operator: { validate: (0, _utils$7.assertOneOf)(..._index$51.UNARY_OPERATORS) }
		},
		visitor: ["argument"],
		aliases: ["UnaryLike", "Expression"]
	});
	defineType$4("UpdateExpression", {
		builder: [
			"operator",
			"argument",
			"prefix"
		],
		fields: {
			prefix: { default: false },
			argument: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertNodeType)("Expression") : (0, _utils$7.assertNodeType)("Identifier", "MemberExpression") },
			operator: { validate: (0, _utils$7.assertOneOf)(..._index$51.UPDATE_OPERATORS) }
		},
		visitor: ["argument"],
		aliases: ["Expression"]
	});
	defineType$4("VariableDeclaration", {
		builder: ["kind", "declarations"],
		visitor: ["declarations"],
		aliases: ["Statement", "Declaration"],
		fields: {
			declare: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			kind: { validate: (0, _utils$7.assertOneOf)("var", "let", "const", "using", "await using") },
			declarations: (0, _utils$7.validateArrayOfType)("VariableDeclarator")
		},
		validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
			const withoutInit = (0, _utils$7.assertNodeType)("Identifier");
			return function(parent, key, node) {
				if ((0, _is$3.default)("ForXStatement", parent, { left: node })) {
					if (node.declarations.length !== 1) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
				} else node.declarations.forEach((decl$1) => {
					if (!decl$1.init) withoutInit(decl$1, "id", decl$1.id);
				});
			};
		})() : void 0
	});
	defineType$4("VariableDeclarator", {
		visitor: ["id", "init"],
		fields: {
			id: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertNodeType)("LVal") : (0, _utils$7.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") },
			definite: {
				optional: true,
				validate: (0, _utils$7.assertValueType)("boolean")
			},
			init: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("Expression")
			}
		}
	});
	defineType$4("WhileStatement", {
		visitor: ["test", "body"],
		aliases: [
			"Statement",
			"BlockParent",
			"Loop",
			"While",
			"Scopable"
		],
		fields: {
			test: { validate: (0, _utils$7.assertNodeType)("Expression") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		}
	});
	defineType$4("WithStatement", {
		visitor: ["object", "body"],
		aliases: ["Statement"],
		fields: {
			object: { validate: (0, _utils$7.assertNodeType)("Expression") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") }
		}
	});
	defineType$4("AssignmentPattern", {
		visitor: [
			"left",
			"right",
			"decorators"
		],
		builder: ["left", "right"],
		aliases: [
			"Pattern",
			"PatternLike",
			"LVal"
		],
		fields: Object.assign({}, patternLikeCommon(), {
			left: { validate: (0, _utils$7.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") },
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			}
		})
	});
	defineType$4("ArrayPattern", {
		visitor: ["elements", "typeAnnotation"],
		builder: ["elements"],
		aliases: [
			"Pattern",
			"PatternLike",
			"LVal"
		],
		fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils$7.chain)((0, _utils$7.assertValueType)("array"), (0, _utils$7.assertEach)((0, _utils$7.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } })
	});
	defineType$4("ArrowFunctionExpression", {
		builder: [
			"params",
			"body",
			"async"
		],
		visitor: [
			"typeParameters",
			"params",
			"predicate",
			"returnType",
			"body"
		],
		aliases: [
			"Scopable",
			"Function",
			"BlockParent",
			"FunctionParent",
			"Expression",
			"Pureish"
		],
		fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
			expression: { validate: (0, _utils$7.assertValueType)("boolean") },
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement", "Expression") },
			predicate: {
				validate: (0, _utils$7.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
				optional: true
			}
		})
	});
	defineType$4("ClassBody", {
		visitor: ["body"],
		fields: { body: (0, _utils$7.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock") }
	});
	defineType$4("ClassExpression", {
		builder: [
			"id",
			"superClass",
			"body",
			"decorators"
		],
		visitor: [
			"decorators",
			"id",
			"typeParameters",
			"superClass",
			"superTypeParameters",
			"mixins",
			"implements",
			"body"
		],
		aliases: [
			"Scopable",
			"Class",
			"Expression"
		],
		fields: {
			id: {
				validate: (0, _utils$7.assertNodeType)("Identifier"),
				optional: true
			},
			typeParameters: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("ClassBody") },
			superClass: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("Expression")
			},
			["superTypeParameters"]: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
				optional: true
			},
			implements: {
				validate: (0, _utils$7.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			mixins: {
				validate: (0, _utils$7.assertNodeType)("InterfaceExtends"),
				optional: true
			}
		}
	});
	defineType$4("ClassDeclaration", {
		inherits: "ClassExpression",
		aliases: [
			"Scopable",
			"Class",
			"Statement",
			"Declaration"
		],
		fields: {
			id: {
				validate: (0, _utils$7.assertNodeType)("Identifier"),
				optional: true
			},
			typeParameters: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
				optional: true
			},
			body: { validate: (0, _utils$7.assertNodeType)("ClassBody") },
			superClass: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("Expression")
			},
			["superTypeParameters"]: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
				optional: true
			},
			implements: {
				validate: (0, _utils$7.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			mixins: {
				validate: (0, _utils$7.assertNodeType)("InterfaceExtends"),
				optional: true
			},
			declare: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			abstract: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			}
		},
		validate: !process.env.BABEL_TYPES_8_BREAKING ? void 0 : function() {
			const identifier$6 = (0, _utils$7.assertNodeType)("Identifier");
			return function(parent, key, node) {
				if (!(0, _is$3.default)("ExportDefaultDeclaration", parent)) identifier$6(node, "id", node.id);
			};
		}()
	});
	const importAttributes = exports.importAttributes = {
		attributes: {
			optional: true,
			validate: (0, _utils$7.arrayOfType)("ImportAttribute")
		},
		assertions: {
			deprecated: true,
			optional: true,
			validate: (0, _utils$7.arrayOfType)("ImportAttribute")
		}
	};
	defineType$4("ExportAllDeclaration", {
		builder: ["source"],
		visitor: [
			"source",
			"attributes",
			"assertions"
		],
		aliases: [
			"Statement",
			"Declaration",
			"ImportOrExportDeclaration",
			"ExportDeclaration"
		],
		fields: Object.assign({
			source: { validate: (0, _utils$7.assertNodeType)("StringLiteral") },
			exportKind: (0, _utils$7.validateOptional)((0, _utils$7.assertOneOf)("type", "value"))
		}, importAttributes)
	});
	defineType$4("ExportDefaultDeclaration", {
		visitor: ["declaration"],
		aliases: [
			"Statement",
			"Declaration",
			"ImportOrExportDeclaration",
			"ExportDeclaration"
		],
		fields: {
			declaration: (0, _utils$7.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),
			exportKind: (0, _utils$7.validateOptional)((0, _utils$7.assertOneOf)("value"))
		}
	});
	defineType$4("ExportNamedDeclaration", {
		builder: [
			"declaration",
			"specifiers",
			"source"
		],
		visitor: process.env ? [
			"declaration",
			"specifiers",
			"source",
			"attributes"
		] : [
			"declaration",
			"specifiers",
			"source",
			"attributes",
			"assertions"
		],
		aliases: [
			"Statement",
			"Declaration",
			"ImportOrExportDeclaration",
			"ExportDeclaration"
		],
		fields: Object.assign({ declaration: {
			optional: true,
			validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
				if (val && node.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
				if (val && node.source) throw new TypeError("Cannot export a declaration from a source");
			}, { oneOfNodeTypes: ["Declaration"] })) : (0, _utils$7.assertNodeType)("Declaration")
		} }, importAttributes, {
			specifiers: {
				default: [],
				validate: (0, _utils$7.arrayOf)(function() {
					const sourced = (0, _utils$7.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
					const sourceless = (0, _utils$7.assertNodeType)("ExportSpecifier");
					if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
					return Object.assign(function(node, key, val) {
						const validator = node.source ? sourced : sourceless;
						validator(node, key, val);
					}, { oneOfNodeTypes: [
						"ExportSpecifier",
						"ExportDefaultSpecifier",
						"ExportNamespaceSpecifier"
					] });
				}())
			},
			source: {
				validate: (0, _utils$7.assertNodeType)("StringLiteral"),
				optional: true
			},
			exportKind: (0, _utils$7.validateOptional)((0, _utils$7.assertOneOf)("type", "value"))
		})
	});
	defineType$4("ExportSpecifier", {
		visitor: ["local", "exported"],
		aliases: ["ModuleSpecifier"],
		fields: {
			local: { validate: (0, _utils$7.assertNodeType)("Identifier") },
			exported: { validate: (0, _utils$7.assertNodeType)("Identifier", "StringLiteral") },
			exportKind: {
				validate: (0, _utils$7.assertOneOf)("type", "value"),
				optional: true
			}
		}
	});
	defineType$4("ForOfStatement", {
		visitor: [
			"left",
			"right",
			"body"
		],
		builder: [
			"left",
			"right",
			"body",
			"await"
		],
		aliases: [
			"Scopable",
			"Statement",
			"For",
			"BlockParent",
			"Loop",
			"ForXStatement"
		],
		fields: {
			left: { validate: function() {
				if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils$7.assertNodeType)("VariableDeclaration", "LVal");
				const declaration = (0, _utils$7.assertNodeType)("VariableDeclaration");
				const lval = (0, _utils$7.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
				return Object.assign(function(node, key, val) {
					if ((0, _is$3.default)("VariableDeclaration", val)) declaration(node, key, val);
					else lval(node, key, val);
				}, { oneOfNodeTypes: [
					"VariableDeclaration",
					"Identifier",
					"MemberExpression",
					"ArrayPattern",
					"ObjectPattern",
					"TSAsExpression",
					"TSSatisfiesExpression",
					"TSTypeAssertion",
					"TSNonNullExpression"
				] });
			}() },
			right: { validate: (0, _utils$7.assertNodeType)("Expression") },
			body: { validate: (0, _utils$7.assertNodeType)("Statement") },
			await: { default: false }
		}
	});
	defineType$4("ImportDeclaration", {
		builder: ["specifiers", "source"],
		visitor: [
			"specifiers",
			"source",
			"attributes",
			"assertions"
		],
		aliases: [
			"Statement",
			"Declaration",
			"ImportOrExportDeclaration"
		],
		fields: Object.assign({}, importAttributes, {
			module: {
				optional: true,
				validate: (0, _utils$7.assertValueType)("boolean")
			},
			phase: {
				default: null,
				validate: (0, _utils$7.assertOneOf)("source", "defer")
			},
			specifiers: (0, _utils$7.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),
			source: { validate: (0, _utils$7.assertNodeType)("StringLiteral") },
			importKind: {
				validate: (0, _utils$7.assertOneOf)("type", "typeof", "value"),
				optional: true
			}
		})
	});
	defineType$4("ImportDefaultSpecifier", {
		visitor: ["local"],
		aliases: ["ModuleSpecifier"],
		fields: { local: { validate: (0, _utils$7.assertNodeType)("Identifier") } }
	});
	defineType$4("ImportNamespaceSpecifier", {
		visitor: ["local"],
		aliases: ["ModuleSpecifier"],
		fields: { local: { validate: (0, _utils$7.assertNodeType)("Identifier") } }
	});
	defineType$4("ImportSpecifier", {
		visitor: ["imported", "local"],
		builder: ["local", "imported"],
		aliases: ["ModuleSpecifier"],
		fields: {
			local: { validate: (0, _utils$7.assertNodeType)("Identifier") },
			imported: { validate: (0, _utils$7.assertNodeType)("Identifier", "StringLiteral") },
			importKind: {
				validate: (0, _utils$7.assertOneOf)("type", "typeof", "value"),
				optional: true
			}
		}
	});
	defineType$4("ImportExpression", {
		visitor: ["source", "options"],
		aliases: ["Expression"],
		fields: {
			phase: {
				default: null,
				validate: (0, _utils$7.assertOneOf)("source", "defer")
			},
			source: { validate: (0, _utils$7.assertNodeType)("Expression") },
			options: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			}
		}
	});
	defineType$4("MetaProperty", {
		visitor: ["meta", "property"],
		aliases: ["Expression"],
		fields: {
			meta: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
				let property;
				switch (val.name) {
					case "function":
						property = "sent";
						break;
					case "new":
						property = "target";
						break;
					case "import":
						property = "meta";
						break;
				}
				if (!(0, _is$3.default)("Identifier", node.property, { name: property })) throw new TypeError("Unrecognised MetaProperty");
			}, { oneOfNodeTypes: ["Identifier"] })) : (0, _utils$7.assertNodeType)("Identifier") },
			property: { validate: (0, _utils$7.assertNodeType)("Identifier") }
		}
	});
	const classMethodOrPropertyCommon = () => ({
		abstract: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		},
		accessibility: {
			validate: (0, _utils$7.assertOneOf)("public", "private", "protected"),
			optional: true
		},
		static: { default: false },
		override: { default: false },
		computed: { default: false },
		optional: {
			validate: (0, _utils$7.assertValueType)("boolean"),
			optional: true
		},
		key: { validate: (0, _utils$7.chain)(function() {
			const normal = (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
			const computed = (0, _utils$7.assertNodeType)("Expression");
			return function(node, key, val) {
				const validator = node.computed ? computed : normal;
				validator(node, key, val);
			};
		}(), (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) }
	});
	exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
	const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
		params: (0, _utils$7.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),
		kind: {
			validate: (0, _utils$7.assertOneOf)("get", "set", "method", "constructor"),
			default: "method"
		},
		access: {
			validate: (0, _utils$7.chain)((0, _utils$7.assertValueType)("string"), (0, _utils$7.assertOneOf)("public", "private", "protected")),
			optional: true
		},
		decorators: {
			validate: (0, _utils$7.arrayOfType)("Decorator"),
			optional: true
		}
	});
	exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
	defineType$4("ClassMethod", {
		aliases: [
			"Function",
			"Scopable",
			"BlockParent",
			"FunctionParent",
			"Method"
		],
		builder: [
			"kind",
			"key",
			"params",
			"body",
			"computed",
			"static",
			"generator",
			"async"
		],
		visitor: [
			"decorators",
			"key",
			"typeParameters",
			"params",
			"returnType",
			"body"
		],
		fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") } })
	});
	defineType$4("ObjectPattern", {
		visitor: [
			"properties",
			"typeAnnotation",
			"decorators"
		],
		builder: ["properties"],
		aliases: [
			"Pattern",
			"PatternLike",
			"LVal"
		],
		fields: Object.assign({}, patternLikeCommon(), { properties: (0, _utils$7.validateArrayOfType)("RestElement", "ObjectProperty") })
	});
	defineType$4("SpreadElement", {
		visitor: ["argument"],
		aliases: ["UnaryLike"],
		deprecatedAlias: "SpreadProperty",
		fields: { argument: { validate: (0, _utils$7.assertNodeType)("Expression") } }
	});
	defineType$4("Super", { aliases: ["Expression"] });
	defineType$4("TaggedTemplateExpression", {
		visitor: [
			"tag",
			"typeParameters",
			"quasi"
		],
		builder: ["tag", "quasi"],
		aliases: ["Expression"],
		fields: {
			tag: { validate: (0, _utils$7.assertNodeType)("Expression") },
			quasi: { validate: (0, _utils$7.assertNodeType)("TemplateLiteral") },
			["typeParameters"]: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
				optional: true
			}
		}
	});
	defineType$4("TemplateElement", {
		builder: ["value", "tail"],
		fields: {
			value: { validate: (0, _utils$7.chain)((0, _utils$7.assertShape)({
				raw: { validate: (0, _utils$7.assertValueType)("string") },
				cooked: {
					validate: (0, _utils$7.assertValueType)("string"),
					optional: true
				}
			}), function templateElementCookedValidator(node) {
				const raw = node.value.raw;
				let unterminatedCalled = false;
				const error = () => {
					throw new Error("Internal @babel/types error.");
				};
				const { str: str$4, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
					unterminated() {
						unterminatedCalled = true;
					},
					strictNumericEscape: error,
					invalidEscapeSequence: error,
					numericSeparatorInEscapeSequence: error,
					unexpectedNumericSeparator: error,
					invalidDigit: error,
					invalidCodePoint: error
				});
				if (!unterminatedCalled) throw new Error("Invalid raw");
				node.value.cooked = firstInvalidLoc ? null : str$4;
			}) },
			tail: { default: false }
		}
	});
	defineType$4("TemplateLiteral", {
		visitor: ["quasis", "expressions"],
		aliases: ["Expression", "Literal"],
		fields: {
			quasis: (0, _utils$7.validateArrayOfType)("TemplateElement"),
			expressions: { validate: (0, _utils$7.chain)((0, _utils$7.assertValueType)("array"), (0, _utils$7.assertEach)((0, _utils$7.assertNodeType)("Expression", "TSType")), function(node, key, val) {
				if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
			}) }
		}
	});
	defineType$4("YieldExpression", {
		builder: ["argument", "delegate"],
		visitor: ["argument"],
		aliases: ["Expression", "Terminatorless"],
		fields: {
			delegate: {
				validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.chain)((0, _utils$7.assertValueType)("boolean"), Object.assign(function(node, key, val) {
					if (val && !node.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
				}, { type: "boolean" })) : (0, _utils$7.assertValueType)("boolean"),
				default: false
			},
			argument: {
				optional: true,
				validate: (0, _utils$7.assertNodeType)("Expression")
			}
		}
	});
	defineType$4("AwaitExpression", {
		builder: ["argument"],
		visitor: ["argument"],
		aliases: ["Expression", "Terminatorless"],
		fields: { argument: { validate: (0, _utils$7.assertNodeType)("Expression") } }
	});
	defineType$4("Import", { aliases: ["Expression"] });
	defineType$4("BigIntLiteral", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$7.assertValueType)("string") } },
		aliases: [
			"Expression",
			"Pureish",
			"Literal",
			"Immutable"
		]
	});
	defineType$4("ExportNamespaceSpecifier", {
		visitor: ["exported"],
		aliases: ["ModuleSpecifier"],
		fields: { exported: { validate: (0, _utils$7.assertNodeType)("Identifier") } }
	});
	defineType$4("OptionalMemberExpression", {
		builder: [
			"object",
			"property",
			"computed",
			"optional"
		],
		visitor: ["object", "property"],
		aliases: ["Expression"],
		fields: {
			object: { validate: (0, _utils$7.assertNodeType)("Expression") },
			property: { validate: function() {
				const normal = (0, _utils$7.assertNodeType)("Identifier");
				const computed = (0, _utils$7.assertNodeType)("Expression");
				const validator = Object.assign(function(node, key, val) {
					const validator$1 = node.computed ? computed : normal;
					validator$1(node, key, val);
				}, { oneOfNodeTypes: ["Expression", "Identifier"] });
				return validator;
			}() },
			computed: { default: false },
			optional: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertValueType)("boolean") : (0, _utils$7.chain)((0, _utils$7.assertValueType)("boolean"), (0, _utils$7.assertOptionalChainStart)()) }
		}
	});
	defineType$4("OptionalCallExpression", {
		visitor: [
			"callee",
			"arguments",
			"typeParameters",
			"typeArguments"
		],
		builder: [
			"callee",
			"arguments",
			"optional"
		],
		aliases: ["Expression"],
		fields: Object.assign({
			callee: { validate: (0, _utils$7.assertNodeType)("Expression") },
			arguments: (0, _utils$7.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
			optional: { validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils$7.assertValueType)("boolean") : (0, _utils$7.chain)((0, _utils$7.assertValueType)("boolean"), (0, _utils$7.assertOptionalChainStart)()) },
			typeArguments: {
				validate: (0, _utils$7.assertNodeType)("TypeParameterInstantiation"),
				optional: true
			}
		}, { typeParameters: {
			validate: (0, _utils$7.assertNodeType)("TSTypeParameterInstantiation"),
			optional: true
		} })
	});
	defineType$4("ClassProperty", {
		visitor: [
			"decorators",
			"variance",
			"key",
			"typeAnnotation",
			"value"
		],
		builder: [
			"key",
			"value",
			"typeAnnotation",
			"decorators",
			"computed",
			"static"
		],
		aliases: ["Property"],
		fields: Object.assign({}, classMethodOrPropertyCommon(), {
			value: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			definite: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			typeAnnotation: {
				validate: (0, _utils$7.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			readonly: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			declare: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			variance: {
				validate: (0, _utils$7.assertNodeType)("Variance"),
				optional: true
			}
		})
	});
	defineType$4("ClassAccessorProperty", {
		visitor: [
			"decorators",
			"key",
			"typeAnnotation",
			"value"
		],
		builder: [
			"key",
			"value",
			"typeAnnotation",
			"decorators",
			"computed",
			"static"
		],
		aliases: ["Property", "Accessor"],
		fields: Object.assign({}, classMethodOrPropertyCommon(), {
			key: { validate: (0, _utils$7.chain)(function() {
				const normal = (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
				const computed = (0, _utils$7.assertNodeType)("Expression");
				return function(node, key, val) {
					const validator = node.computed ? computed : normal;
					validator(node, key, val);
				};
			}(), (0, _utils$7.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) },
			value: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			definite: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			typeAnnotation: {
				validate: (0, _utils$7.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			readonly: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			declare: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			variance: {
				validate: (0, _utils$7.assertNodeType)("Variance"),
				optional: true
			}
		})
	});
	defineType$4("ClassPrivateProperty", {
		visitor: [
			"decorators",
			"variance",
			"key",
			"typeAnnotation",
			"value"
		],
		builder: [
			"key",
			"value",
			"decorators",
			"static"
		],
		aliases: ["Property", "Private"],
		fields: {
			key: { validate: (0, _utils$7.assertNodeType)("PrivateName") },
			value: {
				validate: (0, _utils$7.assertNodeType)("Expression"),
				optional: true
			},
			typeAnnotation: {
				validate: (0, _utils$7.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$7.arrayOfType)("Decorator"),
				optional: true
			},
			static: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				default: false
			},
			readonly: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			optional: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			definite: {
				validate: (0, _utils$7.assertValueType)("boolean"),
				optional: true
			},
			variance: {
				validate: (0, _utils$7.assertNodeType)("Variance"),
				optional: true
			}
		}
	});
	defineType$4("ClassPrivateMethod", {
		builder: [
			"kind",
			"key",
			"params",
			"body",
			"static"
		],
		visitor: [
			"decorators",
			"key",
			"typeParameters",
			"params",
			"returnType",
			"body"
		],
		aliases: [
			"Function",
			"Scopable",
			"BlockParent",
			"FunctionParent",
			"Method",
			"Private"
		],
		fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
			kind: {
				validate: (0, _utils$7.assertOneOf)("get", "set", "method"),
				default: "method"
			},
			key: { validate: (0, _utils$7.assertNodeType)("PrivateName") },
			body: { validate: (0, _utils$7.assertNodeType)("BlockStatement") }
		})
	});
	defineType$4("PrivateName", {
		visitor: ["id"],
		aliases: ["Private"],
		fields: { id: { validate: (0, _utils$7.assertNodeType)("Identifier") } }
	});
	defineType$4("StaticBlock", {
		visitor: ["body"],
		fields: { body: (0, _utils$7.validateArrayOfType)("Statement") },
		aliases: [
			"Scopable",
			"BlockParent",
			"FunctionParent"
		]
	});
	defineType$4("ImportAttribute", {
		visitor: ["key", "value"],
		fields: {
			key: { validate: (0, _utils$7.assertNodeType)("Identifier", "StringLiteral") },
			value: { validate: (0, _utils$7.assertNodeType)("StringLiteral") }
		}
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/flow.js
var require_flow$1 = __commonJS({ "node_modules/@babel/types/lib/definitions/flow.js"() {
	var _core$2 = require_core();
	var _utils$6 = require_utils$1();
	const defineType$3 = (0, _utils$6.defineAliasedType)("Flow");
	const defineInterfaceishType = (name) => {
		const isDeclareClass$1 = name === "DeclareClass";
		defineType$3(name, {
			builder: [
				"id",
				"typeParameters",
				"extends",
				"body"
			],
			visitor: [
				"id",
				"typeParameters",
				"extends",
				...isDeclareClass$1 ? ["mixins", "implements"] : [],
				"body"
			],
			aliases: [
				"FlowDeclaration",
				"Statement",
				"Declaration"
			],
			fields: Object.assign({
				id: (0, _utils$6.validateType)("Identifier"),
				typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
				extends: (0, _utils$6.validateOptional)((0, _utils$6.arrayOfType)("InterfaceExtends"))
			}, isDeclareClass$1 ? {
				mixins: (0, _utils$6.validateOptional)((0, _utils$6.arrayOfType)("InterfaceExtends")),
				implements: (0, _utils$6.validateOptional)((0, _utils$6.arrayOfType)("ClassImplements"))
			} : {}, { body: (0, _utils$6.validateType)("ObjectTypeAnnotation") })
		});
	};
	defineType$3("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("ArrayTypeAnnotation", {
		visitor: ["elementType"],
		aliases: ["FlowType"],
		fields: { elementType: (0, _utils$6.validateType)("FlowType") }
	});
	defineType$3("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("BooleanLiteralTypeAnnotation", {
		builder: ["value"],
		aliases: ["FlowType"],
		fields: { value: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")) }
	});
	defineType$3("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("ClassImplements", {
		visitor: ["id", "typeParameters"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterInstantiation")
		}
	});
	defineInterfaceishType("DeclareClass");
	defineType$3("DeclareFunction", {
		builder: ["id"],
		visitor: ["id", "predicate"],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			predicate: (0, _utils$6.validateOptionalType)("DeclaredPredicate")
		}
	});
	defineInterfaceishType("DeclareInterface");
	defineType$3("DeclareModule", {
		builder: [
			"id",
			"body",
			"kind"
		],
		visitor: ["id", "body"],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier", "StringLiteral"),
			body: (0, _utils$6.validateType)("BlockStatement"),
			kind: (0, _utils$6.validateOptional)((0, _utils$6.assertOneOf)("CommonJS", "ES"))
		}
	});
	defineType$3("DeclareModuleExports", {
		visitor: ["typeAnnotation"],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: { typeAnnotation: (0, _utils$6.validateType)("TypeAnnotation") }
	});
	defineType$3("DeclareTypeAlias", {
		visitor: [
			"id",
			"typeParameters",
			"right"
		],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
			right: (0, _utils$6.validateType)("FlowType")
		}
	});
	defineType$3("DeclareOpaqueType", {
		visitor: [
			"id",
			"typeParameters",
			"supertype"
		],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
			supertype: (0, _utils$6.validateOptionalType)("FlowType"),
			impltype: (0, _utils$6.validateOptionalType)("FlowType")
		}
	});
	defineType$3("DeclareVariable", {
		visitor: ["id"],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: { id: (0, _utils$6.validateType)("Identifier") }
	});
	defineType$3("DeclareExportDeclaration", {
		visitor: [
			"declaration",
			"specifiers",
			"source",
			"attributes"
		],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: Object.assign({
			declaration: (0, _utils$6.validateOptionalType)("Flow"),
			specifiers: (0, _utils$6.validateOptional)((0, _utils$6.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),
			source: (0, _utils$6.validateOptionalType)("StringLiteral"),
			default: (0, _utils$6.validateOptional)((0, _utils$6.assertValueType)("boolean"))
		}, _core$2.importAttributes)
	});
	defineType$3("DeclareExportAllDeclaration", {
		visitor: ["source", "attributes"],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: Object.assign({
			source: (0, _utils$6.validateType)("StringLiteral"),
			exportKind: (0, _utils$6.validateOptional)((0, _utils$6.assertOneOf)("type", "value"))
		}, _core$2.importAttributes)
	});
	defineType$3("DeclaredPredicate", {
		visitor: ["value"],
		aliases: ["FlowPredicate"],
		fields: { value: (0, _utils$6.validateType)("Flow") }
	});
	defineType$3("ExistsTypeAnnotation", { aliases: ["FlowType"] });
	defineType$3("FunctionTypeAnnotation", {
		builder: [
			"typeParameters",
			"params",
			"rest",
			"returnType"
		],
		visitor: [
			"typeParameters",
			"this",
			"params",
			"rest",
			"returnType"
		],
		aliases: ["FlowType"],
		fields: {
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
			params: (0, _utils$6.validateArrayOfType)("FunctionTypeParam"),
			rest: (0, _utils$6.validateOptionalType)("FunctionTypeParam"),
			this: (0, _utils$6.validateOptionalType)("FunctionTypeParam"),
			returnType: (0, _utils$6.validateType)("FlowType")
		}
	});
	defineType$3("FunctionTypeParam", {
		visitor: ["name", "typeAnnotation"],
		fields: {
			name: (0, _utils$6.validateOptionalType)("Identifier"),
			typeAnnotation: (0, _utils$6.validateType)("FlowType"),
			optional: (0, _utils$6.validateOptional)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("GenericTypeAnnotation", {
		visitor: ["id", "typeParameters"],
		aliases: ["FlowType"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier", "QualifiedTypeIdentifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterInstantiation")
		}
	});
	defineType$3("InferredPredicate", { aliases: ["FlowPredicate"] });
	defineType$3("InterfaceExtends", {
		visitor: ["id", "typeParameters"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier", "QualifiedTypeIdentifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterInstantiation")
		}
	});
	defineInterfaceishType("InterfaceDeclaration");
	defineType$3("InterfaceTypeAnnotation", {
		visitor: ["extends", "body"],
		aliases: ["FlowType"],
		fields: {
			extends: (0, _utils$6.validateOptional)((0, _utils$6.arrayOfType)("InterfaceExtends")),
			body: (0, _utils$6.validateType)("ObjectTypeAnnotation")
		}
	});
	defineType$3("IntersectionTypeAnnotation", {
		visitor: ["types"],
		aliases: ["FlowType"],
		fields: { types: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("FlowType")) }
	});
	defineType$3("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("NullableTypeAnnotation", {
		visitor: ["typeAnnotation"],
		aliases: ["FlowType"],
		fields: { typeAnnotation: (0, _utils$6.validateType)("FlowType") }
	});
	defineType$3("NumberLiteralTypeAnnotation", {
		builder: ["value"],
		aliases: ["FlowType"],
		fields: { value: (0, _utils$6.validate)((0, _utils$6.assertValueType)("number")) }
	});
	defineType$3("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("ObjectTypeAnnotation", {
		visitor: [
			"properties",
			"indexers",
			"callProperties",
			"internalSlots"
		],
		aliases: ["FlowType"],
		builder: [
			"properties",
			"indexers",
			"callProperties",
			"internalSlots",
			"exact"
		],
		fields: {
			properties: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),
			indexers: {
				validate: (0, _utils$6.arrayOfType)("ObjectTypeIndexer"),
				optional: true,
				default: []
			},
			callProperties: {
				validate: (0, _utils$6.arrayOfType)("ObjectTypeCallProperty"),
				optional: true,
				default: []
			},
			internalSlots: {
				validate: (0, _utils$6.arrayOfType)("ObjectTypeInternalSlot"),
				optional: true,
				default: []
			},
			exact: {
				validate: (0, _utils$6.assertValueType)("boolean"),
				default: false
			},
			inexact: (0, _utils$6.validateOptional)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("ObjectTypeInternalSlot", {
		visitor: ["id", "value"],
		builder: [
			"id",
			"value",
			"optional",
			"static",
			"method"
		],
		aliases: ["UserWhitespacable"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			value: (0, _utils$6.validateType)("FlowType"),
			optional: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			static: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			method: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("ObjectTypeCallProperty", {
		visitor: ["value"],
		aliases: ["UserWhitespacable"],
		fields: {
			value: (0, _utils$6.validateType)("FlowType"),
			static: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("ObjectTypeIndexer", {
		visitor: [
			"variance",
			"id",
			"key",
			"value"
		],
		builder: [
			"id",
			"key",
			"value",
			"variance"
		],
		aliases: ["UserWhitespacable"],
		fields: {
			id: (0, _utils$6.validateOptionalType)("Identifier"),
			key: (0, _utils$6.validateType)("FlowType"),
			value: (0, _utils$6.validateType)("FlowType"),
			static: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			variance: (0, _utils$6.validateOptionalType)("Variance")
		}
	});
	defineType$3("ObjectTypeProperty", {
		visitor: [
			"key",
			"value",
			"variance"
		],
		aliases: ["UserWhitespacable"],
		fields: {
			key: (0, _utils$6.validateType)("Identifier", "StringLiteral"),
			value: (0, _utils$6.validateType)("FlowType"),
			kind: (0, _utils$6.validate)((0, _utils$6.assertOneOf)("init", "get", "set")),
			static: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			proto: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			optional: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			variance: (0, _utils$6.validateOptionalType)("Variance"),
			method: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("ObjectTypeSpreadProperty", {
		visitor: ["argument"],
		aliases: ["UserWhitespacable"],
		fields: { argument: (0, _utils$6.validateType)("FlowType") }
	});
	defineType$3("OpaqueType", {
		visitor: [
			"id",
			"typeParameters",
			"supertype",
			"impltype"
		],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
			supertype: (0, _utils$6.validateOptionalType)("FlowType"),
			impltype: (0, _utils$6.validateType)("FlowType")
		}
	});
	defineType$3("QualifiedTypeIdentifier", {
		visitor: ["qualification", "id"],
		builder: ["id", "qualification"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			qualification: (0, _utils$6.validateType)("Identifier", "QualifiedTypeIdentifier")
		}
	});
	defineType$3("StringLiteralTypeAnnotation", {
		builder: ["value"],
		aliases: ["FlowType"],
		fields: { value: (0, _utils$6.validate)((0, _utils$6.assertValueType)("string")) }
	});
	defineType$3("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("TupleTypeAnnotation", {
		visitor: ["types"],
		aliases: ["FlowType"],
		fields: { types: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("FlowType")) }
	});
	defineType$3("TypeofTypeAnnotation", {
		visitor: ["argument"],
		aliases: ["FlowType"],
		fields: { argument: (0, _utils$6.validateType)("FlowType") }
	});
	defineType$3("TypeAlias", {
		visitor: [
			"id",
			"typeParameters",
			"right"
		],
		aliases: [
			"FlowDeclaration",
			"Statement",
			"Declaration"
		],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			typeParameters: (0, _utils$6.validateOptionalType)("TypeParameterDeclaration"),
			right: (0, _utils$6.validateType)("FlowType")
		}
	});
	defineType$3("TypeAnnotation", {
		visitor: ["typeAnnotation"],
		fields: { typeAnnotation: (0, _utils$6.validateType)("FlowType") }
	});
	defineType$3("TypeCastExpression", {
		visitor: ["expression", "typeAnnotation"],
		aliases: ["ExpressionWrapper", "Expression"],
		fields: {
			expression: (0, _utils$6.validateType)("Expression"),
			typeAnnotation: (0, _utils$6.validateType)("TypeAnnotation")
		}
	});
	defineType$3("TypeParameter", {
		visitor: [
			"bound",
			"default",
			"variance"
		],
		fields: {
			name: (0, _utils$6.validate)((0, _utils$6.assertValueType)("string")),
			bound: (0, _utils$6.validateOptionalType)("TypeAnnotation"),
			default: (0, _utils$6.validateOptionalType)("FlowType"),
			variance: (0, _utils$6.validateOptionalType)("Variance")
		}
	});
	defineType$3("TypeParameterDeclaration", {
		visitor: ["params"],
		fields: { params: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("TypeParameter")) }
	});
	defineType$3("TypeParameterInstantiation", {
		visitor: ["params"],
		fields: { params: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("FlowType")) }
	});
	defineType$3("UnionTypeAnnotation", {
		visitor: ["types"],
		aliases: ["FlowType"],
		fields: { types: (0, _utils$6.validate)((0, _utils$6.arrayOfType)("FlowType")) }
	});
	defineType$3("Variance", {
		builder: ["kind"],
		fields: { kind: (0, _utils$6.validate)((0, _utils$6.assertOneOf)("minus", "plus")) }
	});
	defineType$3("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] });
	defineType$3("EnumDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: ["id", "body"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			body: (0, _utils$6.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")
		}
	});
	defineType$3("EnumBooleanBody", {
		aliases: ["EnumBody"],
		visitor: ["members"],
		fields: {
			explicitType: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			members: (0, _utils$6.validateArrayOfType)("EnumBooleanMember"),
			hasUnknownMembers: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("EnumNumberBody", {
		aliases: ["EnumBody"],
		visitor: ["members"],
		fields: {
			explicitType: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			members: (0, _utils$6.validateArrayOfType)("EnumNumberMember"),
			hasUnknownMembers: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("EnumStringBody", {
		aliases: ["EnumBody"],
		visitor: ["members"],
		fields: {
			explicitType: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean")),
			members: (0, _utils$6.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),
			hasUnknownMembers: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("EnumSymbolBody", {
		aliases: ["EnumBody"],
		visitor: ["members"],
		fields: {
			members: (0, _utils$6.validateArrayOfType)("EnumDefaultedMember"),
			hasUnknownMembers: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
	defineType$3("EnumBooleanMember", {
		aliases: ["EnumMember"],
		builder: ["id"],
		visitor: ["id", "init"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			init: (0, _utils$6.validateType)("BooleanLiteral")
		}
	});
	defineType$3("EnumNumberMember", {
		aliases: ["EnumMember"],
		visitor: ["id", "init"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			init: (0, _utils$6.validateType)("NumericLiteral")
		}
	});
	defineType$3("EnumStringMember", {
		aliases: ["EnumMember"],
		visitor: ["id", "init"],
		fields: {
			id: (0, _utils$6.validateType)("Identifier"),
			init: (0, _utils$6.validateType)("StringLiteral")
		}
	});
	defineType$3("EnumDefaultedMember", {
		aliases: ["EnumMember"],
		visitor: ["id"],
		fields: { id: (0, _utils$6.validateType)("Identifier") }
	});
	defineType$3("IndexedAccessType", {
		visitor: ["objectType", "indexType"],
		aliases: ["FlowType"],
		fields: {
			objectType: (0, _utils$6.validateType)("FlowType"),
			indexType: (0, _utils$6.validateType)("FlowType")
		}
	});
	defineType$3("OptionalIndexedAccessType", {
		visitor: ["objectType", "indexType"],
		aliases: ["FlowType"],
		fields: {
			objectType: (0, _utils$6.validateType)("FlowType"),
			indexType: (0, _utils$6.validateType)("FlowType"),
			optional: (0, _utils$6.validate)((0, _utils$6.assertValueType)("boolean"))
		}
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/jsx.js
var require_jsx$1 = __commonJS({ "node_modules/@babel/types/lib/definitions/jsx.js"() {
	var _utils$5 = require_utils$1();
	const defineType$2 = (0, _utils$5.defineAliasedType)("JSX");
	defineType$2("JSXAttribute", {
		visitor: ["name", "value"],
		aliases: ["Immutable"],
		fields: {
			name: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier", "JSXNamespacedName") },
			value: {
				optional: true,
				validate: (0, _utils$5.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
			}
		}
	});
	defineType$2("JSXClosingElement", {
		visitor: ["name"],
		aliases: ["Immutable"],
		fields: { name: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } }
	});
	defineType$2("JSXElement", {
		builder: [
			"openingElement",
			"closingElement",
			"children",
			"selfClosing"
		],
		visitor: [
			"openingElement",
			"children",
			"closingElement"
		],
		aliases: ["Immutable", "Expression"],
		fields: Object.assign({
			openingElement: { validate: (0, _utils$5.assertNodeType)("JSXOpeningElement") },
			closingElement: {
				optional: true,
				validate: (0, _utils$5.assertNodeType)("JSXClosingElement")
			},
			children: (0, _utils$5.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
		}, { selfClosing: {
			validate: (0, _utils$5.assertValueType)("boolean"),
			optional: true
		} })
	});
	defineType$2("JSXEmptyExpression", {});
	defineType$2("JSXExpressionContainer", {
		visitor: ["expression"],
		aliases: ["Immutable"],
		fields: { expression: { validate: (0, _utils$5.assertNodeType)("Expression", "JSXEmptyExpression") } }
	});
	defineType$2("JSXSpreadChild", {
		visitor: ["expression"],
		aliases: ["Immutable"],
		fields: { expression: { validate: (0, _utils$5.assertNodeType)("Expression") } }
	});
	defineType$2("JSXIdentifier", {
		builder: ["name"],
		fields: { name: { validate: (0, _utils$5.assertValueType)("string") } }
	});
	defineType$2("JSXMemberExpression", {
		visitor: ["object", "property"],
		fields: {
			object: { validate: (0, _utils$5.assertNodeType)("JSXMemberExpression", "JSXIdentifier") },
			property: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier") }
		}
	});
	defineType$2("JSXNamespacedName", {
		visitor: ["namespace", "name"],
		fields: {
			namespace: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier") },
			name: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier") }
		}
	});
	defineType$2("JSXOpeningElement", {
		builder: [
			"name",
			"attributes",
			"selfClosing"
		],
		visitor: [
			"name",
			"typeParameters",
			"typeArguments",
			"attributes"
		],
		aliases: ["Immutable"],
		fields: Object.assign({
			name: { validate: (0, _utils$5.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") },
			selfClosing: { default: false },
			attributes: (0, _utils$5.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),
			typeArguments: {
				validate: (0, _utils$5.assertNodeType)("TypeParameterInstantiation"),
				optional: true
			}
		}, { typeParameters: {
			validate: (0, _utils$5.assertNodeType)("TSTypeParameterInstantiation"),
			optional: true
		} })
	});
	defineType$2("JSXSpreadAttribute", {
		visitor: ["argument"],
		fields: { argument: { validate: (0, _utils$5.assertNodeType)("Expression") } }
	});
	defineType$2("JSXText", {
		aliases: ["Immutable"],
		builder: ["value"],
		fields: { value: { validate: (0, _utils$5.assertValueType)("string") } }
	});
	defineType$2("JSXFragment", {
		builder: [
			"openingFragment",
			"closingFragment",
			"children"
		],
		visitor: [
			"openingFragment",
			"children",
			"closingFragment"
		],
		aliases: ["Immutable", "Expression"],
		fields: {
			openingFragment: { validate: (0, _utils$5.assertNodeType)("JSXOpeningFragment") },
			closingFragment: { validate: (0, _utils$5.assertNodeType)("JSXClosingFragment") },
			children: (0, _utils$5.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
		}
	});
	defineType$2("JSXOpeningFragment", { aliases: ["Immutable"] });
	defineType$2("JSXClosingFragment", { aliases: ["Immutable"] });
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/placeholders.js
var require_placeholders = __commonJS({ "node_modules/@babel/types/lib/definitions/placeholders.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;
	var _utils$4 = require_utils$1();
	const PLACEHOLDERS = exports.PLACEHOLDERS = [
		"Identifier",
		"StringLiteral",
		"Expression",
		"Statement",
		"Declaration",
		"BlockStatement",
		"ClassBody",
		"Pattern"
	];
	const PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS_ALIAS = {
		Declaration: ["Statement"],
		Pattern: ["PatternLike", "LVal"]
	};
	for (const type of PLACEHOLDERS) {
		const alias = _utils$4.ALIAS_KEYS[type];
		if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
	}
	const PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_FLIPPED_ALIAS = {};
	Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
		PLACEHOLDERS_ALIAS[type].forEach((alias) => {
			if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
			PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
		});
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/misc.js
var require_misc = __commonJS({ "node_modules/@babel/types/lib/definitions/misc.js"() {
	var _utils$3 = require_utils$1();
	var _placeholders$1 = require_placeholders();
	var _core$1 = require_core();
	const defineType$1 = (0, _utils$3.defineAliasedType)("Miscellaneous");
	defineType$1("Noop", { visitor: [] });
	defineType$1("Placeholder", {
		visitor: [],
		builder: ["expectedNode", "name"],
		fields: Object.assign({
			name: { validate: (0, _utils$3.assertNodeType)("Identifier") },
			expectedNode: { validate: (0, _utils$3.assertOneOf)(..._placeholders$1.PLACEHOLDERS) }
		}, (0, _core$1.patternLikeCommon)())
	});
	defineType$1("V8IntrinsicIdentifier", {
		builder: ["name"],
		fields: { name: { validate: (0, _utils$3.assertValueType)("string") } }
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/experimental.js
var require_experimental = __commonJS({ "node_modules/@babel/types/lib/definitions/experimental.js"() {
	var _utils$2 = require_utils$1();
	(0, _utils$2.default)("ArgumentPlaceholder", {});
	(0, _utils$2.default)("BindExpression", {
		visitor: ["object", "callee"],
		aliases: ["Expression"],
		fields: !process.env.BABEL_TYPES_8_BREAKING ? {
			object: { validate: Object.assign(() => {}, { oneOfNodeTypes: ["Expression"] }) },
			callee: { validate: Object.assign(() => {}, { oneOfNodeTypes: ["Expression"] }) }
		} : {
			object: { validate: (0, _utils$2.assertNodeType)("Expression") },
			callee: { validate: (0, _utils$2.assertNodeType)("Expression") }
		}
	});
	(0, _utils$2.default)("Decorator", {
		visitor: ["expression"],
		fields: { expression: { validate: (0, _utils$2.assertNodeType)("Expression") } }
	});
	(0, _utils$2.default)("DoExpression", {
		visitor: ["body"],
		builder: ["body", "async"],
		aliases: ["Expression"],
		fields: {
			body: { validate: (0, _utils$2.assertNodeType)("BlockStatement") },
			async: {
				validate: (0, _utils$2.assertValueType)("boolean"),
				default: false
			}
		}
	});
	(0, _utils$2.default)("ExportDefaultSpecifier", {
		visitor: ["exported"],
		aliases: ["ModuleSpecifier"],
		fields: { exported: { validate: (0, _utils$2.assertNodeType)("Identifier") } }
	});
	(0, _utils$2.default)("RecordExpression", {
		visitor: ["properties"],
		aliases: ["Expression"],
		fields: { properties: (0, _utils$2.validateArrayOfType)("ObjectProperty", "SpreadElement") }
	});
	(0, _utils$2.default)("TupleExpression", {
		fields: { elements: {
			validate: (0, _utils$2.arrayOfType)("Expression", "SpreadElement"),
			default: []
		} },
		visitor: ["elements"],
		aliases: ["Expression"]
	});
	(0, _utils$2.default)("DecimalLiteral", {
		builder: ["value"],
		fields: { value: { validate: (0, _utils$2.assertValueType)("string") } },
		aliases: [
			"Expression",
			"Pureish",
			"Literal",
			"Immutable"
		]
	});
	(0, _utils$2.default)("ModuleExpression", {
		visitor: ["body"],
		fields: { body: { validate: (0, _utils$2.assertNodeType)("Program") } },
		aliases: ["Expression"]
	});
	(0, _utils$2.default)("TopicReference", { aliases: ["Expression"] });
	(0, _utils$2.default)("PipelineTopicExpression", {
		builder: ["expression"],
		visitor: ["expression"],
		fields: { expression: { validate: (0, _utils$2.assertNodeType)("Expression") } },
		aliases: ["Expression"]
	});
	(0, _utils$2.default)("PipelineBareFunction", {
		builder: ["callee"],
		visitor: ["callee"],
		fields: { callee: { validate: (0, _utils$2.assertNodeType)("Expression") } },
		aliases: ["Expression"]
	});
	(0, _utils$2.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/typescript.js
var require_typescript$1 = __commonJS({ "node_modules/@babel/types/lib/definitions/typescript.js"() {
	var _utils$1 = require_utils$1();
	var _core = require_core();
	var _is$2 = require_is();
	const defineType = (0, _utils$1.defineAliasedType)("TypeScript");
	const bool = (0, _utils$1.assertValueType)("boolean");
	const tSFunctionTypeAnnotationCommon = () => ({
		returnType: {
			validate: (0, _utils$1.assertNodeType)("TSTypeAnnotation", "Noop"),
			optional: true
		},
		typeParameters: {
			validate: (0, _utils$1.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
			optional: true
		}
	});
	defineType("TSParameterProperty", {
		aliases: ["LVal"],
		visitor: ["parameter"],
		fields: {
			accessibility: {
				validate: (0, _utils$1.assertOneOf)("public", "private", "protected"),
				optional: true
			},
			readonly: {
				validate: (0, _utils$1.assertValueType)("boolean"),
				optional: true
			},
			parameter: { validate: (0, _utils$1.assertNodeType)("Identifier", "AssignmentPattern") },
			override: {
				validate: (0, _utils$1.assertValueType)("boolean"),
				optional: true
			},
			decorators: {
				validate: (0, _utils$1.arrayOfType)("Decorator"),
				optional: true
			}
		}
	});
	defineType("TSDeclareFunction", {
		aliases: ["Statement", "Declaration"],
		visitor: [
			"id",
			"typeParameters",
			"params",
			"returnType"
		],
		fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
	});
	defineType("TSDeclareMethod", {
		visitor: [
			"decorators",
			"key",
			"typeParameters",
			"params",
			"returnType"
		],
		fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
	});
	defineType("TSQualifiedName", {
		aliases: ["TSEntityName"],
		visitor: ["left", "right"],
		fields: {
			left: (0, _utils$1.validateType)("TSEntityName"),
			right: (0, _utils$1.validateType)("Identifier")
		}
	});
	const signatureDeclarationCommon = () => ({
		typeParameters: (0, _utils$1.validateOptionalType)("TSTypeParameterDeclaration"),
		["parameters"]: (0, _utils$1.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),
		["typeAnnotation"]: (0, _utils$1.validateOptionalType)("TSTypeAnnotation")
	});
	const callConstructSignatureDeclaration = {
		aliases: ["TSTypeElement"],
		visitor: [
			"typeParameters",
			"parameters",
			"typeAnnotation"
		],
		fields: signatureDeclarationCommon()
	};
	defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
	defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
	const namedTypeElementCommon = () => ({
		key: (0, _utils$1.validateType)("Expression"),
		computed: { default: false },
		optional: (0, _utils$1.validateOptional)(bool)
	});
	defineType("TSPropertySignature", {
		aliases: ["TSTypeElement"],
		visitor: ["key", "typeAnnotation"],
		fields: Object.assign({}, namedTypeElementCommon(), {
			readonly: (0, _utils$1.validateOptional)(bool),
			typeAnnotation: (0, _utils$1.validateOptionalType)("TSTypeAnnotation"),
			kind: {
				optional: true,
				validate: (0, _utils$1.assertOneOf)("get", "set")
			}
		})
	});
	defineType("TSMethodSignature", {
		aliases: ["TSTypeElement"],
		visitor: [
			"key",
			"typeParameters",
			"parameters",
			"typeAnnotation"
		],
		fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils$1.assertOneOf)("method", "get", "set") } })
	});
	defineType("TSIndexSignature", {
		aliases: ["TSTypeElement"],
		visitor: ["parameters", "typeAnnotation"],
		fields: {
			readonly: (0, _utils$1.validateOptional)(bool),
			static: (0, _utils$1.validateOptional)(bool),
			parameters: (0, _utils$1.validateArrayOfType)("Identifier"),
			typeAnnotation: (0, _utils$1.validateOptionalType)("TSTypeAnnotation")
		}
	});
	const tsKeywordTypes = [
		"TSAnyKeyword",
		"TSBooleanKeyword",
		"TSBigIntKeyword",
		"TSIntrinsicKeyword",
		"TSNeverKeyword",
		"TSNullKeyword",
		"TSNumberKeyword",
		"TSObjectKeyword",
		"TSStringKeyword",
		"TSSymbolKeyword",
		"TSUndefinedKeyword",
		"TSUnknownKeyword",
		"TSVoidKeyword"
	];
	for (const type of tsKeywordTypes) defineType(type, {
		aliases: ["TSType", "TSBaseType"],
		visitor: [],
		fields: {}
	});
	defineType("TSThisType", {
		aliases: ["TSType", "TSBaseType"],
		visitor: [],
		fields: {}
	});
	const fnOrCtrBase = {
		aliases: ["TSType"],
		visitor: [
			"typeParameters",
			"parameters",
			"typeAnnotation"
		]
	};
	defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() }));
	defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils$1.validateOptional)(bool) }) }));
	defineType("TSTypeReference", {
		aliases: ["TSType"],
		visitor: ["typeName", "typeParameters"],
		fields: {
			typeName: (0, _utils$1.validateType)("TSEntityName"),
			["typeParameters"]: (0, _utils$1.validateOptionalType)("TSTypeParameterInstantiation")
		}
	});
	defineType("TSTypePredicate", {
		aliases: ["TSType"],
		visitor: ["parameterName", "typeAnnotation"],
		builder: [
			"parameterName",
			"typeAnnotation",
			"asserts"
		],
		fields: {
			parameterName: (0, _utils$1.validateType)("Identifier", "TSThisType"),
			typeAnnotation: (0, _utils$1.validateOptionalType)("TSTypeAnnotation"),
			asserts: (0, _utils$1.validateOptional)(bool)
		}
	});
	defineType("TSTypeQuery", {
		aliases: ["TSType"],
		visitor: ["exprName", "typeParameters"],
		fields: {
			exprName: (0, _utils$1.validateType)("TSEntityName", "TSImportType"),
			["typeParameters"]: (0, _utils$1.validateOptionalType)("TSTypeParameterInstantiation")
		}
	});
	defineType("TSTypeLiteral", {
		aliases: ["TSType"],
		visitor: ["members"],
		fields: { members: (0, _utils$1.validateArrayOfType)("TSTypeElement") }
	});
	defineType("TSArrayType", {
		aliases: ["TSType"],
		visitor: ["elementType"],
		fields: { elementType: (0, _utils$1.validateType)("TSType") }
	});
	defineType("TSTupleType", {
		aliases: ["TSType"],
		visitor: ["elementTypes"],
		fields: { elementTypes: (0, _utils$1.validateArrayOfType)("TSType", "TSNamedTupleMember") }
	});
	defineType("TSOptionalType", {
		aliases: ["TSType"],
		visitor: ["typeAnnotation"],
		fields: { typeAnnotation: (0, _utils$1.validateType)("TSType") }
	});
	defineType("TSRestType", {
		aliases: ["TSType"],
		visitor: ["typeAnnotation"],
		fields: { typeAnnotation: (0, _utils$1.validateType)("TSType") }
	});
	defineType("TSNamedTupleMember", {
		visitor: ["label", "elementType"],
		builder: [
			"label",
			"elementType",
			"optional"
		],
		fields: {
			label: (0, _utils$1.validateType)("Identifier"),
			optional: {
				validate: bool,
				default: false
			},
			elementType: (0, _utils$1.validateType)("TSType")
		}
	});
	const unionOrIntersection = {
		aliases: ["TSType"],
		visitor: ["types"],
		fields: { types: (0, _utils$1.validateArrayOfType)("TSType") }
	};
	defineType("TSUnionType", unionOrIntersection);
	defineType("TSIntersectionType", unionOrIntersection);
	defineType("TSConditionalType", {
		aliases: ["TSType"],
		visitor: [
			"checkType",
			"extendsType",
			"trueType",
			"falseType"
		],
		fields: {
			checkType: (0, _utils$1.validateType)("TSType"),
			extendsType: (0, _utils$1.validateType)("TSType"),
			trueType: (0, _utils$1.validateType)("TSType"),
			falseType: (0, _utils$1.validateType)("TSType")
		}
	});
	defineType("TSInferType", {
		aliases: ["TSType"],
		visitor: ["typeParameter"],
		fields: { typeParameter: (0, _utils$1.validateType)("TSTypeParameter") }
	});
	defineType("TSParenthesizedType", {
		aliases: ["TSType"],
		visitor: ["typeAnnotation"],
		fields: { typeAnnotation: (0, _utils$1.validateType)("TSType") }
	});
	defineType("TSTypeOperator", {
		aliases: ["TSType"],
		visitor: ["typeAnnotation"],
		fields: {
			operator: (0, _utils$1.validate)((0, _utils$1.assertValueType)("string")),
			typeAnnotation: (0, _utils$1.validateType)("TSType")
		}
	});
	defineType("TSIndexedAccessType", {
		aliases: ["TSType"],
		visitor: ["objectType", "indexType"],
		fields: {
			objectType: (0, _utils$1.validateType)("TSType"),
			indexType: (0, _utils$1.validateType)("TSType")
		}
	});
	defineType("TSMappedType", {
		aliases: ["TSType"],
		visitor: [
			"typeParameter",
			"nameType",
			"typeAnnotation"
		],
		builder: [
			"typeParameter",
			"typeAnnotation",
			"nameType"
		],
		fields: Object.assign({}, { typeParameter: (0, _utils$1.validateType)("TSTypeParameter") }, {
			readonly: (0, _utils$1.validateOptional)((0, _utils$1.assertOneOf)(true, false, "+", "-")),
			optional: (0, _utils$1.validateOptional)((0, _utils$1.assertOneOf)(true, false, "+", "-")),
			typeAnnotation: (0, _utils$1.validateOptionalType)("TSType"),
			nameType: (0, _utils$1.validateOptionalType)("TSType")
		})
	});
	defineType("TSTemplateLiteralType", {
		aliases: ["TSType", "TSBaseType"],
		visitor: ["quasis", "types"],
		fields: {
			quasis: (0, _utils$1.validateArrayOfType)("TemplateElement"),
			types: { validate: (0, _utils$1.chain)((0, _utils$1.assertValueType)("array"), (0, _utils$1.assertEach)((0, _utils$1.assertNodeType)("TSType")), function(node, key, val) {
				if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of types.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
			}) }
		}
	});
	defineType("TSLiteralType", {
		aliases: ["TSType", "TSBaseType"],
		visitor: ["literal"],
		fields: { literal: { validate: function() {
			const unaryExpression$3 = (0, _utils$1.assertNodeType)("NumericLiteral", "BigIntLiteral");
			const unaryOperator = (0, _utils$1.assertOneOf)("-");
			const literal = (0, _utils$1.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
			function validator(parent, key, node) {
				if ((0, _is$2.default)("UnaryExpression", node)) {
					unaryOperator(node, "operator", node.operator);
					unaryExpression$3(node, "argument", node.argument);
				} else literal(parent, key, node);
			}
			validator.oneOfNodeTypes = [
				"NumericLiteral",
				"StringLiteral",
				"BooleanLiteral",
				"BigIntLiteral",
				"TemplateLiteral",
				"UnaryExpression"
			];
			return validator;
		}() } }
	});
	defineType("TSExpressionWithTypeArguments", {
		aliases: ["TSType"],
		visitor: ["expression", "typeParameters"],
		fields: {
			expression: (0, _utils$1.validateType)("TSEntityName"),
			typeParameters: (0, _utils$1.validateOptionalType)("TSTypeParameterInstantiation")
		}
	});
	defineType("TSInterfaceDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: [
			"id",
			"typeParameters",
			"extends",
			"body"
		],
		fields: {
			declare: (0, _utils$1.validateOptional)(bool),
			id: (0, _utils$1.validateType)("Identifier"),
			typeParameters: (0, _utils$1.validateOptionalType)("TSTypeParameterDeclaration"),
			extends: (0, _utils$1.validateOptional)((0, _utils$1.arrayOfType)("TSExpressionWithTypeArguments")),
			body: (0, _utils$1.validateType)("TSInterfaceBody")
		}
	});
	defineType("TSInterfaceBody", {
		visitor: ["body"],
		fields: { body: (0, _utils$1.validateArrayOfType)("TSTypeElement") }
	});
	defineType("TSTypeAliasDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: [
			"id",
			"typeParameters",
			"typeAnnotation"
		],
		fields: {
			declare: (0, _utils$1.validateOptional)(bool),
			id: (0, _utils$1.validateType)("Identifier"),
			typeParameters: (0, _utils$1.validateOptionalType)("TSTypeParameterDeclaration"),
			typeAnnotation: (0, _utils$1.validateType)("TSType")
		}
	});
	defineType("TSInstantiationExpression", {
		aliases: ["Expression"],
		visitor: ["expression", "typeParameters"],
		fields: {
			expression: (0, _utils$1.validateType)("Expression"),
			["typeParameters"]: (0, _utils$1.validateOptionalType)("TSTypeParameterInstantiation")
		}
	});
	const TSTypeExpression$1 = {
		aliases: [
			"Expression",
			"LVal",
			"PatternLike"
		],
		visitor: ["expression", "typeAnnotation"],
		fields: {
			expression: (0, _utils$1.validateType)("Expression"),
			typeAnnotation: (0, _utils$1.validateType)("TSType")
		}
	};
	defineType("TSAsExpression", TSTypeExpression$1);
	defineType("TSSatisfiesExpression", TSTypeExpression$1);
	defineType("TSTypeAssertion", {
		aliases: [
			"Expression",
			"LVal",
			"PatternLike"
		],
		visitor: ["typeAnnotation", "expression"],
		fields: {
			typeAnnotation: (0, _utils$1.validateType)("TSType"),
			expression: (0, _utils$1.validateType)("Expression")
		}
	});
	defineType("TSEnumBody", {
		visitor: ["members"],
		fields: { members: (0, _utils$1.validateArrayOfType)("TSEnumMember") }
	});
	defineType("TSEnumDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: ["id", "members"],
		fields: {
			declare: (0, _utils$1.validateOptional)(bool),
			const: (0, _utils$1.validateOptional)(bool),
			id: (0, _utils$1.validateType)("Identifier"),
			members: (0, _utils$1.validateArrayOfType)("TSEnumMember"),
			initializer: (0, _utils$1.validateOptionalType)("Expression"),
			body: (0, _utils$1.validateOptionalType)("TSEnumBody")
		}
	});
	defineType("TSEnumMember", {
		visitor: ["id", "initializer"],
		fields: {
			id: (0, _utils$1.validateType)("Identifier", "StringLiteral"),
			initializer: (0, _utils$1.validateOptionalType)("Expression")
		}
	});
	defineType("TSModuleDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: ["id", "body"],
		fields: Object.assign({
			kind: { validate: (0, _utils$1.assertOneOf)("global", "module", "namespace") },
			declare: (0, _utils$1.validateOptional)(bool)
		}, { global: (0, _utils$1.validateOptional)(bool) }, {
			id: (0, _utils$1.validateType)("Identifier", "StringLiteral"),
			body: (0, _utils$1.validateType)("TSModuleBlock", "TSModuleDeclaration")
		})
	});
	defineType("TSModuleBlock", {
		aliases: [
			"Scopable",
			"Block",
			"BlockParent",
			"FunctionParent"
		],
		visitor: ["body"],
		fields: { body: (0, _utils$1.validateArrayOfType)("Statement") }
	});
	defineType("TSImportType", {
		aliases: ["TSType"],
		builder: [
			"argument",
			"qualifier",
			"typeParameters"
		],
		visitor: [
			"argument",
			"options",
			"qualifier",
			"typeParameters"
		],
		fields: {
			argument: (0, _utils$1.validateType)("StringLiteral"),
			qualifier: (0, _utils$1.validateOptionalType)("TSEntityName"),
			["typeParameters"]: (0, _utils$1.validateOptionalType)("TSTypeParameterInstantiation"),
			options: {
				validate: (0, _utils$1.assertNodeType)("Expression"),
				optional: true
			}
		}
	});
	defineType("TSImportEqualsDeclaration", {
		aliases: ["Statement", "Declaration"],
		visitor: ["id", "moduleReference"],
		fields: Object.assign({}, { isExport: (0, _utils$1.validate)(bool) }, {
			id: (0, _utils$1.validateType)("Identifier"),
			moduleReference: (0, _utils$1.validateType)("TSEntityName", "TSExternalModuleReference"),
			importKind: {
				validate: (0, _utils$1.assertOneOf)("type", "value"),
				optional: true
			}
		})
	});
	defineType("TSExternalModuleReference", {
		visitor: ["expression"],
		fields: { expression: (0, _utils$1.validateType)("StringLiteral") }
	});
	defineType("TSNonNullExpression", {
		aliases: [
			"Expression",
			"LVal",
			"PatternLike"
		],
		visitor: ["expression"],
		fields: { expression: (0, _utils$1.validateType)("Expression") }
	});
	defineType("TSExportAssignment", {
		aliases: ["Statement"],
		visitor: ["expression"],
		fields: { expression: (0, _utils$1.validateType)("Expression") }
	});
	defineType("TSNamespaceExportDeclaration", {
		aliases: ["Statement"],
		visitor: ["id"],
		fields: { id: (0, _utils$1.validateType)("Identifier") }
	});
	defineType("TSTypeAnnotation", {
		visitor: ["typeAnnotation"],
		fields: { typeAnnotation: { validate: (0, _utils$1.assertNodeType)("TSType") } }
	});
	defineType("TSTypeParameterInstantiation", {
		visitor: ["params"],
		fields: { params: (0, _utils$1.validateArrayOfType)("TSType") }
	});
	defineType("TSTypeParameterDeclaration", {
		visitor: ["params"],
		fields: { params: (0, _utils$1.validateArrayOfType)("TSTypeParameter") }
	});
	defineType("TSTypeParameter", {
		builder: [
			"constraint",
			"default",
			"name"
		],
		visitor: ["constraint", "default"],
		fields: {
			name: { validate: (0, _utils$1.assertValueType)("string") },
			in: {
				validate: (0, _utils$1.assertValueType)("boolean"),
				optional: true
			},
			out: {
				validate: (0, _utils$1.assertValueType)("boolean"),
				optional: true
			},
			const: {
				validate: (0, _utils$1.assertValueType)("boolean"),
				optional: true
			},
			constraint: {
				validate: (0, _utils$1.assertNodeType)("TSType"),
				optional: true
			},
			default: {
				validate: (0, _utils$1.assertNodeType)("TSType"),
				optional: true
			}
		}
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/deprecated-aliases.js
var require_deprecated_aliases = __commonJS({ "node_modules/@babel/types/lib/definitions/deprecated-aliases.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DEPRECATED_ALIASES = void 0;
	const DEPRECATED_ALIASES$1 = exports.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
} });

//#endregion
//#region node_modules/@babel/types/lib/definitions/index.js
var require_definitions = __commonJS({ "node_modules/@babel/types/lib/definitions/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	Object.defineProperty(exports, "ALIAS_KEYS", {
		enumerable: true,
		get: function() {
			return _utils.ALIAS_KEYS;
		}
	});
	Object.defineProperty(exports, "BUILDER_KEYS", {
		enumerable: true,
		get: function() {
			return _utils.BUILDER_KEYS;
		}
	});
	Object.defineProperty(exports, "DEPRECATED_ALIASES", {
		enumerable: true,
		get: function() {
			return _deprecatedAliases.DEPRECATED_ALIASES;
		}
	});
	Object.defineProperty(exports, "DEPRECATED_KEYS", {
		enumerable: true,
		get: function() {
			return _utils.DEPRECATED_KEYS;
		}
	});
	Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
		enumerable: true,
		get: function() {
			return _utils.FLIPPED_ALIAS_KEYS;
		}
	});
	Object.defineProperty(exports, "NODE_FIELDS", {
		enumerable: true,
		get: function() {
			return _utils.NODE_FIELDS;
		}
	});
	Object.defineProperty(exports, "NODE_PARENT_VALIDATIONS", {
		enumerable: true,
		get: function() {
			return _utils.NODE_PARENT_VALIDATIONS;
		}
	});
	Object.defineProperty(exports, "PLACEHOLDERS", {
		enumerable: true,
		get: function() {
			return _placeholders.PLACEHOLDERS;
		}
	});
	Object.defineProperty(exports, "PLACEHOLDERS_ALIAS", {
		enumerable: true,
		get: function() {
			return _placeholders.PLACEHOLDERS_ALIAS;
		}
	});
	Object.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", {
		enumerable: true,
		get: function() {
			return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
		}
	});
	exports.TYPES = void 0;
	Object.defineProperty(exports, "VISITOR_KEYS", {
		enumerable: true,
		get: function() {
			return _utils.VISITOR_KEYS;
		}
	});
	require_core();
	require_flow$1();
	require_jsx$1();
	require_misc();
	require_experimental();
	require_typescript$1();
	var _utils = require_utils$1();
	var _placeholders = require_placeholders();
	var _deprecatedAliases = require_deprecated_aliases();
	Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
		_utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
	});
	for (const { types: types$7, set } of _utils.allExpandedTypes) for (const type of types$7) {
		const aliases = _utils.FLIPPED_ALIAS_KEYS[type];
		if (aliases) aliases.forEach(set.add, set);
		else set.add(type);
	}
	const TYPES$1 = exports.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/validate.js
var require_validate = __commonJS({ "node_modules/@babel/types/lib/validators/validate.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = validate$5;
	exports.validateChild = validateChild;
	exports.validateField = validateField;
	exports.validateInternal = validateInternal;
	var _index$50 = require_definitions();
	function validate$5(node, key, val) {
		if (!node) return;
		const fields = _index$50.NODE_FIELDS[node.type];
		if (!fields) return;
		const field = fields[key];
		validateField(node, key, val, field);
		validateChild(node, key, val);
	}
	function validateInternal(field, node, key, val, maybeNode) {
		if (!(field != null && field.validate)) return;
		if (field.optional && val == null) return;
		field.validate(node, key, val);
		if (maybeNode) {
			var _NODE_PARENT_VALIDATI;
			const type = val.type;
			if (type == null) return;
			(_NODE_PARENT_VALIDATI = _index$50.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index$50.NODE_PARENT_VALIDATIONS, node, key, val);
		}
	}
	function validateField(node, key, val, field) {
		if (!(field != null && field.validate)) return;
		if (field.optional && val == null) return;
		field.validate(node, key, val);
	}
	function validateChild(node, key, val) {
		var _NODE_PARENT_VALIDATI2;
		const type = val == null ? void 0 : val.type;
		if (type == null) return;
		(_NODE_PARENT_VALIDATI2 = _index$50.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index$50.NODE_PARENT_VALIDATIONS, node, key, val);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/generated/lowercase.js
var require_lowercase = __commonJS({ "node_modules/@babel/types/lib/builders/generated/lowercase.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.anyTypeAnnotation = anyTypeAnnotation$2;
	exports.argumentPlaceholder = argumentPlaceholder;
	exports.arrayExpression = arrayExpression;
	exports.arrayPattern = arrayPattern;
	exports.arrayTypeAnnotation = arrayTypeAnnotation$1;
	exports.arrowFunctionExpression = arrowFunctionExpression$3;
	exports.assignmentExpression = assignmentExpression$4;
	exports.assignmentPattern = assignmentPattern;
	exports.awaitExpression = awaitExpression$1;
	exports.bigIntLiteral = bigIntLiteral;
	exports.binaryExpression = binaryExpression$1;
	exports.bindExpression = bindExpression;
	exports.blockStatement = blockStatement$4;
	exports.booleanLiteral = booleanLiteral;
	exports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
	exports.booleanTypeAnnotation = booleanTypeAnnotation$1;
	exports.breakStatement = breakStatement;
	exports.callExpression = callExpression$4;
	exports.catchClause = catchClause;
	exports.classAccessorProperty = classAccessorProperty;
	exports.classBody = classBody;
	exports.classDeclaration = classDeclaration;
	exports.classExpression = classExpression;
	exports.classImplements = classImplements;
	exports.classMethod = classMethod;
	exports.classPrivateMethod = classPrivateMethod;
	exports.classPrivateProperty = classPrivateProperty;
	exports.classProperty = classProperty;
	exports.conditionalExpression = conditionalExpression$2;
	exports.continueStatement = continueStatement;
	exports.debuggerStatement = debuggerStatement;
	exports.decimalLiteral = decimalLiteral;
	exports.declareClass = declareClass;
	exports.declareExportAllDeclaration = declareExportAllDeclaration;
	exports.declareExportDeclaration = declareExportDeclaration;
	exports.declareFunction = declareFunction;
	exports.declareInterface = declareInterface;
	exports.declareModule = declareModule;
	exports.declareModuleExports = declareModuleExports;
	exports.declareOpaqueType = declareOpaqueType;
	exports.declareTypeAlias = declareTypeAlias;
	exports.declareVariable = declareVariable;
	exports.declaredPredicate = declaredPredicate;
	exports.decorator = decorator;
	exports.directive = directive;
	exports.directiveLiteral = directiveLiteral;
	exports.doExpression = doExpression;
	exports.doWhileStatement = doWhileStatement;
	exports.emptyStatement = emptyStatement$1;
	exports.emptyTypeAnnotation = emptyTypeAnnotation;
	exports.enumBooleanBody = enumBooleanBody;
	exports.enumBooleanMember = enumBooleanMember;
	exports.enumDeclaration = enumDeclaration;
	exports.enumDefaultedMember = enumDefaultedMember;
	exports.enumNumberBody = enumNumberBody;
	exports.enumNumberMember = enumNumberMember;
	exports.enumStringBody = enumStringBody;
	exports.enumStringMember = enumStringMember;
	exports.enumSymbolBody = enumSymbolBody;
	exports.existsTypeAnnotation = existsTypeAnnotation;
	exports.exportAllDeclaration = exportAllDeclaration;
	exports.exportDefaultDeclaration = exportDefaultDeclaration;
	exports.exportDefaultSpecifier = exportDefaultSpecifier;
	exports.exportNamedDeclaration = exportNamedDeclaration$1;
	exports.exportNamespaceSpecifier = exportNamespaceSpecifier;
	exports.exportSpecifier = exportSpecifier$1;
	exports.expressionStatement = expressionStatement$5;
	exports.file = file;
	exports.forInStatement = forInStatement;
	exports.forOfStatement = forOfStatement;
	exports.forStatement = forStatement;
	exports.functionDeclaration = functionDeclaration;
	exports.functionExpression = functionExpression;
	exports.functionTypeAnnotation = functionTypeAnnotation;
	exports.functionTypeParam = functionTypeParam;
	exports.genericTypeAnnotation = genericTypeAnnotation$1;
	exports.identifier = identifier$5;
	exports.ifStatement = ifStatement;
	exports.import = _import;
	exports.importAttribute = importAttribute;
	exports.importDeclaration = importDeclaration;
	exports.importDefaultSpecifier = importDefaultSpecifier;
	exports.importExpression = importExpression;
	exports.importNamespaceSpecifier = importNamespaceSpecifier;
	exports.importSpecifier = importSpecifier;
	exports.indexedAccessType = indexedAccessType;
	exports.inferredPredicate = inferredPredicate;
	exports.interfaceDeclaration = interfaceDeclaration;
	exports.interfaceExtends = interfaceExtends;
	exports.interfaceTypeAnnotation = interfaceTypeAnnotation;
	exports.interpreterDirective = interpreterDirective;
	exports.intersectionTypeAnnotation = intersectionTypeAnnotation;
	exports.jSXAttribute = exports.jsxAttribute = jsxAttribute;
	exports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;
	exports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;
	exports.jSXElement = exports.jsxElement = jsxElement;
	exports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;
	exports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer$1;
	exports.jSXFragment = exports.jsxFragment = jsxFragment;
	exports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier$1;
	exports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;
	exports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;
	exports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;
	exports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;
	exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;
	exports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;
	exports.jSXText = exports.jsxText = jsxText;
	exports.labeledStatement = labeledStatement;
	exports.logicalExpression = logicalExpression$1;
	exports.memberExpression = memberExpression$2;
	exports.metaProperty = metaProperty$1;
	exports.mixedTypeAnnotation = mixedTypeAnnotation;
	exports.moduleExpression = moduleExpression;
	exports.newExpression = newExpression;
	exports.noop = noop;
	exports.nullLiteral = nullLiteral;
	exports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation$1;
	exports.nullableTypeAnnotation = nullableTypeAnnotation;
	exports.numberLiteral = NumberLiteral;
	exports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
	exports.numberTypeAnnotation = numberTypeAnnotation$2;
	exports.numericLiteral = numericLiteral$3;
	exports.objectExpression = objectExpression$1;
	exports.objectMethod = objectMethod;
	exports.objectPattern = objectPattern;
	exports.objectProperty = objectProperty;
	exports.objectTypeAnnotation = objectTypeAnnotation;
	exports.objectTypeCallProperty = objectTypeCallProperty;
	exports.objectTypeIndexer = objectTypeIndexer;
	exports.objectTypeInternalSlot = objectTypeInternalSlot;
	exports.objectTypeProperty = objectTypeProperty;
	exports.objectTypeSpreadProperty = objectTypeSpreadProperty;
	exports.opaqueType = opaqueType;
	exports.optionalCallExpression = optionalCallExpression;
	exports.optionalIndexedAccessType = optionalIndexedAccessType;
	exports.optionalMemberExpression = optionalMemberExpression;
	exports.parenthesizedExpression = parenthesizedExpression;
	exports.pipelineBareFunction = pipelineBareFunction;
	exports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
	exports.pipelineTopicExpression = pipelineTopicExpression;
	exports.placeholder = placeholder;
	exports.privateName = privateName;
	exports.program = program$2;
	exports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
	exports.recordExpression = recordExpression;
	exports.regExpLiteral = regExpLiteral;
	exports.regexLiteral = RegexLiteral;
	exports.restElement = restElement$1;
	exports.restProperty = RestProperty;
	exports.returnStatement = returnStatement$2;
	exports.sequenceExpression = sequenceExpression$3;
	exports.spreadElement = spreadElement$1;
	exports.spreadProperty = SpreadProperty;
	exports.staticBlock = staticBlock;
	exports.stringLiteral = stringLiteral$2;
	exports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
	exports.stringTypeAnnotation = stringTypeAnnotation$2;
	exports.super = _super$1;
	exports.switchCase = switchCase;
	exports.switchStatement = switchStatement;
	exports.symbolTypeAnnotation = symbolTypeAnnotation;
	exports.taggedTemplateExpression = taggedTemplateExpression;
	exports.templateElement = templateElement;
	exports.templateLiteral = templateLiteral;
	exports.thisExpression = thisExpression$2;
	exports.thisTypeAnnotation = thisTypeAnnotation;
	exports.throwStatement = throwStatement;
	exports.topicReference = topicReference;
	exports.tryStatement = tryStatement;
	exports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;
	exports.tSArrayType = exports.tsArrayType = tsArrayType;
	exports.tSAsExpression = exports.tsAsExpression = tsAsExpression;
	exports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;
	exports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;
	exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
	exports.tSConditionalType = exports.tsConditionalType = tsConditionalType;
	exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
	exports.tSConstructorType = exports.tsConstructorType = tsConstructorType;
	exports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;
	exports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;
	exports.tSEnumBody = exports.tsEnumBody = tsEnumBody;
	exports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;
	exports.tSEnumMember = exports.tsEnumMember = tsEnumMember;
	exports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;
	exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
	exports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;
	exports.tSFunctionType = exports.tsFunctionType = tsFunctionType;
	exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
	exports.tSImportType = exports.tsImportType = tsImportType;
	exports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;
	exports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;
	exports.tSInferType = exports.tsInferType = tsInferType;
	exports.tSInstantiationExpression = exports.tsInstantiationExpression = tsInstantiationExpression;
	exports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;
	exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;
	exports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;
	exports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;
	exports.tSLiteralType = exports.tsLiteralType = tsLiteralType;
	exports.tSMappedType = exports.tsMappedType = tsMappedType;
	exports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;
	exports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;
	exports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;
	exports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;
	exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
	exports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;
	exports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;
	exports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;
	exports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;
	exports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;
	exports.tSOptionalType = exports.tsOptionalType = tsOptionalType;
	exports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;
	exports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;
	exports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;
	exports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;
	exports.tSRestType = exports.tsRestType = tsRestType;
	exports.tSSatisfiesExpression = exports.tsSatisfiesExpression = tsSatisfiesExpression;
	exports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;
	exports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;
	exports.tSTemplateLiteralType = exports.tsTemplateLiteralType = tsTemplateLiteralType;
	exports.tSThisType = exports.tsThisType = tsThisType;
	exports.tSTupleType = exports.tsTupleType = tsTupleType;
	exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
	exports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;
	exports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;
	exports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;
	exports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;
	exports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;
	exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
	exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
	exports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;
	exports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;
	exports.tSTypeReference = exports.tsTypeReference = tsTypeReference;
	exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;
	exports.tSUnionType = exports.tsUnionType = tsUnionType;
	exports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;
	exports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;
	exports.tupleExpression = tupleExpression;
	exports.tupleTypeAnnotation = tupleTypeAnnotation$1;
	exports.typeAlias = typeAlias;
	exports.typeAnnotation = typeAnnotation;
	exports.typeCastExpression = typeCastExpression;
	exports.typeParameter = typeParameter;
	exports.typeParameterDeclaration = typeParameterDeclaration;
	exports.typeParameterInstantiation = typeParameterInstantiation;
	exports.typeofTypeAnnotation = typeofTypeAnnotation;
	exports.unaryExpression = unaryExpression$2;
	exports.unionTypeAnnotation = unionTypeAnnotation$1;
	exports.updateExpression = updateExpression;
	exports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
	exports.variableDeclaration = variableDeclaration$3;
	exports.variableDeclarator = variableDeclarator$3;
	exports.variance = variance;
	exports.voidTypeAnnotation = voidTypeAnnotation$3;
	exports.whileStatement = whileStatement;
	exports.withStatement = withStatement;
	exports.yieldExpression = yieldExpression$1;
	var _validate$1 = require_validate();
	var _deprecationWarning$2 = require_deprecationWarning();
	var utils$3 = require_utils$1();
	const { validateInternal: validate$4 } = _validate$1;
	const { NODE_FIELDS } = utils$3;
	function arrayExpression(elements = []) {
		const node = {
			type: "ArrayExpression",
			elements
		};
		const defs = NODE_FIELDS.ArrayExpression;
		validate$4(defs.elements, node, "elements", elements, 1);
		return node;
	}
	function assignmentExpression$4(operator$1, left, right) {
		const node = {
			type: "AssignmentExpression",
			operator: operator$1,
			left,
			right
		};
		const defs = NODE_FIELDS.AssignmentExpression;
		validate$4(defs.operator, node, "operator", operator$1);
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function binaryExpression$1(operator$1, left, right) {
		const node = {
			type: "BinaryExpression",
			operator: operator$1,
			left,
			right
		};
		const defs = NODE_FIELDS.BinaryExpression;
		validate$4(defs.operator, node, "operator", operator$1);
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function interpreterDirective(value) {
		const node = {
			type: "InterpreterDirective",
			value
		};
		const defs = NODE_FIELDS.InterpreterDirective;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function directive(value) {
		const node = {
			type: "Directive",
			value
		};
		const defs = NODE_FIELDS.Directive;
		validate$4(defs.value, node, "value", value, 1);
		return node;
	}
	function directiveLiteral(value) {
		const node = {
			type: "DirectiveLiteral",
			value
		};
		const defs = NODE_FIELDS.DirectiveLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function blockStatement$4(body, directives = []) {
		const node = {
			type: "BlockStatement",
			body,
			directives
		};
		const defs = NODE_FIELDS.BlockStatement;
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.directives, node, "directives", directives, 1);
		return node;
	}
	function breakStatement(label = null) {
		const node = {
			type: "BreakStatement",
			label
		};
		const defs = NODE_FIELDS.BreakStatement;
		validate$4(defs.label, node, "label", label, 1);
		return node;
	}
	function callExpression$4(callee, _arguments) {
		const node = {
			type: "CallExpression",
			callee,
			arguments: _arguments
		};
		const defs = NODE_FIELDS.CallExpression;
		validate$4(defs.callee, node, "callee", callee, 1);
		validate$4(defs.arguments, node, "arguments", _arguments, 1);
		return node;
	}
	function catchClause(param = null, body) {
		const node = {
			type: "CatchClause",
			param,
			body
		};
		const defs = NODE_FIELDS.CatchClause;
		validate$4(defs.param, node, "param", param, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function conditionalExpression$2(test, consequent, alternate) {
		const node = {
			type: "ConditionalExpression",
			test,
			consequent,
			alternate
		};
		const defs = NODE_FIELDS.ConditionalExpression;
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.consequent, node, "consequent", consequent, 1);
		validate$4(defs.alternate, node, "alternate", alternate, 1);
		return node;
	}
	function continueStatement(label = null) {
		const node = {
			type: "ContinueStatement",
			label
		};
		const defs = NODE_FIELDS.ContinueStatement;
		validate$4(defs.label, node, "label", label, 1);
		return node;
	}
	function debuggerStatement() {
		return { type: "DebuggerStatement" };
	}
	function doWhileStatement(test, body) {
		const node = {
			type: "DoWhileStatement",
			test,
			body
		};
		const defs = NODE_FIELDS.DoWhileStatement;
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function emptyStatement$1() {
		return { type: "EmptyStatement" };
	}
	function expressionStatement$5(expression$2) {
		const node = {
			type: "ExpressionStatement",
			expression: expression$2
		};
		const defs = NODE_FIELDS.ExpressionStatement;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function file(program$3, comments = null, tokens$3 = null) {
		const node = {
			type: "File",
			program: program$3,
			comments,
			tokens: tokens$3
		};
		const defs = NODE_FIELDS.File;
		validate$4(defs.program, node, "program", program$3, 1);
		validate$4(defs.comments, node, "comments", comments, 1);
		validate$4(defs.tokens, node, "tokens", tokens$3);
		return node;
	}
	function forInStatement(left, right, body) {
		const node = {
			type: "ForInStatement",
			left,
			right,
			body
		};
		const defs = NODE_FIELDS.ForInStatement;
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function forStatement(init$1 = null, test = null, update = null, body) {
		const node = {
			type: "ForStatement",
			init: init$1,
			test,
			update,
			body
		};
		const defs = NODE_FIELDS.ForStatement;
		validate$4(defs.init, node, "init", init$1, 1);
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.update, node, "update", update, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function functionDeclaration(id$4 = null, params, body, generator$1 = false, async$1 = false) {
		const node = {
			type: "FunctionDeclaration",
			id: id$4,
			params,
			body,
			generator: generator$1,
			async: async$1
		};
		const defs = NODE_FIELDS.FunctionDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.generator, node, "generator", generator$1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function functionExpression(id$4 = null, params, body, generator$1 = false, async$1 = false) {
		const node = {
			type: "FunctionExpression",
			id: id$4,
			params,
			body,
			generator: generator$1,
			async: async$1
		};
		const defs = NODE_FIELDS.FunctionExpression;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.generator, node, "generator", generator$1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function identifier$5(name) {
		const node = {
			type: "Identifier",
			name
		};
		const defs = NODE_FIELDS.Identifier;
		validate$4(defs.name, node, "name", name);
		return node;
	}
	function ifStatement(test, consequent, alternate = null) {
		const node = {
			type: "IfStatement",
			test,
			consequent,
			alternate
		};
		const defs = NODE_FIELDS.IfStatement;
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.consequent, node, "consequent", consequent, 1);
		validate$4(defs.alternate, node, "alternate", alternate, 1);
		return node;
	}
	function labeledStatement(label, body) {
		const node = {
			type: "LabeledStatement",
			label,
			body
		};
		const defs = NODE_FIELDS.LabeledStatement;
		validate$4(defs.label, node, "label", label, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function stringLiteral$2(value) {
		const node = {
			type: "StringLiteral",
			value
		};
		const defs = NODE_FIELDS.StringLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function numericLiteral$3(value) {
		const node = {
			type: "NumericLiteral",
			value
		};
		const defs = NODE_FIELDS.NumericLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function nullLiteral() {
		return { type: "NullLiteral" };
	}
	function booleanLiteral(value) {
		const node = {
			type: "BooleanLiteral",
			value
		};
		const defs = NODE_FIELDS.BooleanLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function regExpLiteral(pattern, flags = "") {
		const node = {
			type: "RegExpLiteral",
			pattern,
			flags
		};
		const defs = NODE_FIELDS.RegExpLiteral;
		validate$4(defs.pattern, node, "pattern", pattern);
		validate$4(defs.flags, node, "flags", flags);
		return node;
	}
	function logicalExpression$1(operator$1, left, right) {
		const node = {
			type: "LogicalExpression",
			operator: operator$1,
			left,
			right
		};
		const defs = NODE_FIELDS.LogicalExpression;
		validate$4(defs.operator, node, "operator", operator$1);
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function memberExpression$2(object$2, property, computed = false, optional = null) {
		const node = {
			type: "MemberExpression",
			object: object$2,
			property,
			computed,
			optional
		};
		const defs = NODE_FIELDS.MemberExpression;
		validate$4(defs.object, node, "object", object$2, 1);
		validate$4(defs.property, node, "property", property, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.optional, node, "optional", optional);
		return node;
	}
	function newExpression(callee, _arguments) {
		const node = {
			type: "NewExpression",
			callee,
			arguments: _arguments
		};
		const defs = NODE_FIELDS.NewExpression;
		validate$4(defs.callee, node, "callee", callee, 1);
		validate$4(defs.arguments, node, "arguments", _arguments, 1);
		return node;
	}
	function program$2(body, directives = [], sourceType = "script", interpreter = null) {
		const node = {
			type: "Program",
			body,
			directives,
			sourceType,
			interpreter
		};
		const defs = NODE_FIELDS.Program;
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.directives, node, "directives", directives, 1);
		validate$4(defs.sourceType, node, "sourceType", sourceType);
		validate$4(defs.interpreter, node, "interpreter", interpreter, 1);
		return node;
	}
	function objectExpression$1(properties) {
		const node = {
			type: "ObjectExpression",
			properties
		};
		const defs = NODE_FIELDS.ObjectExpression;
		validate$4(defs.properties, node, "properties", properties, 1);
		return node;
	}
	function objectMethod(kind = "method", key, params, body, computed = false, generator$1 = false, async$1 = false) {
		const node = {
			type: "ObjectMethod",
			kind,
			key,
			params,
			body,
			computed,
			generator: generator$1,
			async: async$1
		};
		const defs = NODE_FIELDS.ObjectMethod;
		validate$4(defs.kind, node, "kind", kind);
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.generator, node, "generator", generator$1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function objectProperty(key, value, computed = false, shorthand = false, decorators = null) {
		const node = {
			type: "ObjectProperty",
			key,
			value,
			computed,
			shorthand,
			decorators
		};
		const defs = NODE_FIELDS.ObjectProperty;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.shorthand, node, "shorthand", shorthand);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		return node;
	}
	function restElement$1(argument) {
		const node = {
			type: "RestElement",
			argument
		};
		const defs = NODE_FIELDS.RestElement;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function returnStatement$2(argument = null) {
		const node = {
			type: "ReturnStatement",
			argument
		};
		const defs = NODE_FIELDS.ReturnStatement;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function sequenceExpression$3(expressions) {
		const node = {
			type: "SequenceExpression",
			expressions
		};
		const defs = NODE_FIELDS.SequenceExpression;
		validate$4(defs.expressions, node, "expressions", expressions, 1);
		return node;
	}
	function parenthesizedExpression(expression$2) {
		const node = {
			type: "ParenthesizedExpression",
			expression: expression$2
		};
		const defs = NODE_FIELDS.ParenthesizedExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function switchCase(test = null, consequent) {
		const node = {
			type: "SwitchCase",
			test,
			consequent
		};
		const defs = NODE_FIELDS.SwitchCase;
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.consequent, node, "consequent", consequent, 1);
		return node;
	}
	function switchStatement(discriminant, cases) {
		const node = {
			type: "SwitchStatement",
			discriminant,
			cases
		};
		const defs = NODE_FIELDS.SwitchStatement;
		validate$4(defs.discriminant, node, "discriminant", discriminant, 1);
		validate$4(defs.cases, node, "cases", cases, 1);
		return node;
	}
	function thisExpression$2() {
		return { type: "ThisExpression" };
	}
	function throwStatement(argument) {
		const node = {
			type: "ThrowStatement",
			argument
		};
		const defs = NODE_FIELDS.ThrowStatement;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function tryStatement(block, handler = null, finalizer = null) {
		const node = {
			type: "TryStatement",
			block,
			handler,
			finalizer
		};
		const defs = NODE_FIELDS.TryStatement;
		validate$4(defs.block, node, "block", block, 1);
		validate$4(defs.handler, node, "handler", handler, 1);
		validate$4(defs.finalizer, node, "finalizer", finalizer, 1);
		return node;
	}
	function unaryExpression$2(operator$1, argument, prefix$1 = true) {
		const node = {
			type: "UnaryExpression",
			operator: operator$1,
			argument,
			prefix: prefix$1
		};
		const defs = NODE_FIELDS.UnaryExpression;
		validate$4(defs.operator, node, "operator", operator$1);
		validate$4(defs.argument, node, "argument", argument, 1);
		validate$4(defs.prefix, node, "prefix", prefix$1);
		return node;
	}
	function updateExpression(operator$1, argument, prefix$1 = false) {
		const node = {
			type: "UpdateExpression",
			operator: operator$1,
			argument,
			prefix: prefix$1
		};
		const defs = NODE_FIELDS.UpdateExpression;
		validate$4(defs.operator, node, "operator", operator$1);
		validate$4(defs.argument, node, "argument", argument, 1);
		validate$4(defs.prefix, node, "prefix", prefix$1);
		return node;
	}
	function variableDeclaration$3(kind, declarations) {
		const node = {
			type: "VariableDeclaration",
			kind,
			declarations
		};
		const defs = NODE_FIELDS.VariableDeclaration;
		validate$4(defs.kind, node, "kind", kind);
		validate$4(defs.declarations, node, "declarations", declarations, 1);
		return node;
	}
	function variableDeclarator$3(id$4, init$1 = null) {
		const node = {
			type: "VariableDeclarator",
			id: id$4,
			init: init$1
		};
		const defs = NODE_FIELDS.VariableDeclarator;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.init, node, "init", init$1, 1);
		return node;
	}
	function whileStatement(test, body) {
		const node = {
			type: "WhileStatement",
			test,
			body
		};
		const defs = NODE_FIELDS.WhileStatement;
		validate$4(defs.test, node, "test", test, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function withStatement(object$2, body) {
		const node = {
			type: "WithStatement",
			object: object$2,
			body
		};
		const defs = NODE_FIELDS.WithStatement;
		validate$4(defs.object, node, "object", object$2, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function assignmentPattern(left, right) {
		const node = {
			type: "AssignmentPattern",
			left,
			right
		};
		const defs = NODE_FIELDS.AssignmentPattern;
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function arrayPattern(elements) {
		const node = {
			type: "ArrayPattern",
			elements
		};
		const defs = NODE_FIELDS.ArrayPattern;
		validate$4(defs.elements, node, "elements", elements, 1);
		return node;
	}
	function arrowFunctionExpression$3(params, body, async$1 = false) {
		const node = {
			type: "ArrowFunctionExpression",
			params,
			body,
			async: async$1,
			expression: null
		};
		const defs = NODE_FIELDS.ArrowFunctionExpression;
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function classBody(body) {
		const node = {
			type: "ClassBody",
			body
		};
		const defs = NODE_FIELDS.ClassBody;
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function classExpression(id$4 = null, superClass = null, body, decorators = null) {
		const node = {
			type: "ClassExpression",
			id: id$4,
			superClass,
			body,
			decorators
		};
		const defs = NODE_FIELDS.ClassExpression;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.superClass, node, "superClass", superClass, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		return node;
	}
	function classDeclaration(id$4 = null, superClass = null, body, decorators = null) {
		const node = {
			type: "ClassDeclaration",
			id: id$4,
			superClass,
			body,
			decorators
		};
		const defs = NODE_FIELDS.ClassDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.superClass, node, "superClass", superClass, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		return node;
	}
	function exportAllDeclaration(source) {
		const node = {
			type: "ExportAllDeclaration",
			source
		};
		const defs = NODE_FIELDS.ExportAllDeclaration;
		validate$4(defs.source, node, "source", source, 1);
		return node;
	}
	function exportDefaultDeclaration(declaration) {
		const node = {
			type: "ExportDefaultDeclaration",
			declaration
		};
		const defs = NODE_FIELDS.ExportDefaultDeclaration;
		validate$4(defs.declaration, node, "declaration", declaration, 1);
		return node;
	}
	function exportNamedDeclaration$1(declaration = null, specifiers = [], source = null) {
		const node = {
			type: "ExportNamedDeclaration",
			declaration,
			specifiers,
			source
		};
		const defs = NODE_FIELDS.ExportNamedDeclaration;
		validate$4(defs.declaration, node, "declaration", declaration, 1);
		validate$4(defs.specifiers, node, "specifiers", specifiers, 1);
		validate$4(defs.source, node, "source", source, 1);
		return node;
	}
	function exportSpecifier$1(local, exported) {
		const node = {
			type: "ExportSpecifier",
			local,
			exported
		};
		const defs = NODE_FIELDS.ExportSpecifier;
		validate$4(defs.local, node, "local", local, 1);
		validate$4(defs.exported, node, "exported", exported, 1);
		return node;
	}
	function forOfStatement(left, right, body, _await = false) {
		const node = {
			type: "ForOfStatement",
			left,
			right,
			body,
			await: _await
		};
		const defs = NODE_FIELDS.ForOfStatement;
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.await, node, "await", _await);
		return node;
	}
	function importDeclaration(specifiers, source) {
		const node = {
			type: "ImportDeclaration",
			specifiers,
			source
		};
		const defs = NODE_FIELDS.ImportDeclaration;
		validate$4(defs.specifiers, node, "specifiers", specifiers, 1);
		validate$4(defs.source, node, "source", source, 1);
		return node;
	}
	function importDefaultSpecifier(local) {
		const node = {
			type: "ImportDefaultSpecifier",
			local
		};
		const defs = NODE_FIELDS.ImportDefaultSpecifier;
		validate$4(defs.local, node, "local", local, 1);
		return node;
	}
	function importNamespaceSpecifier(local) {
		const node = {
			type: "ImportNamespaceSpecifier",
			local
		};
		const defs = NODE_FIELDS.ImportNamespaceSpecifier;
		validate$4(defs.local, node, "local", local, 1);
		return node;
	}
	function importSpecifier(local, imported) {
		const node = {
			type: "ImportSpecifier",
			local,
			imported
		};
		const defs = NODE_FIELDS.ImportSpecifier;
		validate$4(defs.local, node, "local", local, 1);
		validate$4(defs.imported, node, "imported", imported, 1);
		return node;
	}
	function importExpression(source, options = null) {
		const node = {
			type: "ImportExpression",
			source,
			options
		};
		const defs = NODE_FIELDS.ImportExpression;
		validate$4(defs.source, node, "source", source, 1);
		validate$4(defs.options, node, "options", options, 1);
		return node;
	}
	function metaProperty$1(meta, property) {
		const node = {
			type: "MetaProperty",
			meta,
			property
		};
		const defs = NODE_FIELDS.MetaProperty;
		validate$4(defs.meta, node, "meta", meta, 1);
		validate$4(defs.property, node, "property", property, 1);
		return node;
	}
	function classMethod(kind = "method", key, params, body, computed = false, _static = false, generator$1 = false, async$1 = false) {
		const node = {
			type: "ClassMethod",
			kind,
			key,
			params,
			body,
			computed,
			static: _static,
			generator: generator$1,
			async: async$1
		};
		const defs = NODE_FIELDS.ClassMethod;
		validate$4(defs.kind, node, "kind", kind);
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.static, node, "static", _static);
		validate$4(defs.generator, node, "generator", generator$1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function objectPattern(properties) {
		const node = {
			type: "ObjectPattern",
			properties
		};
		const defs = NODE_FIELDS.ObjectPattern;
		validate$4(defs.properties, node, "properties", properties, 1);
		return node;
	}
	function spreadElement$1(argument) {
		const node = {
			type: "SpreadElement",
			argument
		};
		const defs = NODE_FIELDS.SpreadElement;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function _super$1() {
		return { type: "Super" };
	}
	function taggedTemplateExpression(tag$3, quasi) {
		const node = {
			type: "TaggedTemplateExpression",
			tag: tag$3,
			quasi
		};
		const defs = NODE_FIELDS.TaggedTemplateExpression;
		validate$4(defs.tag, node, "tag", tag$3, 1);
		validate$4(defs.quasi, node, "quasi", quasi, 1);
		return node;
	}
	function templateElement(value, tail = false) {
		const node = {
			type: "TemplateElement",
			value,
			tail
		};
		const defs = NODE_FIELDS.TemplateElement;
		validate$4(defs.value, node, "value", value);
		validate$4(defs.tail, node, "tail", tail);
		return node;
	}
	function templateLiteral(quasis, expressions) {
		const node = {
			type: "TemplateLiteral",
			quasis,
			expressions
		};
		const defs = NODE_FIELDS.TemplateLiteral;
		validate$4(defs.quasis, node, "quasis", quasis, 1);
		validate$4(defs.expressions, node, "expressions", expressions, 1);
		return node;
	}
	function yieldExpression$1(argument = null, delegate = false) {
		const node = {
			type: "YieldExpression",
			argument,
			delegate
		};
		const defs = NODE_FIELDS.YieldExpression;
		validate$4(defs.argument, node, "argument", argument, 1);
		validate$4(defs.delegate, node, "delegate", delegate);
		return node;
	}
	function awaitExpression$1(argument) {
		const node = {
			type: "AwaitExpression",
			argument
		};
		const defs = NODE_FIELDS.AwaitExpression;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function _import() {
		return { type: "Import" };
	}
	function bigIntLiteral(value) {
		const node = {
			type: "BigIntLiteral",
			value
		};
		const defs = NODE_FIELDS.BigIntLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function exportNamespaceSpecifier(exported) {
		const node = {
			type: "ExportNamespaceSpecifier",
			exported
		};
		const defs = NODE_FIELDS.ExportNamespaceSpecifier;
		validate$4(defs.exported, node, "exported", exported, 1);
		return node;
	}
	function optionalMemberExpression(object$2, property, computed = false, optional) {
		const node = {
			type: "OptionalMemberExpression",
			object: object$2,
			property,
			computed,
			optional
		};
		const defs = NODE_FIELDS.OptionalMemberExpression;
		validate$4(defs.object, node, "object", object$2, 1);
		validate$4(defs.property, node, "property", property, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.optional, node, "optional", optional);
		return node;
	}
	function optionalCallExpression(callee, _arguments, optional) {
		const node = {
			type: "OptionalCallExpression",
			callee,
			arguments: _arguments,
			optional
		};
		const defs = NODE_FIELDS.OptionalCallExpression;
		validate$4(defs.callee, node, "callee", callee, 1);
		validate$4(defs.arguments, node, "arguments", _arguments, 1);
		validate$4(defs.optional, node, "optional", optional);
		return node;
	}
	function classProperty(key, value = null, typeAnnotation$1 = null, decorators = null, computed = false, _static = false) {
		const node = {
			type: "ClassProperty",
			key,
			value,
			typeAnnotation: typeAnnotation$1,
			decorators,
			computed,
			static: _static
		};
		const defs = NODE_FIELDS.ClassProperty;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.static, node, "static", _static);
		return node;
	}
	function classAccessorProperty(key, value = null, typeAnnotation$1 = null, decorators = null, computed = false, _static = false) {
		const node = {
			type: "ClassAccessorProperty",
			key,
			value,
			typeAnnotation: typeAnnotation$1,
			decorators,
			computed,
			static: _static
		};
		const defs = NODE_FIELDS.ClassAccessorProperty;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		validate$4(defs.computed, node, "computed", computed);
		validate$4(defs.static, node, "static", _static);
		return node;
	}
	function classPrivateProperty(key, value = null, decorators = null, _static = false) {
		const node = {
			type: "ClassPrivateProperty",
			key,
			value,
			decorators,
			static: _static
		};
		const defs = NODE_FIELDS.ClassPrivateProperty;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		validate$4(defs.static, node, "static", _static);
		return node;
	}
	function classPrivateMethod(kind = "method", key, params, body, _static = false) {
		const node = {
			type: "ClassPrivateMethod",
			kind,
			key,
			params,
			body,
			static: _static
		};
		const defs = NODE_FIELDS.ClassPrivateMethod;
		validate$4(defs.kind, node, "kind", kind);
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.static, node, "static", _static);
		return node;
	}
	function privateName(id$4) {
		const node = {
			type: "PrivateName",
			id: id$4
		};
		const defs = NODE_FIELDS.PrivateName;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function staticBlock(body) {
		const node = {
			type: "StaticBlock",
			body
		};
		const defs = NODE_FIELDS.StaticBlock;
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function importAttribute(key, value) {
		const node = {
			type: "ImportAttribute",
			key,
			value
		};
		const defs = NODE_FIELDS.ImportAttribute;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		return node;
	}
	function anyTypeAnnotation$2() {
		return { type: "AnyTypeAnnotation" };
	}
	function arrayTypeAnnotation$1(elementType) {
		const node = {
			type: "ArrayTypeAnnotation",
			elementType
		};
		const defs = NODE_FIELDS.ArrayTypeAnnotation;
		validate$4(defs.elementType, node, "elementType", elementType, 1);
		return node;
	}
	function booleanTypeAnnotation$1() {
		return { type: "BooleanTypeAnnotation" };
	}
	function booleanLiteralTypeAnnotation(value) {
		const node = {
			type: "BooleanLiteralTypeAnnotation",
			value
		};
		const defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function nullLiteralTypeAnnotation$1() {
		return { type: "NullLiteralTypeAnnotation" };
	}
	function classImplements(id$4, typeParameters = null) {
		const node = {
			type: "ClassImplements",
			id: id$4,
			typeParameters
		};
		const defs = NODE_FIELDS.ClassImplements;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function declareClass(id$4, typeParameters = null, _extends = null, body) {
		const node = {
			type: "DeclareClass",
			id: id$4,
			typeParameters,
			extends: _extends,
			body
		};
		const defs = NODE_FIELDS.DeclareClass;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.extends, node, "extends", _extends, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function declareFunction(id$4) {
		const node = {
			type: "DeclareFunction",
			id: id$4
		};
		const defs = NODE_FIELDS.DeclareFunction;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function declareInterface(id$4, typeParameters = null, _extends = null, body) {
		const node = {
			type: "DeclareInterface",
			id: id$4,
			typeParameters,
			extends: _extends,
			body
		};
		const defs = NODE_FIELDS.DeclareInterface;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.extends, node, "extends", _extends, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function declareModule(id$4, body, kind = null) {
		const node = {
			type: "DeclareModule",
			id: id$4,
			body,
			kind
		};
		const defs = NODE_FIELDS.DeclareModule;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.kind, node, "kind", kind);
		return node;
	}
	function declareModuleExports(typeAnnotation$1) {
		const node = {
			type: "DeclareModuleExports",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.DeclareModuleExports;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function declareTypeAlias(id$4, typeParameters = null, right) {
		const node = {
			type: "DeclareTypeAlias",
			id: id$4,
			typeParameters,
			right
		};
		const defs = NODE_FIELDS.DeclareTypeAlias;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function declareOpaqueType(id$4, typeParameters = null, supertype = null) {
		const node = {
			type: "DeclareOpaqueType",
			id: id$4,
			typeParameters,
			supertype
		};
		const defs = NODE_FIELDS.DeclareOpaqueType;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.supertype, node, "supertype", supertype, 1);
		return node;
	}
	function declareVariable(id$4) {
		const node = {
			type: "DeclareVariable",
			id: id$4
		};
		const defs = NODE_FIELDS.DeclareVariable;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function declareExportDeclaration(declaration = null, specifiers = null, source = null, attributes = null) {
		const node = {
			type: "DeclareExportDeclaration",
			declaration,
			specifiers,
			source,
			attributes
		};
		const defs = NODE_FIELDS.DeclareExportDeclaration;
		validate$4(defs.declaration, node, "declaration", declaration, 1);
		validate$4(defs.specifiers, node, "specifiers", specifiers, 1);
		validate$4(defs.source, node, "source", source, 1);
		validate$4(defs.attributes, node, "attributes", attributes, 1);
		return node;
	}
	function declareExportAllDeclaration(source, attributes = null) {
		const node = {
			type: "DeclareExportAllDeclaration",
			source,
			attributes
		};
		const defs = NODE_FIELDS.DeclareExportAllDeclaration;
		validate$4(defs.source, node, "source", source, 1);
		validate$4(defs.attributes, node, "attributes", attributes, 1);
		return node;
	}
	function declaredPredicate(value) {
		const node = {
			type: "DeclaredPredicate",
			value
		};
		const defs = NODE_FIELDS.DeclaredPredicate;
		validate$4(defs.value, node, "value", value, 1);
		return node;
	}
	function existsTypeAnnotation() {
		return { type: "ExistsTypeAnnotation" };
	}
	function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
		const node = {
			type: "FunctionTypeAnnotation",
			typeParameters,
			params,
			rest,
			returnType
		};
		const defs = NODE_FIELDS.FunctionTypeAnnotation;
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.rest, node, "rest", rest, 1);
		validate$4(defs.returnType, node, "returnType", returnType, 1);
		return node;
	}
	function functionTypeParam(name = null, typeAnnotation$1) {
		const node = {
			type: "FunctionTypeParam",
			name,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.FunctionTypeParam;
		validate$4(defs.name, node, "name", name, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function genericTypeAnnotation$1(id$4, typeParameters = null) {
		const node = {
			type: "GenericTypeAnnotation",
			id: id$4,
			typeParameters
		};
		const defs = NODE_FIELDS.GenericTypeAnnotation;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function inferredPredicate() {
		return { type: "InferredPredicate" };
	}
	function interfaceExtends(id$4, typeParameters = null) {
		const node = {
			type: "InterfaceExtends",
			id: id$4,
			typeParameters
		};
		const defs = NODE_FIELDS.InterfaceExtends;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function interfaceDeclaration(id$4, typeParameters = null, _extends = null, body) {
		const node = {
			type: "InterfaceDeclaration",
			id: id$4,
			typeParameters,
			extends: _extends,
			body
		};
		const defs = NODE_FIELDS.InterfaceDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.extends, node, "extends", _extends, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function interfaceTypeAnnotation(_extends = null, body) {
		const node = {
			type: "InterfaceTypeAnnotation",
			extends: _extends,
			body
		};
		const defs = NODE_FIELDS.InterfaceTypeAnnotation;
		validate$4(defs.extends, node, "extends", _extends, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function intersectionTypeAnnotation(types$7) {
		const node = {
			type: "IntersectionTypeAnnotation",
			types: types$7
		};
		const defs = NODE_FIELDS.IntersectionTypeAnnotation;
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function mixedTypeAnnotation() {
		return { type: "MixedTypeAnnotation" };
	}
	function emptyTypeAnnotation() {
		return { type: "EmptyTypeAnnotation" };
	}
	function nullableTypeAnnotation(typeAnnotation$1) {
		const node = {
			type: "NullableTypeAnnotation",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.NullableTypeAnnotation;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function numberLiteralTypeAnnotation(value) {
		const node = {
			type: "NumberLiteralTypeAnnotation",
			value
		};
		const defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function numberTypeAnnotation$2() {
		return { type: "NumberTypeAnnotation" };
	}
	function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
		const node = {
			type: "ObjectTypeAnnotation",
			properties,
			indexers,
			callProperties,
			internalSlots,
			exact
		};
		const defs = NODE_FIELDS.ObjectTypeAnnotation;
		validate$4(defs.properties, node, "properties", properties, 1);
		validate$4(defs.indexers, node, "indexers", indexers, 1);
		validate$4(defs.callProperties, node, "callProperties", callProperties, 1);
		validate$4(defs.internalSlots, node, "internalSlots", internalSlots, 1);
		validate$4(defs.exact, node, "exact", exact);
		return node;
	}
	function objectTypeInternalSlot(id$4, value, optional, _static, method) {
		const node = {
			type: "ObjectTypeInternalSlot",
			id: id$4,
			value,
			optional,
			static: _static,
			method
		};
		const defs = NODE_FIELDS.ObjectTypeInternalSlot;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.optional, node, "optional", optional);
		validate$4(defs.static, node, "static", _static);
		validate$4(defs.method, node, "method", method);
		return node;
	}
	function objectTypeCallProperty(value) {
		const node = {
			type: "ObjectTypeCallProperty",
			value,
			static: null
		};
		const defs = NODE_FIELDS.ObjectTypeCallProperty;
		validate$4(defs.value, node, "value", value, 1);
		return node;
	}
	function objectTypeIndexer(id$4 = null, key, value, variance$1 = null) {
		const node = {
			type: "ObjectTypeIndexer",
			id: id$4,
			key,
			value,
			variance: variance$1,
			static: null
		};
		const defs = NODE_FIELDS.ObjectTypeIndexer;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.variance, node, "variance", variance$1, 1);
		return node;
	}
	function objectTypeProperty(key, value, variance$1 = null) {
		const node = {
			type: "ObjectTypeProperty",
			key,
			value,
			variance: variance$1,
			kind: null,
			method: null,
			optional: null,
			proto: null,
			static: null
		};
		const defs = NODE_FIELDS.ObjectTypeProperty;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.value, node, "value", value, 1);
		validate$4(defs.variance, node, "variance", variance$1, 1);
		return node;
	}
	function objectTypeSpreadProperty(argument) {
		const node = {
			type: "ObjectTypeSpreadProperty",
			argument
		};
		const defs = NODE_FIELDS.ObjectTypeSpreadProperty;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function opaqueType(id$4, typeParameters = null, supertype = null, impltype) {
		const node = {
			type: "OpaqueType",
			id: id$4,
			typeParameters,
			supertype,
			impltype
		};
		const defs = NODE_FIELDS.OpaqueType;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.supertype, node, "supertype", supertype, 1);
		validate$4(defs.impltype, node, "impltype", impltype, 1);
		return node;
	}
	function qualifiedTypeIdentifier(id$4, qualification) {
		const node = {
			type: "QualifiedTypeIdentifier",
			id: id$4,
			qualification
		};
		const defs = NODE_FIELDS.QualifiedTypeIdentifier;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.qualification, node, "qualification", qualification, 1);
		return node;
	}
	function stringLiteralTypeAnnotation(value) {
		const node = {
			type: "StringLiteralTypeAnnotation",
			value
		};
		const defs = NODE_FIELDS.StringLiteralTypeAnnotation;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function stringTypeAnnotation$2() {
		return { type: "StringTypeAnnotation" };
	}
	function symbolTypeAnnotation() {
		return { type: "SymbolTypeAnnotation" };
	}
	function thisTypeAnnotation() {
		return { type: "ThisTypeAnnotation" };
	}
	function tupleTypeAnnotation$1(types$7) {
		const node = {
			type: "TupleTypeAnnotation",
			types: types$7
		};
		const defs = NODE_FIELDS.TupleTypeAnnotation;
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function typeofTypeAnnotation(argument) {
		const node = {
			type: "TypeofTypeAnnotation",
			argument
		};
		const defs = NODE_FIELDS.TypeofTypeAnnotation;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function typeAlias(id$4, typeParameters = null, right) {
		const node = {
			type: "TypeAlias",
			id: id$4,
			typeParameters,
			right
		};
		const defs = NODE_FIELDS.TypeAlias;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function typeAnnotation(typeAnnotation$1) {
		const node = {
			type: "TypeAnnotation",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TypeAnnotation;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function typeCastExpression(expression$2, typeAnnotation$1) {
		const node = {
			type: "TypeCastExpression",
			expression: expression$2,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TypeCastExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function typeParameter(bound = null, _default$14 = null, variance$1 = null) {
		const node = {
			type: "TypeParameter",
			bound,
			default: _default$14,
			variance: variance$1,
			name: null
		};
		const defs = NODE_FIELDS.TypeParameter;
		validate$4(defs.bound, node, "bound", bound, 1);
		validate$4(defs.default, node, "default", _default$14, 1);
		validate$4(defs.variance, node, "variance", variance$1, 1);
		return node;
	}
	function typeParameterDeclaration(params) {
		const node = {
			type: "TypeParameterDeclaration",
			params
		};
		const defs = NODE_FIELDS.TypeParameterDeclaration;
		validate$4(defs.params, node, "params", params, 1);
		return node;
	}
	function typeParameterInstantiation(params) {
		const node = {
			type: "TypeParameterInstantiation",
			params
		};
		const defs = NODE_FIELDS.TypeParameterInstantiation;
		validate$4(defs.params, node, "params", params, 1);
		return node;
	}
	function unionTypeAnnotation$1(types$7) {
		const node = {
			type: "UnionTypeAnnotation",
			types: types$7
		};
		const defs = NODE_FIELDS.UnionTypeAnnotation;
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function variance(kind) {
		const node = {
			type: "Variance",
			kind
		};
		const defs = NODE_FIELDS.Variance;
		validate$4(defs.kind, node, "kind", kind);
		return node;
	}
	function voidTypeAnnotation$3() {
		return { type: "VoidTypeAnnotation" };
	}
	function enumDeclaration(id$4, body) {
		const node = {
			type: "EnumDeclaration",
			id: id$4,
			body
		};
		const defs = NODE_FIELDS.EnumDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function enumBooleanBody(members) {
		const node = {
			type: "EnumBooleanBody",
			members,
			explicitType: null,
			hasUnknownMembers: null
		};
		const defs = NODE_FIELDS.EnumBooleanBody;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function enumNumberBody(members) {
		const node = {
			type: "EnumNumberBody",
			members,
			explicitType: null,
			hasUnknownMembers: null
		};
		const defs = NODE_FIELDS.EnumNumberBody;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function enumStringBody(members) {
		const node = {
			type: "EnumStringBody",
			members,
			explicitType: null,
			hasUnknownMembers: null
		};
		const defs = NODE_FIELDS.EnumStringBody;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function enumSymbolBody(members) {
		const node = {
			type: "EnumSymbolBody",
			members,
			hasUnknownMembers: null
		};
		const defs = NODE_FIELDS.EnumSymbolBody;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function enumBooleanMember(id$4) {
		const node = {
			type: "EnumBooleanMember",
			id: id$4,
			init: null
		};
		const defs = NODE_FIELDS.EnumBooleanMember;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function enumNumberMember(id$4, init$1) {
		const node = {
			type: "EnumNumberMember",
			id: id$4,
			init: init$1
		};
		const defs = NODE_FIELDS.EnumNumberMember;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.init, node, "init", init$1, 1);
		return node;
	}
	function enumStringMember(id$4, init$1) {
		const node = {
			type: "EnumStringMember",
			id: id$4,
			init: init$1
		};
		const defs = NODE_FIELDS.EnumStringMember;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.init, node, "init", init$1, 1);
		return node;
	}
	function enumDefaultedMember(id$4) {
		const node = {
			type: "EnumDefaultedMember",
			id: id$4
		};
		const defs = NODE_FIELDS.EnumDefaultedMember;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function indexedAccessType(objectType$1, indexType) {
		const node = {
			type: "IndexedAccessType",
			objectType: objectType$1,
			indexType
		};
		const defs = NODE_FIELDS.IndexedAccessType;
		validate$4(defs.objectType, node, "objectType", objectType$1, 1);
		validate$4(defs.indexType, node, "indexType", indexType, 1);
		return node;
	}
	function optionalIndexedAccessType(objectType$1, indexType) {
		const node = {
			type: "OptionalIndexedAccessType",
			objectType: objectType$1,
			indexType,
			optional: null
		};
		const defs = NODE_FIELDS.OptionalIndexedAccessType;
		validate$4(defs.objectType, node, "objectType", objectType$1, 1);
		validate$4(defs.indexType, node, "indexType", indexType, 1);
		return node;
	}
	function jsxAttribute(name, value = null) {
		const node = {
			type: "JSXAttribute",
			name,
			value
		};
		const defs = NODE_FIELDS.JSXAttribute;
		validate$4(defs.name, node, "name", name, 1);
		validate$4(defs.value, node, "value", value, 1);
		return node;
	}
	function jsxClosingElement(name) {
		const node = {
			type: "JSXClosingElement",
			name
		};
		const defs = NODE_FIELDS.JSXClosingElement;
		validate$4(defs.name, node, "name", name, 1);
		return node;
	}
	function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
		const node = {
			type: "JSXElement",
			openingElement,
			closingElement,
			children,
			selfClosing
		};
		const defs = NODE_FIELDS.JSXElement;
		validate$4(defs.openingElement, node, "openingElement", openingElement, 1);
		validate$4(defs.closingElement, node, "closingElement", closingElement, 1);
		validate$4(defs.children, node, "children", children, 1);
		validate$4(defs.selfClosing, node, "selfClosing", selfClosing);
		return node;
	}
	function jsxEmptyExpression() {
		return { type: "JSXEmptyExpression" };
	}
	function jsxExpressionContainer$1(expression$2) {
		const node = {
			type: "JSXExpressionContainer",
			expression: expression$2
		};
		const defs = NODE_FIELDS.JSXExpressionContainer;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function jsxSpreadChild(expression$2) {
		const node = {
			type: "JSXSpreadChild",
			expression: expression$2
		};
		const defs = NODE_FIELDS.JSXSpreadChild;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function jsxIdentifier$1(name) {
		const node = {
			type: "JSXIdentifier",
			name
		};
		const defs = NODE_FIELDS.JSXIdentifier;
		validate$4(defs.name, node, "name", name);
		return node;
	}
	function jsxMemberExpression(object$2, property) {
		const node = {
			type: "JSXMemberExpression",
			object: object$2,
			property
		};
		const defs = NODE_FIELDS.JSXMemberExpression;
		validate$4(defs.object, node, "object", object$2, 1);
		validate$4(defs.property, node, "property", property, 1);
		return node;
	}
	function jsxNamespacedName(namespace, name) {
		const node = {
			type: "JSXNamespacedName",
			namespace,
			name
		};
		const defs = NODE_FIELDS.JSXNamespacedName;
		validate$4(defs.namespace, node, "namespace", namespace, 1);
		validate$4(defs.name, node, "name", name, 1);
		return node;
	}
	function jsxOpeningElement(name, attributes, selfClosing = false) {
		const node = {
			type: "JSXOpeningElement",
			name,
			attributes,
			selfClosing
		};
		const defs = NODE_FIELDS.JSXOpeningElement;
		validate$4(defs.name, node, "name", name, 1);
		validate$4(defs.attributes, node, "attributes", attributes, 1);
		validate$4(defs.selfClosing, node, "selfClosing", selfClosing);
		return node;
	}
	function jsxSpreadAttribute(argument) {
		const node = {
			type: "JSXSpreadAttribute",
			argument
		};
		const defs = NODE_FIELDS.JSXSpreadAttribute;
		validate$4(defs.argument, node, "argument", argument, 1);
		return node;
	}
	function jsxText(value) {
		const node = {
			type: "JSXText",
			value
		};
		const defs = NODE_FIELDS.JSXText;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function jsxFragment(openingFragment, closingFragment, children) {
		const node = {
			type: "JSXFragment",
			openingFragment,
			closingFragment,
			children
		};
		const defs = NODE_FIELDS.JSXFragment;
		validate$4(defs.openingFragment, node, "openingFragment", openingFragment, 1);
		validate$4(defs.closingFragment, node, "closingFragment", closingFragment, 1);
		validate$4(defs.children, node, "children", children, 1);
		return node;
	}
	function jsxOpeningFragment() {
		return { type: "JSXOpeningFragment" };
	}
	function jsxClosingFragment() {
		return { type: "JSXClosingFragment" };
	}
	function noop() {
		return { type: "Noop" };
	}
	function placeholder(expectedNode, name) {
		const node = {
			type: "Placeholder",
			expectedNode,
			name
		};
		const defs = NODE_FIELDS.Placeholder;
		validate$4(defs.expectedNode, node, "expectedNode", expectedNode);
		validate$4(defs.name, node, "name", name, 1);
		return node;
	}
	function v8IntrinsicIdentifier(name) {
		const node = {
			type: "V8IntrinsicIdentifier",
			name
		};
		const defs = NODE_FIELDS.V8IntrinsicIdentifier;
		validate$4(defs.name, node, "name", name);
		return node;
	}
	function argumentPlaceholder() {
		return { type: "ArgumentPlaceholder" };
	}
	function bindExpression(object$2, callee) {
		const node = {
			type: "BindExpression",
			object: object$2,
			callee
		};
		const defs = NODE_FIELDS.BindExpression;
		validate$4(defs.object, node, "object", object$2, 1);
		validate$4(defs.callee, node, "callee", callee, 1);
		return node;
	}
	function decorator(expression$2) {
		const node = {
			type: "Decorator",
			expression: expression$2
		};
		const defs = NODE_FIELDS.Decorator;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function doExpression(body, async$1 = false) {
		const node = {
			type: "DoExpression",
			body,
			async: async$1
		};
		const defs = NODE_FIELDS.DoExpression;
		validate$4(defs.body, node, "body", body, 1);
		validate$4(defs.async, node, "async", async$1);
		return node;
	}
	function exportDefaultSpecifier(exported) {
		const node = {
			type: "ExportDefaultSpecifier",
			exported
		};
		const defs = NODE_FIELDS.ExportDefaultSpecifier;
		validate$4(defs.exported, node, "exported", exported, 1);
		return node;
	}
	function recordExpression(properties) {
		const node = {
			type: "RecordExpression",
			properties
		};
		const defs = NODE_FIELDS.RecordExpression;
		validate$4(defs.properties, node, "properties", properties, 1);
		return node;
	}
	function tupleExpression(elements = []) {
		const node = {
			type: "TupleExpression",
			elements
		};
		const defs = NODE_FIELDS.TupleExpression;
		validate$4(defs.elements, node, "elements", elements, 1);
		return node;
	}
	function decimalLiteral(value) {
		const node = {
			type: "DecimalLiteral",
			value
		};
		const defs = NODE_FIELDS.DecimalLiteral;
		validate$4(defs.value, node, "value", value);
		return node;
	}
	function moduleExpression(body) {
		const node = {
			type: "ModuleExpression",
			body
		};
		const defs = NODE_FIELDS.ModuleExpression;
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function topicReference() {
		return { type: "TopicReference" };
	}
	function pipelineTopicExpression(expression$2) {
		const node = {
			type: "PipelineTopicExpression",
			expression: expression$2
		};
		const defs = NODE_FIELDS.PipelineTopicExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function pipelineBareFunction(callee) {
		const node = {
			type: "PipelineBareFunction",
			callee
		};
		const defs = NODE_FIELDS.PipelineBareFunction;
		validate$4(defs.callee, node, "callee", callee, 1);
		return node;
	}
	function pipelinePrimaryTopicReference() {
		return { type: "PipelinePrimaryTopicReference" };
	}
	function tsParameterProperty(parameter) {
		const node = {
			type: "TSParameterProperty",
			parameter
		};
		const defs = NODE_FIELDS.TSParameterProperty;
		validate$4(defs.parameter, node, "parameter", parameter, 1);
		return node;
	}
	function tsDeclareFunction(id$4 = null, typeParameters = null, params, returnType = null) {
		const node = {
			type: "TSDeclareFunction",
			id: id$4,
			typeParameters,
			params,
			returnType
		};
		const defs = NODE_FIELDS.TSDeclareFunction;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.returnType, node, "returnType", returnType, 1);
		return node;
	}
	function tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {
		const node = {
			type: "TSDeclareMethod",
			decorators,
			key,
			typeParameters,
			params,
			returnType
		};
		const defs = NODE_FIELDS.TSDeclareMethod;
		validate$4(defs.decorators, node, "decorators", decorators, 1);
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.params, node, "params", params, 1);
		validate$4(defs.returnType, node, "returnType", returnType, 1);
		return node;
	}
	function tsQualifiedName(left, right) {
		const node = {
			type: "TSQualifiedName",
			left,
			right
		};
		const defs = NODE_FIELDS.TSQualifiedName;
		validate$4(defs.left, node, "left", left, 1);
		validate$4(defs.right, node, "right", right, 1);
		return node;
	}
	function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSCallSignatureDeclaration",
			typeParameters,
			parameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSCallSignatureDeclaration;
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSConstructSignatureDeclaration",
			typeParameters,
			parameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSConstructSignatureDeclaration;
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsPropertySignature(key, typeAnnotation$1 = null) {
		const node = {
			type: "TSPropertySignature",
			key,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSPropertySignature;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSMethodSignature",
			key,
			typeParameters,
			parameters,
			typeAnnotation: typeAnnotation$1,
			kind: null
		};
		const defs = NODE_FIELDS.TSMethodSignature;
		validate$4(defs.key, node, "key", key, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsIndexSignature(parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSIndexSignature",
			parameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSIndexSignature;
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsAnyKeyword() {
		return { type: "TSAnyKeyword" };
	}
	function tsBooleanKeyword() {
		return { type: "TSBooleanKeyword" };
	}
	function tsBigIntKeyword() {
		return { type: "TSBigIntKeyword" };
	}
	function tsIntrinsicKeyword() {
		return { type: "TSIntrinsicKeyword" };
	}
	function tsNeverKeyword() {
		return { type: "TSNeverKeyword" };
	}
	function tsNullKeyword() {
		return { type: "TSNullKeyword" };
	}
	function tsNumberKeyword() {
		return { type: "TSNumberKeyword" };
	}
	function tsObjectKeyword() {
		return { type: "TSObjectKeyword" };
	}
	function tsStringKeyword() {
		return { type: "TSStringKeyword" };
	}
	function tsSymbolKeyword() {
		return { type: "TSSymbolKeyword" };
	}
	function tsUndefinedKeyword() {
		return { type: "TSUndefinedKeyword" };
	}
	function tsUnknownKeyword() {
		return { type: "TSUnknownKeyword" };
	}
	function tsVoidKeyword() {
		return { type: "TSVoidKeyword" };
	}
	function tsThisType() {
		return { type: "TSThisType" };
	}
	function tsFunctionType(typeParameters = null, parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSFunctionType",
			typeParameters,
			parameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSFunctionType;
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsConstructorType(typeParameters = null, parameters, typeAnnotation$1 = null) {
		const node = {
			type: "TSConstructorType",
			typeParameters,
			parameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSConstructorType;
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.parameters, node, "parameters", parameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsTypeReference(typeName, typeParameters = null) {
		const node = {
			type: "TSTypeReference",
			typeName,
			typeParameters
		};
		const defs = NODE_FIELDS.TSTypeReference;
		validate$4(defs.typeName, node, "typeName", typeName, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function tsTypePredicate(parameterName, typeAnnotation$1 = null, asserts = null) {
		const node = {
			type: "TSTypePredicate",
			parameterName,
			typeAnnotation: typeAnnotation$1,
			asserts
		};
		const defs = NODE_FIELDS.TSTypePredicate;
		validate$4(defs.parameterName, node, "parameterName", parameterName, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		validate$4(defs.asserts, node, "asserts", asserts);
		return node;
	}
	function tsTypeQuery(exprName, typeParameters = null) {
		const node = {
			type: "TSTypeQuery",
			exprName,
			typeParameters
		};
		const defs = NODE_FIELDS.TSTypeQuery;
		validate$4(defs.exprName, node, "exprName", exprName, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function tsTypeLiteral(members) {
		const node = {
			type: "TSTypeLiteral",
			members
		};
		const defs = NODE_FIELDS.TSTypeLiteral;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function tsArrayType(elementType) {
		const node = {
			type: "TSArrayType",
			elementType
		};
		const defs = NODE_FIELDS.TSArrayType;
		validate$4(defs.elementType, node, "elementType", elementType, 1);
		return node;
	}
	function tsTupleType(elementTypes) {
		const node = {
			type: "TSTupleType",
			elementTypes
		};
		const defs = NODE_FIELDS.TSTupleType;
		validate$4(defs.elementTypes, node, "elementTypes", elementTypes, 1);
		return node;
	}
	function tsOptionalType(typeAnnotation$1) {
		const node = {
			type: "TSOptionalType",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSOptionalType;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsRestType(typeAnnotation$1) {
		const node = {
			type: "TSRestType",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSRestType;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsNamedTupleMember(label, elementType, optional = false) {
		const node = {
			type: "TSNamedTupleMember",
			label,
			elementType,
			optional
		};
		const defs = NODE_FIELDS.TSNamedTupleMember;
		validate$4(defs.label, node, "label", label, 1);
		validate$4(defs.elementType, node, "elementType", elementType, 1);
		validate$4(defs.optional, node, "optional", optional);
		return node;
	}
	function tsUnionType(types$7) {
		const node = {
			type: "TSUnionType",
			types: types$7
		};
		const defs = NODE_FIELDS.TSUnionType;
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function tsIntersectionType(types$7) {
		const node = {
			type: "TSIntersectionType",
			types: types$7
		};
		const defs = NODE_FIELDS.TSIntersectionType;
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function tsConditionalType(checkType, extendsType, trueType, falseType) {
		const node = {
			type: "TSConditionalType",
			checkType,
			extendsType,
			trueType,
			falseType
		};
		const defs = NODE_FIELDS.TSConditionalType;
		validate$4(defs.checkType, node, "checkType", checkType, 1);
		validate$4(defs.extendsType, node, "extendsType", extendsType, 1);
		validate$4(defs.trueType, node, "trueType", trueType, 1);
		validate$4(defs.falseType, node, "falseType", falseType, 1);
		return node;
	}
	function tsInferType(typeParameter$1) {
		const node = {
			type: "TSInferType",
			typeParameter: typeParameter$1
		};
		const defs = NODE_FIELDS.TSInferType;
		validate$4(defs.typeParameter, node, "typeParameter", typeParameter$1, 1);
		return node;
	}
	function tsParenthesizedType(typeAnnotation$1) {
		const node = {
			type: "TSParenthesizedType",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSParenthesizedType;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsTypeOperator(typeAnnotation$1) {
		const node = {
			type: "TSTypeOperator",
			typeAnnotation: typeAnnotation$1,
			operator: null
		};
		const defs = NODE_FIELDS.TSTypeOperator;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsIndexedAccessType(objectType$1, indexType) {
		const node = {
			type: "TSIndexedAccessType",
			objectType: objectType$1,
			indexType
		};
		const defs = NODE_FIELDS.TSIndexedAccessType;
		validate$4(defs.objectType, node, "objectType", objectType$1, 1);
		validate$4(defs.indexType, node, "indexType", indexType, 1);
		return node;
	}
	function tsMappedType(typeParameter$1, typeAnnotation$1 = null, nameType = null) {
		const node = {
			type: "TSMappedType",
			typeParameter: typeParameter$1,
			typeAnnotation: typeAnnotation$1,
			nameType
		};
		const defs = NODE_FIELDS.TSMappedType;
		validate$4(defs.typeParameter, node, "typeParameter", typeParameter$1, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		validate$4(defs.nameType, node, "nameType", nameType, 1);
		return node;
	}
	function tsTemplateLiteralType(quasis, types$7) {
		const node = {
			type: "TSTemplateLiteralType",
			quasis,
			types: types$7
		};
		const defs = NODE_FIELDS.TSTemplateLiteralType;
		validate$4(defs.quasis, node, "quasis", quasis, 1);
		validate$4(defs.types, node, "types", types$7, 1);
		return node;
	}
	function tsLiteralType(literal) {
		const node = {
			type: "TSLiteralType",
			literal
		};
		const defs = NODE_FIELDS.TSLiteralType;
		validate$4(defs.literal, node, "literal", literal, 1);
		return node;
	}
	function tsExpressionWithTypeArguments(expression$2, typeParameters = null) {
		const node = {
			type: "TSExpressionWithTypeArguments",
			expression: expression$2,
			typeParameters
		};
		const defs = NODE_FIELDS.TSExpressionWithTypeArguments;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function tsInterfaceDeclaration(id$4, typeParameters = null, _extends = null, body) {
		const node = {
			type: "TSInterfaceDeclaration",
			id: id$4,
			typeParameters,
			extends: _extends,
			body
		};
		const defs = NODE_FIELDS.TSInterfaceDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.extends, node, "extends", _extends, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function tsInterfaceBody(body) {
		const node = {
			type: "TSInterfaceBody",
			body
		};
		const defs = NODE_FIELDS.TSInterfaceBody;
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function tsTypeAliasDeclaration(id$4, typeParameters = null, typeAnnotation$1) {
		const node = {
			type: "TSTypeAliasDeclaration",
			id: id$4,
			typeParameters,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSTypeAliasDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsInstantiationExpression(expression$2, typeParameters = null) {
		const node = {
			type: "TSInstantiationExpression",
			expression: expression$2,
			typeParameters
		};
		const defs = NODE_FIELDS.TSInstantiationExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function tsAsExpression(expression$2, typeAnnotation$1) {
		const node = {
			type: "TSAsExpression",
			expression: expression$2,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSAsExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsSatisfiesExpression(expression$2, typeAnnotation$1) {
		const node = {
			type: "TSSatisfiesExpression",
			expression: expression$2,
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSSatisfiesExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsTypeAssertion(typeAnnotation$1, expression$2) {
		const node = {
			type: "TSTypeAssertion",
			typeAnnotation: typeAnnotation$1,
			expression: expression$2
		};
		const defs = NODE_FIELDS.TSTypeAssertion;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function tsEnumBody(members) {
		const node = {
			type: "TSEnumBody",
			members
		};
		const defs = NODE_FIELDS.TSEnumBody;
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function tsEnumDeclaration(id$4, members) {
		const node = {
			type: "TSEnumDeclaration",
			id: id$4,
			members
		};
		const defs = NODE_FIELDS.TSEnumDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.members, node, "members", members, 1);
		return node;
	}
	function tsEnumMember(id$4, initializer = null) {
		const node = {
			type: "TSEnumMember",
			id: id$4,
			initializer
		};
		const defs = NODE_FIELDS.TSEnumMember;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.initializer, node, "initializer", initializer, 1);
		return node;
	}
	function tsModuleDeclaration(id$4, body) {
		const node = {
			type: "TSModuleDeclaration",
			id: id$4,
			body,
			kind: null
		};
		const defs = NODE_FIELDS.TSModuleDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function tsModuleBlock(body) {
		const node = {
			type: "TSModuleBlock",
			body
		};
		const defs = NODE_FIELDS.TSModuleBlock;
		validate$4(defs.body, node, "body", body, 1);
		return node;
	}
	function tsImportType(argument, qualifier = null, typeParameters = null) {
		const node = {
			type: "TSImportType",
			argument,
			qualifier,
			typeParameters
		};
		const defs = NODE_FIELDS.TSImportType;
		validate$4(defs.argument, node, "argument", argument, 1);
		validate$4(defs.qualifier, node, "qualifier", qualifier, 1);
		validate$4(defs.typeParameters, node, "typeParameters", typeParameters, 1);
		return node;
	}
	function tsImportEqualsDeclaration(id$4, moduleReference) {
		const node = {
			type: "TSImportEqualsDeclaration",
			id: id$4,
			moduleReference,
			isExport: null
		};
		const defs = NODE_FIELDS.TSImportEqualsDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		validate$4(defs.moduleReference, node, "moduleReference", moduleReference, 1);
		return node;
	}
	function tsExternalModuleReference(expression$2) {
		const node = {
			type: "TSExternalModuleReference",
			expression: expression$2
		};
		const defs = NODE_FIELDS.TSExternalModuleReference;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function tsNonNullExpression(expression$2) {
		const node = {
			type: "TSNonNullExpression",
			expression: expression$2
		};
		const defs = NODE_FIELDS.TSNonNullExpression;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function tsExportAssignment(expression$2) {
		const node = {
			type: "TSExportAssignment",
			expression: expression$2
		};
		const defs = NODE_FIELDS.TSExportAssignment;
		validate$4(defs.expression, node, "expression", expression$2, 1);
		return node;
	}
	function tsNamespaceExportDeclaration(id$4) {
		const node = {
			type: "TSNamespaceExportDeclaration",
			id: id$4
		};
		const defs = NODE_FIELDS.TSNamespaceExportDeclaration;
		validate$4(defs.id, node, "id", id$4, 1);
		return node;
	}
	function tsTypeAnnotation(typeAnnotation$1) {
		const node = {
			type: "TSTypeAnnotation",
			typeAnnotation: typeAnnotation$1
		};
		const defs = NODE_FIELDS.TSTypeAnnotation;
		validate$4(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation$1, 1);
		return node;
	}
	function tsTypeParameterInstantiation(params) {
		const node = {
			type: "TSTypeParameterInstantiation",
			params
		};
		const defs = NODE_FIELDS.TSTypeParameterInstantiation;
		validate$4(defs.params, node, "params", params, 1);
		return node;
	}
	function tsTypeParameterDeclaration(params) {
		const node = {
			type: "TSTypeParameterDeclaration",
			params
		};
		const defs = NODE_FIELDS.TSTypeParameterDeclaration;
		validate$4(defs.params, node, "params", params, 1);
		return node;
	}
	function tsTypeParameter(constraint = null, _default$14 = null, name) {
		const node = {
			type: "TSTypeParameter",
			constraint,
			default: _default$14,
			name
		};
		const defs = NODE_FIELDS.TSTypeParameter;
		validate$4(defs.constraint, node, "constraint", constraint, 1);
		validate$4(defs.default, node, "default", _default$14, 1);
		validate$4(defs.name, node, "name", name);
		return node;
	}
	function NumberLiteral(value) {
		(0, _deprecationWarning$2.default)("NumberLiteral", "NumericLiteral", "The node type ");
		return numericLiteral$3(value);
	}
	function RegexLiteral(pattern, flags = "") {
		(0, _deprecationWarning$2.default)("RegexLiteral", "RegExpLiteral", "The node type ");
		return regExpLiteral(pattern, flags);
	}
	function RestProperty(argument) {
		(0, _deprecationWarning$2.default)("RestProperty", "RestElement", "The node type ");
		return restElement$1(argument);
	}
	function SpreadProperty(argument) {
		(0, _deprecationWarning$2.default)("SpreadProperty", "SpreadElement", "The node type ");
		return spreadElement$1(argument);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/generated/uppercase.js
var require_uppercase = __commonJS({ "node_modules/@babel/types/lib/builders/generated/uppercase.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	Object.defineProperty(exports, "AnyTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.anyTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ArgumentPlaceholder", {
		enumerable: true,
		get: function() {
			return _lowercase$1.argumentPlaceholder;
		}
	});
	Object.defineProperty(exports, "ArrayExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.arrayExpression;
		}
	});
	Object.defineProperty(exports, "ArrayPattern", {
		enumerable: true,
		get: function() {
			return _lowercase$1.arrayPattern;
		}
	});
	Object.defineProperty(exports, "ArrayTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.arrayTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ArrowFunctionExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.arrowFunctionExpression;
		}
	});
	Object.defineProperty(exports, "AssignmentExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.assignmentExpression;
		}
	});
	Object.defineProperty(exports, "AssignmentPattern", {
		enumerable: true,
		get: function() {
			return _lowercase$1.assignmentPattern;
		}
	});
	Object.defineProperty(exports, "AwaitExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.awaitExpression;
		}
	});
	Object.defineProperty(exports, "BigIntLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.bigIntLiteral;
		}
	});
	Object.defineProperty(exports, "BinaryExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.binaryExpression;
		}
	});
	Object.defineProperty(exports, "BindExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.bindExpression;
		}
	});
	Object.defineProperty(exports, "BlockStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.blockStatement;
		}
	});
	Object.defineProperty(exports, "BooleanLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.booleanLiteral;
		}
	});
	Object.defineProperty(exports, "BooleanLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.booleanLiteralTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "BooleanTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.booleanTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "BreakStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.breakStatement;
		}
	});
	Object.defineProperty(exports, "CallExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.callExpression;
		}
	});
	Object.defineProperty(exports, "CatchClause", {
		enumerable: true,
		get: function() {
			return _lowercase$1.catchClause;
		}
	});
	Object.defineProperty(exports, "ClassAccessorProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classAccessorProperty;
		}
	});
	Object.defineProperty(exports, "ClassBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classBody;
		}
	});
	Object.defineProperty(exports, "ClassDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classDeclaration;
		}
	});
	Object.defineProperty(exports, "ClassExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classExpression;
		}
	});
	Object.defineProperty(exports, "ClassImplements", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classImplements;
		}
	});
	Object.defineProperty(exports, "ClassMethod", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classMethod;
		}
	});
	Object.defineProperty(exports, "ClassPrivateMethod", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classPrivateMethod;
		}
	});
	Object.defineProperty(exports, "ClassPrivateProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classPrivateProperty;
		}
	});
	Object.defineProperty(exports, "ClassProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.classProperty;
		}
	});
	Object.defineProperty(exports, "ConditionalExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.conditionalExpression;
		}
	});
	Object.defineProperty(exports, "ContinueStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.continueStatement;
		}
	});
	Object.defineProperty(exports, "DebuggerStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.debuggerStatement;
		}
	});
	Object.defineProperty(exports, "DecimalLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.decimalLiteral;
		}
	});
	Object.defineProperty(exports, "DeclareClass", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareClass;
		}
	});
	Object.defineProperty(exports, "DeclareExportAllDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareExportAllDeclaration;
		}
	});
	Object.defineProperty(exports, "DeclareExportDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareExportDeclaration;
		}
	});
	Object.defineProperty(exports, "DeclareFunction", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareFunction;
		}
	});
	Object.defineProperty(exports, "DeclareInterface", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareInterface;
		}
	});
	Object.defineProperty(exports, "DeclareModule", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareModule;
		}
	});
	Object.defineProperty(exports, "DeclareModuleExports", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareModuleExports;
		}
	});
	Object.defineProperty(exports, "DeclareOpaqueType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareOpaqueType;
		}
	});
	Object.defineProperty(exports, "DeclareTypeAlias", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareTypeAlias;
		}
	});
	Object.defineProperty(exports, "DeclareVariable", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declareVariable;
		}
	});
	Object.defineProperty(exports, "DeclaredPredicate", {
		enumerable: true,
		get: function() {
			return _lowercase$1.declaredPredicate;
		}
	});
	Object.defineProperty(exports, "Decorator", {
		enumerable: true,
		get: function() {
			return _lowercase$1.decorator;
		}
	});
	Object.defineProperty(exports, "Directive", {
		enumerable: true,
		get: function() {
			return _lowercase$1.directive;
		}
	});
	Object.defineProperty(exports, "DirectiveLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.directiveLiteral;
		}
	});
	Object.defineProperty(exports, "DoExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.doExpression;
		}
	});
	Object.defineProperty(exports, "DoWhileStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.doWhileStatement;
		}
	});
	Object.defineProperty(exports, "EmptyStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.emptyStatement;
		}
	});
	Object.defineProperty(exports, "EmptyTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.emptyTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "EnumBooleanBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumBooleanBody;
		}
	});
	Object.defineProperty(exports, "EnumBooleanMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumBooleanMember;
		}
	});
	Object.defineProperty(exports, "EnumDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumDeclaration;
		}
	});
	Object.defineProperty(exports, "EnumDefaultedMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumDefaultedMember;
		}
	});
	Object.defineProperty(exports, "EnumNumberBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumNumberBody;
		}
	});
	Object.defineProperty(exports, "EnumNumberMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumNumberMember;
		}
	});
	Object.defineProperty(exports, "EnumStringBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumStringBody;
		}
	});
	Object.defineProperty(exports, "EnumStringMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumStringMember;
		}
	});
	Object.defineProperty(exports, "EnumSymbolBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.enumSymbolBody;
		}
	});
	Object.defineProperty(exports, "ExistsTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.existsTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ExportAllDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportAllDeclaration;
		}
	});
	Object.defineProperty(exports, "ExportDefaultDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportDefaultDeclaration;
		}
	});
	Object.defineProperty(exports, "ExportDefaultSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportDefaultSpecifier;
		}
	});
	Object.defineProperty(exports, "ExportNamedDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportNamedDeclaration;
		}
	});
	Object.defineProperty(exports, "ExportNamespaceSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportNamespaceSpecifier;
		}
	});
	Object.defineProperty(exports, "ExportSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.exportSpecifier;
		}
	});
	Object.defineProperty(exports, "ExpressionStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.expressionStatement;
		}
	});
	Object.defineProperty(exports, "File", {
		enumerable: true,
		get: function() {
			return _lowercase$1.file;
		}
	});
	Object.defineProperty(exports, "ForInStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.forInStatement;
		}
	});
	Object.defineProperty(exports, "ForOfStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.forOfStatement;
		}
	});
	Object.defineProperty(exports, "ForStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.forStatement;
		}
	});
	Object.defineProperty(exports, "FunctionDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.functionDeclaration;
		}
	});
	Object.defineProperty(exports, "FunctionExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.functionExpression;
		}
	});
	Object.defineProperty(exports, "FunctionTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.functionTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "FunctionTypeParam", {
		enumerable: true,
		get: function() {
			return _lowercase$1.functionTypeParam;
		}
	});
	Object.defineProperty(exports, "GenericTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.genericTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "Identifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.identifier;
		}
	});
	Object.defineProperty(exports, "IfStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.ifStatement;
		}
	});
	Object.defineProperty(exports, "Import", {
		enumerable: true,
		get: function() {
			return _lowercase$1.import;
		}
	});
	Object.defineProperty(exports, "ImportAttribute", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importAttribute;
		}
	});
	Object.defineProperty(exports, "ImportDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importDeclaration;
		}
	});
	Object.defineProperty(exports, "ImportDefaultSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importDefaultSpecifier;
		}
	});
	Object.defineProperty(exports, "ImportExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importExpression;
		}
	});
	Object.defineProperty(exports, "ImportNamespaceSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importNamespaceSpecifier;
		}
	});
	Object.defineProperty(exports, "ImportSpecifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.importSpecifier;
		}
	});
	Object.defineProperty(exports, "IndexedAccessType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.indexedAccessType;
		}
	});
	Object.defineProperty(exports, "InferredPredicate", {
		enumerable: true,
		get: function() {
			return _lowercase$1.inferredPredicate;
		}
	});
	Object.defineProperty(exports, "InterfaceDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.interfaceDeclaration;
		}
	});
	Object.defineProperty(exports, "InterfaceExtends", {
		enumerable: true,
		get: function() {
			return _lowercase$1.interfaceExtends;
		}
	});
	Object.defineProperty(exports, "InterfaceTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.interfaceTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "InterpreterDirective", {
		enumerable: true,
		get: function() {
			return _lowercase$1.interpreterDirective;
		}
	});
	Object.defineProperty(exports, "IntersectionTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.intersectionTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "JSXAttribute", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxAttribute;
		}
	});
	Object.defineProperty(exports, "JSXClosingElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxClosingElement;
		}
	});
	Object.defineProperty(exports, "JSXClosingFragment", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxClosingFragment;
		}
	});
	Object.defineProperty(exports, "JSXElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxElement;
		}
	});
	Object.defineProperty(exports, "JSXEmptyExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxEmptyExpression;
		}
	});
	Object.defineProperty(exports, "JSXExpressionContainer", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxExpressionContainer;
		}
	});
	Object.defineProperty(exports, "JSXFragment", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxFragment;
		}
	});
	Object.defineProperty(exports, "JSXIdentifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxIdentifier;
		}
	});
	Object.defineProperty(exports, "JSXMemberExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxMemberExpression;
		}
	});
	Object.defineProperty(exports, "JSXNamespacedName", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxNamespacedName;
		}
	});
	Object.defineProperty(exports, "JSXOpeningElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxOpeningElement;
		}
	});
	Object.defineProperty(exports, "JSXOpeningFragment", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxOpeningFragment;
		}
	});
	Object.defineProperty(exports, "JSXSpreadAttribute", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxSpreadAttribute;
		}
	});
	Object.defineProperty(exports, "JSXSpreadChild", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxSpreadChild;
		}
	});
	Object.defineProperty(exports, "JSXText", {
		enumerable: true,
		get: function() {
			return _lowercase$1.jsxText;
		}
	});
	Object.defineProperty(exports, "LabeledStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.labeledStatement;
		}
	});
	Object.defineProperty(exports, "LogicalExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.logicalExpression;
		}
	});
	Object.defineProperty(exports, "MemberExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.memberExpression;
		}
	});
	Object.defineProperty(exports, "MetaProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.metaProperty;
		}
	});
	Object.defineProperty(exports, "MixedTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.mixedTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ModuleExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.moduleExpression;
		}
	});
	Object.defineProperty(exports, "NewExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.newExpression;
		}
	});
	Object.defineProperty(exports, "Noop", {
		enumerable: true,
		get: function() {
			return _lowercase$1.noop;
		}
	});
	Object.defineProperty(exports, "NullLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.nullLiteral;
		}
	});
	Object.defineProperty(exports, "NullLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.nullLiteralTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "NullableTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.nullableTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "NumberLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.numberLiteral;
		}
	});
	Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.numberLiteralTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "NumberTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.numberTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "NumericLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.numericLiteral;
		}
	});
	Object.defineProperty(exports, "ObjectExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectExpression;
		}
	});
	Object.defineProperty(exports, "ObjectMethod", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectMethod;
		}
	});
	Object.defineProperty(exports, "ObjectPattern", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectPattern;
		}
	});
	Object.defineProperty(exports, "ObjectProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectProperty;
		}
	});
	Object.defineProperty(exports, "ObjectTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ObjectTypeCallProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeCallProperty;
		}
	});
	Object.defineProperty(exports, "ObjectTypeIndexer", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeIndexer;
		}
	});
	Object.defineProperty(exports, "ObjectTypeInternalSlot", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeInternalSlot;
		}
	});
	Object.defineProperty(exports, "ObjectTypeProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeProperty;
		}
	});
	Object.defineProperty(exports, "ObjectTypeSpreadProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.objectTypeSpreadProperty;
		}
	});
	Object.defineProperty(exports, "OpaqueType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.opaqueType;
		}
	});
	Object.defineProperty(exports, "OptionalCallExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.optionalCallExpression;
		}
	});
	Object.defineProperty(exports, "OptionalIndexedAccessType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.optionalIndexedAccessType;
		}
	});
	Object.defineProperty(exports, "OptionalMemberExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.optionalMemberExpression;
		}
	});
	Object.defineProperty(exports, "ParenthesizedExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.parenthesizedExpression;
		}
	});
	Object.defineProperty(exports, "PipelineBareFunction", {
		enumerable: true,
		get: function() {
			return _lowercase$1.pipelineBareFunction;
		}
	});
	Object.defineProperty(exports, "PipelinePrimaryTopicReference", {
		enumerable: true,
		get: function() {
			return _lowercase$1.pipelinePrimaryTopicReference;
		}
	});
	Object.defineProperty(exports, "PipelineTopicExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.pipelineTopicExpression;
		}
	});
	Object.defineProperty(exports, "Placeholder", {
		enumerable: true,
		get: function() {
			return _lowercase$1.placeholder;
		}
	});
	Object.defineProperty(exports, "PrivateName", {
		enumerable: true,
		get: function() {
			return _lowercase$1.privateName;
		}
	});
	Object.defineProperty(exports, "Program", {
		enumerable: true,
		get: function() {
			return _lowercase$1.program;
		}
	});
	Object.defineProperty(exports, "QualifiedTypeIdentifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.qualifiedTypeIdentifier;
		}
	});
	Object.defineProperty(exports, "RecordExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.recordExpression;
		}
	});
	Object.defineProperty(exports, "RegExpLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.regExpLiteral;
		}
	});
	Object.defineProperty(exports, "RegexLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.regexLiteral;
		}
	});
	Object.defineProperty(exports, "RestElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.restElement;
		}
	});
	Object.defineProperty(exports, "RestProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.restProperty;
		}
	});
	Object.defineProperty(exports, "ReturnStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.returnStatement;
		}
	});
	Object.defineProperty(exports, "SequenceExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.sequenceExpression;
		}
	});
	Object.defineProperty(exports, "SpreadElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.spreadElement;
		}
	});
	Object.defineProperty(exports, "SpreadProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.spreadProperty;
		}
	});
	Object.defineProperty(exports, "StaticBlock", {
		enumerable: true,
		get: function() {
			return _lowercase$1.staticBlock;
		}
	});
	Object.defineProperty(exports, "StringLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.stringLiteral;
		}
	});
	Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.stringLiteralTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "StringTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.stringTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "Super", {
		enumerable: true,
		get: function() {
			return _lowercase$1.super;
		}
	});
	Object.defineProperty(exports, "SwitchCase", {
		enumerable: true,
		get: function() {
			return _lowercase$1.switchCase;
		}
	});
	Object.defineProperty(exports, "SwitchStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.switchStatement;
		}
	});
	Object.defineProperty(exports, "SymbolTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.symbolTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "TSAnyKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsAnyKeyword;
		}
	});
	Object.defineProperty(exports, "TSArrayType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsArrayType;
		}
	});
	Object.defineProperty(exports, "TSAsExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsAsExpression;
		}
	});
	Object.defineProperty(exports, "TSBigIntKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsBigIntKeyword;
		}
	});
	Object.defineProperty(exports, "TSBooleanKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsBooleanKeyword;
		}
	});
	Object.defineProperty(exports, "TSCallSignatureDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsCallSignatureDeclaration;
		}
	});
	Object.defineProperty(exports, "TSConditionalType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsConditionalType;
		}
	});
	Object.defineProperty(exports, "TSConstructSignatureDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsConstructSignatureDeclaration;
		}
	});
	Object.defineProperty(exports, "TSConstructorType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsConstructorType;
		}
	});
	Object.defineProperty(exports, "TSDeclareFunction", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsDeclareFunction;
		}
	});
	Object.defineProperty(exports, "TSDeclareMethod", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsDeclareMethod;
		}
	});
	Object.defineProperty(exports, "TSEnumBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsEnumBody;
		}
	});
	Object.defineProperty(exports, "TSEnumDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsEnumDeclaration;
		}
	});
	Object.defineProperty(exports, "TSEnumMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsEnumMember;
		}
	});
	Object.defineProperty(exports, "TSExportAssignment", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsExportAssignment;
		}
	});
	Object.defineProperty(exports, "TSExpressionWithTypeArguments", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsExpressionWithTypeArguments;
		}
	});
	Object.defineProperty(exports, "TSExternalModuleReference", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsExternalModuleReference;
		}
	});
	Object.defineProperty(exports, "TSFunctionType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsFunctionType;
		}
	});
	Object.defineProperty(exports, "TSImportEqualsDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsImportEqualsDeclaration;
		}
	});
	Object.defineProperty(exports, "TSImportType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsImportType;
		}
	});
	Object.defineProperty(exports, "TSIndexSignature", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsIndexSignature;
		}
	});
	Object.defineProperty(exports, "TSIndexedAccessType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsIndexedAccessType;
		}
	});
	Object.defineProperty(exports, "TSInferType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsInferType;
		}
	});
	Object.defineProperty(exports, "TSInstantiationExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsInstantiationExpression;
		}
	});
	Object.defineProperty(exports, "TSInterfaceBody", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsInterfaceBody;
		}
	});
	Object.defineProperty(exports, "TSInterfaceDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsInterfaceDeclaration;
		}
	});
	Object.defineProperty(exports, "TSIntersectionType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsIntersectionType;
		}
	});
	Object.defineProperty(exports, "TSIntrinsicKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsIntrinsicKeyword;
		}
	});
	Object.defineProperty(exports, "TSLiteralType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsLiteralType;
		}
	});
	Object.defineProperty(exports, "TSMappedType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsMappedType;
		}
	});
	Object.defineProperty(exports, "TSMethodSignature", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsMethodSignature;
		}
	});
	Object.defineProperty(exports, "TSModuleBlock", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsModuleBlock;
		}
	});
	Object.defineProperty(exports, "TSModuleDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsModuleDeclaration;
		}
	});
	Object.defineProperty(exports, "TSNamedTupleMember", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNamedTupleMember;
		}
	});
	Object.defineProperty(exports, "TSNamespaceExportDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNamespaceExportDeclaration;
		}
	});
	Object.defineProperty(exports, "TSNeverKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNeverKeyword;
		}
	});
	Object.defineProperty(exports, "TSNonNullExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNonNullExpression;
		}
	});
	Object.defineProperty(exports, "TSNullKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNullKeyword;
		}
	});
	Object.defineProperty(exports, "TSNumberKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsNumberKeyword;
		}
	});
	Object.defineProperty(exports, "TSObjectKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsObjectKeyword;
		}
	});
	Object.defineProperty(exports, "TSOptionalType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsOptionalType;
		}
	});
	Object.defineProperty(exports, "TSParameterProperty", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsParameterProperty;
		}
	});
	Object.defineProperty(exports, "TSParenthesizedType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsParenthesizedType;
		}
	});
	Object.defineProperty(exports, "TSPropertySignature", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsPropertySignature;
		}
	});
	Object.defineProperty(exports, "TSQualifiedName", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsQualifiedName;
		}
	});
	Object.defineProperty(exports, "TSRestType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsRestType;
		}
	});
	Object.defineProperty(exports, "TSSatisfiesExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsSatisfiesExpression;
		}
	});
	Object.defineProperty(exports, "TSStringKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsStringKeyword;
		}
	});
	Object.defineProperty(exports, "TSSymbolKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsSymbolKeyword;
		}
	});
	Object.defineProperty(exports, "TSTemplateLiteralType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTemplateLiteralType;
		}
	});
	Object.defineProperty(exports, "TSThisType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsThisType;
		}
	});
	Object.defineProperty(exports, "TSTupleType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTupleType;
		}
	});
	Object.defineProperty(exports, "TSTypeAliasDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeAliasDeclaration;
		}
	});
	Object.defineProperty(exports, "TSTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "TSTypeAssertion", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeAssertion;
		}
	});
	Object.defineProperty(exports, "TSTypeLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeLiteral;
		}
	});
	Object.defineProperty(exports, "TSTypeOperator", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeOperator;
		}
	});
	Object.defineProperty(exports, "TSTypeParameter", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeParameter;
		}
	});
	Object.defineProperty(exports, "TSTypeParameterDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeParameterDeclaration;
		}
	});
	Object.defineProperty(exports, "TSTypeParameterInstantiation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeParameterInstantiation;
		}
	});
	Object.defineProperty(exports, "TSTypePredicate", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypePredicate;
		}
	});
	Object.defineProperty(exports, "TSTypeQuery", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeQuery;
		}
	});
	Object.defineProperty(exports, "TSTypeReference", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsTypeReference;
		}
	});
	Object.defineProperty(exports, "TSUndefinedKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsUndefinedKeyword;
		}
	});
	Object.defineProperty(exports, "TSUnionType", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsUnionType;
		}
	});
	Object.defineProperty(exports, "TSUnknownKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsUnknownKeyword;
		}
	});
	Object.defineProperty(exports, "TSVoidKeyword", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tsVoidKeyword;
		}
	});
	Object.defineProperty(exports, "TaggedTemplateExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.taggedTemplateExpression;
		}
	});
	Object.defineProperty(exports, "TemplateElement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.templateElement;
		}
	});
	Object.defineProperty(exports, "TemplateLiteral", {
		enumerable: true,
		get: function() {
			return _lowercase$1.templateLiteral;
		}
	});
	Object.defineProperty(exports, "ThisExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.thisExpression;
		}
	});
	Object.defineProperty(exports, "ThisTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.thisTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "ThrowStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.throwStatement;
		}
	});
	Object.defineProperty(exports, "TopicReference", {
		enumerable: true,
		get: function() {
			return _lowercase$1.topicReference;
		}
	});
	Object.defineProperty(exports, "TryStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tryStatement;
		}
	});
	Object.defineProperty(exports, "TupleExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tupleExpression;
		}
	});
	Object.defineProperty(exports, "TupleTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.tupleTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "TypeAlias", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeAlias;
		}
	});
	Object.defineProperty(exports, "TypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeAnnotation;
		}
	});
	Object.defineProperty(exports, "TypeCastExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeCastExpression;
		}
	});
	Object.defineProperty(exports, "TypeParameter", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeParameter;
		}
	});
	Object.defineProperty(exports, "TypeParameterDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeParameterDeclaration;
		}
	});
	Object.defineProperty(exports, "TypeParameterInstantiation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeParameterInstantiation;
		}
	});
	Object.defineProperty(exports, "TypeofTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.typeofTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "UnaryExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.unaryExpression;
		}
	});
	Object.defineProperty(exports, "UnionTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.unionTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "UpdateExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.updateExpression;
		}
	});
	Object.defineProperty(exports, "V8IntrinsicIdentifier", {
		enumerable: true,
		get: function() {
			return _lowercase$1.v8IntrinsicIdentifier;
		}
	});
	Object.defineProperty(exports, "VariableDeclaration", {
		enumerable: true,
		get: function() {
			return _lowercase$1.variableDeclaration;
		}
	});
	Object.defineProperty(exports, "VariableDeclarator", {
		enumerable: true,
		get: function() {
			return _lowercase$1.variableDeclarator;
		}
	});
	Object.defineProperty(exports, "Variance", {
		enumerable: true,
		get: function() {
			return _lowercase$1.variance;
		}
	});
	Object.defineProperty(exports, "VoidTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _lowercase$1.voidTypeAnnotation;
		}
	});
	Object.defineProperty(exports, "WhileStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.whileStatement;
		}
	});
	Object.defineProperty(exports, "WithStatement", {
		enumerable: true,
		get: function() {
			return _lowercase$1.withStatement;
		}
	});
	Object.defineProperty(exports, "YieldExpression", {
		enumerable: true,
		get: function() {
			return _lowercase$1.yieldExpression;
		}
	});
	var _lowercase$1 = require_lowercase();
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/generated/index.js
var require_generated$2 = __commonJS({ "node_modules/@babel/types/lib/builders/generated/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _lowercase = require_lowercase();
	Object.keys(_lowercase).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _lowercase[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _lowercase[key];
			}
		});
	});
	var _uppercase = require_uppercase();
	Object.keys(_uppercase).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _uppercase[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _uppercase[key];
			}
		});
	});
} });

//#endregion
//#region node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js
var require_cleanJSXElementLiteralChild = __commonJS({ "node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = cleanJSXElementLiteralChild;
	var _index$49 = require_generated$2();
	var _index2$11 = require_lib$4();
	function cleanJSXElementLiteralChild(child, args) {
		const lines = child.value.split(/\r\n|\n|\r/);
		let lastNonEmptyLine = 0;
		for (let i$6 = 0; i$6 < lines.length; i$6++) if (/[^ \t]/.exec(lines[i$6])) lastNonEmptyLine = i$6;
		let str$4 = "";
		for (let i$6 = 0; i$6 < lines.length; i$6++) {
			const line = lines[i$6];
			const isFirstLine = i$6 === 0;
			const isLastLine = i$6 === lines.length - 1;
			const isLastNonEmptyLine = i$6 === lastNonEmptyLine;
			let trimmedLine = line.replace(/\t/g, " ");
			if (!isFirstLine) trimmedLine = trimmedLine.replace(/^ +/, "");
			if (!isLastLine) trimmedLine = trimmedLine.replace(/ +$/, "");
			if (trimmedLine) {
				if (!isLastNonEmptyLine) trimmedLine += " ";
				str$4 += trimmedLine;
			}
		}
		if (str$4) args.push((0, _index2$11.inherits)((0, _index$49.stringLiteral)(str$4), child));
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/react/buildChildren.js
var require_buildChildren = __commonJS({ "node_modules/@babel/types/lib/builders/react/buildChildren.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = buildChildren;
	var _index$48 = require_generated$3();
	var _cleanJSXElementLiteralChild = require_cleanJSXElementLiteralChild();
	function buildChildren(node) {
		const elements = [];
		for (let i$6 = 0; i$6 < node.children.length; i$6++) {
			let child = node.children[i$6];
			if ((0, _index$48.isJSXText)(child)) {
				(0, _cleanJSXElementLiteralChild.default)(child, elements);
				continue;
			}
			if ((0, _index$48.isJSXExpressionContainer)(child)) child = child.expression;
			if ((0, _index$48.isJSXEmptyExpression)(child)) continue;
			elements.push(child);
		}
		return elements;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isNode.js
var require_isNode = __commonJS({ "node_modules/@babel/types/lib/validators/isNode.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isNode;
	var _index$47 = require_definitions();
	function isNode(node) {
		return !!(node && _index$47.VISITOR_KEYS[node.type]);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/asserts/assertNode.js
var require_assertNode = __commonJS({ "node_modules/@babel/types/lib/asserts/assertNode.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = assertNode;
	var _isNode$1 = require_isNode();
	function assertNode(node) {
		if (!(0, _isNode$1.default)(node)) {
			var _node$type;
			const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
			throw new TypeError(`Not a valid node of type "${type}"`);
		}
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/asserts/generated/index.js
var require_generated$1 = __commonJS({ "node_modules/@babel/types/lib/asserts/generated/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.assertAccessor = assertAccessor;
	exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
	exports.assertArgumentPlaceholder = assertArgumentPlaceholder;
	exports.assertArrayExpression = assertArrayExpression;
	exports.assertArrayPattern = assertArrayPattern;
	exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
	exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
	exports.assertAssignmentExpression = assertAssignmentExpression;
	exports.assertAssignmentPattern = assertAssignmentPattern;
	exports.assertAwaitExpression = assertAwaitExpression;
	exports.assertBigIntLiteral = assertBigIntLiteral;
	exports.assertBinary = assertBinary;
	exports.assertBinaryExpression = assertBinaryExpression;
	exports.assertBindExpression = assertBindExpression;
	exports.assertBlock = assertBlock;
	exports.assertBlockParent = assertBlockParent;
	exports.assertBlockStatement = assertBlockStatement;
	exports.assertBooleanLiteral = assertBooleanLiteral;
	exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
	exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
	exports.assertBreakStatement = assertBreakStatement;
	exports.assertCallExpression = assertCallExpression;
	exports.assertCatchClause = assertCatchClause;
	exports.assertClass = assertClass;
	exports.assertClassAccessorProperty = assertClassAccessorProperty;
	exports.assertClassBody = assertClassBody;
	exports.assertClassDeclaration = assertClassDeclaration;
	exports.assertClassExpression = assertClassExpression;
	exports.assertClassImplements = assertClassImplements;
	exports.assertClassMethod = assertClassMethod;
	exports.assertClassPrivateMethod = assertClassPrivateMethod;
	exports.assertClassPrivateProperty = assertClassPrivateProperty;
	exports.assertClassProperty = assertClassProperty;
	exports.assertCompletionStatement = assertCompletionStatement;
	exports.assertConditional = assertConditional;
	exports.assertConditionalExpression = assertConditionalExpression;
	exports.assertContinueStatement = assertContinueStatement;
	exports.assertDebuggerStatement = assertDebuggerStatement;
	exports.assertDecimalLiteral = assertDecimalLiteral;
	exports.assertDeclaration = assertDeclaration;
	exports.assertDeclareClass = assertDeclareClass;
	exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
	exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
	exports.assertDeclareFunction = assertDeclareFunction;
	exports.assertDeclareInterface = assertDeclareInterface;
	exports.assertDeclareModule = assertDeclareModule;
	exports.assertDeclareModuleExports = assertDeclareModuleExports;
	exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
	exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
	exports.assertDeclareVariable = assertDeclareVariable;
	exports.assertDeclaredPredicate = assertDeclaredPredicate;
	exports.assertDecorator = assertDecorator;
	exports.assertDirective = assertDirective;
	exports.assertDirectiveLiteral = assertDirectiveLiteral;
	exports.assertDoExpression = assertDoExpression;
	exports.assertDoWhileStatement = assertDoWhileStatement;
	exports.assertEmptyStatement = assertEmptyStatement;
	exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
	exports.assertEnumBody = assertEnumBody;
	exports.assertEnumBooleanBody = assertEnumBooleanBody;
	exports.assertEnumBooleanMember = assertEnumBooleanMember;
	exports.assertEnumDeclaration = assertEnumDeclaration;
	exports.assertEnumDefaultedMember = assertEnumDefaultedMember;
	exports.assertEnumMember = assertEnumMember;
	exports.assertEnumNumberBody = assertEnumNumberBody;
	exports.assertEnumNumberMember = assertEnumNumberMember;
	exports.assertEnumStringBody = assertEnumStringBody;
	exports.assertEnumStringMember = assertEnumStringMember;
	exports.assertEnumSymbolBody = assertEnumSymbolBody;
	exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
	exports.assertExportAllDeclaration = assertExportAllDeclaration;
	exports.assertExportDeclaration = assertExportDeclaration;
	exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
	exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
	exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
	exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
	exports.assertExportSpecifier = assertExportSpecifier;
	exports.assertExpression = assertExpression$1;
	exports.assertExpressionStatement = assertExpressionStatement$1;
	exports.assertExpressionWrapper = assertExpressionWrapper;
	exports.assertFile = assertFile;
	exports.assertFlow = assertFlow;
	exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
	exports.assertFlowDeclaration = assertFlowDeclaration;
	exports.assertFlowPredicate = assertFlowPredicate;
	exports.assertFlowType = assertFlowType;
	exports.assertFor = assertFor;
	exports.assertForInStatement = assertForInStatement;
	exports.assertForOfStatement = assertForOfStatement;
	exports.assertForStatement = assertForStatement;
	exports.assertForXStatement = assertForXStatement;
	exports.assertFunction = assertFunction;
	exports.assertFunctionDeclaration = assertFunctionDeclaration;
	exports.assertFunctionExpression = assertFunctionExpression;
	exports.assertFunctionParent = assertFunctionParent;
	exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
	exports.assertFunctionTypeParam = assertFunctionTypeParam;
	exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
	exports.assertIdentifier = assertIdentifier;
	exports.assertIfStatement = assertIfStatement;
	exports.assertImmutable = assertImmutable;
	exports.assertImport = assertImport;
	exports.assertImportAttribute = assertImportAttribute;
	exports.assertImportDeclaration = assertImportDeclaration;
	exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
	exports.assertImportExpression = assertImportExpression;
	exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
	exports.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
	exports.assertImportSpecifier = assertImportSpecifier;
	exports.assertIndexedAccessType = assertIndexedAccessType;
	exports.assertInferredPredicate = assertInferredPredicate;
	exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
	exports.assertInterfaceExtends = assertInterfaceExtends;
	exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
	exports.assertInterpreterDirective = assertInterpreterDirective;
	exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
	exports.assertJSX = assertJSX;
	exports.assertJSXAttribute = assertJSXAttribute;
	exports.assertJSXClosingElement = assertJSXClosingElement;
	exports.assertJSXClosingFragment = assertJSXClosingFragment;
	exports.assertJSXElement = assertJSXElement;
	exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
	exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
	exports.assertJSXFragment = assertJSXFragment;
	exports.assertJSXIdentifier = assertJSXIdentifier;
	exports.assertJSXMemberExpression = assertJSXMemberExpression;
	exports.assertJSXNamespacedName = assertJSXNamespacedName;
	exports.assertJSXOpeningElement = assertJSXOpeningElement;
	exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
	exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
	exports.assertJSXSpreadChild = assertJSXSpreadChild;
	exports.assertJSXText = assertJSXText;
	exports.assertLVal = assertLVal;
	exports.assertLabeledStatement = assertLabeledStatement;
	exports.assertLiteral = assertLiteral;
	exports.assertLogicalExpression = assertLogicalExpression;
	exports.assertLoop = assertLoop;
	exports.assertMemberExpression = assertMemberExpression;
	exports.assertMetaProperty = assertMetaProperty;
	exports.assertMethod = assertMethod;
	exports.assertMiscellaneous = assertMiscellaneous;
	exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
	exports.assertModuleDeclaration = assertModuleDeclaration;
	exports.assertModuleExpression = assertModuleExpression;
	exports.assertModuleSpecifier = assertModuleSpecifier;
	exports.assertNewExpression = assertNewExpression;
	exports.assertNoop = assertNoop;
	exports.assertNullLiteral = assertNullLiteral;
	exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
	exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
	exports.assertNumberLiteral = assertNumberLiteral;
	exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
	exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
	exports.assertNumericLiteral = assertNumericLiteral;
	exports.assertObjectExpression = assertObjectExpression;
	exports.assertObjectMember = assertObjectMember;
	exports.assertObjectMethod = assertObjectMethod;
	exports.assertObjectPattern = assertObjectPattern;
	exports.assertObjectProperty = assertObjectProperty;
	exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
	exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
	exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
	exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
	exports.assertObjectTypeProperty = assertObjectTypeProperty;
	exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
	exports.assertOpaqueType = assertOpaqueType;
	exports.assertOptionalCallExpression = assertOptionalCallExpression;
	exports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
	exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
	exports.assertParenthesizedExpression = assertParenthesizedExpression;
	exports.assertPattern = assertPattern;
	exports.assertPatternLike = assertPatternLike;
	exports.assertPipelineBareFunction = assertPipelineBareFunction;
	exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
	exports.assertPipelineTopicExpression = assertPipelineTopicExpression;
	exports.assertPlaceholder = assertPlaceholder;
	exports.assertPrivate = assertPrivate;
	exports.assertPrivateName = assertPrivateName;
	exports.assertProgram = assertProgram;
	exports.assertProperty = assertProperty;
	exports.assertPureish = assertPureish;
	exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
	exports.assertRecordExpression = assertRecordExpression;
	exports.assertRegExpLiteral = assertRegExpLiteral;
	exports.assertRegexLiteral = assertRegexLiteral;
	exports.assertRestElement = assertRestElement;
	exports.assertRestProperty = assertRestProperty;
	exports.assertReturnStatement = assertReturnStatement;
	exports.assertScopable = assertScopable;
	exports.assertSequenceExpression = assertSequenceExpression;
	exports.assertSpreadElement = assertSpreadElement;
	exports.assertSpreadProperty = assertSpreadProperty;
	exports.assertStandardized = assertStandardized;
	exports.assertStatement = assertStatement;
	exports.assertStaticBlock = assertStaticBlock;
	exports.assertStringLiteral = assertStringLiteral;
	exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
	exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
	exports.assertSuper = assertSuper;
	exports.assertSwitchCase = assertSwitchCase;
	exports.assertSwitchStatement = assertSwitchStatement;
	exports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
	exports.assertTSAnyKeyword = assertTSAnyKeyword;
	exports.assertTSArrayType = assertTSArrayType;
	exports.assertTSAsExpression = assertTSAsExpression;
	exports.assertTSBaseType = assertTSBaseType;
	exports.assertTSBigIntKeyword = assertTSBigIntKeyword;
	exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
	exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
	exports.assertTSConditionalType = assertTSConditionalType;
	exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
	exports.assertTSConstructorType = assertTSConstructorType;
	exports.assertTSDeclareFunction = assertTSDeclareFunction;
	exports.assertTSDeclareMethod = assertTSDeclareMethod;
	exports.assertTSEntityName = assertTSEntityName;
	exports.assertTSEnumBody = assertTSEnumBody;
	exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
	exports.assertTSEnumMember = assertTSEnumMember;
	exports.assertTSExportAssignment = assertTSExportAssignment;
	exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
	exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
	exports.assertTSFunctionType = assertTSFunctionType;
	exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
	exports.assertTSImportType = assertTSImportType;
	exports.assertTSIndexSignature = assertTSIndexSignature;
	exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
	exports.assertTSInferType = assertTSInferType;
	exports.assertTSInstantiationExpression = assertTSInstantiationExpression;
	exports.assertTSInterfaceBody = assertTSInterfaceBody;
	exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
	exports.assertTSIntersectionType = assertTSIntersectionType;
	exports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
	exports.assertTSLiteralType = assertTSLiteralType;
	exports.assertTSMappedType = assertTSMappedType;
	exports.assertTSMethodSignature = assertTSMethodSignature;
	exports.assertTSModuleBlock = assertTSModuleBlock;
	exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
	exports.assertTSNamedTupleMember = assertTSNamedTupleMember;
	exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
	exports.assertTSNeverKeyword = assertTSNeverKeyword;
	exports.assertTSNonNullExpression = assertTSNonNullExpression;
	exports.assertTSNullKeyword = assertTSNullKeyword;
	exports.assertTSNumberKeyword = assertTSNumberKeyword;
	exports.assertTSObjectKeyword = assertTSObjectKeyword;
	exports.assertTSOptionalType = assertTSOptionalType;
	exports.assertTSParameterProperty = assertTSParameterProperty;
	exports.assertTSParenthesizedType = assertTSParenthesizedType;
	exports.assertTSPropertySignature = assertTSPropertySignature;
	exports.assertTSQualifiedName = assertTSQualifiedName;
	exports.assertTSRestType = assertTSRestType;
	exports.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
	exports.assertTSStringKeyword = assertTSStringKeyword;
	exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
	exports.assertTSTemplateLiteralType = assertTSTemplateLiteralType;
	exports.assertTSThisType = assertTSThisType;
	exports.assertTSTupleType = assertTSTupleType;
	exports.assertTSType = assertTSType;
	exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
	exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
	exports.assertTSTypeAssertion = assertTSTypeAssertion;
	exports.assertTSTypeElement = assertTSTypeElement;
	exports.assertTSTypeLiteral = assertTSTypeLiteral;
	exports.assertTSTypeOperator = assertTSTypeOperator;
	exports.assertTSTypeParameter = assertTSTypeParameter;
	exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
	exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
	exports.assertTSTypePredicate = assertTSTypePredicate;
	exports.assertTSTypeQuery = assertTSTypeQuery;
	exports.assertTSTypeReference = assertTSTypeReference;
	exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
	exports.assertTSUnionType = assertTSUnionType;
	exports.assertTSUnknownKeyword = assertTSUnknownKeyword;
	exports.assertTSVoidKeyword = assertTSVoidKeyword;
	exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
	exports.assertTemplateElement = assertTemplateElement;
	exports.assertTemplateLiteral = assertTemplateLiteral;
	exports.assertTerminatorless = assertTerminatorless;
	exports.assertThisExpression = assertThisExpression;
	exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
	exports.assertThrowStatement = assertThrowStatement;
	exports.assertTopicReference = assertTopicReference;
	exports.assertTryStatement = assertTryStatement;
	exports.assertTupleExpression = assertTupleExpression;
	exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
	exports.assertTypeAlias = assertTypeAlias;
	exports.assertTypeAnnotation = assertTypeAnnotation;
	exports.assertTypeCastExpression = assertTypeCastExpression;
	exports.assertTypeParameter = assertTypeParameter;
	exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
	exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
	exports.assertTypeScript = assertTypeScript;
	exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
	exports.assertUnaryExpression = assertUnaryExpression;
	exports.assertUnaryLike = assertUnaryLike;
	exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
	exports.assertUpdateExpression = assertUpdateExpression;
	exports.assertUserWhitespacable = assertUserWhitespacable;
	exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
	exports.assertVariableDeclaration = assertVariableDeclaration;
	exports.assertVariableDeclarator = assertVariableDeclarator;
	exports.assertVariance = assertVariance;
	exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
	exports.assertWhile = assertWhile;
	exports.assertWhileStatement = assertWhileStatement;
	exports.assertWithStatement = assertWithStatement;
	exports.assertYieldExpression = assertYieldExpression;
	var _is$1 = require_is();
	var _deprecationWarning$1 = require_deprecationWarning();
	function assert$2(type, node, opts) {
		if (!(0, _is$1.default)(type, node, opts)) throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
	}
	function assertArrayExpression(node, opts) {
		assert$2("ArrayExpression", node, opts);
	}
	function assertAssignmentExpression(node, opts) {
		assert$2("AssignmentExpression", node, opts);
	}
	function assertBinaryExpression(node, opts) {
		assert$2("BinaryExpression", node, opts);
	}
	function assertInterpreterDirective(node, opts) {
		assert$2("InterpreterDirective", node, opts);
	}
	function assertDirective(node, opts) {
		assert$2("Directive", node, opts);
	}
	function assertDirectiveLiteral(node, opts) {
		assert$2("DirectiveLiteral", node, opts);
	}
	function assertBlockStatement(node, opts) {
		assert$2("BlockStatement", node, opts);
	}
	function assertBreakStatement(node, opts) {
		assert$2("BreakStatement", node, opts);
	}
	function assertCallExpression(node, opts) {
		assert$2("CallExpression", node, opts);
	}
	function assertCatchClause(node, opts) {
		assert$2("CatchClause", node, opts);
	}
	function assertConditionalExpression(node, opts) {
		assert$2("ConditionalExpression", node, opts);
	}
	function assertContinueStatement(node, opts) {
		assert$2("ContinueStatement", node, opts);
	}
	function assertDebuggerStatement(node, opts) {
		assert$2("DebuggerStatement", node, opts);
	}
	function assertDoWhileStatement(node, opts) {
		assert$2("DoWhileStatement", node, opts);
	}
	function assertEmptyStatement(node, opts) {
		assert$2("EmptyStatement", node, opts);
	}
	function assertExpressionStatement$1(node, opts) {
		assert$2("ExpressionStatement", node, opts);
	}
	function assertFile(node, opts) {
		assert$2("File", node, opts);
	}
	function assertForInStatement(node, opts) {
		assert$2("ForInStatement", node, opts);
	}
	function assertForStatement(node, opts) {
		assert$2("ForStatement", node, opts);
	}
	function assertFunctionDeclaration(node, opts) {
		assert$2("FunctionDeclaration", node, opts);
	}
	function assertFunctionExpression(node, opts) {
		assert$2("FunctionExpression", node, opts);
	}
	function assertIdentifier(node, opts) {
		assert$2("Identifier", node, opts);
	}
	function assertIfStatement(node, opts) {
		assert$2("IfStatement", node, opts);
	}
	function assertLabeledStatement(node, opts) {
		assert$2("LabeledStatement", node, opts);
	}
	function assertStringLiteral(node, opts) {
		assert$2("StringLiteral", node, opts);
	}
	function assertNumericLiteral(node, opts) {
		assert$2("NumericLiteral", node, opts);
	}
	function assertNullLiteral(node, opts) {
		assert$2("NullLiteral", node, opts);
	}
	function assertBooleanLiteral(node, opts) {
		assert$2("BooleanLiteral", node, opts);
	}
	function assertRegExpLiteral(node, opts) {
		assert$2("RegExpLiteral", node, opts);
	}
	function assertLogicalExpression(node, opts) {
		assert$2("LogicalExpression", node, opts);
	}
	function assertMemberExpression(node, opts) {
		assert$2("MemberExpression", node, opts);
	}
	function assertNewExpression(node, opts) {
		assert$2("NewExpression", node, opts);
	}
	function assertProgram(node, opts) {
		assert$2("Program", node, opts);
	}
	function assertObjectExpression(node, opts) {
		assert$2("ObjectExpression", node, opts);
	}
	function assertObjectMethod(node, opts) {
		assert$2("ObjectMethod", node, opts);
	}
	function assertObjectProperty(node, opts) {
		assert$2("ObjectProperty", node, opts);
	}
	function assertRestElement(node, opts) {
		assert$2("RestElement", node, opts);
	}
	function assertReturnStatement(node, opts) {
		assert$2("ReturnStatement", node, opts);
	}
	function assertSequenceExpression(node, opts) {
		assert$2("SequenceExpression", node, opts);
	}
	function assertParenthesizedExpression(node, opts) {
		assert$2("ParenthesizedExpression", node, opts);
	}
	function assertSwitchCase(node, opts) {
		assert$2("SwitchCase", node, opts);
	}
	function assertSwitchStatement(node, opts) {
		assert$2("SwitchStatement", node, opts);
	}
	function assertThisExpression(node, opts) {
		assert$2("ThisExpression", node, opts);
	}
	function assertThrowStatement(node, opts) {
		assert$2("ThrowStatement", node, opts);
	}
	function assertTryStatement(node, opts) {
		assert$2("TryStatement", node, opts);
	}
	function assertUnaryExpression(node, opts) {
		assert$2("UnaryExpression", node, opts);
	}
	function assertUpdateExpression(node, opts) {
		assert$2("UpdateExpression", node, opts);
	}
	function assertVariableDeclaration(node, opts) {
		assert$2("VariableDeclaration", node, opts);
	}
	function assertVariableDeclarator(node, opts) {
		assert$2("VariableDeclarator", node, opts);
	}
	function assertWhileStatement(node, opts) {
		assert$2("WhileStatement", node, opts);
	}
	function assertWithStatement(node, opts) {
		assert$2("WithStatement", node, opts);
	}
	function assertAssignmentPattern(node, opts) {
		assert$2("AssignmentPattern", node, opts);
	}
	function assertArrayPattern(node, opts) {
		assert$2("ArrayPattern", node, opts);
	}
	function assertArrowFunctionExpression(node, opts) {
		assert$2("ArrowFunctionExpression", node, opts);
	}
	function assertClassBody(node, opts) {
		assert$2("ClassBody", node, opts);
	}
	function assertClassExpression(node, opts) {
		assert$2("ClassExpression", node, opts);
	}
	function assertClassDeclaration(node, opts) {
		assert$2("ClassDeclaration", node, opts);
	}
	function assertExportAllDeclaration(node, opts) {
		assert$2("ExportAllDeclaration", node, opts);
	}
	function assertExportDefaultDeclaration(node, opts) {
		assert$2("ExportDefaultDeclaration", node, opts);
	}
	function assertExportNamedDeclaration(node, opts) {
		assert$2("ExportNamedDeclaration", node, opts);
	}
	function assertExportSpecifier(node, opts) {
		assert$2("ExportSpecifier", node, opts);
	}
	function assertForOfStatement(node, opts) {
		assert$2("ForOfStatement", node, opts);
	}
	function assertImportDeclaration(node, opts) {
		assert$2("ImportDeclaration", node, opts);
	}
	function assertImportDefaultSpecifier(node, opts) {
		assert$2("ImportDefaultSpecifier", node, opts);
	}
	function assertImportNamespaceSpecifier(node, opts) {
		assert$2("ImportNamespaceSpecifier", node, opts);
	}
	function assertImportSpecifier(node, opts) {
		assert$2("ImportSpecifier", node, opts);
	}
	function assertImportExpression(node, opts) {
		assert$2("ImportExpression", node, opts);
	}
	function assertMetaProperty(node, opts) {
		assert$2("MetaProperty", node, opts);
	}
	function assertClassMethod(node, opts) {
		assert$2("ClassMethod", node, opts);
	}
	function assertObjectPattern(node, opts) {
		assert$2("ObjectPattern", node, opts);
	}
	function assertSpreadElement(node, opts) {
		assert$2("SpreadElement", node, opts);
	}
	function assertSuper(node, opts) {
		assert$2("Super", node, opts);
	}
	function assertTaggedTemplateExpression(node, opts) {
		assert$2("TaggedTemplateExpression", node, opts);
	}
	function assertTemplateElement(node, opts) {
		assert$2("TemplateElement", node, opts);
	}
	function assertTemplateLiteral(node, opts) {
		assert$2("TemplateLiteral", node, opts);
	}
	function assertYieldExpression(node, opts) {
		assert$2("YieldExpression", node, opts);
	}
	function assertAwaitExpression(node, opts) {
		assert$2("AwaitExpression", node, opts);
	}
	function assertImport(node, opts) {
		assert$2("Import", node, opts);
	}
	function assertBigIntLiteral(node, opts) {
		assert$2("BigIntLiteral", node, opts);
	}
	function assertExportNamespaceSpecifier(node, opts) {
		assert$2("ExportNamespaceSpecifier", node, opts);
	}
	function assertOptionalMemberExpression(node, opts) {
		assert$2("OptionalMemberExpression", node, opts);
	}
	function assertOptionalCallExpression(node, opts) {
		assert$2("OptionalCallExpression", node, opts);
	}
	function assertClassProperty(node, opts) {
		assert$2("ClassProperty", node, opts);
	}
	function assertClassAccessorProperty(node, opts) {
		assert$2("ClassAccessorProperty", node, opts);
	}
	function assertClassPrivateProperty(node, opts) {
		assert$2("ClassPrivateProperty", node, opts);
	}
	function assertClassPrivateMethod(node, opts) {
		assert$2("ClassPrivateMethod", node, opts);
	}
	function assertPrivateName(node, opts) {
		assert$2("PrivateName", node, opts);
	}
	function assertStaticBlock(node, opts) {
		assert$2("StaticBlock", node, opts);
	}
	function assertImportAttribute(node, opts) {
		assert$2("ImportAttribute", node, opts);
	}
	function assertAnyTypeAnnotation(node, opts) {
		assert$2("AnyTypeAnnotation", node, opts);
	}
	function assertArrayTypeAnnotation(node, opts) {
		assert$2("ArrayTypeAnnotation", node, opts);
	}
	function assertBooleanTypeAnnotation(node, opts) {
		assert$2("BooleanTypeAnnotation", node, opts);
	}
	function assertBooleanLiteralTypeAnnotation(node, opts) {
		assert$2("BooleanLiteralTypeAnnotation", node, opts);
	}
	function assertNullLiteralTypeAnnotation(node, opts) {
		assert$2("NullLiteralTypeAnnotation", node, opts);
	}
	function assertClassImplements(node, opts) {
		assert$2("ClassImplements", node, opts);
	}
	function assertDeclareClass(node, opts) {
		assert$2("DeclareClass", node, opts);
	}
	function assertDeclareFunction(node, opts) {
		assert$2("DeclareFunction", node, opts);
	}
	function assertDeclareInterface(node, opts) {
		assert$2("DeclareInterface", node, opts);
	}
	function assertDeclareModule(node, opts) {
		assert$2("DeclareModule", node, opts);
	}
	function assertDeclareModuleExports(node, opts) {
		assert$2("DeclareModuleExports", node, opts);
	}
	function assertDeclareTypeAlias(node, opts) {
		assert$2("DeclareTypeAlias", node, opts);
	}
	function assertDeclareOpaqueType(node, opts) {
		assert$2("DeclareOpaqueType", node, opts);
	}
	function assertDeclareVariable(node, opts) {
		assert$2("DeclareVariable", node, opts);
	}
	function assertDeclareExportDeclaration(node, opts) {
		assert$2("DeclareExportDeclaration", node, opts);
	}
	function assertDeclareExportAllDeclaration(node, opts) {
		assert$2("DeclareExportAllDeclaration", node, opts);
	}
	function assertDeclaredPredicate(node, opts) {
		assert$2("DeclaredPredicate", node, opts);
	}
	function assertExistsTypeAnnotation(node, opts) {
		assert$2("ExistsTypeAnnotation", node, opts);
	}
	function assertFunctionTypeAnnotation(node, opts) {
		assert$2("FunctionTypeAnnotation", node, opts);
	}
	function assertFunctionTypeParam(node, opts) {
		assert$2("FunctionTypeParam", node, opts);
	}
	function assertGenericTypeAnnotation(node, opts) {
		assert$2("GenericTypeAnnotation", node, opts);
	}
	function assertInferredPredicate(node, opts) {
		assert$2("InferredPredicate", node, opts);
	}
	function assertInterfaceExtends(node, opts) {
		assert$2("InterfaceExtends", node, opts);
	}
	function assertInterfaceDeclaration(node, opts) {
		assert$2("InterfaceDeclaration", node, opts);
	}
	function assertInterfaceTypeAnnotation(node, opts) {
		assert$2("InterfaceTypeAnnotation", node, opts);
	}
	function assertIntersectionTypeAnnotation(node, opts) {
		assert$2("IntersectionTypeAnnotation", node, opts);
	}
	function assertMixedTypeAnnotation(node, opts) {
		assert$2("MixedTypeAnnotation", node, opts);
	}
	function assertEmptyTypeAnnotation(node, opts) {
		assert$2("EmptyTypeAnnotation", node, opts);
	}
	function assertNullableTypeAnnotation(node, opts) {
		assert$2("NullableTypeAnnotation", node, opts);
	}
	function assertNumberLiteralTypeAnnotation(node, opts) {
		assert$2("NumberLiteralTypeAnnotation", node, opts);
	}
	function assertNumberTypeAnnotation(node, opts) {
		assert$2("NumberTypeAnnotation", node, opts);
	}
	function assertObjectTypeAnnotation(node, opts) {
		assert$2("ObjectTypeAnnotation", node, opts);
	}
	function assertObjectTypeInternalSlot(node, opts) {
		assert$2("ObjectTypeInternalSlot", node, opts);
	}
	function assertObjectTypeCallProperty(node, opts) {
		assert$2("ObjectTypeCallProperty", node, opts);
	}
	function assertObjectTypeIndexer(node, opts) {
		assert$2("ObjectTypeIndexer", node, opts);
	}
	function assertObjectTypeProperty(node, opts) {
		assert$2("ObjectTypeProperty", node, opts);
	}
	function assertObjectTypeSpreadProperty(node, opts) {
		assert$2("ObjectTypeSpreadProperty", node, opts);
	}
	function assertOpaqueType(node, opts) {
		assert$2("OpaqueType", node, opts);
	}
	function assertQualifiedTypeIdentifier(node, opts) {
		assert$2("QualifiedTypeIdentifier", node, opts);
	}
	function assertStringLiteralTypeAnnotation(node, opts) {
		assert$2("StringLiteralTypeAnnotation", node, opts);
	}
	function assertStringTypeAnnotation(node, opts) {
		assert$2("StringTypeAnnotation", node, opts);
	}
	function assertSymbolTypeAnnotation(node, opts) {
		assert$2("SymbolTypeAnnotation", node, opts);
	}
	function assertThisTypeAnnotation(node, opts) {
		assert$2("ThisTypeAnnotation", node, opts);
	}
	function assertTupleTypeAnnotation(node, opts) {
		assert$2("TupleTypeAnnotation", node, opts);
	}
	function assertTypeofTypeAnnotation(node, opts) {
		assert$2("TypeofTypeAnnotation", node, opts);
	}
	function assertTypeAlias(node, opts) {
		assert$2("TypeAlias", node, opts);
	}
	function assertTypeAnnotation(node, opts) {
		assert$2("TypeAnnotation", node, opts);
	}
	function assertTypeCastExpression(node, opts) {
		assert$2("TypeCastExpression", node, opts);
	}
	function assertTypeParameter(node, opts) {
		assert$2("TypeParameter", node, opts);
	}
	function assertTypeParameterDeclaration(node, opts) {
		assert$2("TypeParameterDeclaration", node, opts);
	}
	function assertTypeParameterInstantiation(node, opts) {
		assert$2("TypeParameterInstantiation", node, opts);
	}
	function assertUnionTypeAnnotation(node, opts) {
		assert$2("UnionTypeAnnotation", node, opts);
	}
	function assertVariance(node, opts) {
		assert$2("Variance", node, opts);
	}
	function assertVoidTypeAnnotation(node, opts) {
		assert$2("VoidTypeAnnotation", node, opts);
	}
	function assertEnumDeclaration(node, opts) {
		assert$2("EnumDeclaration", node, opts);
	}
	function assertEnumBooleanBody(node, opts) {
		assert$2("EnumBooleanBody", node, opts);
	}
	function assertEnumNumberBody(node, opts) {
		assert$2("EnumNumberBody", node, opts);
	}
	function assertEnumStringBody(node, opts) {
		assert$2("EnumStringBody", node, opts);
	}
	function assertEnumSymbolBody(node, opts) {
		assert$2("EnumSymbolBody", node, opts);
	}
	function assertEnumBooleanMember(node, opts) {
		assert$2("EnumBooleanMember", node, opts);
	}
	function assertEnumNumberMember(node, opts) {
		assert$2("EnumNumberMember", node, opts);
	}
	function assertEnumStringMember(node, opts) {
		assert$2("EnumStringMember", node, opts);
	}
	function assertEnumDefaultedMember(node, opts) {
		assert$2("EnumDefaultedMember", node, opts);
	}
	function assertIndexedAccessType(node, opts) {
		assert$2("IndexedAccessType", node, opts);
	}
	function assertOptionalIndexedAccessType(node, opts) {
		assert$2("OptionalIndexedAccessType", node, opts);
	}
	function assertJSXAttribute(node, opts) {
		assert$2("JSXAttribute", node, opts);
	}
	function assertJSXClosingElement(node, opts) {
		assert$2("JSXClosingElement", node, opts);
	}
	function assertJSXElement(node, opts) {
		assert$2("JSXElement", node, opts);
	}
	function assertJSXEmptyExpression(node, opts) {
		assert$2("JSXEmptyExpression", node, opts);
	}
	function assertJSXExpressionContainer(node, opts) {
		assert$2("JSXExpressionContainer", node, opts);
	}
	function assertJSXSpreadChild(node, opts) {
		assert$2("JSXSpreadChild", node, opts);
	}
	function assertJSXIdentifier(node, opts) {
		assert$2("JSXIdentifier", node, opts);
	}
	function assertJSXMemberExpression(node, opts) {
		assert$2("JSXMemberExpression", node, opts);
	}
	function assertJSXNamespacedName(node, opts) {
		assert$2("JSXNamespacedName", node, opts);
	}
	function assertJSXOpeningElement(node, opts) {
		assert$2("JSXOpeningElement", node, opts);
	}
	function assertJSXSpreadAttribute(node, opts) {
		assert$2("JSXSpreadAttribute", node, opts);
	}
	function assertJSXText(node, opts) {
		assert$2("JSXText", node, opts);
	}
	function assertJSXFragment(node, opts) {
		assert$2("JSXFragment", node, opts);
	}
	function assertJSXOpeningFragment(node, opts) {
		assert$2("JSXOpeningFragment", node, opts);
	}
	function assertJSXClosingFragment(node, opts) {
		assert$2("JSXClosingFragment", node, opts);
	}
	function assertNoop(node, opts) {
		assert$2("Noop", node, opts);
	}
	function assertPlaceholder(node, opts) {
		assert$2("Placeholder", node, opts);
	}
	function assertV8IntrinsicIdentifier(node, opts) {
		assert$2("V8IntrinsicIdentifier", node, opts);
	}
	function assertArgumentPlaceholder(node, opts) {
		assert$2("ArgumentPlaceholder", node, opts);
	}
	function assertBindExpression(node, opts) {
		assert$2("BindExpression", node, opts);
	}
	function assertDecorator(node, opts) {
		assert$2("Decorator", node, opts);
	}
	function assertDoExpression(node, opts) {
		assert$2("DoExpression", node, opts);
	}
	function assertExportDefaultSpecifier(node, opts) {
		assert$2("ExportDefaultSpecifier", node, opts);
	}
	function assertRecordExpression(node, opts) {
		assert$2("RecordExpression", node, opts);
	}
	function assertTupleExpression(node, opts) {
		assert$2("TupleExpression", node, opts);
	}
	function assertDecimalLiteral(node, opts) {
		assert$2("DecimalLiteral", node, opts);
	}
	function assertModuleExpression(node, opts) {
		assert$2("ModuleExpression", node, opts);
	}
	function assertTopicReference(node, opts) {
		assert$2("TopicReference", node, opts);
	}
	function assertPipelineTopicExpression(node, opts) {
		assert$2("PipelineTopicExpression", node, opts);
	}
	function assertPipelineBareFunction(node, opts) {
		assert$2("PipelineBareFunction", node, opts);
	}
	function assertPipelinePrimaryTopicReference(node, opts) {
		assert$2("PipelinePrimaryTopicReference", node, opts);
	}
	function assertTSParameterProperty(node, opts) {
		assert$2("TSParameterProperty", node, opts);
	}
	function assertTSDeclareFunction(node, opts) {
		assert$2("TSDeclareFunction", node, opts);
	}
	function assertTSDeclareMethod(node, opts) {
		assert$2("TSDeclareMethod", node, opts);
	}
	function assertTSQualifiedName(node, opts) {
		assert$2("TSQualifiedName", node, opts);
	}
	function assertTSCallSignatureDeclaration(node, opts) {
		assert$2("TSCallSignatureDeclaration", node, opts);
	}
	function assertTSConstructSignatureDeclaration(node, opts) {
		assert$2("TSConstructSignatureDeclaration", node, opts);
	}
	function assertTSPropertySignature(node, opts) {
		assert$2("TSPropertySignature", node, opts);
	}
	function assertTSMethodSignature(node, opts) {
		assert$2("TSMethodSignature", node, opts);
	}
	function assertTSIndexSignature(node, opts) {
		assert$2("TSIndexSignature", node, opts);
	}
	function assertTSAnyKeyword(node, opts) {
		assert$2("TSAnyKeyword", node, opts);
	}
	function assertTSBooleanKeyword(node, opts) {
		assert$2("TSBooleanKeyword", node, opts);
	}
	function assertTSBigIntKeyword(node, opts) {
		assert$2("TSBigIntKeyword", node, opts);
	}
	function assertTSIntrinsicKeyword(node, opts) {
		assert$2("TSIntrinsicKeyword", node, opts);
	}
	function assertTSNeverKeyword(node, opts) {
		assert$2("TSNeverKeyword", node, opts);
	}
	function assertTSNullKeyword(node, opts) {
		assert$2("TSNullKeyword", node, opts);
	}
	function assertTSNumberKeyword(node, opts) {
		assert$2("TSNumberKeyword", node, opts);
	}
	function assertTSObjectKeyword(node, opts) {
		assert$2("TSObjectKeyword", node, opts);
	}
	function assertTSStringKeyword(node, opts) {
		assert$2("TSStringKeyword", node, opts);
	}
	function assertTSSymbolKeyword(node, opts) {
		assert$2("TSSymbolKeyword", node, opts);
	}
	function assertTSUndefinedKeyword(node, opts) {
		assert$2("TSUndefinedKeyword", node, opts);
	}
	function assertTSUnknownKeyword(node, opts) {
		assert$2("TSUnknownKeyword", node, opts);
	}
	function assertTSVoidKeyword(node, opts) {
		assert$2("TSVoidKeyword", node, opts);
	}
	function assertTSThisType(node, opts) {
		assert$2("TSThisType", node, opts);
	}
	function assertTSFunctionType(node, opts) {
		assert$2("TSFunctionType", node, opts);
	}
	function assertTSConstructorType(node, opts) {
		assert$2("TSConstructorType", node, opts);
	}
	function assertTSTypeReference(node, opts) {
		assert$2("TSTypeReference", node, opts);
	}
	function assertTSTypePredicate(node, opts) {
		assert$2("TSTypePredicate", node, opts);
	}
	function assertTSTypeQuery(node, opts) {
		assert$2("TSTypeQuery", node, opts);
	}
	function assertTSTypeLiteral(node, opts) {
		assert$2("TSTypeLiteral", node, opts);
	}
	function assertTSArrayType(node, opts) {
		assert$2("TSArrayType", node, opts);
	}
	function assertTSTupleType(node, opts) {
		assert$2("TSTupleType", node, opts);
	}
	function assertTSOptionalType(node, opts) {
		assert$2("TSOptionalType", node, opts);
	}
	function assertTSRestType(node, opts) {
		assert$2("TSRestType", node, opts);
	}
	function assertTSNamedTupleMember(node, opts) {
		assert$2("TSNamedTupleMember", node, opts);
	}
	function assertTSUnionType(node, opts) {
		assert$2("TSUnionType", node, opts);
	}
	function assertTSIntersectionType(node, opts) {
		assert$2("TSIntersectionType", node, opts);
	}
	function assertTSConditionalType(node, opts) {
		assert$2("TSConditionalType", node, opts);
	}
	function assertTSInferType(node, opts) {
		assert$2("TSInferType", node, opts);
	}
	function assertTSParenthesizedType(node, opts) {
		assert$2("TSParenthesizedType", node, opts);
	}
	function assertTSTypeOperator(node, opts) {
		assert$2("TSTypeOperator", node, opts);
	}
	function assertTSIndexedAccessType(node, opts) {
		assert$2("TSIndexedAccessType", node, opts);
	}
	function assertTSMappedType(node, opts) {
		assert$2("TSMappedType", node, opts);
	}
	function assertTSTemplateLiteralType(node, opts) {
		assert$2("TSTemplateLiteralType", node, opts);
	}
	function assertTSLiteralType(node, opts) {
		assert$2("TSLiteralType", node, opts);
	}
	function assertTSExpressionWithTypeArguments(node, opts) {
		assert$2("TSExpressionWithTypeArguments", node, opts);
	}
	function assertTSInterfaceDeclaration(node, opts) {
		assert$2("TSInterfaceDeclaration", node, opts);
	}
	function assertTSInterfaceBody(node, opts) {
		assert$2("TSInterfaceBody", node, opts);
	}
	function assertTSTypeAliasDeclaration(node, opts) {
		assert$2("TSTypeAliasDeclaration", node, opts);
	}
	function assertTSInstantiationExpression(node, opts) {
		assert$2("TSInstantiationExpression", node, opts);
	}
	function assertTSAsExpression(node, opts) {
		assert$2("TSAsExpression", node, opts);
	}
	function assertTSSatisfiesExpression(node, opts) {
		assert$2("TSSatisfiesExpression", node, opts);
	}
	function assertTSTypeAssertion(node, opts) {
		assert$2("TSTypeAssertion", node, opts);
	}
	function assertTSEnumBody(node, opts) {
		assert$2("TSEnumBody", node, opts);
	}
	function assertTSEnumDeclaration(node, opts) {
		assert$2("TSEnumDeclaration", node, opts);
	}
	function assertTSEnumMember(node, opts) {
		assert$2("TSEnumMember", node, opts);
	}
	function assertTSModuleDeclaration(node, opts) {
		assert$2("TSModuleDeclaration", node, opts);
	}
	function assertTSModuleBlock(node, opts) {
		assert$2("TSModuleBlock", node, opts);
	}
	function assertTSImportType(node, opts) {
		assert$2("TSImportType", node, opts);
	}
	function assertTSImportEqualsDeclaration(node, opts) {
		assert$2("TSImportEqualsDeclaration", node, opts);
	}
	function assertTSExternalModuleReference(node, opts) {
		assert$2("TSExternalModuleReference", node, opts);
	}
	function assertTSNonNullExpression(node, opts) {
		assert$2("TSNonNullExpression", node, opts);
	}
	function assertTSExportAssignment(node, opts) {
		assert$2("TSExportAssignment", node, opts);
	}
	function assertTSNamespaceExportDeclaration(node, opts) {
		assert$2("TSNamespaceExportDeclaration", node, opts);
	}
	function assertTSTypeAnnotation(node, opts) {
		assert$2("TSTypeAnnotation", node, opts);
	}
	function assertTSTypeParameterInstantiation(node, opts) {
		assert$2("TSTypeParameterInstantiation", node, opts);
	}
	function assertTSTypeParameterDeclaration(node, opts) {
		assert$2("TSTypeParameterDeclaration", node, opts);
	}
	function assertTSTypeParameter(node, opts) {
		assert$2("TSTypeParameter", node, opts);
	}
	function assertStandardized(node, opts) {
		assert$2("Standardized", node, opts);
	}
	function assertExpression$1(node, opts) {
		assert$2("Expression", node, opts);
	}
	function assertBinary(node, opts) {
		assert$2("Binary", node, opts);
	}
	function assertScopable(node, opts) {
		assert$2("Scopable", node, opts);
	}
	function assertBlockParent(node, opts) {
		assert$2("BlockParent", node, opts);
	}
	function assertBlock(node, opts) {
		assert$2("Block", node, opts);
	}
	function assertStatement(node, opts) {
		assert$2("Statement", node, opts);
	}
	function assertTerminatorless(node, opts) {
		assert$2("Terminatorless", node, opts);
	}
	function assertCompletionStatement(node, opts) {
		assert$2("CompletionStatement", node, opts);
	}
	function assertConditional(node, opts) {
		assert$2("Conditional", node, opts);
	}
	function assertLoop(node, opts) {
		assert$2("Loop", node, opts);
	}
	function assertWhile(node, opts) {
		assert$2("While", node, opts);
	}
	function assertExpressionWrapper(node, opts) {
		assert$2("ExpressionWrapper", node, opts);
	}
	function assertFor(node, opts) {
		assert$2("For", node, opts);
	}
	function assertForXStatement(node, opts) {
		assert$2("ForXStatement", node, opts);
	}
	function assertFunction(node, opts) {
		assert$2("Function", node, opts);
	}
	function assertFunctionParent(node, opts) {
		assert$2("FunctionParent", node, opts);
	}
	function assertPureish(node, opts) {
		assert$2("Pureish", node, opts);
	}
	function assertDeclaration(node, opts) {
		assert$2("Declaration", node, opts);
	}
	function assertPatternLike(node, opts) {
		assert$2("PatternLike", node, opts);
	}
	function assertLVal(node, opts) {
		assert$2("LVal", node, opts);
	}
	function assertTSEntityName(node, opts) {
		assert$2("TSEntityName", node, opts);
	}
	function assertLiteral(node, opts) {
		assert$2("Literal", node, opts);
	}
	function assertImmutable(node, opts) {
		assert$2("Immutable", node, opts);
	}
	function assertUserWhitespacable(node, opts) {
		assert$2("UserWhitespacable", node, opts);
	}
	function assertMethod(node, opts) {
		assert$2("Method", node, opts);
	}
	function assertObjectMember(node, opts) {
		assert$2("ObjectMember", node, opts);
	}
	function assertProperty(node, opts) {
		assert$2("Property", node, opts);
	}
	function assertUnaryLike(node, opts) {
		assert$2("UnaryLike", node, opts);
	}
	function assertPattern(node, opts) {
		assert$2("Pattern", node, opts);
	}
	function assertClass(node, opts) {
		assert$2("Class", node, opts);
	}
	function assertImportOrExportDeclaration(node, opts) {
		assert$2("ImportOrExportDeclaration", node, opts);
	}
	function assertExportDeclaration(node, opts) {
		assert$2("ExportDeclaration", node, opts);
	}
	function assertModuleSpecifier(node, opts) {
		assert$2("ModuleSpecifier", node, opts);
	}
	function assertAccessor(node, opts) {
		assert$2("Accessor", node, opts);
	}
	function assertPrivate(node, opts) {
		assert$2("Private", node, opts);
	}
	function assertFlow(node, opts) {
		assert$2("Flow", node, opts);
	}
	function assertFlowType(node, opts) {
		assert$2("FlowType", node, opts);
	}
	function assertFlowBaseAnnotation(node, opts) {
		assert$2("FlowBaseAnnotation", node, opts);
	}
	function assertFlowDeclaration(node, opts) {
		assert$2("FlowDeclaration", node, opts);
	}
	function assertFlowPredicate(node, opts) {
		assert$2("FlowPredicate", node, opts);
	}
	function assertEnumBody(node, opts) {
		assert$2("EnumBody", node, opts);
	}
	function assertEnumMember(node, opts) {
		assert$2("EnumMember", node, opts);
	}
	function assertJSX(node, opts) {
		assert$2("JSX", node, opts);
	}
	function assertMiscellaneous(node, opts) {
		assert$2("Miscellaneous", node, opts);
	}
	function assertTypeScript(node, opts) {
		assert$2("TypeScript", node, opts);
	}
	function assertTSTypeElement(node, opts) {
		assert$2("TSTypeElement", node, opts);
	}
	function assertTSType(node, opts) {
		assert$2("TSType", node, opts);
	}
	function assertTSBaseType(node, opts) {
		assert$2("TSBaseType", node, opts);
	}
	function assertNumberLiteral(node, opts) {
		(0, _deprecationWarning$1.default)("assertNumberLiteral", "assertNumericLiteral");
		assert$2("NumberLiteral", node, opts);
	}
	function assertRegexLiteral(node, opts) {
		(0, _deprecationWarning$1.default)("assertRegexLiteral", "assertRegExpLiteral");
		assert$2("RegexLiteral", node, opts);
	}
	function assertRestProperty(node, opts) {
		(0, _deprecationWarning$1.default)("assertRestProperty", "assertRestElement");
		assert$2("RestProperty", node, opts);
	}
	function assertSpreadProperty(node, opts) {
		(0, _deprecationWarning$1.default)("assertSpreadProperty", "assertSpreadElement");
		assert$2("SpreadProperty", node, opts);
	}
	function assertModuleDeclaration(node, opts) {
		(0, _deprecationWarning$1.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
		assert$2("ModuleDeclaration", node, opts);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js
var require_createTypeAnnotationBasedOnTypeof = __commonJS({ "node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _index$46 = require_generated$2();
	var _default$9 = exports.default = createTypeAnnotationBasedOnTypeof$1;
	function createTypeAnnotationBasedOnTypeof$1(type) {
		switch (type) {
			case "string": return (0, _index$46.stringTypeAnnotation)();
			case "number": return (0, _index$46.numberTypeAnnotation)();
			case "undefined": return (0, _index$46.voidTypeAnnotation)();
			case "boolean": return (0, _index$46.booleanTypeAnnotation)();
			case "function": return (0, _index$46.genericTypeAnnotation)((0, _index$46.identifier)("Function"));
			case "object": return (0, _index$46.genericTypeAnnotation)((0, _index$46.identifier)("Object"));
			case "symbol": return (0, _index$46.genericTypeAnnotation)((0, _index$46.identifier)("Symbol"));
			case "bigint": return (0, _index$46.anyTypeAnnotation)();
		}
		throw new Error("Invalid typeof value: " + type);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js
var require_removeTypeDuplicates$1 = __commonJS({ "node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = removeTypeDuplicates$1;
	var _index$45 = require_generated$3();
	function getQualifiedName$1(node) {
		return (0, _index$45.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName$1(node.qualification)}`;
	}
	function removeTypeDuplicates$1(nodesIn) {
		const nodes$1 = Array.from(nodesIn);
		const generics = new Map();
		const bases = new Map();
		const typeGroups = new Set();
		const types$7 = [];
		for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
			const node = nodes$1[i$6];
			if (!node) continue;
			if (types$7.includes(node)) continue;
			if ((0, _index$45.isAnyTypeAnnotation)(node)) return [node];
			if ((0, _index$45.isFlowBaseAnnotation)(node)) {
				bases.set(node.type, node);
				continue;
			}
			if ((0, _index$45.isUnionTypeAnnotation)(node)) {
				if (!typeGroups.has(node.types)) {
					nodes$1.push(...node.types);
					typeGroups.add(node.types);
				}
				continue;
			}
			if ((0, _index$45.isGenericTypeAnnotation)(node)) {
				const name = getQualifiedName$1(node.id);
				if (generics.has(name)) {
					let existing = generics.get(name);
					if (existing.typeParameters) {
						if (node.typeParameters) {
							existing.typeParameters.params.push(...node.typeParameters.params);
							existing.typeParameters.params = removeTypeDuplicates$1(existing.typeParameters.params);
						}
					} else existing = node.typeParameters;
				} else generics.set(name, node);
				continue;
			}
			types$7.push(node);
		}
		for (const [, baseType] of bases) types$7.push(baseType);
		for (const [, genericName] of generics) types$7.push(genericName);
		return types$7;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js
var require_createFlowUnionType = __commonJS({ "node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = createFlowUnionType$1;
	var _index$44 = require_generated$2();
	var _removeTypeDuplicates$2 = require_removeTypeDuplicates$1();
	function createFlowUnionType$1(types$7) {
		const flattened = (0, _removeTypeDuplicates$2.default)(types$7);
		if (flattened.length === 1) return flattened[0];
		else return (0, _index$44.unionTypeAnnotation)(flattened);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js
var require_removeTypeDuplicates = __commonJS({ "node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = removeTypeDuplicates;
	var _index$43 = require_generated$3();
	function getQualifiedName(node) {
		return (0, _index$43.isIdentifier)(node) ? node.name : (0, _index$43.isThisExpression)(node) ? "this" : `${node.right.name}.${getQualifiedName(node.left)}`;
	}
	function removeTypeDuplicates(nodesIn) {
		const nodes$1 = Array.from(nodesIn);
		const generics = new Map();
		const bases = new Map();
		const typeGroups = new Set();
		const types$7 = [];
		for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
			const node = nodes$1[i$6];
			if (!node) continue;
			if (types$7.includes(node)) continue;
			if ((0, _index$43.isTSAnyKeyword)(node)) return [node];
			if ((0, _index$43.isTSBaseType)(node)) {
				bases.set(node.type, node);
				continue;
			}
			if ((0, _index$43.isTSUnionType)(node)) {
				if (!typeGroups.has(node.types)) {
					nodes$1.push(...node.types);
					typeGroups.add(node.types);
				}
				continue;
			}
			const typeArgumentsKey = "typeParameters";
			if ((0, _index$43.isTSTypeReference)(node) && node[typeArgumentsKey]) {
				const typeArguments = node[typeArgumentsKey];
				const name = getQualifiedName(node.typeName);
				if (generics.has(name)) {
					let existing = generics.get(name);
					const existingTypeArguments = existing[typeArgumentsKey];
					if (existingTypeArguments) {
						existingTypeArguments.params.push(...typeArguments.params);
						existingTypeArguments.params = removeTypeDuplicates(existingTypeArguments.params);
					} else existing = typeArguments;
				} else generics.set(name, node);
				continue;
			}
			types$7.push(node);
		}
		for (const [, baseType] of bases) types$7.push(baseType);
		for (const [, genericName] of generics) types$7.push(genericName);
		return types$7;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js
var require_createTSUnionType = __commonJS({ "node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = createTSUnionType$1;
	var _index$42 = require_generated$2();
	var _removeTypeDuplicates$1 = require_removeTypeDuplicates();
	var _index2$10 = require_generated$3();
	function createTSUnionType$1(typeAnnotations) {
		const types$7 = typeAnnotations.map((type) => {
			return (0, _index2$10.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
		});
		const flattened = (0, _removeTypeDuplicates$1.default)(types$7);
		if (flattened.length === 1) return flattened[0];
		else return (0, _index$42.tsUnionType)(flattened);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/builders/productions.js
var require_productions = __commonJS({ "node_modules/@babel/types/lib/builders/productions.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.buildUndefinedNode = buildUndefinedNode$2;
	var _index$41 = require_generated$2();
	function buildUndefinedNode$2() {
		return (0, _index$41.unaryExpression)("void", (0, _index$41.numericLiteral)(0), true);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/clone/cloneNode.js
var require_cloneNode = __commonJS({ "node_modules/@babel/types/lib/clone/cloneNode.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = cloneNode$6;
	var _index$40 = require_definitions();
	var _index2$9 = require_generated$3();
	const { hasOwn } = { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };
	function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
		if (obj && typeof obj.type === "string") return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
		return obj;
	}
	function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
		if (Array.isArray(obj)) return obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache));
		return cloneIfNode(obj, deep, withoutLoc, commentsCache);
	}
	function cloneNode$6(node, deep = true, withoutLoc = false) {
		return cloneNodeInternal(node, deep, withoutLoc, new Map());
	}
	function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
		if (!node) return node;
		const { type } = node;
		const newNode = { type: node.type };
		if ((0, _index2$9.isIdentifier)(node)) {
			newNode.name = node.name;
			if (hasOwn(node, "optional") && typeof node.optional === "boolean") newNode.optional = node.optional;
			if (hasOwn(node, "typeAnnotation")) newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;
			if (hasOwn(node, "decorators")) newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators;
		} else if (!hasOwn(_index$40.NODE_FIELDS, type)) throw new Error(`Unknown node type: "${type}"`);
		else for (const field of Object.keys(_index$40.NODE_FIELDS[type])) if (hasOwn(node, field)) if (deep) newNode[field] = (0, _index2$9.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);
		else newNode[field] = node[field];
		if (hasOwn(node, "loc")) if (withoutLoc) newNode.loc = null;
		else newNode.loc = node.loc;
		if (hasOwn(node, "leadingComments")) newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);
		if (hasOwn(node, "innerComments")) newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);
		if (hasOwn(node, "trailingComments")) newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);
		if (hasOwn(node, "extra")) newNode.extra = Object.assign({}, node.extra);
		return newNode;
	}
	function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
		if (!comments || !deep) return comments;
		return comments.map((comment$7) => {
			const cache$3 = commentsCache.get(comment$7);
			if (cache$3) return cache$3;
			const { type, value, loc } = comment$7;
			const ret$1 = {
				type,
				value,
				loc
			};
			if (withoutLoc) ret$1.loc = null;
			commentsCache.set(comment$7, ret$1);
			return ret$1;
		});
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/clone/clone.js
var require_clone = __commonJS({ "node_modules/@babel/types/lib/clone/clone.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = clone;
	var _cloneNode$6 = require_cloneNode();
	function clone(node) {
		return (0, _cloneNode$6.default)(node, false);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/clone/cloneDeep.js
var require_cloneDeep = __commonJS({ "node_modules/@babel/types/lib/clone/cloneDeep.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = cloneDeep;
	var _cloneNode$5 = require_cloneNode();
	function cloneDeep(node) {
		return (0, _cloneNode$5.default)(node);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js
var require_cloneDeepWithoutLoc = __commonJS({ "node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = cloneDeepWithoutLoc;
	var _cloneNode$4 = require_cloneNode();
	function cloneDeepWithoutLoc(node) {
		return (0, _cloneNode$4.default)(node, true, true);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/clone/cloneWithoutLoc.js
var require_cloneWithoutLoc = __commonJS({ "node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = cloneWithoutLoc;
	var _cloneNode$3 = require_cloneNode();
	function cloneWithoutLoc(node) {
		return (0, _cloneNode$3.default)(node, false, true);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/addComments.js
var require_addComments = __commonJS({ "node_modules/@babel/types/lib/comments/addComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = addComments$1;
	function addComments$1(node, type, comments) {
		if (!comments || !node) return node;
		const key = `${type}Comments`;
		if (node[key]) if (type === "leading") node[key] = comments.concat(node[key]);
		else node[key].push(...comments);
		else node[key] = comments;
		return node;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/addComment.js
var require_addComment = __commonJS({ "node_modules/@babel/types/lib/comments/addComment.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = addComment$1;
	var _addComments$2 = require_addComments();
	function addComment$1(node, type, content, line) {
		return (0, _addComments$2.default)(node, type, [{
			type: line ? "CommentLine" : "CommentBlock",
			value: content
		}]);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/utils/inherit.js
var require_inherit = __commonJS({ "node_modules/@babel/types/lib/utils/inherit.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inherit;
	function inherit(key, child, parent) {
		if (child && parent) child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/inheritInnerComments.js
var require_inheritInnerComments = __commonJS({ "node_modules/@babel/types/lib/comments/inheritInnerComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inheritInnerComments;
	var _inherit$2 = require_inherit();
	function inheritInnerComments(child, parent) {
		(0, _inherit$2.default)("innerComments", child, parent);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/inheritLeadingComments.js
var require_inheritLeadingComments = __commonJS({ "node_modules/@babel/types/lib/comments/inheritLeadingComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inheritLeadingComments$1;
	var _inherit$1 = require_inherit();
	function inheritLeadingComments$1(child, parent) {
		(0, _inherit$1.default)("leadingComments", child, parent);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/inheritTrailingComments.js
var require_inheritTrailingComments = __commonJS({ "node_modules/@babel/types/lib/comments/inheritTrailingComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inheritTrailingComments$1;
	var _inherit = require_inherit();
	function inheritTrailingComments$1(child, parent) {
		(0, _inherit.default)("trailingComments", child, parent);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/inheritsComments.js
var require_inheritsComments = __commonJS({ "node_modules/@babel/types/lib/comments/inheritsComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inheritsComments$1;
	var _inheritTrailingComments$1 = require_inheritTrailingComments();
	var _inheritLeadingComments$1 = require_inheritLeadingComments();
	var _inheritInnerComments$1 = require_inheritInnerComments();
	function inheritsComments$1(child, parent) {
		(0, _inheritTrailingComments$1.default)(child, parent);
		(0, _inheritLeadingComments$1.default)(child, parent);
		(0, _inheritInnerComments$1.default)(child, parent);
		return child;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/comments/removeComments.js
var require_removeComments = __commonJS({ "node_modules/@babel/types/lib/comments/removeComments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = removeComments$1;
	var _index$39 = require_constants$1();
	function removeComments$1(node) {
		_index$39.COMMENT_KEYS.forEach((key) => {
			node[key] = null;
		});
		return node;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/constants/generated/index.js
var require_generated = __commonJS({ "node_modules/@babel/types/lib/constants/generated/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WHILE_TYPES = exports.USERWHITESPACABLE_TYPES = exports.UNARYLIKE_TYPES = exports.TYPESCRIPT_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.TSENTITYNAME_TYPES = exports.TSBASETYPE_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.STANDARDIZED_TYPES = exports.SCOPABLE_TYPES = exports.PUREISH_TYPES = exports.PROPERTY_TYPES = exports.PRIVATE_TYPES = exports.PATTERN_TYPES = exports.PATTERNLIKE_TYPES = exports.OBJECTMEMBER_TYPES = exports.MODULESPECIFIER_TYPES = exports.MODULEDECLARATION_TYPES = exports.MISCELLANEOUS_TYPES = exports.METHOD_TYPES = exports.LVAL_TYPES = exports.LOOP_TYPES = exports.LITERAL_TYPES = exports.JSX_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = exports.IMMUTABLE_TYPES = exports.FUNCTION_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FOR_TYPES = exports.FORXSTATEMENT_TYPES = exports.FLOW_TYPES = exports.FLOWTYPE_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.EXPRESSION_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.DECLARATION_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.CLASS_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.BINARY_TYPES = exports.ACCESSOR_TYPES = void 0;
	var _index$38 = require_definitions();
	const STANDARDIZED_TYPES = exports.STANDARDIZED_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Standardized"];
	const EXPRESSION_TYPES = exports.EXPRESSION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Expression"];
	const BINARY_TYPES = exports.BINARY_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Binary"];
	const SCOPABLE_TYPES = exports.SCOPABLE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Scopable"];
	const BLOCKPARENT_TYPES = exports.BLOCKPARENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["BlockParent"];
	const BLOCK_TYPES = exports.BLOCK_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Block"];
	const STATEMENT_TYPES = exports.STATEMENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Statement"];
	const TERMINATORLESS_TYPES = exports.TERMINATORLESS_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Terminatorless"];
	const COMPLETIONSTATEMENT_TYPES = exports.COMPLETIONSTATEMENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["CompletionStatement"];
	const CONDITIONAL_TYPES = exports.CONDITIONAL_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Conditional"];
	const LOOP_TYPES = exports.LOOP_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Loop"];
	const WHILE_TYPES = exports.WHILE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["While"];
	const EXPRESSIONWRAPPER_TYPES = exports.EXPRESSIONWRAPPER_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
	const FOR_TYPES = exports.FOR_TYPES = _index$38.FLIPPED_ALIAS_KEYS["For"];
	const FORXSTATEMENT_TYPES = exports.FORXSTATEMENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ForXStatement"];
	const FUNCTION_TYPES$1 = exports.FUNCTION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Function"];
	const FUNCTIONPARENT_TYPES = exports.FUNCTIONPARENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["FunctionParent"];
	const PUREISH_TYPES = exports.PUREISH_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Pureish"];
	const DECLARATION_TYPES = exports.DECLARATION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Declaration"];
	const PATTERNLIKE_TYPES = exports.PATTERNLIKE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["PatternLike"];
	const LVAL_TYPES = exports.LVAL_TYPES = _index$38.FLIPPED_ALIAS_KEYS["LVal"];
	const TSENTITYNAME_TYPES = exports.TSENTITYNAME_TYPES = _index$38.FLIPPED_ALIAS_KEYS["TSEntityName"];
	const LITERAL_TYPES = exports.LITERAL_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Literal"];
	const IMMUTABLE_TYPES = exports.IMMUTABLE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Immutable"];
	const USERWHITESPACABLE_TYPES = exports.USERWHITESPACABLE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
	const METHOD_TYPES = exports.METHOD_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Method"];
	const OBJECTMEMBER_TYPES = exports.OBJECTMEMBER_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ObjectMember"];
	const PROPERTY_TYPES = exports.PROPERTY_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Property"];
	const UNARYLIKE_TYPES = exports.UNARYLIKE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["UnaryLike"];
	const PATTERN_TYPES = exports.PATTERN_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Pattern"];
	const CLASS_TYPES = exports.CLASS_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Class"];
	const IMPORTOREXPORTDECLARATION_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
	const EXPORTDECLARATION_TYPES = exports.EXPORTDECLARATION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
	const MODULESPECIFIER_TYPES = exports.MODULESPECIFIER_TYPES = _index$38.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
	const ACCESSOR_TYPES = exports.ACCESSOR_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Accessor"];
	const PRIVATE_TYPES = exports.PRIVATE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Private"];
	const FLOW_TYPES = exports.FLOW_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Flow"];
	const FLOWTYPE_TYPES = exports.FLOWTYPE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["FlowType"];
	const FLOWBASEANNOTATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
	const FLOWDECLARATION_TYPES = exports.FLOWDECLARATION_TYPES = _index$38.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
	const FLOWPREDICATE_TYPES = exports.FLOWPREDICATE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["FlowPredicate"];
	const ENUMBODY_TYPES = exports.ENUMBODY_TYPES = _index$38.FLIPPED_ALIAS_KEYS["EnumBody"];
	const ENUMMEMBER_TYPES = exports.ENUMMEMBER_TYPES = _index$38.FLIPPED_ALIAS_KEYS["EnumMember"];
	const JSX_TYPES = exports.JSX_TYPES = _index$38.FLIPPED_ALIAS_KEYS["JSX"];
	const MISCELLANEOUS_TYPES = exports.MISCELLANEOUS_TYPES = _index$38.FLIPPED_ALIAS_KEYS["Miscellaneous"];
	const TYPESCRIPT_TYPES = exports.TYPESCRIPT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["TypeScript"];
	const TSTYPEELEMENT_TYPES = exports.TSTYPEELEMENT_TYPES = _index$38.FLIPPED_ALIAS_KEYS["TSTypeElement"];
	const TSTYPE_TYPES = exports.TSTYPE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["TSType"];
	const TSBASETYPE_TYPES = exports.TSBASETYPE_TYPES = _index$38.FLIPPED_ALIAS_KEYS["TSBaseType"];
	const MODULEDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toBlock.js
var require_toBlock = __commonJS({ "node_modules/@babel/types/lib/converters/toBlock.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toBlock;
	var _index$37 = require_generated$3();
	var _index2$8 = require_generated$2();
	function toBlock(node, parent) {
		if ((0, _index$37.isBlockStatement)(node)) return node;
		let blockNodes = [];
		if ((0, _index$37.isEmptyStatement)(node)) blockNodes = [];
		else {
			if (!(0, _index$37.isStatement)(node)) if ((0, _index$37.isFunction)(parent)) node = (0, _index2$8.returnStatement)(node);
			else node = (0, _index2$8.expressionStatement)(node);
			blockNodes = [node];
		}
		return (0, _index2$8.blockStatement)(blockNodes);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/ensureBlock.js
var require_ensureBlock = __commonJS({ "node_modules/@babel/types/lib/converters/ensureBlock.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ensureBlock$1;
	var _toBlock$1 = require_toBlock();
	function ensureBlock$1(node, key = "body") {
		const result = (0, _toBlock$1.default)(node[key], node);
		node[key] = result;
		return result;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toIdentifier.js
var require_toIdentifier = __commonJS({ "node_modules/@babel/types/lib/converters/toIdentifier.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toIdentifier$1;
	var _isValidIdentifier$3 = require_isValidIdentifier();
	var _helperValidatorIdentifier = require_lib$6();
	function toIdentifier$1(input) {
		input = input + "";
		let name = "";
		for (const c$2 of input) name += (0, _helperValidatorIdentifier.isIdentifierChar)(c$2.codePointAt(0)) ? c$2 : "-";
		name = name.replace(/^[-0-9]+/, "");
		name = name.replace(/[-\s]+(.)?/g, function(match, c$2) {
			return c$2 ? c$2.toUpperCase() : "";
		});
		if (!(0, _isValidIdentifier$3.default)(name)) name = `_${name}`;
		return name || "_";
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toBindingIdentifierName.js
var require_toBindingIdentifierName = __commonJS({ "node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toBindingIdentifierName$1;
	var _toIdentifier$1 = require_toIdentifier();
	function toBindingIdentifierName$1(name) {
		name = (0, _toIdentifier$1.default)(name);
		if (name === "eval" || name === "arguments") name = "_" + name;
		return name;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toComputedKey.js
var require_toComputedKey = __commonJS({ "node_modules/@babel/types/lib/converters/toComputedKey.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toComputedKey$1;
	var _index$36 = require_generated$3();
	var _index2$7 = require_generated$2();
	function toComputedKey$1(node, key = node.key || node.property) {
		if (!node.computed && (0, _index$36.isIdentifier)(key)) key = (0, _index2$7.stringLiteral)(key.name);
		return key;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toExpression.js
var require_toExpression = __commonJS({ "node_modules/@babel/types/lib/converters/toExpression.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _index$35 = require_generated$3();
	var _default$8 = exports.default = toExpression$1;
	function toExpression$1(node) {
		if ((0, _index$35.isExpressionStatement)(node)) node = node.expression;
		if ((0, _index$35.isExpression)(node)) return node;
		if ((0, _index$35.isClass)(node)) node.type = "ClassExpression";
		else if ((0, _index$35.isFunction)(node)) node.type = "FunctionExpression";
		if (!(0, _index$35.isExpression)(node)) throw new Error(`cannot turn ${node.type} to an expression`);
		return node;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/traverse/traverseFast.js
var require_traverseFast = __commonJS({ "node_modules/@babel/types/lib/traverse/traverseFast.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = traverseFast$2;
	var _index$34 = require_definitions();
	const _skip = Symbol();
	const _stop = Symbol();
	function traverseFast$2(node, enter, opts) {
		if (!node) return false;
		const keys$1 = _index$34.VISITOR_KEYS[node.type];
		if (!keys$1) return false;
		opts = opts || {};
		const ret$1 = enter(node, opts);
		if (ret$1 !== void 0) switch (ret$1) {
			case _skip: return false;
			case _stop: return true;
		}
		for (const key of keys$1) {
			const subNode = node[key];
			if (!subNode) continue;
			if (Array.isArray(subNode)) {
				for (const node$1 of subNode) if (traverseFast$2(node$1, enter, opts)) return true;
			} else if (traverseFast$2(subNode, enter, opts)) return true;
		}
		return false;
	}
	traverseFast$2.skip = _skip;
	traverseFast$2.stop = _stop;
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/removeProperties.js
var require_removeProperties = __commonJS({ "node_modules/@babel/types/lib/modifications/removeProperties.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = removeProperties$1;
	var _index$33 = require_constants$1();
	const CLEAR_KEYS = [
		"tokens",
		"start",
		"end",
		"loc",
		"raw",
		"rawValue"
	];
	const CLEAR_KEYS_PLUS_COMMENTS = [
		..._index$33.COMMENT_KEYS,
		"comments",
		...CLEAR_KEYS
	];
	function removeProperties$1(node, opts = {}) {
		const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
		for (const key of map) if (node[key] != null) node[key] = void 0;
		for (const key of Object.keys(node)) if (key[0] === "_" && node[key] != null) node[key] = void 0;
		const symbols = Object.getOwnPropertySymbols(node);
		for (const sym of symbols) node[sym] = null;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/removePropertiesDeep.js
var require_removePropertiesDeep = __commonJS({ "node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = removePropertiesDeep$1;
	var _traverseFast$1 = require_traverseFast();
	var _removeProperties$1 = require_removeProperties();
	function removePropertiesDeep$1(tree, opts) {
		(0, _traverseFast$1.default)(tree, _removeProperties$1.default, opts);
		return tree;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toKeyAlias.js
var require_toKeyAlias = __commonJS({ "node_modules/@babel/types/lib/converters/toKeyAlias.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toKeyAlias;
	var _index$32 = require_generated$3();
	var _cloneNode$2 = require_cloneNode();
	var _removePropertiesDeep$1 = require_removePropertiesDeep();
	function toKeyAlias(node, key = node.key) {
		let alias;
		if (node.kind === "method") return toKeyAlias.increment() + "";
		else if ((0, _index$32.isIdentifier)(key)) alias = key.name;
		else if ((0, _index$32.isStringLiteral)(key)) alias = JSON.stringify(key.value);
		else alias = JSON.stringify((0, _removePropertiesDeep$1.default)((0, _cloneNode$2.default)(key)));
		if (node.computed) alias = `[${alias}]`;
		if (node.static) alias = `static:${alias}`;
		return alias;
	}
	toKeyAlias.uid = 0;
	toKeyAlias.increment = function() {
		if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) return toKeyAlias.uid = 0;
		else return toKeyAlias.uid++;
	};
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toStatement.js
var require_toStatement = __commonJS({ "node_modules/@babel/types/lib/converters/toStatement.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _index$31 = require_generated$3();
	var _index2$6 = require_generated$2();
	var _default$7 = exports.default = toStatement;
	function toStatement(node, ignore) {
		if ((0, _index$31.isStatement)(node)) return node;
		let mustHaveId = false;
		let newType;
		if ((0, _index$31.isClass)(node)) {
			mustHaveId = true;
			newType = "ClassDeclaration";
		} else if ((0, _index$31.isFunction)(node)) {
			mustHaveId = true;
			newType = "FunctionDeclaration";
		} else if ((0, _index$31.isAssignmentExpression)(node)) return (0, _index2$6.expressionStatement)(node);
		if (mustHaveId && !node.id) newType = false;
		if (!newType) if (ignore) return false;
		else throw new Error(`cannot turn ${node.type} to a statement`);
		node.type = newType;
		return node;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/valueToNode.js
var require_valueToNode = __commonJS({ "node_modules/@babel/types/lib/converters/valueToNode.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _isValidIdentifier$2 = require_isValidIdentifier();
	var _index$30 = require_generated$2();
	var _default$6 = exports.default = valueToNode;
	const objectToString = Function.call.bind(Object.prototype.toString);
	function isRegExp(value) {
		return objectToString(value) === "[object RegExp]";
	}
	function isPlainObject(value) {
		if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") return false;
		const proto$1 = Object.getPrototypeOf(value);
		return proto$1 === null || Object.getPrototypeOf(proto$1) === null;
	}
	function valueToNode(value) {
		if (value === void 0) return (0, _index$30.identifier)("undefined");
		if (value === true || value === false) return (0, _index$30.booleanLiteral)(value);
		if (value === null) return (0, _index$30.nullLiteral)();
		if (typeof value === "string") return (0, _index$30.stringLiteral)(value);
		if (typeof value === "number") {
			let result;
			if (Number.isFinite(value)) result = (0, _index$30.numericLiteral)(Math.abs(value));
			else {
				let numerator;
				if (Number.isNaN(value)) numerator = (0, _index$30.numericLiteral)(0);
				else numerator = (0, _index$30.numericLiteral)(1);
				result = (0, _index$30.binaryExpression)("/", numerator, (0, _index$30.numericLiteral)(0));
			}
			if (value < 0 || Object.is(value, -0)) result = (0, _index$30.unaryExpression)("-", result);
			return result;
		}
		if (typeof value === "bigint") return (0, _index$30.bigIntLiteral)(value.toString());
		if (isRegExp(value)) {
			const pattern = value.source;
			const flags = /\/([a-z]*)$/.exec(value.toString())[1];
			return (0, _index$30.regExpLiteral)(pattern, flags);
		}
		if (Array.isArray(value)) return (0, _index$30.arrayExpression)(value.map(valueToNode));
		if (isPlainObject(value)) {
			const props = [];
			for (const key of Object.keys(value)) {
				let nodeKey, computed = false;
				if ((0, _isValidIdentifier$2.default)(key)) if (key === "__proto__") {
					computed = true;
					nodeKey = (0, _index$30.stringLiteral)(key);
				} else nodeKey = (0, _index$30.identifier)(key);
				else nodeKey = (0, _index$30.stringLiteral)(key);
				props.push((0, _index$30.objectProperty)(nodeKey, valueToNode(value[key]), computed));
			}
			return (0, _index$30.objectExpression)(props);
		}
		throw new Error("don't know how to turn this value into a node");
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/appendToMemberExpression.js
var require_appendToMemberExpression = __commonJS({ "node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = appendToMemberExpression;
	var _index$29 = require_generated$2();
	function appendToMemberExpression(member, append$1, computed = false) {
		member.object = (0, _index$29.memberExpression)(member.object, member.property, member.computed);
		member.property = append$1;
		member.computed = !!computed;
		return member;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/inherits.js
var require_inherits$1 = __commonJS({ "node_modules/@babel/types/lib/modifications/inherits.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = inherits$2;
	var _index$28 = require_constants$1();
	var _inheritsComments$1 = require_inheritsComments();
	function inherits$2(child, parent) {
		if (!child || !parent) return child;
		for (const key of _index$28.INHERIT_KEYS.optional) if (child[key] == null) child[key] = parent[key];
		for (const key of Object.keys(parent)) if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
		for (const key of _index$28.INHERIT_KEYS.force) child[key] = parent[key];
		(0, _inheritsComments$1.default)(child, parent);
		return child;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/modifications/prependToMemberExpression.js
var require_prependToMemberExpression = __commonJS({ "node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = prependToMemberExpression;
	var _index$27 = require_generated$2();
	var _index2$5 = require_lib$4();
	function prependToMemberExpression(member, prepend$1) {
		if ((0, _index2$5.isSuper)(member.object)) throw new Error("Cannot prepend node to super property access (`super.foo`).");
		member.object = (0, _index$27.memberExpression)(prepend$1, member.object);
		return member;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js
var require_getAssignmentIdentifiers = __commonJS({ "node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = getAssignmentIdentifiers$2;
	function getAssignmentIdentifiers$2(node) {
		const search = [].concat(node);
		const ids = Object.create(null);
		while (search.length) {
			const id$4 = search.pop();
			if (!id$4) continue;
			switch (id$4.type) {
				case "ArrayPattern":
					search.push(...id$4.elements);
					break;
				case "AssignmentExpression":
				case "AssignmentPattern":
				case "ForInStatement":
				case "ForOfStatement":
					search.push(id$4.left);
					break;
				case "ObjectPattern":
					search.push(...id$4.properties);
					break;
				case "ObjectProperty":
					search.push(id$4.value);
					break;
				case "RestElement":
				case "UpdateExpression":
					search.push(id$4.argument);
					break;
				case "UnaryExpression":
					if (id$4.operator === "delete") search.push(id$4.argument);
					break;
				case "Identifier":
					ids[id$4.name] = id$4;
					break;
				default: break;
			}
		}
		return ids;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js
var require_getBindingIdentifiers = __commonJS({ "node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = getBindingIdentifiers$4;
	var _index$26 = require_generated$3();
	function getBindingIdentifiers$4(node, duplicates, outerOnly, newBindingsOnly) {
		const search = [].concat(node);
		const ids = Object.create(null);
		while (search.length) {
			const id$4 = search.shift();
			if (!id$4) continue;
			if (newBindingsOnly && ((0, _index$26.isAssignmentExpression)(id$4) || (0, _index$26.isUnaryExpression)(id$4) || (0, _index$26.isUpdateExpression)(id$4))) continue;
			if ((0, _index$26.isIdentifier)(id$4)) {
				if (duplicates) {
					const _ids = ids[id$4.name] = ids[id$4.name] || [];
					_ids.push(id$4);
				} else ids[id$4.name] = id$4;
				continue;
			}
			if ((0, _index$26.isExportDeclaration)(id$4) && !(0, _index$26.isExportAllDeclaration)(id$4)) {
				if ((0, _index$26.isDeclaration)(id$4.declaration)) search.push(id$4.declaration);
				continue;
			}
			if (outerOnly) {
				if ((0, _index$26.isFunctionDeclaration)(id$4)) {
					search.push(id$4.id);
					continue;
				}
				if ((0, _index$26.isFunctionExpression)(id$4)) continue;
			}
			const keys$1 = getBindingIdentifiers$4.keys[id$4.type];
			if (keys$1) for (let i$6 = 0; i$6 < keys$1.length; i$6++) {
				const key = keys$1[i$6];
				const nodes$1 = id$4[key];
				if (nodes$1) if (Array.isArray(nodes$1)) search.push(...nodes$1);
				else search.push(nodes$1);
			}
		}
		return ids;
	}
	const keys = {
		DeclareClass: ["id"],
		DeclareFunction: ["id"],
		DeclareModule: ["id"],
		DeclareVariable: ["id"],
		DeclareInterface: ["id"],
		DeclareTypeAlias: ["id"],
		DeclareOpaqueType: ["id"],
		InterfaceDeclaration: ["id"],
		TypeAlias: ["id"],
		OpaqueType: ["id"],
		CatchClause: ["param"],
		LabeledStatement: ["label"],
		UnaryExpression: ["argument"],
		AssignmentExpression: ["left"],
		ImportSpecifier: ["local"],
		ImportNamespaceSpecifier: ["local"],
		ImportDefaultSpecifier: ["local"],
		ImportDeclaration: ["specifiers"],
		TSImportEqualsDeclaration: ["id"],
		ExportSpecifier: ["exported"],
		ExportNamespaceSpecifier: ["exported"],
		ExportDefaultSpecifier: ["exported"],
		FunctionDeclaration: ["id", "params"],
		FunctionExpression: ["id", "params"],
		ArrowFunctionExpression: ["params"],
		ObjectMethod: ["params"],
		ClassMethod: ["params"],
		ClassPrivateMethod: ["params"],
		ForInStatement: ["left"],
		ForOfStatement: ["left"],
		ClassDeclaration: ["id"],
		ClassExpression: ["id"],
		RestElement: ["argument"],
		UpdateExpression: ["argument"],
		ObjectProperty: ["value"],
		AssignmentPattern: ["left"],
		ArrayPattern: ["elements"],
		ObjectPattern: ["properties"],
		VariableDeclaration: ["declarations"],
		VariableDeclarator: ["id"]
	};
	getBindingIdentifiers$4.keys = keys;
} });

//#endregion
//#region node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js
var require_getOuterBindingIdentifiers = __commonJS({ "node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _getBindingIdentifiers$4 = require_getBindingIdentifiers();
	var _default$5 = exports.default = getOuterBindingIdentifiers$1;
	function getOuterBindingIdentifiers$1(node, duplicates) {
		return (0, _getBindingIdentifiers$4.default)(node, duplicates, true);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/retrievers/getFunctionName.js
var require_getFunctionName = __commonJS({ "node_modules/@babel/types/lib/retrievers/getFunctionName.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = getFunctionName$1;
	var _index$25 = require_generated$3();
	function getNameFromLiteralId(id$4) {
		if ((0, _index$25.isNullLiteral)(id$4)) return "null";
		if ((0, _index$25.isRegExpLiteral)(id$4)) return `/${id$4.pattern}/${id$4.flags}`;
		if ((0, _index$25.isTemplateLiteral)(id$4)) return id$4.quasis.map((quasi) => quasi.value.raw).join("");
		if (id$4.value !== void 0) return String(id$4.value);
		return null;
	}
	function getObjectMemberKey(node) {
		if (!node.computed || (0, _index$25.isLiteral)(node.key)) return node.key;
	}
	function getFunctionName$1(node, parent) {
		if ("id" in node && node.id) return {
			name: node.id.name,
			originalNode: node.id
		};
		let prefix$1 = "";
		let id$4;
		if ((0, _index$25.isObjectProperty)(parent, { value: node })) id$4 = getObjectMemberKey(parent);
		else if ((0, _index$25.isObjectMethod)(node) || (0, _index$25.isClassMethod)(node)) {
			id$4 = getObjectMemberKey(node);
			if (node.kind === "get") prefix$1 = "get ";
			else if (node.kind === "set") prefix$1 = "set ";
		} else if ((0, _index$25.isVariableDeclarator)(parent, { init: node })) id$4 = parent.id;
		else if ((0, _index$25.isAssignmentExpression)(parent, {
			operator: "=",
			right: node
		})) id$4 = parent.left;
		if (!id$4) return null;
		const name = (0, _index$25.isLiteral)(id$4) ? getNameFromLiteralId(id$4) : (0, _index$25.isIdentifier)(id$4) ? id$4.name : (0, _index$25.isPrivateName)(id$4) ? id$4.id.name : null;
		if (name == null) return null;
		return {
			name: prefix$1 + name,
			originalNode: id$4
		};
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/traverse/traverse.js
var require_traverse = __commonJS({ "node_modules/@babel/types/lib/traverse/traverse.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = traverse$2;
	var _index$24 = require_definitions();
	function traverse$2(node, handlers, state) {
		if (typeof handlers === "function") handlers = { enter: handlers };
		const { enter, exit } = handlers;
		traverseSimpleImpl(node, enter, exit, state, []);
	}
	function traverseSimpleImpl(node, enter, exit, state, ancestors) {
		const keys$1 = _index$24.VISITOR_KEYS[node.type];
		if (!keys$1) return;
		if (enter) enter(node, ancestors, state);
		for (const key of keys$1) {
			const subNode = node[key];
			if (Array.isArray(subNode)) for (let i$6 = 0; i$6 < subNode.length; i$6++) {
				const child = subNode[i$6];
				if (!child) continue;
				ancestors.push({
					node,
					key,
					index: i$6
				});
				traverseSimpleImpl(child, enter, exit, state, ancestors);
				ancestors.pop();
			}
			else if (subNode) {
				ancestors.push({
					node,
					key
				});
				traverseSimpleImpl(subNode, enter, exit, state, ancestors);
				ancestors.pop();
			}
		}
		if (exit) exit(node, ancestors, state);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isBinding.js
var require_isBinding = __commonJS({ "node_modules/@babel/types/lib/validators/isBinding.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isBinding$1;
	var _getBindingIdentifiers$3 = require_getBindingIdentifiers();
	function isBinding$1(node, parent, grandparent) {
		if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") return false;
		const keys$1 = _getBindingIdentifiers$3.default.keys[parent.type];
		if (keys$1) for (let i$6 = 0; i$6 < keys$1.length; i$6++) {
			const key = keys$1[i$6];
			const val = parent[key];
			if (Array.isArray(val)) {
				if (val.includes(node)) return true;
			} else if (val === node) return true;
		}
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isLet.js
var require_isLet = __commonJS({ "node_modules/@babel/types/lib/validators/isLet.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isLet;
	var _index$23 = require_generated$3();
	var BLOCK_SCOPED_SYMBOL$1 = Symbol.for("var used to be block scoped");
	function isLet(node) {
		return (0, _index$23.isVariableDeclaration)(node) && (node.kind !== "var" || node[BLOCK_SCOPED_SYMBOL$1]);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isBlockScoped.js
var require_isBlockScoped = __commonJS({ "node_modules/@babel/types/lib/validators/isBlockScoped.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isBlockScoped$1;
	var _index$22 = require_generated$3();
	var _isLet$1 = require_isLet();
	function isBlockScoped$1(node) {
		return (0, _index$22.isFunctionDeclaration)(node) || (0, _index$22.isClassDeclaration)(node) || (0, _isLet$1.default)(node);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isImmutable.js
var require_isImmutable = __commonJS({ "node_modules/@babel/types/lib/validators/isImmutable.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isImmutable;
	var _isType$1 = require_isType();
	var _index$21 = require_generated$3();
	function isImmutable(node) {
		if ((0, _isType$1.default)(node.type, "Immutable")) return true;
		if ((0, _index$21.isIdentifier)(node)) if (node.name === "undefined") return true;
		else return false;
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isNodesEquivalent.js
var require_isNodesEquivalent = __commonJS({ "node_modules/@babel/types/lib/validators/isNodesEquivalent.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isNodesEquivalent;
	var _index$20 = require_definitions();
	function isNodesEquivalent(a$1, b$1) {
		if (typeof a$1 !== "object" || typeof b$1 !== "object" || a$1 == null || b$1 == null) return a$1 === b$1;
		if (a$1.type !== b$1.type) return false;
		const fields = Object.keys(_index$20.NODE_FIELDS[a$1.type] || a$1.type);
		const visitorKeys = _index$20.VISITOR_KEYS[a$1.type];
		for (const field of fields) {
			const val_a = a$1[field];
			const val_b = b$1[field];
			if (typeof val_a !== typeof val_b) return false;
			if (val_a == null && val_b == null) continue;
			else if (val_a == null || val_b == null) return false;
			if (Array.isArray(val_a)) {
				if (!Array.isArray(val_b)) return false;
				if (val_a.length !== val_b.length) return false;
				for (let i$6 = 0; i$6 < val_a.length; i$6++) if (!isNodesEquivalent(val_a[i$6], val_b[i$6])) return false;
				continue;
			}
			if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
				for (const key of Object.keys(val_a)) if (val_a[key] !== val_b[key]) return false;
				continue;
			}
			if (!isNodesEquivalent(val_a, val_b)) return false;
		}
		return true;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isReferenced.js
var require_isReferenced = __commonJS({ "node_modules/@babel/types/lib/validators/isReferenced.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isReferenced$1;
	function isReferenced$1(node, parent, grandparent) {
		switch (parent.type) {
			case "MemberExpression":
			case "OptionalMemberExpression":
				if (parent.property === node) return !!parent.computed;
				return parent.object === node;
			case "JSXMemberExpression": return parent.object === node;
			case "VariableDeclarator": return parent.init === node;
			case "ArrowFunctionExpression": return parent.body === node;
			case "PrivateName": return false;
			case "ClassMethod":
			case "ClassPrivateMethod":
			case "ObjectMethod":
				if (parent.key === node) return !!parent.computed;
				return false;
			case "ObjectProperty":
				if (parent.key === node) return !!parent.computed;
				return !grandparent || grandparent.type !== "ObjectPattern";
			case "ClassProperty":
			case "ClassAccessorProperty":
				if (parent.key === node) return !!parent.computed;
				return true;
			case "ClassPrivateProperty": return parent.key !== node;
			case "ClassDeclaration":
			case "ClassExpression": return parent.superClass === node;
			case "AssignmentExpression": return parent.right === node;
			case "AssignmentPattern": return parent.right === node;
			case "LabeledStatement": return false;
			case "CatchClause": return false;
			case "RestElement": return false;
			case "BreakStatement":
			case "ContinueStatement": return false;
			case "FunctionDeclaration":
			case "FunctionExpression": return false;
			case "ExportNamespaceSpecifier":
			case "ExportDefaultSpecifier": return false;
			case "ExportSpecifier":
				if (grandparent != null && grandparent.source) return false;
				return parent.local === node;
			case "ImportDefaultSpecifier":
			case "ImportNamespaceSpecifier":
			case "ImportSpecifier": return false;
			case "ImportAttribute": return false;
			case "JSXAttribute": return false;
			case "ObjectPattern":
			case "ArrayPattern": return false;
			case "MetaProperty": return false;
			case "ObjectTypeProperty": return parent.key !== node;
			case "TSEnumMember": return parent.id !== node;
			case "TSPropertySignature":
				if (parent.key === node) return !!parent.computed;
				return true;
		}
		return true;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isScope.js
var require_isScope = __commonJS({ "node_modules/@babel/types/lib/validators/isScope.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isScope$1;
	var _index$19 = require_generated$3();
	function isScope$1(node, parent) {
		if ((0, _index$19.isBlockStatement)(node) && ((0, _index$19.isFunction)(parent) || (0, _index$19.isCatchClause)(parent))) return false;
		if ((0, _index$19.isPattern)(node) && ((0, _index$19.isFunction)(parent) || (0, _index$19.isCatchClause)(parent))) return true;
		return (0, _index$19.isScopable)(node);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isSpecifierDefault.js
var require_isSpecifierDefault = __commonJS({ "node_modules/@babel/types/lib/validators/isSpecifierDefault.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isSpecifierDefault;
	var _index$18 = require_generated$3();
	function isSpecifierDefault(specifier) {
		return (0, _index$18.isImportDefaultSpecifier)(specifier) || (0, _index$18.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isValidES3Identifier.js
var require_isValidES3Identifier = __commonJS({ "node_modules/@babel/types/lib/validators/isValidES3Identifier.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isValidES3Identifier;
	var _isValidIdentifier$1 = require_isValidIdentifier();
	const RESERVED_WORDS_ES3_ONLY = new Set([
		"abstract",
		"boolean",
		"byte",
		"char",
		"double",
		"enum",
		"final",
		"float",
		"goto",
		"implements",
		"int",
		"interface",
		"long",
		"native",
		"package",
		"private",
		"protected",
		"public",
		"short",
		"static",
		"synchronized",
		"throws",
		"transient",
		"volatile"
	]);
	function isValidES3Identifier(name) {
		return (0, _isValidIdentifier$1.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/validators/isVar.js
var require_isVar = __commonJS({ "node_modules/@babel/types/lib/validators/isVar.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isVar$1;
	var _index$17 = require_generated$3();
	var BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
	function isVar$1(node) {
		return (0, _index$17.isVariableDeclaration)(node, { kind: "var" }) && !node[BLOCK_SCOPED_SYMBOL];
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js
var require_gatherSequenceExpressions = __commonJS({ "node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = gatherSequenceExpressions$1;
	var _getBindingIdentifiers$2 = require_getBindingIdentifiers();
	var _index$16 = require_generated$3();
	var _index2$4 = require_generated$2();
	var _productions$1 = require_productions();
	var _cloneNode$1 = require_cloneNode();
	function gatherSequenceExpressions$1(nodes$1, declars) {
		const exprs = [];
		let ensureLastUndefined = true;
		for (const node of nodes$1) {
			if (!(0, _index$16.isEmptyStatement)(node)) ensureLastUndefined = false;
			if ((0, _index$16.isExpression)(node)) exprs.push(node);
			else if ((0, _index$16.isExpressionStatement)(node)) exprs.push(node.expression);
			else if ((0, _index$16.isVariableDeclaration)(node)) {
				if (node.kind !== "var") return;
				for (const declar of node.declarations) {
					const bindings = (0, _getBindingIdentifiers$2.default)(declar);
					for (const key of Object.keys(bindings)) declars.push({
						kind: node.kind,
						id: (0, _cloneNode$1.default)(bindings[key])
					});
					if (declar.init) exprs.push((0, _index2$4.assignmentExpression)("=", declar.id, declar.init));
				}
				ensureLastUndefined = true;
			} else if ((0, _index$16.isIfStatement)(node)) {
				const consequent = node.consequent ? gatherSequenceExpressions$1([node.consequent], declars) : (0, _productions$1.buildUndefinedNode)();
				const alternate = node.alternate ? gatherSequenceExpressions$1([node.alternate], declars) : (0, _productions$1.buildUndefinedNode)();
				if (!consequent || !alternate) return;
				exprs.push((0, _index2$4.conditionalExpression)(node.test, consequent, alternate));
			} else if ((0, _index$16.isBlockStatement)(node)) {
				const body = gatherSequenceExpressions$1(node.body, declars);
				if (!body) return;
				exprs.push(body);
			} else if ((0, _index$16.isEmptyStatement)(node)) {
				if (nodes$1.indexOf(node) === 0) ensureLastUndefined = true;
			} else return;
		}
		if (ensureLastUndefined) exprs.push((0, _productions$1.buildUndefinedNode)());
		if (exprs.length === 1) return exprs[0];
		else return (0, _index2$4.sequenceExpression)(exprs);
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/converters/toSequenceExpression.js
var require_toSequenceExpression = __commonJS({ "node_modules/@babel/types/lib/converters/toSequenceExpression.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = toSequenceExpression;
	var _gatherSequenceExpressions = require_gatherSequenceExpressions();
	function toSequenceExpression(nodes$1, scope$1) {
		if (!(nodes$1 != null && nodes$1.length)) return;
		const declars = [];
		const result = (0, _gatherSequenceExpressions.default)(nodes$1, declars);
		if (!result) return;
		for (const declar of declars) scope$1.push(declar);
		return result;
	}
} });

//#endregion
//#region node_modules/@babel/types/lib/index.js
var require_lib$4 = __commonJS({ "node_modules/@babel/types/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _exportNames = {
		react: true,
		assertNode: true,
		createTypeAnnotationBasedOnTypeof: true,
		createUnionTypeAnnotation: true,
		createFlowUnionType: true,
		createTSUnionType: true,
		cloneNode: true,
		clone: true,
		cloneDeep: true,
		cloneDeepWithoutLoc: true,
		cloneWithoutLoc: true,
		addComment: true,
		addComments: true,
		inheritInnerComments: true,
		inheritLeadingComments: true,
		inheritsComments: true,
		inheritTrailingComments: true,
		removeComments: true,
		ensureBlock: true,
		toBindingIdentifierName: true,
		toBlock: true,
		toComputedKey: true,
		toExpression: true,
		toIdentifier: true,
		toKeyAlias: true,
		toStatement: true,
		valueToNode: true,
		appendToMemberExpression: true,
		inherits: true,
		prependToMemberExpression: true,
		removeProperties: true,
		removePropertiesDeep: true,
		removeTypeDuplicates: true,
		getAssignmentIdentifiers: true,
		getBindingIdentifiers: true,
		getOuterBindingIdentifiers: true,
		getFunctionName: true,
		traverse: true,
		traverseFast: true,
		shallowEqual: true,
		is: true,
		isBinding: true,
		isBlockScoped: true,
		isImmutable: true,
		isLet: true,
		isNode: true,
		isNodesEquivalent: true,
		isPlaceholderType: true,
		isReferenced: true,
		isScope: true,
		isSpecifierDefault: true,
		isType: true,
		isValidES3Identifier: true,
		isValidIdentifier: true,
		isVar: true,
		matchesPattern: true,
		validate: true,
		buildMatchMemberExpression: true,
		__internal__deprecationWarning: true
	};
	Object.defineProperty(exports, "__internal__deprecationWarning", {
		enumerable: true,
		get: function() {
			return _deprecationWarning.default;
		}
	});
	Object.defineProperty(exports, "addComment", {
		enumerable: true,
		get: function() {
			return _addComment$1.default;
		}
	});
	Object.defineProperty(exports, "addComments", {
		enumerable: true,
		get: function() {
			return _addComments$1.default;
		}
	});
	Object.defineProperty(exports, "appendToMemberExpression", {
		enumerable: true,
		get: function() {
			return _appendToMemberExpression.default;
		}
	});
	Object.defineProperty(exports, "assertNode", {
		enumerable: true,
		get: function() {
			return _assertNode.default;
		}
	});
	Object.defineProperty(exports, "buildMatchMemberExpression", {
		enumerable: true,
		get: function() {
			return _buildMatchMemberExpression.default;
		}
	});
	Object.defineProperty(exports, "clone", {
		enumerable: true,
		get: function() {
			return _clone.default;
		}
	});
	Object.defineProperty(exports, "cloneDeep", {
		enumerable: true,
		get: function() {
			return _cloneDeep.default;
		}
	});
	Object.defineProperty(exports, "cloneDeepWithoutLoc", {
		enumerable: true,
		get: function() {
			return _cloneDeepWithoutLoc.default;
		}
	});
	Object.defineProperty(exports, "cloneNode", {
		enumerable: true,
		get: function() {
			return _cloneNode.default;
		}
	});
	Object.defineProperty(exports, "cloneWithoutLoc", {
		enumerable: true,
		get: function() {
			return _cloneWithoutLoc.default;
		}
	});
	Object.defineProperty(exports, "createFlowUnionType", {
		enumerable: true,
		get: function() {
			return _createFlowUnionType.default;
		}
	});
	Object.defineProperty(exports, "createTSUnionType", {
		enumerable: true,
		get: function() {
			return _createTSUnionType.default;
		}
	});
	Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
		enumerable: true,
		get: function() {
			return _createTypeAnnotationBasedOnTypeof.default;
		}
	});
	Object.defineProperty(exports, "createUnionTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _createFlowUnionType.default;
		}
	});
	Object.defineProperty(exports, "ensureBlock", {
		enumerable: true,
		get: function() {
			return _ensureBlock.default;
		}
	});
	Object.defineProperty(exports, "getAssignmentIdentifiers", {
		enumerable: true,
		get: function() {
			return _getAssignmentIdentifiers$1.default;
		}
	});
	Object.defineProperty(exports, "getBindingIdentifiers", {
		enumerable: true,
		get: function() {
			return _getBindingIdentifiers$1.default;
		}
	});
	Object.defineProperty(exports, "getFunctionName", {
		enumerable: true,
		get: function() {
			return _getFunctionName.default;
		}
	});
	Object.defineProperty(exports, "getOuterBindingIdentifiers", {
		enumerable: true,
		get: function() {
			return _getOuterBindingIdentifiers$1.default;
		}
	});
	Object.defineProperty(exports, "inheritInnerComments", {
		enumerable: true,
		get: function() {
			return _inheritInnerComments.default;
		}
	});
	Object.defineProperty(exports, "inheritLeadingComments", {
		enumerable: true,
		get: function() {
			return _inheritLeadingComments.default;
		}
	});
	Object.defineProperty(exports, "inheritTrailingComments", {
		enumerable: true,
		get: function() {
			return _inheritTrailingComments.default;
		}
	});
	Object.defineProperty(exports, "inherits", {
		enumerable: true,
		get: function() {
			return _inherits.default;
		}
	});
	Object.defineProperty(exports, "inheritsComments", {
		enumerable: true,
		get: function() {
			return _inheritsComments.default;
		}
	});
	Object.defineProperty(exports, "is", {
		enumerable: true,
		get: function() {
			return _is.default;
		}
	});
	Object.defineProperty(exports, "isBinding", {
		enumerable: true,
		get: function() {
			return _isBinding.default;
		}
	});
	Object.defineProperty(exports, "isBlockScoped", {
		enumerable: true,
		get: function() {
			return _isBlockScoped.default;
		}
	});
	Object.defineProperty(exports, "isImmutable", {
		enumerable: true,
		get: function() {
			return _isImmutable.default;
		}
	});
	Object.defineProperty(exports, "isLet", {
		enumerable: true,
		get: function() {
			return _isLet.default;
		}
	});
	Object.defineProperty(exports, "isNode", {
		enumerable: true,
		get: function() {
			return _isNode.default;
		}
	});
	Object.defineProperty(exports, "isNodesEquivalent", {
		enumerable: true,
		get: function() {
			return _isNodesEquivalent.default;
		}
	});
	Object.defineProperty(exports, "isPlaceholderType", {
		enumerable: true,
		get: function() {
			return _isPlaceholderType.default;
		}
	});
	Object.defineProperty(exports, "isReferenced", {
		enumerable: true,
		get: function() {
			return _isReferenced.default;
		}
	});
	Object.defineProperty(exports, "isScope", {
		enumerable: true,
		get: function() {
			return _isScope.default;
		}
	});
	Object.defineProperty(exports, "isSpecifierDefault", {
		enumerable: true,
		get: function() {
			return _isSpecifierDefault.default;
		}
	});
	Object.defineProperty(exports, "isType", {
		enumerable: true,
		get: function() {
			return _isType.default;
		}
	});
	Object.defineProperty(exports, "isValidES3Identifier", {
		enumerable: true,
		get: function() {
			return _isValidES3Identifier.default;
		}
	});
	Object.defineProperty(exports, "isValidIdentifier", {
		enumerable: true,
		get: function() {
			return _isValidIdentifier.default;
		}
	});
	Object.defineProperty(exports, "isVar", {
		enumerable: true,
		get: function() {
			return _isVar.default;
		}
	});
	Object.defineProperty(exports, "matchesPattern", {
		enumerable: true,
		get: function() {
			return _matchesPattern$1.default;
		}
	});
	Object.defineProperty(exports, "prependToMemberExpression", {
		enumerable: true,
		get: function() {
			return _prependToMemberExpression.default;
		}
	});
	exports.react = void 0;
	Object.defineProperty(exports, "removeComments", {
		enumerable: true,
		get: function() {
			return _removeComments.default;
		}
	});
	Object.defineProperty(exports, "removeProperties", {
		enumerable: true,
		get: function() {
			return _removeProperties.default;
		}
	});
	Object.defineProperty(exports, "removePropertiesDeep", {
		enumerable: true,
		get: function() {
			return _removePropertiesDeep.default;
		}
	});
	Object.defineProperty(exports, "removeTypeDuplicates", {
		enumerable: true,
		get: function() {
			return _removeTypeDuplicates.default;
		}
	});
	Object.defineProperty(exports, "shallowEqual", {
		enumerable: true,
		get: function() {
			return _shallowEqual.default;
		}
	});
	Object.defineProperty(exports, "toBindingIdentifierName", {
		enumerable: true,
		get: function() {
			return _toBindingIdentifierName.default;
		}
	});
	Object.defineProperty(exports, "toBlock", {
		enumerable: true,
		get: function() {
			return _toBlock.default;
		}
	});
	Object.defineProperty(exports, "toComputedKey", {
		enumerable: true,
		get: function() {
			return _toComputedKey.default;
		}
	});
	Object.defineProperty(exports, "toExpression", {
		enumerable: true,
		get: function() {
			return _toExpression.default;
		}
	});
	Object.defineProperty(exports, "toIdentifier", {
		enumerable: true,
		get: function() {
			return _toIdentifier.default;
		}
	});
	Object.defineProperty(exports, "toKeyAlias", {
		enumerable: true,
		get: function() {
			return _toKeyAlias.default;
		}
	});
	Object.defineProperty(exports, "toStatement", {
		enumerable: true,
		get: function() {
			return _toStatement.default;
		}
	});
	Object.defineProperty(exports, "traverse", {
		enumerable: true,
		get: function() {
			return _traverse.default;
		}
	});
	Object.defineProperty(exports, "traverseFast", {
		enumerable: true,
		get: function() {
			return _traverseFast.default;
		}
	});
	Object.defineProperty(exports, "validate", {
		enumerable: true,
		get: function() {
			return _validate.default;
		}
	});
	Object.defineProperty(exports, "valueToNode", {
		enumerable: true,
		get: function() {
			return _valueToNode.default;
		}
	});
	var _isReactComponent = require_isReactComponent();
	var _isCompatTag = require_isCompatTag();
	var _buildChildren = require_buildChildren();
	var _assertNode = require_assertNode();
	var _index$15 = require_generated$1();
	Object.keys(_index$15).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index$15[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index$15[key];
			}
		});
	});
	var _createTypeAnnotationBasedOnTypeof = require_createTypeAnnotationBasedOnTypeof();
	var _createFlowUnionType = require_createFlowUnionType();
	var _createTSUnionType = require_createTSUnionType();
	var _productions = require_productions();
	Object.keys(_productions).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _productions[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _productions[key];
			}
		});
	});
	var _index2$3 = require_generated$2();
	Object.keys(_index2$3).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index2$3[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index2$3[key];
			}
		});
	});
	var _cloneNode = require_cloneNode();
	var _clone = require_clone();
	var _cloneDeep = require_cloneDeep();
	var _cloneDeepWithoutLoc = require_cloneDeepWithoutLoc();
	var _cloneWithoutLoc = require_cloneWithoutLoc();
	var _addComment$1 = require_addComment();
	var _addComments$1 = require_addComments();
	var _inheritInnerComments = require_inheritInnerComments();
	var _inheritLeadingComments = require_inheritLeadingComments();
	var _inheritsComments = require_inheritsComments();
	var _inheritTrailingComments = require_inheritTrailingComments();
	var _removeComments = require_removeComments();
	var _index3 = require_generated();
	Object.keys(_index3).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index3[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index3[key];
			}
		});
	});
	var _index4 = require_constants$1();
	Object.keys(_index4).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index4[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index4[key];
			}
		});
	});
	var _ensureBlock = require_ensureBlock();
	var _toBindingIdentifierName = require_toBindingIdentifierName();
	var _toBlock = require_toBlock();
	var _toComputedKey = require_toComputedKey();
	var _toExpression = require_toExpression();
	var _toIdentifier = require_toIdentifier();
	var _toKeyAlias = require_toKeyAlias();
	var _toStatement = require_toStatement();
	var _valueToNode = require_valueToNode();
	var _index5 = require_definitions();
	Object.keys(_index5).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index5[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index5[key];
			}
		});
	});
	var _appendToMemberExpression = require_appendToMemberExpression();
	var _inherits = require_inherits$1();
	var _prependToMemberExpression = require_prependToMemberExpression();
	var _removeProperties = require_removeProperties();
	var _removePropertiesDeep = require_removePropertiesDeep();
	var _removeTypeDuplicates = require_removeTypeDuplicates$1();
	var _getAssignmentIdentifiers$1 = require_getAssignmentIdentifiers();
	var _getBindingIdentifiers$1 = require_getBindingIdentifiers();
	var _getOuterBindingIdentifiers$1 = require_getOuterBindingIdentifiers();
	var _getFunctionName = require_getFunctionName();
	var _traverse = require_traverse();
	Object.keys(_traverse).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _traverse[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _traverse[key];
			}
		});
	});
	var _traverseFast = require_traverseFast();
	var _shallowEqual = require_shallowEqual();
	var _is = require_is();
	var _isBinding = require_isBinding();
	var _isBlockScoped = require_isBlockScoped();
	var _isImmutable = require_isImmutable();
	var _isLet = require_isLet();
	var _isNode = require_isNode();
	var _isNodesEquivalent = require_isNodesEquivalent();
	var _isPlaceholderType = require_isPlaceholderType();
	var _isReferenced = require_isReferenced();
	var _isScope = require_isScope();
	var _isSpecifierDefault = require_isSpecifierDefault();
	var _isType = require_isType();
	var _isValidES3Identifier = require_isValidES3Identifier();
	var _isValidIdentifier = require_isValidIdentifier();
	var _isVar = require_isVar();
	var _matchesPattern$1 = require_matchesPattern();
	var _validate = require_validate();
	var _buildMatchMemberExpression = require_buildMatchMemberExpression();
	var _index6 = require_generated$3();
	Object.keys(_index6).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		if (key in exports && exports[key] === _index6[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _index6[key];
			}
		});
	});
	var _deprecationWarning = require_deprecationWarning();
	var _toSequenceExpression = require_toSequenceExpression();
	const react$2 = exports.react = {
		isReactComponent: _isReactComponent.default,
		isCompatTag: _isCompatTag.default,
		buildChildren: _buildChildren.default
	};
	exports.toSequenceExpression = _toSequenceExpression.default;
	if (process.env.BABEL_TYPES_8_BREAKING) console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js
var require_virtual_types_validator = __commonJS({ "node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isBindingIdentifier = isBindingIdentifier;
	exports.isBlockScoped = isBlockScoped;
	exports.isExpression = isExpression$4;
	exports.isFlow = isFlow;
	exports.isForAwaitStatement = isForAwaitStatement;
	exports.isGenerated = isGenerated;
	exports.isPure = isPure;
	exports.isReferenced = isReferenced;
	exports.isReferencedIdentifier = isReferencedIdentifier;
	exports.isReferencedMemberExpression = isReferencedMemberExpression;
	exports.isRestProperty = isRestProperty;
	exports.isScope = isScope;
	exports.isSpreadProperty = isSpreadProperty;
	exports.isStatement = isStatement$8;
	exports.isUser = isUser;
	exports.isVar = isVar;
	var _t$35 = require_lib$4();
	const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration: isExportDeclaration$1, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement: isForStatement$1, isForXStatement, isIdentifier: isIdentifier$10, isImportDeclaration: isImportDeclaration$1, isImportSpecifier, isJSXIdentifier: isJSXIdentifier$1, isJSXMemberExpression, isMemberExpression: isMemberExpression$5, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration: isVariableDeclaration$2, react: react$1, isForOfStatement: isForOfStatement$1 } = _t$35;
	const { isCompatTag } = react$1;
	function isReferencedIdentifier(opts) {
		const { node, parent } = this;
		if (!isIdentifier$10(node, opts) && !isJSXMemberExpression(parent, opts)) if (isJSXIdentifier$1(node, opts)) {
			if (isCompatTag(node.name)) return false;
		} else return false;
		return nodeIsReferenced(node, parent, this.parentPath.parent);
	}
	function isReferencedMemberExpression() {
		const { node, parent } = this;
		return isMemberExpression$5(node) && nodeIsReferenced(node, parent);
	}
	function isBindingIdentifier() {
		const { node, parent } = this;
		const grandparent = this.parentPath.parent;
		return isIdentifier$10(node) && isBinding(node, parent, grandparent);
	}
	function isStatement$8() {
		const { node, parent } = this;
		if (nodeIsStatement(node)) {
			if (isVariableDeclaration$2(node)) {
				if (isForXStatement(parent, { left: node })) return false;
				if (isForStatement$1(parent, { init: node })) return false;
			}
			return true;
		} else return false;
	}
	function isExpression$4() {
		if (this.isIdentifier()) return this.isReferencedIdentifier();
		else return nodeIsExpression(this.node);
	}
	function isScope() {
		return nodeIsScope(this.node, this.parent);
	}
	function isReferenced() {
		return nodeIsReferenced(this.node, this.parent);
	}
	function isBlockScoped() {
		return nodeIsBlockScoped(this.node);
	}
	function isVar() {
		return nodeIsVar(this.node);
	}
	function isUser() {
		return this.node && !!this.node.loc;
	}
	function isGenerated() {
		return !this.isUser();
	}
	function isPure(constantsOnly) {
		return this.scope.isPure(this.node, constantsOnly);
	}
	function isFlow() {
		const { node } = this;
		if (nodeIsFlow(node)) return true;
		else if (isImportDeclaration$1(node)) return node.importKind === "type" || node.importKind === "typeof";
		else if (isExportDeclaration$1(node)) return node.exportKind === "type";
		else if (isImportSpecifier(node)) return node.importKind === "type" || node.importKind === "typeof";
		else return false;
	}
	function isRestProperty() {
		var _this$parentPath;
		return nodeIsRestElement(this.node) && ((_this$parentPath = this.parentPath) == null ? void 0 : _this$parentPath.isObjectPattern());
	}
	function isSpreadProperty() {
		var _this$parentPath2;
		return nodeIsRestElement(this.node) && ((_this$parentPath2 = this.parentPath) == null ? void 0 : _this$parentPath2.isObjectExpression());
	}
	function isForAwaitStatement() {
		return isForOfStatement$1(this.node, { await: true });
	}
	{
		exports.isExistentialTypeParam = function isExistentialTypeParam() {
			throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
		};
		exports.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {
			throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
		};
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/visitors.js
var require_visitors = __commonJS({ "node_modules/@babel/traverse/lib/visitors.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.environmentVisitor = environmentVisitor;
	exports.explode = explode$1;
	exports.isExplodedVisitor = isExplodedVisitor;
	exports.merge = merge$1;
	exports.verify = verify$1;
	var virtualTypes$1 = require_virtual_types();
	var virtualTypesValidators = require_virtual_types_validator();
	var _t$34 = require_lib$4();
	var _context$8 = require_context();
	const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS: FLIPPED_ALIAS_KEYS$2, TYPES, __internal__deprecationWarning: deprecationWarning } = _t$34;
	function isVirtualType(type) {
		return type in virtualTypes$1;
	}
	function isExplodedVisitor(visitor) {
		return visitor == null ? void 0 : visitor._exploded;
	}
	function explode$1(visitor) {
		if (isExplodedVisitor(visitor)) return visitor;
		visitor._exploded = true;
		for (const nodeType of Object.keys(visitor)) {
			if (shouldIgnoreKey(nodeType)) continue;
			const parts = nodeType.split("|");
			if (parts.length === 1) continue;
			const fns = visitor[nodeType];
			delete visitor[nodeType];
			for (const part of parts) visitor[part] = fns;
		}
		verify$1(visitor);
		delete visitor.__esModule;
		ensureEntranceObjects(visitor);
		ensureCallbackArrays(visitor);
		for (const nodeType of Object.keys(visitor)) {
			if (shouldIgnoreKey(nodeType)) continue;
			if (!isVirtualType(nodeType)) continue;
			const fns = visitor[nodeType];
			for (const type of Object.keys(fns)) fns[type] = wrapCheck(nodeType, fns[type]);
			delete visitor[nodeType];
			const types$7 = virtualTypes$1[nodeType];
			if (types$7 !== null) for (const type of types$7) if (visitor[type]) mergePair(visitor[type], fns);
			else visitor[type] = fns;
			else mergePair(visitor, fns);
		}
		for (const nodeType of Object.keys(visitor)) {
			if (shouldIgnoreKey(nodeType)) continue;
			let aliases = FLIPPED_ALIAS_KEYS$2[nodeType];
			if (nodeType in DEPRECATED_KEYS) {
				const deprecatedKey = DEPRECATED_KEYS[nodeType];
				deprecationWarning(nodeType, deprecatedKey, "Visitor ");
				aliases = [deprecatedKey];
			} else if (nodeType in DEPRECATED_ALIASES) {
				const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
				deprecationWarning(nodeType, deprecatedAlias, "Visitor ");
				aliases = FLIPPED_ALIAS_KEYS$2[deprecatedAlias];
			}
			if (!aliases) continue;
			const fns = visitor[nodeType];
			delete visitor[nodeType];
			for (const alias of aliases) {
				const existing = visitor[alias];
				if (existing) mergePair(existing, fns);
				else visitor[alias] = Object.assign({}, fns);
			}
		}
		for (const nodeType of Object.keys(visitor)) {
			if (shouldIgnoreKey(nodeType)) continue;
			ensureCallbackArrays(visitor[nodeType]);
		}
		return visitor;
	}
	function verify$1(visitor) {
		if (visitor._verified) return;
		if (typeof visitor === "function") throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
		for (const nodeType of Object.keys(visitor)) {
			if (nodeType === "enter" || nodeType === "exit") validateVisitorMethods(nodeType, visitor[nodeType]);
			if (shouldIgnoreKey(nodeType)) continue;
			if (!TYPES.includes(nodeType)) throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse 7.27.0`);
			const visitors$1 = visitor[nodeType];
			if (typeof visitors$1 === "object") for (const visitorKey of Object.keys(visitors$1)) if (visitorKey === "enter" || visitorKey === "exit") validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors$1[visitorKey]);
			else throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
		}
		visitor._verified = true;
	}
	function validateVisitorMethods(path$28, val) {
		const fns = [].concat(val);
		for (const fn of fns) if (typeof fn !== "function") throw new TypeError(`Non-function found defined in ${path$28} with type ${typeof fn}`);
	}
	function merge$1(visitors$1, states = [], wrapper) {
		const mergedVisitor = {
			_verified: true,
			_exploded: true
		};
		{
			Object.defineProperty(mergedVisitor, "_exploded", { enumerable: false });
			Object.defineProperty(mergedVisitor, "_verified", { enumerable: false });
		}
		for (let i$6 = 0; i$6 < visitors$1.length; i$6++) {
			const visitor = explode$1(visitors$1[i$6]);
			const state = states[i$6];
			let topVisitor = visitor;
			if (state || wrapper) topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);
			mergePair(mergedVisitor, topVisitor);
			for (const key of Object.keys(visitor)) {
				if (shouldIgnoreKey(key)) continue;
				let typeVisitor = visitor[key];
				if (state || wrapper) typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);
				const nodeVisitor = mergedVisitor[key] || (mergedVisitor[key] = {});
				mergePair(nodeVisitor, typeVisitor);
			}
		}
		return mergedVisitor;
	}
	function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
		const newVisitor = {};
		for (const phase of ["enter", "exit"]) {
			let fns = oldVisitor[phase];
			if (!Array.isArray(fns)) continue;
			fns = fns.map(function(fn) {
				let newFn = fn;
				if (state) newFn = function(path$28) {
					fn.call(state, path$28, state);
				};
				if (wrapper) newFn = wrapper(state == null ? void 0 : state.key, phase, newFn);
				if (newFn !== fn) newFn.toString = () => fn.toString();
				return newFn;
			});
			newVisitor[phase] = fns;
		}
		return newVisitor;
	}
	function ensureEntranceObjects(obj) {
		for (const key of Object.keys(obj)) {
			if (shouldIgnoreKey(key)) continue;
			const fns = obj[key];
			if (typeof fns === "function") obj[key] = { enter: fns };
		}
	}
	function ensureCallbackArrays(obj) {
		if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
		if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}
	function wrapCheck(nodeType, fn) {
		const fnKey = `is${nodeType}`;
		const validator = virtualTypesValidators[fnKey];
		const newFn = function(path$28) {
			if (validator.call(path$28)) return fn.apply(this, arguments);
		};
		newFn.toString = () => fn.toString();
		return newFn;
	}
	function shouldIgnoreKey(key) {
		if (key[0] === "_") return true;
		if (key === "enter" || key === "exit" || key === "shouldSkip") return true;
		if (key === "denylist" || key === "noScope" || key === "skipKeys") return true;
		if (key === "blacklist") return true;
		return false;
	}
	function mergePair(dest, src) {
		for (const phase of ["enter", "exit"]) {
			if (!src[phase]) continue;
			dest[phase] = [].concat(dest[phase] || [], src[phase]);
		}
	}
	const _environmentVisitor = {
		FunctionParent(path$28) {
			if (path$28.isArrowFunctionExpression()) return;
			path$28.skip();
			if (path$28.isMethod()) if (!path$28.requeueComputedKeyAndDecorators) _context$8.requeueComputedKeyAndDecorators.call(path$28);
			else path$28.requeueComputedKeyAndDecorators();
		},
		Property(path$28) {
			if (path$28.isObjectProperty()) return;
			path$28.skip();
			if (!path$28.requeueComputedKeyAndDecorators) _context$8.requeueComputedKeyAndDecorators.call(path$28);
			else path$28.requeueComputedKeyAndDecorators();
		}
	};
	function environmentVisitor(visitor) {
		return merge$1([_environmentVisitor, visitor]);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/scope/lib/renamer.js
var require_renamer = __commonJS({ "node_modules/@babel/traverse/lib/scope/lib/renamer.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var t$5 = require_lib$4();
	var _t$33 = t$5;
	var _traverseNode$2 = require_traverse_node();
	var _visitors$1 = require_visitors();
	var _context$7 = require_context();
	const { getAssignmentIdentifiers: getAssignmentIdentifiers$1 } = _t$33;
	const renameVisitor = {
		ReferencedIdentifier({ node }, state) {
			if (node.name === state.oldName) node.name = state.newName;
		},
		Scope(path$28, state) {
			if (!path$28.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
				path$28.skip();
				if (path$28.isMethod()) if (!path$28.requeueComputedKeyAndDecorators) _context$7.requeueComputedKeyAndDecorators.call(path$28);
				else path$28.requeueComputedKeyAndDecorators();
			}
		},
		ObjectProperty({ node, scope: scope$1 }, state) {
			const { name } = node.key;
			if (node.shorthand && (name === state.oldName || name === state.newName) && scope$1.getBindingIdentifier(name) === state.binding.identifier) {
				node.shorthand = false;
				{
					var _node$extra;
					if ((_node$extra = node.extra) != null && _node$extra.shorthand) node.extra.shorthand = false;
				}
			}
		},
		"AssignmentExpression|Declaration|VariableDeclarator"(path$28, state) {
			if (path$28.isVariableDeclaration()) return;
			const ids = path$28.isAssignmentExpression() ? getAssignmentIdentifiers$1(path$28.node) : path$28.getOuterBindingIdentifiers();
			for (const name in ids) if (name === state.oldName) ids[name].name = state.newName;
		}
	};
	var Renamer = class {
		constructor(binding, oldName, newName) {
			this.newName = newName;
			this.oldName = oldName;
			this.binding = binding;
		}
		maybeConvertFromExportDeclaration(parentDeclar) {
			const maybeExportDeclar = parentDeclar.parentPath;
			if (!maybeExportDeclar.isExportDeclaration()) return;
			if (maybeExportDeclar.isExportDefaultDeclaration()) {
				const { declaration } = maybeExportDeclar.node;
				if (t$5.isDeclaration(declaration) && !declaration.id) return;
			}
			if (maybeExportDeclar.isExportAllDeclaration()) return;
			maybeExportDeclar.splitExportDeclaration();
		}
		maybeConvertFromClassFunctionDeclaration(path$28) {
			return path$28;
		}
		maybeConvertFromClassFunctionExpression(path$28) {
			return path$28;
		}
		rename() {
			const { binding, oldName, newName } = this;
			const { scope: scope$1, path: path$28 } = binding;
			const parentDeclar = path$28.find((path$29) => path$29.isDeclaration() || path$29.isFunctionExpression() || path$29.isClassExpression());
			if (parentDeclar) {
				const bindingIds = parentDeclar.getOuterBindingIdentifiers();
				if (bindingIds[oldName] === binding.identifier) this.maybeConvertFromExportDeclaration(parentDeclar);
			}
			const blockToTraverse = arguments[0] || scope$1.block;
			const skipKeys = { discriminant: true };
			if (t$5.isMethod(blockToTraverse)) {
				if (blockToTraverse.computed) skipKeys.key = true;
				if (!t$5.isObjectMethod(blockToTraverse)) skipKeys.decorators = true;
			}
			(0, _traverseNode$2.traverseNode)(blockToTraverse, (0, _visitors$1.explode)(renameVisitor), scope$1, this, scope$1.path, skipKeys);
			if (!arguments[0]) {
				scope$1.removeOwnBinding(oldName);
				scope$1.bindings[newName] = binding;
				this.binding.identifier.name = newName;
			}
			if (parentDeclar) {
				this.maybeConvertFromClassFunctionDeclaration(path$28);
				this.maybeConvertFromClassFunctionExpression(path$28);
			}
		}
	};
	exports.default = Renamer;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/scope/binding.js
var require_binding = __commonJS({ "node_modules/@babel/traverse/lib/scope/binding.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var Binding = class {
		constructor({ identifier: identifier$6, scope: scope$1, path: path$28, kind }) {
			this.identifier = void 0;
			this.scope = void 0;
			this.path = void 0;
			this.kind = void 0;
			this.constantViolations = [];
			this.constant = true;
			this.referencePaths = [];
			this.referenced = false;
			this.references = 0;
			this.identifier = identifier$6;
			this.scope = scope$1;
			this.path = path$28;
			this.kind = kind;
			if ((kind === "var" || kind === "hoisted") && isInitInLoop(path$28)) this.reassign(path$28);
			this.clearValue();
		}
		deoptValue() {
			this.clearValue();
			this.hasDeoptedValue = true;
		}
		setValue(value) {
			if (this.hasDeoptedValue) return;
			this.hasValue = true;
			this.value = value;
		}
		clearValue() {
			this.hasDeoptedValue = false;
			this.hasValue = false;
			this.value = null;
		}
		reassign(path$28) {
			this.constant = false;
			if (this.constantViolations.includes(path$28)) return;
			this.constantViolations.push(path$28);
		}
		reference(path$28) {
			if (this.referencePaths.includes(path$28)) return;
			this.referenced = true;
			this.references++;
			this.referencePaths.push(path$28);
		}
		dereference() {
			this.references--;
			this.referenced = !!this.references;
		}
	};
	exports.default = Binding;
	function isInitInLoop(path$28) {
		const isFunctionDeclarationOrHasInit = !path$28.isVariableDeclarator() || path$28.node.init;
		for (let { parentPath, key } = path$28; parentPath; {parentPath, key} = parentPath) {
			if (parentPath.isFunctionParent()) return false;
			if (key === "left" && parentPath.isForXStatement() || isFunctionDeclarationOrHasInit && key === "body" && parentPath.isLoop()) return true;
		}
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/node_modules/globals/globals.json
var require_globals$1 = __commonJS({ "node_modules/@babel/traverse/node_modules/globals/globals.json"(exports, module) {
	module.exports = {
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Atomics": false,
			"BigInt": false,
			"BigInt64Array": false,
			"BigUint64Array": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"globalThis": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"SharedArrayBuffer": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"es5": {
			"Array": false,
			"Boolean": false,
			"constructor": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"propertyIsEnumerable": false,
			"RangeError": false,
			"ReferenceError": false,
			"RegExp": false,
			"String": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false
		},
		"es2015": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"es2017": {
			"Array": false,
			"ArrayBuffer": false,
			"Atomics": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"SharedArrayBuffer": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"browser": {
			"AbortController": false,
			"AbortSignal": false,
			"addEventListener": false,
			"alert": false,
			"AnalyserNode": false,
			"Animation": false,
			"AnimationEffectReadOnly": false,
			"AnimationEffectTiming": false,
			"AnimationEffectTimingReadOnly": false,
			"AnimationEvent": false,
			"AnimationPlaybackEvent": false,
			"AnimationTimeline": false,
			"applicationCache": false,
			"ApplicationCache": false,
			"ApplicationCacheErrorEvent": false,
			"atob": false,
			"Attr": false,
			"Audio": false,
			"AudioBuffer": false,
			"AudioBufferSourceNode": false,
			"AudioContext": false,
			"AudioDestinationNode": false,
			"AudioListener": false,
			"AudioNode": false,
			"AudioParam": false,
			"AudioProcessingEvent": false,
			"AudioScheduledSourceNode": false,
			"AudioWorkletGlobalScope ": false,
			"AudioWorkletNode": false,
			"AudioWorkletProcessor": false,
			"BarProp": false,
			"BaseAudioContext": false,
			"BatteryManager": false,
			"BeforeUnloadEvent": false,
			"BiquadFilterNode": false,
			"Blob": false,
			"BlobEvent": false,
			"blur": false,
			"BroadcastChannel": false,
			"btoa": false,
			"BudgetService": false,
			"ByteLengthQueuingStrategy": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"cancelAnimationFrame": false,
			"cancelIdleCallback": false,
			"CanvasCaptureMediaStreamTrack": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"ChannelMergerNode": false,
			"ChannelSplitterNode": false,
			"CharacterData": false,
			"clearInterval": false,
			"clearTimeout": false,
			"clientInformation": false,
			"ClipboardEvent": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"ConstantSourceNode": false,
			"ConvolverNode": false,
			"CountQueuingStrategy": false,
			"createImageBitmap": false,
			"Credential": false,
			"CredentialsContainer": false,
			"crypto": false,
			"Crypto": false,
			"CryptoKey": false,
			"CSS": false,
			"CSSConditionRule": false,
			"CSSFontFaceRule": false,
			"CSSGroupingRule": false,
			"CSSImportRule": false,
			"CSSKeyframeRule": false,
			"CSSKeyframesRule": false,
			"CSSMediaRule": false,
			"CSSNamespaceRule": false,
			"CSSPageRule": false,
			"CSSRule": false,
			"CSSRuleList": false,
			"CSSStyleDeclaration": false,
			"CSSStyleRule": false,
			"CSSStyleSheet": false,
			"CSSSupportsRule": false,
			"CustomElementRegistry": false,
			"customElements": false,
			"CustomEvent": false,
			"DataTransfer": false,
			"DataTransferItem": false,
			"DataTransferItemList": false,
			"defaultstatus": false,
			"defaultStatus": false,
			"DelayNode": false,
			"DeviceMotionEvent": false,
			"DeviceOrientationEvent": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DocumentType": false,
			"DOMError": false,
			"DOMException": false,
			"DOMImplementation": false,
			"DOMMatrix": false,
			"DOMMatrixReadOnly": false,
			"DOMParser": false,
			"DOMPoint": false,
			"DOMPointReadOnly": false,
			"DOMQuad": false,
			"DOMRect": false,
			"DOMRectReadOnly": false,
			"DOMStringList": false,
			"DOMStringMap": false,
			"DOMTokenList": false,
			"DragEvent": false,
			"DynamicsCompressorNode": false,
			"Element": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"EventSource": false,
			"EventTarget": false,
			"external": false,
			"fetch": false,
			"File": false,
			"FileList": false,
			"FileReader": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FontFace": false,
			"FontFaceSetLoadEvent": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GainNode": false,
			"Gamepad": false,
			"GamepadButton": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"History": false,
			"HTMLAllCollection": false,
			"HTMLAnchorElement": false,
			"HTMLAreaElement": false,
			"HTMLAudioElement": false,
			"HTMLBaseElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLCollection": false,
			"HTMLContentElement": false,
			"HTMLDataElement": false,
			"HTMLDataListElement": false,
			"HTMLDetailsElement": false,
			"HTMLDialogElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLDocument": false,
			"HTMLElement": false,
			"HTMLEmbedElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormControlsCollection": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLLabelElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMarqueeElement": false,
			"HTMLMediaElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLMeterElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLOptionsCollection": false,
			"HTMLOutputElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPictureElement": false,
			"HTMLPreElement": false,
			"HTMLProgressElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLShadowElement": false,
			"HTMLSlotElement": false,
			"HTMLSourceElement": false,
			"HTMLSpanElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTemplateElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTimeElement": false,
			"HTMLTitleElement": false,
			"HTMLTrackElement": false,
			"HTMLUListElement": false,
			"HTMLUnknownElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"IdleDeadline": false,
			"IIRFilterNode": false,
			"Image": false,
			"ImageBitmap": false,
			"ImageBitmapRenderingContext": false,
			"ImageCapture": false,
			"ImageData": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"IntersectionObserver": false,
			"IntersectionObserverEntry": false,
			"Intl": false,
			"isSecureContext": false,
			"KeyboardEvent": false,
			"KeyframeEffect": false,
			"KeyframeEffectReadOnly": false,
			"length": false,
			"localStorage": false,
			"location": true,
			"Location": false,
			"locationbar": false,
			"matchMedia": false,
			"MediaDeviceInfo": false,
			"MediaDevices": false,
			"MediaElementAudioSourceNode": false,
			"MediaEncryptedEvent": false,
			"MediaError": false,
			"MediaKeyMessageEvent": false,
			"MediaKeySession": false,
			"MediaKeyStatusMap": false,
			"MediaKeySystemAccess": false,
			"MediaList": false,
			"MediaQueryList": false,
			"MediaQueryListEvent": false,
			"MediaRecorder": false,
			"MediaSettingsRange": false,
			"MediaSource": false,
			"MediaStream": false,
			"MediaStreamAudioDestinationNode": false,
			"MediaStreamAudioSourceNode": false,
			"MediaStreamEvent": false,
			"MediaStreamTrack": false,
			"MediaStreamTrackEvent": false,
			"menubar": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MIDIAccess": false,
			"MIDIConnectionEvent": false,
			"MIDIInput": false,
			"MIDIInputMap": false,
			"MIDIMessageEvent": false,
			"MIDIOutput": false,
			"MIDIOutputMap": false,
			"MIDIPort": false,
			"MimeType": false,
			"MimeTypeArray": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationEvent": false,
			"MutationObserver": false,
			"MutationRecord": false,
			"name": false,
			"NamedNodeMap": false,
			"NavigationPreloadManager": false,
			"navigator": false,
			"Navigator": false,
			"NetworkInformation": false,
			"Node": false,
			"NodeFilter": false,
			"NodeIterator": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"OfflineAudioContext": false,
			"offscreenBuffering": false,
			"OffscreenCanvas": true,
			"onabort": true,
			"onafterprint": true,
			"onanimationend": true,
			"onanimationiteration": true,
			"onanimationstart": true,
			"onappinstalled": true,
			"onauxclick": true,
			"onbeforeinstallprompt": true,
			"onbeforeprint": true,
			"onbeforeunload": true,
			"onblur": true,
			"oncancel": true,
			"oncanplay": true,
			"oncanplaythrough": true,
			"onchange": true,
			"onclick": true,
			"onclose": true,
			"oncontextmenu": true,
			"oncuechange": true,
			"ondblclick": true,
			"ondevicemotion": true,
			"ondeviceorientation": true,
			"ondeviceorientationabsolute": true,
			"ondrag": true,
			"ondragend": true,
			"ondragenter": true,
			"ondragleave": true,
			"ondragover": true,
			"ondragstart": true,
			"ondrop": true,
			"ondurationchange": true,
			"onemptied": true,
			"onended": true,
			"onerror": true,
			"onfocus": true,
			"ongotpointercapture": true,
			"onhashchange": true,
			"oninput": true,
			"oninvalid": true,
			"onkeydown": true,
			"onkeypress": true,
			"onkeyup": true,
			"onlanguagechange": true,
			"onload": true,
			"onloadeddata": true,
			"onloadedmetadata": true,
			"onloadstart": true,
			"onlostpointercapture": true,
			"onmessage": true,
			"onmessageerror": true,
			"onmousedown": true,
			"onmouseenter": true,
			"onmouseleave": true,
			"onmousemove": true,
			"onmouseout": true,
			"onmouseover": true,
			"onmouseup": true,
			"onmousewheel": true,
			"onoffline": true,
			"ononline": true,
			"onpagehide": true,
			"onpageshow": true,
			"onpause": true,
			"onplay": true,
			"onplaying": true,
			"onpointercancel": true,
			"onpointerdown": true,
			"onpointerenter": true,
			"onpointerleave": true,
			"onpointermove": true,
			"onpointerout": true,
			"onpointerover": true,
			"onpointerup": true,
			"onpopstate": true,
			"onprogress": true,
			"onratechange": true,
			"onrejectionhandled": true,
			"onreset": true,
			"onresize": true,
			"onscroll": true,
			"onsearch": true,
			"onseeked": true,
			"onseeking": true,
			"onselect": true,
			"onstalled": true,
			"onstorage": true,
			"onsubmit": true,
			"onsuspend": true,
			"ontimeupdate": true,
			"ontoggle": true,
			"ontransitionend": true,
			"onunhandledrejection": true,
			"onunload": true,
			"onvolumechange": true,
			"onwaiting": true,
			"onwheel": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"Option": false,
			"origin": false,
			"OscillatorNode": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"PannerNode": false,
			"parent": false,
			"Path2D": false,
			"PaymentAddress": false,
			"PaymentRequest": false,
			"PaymentRequestUpdateEvent": false,
			"PaymentResponse": false,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceLongTaskTiming": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceNavigationTiming": false,
			"PerformanceObserver": false,
			"PerformanceObserverEntryList": false,
			"PerformancePaintTiming": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"PeriodicWave": false,
			"Permissions": false,
			"PermissionStatus": false,
			"personalbar": false,
			"PhotoCapabilities": false,
			"Plugin": false,
			"PluginArray": false,
			"PointerEvent": false,
			"PopStateEvent": false,
			"postMessage": false,
			"Presentation": false,
			"PresentationAvailability": false,
			"PresentationConnection": false,
			"PresentationConnectionAvailableEvent": false,
			"PresentationConnectionCloseEvent": false,
			"PresentationConnectionList": false,
			"PresentationReceiver": false,
			"PresentationRequest": false,
			"print": false,
			"ProcessingInstruction": false,
			"ProgressEvent": false,
			"PromiseRejectionEvent": false,
			"prompt": false,
			"PushManager": false,
			"PushSubscription": false,
			"PushSubscriptionOptions": false,
			"queueMicrotask": false,
			"RadioNodeList": false,
			"Range": false,
			"ReadableStream": false,
			"registerProcessor": false,
			"RemotePlayback": false,
			"removeEventListener": false,
			"Request": false,
			"requestAnimationFrame": false,
			"requestIdleCallback": false,
			"resizeBy": false,
			"ResizeObserver": false,
			"ResizeObserverEntry": false,
			"resizeTo": false,
			"Response": false,
			"RTCCertificate": false,
			"RTCDataChannel": false,
			"RTCDataChannelEvent": false,
			"RTCDtlsTransport": false,
			"RTCIceCandidate": false,
			"RTCIceGatherer": false,
			"RTCIceTransport": false,
			"RTCPeerConnection": false,
			"RTCPeerConnectionIceEvent": false,
			"RTCRtpContributingSource": false,
			"RTCRtpReceiver": false,
			"RTCRtpSender": false,
			"RTCSctpTransport": false,
			"RTCSessionDescription": false,
			"RTCStatsReport": false,
			"RTCTrackEvent": false,
			"screen": false,
			"Screen": false,
			"screenLeft": false,
			"ScreenOrientation": false,
			"screenTop": false,
			"screenX": false,
			"screenY": false,
			"ScriptProcessorNode": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"SecurityPolicyViolationEvent": false,
			"Selection": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerRegistration": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"ShadowRoot": false,
			"SharedWorker": false,
			"SourceBuffer": false,
			"SourceBufferList": false,
			"speechSynthesis": false,
			"SpeechSynthesisEvent": false,
			"SpeechSynthesisUtterance": false,
			"StaticRange": false,
			"status": false,
			"statusbar": false,
			"StereoPannerNode": false,
			"stop": false,
			"Storage": false,
			"StorageEvent": false,
			"StorageManager": false,
			"styleMedia": false,
			"StyleSheet": false,
			"StyleSheetList": false,
			"SubtleCrypto": false,
			"SVGAElement": false,
			"SVGAngle": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDiscardElement": false,
			"SVGElement": false,
			"SVGEllipseElement": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEDropShadowElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGeometryElement": false,
			"SVGGradientElement": false,
			"SVGGraphicsElement": false,
			"SVGImageElement": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPathElement": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformList": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"TaskAttributionTiming": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TextEvent": false,
			"TextMetrics": false,
			"TextTrack": false,
			"TextTrackCue": false,
			"TextTrackCueList": false,
			"TextTrackList": false,
			"TimeRanges": false,
			"toolbar": false,
			"top": false,
			"Touch": false,
			"TouchEvent": false,
			"TouchList": false,
			"TrackEvent": false,
			"TransitionEvent": false,
			"TreeWalker": false,
			"UIEvent": false,
			"URL": false,
			"URLSearchParams": false,
			"ValidityState": false,
			"visualViewport": false,
			"VisualViewport": false,
			"VTTCue": false,
			"WaveShaperNode": false,
			"WebAssembly": false,
			"WebGL2RenderingContext": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLQuery": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLSampler": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLSync": false,
			"WebGLTexture": false,
			"WebGLTransformFeedback": false,
			"WebGLUniformLocation": false,
			"WebGLVertexArrayObject": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"WritableStream": false,
			"XMLDocument": false,
			"XMLHttpRequest": false,
			"XMLHttpRequestEventTarget": false,
			"XMLHttpRequestUpload": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathExpression": false,
			"XPathResult": false,
			"XSLTProcessor": false
		},
		"worker": {
			"addEventListener": false,
			"applicationCache": false,
			"atob": false,
			"Blob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": true,
			"console": false,
			"fetch": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": true,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onoffline": true,
			"ononline": true,
			"onrejectionhandled": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"queueMicrotask": false,
			"removeEventListener": false,
			"Request": false,
			"Response": false,
			"self": true,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"URLSearchParams": false,
			"WebSocket": false,
			"Worker": false,
			"WorkerGlobalScope": false,
			"XMLHttpRequest": false
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"exports": true,
			"global": false,
			"Intl": false,
			"module": false,
			"process": false,
			"queueMicrotask": false,
			"require": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"URLSearchParams": false
		},
		"commonjs": {
			"exports": true,
			"global": false,
			"module": false,
			"require": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"mocha": false,
			"run": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"spyOnProperty": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"jest": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jest": false,
			"pit": false,
			"require": false,
			"test": false,
			"xdescribe": false,
			"xit": false,
			"xtest": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notOk": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"nashorn": {
			"__DIR__": false,
			"__FILE__": false,
			"__LINE__": false,
			"com": false,
			"edu": false,
			"exit": false,
			"java": false,
			"Java": false,
			"javafx": false,
			"JavaImporter": false,
			"javax": false,
			"JSAdapter": false,
			"load": false,
			"loadWithNewGlobal": false,
			"org": false,
			"Packages": false,
			"print": false,
			"quit": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"YAHOO": false,
			"YAHOO_config": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ln": false,
			"ls": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"set": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"touch": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"_": false,
			"$": false,
			"Accounts": false,
			"AccountsClient": false,
			"AccountsCommon": false,
			"AccountsServer": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPRateLimiter": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"ServiceConfiguration": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"ISODate": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"NumberInt": false,
			"NumberLong": false,
			"ObjectId": false,
			"PlanCache": false,
			"print": false,
			"printjson": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		},
		"serviceworker": {
			"addEventListener": false,
			"applicationCache": false,
			"atob": false,
			"Blob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"clearInterval": false,
			"clearTimeout": false,
			"Client": false,
			"clients": false,
			"Clients": false,
			"close": true,
			"console": false,
			"ExtendableEvent": false,
			"ExtendableMessageEvent": false,
			"fetch": false,
			"FetchEvent": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": false,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onfetch": true,
			"oninstall": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onmessageerror": true,
			"onnotificationclick": true,
			"onnotificationclose": true,
			"onoffline": true,
			"ononline": true,
			"onpush": true,
			"onpushsubscriptionchange": true,
			"onrejectionhandled": true,
			"onsync": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"queueMicrotask": false,
			"registration": false,
			"removeEventListener": false,
			"Request": false,
			"Response": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerGlobalScope": false,
			"ServiceWorkerMessageEvent": false,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"skipWaiting": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"URLSearchParams": false,
			"WebSocket": false,
			"WindowClient": false,
			"Worker": false,
			"WorkerGlobalScope": false,
			"XMLHttpRequest": false
		},
		"atomtest": {
			"advanceClock": false,
			"fakeClearInterval": false,
			"fakeClearTimeout": false,
			"fakeSetInterval": false,
			"fakeSetTimeout": false,
			"resetTimeouts": false,
			"waitsForPromise": false
		},
		"embertest": {
			"andThen": false,
			"click": false,
			"currentPath": false,
			"currentRouteName": false,
			"currentURL": false,
			"fillIn": false,
			"find": false,
			"findAll": false,
			"findWithAssert": false,
			"keyEvent": false,
			"pauseTest": false,
			"resumeTest": false,
			"triggerEvent": false,
			"visit": false,
			"wait": false
		},
		"protractor": {
			"$": false,
			"$$": false,
			"browser": false,
			"by": false,
			"By": false,
			"DartObject": false,
			"element": false,
			"protractor": false
		},
		"shared-node-browser": {
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"setInterval": false,
			"setTimeout": false,
			"URL": false,
			"URLSearchParams": false
		},
		"webextensions": {
			"browser": false,
			"chrome": false,
			"opr": false
		},
		"greasemonkey": {
			"cloneInto": false,
			"createObjectIn": false,
			"exportFunction": false,
			"GM": false,
			"GM_addStyle": false,
			"GM_deleteValue": false,
			"GM_getResourceText": false,
			"GM_getResourceURL": false,
			"GM_getValue": false,
			"GM_info": false,
			"GM_listValues": false,
			"GM_log": false,
			"GM_openInTab": false,
			"GM_registerMenuCommand": false,
			"GM_setClipboard": false,
			"GM_setValue": false,
			"GM_xmlhttpRequest": false,
			"unsafeWindow": false
		},
		"devtools": {
			"$": false,
			"$_": false,
			"$$": false,
			"$0": false,
			"$1": false,
			"$2": false,
			"$3": false,
			"$4": false,
			"$x": false,
			"chrome": false,
			"clear": false,
			"copy": false,
			"debug": false,
			"dir": false,
			"dirxml": false,
			"getEventListeners": false,
			"inspect": false,
			"keys": false,
			"monitor": false,
			"monitorEvents": false,
			"profile": false,
			"profileEnd": false,
			"queryObjects": false,
			"table": false,
			"undebug": false,
			"unmonitor": false,
			"unmonitorEvents": false,
			"values": false
		}
	};
} });

//#endregion
//#region node_modules/@babel/traverse/node_modules/globals/index.js
var require_globals = __commonJS({ "node_modules/@babel/traverse/node_modules/globals/index.js"(exports, module) {
	module.exports = require_globals$1();
} });

//#endregion
//#region node_modules/@babel/traverse/lib/cache.js
var require_cache = __commonJS({ "node_modules/@babel/traverse/lib/cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.clear = clear;
	exports.clearPath = clearPath;
	exports.clearScope = clearScope;
	exports.getCachedPaths = getCachedPaths;
	exports.getOrCreateCachedPaths = getOrCreateCachedPaths;
	exports.scope = exports.path = void 0;
	let pathsCache = exports.path = new WeakMap();
	let scope = exports.scope = new WeakMap();
	function clear() {
		clearPath();
		clearScope();
	}
	function clearPath() {
		exports.path = pathsCache = new WeakMap();
	}
	function clearScope() {
		exports.scope = scope = new WeakMap();
	}
	const nullHub = Object.freeze({});
	function getCachedPaths(hub, parent) {
		var _pathsCache$get;
		hub = null;
		return (_pathsCache$get = pathsCache.get(hub != null ? hub : nullHub)) == null ? void 0 : _pathsCache$get.get(parent);
	}
	function getOrCreateCachedPaths(hub, parent) {
		hub = null;
		let parents = pathsCache.get(hub != null ? hub : nullHub);
		if (!parents) pathsCache.set(hub != null ? hub : nullHub, parents = new WeakMap());
		let paths = parents.get(parent);
		if (!paths) parents.set(parent, paths = new Map());
		return paths;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/scope/index.js
var require_scope = __commonJS({ "node_modules/@babel/traverse/lib/scope/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _renamer = require_renamer();
	var _index$14 = require_lib();
	var _binding = require_binding();
	var _globals = require_globals();
	var _t$32 = require_lib$4();
	var t$4 = _t$32;
	var _cache$3 = require_cache();
	const { assignmentExpression: assignmentExpression$3, callExpression: callExpression$3, cloneNode: cloneNode$5, getBindingIdentifiers: getBindingIdentifiers$3, identifier: identifier$4, isArrayExpression: isArrayExpression$1, isBinary: isBinary$1, isCallExpression: isCallExpression$6, isClass, isClassBody: isClassBody$1, isClassDeclaration: isClassDeclaration$1, isExportAllDeclaration, isExportDefaultDeclaration: isExportDefaultDeclaration$1, isExportNamedDeclaration: isExportNamedDeclaration$2, isFunctionDeclaration, isIdentifier: isIdentifier$9, isImportDeclaration, isLiteral: isLiteral$3, isMemberExpression: isMemberExpression$4, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression: isObjectExpression$1, isProperty, isPureish, isRegExpLiteral, isSuper: isSuper$1, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration: isVariableDeclaration$1, expressionStatement: expressionStatement$4, matchesPattern: matchesPattern$1, memberExpression: memberExpression$1, numericLiteral: numericLiteral$2, toIdentifier, variableDeclaration: variableDeclaration$2, variableDeclarator: variableDeclarator$2, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode: buildUndefinedNode$1, sequenceExpression: sequenceExpression$2 } = _t$32;
	function gatherNodeParts(node, parts) {
		switch (node == null ? void 0 : node.type) {
			default:
				if (isImportDeclaration(node) || isExportDeclaration(node)) {
					var _node$specifiers;
					if ((isExportAllDeclaration(node) || isExportNamedDeclaration$2(node) || isImportDeclaration(node)) && node.source) gatherNodeParts(node.source, parts);
					else if ((isExportNamedDeclaration$2(node) || isImportDeclaration(node)) && (_node$specifiers = node.specifiers) != null && _node$specifiers.length) for (const e$2 of node.specifiers) gatherNodeParts(e$2, parts);
					else if ((isExportDefaultDeclaration$1(node) || isExportNamedDeclaration$2(node)) && node.declaration) gatherNodeParts(node.declaration, parts);
				} else if (isModuleSpecifier(node)) gatherNodeParts(node.local, parts);
				else if (isLiteral$3(node) && !isNullLiteral(node) && !isRegExpLiteral(node) && !isTemplateLiteral(node)) parts.push(node.value);
				break;
			case "MemberExpression":
			case "OptionalMemberExpression":
			case "JSXMemberExpression":
				gatherNodeParts(node.object, parts);
				gatherNodeParts(node.property, parts);
				break;
			case "Identifier":
			case "JSXIdentifier":
				parts.push(node.name);
				break;
			case "CallExpression":
			case "OptionalCallExpression":
			case "NewExpression":
				gatherNodeParts(node.callee, parts);
				break;
			case "ObjectExpression":
			case "ObjectPattern":
				for (const e$2 of node.properties) gatherNodeParts(e$2, parts);
				break;
			case "SpreadElement":
			case "RestElement":
				gatherNodeParts(node.argument, parts);
				break;
			case "ObjectProperty":
			case "ObjectMethod":
			case "ClassProperty":
			case "ClassMethod":
			case "ClassPrivateProperty":
			case "ClassPrivateMethod":
				gatherNodeParts(node.key, parts);
				break;
			case "ThisExpression":
				parts.push("this");
				break;
			case "Super":
				parts.push("super");
				break;
			case "Import":
				parts.push("import");
				break;
			case "DoExpression":
				parts.push("do");
				break;
			case "YieldExpression":
				parts.push("yield");
				gatherNodeParts(node.argument, parts);
				break;
			case "AwaitExpression":
				parts.push("await");
				gatherNodeParts(node.argument, parts);
				break;
			case "AssignmentExpression":
				gatherNodeParts(node.left, parts);
				break;
			case "VariableDeclarator":
				gatherNodeParts(node.id, parts);
				break;
			case "FunctionExpression":
			case "FunctionDeclaration":
			case "ClassExpression":
			case "ClassDeclaration":
				gatherNodeParts(node.id, parts);
				break;
			case "PrivateName":
				gatherNodeParts(node.id, parts);
				break;
			case "ParenthesizedExpression":
				gatherNodeParts(node.expression, parts);
				break;
			case "UnaryExpression":
			case "UpdateExpression":
				gatherNodeParts(node.argument, parts);
				break;
			case "MetaProperty":
				gatherNodeParts(node.meta, parts);
				gatherNodeParts(node.property, parts);
				break;
			case "JSXElement":
				gatherNodeParts(node.openingElement, parts);
				break;
			case "JSXOpeningElement":
				gatherNodeParts(node.name, parts);
				break;
			case "JSXFragment":
				gatherNodeParts(node.openingFragment, parts);
				break;
			case "JSXOpeningFragment":
				parts.push("Fragment");
				break;
			case "JSXNamespacedName":
				gatherNodeParts(node.namespace, parts);
				gatherNodeParts(node.name, parts);
				break;
		}
	}
	function resetScope(scope$1) {
		scope$1.references = Object.create(null);
		scope$1.bindings = Object.create(null);
		scope$1.globals = Object.create(null);
		scope$1.uids = Object.create(null);
	}
	var NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
	const collectorVisitor = {
		ForStatement(path$28) {
			const declar = path$28.get("init");
			if (declar.isVar()) {
				const { scope: scope$1 } = path$28;
				const parentScope = scope$1.getFunctionParent() || scope$1.getProgramParent();
				parentScope.registerBinding("var", declar);
			}
		},
		Declaration(path$28) {
			if (path$28.isBlockScoped()) return;
			if (path$28.isImportDeclaration()) return;
			if (path$28.isExportDeclaration()) return;
			const parent = path$28.scope.getFunctionParent() || path$28.scope.getProgramParent();
			parent.registerDeclaration(path$28);
		},
		ImportDeclaration(path$28) {
			const parent = path$28.scope.getBlockParent();
			parent.registerDeclaration(path$28);
		},
		TSImportEqualsDeclaration(path$28) {
			const parent = path$28.scope.getBlockParent();
			parent.registerDeclaration(path$28);
		},
		ReferencedIdentifier(path$28, state) {
			if (t$4.isTSQualifiedName(path$28.parent) && path$28.parent.right === path$28.node) return;
			if (path$28.parentPath.isTSImportEqualsDeclaration()) return;
			state.references.push(path$28);
		},
		ForXStatement(path$28, state) {
			const left = path$28.get("left");
			if (left.isPattern() || left.isIdentifier()) state.constantViolations.push(path$28);
			else if (left.isVar()) {
				const { scope: scope$1 } = path$28;
				const parentScope = scope$1.getFunctionParent() || scope$1.getProgramParent();
				parentScope.registerBinding("var", left);
			}
		},
		ExportDeclaration: { exit(path$28) {
			const { node, scope: scope$1 } = path$28;
			if (isExportAllDeclaration(node)) return;
			const declar = node.declaration;
			if (isClassDeclaration$1(declar) || isFunctionDeclaration(declar)) {
				const id$4 = declar.id;
				if (!id$4) return;
				const binding = scope$1.getBinding(id$4.name);
				binding?.reference(path$28);
			} else if (isVariableDeclaration$1(declar)) for (const decl$1 of declar.declarations) for (const name of Object.keys(getBindingIdentifiers$3(decl$1))) {
				const binding = scope$1.getBinding(name);
				binding?.reference(path$28);
			}
		} },
		LabeledStatement(path$28) {
			path$28.scope.getBlockParent().registerDeclaration(path$28);
		},
		AssignmentExpression(path$28, state) {
			state.assignments.push(path$28);
		},
		UpdateExpression(path$28, state) {
			state.constantViolations.push(path$28);
		},
		UnaryExpression(path$28, state) {
			if (path$28.node.operator === "delete") state.constantViolations.push(path$28);
		},
		BlockScoped(path$28) {
			let scope$1 = path$28.scope;
			if (scope$1.path === path$28) scope$1 = scope$1.parent;
			const parent = scope$1.getBlockParent();
			parent.registerDeclaration(path$28);
			if (path$28.isClassDeclaration() && path$28.node.id) {
				const id$4 = path$28.node.id;
				const name = id$4.name;
				path$28.scope.bindings[name] = path$28.scope.parent.getBinding(name);
			}
		},
		CatchClause(path$28) {
			path$28.scope.registerBinding("let", path$28);
		},
		Function(path$28) {
			const params = path$28.get("params");
			for (const param of params) path$28.scope.registerBinding("param", param);
			if (path$28.isFunctionExpression() && path$28.node.id && !path$28.node.id[NOT_LOCAL_BINDING]) path$28.scope.registerBinding("local", path$28.get("id"), path$28);
		},
		ClassExpression(path$28) {
			if (path$28.node.id && !path$28.node.id[NOT_LOCAL_BINDING]) path$28.scope.registerBinding("local", path$28.get("id"), path$28);
		},
		TSTypeAnnotation(path$28) {
			path$28.skip();
		}
	};
	let scopeVisitor;
	let uid = 0;
	var Scope = class Scope {
		constructor(path$28) {
			this.uid = void 0;
			this.path = void 0;
			this.block = void 0;
			this.inited = void 0;
			this.labels = void 0;
			this.bindings = void 0;
			this.references = void 0;
			this.globals = void 0;
			this.uids = void 0;
			this.data = void 0;
			this.crawling = void 0;
			const { node } = path$28;
			const cached = _cache$3.scope.get(node);
			if ((cached == null ? void 0 : cached.path) === path$28) return cached;
			_cache$3.scope.set(node, this);
			this.uid = uid++;
			this.block = node;
			this.path = path$28;
			this.labels = new Map();
			this.inited = false;
		}
		get parent() {
			var _parent;
			let parent, path$28 = this.path;
			do {
				var _path$1;
				const shouldSkip = path$28.key === "key" || path$28.listKey === "decorators";
				path$28 = path$28.parentPath;
				if (shouldSkip && path$28.isMethod()) path$28 = path$28.parentPath;
				if ((_path$1 = path$28) != null && _path$1.isScope()) parent = path$28;
			} while (path$28 && !parent);
			return (_parent = parent) == null ? void 0 : _parent.scope;
		}
		generateDeclaredUidIdentifier(name) {
			const id$4 = this.generateUidIdentifier(name);
			this.push({ id: id$4 });
			return cloneNode$5(id$4);
		}
		generateUidIdentifier(name) {
			return identifier$4(this.generateUid(name));
		}
		generateUid(name = "temp") {
			name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
			let uid$1;
			let i$6 = 1;
			do {
				uid$1 = `_${name}`;
				if (i$6 > 1) uid$1 += i$6;
				i$6++;
			} while (this.hasLabel(uid$1) || this.hasBinding(uid$1) || this.hasGlobal(uid$1) || this.hasReference(uid$1));
			const program$3 = this.getProgramParent();
			program$3.references[uid$1] = true;
			program$3.uids[uid$1] = true;
			return uid$1;
		}
		generateUidBasedOnNode(node, defaultName) {
			const parts = [];
			gatherNodeParts(node, parts);
			let id$4 = parts.join("$");
			id$4 = id$4.replace(/^_/, "") || defaultName || "ref";
			return this.generateUid(id$4.slice(0, 20));
		}
		generateUidIdentifierBasedOnNode(node, defaultName) {
			return identifier$4(this.generateUidBasedOnNode(node, defaultName));
		}
		isStatic(node) {
			if (isThisExpression(node) || isSuper$1(node) || isTopicReference(node)) return true;
			if (isIdentifier$9(node)) {
				const binding = this.getBinding(node.name);
				if (binding) return binding.constant;
				else return this.hasBinding(node.name);
			}
			return false;
		}
		maybeGenerateMemoised(node, dontPush) {
			if (this.isStatic(node)) return null;
			else {
				const id$4 = this.generateUidIdentifierBasedOnNode(node);
				if (!dontPush) {
					this.push({ id: id$4 });
					return cloneNode$5(id$4);
				}
				return id$4;
			}
		}
		checkBlockScopedCollisions(local, kind, name, id$4) {
			if (kind === "param") return;
			if (local.kind === "local") return;
			const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
			if (duplicate) throw this.path.hub.buildError(id$4, `Duplicate declaration "${name}"`, TypeError);
		}
		rename(oldName, newName) {
			const binding = this.getBinding(oldName);
			if (binding) {
				newName || (newName = this.generateUidIdentifier(oldName).name);
				const renamer = new _renamer.default(binding, oldName, newName);
				renamer.rename(arguments[2]);
			}
		}
		dump() {
			const sep$1 = "-".repeat(60);
			console.log(sep$1);
			let scope$1 = this;
			do {
				console.log("#", scope$1.block.type);
				for (const name of Object.keys(scope$1.bindings)) {
					const binding = scope$1.bindings[name];
					console.log(" -", name, {
						constant: binding.constant,
						references: binding.references,
						violations: binding.constantViolations.length,
						kind: binding.kind
					});
				}
			} while (scope$1 = scope$1.parent);
			console.log(sep$1);
		}
		hasLabel(name) {
			return !!this.getLabel(name);
		}
		getLabel(name) {
			return this.labels.get(name);
		}
		registerLabel(path$28) {
			this.labels.set(path$28.node.label.name, path$28);
		}
		registerDeclaration(path$28) {
			if (path$28.isLabeledStatement()) this.registerLabel(path$28);
			else if (path$28.isFunctionDeclaration()) this.registerBinding("hoisted", path$28.get("id"), path$28);
			else if (path$28.isVariableDeclaration()) {
				const declarations = path$28.get("declarations");
				const { kind } = path$28.node;
				for (const declar of declarations) this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
			} else if (path$28.isClassDeclaration()) {
				if (path$28.node.declare) return;
				this.registerBinding("let", path$28);
			} else if (path$28.isImportDeclaration()) {
				const isTypeDeclaration = path$28.node.importKind === "type" || path$28.node.importKind === "typeof";
				const specifiers = path$28.get("specifiers");
				for (const specifier of specifiers) {
					const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
					this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
				}
			} else if (path$28.isExportDeclaration()) {
				const declar = path$28.get("declaration");
				if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) this.registerDeclaration(declar);
			} else this.registerBinding("unknown", path$28);
		}
		buildUndefinedNode() {
			return buildUndefinedNode$1();
		}
		registerConstantViolation(path$28) {
			const ids = path$28.getAssignmentIdentifiers();
			for (const name of Object.keys(ids)) {
				var _this$getBinding;
				(_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path$28);
			}
		}
		registerBinding(kind, path$28, bindingPath = path$28) {
			if (!kind) throw new ReferenceError("no `kind`");
			if (path$28.isVariableDeclaration()) {
				const declarators = path$28.get("declarations");
				for (const declar of declarators) this.registerBinding(kind, declar);
				return;
			}
			const parent = this.getProgramParent();
			const ids = path$28.getOuterBindingIdentifiers(true);
			for (const name of Object.keys(ids)) {
				parent.references[name] = true;
				for (const id$4 of ids[name]) {
					const local = this.getOwnBinding(name);
					if (local) {
						if (local.identifier === id$4) continue;
						this.checkBlockScopedCollisions(local, kind, name, id$4);
					}
					if (local) local.reassign(bindingPath);
					else this.bindings[name] = new _binding.default({
						identifier: id$4,
						scope: this,
						path: bindingPath,
						kind
					});
				}
			}
		}
		addGlobal(node) {
			this.globals[node.name] = node;
		}
		hasUid(name) {
			let scope$1 = this;
			do
				if (scope$1.uids[name]) return true;
			while (scope$1 = scope$1.parent);
			return false;
		}
		hasGlobal(name) {
			let scope$1 = this;
			do
				if (scope$1.globals[name]) return true;
			while (scope$1 = scope$1.parent);
			return false;
		}
		hasReference(name) {
			return !!this.getProgramParent().references[name];
		}
		isPure(node, constantsOnly) {
			if (isIdentifier$9(node)) {
				const binding = this.getBinding(node.name);
				if (!binding) return false;
				if (constantsOnly) return binding.constant;
				return true;
			} else if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) return true;
			else if (isClass(node)) {
				var _node$decorators;
				if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
				if (((_node$decorators = node.decorators) == null ? void 0 : _node$decorators.length) > 0) return false;
				return this.isPure(node.body, constantsOnly);
			} else if (isClassBody$1(node)) {
				for (const method of node.body) if (!this.isPure(method, constantsOnly)) return false;
				return true;
			} else if (isBinary$1(node)) return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
			else if (isArrayExpression$1(node) || isTupleExpression(node)) {
				for (const elem of node.elements) if (elem !== null && !this.isPure(elem, constantsOnly)) return false;
				return true;
			} else if (isObjectExpression$1(node) || isRecordExpression(node)) {
				for (const prop of node.properties) if (!this.isPure(prop, constantsOnly)) return false;
				return true;
			} else if (isMethod(node)) {
				var _node$decorators2;
				if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
				if (((_node$decorators2 = node.decorators) == null ? void 0 : _node$decorators2.length) > 0) return false;
				return true;
			} else if (isProperty(node)) {
				var _node$decorators3;
				if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
				if (((_node$decorators3 = node.decorators) == null ? void 0 : _node$decorators3.length) > 0) return false;
				if (isObjectProperty(node) || node.static) {
					if (node.value !== null && !this.isPure(node.value, constantsOnly)) return false;
				}
				return true;
			} else if (isUnaryExpression(node)) return this.isPure(node.argument, constantsOnly);
			else if (isTemplateLiteral(node)) {
				for (const expression$2 of node.expressions) if (!this.isPure(expression$2, constantsOnly)) return false;
				return true;
			} else if (isTaggedTemplateExpression(node)) return matchesPattern$1(node.tag, "String.raw") && !this.hasBinding("String", { noGlobals: true }) && this.isPure(node.quasi, constantsOnly);
			else if (isMemberExpression$4(node)) return !node.computed && isIdentifier$9(node.object) && node.object.name === "Symbol" && isIdentifier$9(node.property) && node.property.name !== "for" && !this.hasBinding("Symbol", { noGlobals: true });
			else if (isCallExpression$6(node)) return matchesPattern$1(node.callee, "Symbol.for") && !this.hasBinding("Symbol", { noGlobals: true }) && node.arguments.length === 1 && t$4.isStringLiteral(node.arguments[0]);
			else return isPureish(node);
		}
		setData(key, val) {
			return this.data[key] = val;
		}
		getData(key) {
			let scope$1 = this;
			do {
				const data$2 = scope$1.data[key];
				if (data$2 != null) return data$2;
			} while (scope$1 = scope$1.parent);
		}
		removeData(key) {
			let scope$1 = this;
			do {
				const data$2 = scope$1.data[key];
				if (data$2 != null) scope$1.data[key] = null;
			} while (scope$1 = scope$1.parent);
		}
		init() {
			if (!this.inited) {
				this.inited = true;
				this.crawl();
			}
		}
		crawl() {
			const path$28 = this.path;
			resetScope(this);
			this.data = Object.create(null);
			let scope$1 = this;
			do {
				if (scope$1.crawling) return;
				if (scope$1.path.isProgram()) break;
			} while (scope$1 = scope$1.parent);
			const programParent = scope$1;
			const state = {
				references: [],
				constantViolations: [],
				assignments: []
			};
			this.crawling = true;
			scopeVisitor || (scopeVisitor = _index$14.default.visitors.merge([{ Scope(path$29) {
				resetScope(path$29.scope);
			} }, collectorVisitor]));
			if (path$28.type !== "Program") {
				for (const visit$1 of scopeVisitor.enter) visit$1.call(state, path$28, state);
				const typeVisitors = scopeVisitor[path$28.type];
				if (typeVisitors) for (const visit$1 of typeVisitors.enter) visit$1.call(state, path$28, state);
			}
			path$28.traverse(scopeVisitor, state);
			this.crawling = false;
			for (const path$29 of state.assignments) {
				const ids = path$29.getAssignmentIdentifiers();
				for (const name of Object.keys(ids)) {
					if (path$29.scope.getBinding(name)) continue;
					programParent.addGlobal(ids[name]);
				}
				path$29.scope.registerConstantViolation(path$29);
			}
			for (const ref of state.references) {
				const binding = ref.scope.getBinding(ref.node.name);
				if (binding) binding.reference(ref);
				else programParent.addGlobal(ref.node);
			}
			for (const path$29 of state.constantViolations) path$29.scope.registerConstantViolation(path$29);
		}
		push(opts) {
			let path$28 = this.path;
			if (path$28.isPattern()) path$28 = this.getPatternParent().path;
			else if (!path$28.isBlockStatement() && !path$28.isProgram()) path$28 = this.getBlockParent().path;
			if (path$28.isSwitchStatement()) path$28 = (this.getFunctionParent() || this.getProgramParent()).path;
			const { init: init$1, unique, kind = "var", id: id$4 } = opts;
			if (!init$1 && !unique && (kind === "var" || kind === "let") && path$28.isFunction() && !path$28.node.name && isCallExpression$6(path$28.parent, { callee: path$28.node }) && path$28.parent.arguments.length <= path$28.node.params.length && isIdentifier$9(id$4)) {
				path$28.pushContainer("params", id$4);
				path$28.scope.registerBinding("param", path$28.get("params")[path$28.node.params.length - 1]);
				return;
			}
			if (path$28.isLoop() || path$28.isCatchClause() || path$28.isFunction()) {
				path$28.ensureBlock();
				path$28 = path$28.get("body");
			}
			const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
			const dataKey = `declaration:${kind}:${blockHoist}`;
			let declarPath = !unique && path$28.getData(dataKey);
			if (!declarPath) {
				const declar = variableDeclaration$2(kind, []);
				declar._blockHoist = blockHoist;
				[declarPath] = path$28.unshiftContainer("body", [declar]);
				if (!unique) path$28.setData(dataKey, declarPath);
			}
			const declarator = variableDeclarator$2(id$4, init$1);
			const len = declarPath.node.declarations.push(declarator);
			path$28.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
		}
		getProgramParent() {
			let scope$1 = this;
			do
				if (scope$1.path.isProgram()) return scope$1;
			while (scope$1 = scope$1.parent);
			throw new Error("Couldn't find a Program");
		}
		getFunctionParent() {
			let scope$1 = this;
			do
				if (scope$1.path.isFunctionParent()) return scope$1;
			while (scope$1 = scope$1.parent);
			return null;
		}
		getBlockParent() {
			let scope$1 = this;
			do
				if (scope$1.path.isBlockParent()) return scope$1;
			while (scope$1 = scope$1.parent);
			throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
		}
		getPatternParent() {
			let scope$1 = this;
			do
				if (!scope$1.path.isPattern()) return scope$1.getBlockParent();
			while (scope$1 = scope$1.parent.parent);
			throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
		}
		getAllBindings() {
			const ids = Object.create(null);
			let scope$1 = this;
			do {
				for (const key of Object.keys(scope$1.bindings)) if (key in ids === false) ids[key] = scope$1.bindings[key];
				scope$1 = scope$1.parent;
			} while (scope$1);
			return ids;
		}
		bindingIdentifierEquals(name, node) {
			return this.getBindingIdentifier(name) === node;
		}
		getBinding(name) {
			let scope$1 = this;
			let previousPath;
			do {
				const binding = scope$1.getOwnBinding(name);
				if (binding) {
					var _previousPath;
					if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param" && binding.kind !== "local") {} else return binding;
				} else if (!binding && name === "arguments" && scope$1.path.isFunction() && !scope$1.path.isArrowFunctionExpression()) break;
				previousPath = scope$1.path;
			} while (scope$1 = scope$1.parent);
		}
		getOwnBinding(name) {
			return this.bindings[name];
		}
		getBindingIdentifier(name) {
			var _this$getBinding2;
			return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;
		}
		getOwnBindingIdentifier(name) {
			const binding = this.bindings[name];
			return binding == null ? void 0 : binding.identifier;
		}
		hasOwnBinding(name) {
			return !!this.getOwnBinding(name);
		}
		hasBinding(name, opts) {
			if (!name) return false;
			let noGlobals;
			let noUids;
			let upToScope;
			if (typeof opts === "object") {
				noGlobals = opts.noGlobals;
				noUids = opts.noUids;
				upToScope = opts.upToScope;
			} else if (typeof opts === "boolean") noGlobals = opts;
			let scope$1 = this;
			do {
				if (upToScope === scope$1) break;
				if (scope$1.hasOwnBinding(name)) return true;
			} while (scope$1 = scope$1.parent);
			if (!noUids && this.hasUid(name)) return true;
			if (!noGlobals && Scope.globals.includes(name)) return true;
			if (!noGlobals && Scope.contextVariables.includes(name)) return true;
			return false;
		}
		parentHasBinding(name, opts) {
			var _this$parent;
			return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
		}
		moveBindingTo(name, scope$1) {
			const info = this.getBinding(name);
			if (info) {
				info.scope.removeOwnBinding(name);
				info.scope = scope$1;
				scope$1.bindings[name] = info;
			}
		}
		removeOwnBinding(name) {
			delete this.bindings[name];
		}
		removeBinding(name) {
			var _this$getBinding3;
			(_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
			let scope$1 = this;
			do
				if (scope$1.uids[name]) scope$1.uids[name] = false;
			while (scope$1 = scope$1.parent);
		}
		hoistVariables(emit = (id$4) => this.push({ id: id$4 })) {
			this.crawl();
			const seen$1 = new Set();
			for (const name of Object.keys(this.bindings)) {
				const binding = this.bindings[name];
				if (!binding) continue;
				const { path: path$28 } = binding;
				if (!path$28.isVariableDeclarator()) continue;
				const { parent, parentPath } = path$28;
				if (parent.kind !== "var" || seen$1.has(parent)) continue;
				seen$1.add(path$28.parent);
				let firstId;
				const init$1 = [];
				for (const decl$1 of parent.declarations) {
					firstId != null || (firstId = decl$1.id);
					if (decl$1.init) init$1.push(assignmentExpression$3("=", decl$1.id, decl$1.init));
					const ids = Object.keys(getBindingIdentifiers$3(decl$1, false, true, true));
					for (const name$1 of ids) emit(identifier$4(name$1), decl$1.init != null);
				}
				if (parentPath.parentPath.isFor({ left: parent })) parentPath.replaceWith(firstId);
				else if (init$1.length === 0) parentPath.remove();
				else {
					const expr = init$1.length === 1 ? init$1[0] : sequenceExpression$2(init$1);
					if (parentPath.parentPath.isForStatement({ init: parent })) parentPath.replaceWith(expr);
					else parentPath.replaceWith(expressionStatement$4(expr));
				}
			}
		}
	};
	exports.default = Scope;
	Scope.globals = Object.keys(_globals.builtin);
	Scope.contextVariables = [
		"arguments",
		"undefined",
		"Infinity",
		"NaN"
	];
	{
		Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
			if (map[oldName]) {
				map[newName] = value;
				map[oldName] = null;
			}
		};
		Scope.prototype.traverse = function(node, opts, state) {
			(0, _index$14.default)(node, opts, this, state, this.path);
		};
		Scope.prototype._generateUid = function _generateUid(name, i$6) {
			let id$4 = name;
			if (i$6 > 1) id$4 += i$6;
			return `_${id$4}`;
		};
		Scope.prototype.toArray = function toArray(node, i$6, arrayLikeIsIterable) {
			if (isIdentifier$9(node)) {
				const binding = this.getBinding(node.name);
				if (binding != null && binding.constant && binding.path.isGenericType("Array")) return node;
			}
			if (isArrayExpression$1(node)) return node;
			if (isIdentifier$9(node, { name: "arguments" })) return callExpression$3(memberExpression$1(memberExpression$1(memberExpression$1(identifier$4("Array"), identifier$4("prototype")), identifier$4("slice")), identifier$4("call")), [node]);
			let helperName;
			const args = [node];
			if (i$6 === true) helperName = "toConsumableArray";
			else if (typeof i$6 === "number") {
				args.push(numericLiteral$2(i$6));
				helperName = "slicedToArray";
			} else helperName = "toArray";
			if (arrayLikeIsIterable) {
				args.unshift(this.path.hub.addHelper(helperName));
				helperName = "maybeArrayLike";
			}
			return callExpression$3(this.path.hub.addHelper(helperName), args);
		};
		Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind(...kinds) {
			const ids = Object.create(null);
			for (const kind of kinds) {
				let scope$1 = this;
				do {
					for (const name of Object.keys(scope$1.bindings)) {
						const binding = scope$1.bindings[name];
						if (binding.kind === kind) ids[name] = binding;
					}
					scope$1 = scope$1.parent;
				} while (scope$1);
			}
			return ids;
		};
		Object.defineProperties(Scope.prototype, {
			parentBlock: {
				configurable: true,
				enumerable: true,
				get() {
					return this.path.parent;
				}
			},
			hub: {
				configurable: true,
				enumerable: true,
				get() {
					return this.path.hub;
				}
			}
		});
	}
} });

//#endregion
//#region node_modules/@jridgewell/set-array/dist/set-array.umd.js
var require_set_array_umd = __commonJS({ "node_modules/@jridgewell/set-array/dist/set-array.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global$1 = typeof globalThis !== "undefined" ? globalThis : global$1 || self, factory(global$1.setArray = {}));
	})(exports, function(exports$1) {
		"use strict";
		/**
		* SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
		* index of the `key` in the backing array.
		*
		* This is designed to allow synchronizing a second array with the contents of the backing array,
		* like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
		* and there are never duplicates.
		*/
		class SetArray {
			constructor() {
				this._indexes = { __proto__: null };
				this.array = [];
			}
		}
		/**
		* Typescript doesn't allow friend access to private fields, so this just casts the set into a type
		* with public access modifiers.
		*/
		function cast(set) {
			return set;
		}
		/**
		* Gets the index associated with `key` in the backing array, if it is already present.
		*/
		function get$2(setarr, key) {
			return cast(setarr)._indexes[key];
		}
		/**
		* Puts `key` into the backing array, if it is not already present. Returns
		* the index of the `key` in the backing array.
		*/
		function put(setarr, key) {
			const index$1 = get$2(setarr, key);
			if (index$1 !== void 0) return index$1;
			const { array, _indexes: indexes } = cast(setarr);
			const length = array.push(key);
			return indexes[key] = length - 1;
		}
		/**
		* Pops the last added item out of the SetArray.
		*/
		function pop(setarr) {
			const { array, _indexes: indexes } = cast(setarr);
			if (array.length === 0) return;
			const last$2 = array.pop();
			indexes[last$2] = void 0;
		}
		/**
		* Removes the key, if it exists in the set.
		*/
		function remove$4(setarr, key) {
			const index$1 = get$2(setarr, key);
			if (index$1 === void 0) return;
			const { array, _indexes: indexes } = cast(setarr);
			for (let i$6 = index$1 + 1; i$6 < array.length; i$6++) {
				const k$1 = array[i$6];
				array[i$6 - 1] = k$1;
				indexes[k$1]--;
			}
			indexes[key] = void 0;
			array.pop();
		}
		exports$1.SetArray = SetArray;
		exports$1.get = get$2;
		exports$1.pop = pop;
		exports$1.put = put;
		exports$1.remove = remove$4;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js
var require_sourcemap_codec_umd = __commonJS({ "node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global$1 = typeof globalThis !== "undefined" ? globalThis : global$1 || self, factory(global$1.sourcemapCodec = {}));
	})(exports, function(exports$1) {
		"use strict";
		const comma$5 = ",".charCodeAt(0);
		const semicolon$3 = ";".charCodeAt(0);
		const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		const intToChar = new Uint8Array(64);
		const charToInt = new Uint8Array(128);
		for (let i$6 = 0; i$6 < chars.length; i$6++) {
			const c$2 = chars.charCodeAt(i$6);
			intToChar[i$6] = c$2;
			charToInt[c$2] = i$6;
		}
		function decodeInteger(reader, relative$3) {
			let value = 0;
			let shift = 0;
			let integer = 0;
			do {
				const c$2 = reader.next();
				integer = charToInt[c$2];
				value |= (integer & 31) << shift;
				shift += 5;
			} while (integer & 32);
			const shouldNegate = value & 1;
			value >>>= 1;
			if (shouldNegate) value = -2147483648 | -value;
			return relative$3 + value;
		}
		function encodeInteger(builder, num, relative$3) {
			let delta = num - relative$3;
			delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
			do {
				let clamped = delta & 31;
				delta >>>= 5;
				if (delta > 0) clamped |= 32;
				builder.write(intToChar[clamped]);
			} while (delta > 0);
			return num;
		}
		function hasMoreVlq(reader, max$1) {
			if (reader.pos >= max$1) return false;
			return reader.peek() !== comma$5;
		}
		const bufLength = 1024 * 16;
		const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? { decode(buf) {
			const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
			return out.toString();
		} } : { decode(buf) {
			let out = "";
			for (let i$6 = 0; i$6 < buf.length; i$6++) out += String.fromCharCode(buf[i$6]);
			return out;
		} };
		class StringWriter {
			constructor() {
				this.pos = 0;
				this.out = "";
				this.buffer = new Uint8Array(bufLength);
			}
			write(v$1) {
				const { buffer } = this;
				buffer[this.pos++] = v$1;
				if (this.pos === bufLength) {
					this.out += td.decode(buffer);
					this.pos = 0;
				}
			}
			flush() {
				const { buffer, out, pos } = this;
				return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
			}
		}
		class StringReader {
			constructor(buffer) {
				this.pos = 0;
				this.buffer = buffer;
			}
			next() {
				return this.buffer.charCodeAt(this.pos++);
			}
			peek() {
				return this.buffer.charCodeAt(this.pos);
			}
			indexOf(char) {
				const { buffer, pos } = this;
				const idx = buffer.indexOf(char, pos);
				return idx === -1 ? buffer.length : idx;
			}
		}
		const EMPTY = [];
		function decodeOriginalScopes(input) {
			const { length } = input;
			const reader = new StringReader(input);
			const scopes = [];
			const stack = [];
			let line = 0;
			for (; reader.pos < length; reader.pos++) {
				line = decodeInteger(reader, line);
				const column = decodeInteger(reader, 0);
				if (!hasMoreVlq(reader, length)) {
					const last$2 = stack.pop();
					last$2[2] = line;
					last$2[3] = column;
					continue;
				}
				const kind = decodeInteger(reader, 0);
				const fields = decodeInteger(reader, 0);
				const hasName = fields & 1;
				const scope$1 = hasName ? [
					line,
					column,
					0,
					0,
					kind,
					decodeInteger(reader, 0)
				] : [
					line,
					column,
					0,
					0,
					kind
				];
				let vars = EMPTY;
				if (hasMoreVlq(reader, length)) {
					vars = [];
					do {
						const varsIndex = decodeInteger(reader, 0);
						vars.push(varsIndex);
					} while (hasMoreVlq(reader, length));
				}
				scope$1.vars = vars;
				scopes.push(scope$1);
				stack.push(scope$1);
			}
			return scopes;
		}
		function encodeOriginalScopes(scopes) {
			const writer = new StringWriter();
			for (let i$6 = 0; i$6 < scopes.length;) i$6 = _encodeOriginalScopes(scopes, i$6, writer, [0]);
			return writer.flush();
		}
		function _encodeOriginalScopes(scopes, index$1, writer, state) {
			const scope$1 = scopes[index$1];
			const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope$1;
			if (index$1 > 0) writer.write(comma$5);
			state[0] = encodeInteger(writer, startLine, state[0]);
			encodeInteger(writer, startColumn, 0);
			encodeInteger(writer, kind, 0);
			const fields = scope$1.length === 6 ? 1 : 0;
			encodeInteger(writer, fields, 0);
			if (scope$1.length === 6) encodeInteger(writer, scope$1[5], 0);
			for (const v$1 of vars) encodeInteger(writer, v$1, 0);
			for (index$1++; index$1 < scopes.length;) {
				const next = scopes[index$1];
				const { 0: l$1, 1: c$2 } = next;
				if (l$1 > endLine || l$1 === endLine && c$2 >= endColumn) break;
				index$1 = _encodeOriginalScopes(scopes, index$1, writer, state);
			}
			writer.write(comma$5);
			state[0] = encodeInteger(writer, endLine, state[0]);
			encodeInteger(writer, endColumn, 0);
			return index$1;
		}
		function decodeGeneratedRanges(input) {
			const { length } = input;
			const reader = new StringReader(input);
			const ranges = [];
			const stack = [];
			let genLine = 0;
			let definitionSourcesIndex = 0;
			let definitionScopeIndex = 0;
			let callsiteSourcesIndex = 0;
			let callsiteLine = 0;
			let callsiteColumn = 0;
			let bindingLine = 0;
			let bindingColumn = 0;
			do {
				const semi = reader.indexOf(";");
				let genColumn = 0;
				for (; reader.pos < semi; reader.pos++) {
					genColumn = decodeInteger(reader, genColumn);
					if (!hasMoreVlq(reader, semi)) {
						const last$2 = stack.pop();
						last$2[2] = genLine;
						last$2[3] = genColumn;
						continue;
					}
					const fields = decodeInteger(reader, 0);
					const hasDefinition = fields & 1;
					const hasCallsite = fields & 2;
					const hasScope = fields & 4;
					let callsite = null;
					let bindings = EMPTY;
					let range$2;
					if (hasDefinition) {
						const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
						definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0);
						definitionSourcesIndex = defSourcesIndex;
						range$2 = [
							genLine,
							genColumn,
							0,
							0,
							defSourcesIndex,
							definitionScopeIndex
						];
					} else range$2 = [
						genLine,
						genColumn,
						0,
						0
					];
					range$2.isScope = !!hasScope;
					if (hasCallsite) {
						const prevCsi = callsiteSourcesIndex;
						const prevLine = callsiteLine;
						callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
						const sameSource = prevCsi === callsiteSourcesIndex;
						callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0);
						callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0);
						callsite = [
							callsiteSourcesIndex,
							callsiteLine,
							callsiteColumn
						];
					}
					range$2.callsite = callsite;
					if (hasMoreVlq(reader, semi)) {
						bindings = [];
						do {
							bindingLine = genLine;
							bindingColumn = genColumn;
							const expressionsCount = decodeInteger(reader, 0);
							let expressionRanges;
							if (expressionsCount < -1) {
								expressionRanges = [[decodeInteger(reader, 0)]];
								for (let i$6 = -1; i$6 > expressionsCount; i$6--) {
									const prevBl = bindingLine;
									bindingLine = decodeInteger(reader, bindingLine);
									bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
									const expression$2 = decodeInteger(reader, 0);
									expressionRanges.push([
										expression$2,
										bindingLine,
										bindingColumn
									]);
								}
							} else expressionRanges = [[expressionsCount]];
							bindings.push(expressionRanges);
						} while (hasMoreVlq(reader, semi));
					}
					range$2.bindings = bindings;
					ranges.push(range$2);
					stack.push(range$2);
				}
				genLine++;
				reader.pos = semi + 1;
			} while (reader.pos < length);
			return ranges;
		}
		function encodeGeneratedRanges(ranges) {
			if (ranges.length === 0) return "";
			const writer = new StringWriter();
			for (let i$6 = 0; i$6 < ranges.length;) i$6 = _encodeGeneratedRanges(ranges, i$6, writer, [
				0,
				0,
				0,
				0,
				0,
				0,
				0
			]);
			return writer.flush();
		}
		function _encodeGeneratedRanges(ranges, index$1, writer, state) {
			const range$2 = ranges[index$1];
			const { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope: isScope$2, callsite, bindings } = range$2;
			if (state[0] < startLine) {
				catchupLine(writer, state[0], startLine);
				state[0] = startLine;
				state[1] = 0;
			} else if (index$1 > 0) writer.write(comma$5);
			state[1] = encodeInteger(writer, range$2[1], state[1]);
			const fields = (range$2.length === 6 ? 1 : 0) | (callsite ? 2 : 0) | (isScope$2 ? 4 : 0);
			encodeInteger(writer, fields, 0);
			if (range$2.length === 6) {
				const { 4: sourcesIndex, 5: scopesIndex } = range$2;
				if (sourcesIndex !== state[2]) state[3] = 0;
				state[2] = encodeInteger(writer, sourcesIndex, state[2]);
				state[3] = encodeInteger(writer, scopesIndex, state[3]);
			}
			if (callsite) {
				const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range$2.callsite;
				if (sourcesIndex !== state[4]) {
					state[5] = 0;
					state[6] = 0;
				} else if (callLine !== state[5]) state[6] = 0;
				state[4] = encodeInteger(writer, sourcesIndex, state[4]);
				state[5] = encodeInteger(writer, callLine, state[5]);
				state[6] = encodeInteger(writer, callColumn, state[6]);
			}
			if (bindings) for (const binding of bindings) {
				if (binding.length > 1) encodeInteger(writer, -binding.length, 0);
				const expression$2 = binding[0][0];
				encodeInteger(writer, expression$2, 0);
				let bindingStartLine = startLine;
				let bindingStartColumn = startColumn;
				for (let i$6 = 1; i$6 < binding.length; i$6++) {
					const expRange = binding[i$6];
					bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine);
					bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn);
					encodeInteger(writer, expRange[0], 0);
				}
			}
			for (index$1++; index$1 < ranges.length;) {
				const next = ranges[index$1];
				const { 0: l$1, 1: c$2 } = next;
				if (l$1 > endLine || l$1 === endLine && c$2 >= endColumn) break;
				index$1 = _encodeGeneratedRanges(ranges, index$1, writer, state);
			}
			if (state[0] < endLine) {
				catchupLine(writer, state[0], endLine);
				state[0] = endLine;
				state[1] = 0;
			} else writer.write(comma$5);
			state[1] = encodeInteger(writer, endColumn, state[1]);
			return index$1;
		}
		function catchupLine(writer, lastLine, line) {
			do
				writer.write(semicolon$3);
			while (++lastLine < line);
		}
		function decode$3(mappings$1) {
			const { length } = mappings$1;
			const reader = new StringReader(mappings$1);
			const decoded = [];
			let genColumn = 0;
			let sourcesIndex = 0;
			let sourceLine = 0;
			let sourceColumn = 0;
			let namesIndex = 0;
			do {
				const semi = reader.indexOf(";");
				const line = [];
				let sorted = true;
				let lastCol = 0;
				genColumn = 0;
				while (reader.pos < semi) {
					let seg;
					genColumn = decodeInteger(reader, genColumn);
					if (genColumn < lastCol) sorted = false;
					lastCol = genColumn;
					if (hasMoreVlq(reader, semi)) {
						sourcesIndex = decodeInteger(reader, sourcesIndex);
						sourceLine = decodeInteger(reader, sourceLine);
						sourceColumn = decodeInteger(reader, sourceColumn);
						if (hasMoreVlq(reader, semi)) {
							namesIndex = decodeInteger(reader, namesIndex);
							seg = [
								genColumn,
								sourcesIndex,
								sourceLine,
								sourceColumn,
								namesIndex
							];
						} else seg = [
							genColumn,
							sourcesIndex,
							sourceLine,
							sourceColumn
						];
					} else seg = [genColumn];
					line.push(seg);
					reader.pos++;
				}
				if (!sorted) sort(line);
				decoded.push(line);
				reader.pos = semi + 1;
			} while (reader.pos <= length);
			return decoded;
		}
		function sort(line) {
			line.sort(sortComparator);
		}
		function sortComparator(a$1, b$1) {
			return a$1[0] - b$1[0];
		}
		function encode$2(decoded) {
			const writer = new StringWriter();
			let sourcesIndex = 0;
			let sourceLine = 0;
			let sourceColumn = 0;
			let namesIndex = 0;
			for (let i$6 = 0; i$6 < decoded.length; i$6++) {
				const line = decoded[i$6];
				if (i$6 > 0) writer.write(semicolon$3);
				if (line.length === 0) continue;
				let genColumn = 0;
				for (let j$1 = 0; j$1 < line.length; j$1++) {
					const segment = line[j$1];
					if (j$1 > 0) writer.write(comma$5);
					genColumn = encodeInteger(writer, segment[0], genColumn);
					if (segment.length === 1) continue;
					sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
					sourceLine = encodeInteger(writer, segment[2], sourceLine);
					sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
					if (segment.length === 4) continue;
					namesIndex = encodeInteger(writer, segment[4], namesIndex);
				}
			}
			return writer.flush();
		}
		exports$1.decode = decode$3;
		exports$1.decodeGeneratedRanges = decodeGeneratedRanges;
		exports$1.decodeOriginalScopes = decodeOriginalScopes;
		exports$1.encode = encode$2;
		exports$1.encodeGeneratedRanges = encodeGeneratedRanges;
		exports$1.encodeOriginalScopes = encodeOriginalScopes;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js
var require_resolve_uri_umd = __commonJS({ "node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global$1 = typeof globalThis !== "undefined" ? globalThis : global$1 || self, global$1.resolveURI = factory());
	})(exports, function() {
		"use strict";
		const schemeRegex = /^[\w+.-]+:\/\//;
		/**
		* Matches the parts of a URL:
		* 1. Scheme, including ":", guaranteed.
		* 2. User/password, including "@", optional.
		* 3. Host, guaranteed.
		* 4. Port, including ":", optional.
		* 5. Path, including "/", optional.
		* 6. Query, including "?", optional.
		* 7. Hash, including "#", optional.
		*/
		const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
		/**
		* File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start
		* with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).
		*
		* 1. Host, optional.
		* 2. Path, which may include "/", guaranteed.
		* 3. Query, including "?", optional.
		* 4. Hash, including "#", optional.
		*/
		const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
		function isAbsoluteUrl(input) {
			return schemeRegex.test(input);
		}
		function isSchemeRelativeUrl(input) {
			return input.startsWith("//");
		}
		function isAbsolutePath(input) {
			return input.startsWith("/");
		}
		function isFileUrl(input) {
			return input.startsWith("file:");
		}
		function isRelative(input) {
			return /^[.?#]/.test(input);
		}
		function parseAbsoluteUrl(input) {
			const match = urlRegex.exec(input);
			return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
		}
		function parseFileUrl(input) {
			const match = fileRegex.exec(input);
			const path$28 = match[2];
			return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path$28) ? path$28 : "/" + path$28, match[3] || "", match[4] || "");
		}
		function makeUrl(scheme, user, host, port, path$28, query, hash$2) {
			return {
				scheme,
				user,
				host,
				port,
				path: path$28,
				query,
				hash: hash$2,
				type: 7
			};
		}
		function parseUrl$1(input) {
			if (isSchemeRelativeUrl(input)) {
				const url$2 = parseAbsoluteUrl("http:" + input);
				url$2.scheme = "";
				url$2.type = 6;
				return url$2;
			}
			if (isAbsolutePath(input)) {
				const url$2 = parseAbsoluteUrl("http://foo.com" + input);
				url$2.scheme = "";
				url$2.host = "";
				url$2.type = 5;
				return url$2;
			}
			if (isFileUrl(input)) return parseFileUrl(input);
			if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
			const url$1 = parseAbsoluteUrl("http://foo.com/" + input);
			url$1.scheme = "";
			url$1.host = "";
			url$1.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
			return url$1;
		}
		function stripPathFilename(path$28) {
			if (path$28.endsWith("/..")) return path$28;
			const index$1 = path$28.lastIndexOf("/");
			return path$28.slice(0, index$1 + 1);
		}
		function mergePaths(url$1, base$1) {
			normalizePath$2(base$1, base$1.type);
			if (url$1.path === "/") url$1.path = base$1.path;
			else url$1.path = stripPathFilename(base$1.path) + url$1.path;
		}
		/**
		* The path can have empty directories "//", unneeded parents "foo/..", or current directory
		* "foo/.". We need to normalize to a standard representation.
		*/
		function normalizePath$2(url$1, type) {
			const rel = type <= 4;
			const pieces = url$1.path.split("/");
			let pointer = 1;
			let positive = 0;
			let addTrailingSlash = false;
			for (let i$6 = 1; i$6 < pieces.length; i$6++) {
				const piece = pieces[i$6];
				if (!piece) {
					addTrailingSlash = true;
					continue;
				}
				addTrailingSlash = false;
				if (piece === ".") continue;
				if (piece === "..") {
					if (positive) {
						addTrailingSlash = true;
						positive--;
						pointer--;
					} else if (rel) pieces[pointer++] = piece;
					continue;
				}
				pieces[pointer++] = piece;
				positive++;
			}
			let path$28 = "";
			for (let i$6 = 1; i$6 < pointer; i$6++) path$28 += "/" + pieces[i$6];
			if (!path$28 || addTrailingSlash && !path$28.endsWith("/..")) path$28 += "/";
			url$1.path = path$28;
		}
		/**
		* Attempts to resolve `input` URL/path relative to `base`.
		*/
		function resolve$5(input, base$1) {
			if (!input && !base$1) return "";
			const url$1 = parseUrl$1(input);
			let inputType = url$1.type;
			if (base$1 && inputType !== 7) {
				const baseUrl = parseUrl$1(base$1);
				const baseType = baseUrl.type;
				switch (inputType) {
					case 1: url$1.hash = baseUrl.hash;
					case 2: url$1.query = baseUrl.query;
					case 3:
					case 4: mergePaths(url$1, baseUrl);
					case 5:
						url$1.user = baseUrl.user;
						url$1.host = baseUrl.host;
						url$1.port = baseUrl.port;
					case 6: url$1.scheme = baseUrl.scheme;
				}
				if (baseType > inputType) inputType = baseType;
			}
			normalizePath$2(url$1, inputType);
			const queryHash = url$1.query + url$1.hash;
			switch (inputType) {
				case 2:
				case 3: return queryHash;
				case 4: {
					const path$28 = url$1.path.slice(1);
					if (!path$28) return queryHash || ".";
					if (isRelative(base$1 || input) && !isRelative(path$28)) return "./" + path$28 + queryHash;
					return path$28 + queryHash;
				}
				case 5: return url$1.path + queryHash;
				default: return url$1.scheme + "//" + url$1.user + url$1.host + url$1.port + url$1.path + queryHash;
			}
		}
		return resolve$5;
	});
} });

//#endregion
//#region node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js
var require_trace_mapping_umd = __commonJS({ "node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_sourcemap_codec_umd(), require_resolve_uri_umd()) : typeof define === "function" && define.amd ? define([
			"exports",
			"@jridgewell/sourcemap-codec",
			"@jridgewell/resolve-uri"
		], factory) : (global$1 = typeof globalThis !== "undefined" ? globalThis : global$1 || self, factory(global$1.traceMapping = {}, global$1.sourcemapCodec, global$1.resolveURI));
	})(exports, function(exports$1, sourcemapCodec$1, resolveUri) {
		"use strict";
		function resolve$5(input, base$1) {
			if (base$1 && !base$1.endsWith("/")) base$1 += "/";
			return resolveUri(input, base$1);
		}
		/**
		* Removes everything after the last "/", but leaves the slash.
		*/
		function stripFilename(path$28) {
			if (!path$28) return "";
			const index$1 = path$28.lastIndexOf("/");
			return path$28.slice(0, index$1 + 1);
		}
		const COLUMN = 0;
		const SOURCES_INDEX = 1;
		const SOURCE_LINE = 2;
		const SOURCE_COLUMN = 3;
		const NAMES_INDEX = 4;
		const REV_GENERATED_LINE = 1;
		const REV_GENERATED_COLUMN = 2;
		function maybeSort(mappings$1, owned) {
			const unsortedIndex = nextUnsortedSegmentLine(mappings$1, 0);
			if (unsortedIndex === mappings$1.length) return mappings$1;
			if (!owned) mappings$1 = mappings$1.slice();
			for (let i$6 = unsortedIndex; i$6 < mappings$1.length; i$6 = nextUnsortedSegmentLine(mappings$1, i$6 + 1)) mappings$1[i$6] = sortSegments(mappings$1[i$6], owned);
			return mappings$1;
		}
		function nextUnsortedSegmentLine(mappings$1, start) {
			for (let i$6 = start; i$6 < mappings$1.length; i$6++) if (!isSorted(mappings$1[i$6])) return i$6;
			return mappings$1.length;
		}
		function isSorted(line) {
			for (let j$1 = 1; j$1 < line.length; j$1++) if (line[j$1][COLUMN] < line[j$1 - 1][COLUMN]) return false;
			return true;
		}
		function sortSegments(line, owned) {
			if (!owned) line = line.slice();
			return line.sort(sortComparator);
		}
		function sortComparator(a$1, b$1) {
			return a$1[COLUMN] - b$1[COLUMN];
		}
		let found = false;
		/**
		* A binary search implementation that returns the index if a match is found.
		* If no match is found, then the left-index (the index associated with the item that comes just
		* before the desired index) is returned. To maintain proper sort order, a splice would happen at
		* the next index:
		*
		* ```js
		* const array = [1, 3];
		* const needle = 2;
		* const index = binarySearch(array, needle, (item, needle) => item - needle);
		*
		* assert.equal(index, 0);
		* array.splice(index + 1, 0, needle);
		* assert.deepEqual(array, [1, 2, 3]);
		* ```
		*/
		function binarySearch$2(haystack, needle, low, high) {
			while (low <= high) {
				const mid = low + (high - low >> 1);
				const cmp = haystack[mid][COLUMN] - needle;
				if (cmp === 0) {
					found = true;
					return mid;
				}
				if (cmp < 0) low = mid + 1;
				else high = mid - 1;
			}
			found = false;
			return low - 1;
		}
		function upperBound(haystack, needle, index$1) {
			for (let i$6 = index$1 + 1; i$6 < haystack.length; index$1 = i$6++) if (haystack[i$6][COLUMN] !== needle) break;
			return index$1;
		}
		function lowerBound(haystack, needle, index$1) {
			for (let i$6 = index$1 - 1; i$6 >= 0; index$1 = i$6--) if (haystack[i$6][COLUMN] !== needle) break;
			return index$1;
		}
		function memoizedState() {
			return {
				lastKey: -1,
				lastNeedle: -1,
				lastIndex: -1
			};
		}
		/**
		* This overly complicated beast is just to record the last tested line/column and the resulting
		* index, allowing us to skip a few tests if mappings are monotonically increasing.
		*/
		function memoizedBinarySearch(haystack, needle, state, key) {
			const { lastKey, lastNeedle, lastIndex } = state;
			let low = 0;
			let high = haystack.length - 1;
			if (key === lastKey) {
				if (needle === lastNeedle) {
					found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
					return lastIndex;
				}
				if (needle >= lastNeedle) low = lastIndex === -1 ? 0 : lastIndex;
				else high = lastIndex;
			}
			state.lastKey = key;
			state.lastNeedle = needle;
			return state.lastIndex = binarySearch$2(haystack, needle, low, high);
		}
		function buildBySources(decoded, memos) {
			const sources = memos.map(buildNullArray);
			for (let i$6 = 0; i$6 < decoded.length; i$6++) {
				const line = decoded[i$6];
				for (let j$1 = 0; j$1 < line.length; j$1++) {
					const seg = line[j$1];
					if (seg.length === 1) continue;
					const sourceIndex$1 = seg[SOURCES_INDEX];
					const sourceLine = seg[SOURCE_LINE];
					const sourceColumn = seg[SOURCE_COLUMN];
					const originalSource = sources[sourceIndex$1];
					const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
					const memo = memos[sourceIndex$1];
					let index$1 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
					memo.lastIndex = ++index$1;
					insert$1(originalLine, index$1, [
						sourceColumn,
						i$6,
						seg[COLUMN]
					]);
				}
			}
			return sources;
		}
		function insert$1(array, index$1, value) {
			for (let i$6 = array.length; i$6 > index$1; i$6--) array[i$6] = array[i$6 - 1];
			array[index$1] = value;
		}
		function buildNullArray() {
			return { __proto__: null };
		}
		const AnyMap = function(map, mapUrl) {
			const parsed = parse$17(map);
			if (!("sections" in parsed)) return new TraceMap(parsed, mapUrl);
			const mappings$1 = [];
			const sources = [];
			const sourcesContent = [];
			const names = [];
			const ignoreList = [];
			recurse(parsed, mapUrl, mappings$1, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
			const joined = {
				version: 3,
				file: parsed.file,
				names,
				sources,
				sourcesContent,
				mappings: mappings$1,
				ignoreList
			};
			return presortedDecodedMap(joined);
		};
		function parse$17(map) {
			return typeof map === "string" ? JSON.parse(map) : map;
		}
		function recurse(input, mapUrl, mappings$1, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
			const { sections } = input;
			for (let i$6 = 0; i$6 < sections.length; i$6++) {
				const { map, offset } = sections[i$6];
				let sl = stopLine;
				let sc = stopColumn;
				if (i$6 + 1 < sections.length) {
					const nextOffset = sections[i$6 + 1].offset;
					sl = Math.min(stopLine, lineOffset + nextOffset.line);
					if (sl === stopLine) sc = Math.min(stopColumn, columnOffset + nextOffset.column);
					else if (sl < stopLine) sc = columnOffset + nextOffset.column;
				}
				addSection(map, mapUrl, mappings$1, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
			}
		}
		function addSection(input, mapUrl, mappings$1, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
			const parsed = parse$17(input);
			if ("sections" in parsed) return recurse(...arguments);
			const map = new TraceMap(parsed, mapUrl);
			const sourcesOffset = sources.length;
			const namesOffset = names.length;
			const decoded = decodedMappings(map);
			const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
			append$1(sources, resolvedSources);
			append$1(names, map.names);
			if (contents) append$1(sourcesContent, contents);
			else for (let i$6 = 0; i$6 < resolvedSources.length; i$6++) sourcesContent.push(null);
			if (ignores) for (let i$6 = 0; i$6 < ignores.length; i$6++) ignoreList.push(ignores[i$6] + sourcesOffset);
			for (let i$6 = 0; i$6 < decoded.length; i$6++) {
				const lineI = lineOffset + i$6;
				if (lineI > stopLine) return;
				const out = getLine(mappings$1, lineI);
				const cOffset = i$6 === 0 ? columnOffset : 0;
				const line = decoded[i$6];
				for (let j$1 = 0; j$1 < line.length; j$1++) {
					const seg = line[j$1];
					const column = cOffset + seg[COLUMN];
					if (lineI === stopLine && column >= stopColumn) return;
					if (seg.length === 1) {
						out.push([column]);
						continue;
					}
					const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
					const sourceLine = seg[SOURCE_LINE];
					const sourceColumn = seg[SOURCE_COLUMN];
					out.push(seg.length === 4 ? [
						column,
						sourcesIndex,
						sourceLine,
						sourceColumn
					] : [
						column,
						sourcesIndex,
						sourceLine,
						sourceColumn,
						namesOffset + seg[NAMES_INDEX]
					]);
				}
			}
		}
		function append$1(arr, other) {
			for (let i$6 = 0; i$6 < other.length; i$6++) arr.push(other[i$6]);
		}
		function getLine(arr, index$1) {
			for (let i$6 = arr.length; i$6 <= index$1; i$6++) arr[i$6] = [];
			return arr[index$1];
		}
		const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
		const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
		const LEAST_UPPER_BOUND = -1;
		const GREATEST_LOWER_BOUND = 1;
		class TraceMap {
			constructor(map, mapUrl) {
				const isString$5 = typeof map === "string";
				if (!isString$5 && map._decodedMemo) return map;
				const parsed = isString$5 ? JSON.parse(map) : map;
				const { version: version$1, file: file$2, names, sourceRoot, sources, sourcesContent } = parsed;
				this.version = version$1;
				this.file = file$2;
				this.names = names || [];
				this.sourceRoot = sourceRoot;
				this.sources = sources;
				this.sourcesContent = sourcesContent;
				this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
				const from = resolve$5(sourceRoot || "", stripFilename(mapUrl));
				this.resolvedSources = sources.map((s$3) => resolve$5(s$3 || "", from));
				const { mappings: mappings$1 } = parsed;
				if (typeof mappings$1 === "string") {
					this._encoded = mappings$1;
					this._decoded = void 0;
				} else {
					this._encoded = void 0;
					this._decoded = maybeSort(mappings$1, isString$5);
				}
				this._decodedMemo = memoizedState();
				this._bySources = void 0;
				this._bySourceMemos = void 0;
			}
		}
		/**
		* Typescript doesn't allow friend access to private fields, so this just casts the map into a type
		* with public access modifiers.
		*/
		function cast(map) {
			return map;
		}
		/**
		* Returns the encoded (VLQ string) form of the SourceMap's mappings field.
		*/
		function encodedMappings(map) {
			var _a;
			var _b;
			return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec$1.encode(cast(map)._decoded);
		}
		/**
		* Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.
		*/
		function decodedMappings(map) {
			var _a;
			return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec$1.decode(cast(map)._encoded));
		}
		/**
		* A low-level API to find the segment associated with a generated line/column (think, from a
		* stack trace). Line and column here are 0-based, unlike `originalPositionFor`.
		*/
		function traceSegment(map, line, column) {
			const decoded = decodedMappings(map);
			if (line >= decoded.length) return null;
			const segments = decoded[line];
			const index$1 = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
			return index$1 === -1 ? null : segments[index$1];
		}
		/**
		* A higher-level API to find the source/line/column associated with a generated line/column
		* (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in
		* `source-map` library.
		*/
		function originalPositionFor(map, needle) {
			let { line, column, bias } = needle;
			line--;
			if (line < 0) throw new Error(LINE_GTR_ZERO);
			if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
			const decoded = decodedMappings(map);
			if (line >= decoded.length) return OMapping(null, null, null, null);
			const segments = decoded[line];
			const index$1 = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
			if (index$1 === -1) return OMapping(null, null, null, null);
			const segment = segments[index$1];
			if (segment.length === 1) return OMapping(null, null, null, null);
			const { names, resolvedSources } = map;
			return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
		}
		/**
		* Finds the generated line/column position of the provided source/line/column source position.
		*/
		function generatedPositionFor(map, needle) {
			const { source, line, column, bias } = needle;
			return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
		}
		/**
		* Finds all generated line/column positions of the provided source/line/column source position.
		*/
		function allGeneratedPositionsFor(map, needle) {
			const { source, line, column, bias } = needle;
			return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
		}
		/**
		* Iterates each mapping in generated position order.
		*/
		function eachMapping(map, cb) {
			const decoded = decodedMappings(map);
			const { names, resolvedSources } = map;
			for (let i$6 = 0; i$6 < decoded.length; i$6++) {
				const line = decoded[i$6];
				for (let j$1 = 0; j$1 < line.length; j$1++) {
					const seg = line[j$1];
					const generatedLine = i$6 + 1;
					const generatedColumn = seg[0];
					let source = null;
					let originalLine = null;
					let originalColumn = null;
					let name = null;
					if (seg.length !== 1) {
						source = resolvedSources[seg[1]];
						originalLine = seg[2] + 1;
						originalColumn = seg[3];
					}
					if (seg.length === 5) name = names[seg[4]];
					cb({
						generatedLine,
						generatedColumn,
						source,
						originalLine,
						originalColumn,
						name
					});
				}
			}
		}
		function sourceIndex(map, source) {
			const { sources, resolvedSources } = map;
			let index$1 = sources.indexOf(source);
			if (index$1 === -1) index$1 = resolvedSources.indexOf(source);
			return index$1;
		}
		/**
		* Retrieves the source content for a particular source, if its found. Returns null if not.
		*/
		function sourceContentFor(map, source) {
			const { sourcesContent } = map;
			if (sourcesContent == null) return null;
			const index$1 = sourceIndex(map, source);
			return index$1 === -1 ? null : sourcesContent[index$1];
		}
		/**
		* Determines if the source is marked to ignore by the source map.
		*/
		function isIgnored$3(map, source) {
			const { ignoreList } = map;
			if (ignoreList == null) return false;
			const index$1 = sourceIndex(map, source);
			return index$1 === -1 ? false : ignoreList.includes(index$1);
		}
		/**
		* A helper that skips sorting of the input map's mappings array, which can be expensive for larger
		* maps.
		*/
		function presortedDecodedMap(map, mapUrl) {
			const tracer = new TraceMap(clone$4(map, []), mapUrl);
			cast(tracer)._decoded = map.mappings;
			return tracer;
		}
		/**
		* Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
		* a sourcemap, or to JSON.stringify.
		*/
		function decodedMap(map) {
			return clone$4(map, decodedMappings(map));
		}
		/**
		* Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
		* a sourcemap, or to JSON.stringify.
		*/
		function encodedMap(map) {
			return clone$4(map, encodedMappings(map));
		}
		function clone$4(map, mappings$1) {
			return {
				version: map.version,
				file: map.file,
				names: map.names,
				sourceRoot: map.sourceRoot,
				sources: map.sources,
				sourcesContent: map.sourcesContent,
				mappings: mappings$1,
				ignoreList: map.ignoreList || map.x_google_ignoreList
			};
		}
		function OMapping(source, line, column, name) {
			return {
				source,
				line,
				column,
				name
			};
		}
		function GMapping(line, column) {
			return {
				line,
				column
			};
		}
		function traceSegmentInternal(segments, memo, line, column, bias) {
			let index$1 = memoizedBinarySearch(segments, column, memo, line);
			if (found) index$1 = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index$1);
			else if (bias === LEAST_UPPER_BOUND) index$1++;
			if (index$1 === -1 || index$1 === segments.length) return -1;
			return index$1;
		}
		function sliceGeneratedPositions(segments, memo, line, column, bias) {
			let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
			if (!found && bias === LEAST_UPPER_BOUND) min++;
			if (min === -1 || min === segments.length) return [];
			const matchedColumn = found ? column : segments[min][COLUMN];
			if (!found) min = lowerBound(segments, matchedColumn, min);
			const max$1 = upperBound(segments, matchedColumn, min);
			const result = [];
			for (; min <= max$1; min++) {
				const segment = segments[min];
				result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
			}
			return result;
		}
		function generatedPosition(map, source, line, column, bias, all) {
			var _a;
			line--;
			if (line < 0) throw new Error(LINE_GTR_ZERO);
			if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
			const { sources, resolvedSources } = map;
			let sourceIndex$1 = sources.indexOf(source);
			if (sourceIndex$1 === -1) sourceIndex$1 = resolvedSources.indexOf(source);
			if (sourceIndex$1 === -1) return all ? [] : GMapping(null, null);
			const generated = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
			const segments = generated[sourceIndex$1][line];
			if (segments == null) return all ? [] : GMapping(null, null);
			const memo = cast(map)._bySourceMemos[sourceIndex$1];
			if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
			const index$1 = traceSegmentInternal(segments, memo, line, column, bias);
			if (index$1 === -1) return GMapping(null, null);
			const segment = segments[index$1];
			return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
		}
		exports$1.AnyMap = AnyMap;
		exports$1.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
		exports$1.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
		exports$1.TraceMap = TraceMap;
		exports$1.allGeneratedPositionsFor = allGeneratedPositionsFor;
		exports$1.decodedMap = decodedMap;
		exports$1.decodedMappings = decodedMappings;
		exports$1.eachMapping = eachMapping;
		exports$1.encodedMap = encodedMap;
		exports$1.encodedMappings = encodedMappings;
		exports$1.generatedPositionFor = generatedPositionFor;
		exports$1.isIgnored = isIgnored$3;
		exports$1.originalPositionFor = originalPositionFor;
		exports$1.presortedDecodedMap = presortedDecodedMap;
		exports$1.sourceContentFor = sourceContentFor;
		exports$1.traceSegment = traceSegment;
	});
} });

//#endregion
//#region node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js
var require_gen_mapping_umd = __commonJS({ "node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_set_array_umd(), require_sourcemap_codec_umd(), require_trace_mapping_umd()) : typeof define === "function" && define.amd ? define([
			"exports",
			"@jridgewell/set-array",
			"@jridgewell/sourcemap-codec",
			"@jridgewell/trace-mapping"
		], factory) : (global$1 = typeof globalThis !== "undefined" ? globalThis : global$1 || self, factory(global$1.genMapping = {}, global$1.setArray, global$1.sourcemapCodec, global$1.traceMapping));
	})(exports, function(exports$1, setArray, sourcemapCodec$1, traceMapping) {
		"use strict";
		const COLUMN = 0;
		const SOURCES_INDEX = 1;
		const SOURCE_LINE = 2;
		const SOURCE_COLUMN = 3;
		const NAMES_INDEX = 4;
		const NO_NAME = -1;
		/**
		* Provides the state to generate a sourcemap.
		*/
		class GenMapping {
			constructor({ file: file$2, sourceRoot } = {}) {
				this._names = new setArray.SetArray();
				this._sources = new setArray.SetArray();
				this._sourcesContent = [];
				this._mappings = [];
				this.file = file$2;
				this.sourceRoot = sourceRoot;
				this._ignoreList = new setArray.SetArray();
			}
		}
		/**
		* Typescript doesn't allow friend access to private fields, so this just casts the map into a type
		* with public access modifiers.
		*/
		function cast(map) {
			return map;
		}
		function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
			return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
		}
		function addMapping(map, mapping) {
			return addMappingInternal(false, map, mapping);
		}
		/**
		* Same as `addSegment`, but will only add the segment if it generates useful information in the
		* resulting map. This only works correctly if segments are added **in order**, meaning you should
		* not add a segment with a lower generated line/column than one that came before.
		*/
		const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
			return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
		};
		/**
		* Same as `addMapping`, but will only add the mapping if it generates useful information in the
		* resulting map. This only works correctly if mappings are added **in order**, meaning you should
		* not add a mapping with a lower generated line/column than one that came before.
		*/
		const maybeAddMapping = (map, mapping) => {
			return addMappingInternal(true, map, mapping);
		};
		/**
		* Adds/removes the content of the source file to the source map.
		*/
		function setSourceContent(map, source, content) {
			const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
			const index$1 = setArray.put(sources, source);
			sourcesContent[index$1] = content;
		}
		function setIgnore(map, source, ignore = true) {
			const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);
			const index$1 = setArray.put(sources, source);
			if (index$1 === sourcesContent.length) sourcesContent[index$1] = null;
			if (ignore) setArray.put(ignoreList, index$1);
			else setArray.remove(ignoreList, index$1);
		}
		/**
		* Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
		* a sourcemap, or to JSON.stringify.
		*/
		function toDecodedMap(map) {
			const { _mappings: mappings$1, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
			removeEmptyFinalLines(mappings$1);
			return {
				version: 3,
				file: map.file || void 0,
				names: names.array,
				sourceRoot: map.sourceRoot || void 0,
				sources: sources.array,
				sourcesContent,
				mappings: mappings$1,
				ignoreList: ignoreList.array
			};
		}
		/**
		* Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
		* a sourcemap, or to JSON.stringify.
		*/
		function toEncodedMap(map) {
			const decoded = toDecodedMap(map);
			return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec$1.encode(decoded.mappings) });
		}
		/**
		* Constructs a new GenMapping, using the already present mappings of the input.
		*/
		function fromMap(input) {
			const map = new traceMapping.TraceMap(input);
			const gen = new GenMapping({
				file: map.file,
				sourceRoot: map.sourceRoot
			});
			putAll(cast(gen)._names, map.names);
			putAll(cast(gen)._sources, map.sources);
			cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
			cast(gen)._mappings = traceMapping.decodedMappings(map);
			if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);
			return gen;
		}
		/**
		* Returns an array of high-level mapping objects for every recorded segment, which could then be
		* passed to the `source-map` library.
		*/
		function allMappings(map) {
			const out = [];
			const { _mappings: mappings$1, _sources: sources, _names: names } = cast(map);
			for (let i$6 = 0; i$6 < mappings$1.length; i$6++) {
				const line = mappings$1[i$6];
				for (let j$1 = 0; j$1 < line.length; j$1++) {
					const seg = line[j$1];
					const generated = {
						line: i$6 + 1,
						column: seg[COLUMN]
					};
					let source = void 0;
					let original = void 0;
					let name = void 0;
					if (seg.length !== 1) {
						source = sources.array[seg[SOURCES_INDEX]];
						original = {
							line: seg[SOURCE_LINE] + 1,
							column: seg[SOURCE_COLUMN]
						};
						if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];
					}
					out.push({
						generated,
						source,
						original,
						name
					});
				}
			}
			return out;
		}
		function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
			const { _mappings: mappings$1, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map);
			const line = getLine(mappings$1, genLine);
			const index$1 = getColumnIndex(line, genColumn);
			if (!source) {
				if (skipable && skipSourceless(line, index$1)) return;
				return insert$1(line, index$1, [genColumn]);
			}
			const sourcesIndex = setArray.put(sources, source);
			const namesIndex = name ? setArray.put(names, name) : NO_NAME;
			if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
			if (skipable && skipSource(line, index$1, sourcesIndex, sourceLine, sourceColumn, namesIndex)) return;
			return insert$1(line, index$1, name ? [
				genColumn,
				sourcesIndex,
				sourceLine,
				sourceColumn,
				namesIndex
			] : [
				genColumn,
				sourcesIndex,
				sourceLine,
				sourceColumn
			]);
		}
		function getLine(mappings$1, index$1) {
			for (let i$6 = mappings$1.length; i$6 <= index$1; i$6++) mappings$1[i$6] = [];
			return mappings$1[index$1];
		}
		function getColumnIndex(line, genColumn) {
			let index$1 = line.length;
			for (let i$6 = index$1 - 1; i$6 >= 0; index$1 = i$6--) {
				const current = line[i$6];
				if (genColumn >= current[COLUMN]) break;
			}
			return index$1;
		}
		function insert$1(array, index$1, value) {
			for (let i$6 = array.length; i$6 > index$1; i$6--) array[i$6] = array[i$6 - 1];
			array[index$1] = value;
		}
		function removeEmptyFinalLines(mappings$1) {
			const { length } = mappings$1;
			let len = length;
			for (let i$6 = len - 1; i$6 >= 0; len = i$6, i$6--) if (mappings$1[i$6].length > 0) break;
			if (len < length) mappings$1.length = len;
		}
		function putAll(setarr, array) {
			for (let i$6 = 0; i$6 < array.length; i$6++) setArray.put(setarr, array[i$6]);
		}
		function skipSourceless(line, index$1) {
			if (index$1 === 0) return true;
			const prev = line[index$1 - 1];
			return prev.length === 1;
		}
		function skipSource(line, index$1, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
			if (index$1 === 0) return false;
			const prev = line[index$1 - 1];
			if (prev.length === 1) return false;
			return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
		}
		function addMappingInternal(skipable, map, mapping) {
			const { generated, source, original, name, content } = mapping;
			if (!source) return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
			return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);
		}
		exports$1.GenMapping = GenMapping;
		exports$1.addMapping = addMapping;
		exports$1.addSegment = addSegment;
		exports$1.allMappings = allMappings;
		exports$1.fromMap = fromMap;
		exports$1.maybeAddMapping = maybeAddMapping;
		exports$1.maybeAddSegment = maybeAddSegment;
		exports$1.setIgnore = setIgnore;
		exports$1.setSourceContent = setSourceContent;
		exports$1.toDecodedMap = toDecodedMap;
		exports$1.toEncodedMap = toEncodedMap;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/@babel/generator/lib/source-map.js
var require_source_map = __commonJS({ "node_modules/@babel/generator/lib/source-map.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _genMapping = require_gen_mapping_umd();
	var _traceMapping = require_trace_mapping_umd();
	var SourceMap = class {
		constructor(opts, code$1) {
			var _opts$sourceFileName;
			this._map = void 0;
			this._rawMappings = void 0;
			this._sourceFileName = void 0;
			this._lastGenLine = 0;
			this._lastSourceLine = 0;
			this._lastSourceColumn = 0;
			this._inputMap = void 0;
			const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
			this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\/g, "/");
			this._rawMappings = void 0;
			if (opts.inputSourceMap) {
				this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
				const resolvedSources = this._inputMap.resolvedSources;
				if (resolvedSources.length) for (let i$6 = 0; i$6 < resolvedSources.length; i$6++) {
					var _this$_inputMap$sourc;
					(0, _genMapping.setSourceContent)(map, resolvedSources[i$6], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i$6]);
				}
			}
			if (typeof code$1 === "string" && !opts.inputSourceMap) (0, _genMapping.setSourceContent)(map, this._sourceFileName, code$1);
			else if (typeof code$1 === "object") for (const sourceFileName of Object.keys(code$1)) (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code$1[sourceFileName]);
		}
		get() {
			return (0, _genMapping.toEncodedMap)(this._map);
		}
		getDecoded() {
			return (0, _genMapping.toDecodedMap)(this._map);
		}
		getRawMappings() {
			return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
		}
		mark(generated, line, column, identifierName, identifierNamePos, filename) {
			var _originalMapping;
			this._rawMappings = void 0;
			let originalMapping;
			if (line != null) if (this._inputMap) {
				originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
					line,
					column
				});
				if (!originalMapping.name && identifierNamePos) {
					const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
					if (originalIdentifierMapping.name) identifierName = originalIdentifierMapping.name;
				}
			} else originalMapping = {
				source: (filename == null ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
				line,
				column
			};
			(0, _genMapping.maybeAddMapping)(this._map, {
				name: identifierName,
				generated,
				source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,
				original: originalMapping
			});
		}
	};
	exports.default = SourceMap;
} });

//#endregion
//#region node_modules/@babel/generator/lib/buffer.js
var require_buffer = __commonJS({ "node_modules/@babel/generator/lib/buffer.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var Buffer$1 = class {
		constructor(map, indentChar) {
			this._map = null;
			this._buf = "";
			this._str = "";
			this._appendCount = 0;
			this._last = 0;
			this._queue = [];
			this._queueCursor = 0;
			this._canMarkIdName = true;
			this._indentChar = "";
			this._fastIndentations = [];
			this._position = {
				line: 1,
				column: 0
			};
			this._sourcePosition = {
				identifierName: void 0,
				identifierNamePos: void 0,
				line: void 0,
				column: void 0,
				filename: void 0
			};
			this._map = map;
			this._indentChar = indentChar;
			for (let i$6 = 0; i$6 < 64; i$6++) this._fastIndentations.push(indentChar.repeat(i$6));
			this._allocQueue();
		}
		_allocQueue() {
			const queue$1 = this._queue;
			for (let i$6 = 0; i$6 < 16; i$6++) queue$1.push({
				char: 0,
				repeat: 1,
				line: void 0,
				column: void 0,
				identifierName: void 0,
				identifierNamePos: void 0,
				filename: ""
			});
		}
		_pushQueue(char, repeat, line, column, filename) {
			const cursor = this._queueCursor;
			if (cursor === this._queue.length) this._allocQueue();
			const item = this._queue[cursor];
			item.char = char;
			item.repeat = repeat;
			item.line = line;
			item.column = column;
			item.filename = filename;
			this._queueCursor++;
		}
		_popQueue() {
			if (this._queueCursor === 0) throw new Error("Cannot pop from empty queue");
			return this._queue[--this._queueCursor];
		}
		get() {
			this._flush();
			const map = this._map;
			const result = {
				code: (this._buf + this._str).trimRight(),
				decodedMap: map == null ? void 0 : map.getDecoded(),
				get __mergedMap() {
					return this.map;
				},
				get map() {
					const resultMap = map ? map.get() : null;
					result.map = resultMap;
					return resultMap;
				},
				set map(value) {
					Object.defineProperty(result, "map", {
						value,
						writable: true
					});
				},
				get rawMappings() {
					const mappings$1 = map == null ? void 0 : map.getRawMappings();
					result.rawMappings = mappings$1;
					return mappings$1;
				},
				set rawMappings(value) {
					Object.defineProperty(result, "rawMappings", {
						value,
						writable: true
					});
				}
			};
			return result;
		}
		append(str$4, maybeNewline) {
			this._flush();
			this._append(str$4, this._sourcePosition, maybeNewline);
		}
		appendChar(char) {
			this._flush();
			this._appendChar(char, 1, this._sourcePosition);
		}
		queue(char) {
			if (char === 10) while (this._queueCursor !== 0) {
				const char$1 = this._queue[this._queueCursor - 1].char;
				if (char$1 !== 32 && char$1 !== 9) break;
				this._queueCursor--;
			}
			const sourcePosition = this._sourcePosition;
			this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
		}
		queueIndentation(repeat) {
			if (repeat === 0) return;
			this._pushQueue(-1, repeat, void 0, void 0, void 0);
		}
		_flush() {
			const queueCursor = this._queueCursor;
			const queue$1 = this._queue;
			for (let i$6 = 0; i$6 < queueCursor; i$6++) {
				const item = queue$1[i$6];
				this._appendChar(item.char, item.repeat, item);
			}
			this._queueCursor = 0;
		}
		_appendChar(char, repeat, sourcePos) {
			this._last = char;
			if (char === -1) {
				const fastIndentation = this._fastIndentations[repeat];
				if (fastIndentation !== void 0) this._str += fastIndentation;
				else this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
			} else this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
			if (char !== 10) {
				this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);
				this._position.column += repeat;
			} else {
				this._position.line++;
				this._position.column = 0;
			}
			if (this._canMarkIdName) {
				sourcePos.identifierName = void 0;
				sourcePos.identifierNamePos = void 0;
			}
		}
		_append(str$4, sourcePos, maybeNewline) {
			const len = str$4.length;
			const position = this._position;
			this._last = str$4.charCodeAt(len - 1);
			if (++this._appendCount > 4096) {
				+this._str;
				this._buf += this._str;
				this._str = str$4;
				this._appendCount = 0;
			} else this._str += str$4;
			if (!maybeNewline && !this._map) {
				position.column += len;
				return;
			}
			const { column, identifierName, identifierNamePos, filename } = sourcePos;
			let line = sourcePos.line;
			if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {
				sourcePos.identifierName = void 0;
				sourcePos.identifierNamePos = void 0;
			}
			let i$6 = str$4.indexOf("\n");
			let last$2 = 0;
			if (i$6 !== 0) this._mark(line, column, identifierName, identifierNamePos, filename);
			while (i$6 !== -1) {
				position.line++;
				position.column = 0;
				last$2 = i$6 + 1;
				if (last$2 < len && line !== void 0) this._mark(++line, 0, null, null, filename);
				i$6 = str$4.indexOf("\n", last$2);
			}
			position.column += len - last$2;
		}
		_mark(line, column, identifierName, identifierNamePos, filename) {
			var _this$_map;
			(_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
		}
		removeTrailingNewline() {
			const queueCursor = this._queueCursor;
			if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) this._queueCursor--;
		}
		removeLastSemicolon() {
			const queueCursor = this._queueCursor;
			if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) this._queueCursor--;
		}
		getLastChar() {
			const queueCursor = this._queueCursor;
			return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
		}
		getNewlineCount() {
			const queueCursor = this._queueCursor;
			let count = 0;
			if (queueCursor === 0) return this._last === 10 ? 1 : 0;
			for (let i$6 = queueCursor - 1; i$6 >= 0; i$6--) {
				if (this._queue[i$6].char !== 10) break;
				count++;
			}
			return count === queueCursor && this._last === 10 ? count + 1 : count;
		}
		endsWithCharAndNewline() {
			const queue$1 = this._queue;
			const queueCursor = this._queueCursor;
			if (queueCursor !== 0) {
				const lastCp = queue$1[queueCursor - 1].char;
				if (lastCp !== 10) return;
				if (queueCursor > 1) return queue$1[queueCursor - 2].char;
				else return this._last;
			}
		}
		hasContent() {
			return this._queueCursor !== 0 || !!this._last;
		}
		exactSource(loc, cb) {
			if (!this._map) {
				cb();
				return;
			}
			this.source("start", loc);
			const identifierName = loc.identifierName;
			const sourcePos = this._sourcePosition;
			if (identifierName) {
				this._canMarkIdName = false;
				sourcePos.identifierName = identifierName;
			}
			cb();
			if (identifierName) {
				this._canMarkIdName = true;
				sourcePos.identifierName = void 0;
				sourcePos.identifierNamePos = void 0;
			}
			this.source("end", loc);
		}
		source(prop, loc) {
			if (!this._map) return;
			this._normalizePosition(prop, loc, 0);
		}
		sourceWithOffset(prop, loc, columnOffset) {
			if (!this._map) return;
			this._normalizePosition(prop, loc, columnOffset);
		}
		_normalizePosition(prop, loc, columnOffset) {
			const pos = loc[prop];
			const target = this._sourcePosition;
			if (pos) {
				target.line = pos.line;
				target.column = Math.max(pos.column + columnOffset, 0);
				target.filename = loc.filename;
			}
		}
		getCurrentColumn() {
			const queue$1 = this._queue;
			const queueCursor = this._queueCursor;
			let lastIndex = -1;
			let len = 0;
			for (let i$6 = 0; i$6 < queueCursor; i$6++) {
				const item = queue$1[i$6];
				if (item.char === 10) lastIndex = len;
				len += item.repeat;
			}
			return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
		}
		getCurrentLine() {
			let count = 0;
			const queue$1 = this._queue;
			for (let i$6 = 0; i$6 < this._queueCursor; i$6++) if (queue$1[i$6].char === 10) count++;
			return this._position.line + count;
		}
	};
	exports.default = Buffer$1;
} });

//#endregion
//#region node_modules/@babel/generator/lib/node/whitespace.js
var require_whitespace = __commonJS({ "node_modules/@babel/generator/lib/node/whitespace.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.nodes = void 0;
	var _t$31 = require_lib$4();
	const { FLIPPED_ALIAS_KEYS: FLIPPED_ALIAS_KEYS$1, isArrayExpression, isAssignmentExpression: isAssignmentExpression$1, isBinary, isBlockStatement: isBlockStatement$2, isCallExpression: isCallExpression$5, isFunction: isFunction$4, isIdentifier: isIdentifier$8, isLiteral: isLiteral$2, isMemberExpression: isMemberExpression$3, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression: isOptionalMemberExpression$1, isStringLiteral: isStringLiteral$3 } = _t$31;
	function crawlInternal(node, state) {
		if (!node) return state;
		if (isMemberExpression$3(node) || isOptionalMemberExpression$1(node)) {
			crawlInternal(node.object, state);
			if (node.computed) crawlInternal(node.property, state);
		} else if (isBinary(node) || isAssignmentExpression$1(node)) {
			crawlInternal(node.left, state);
			crawlInternal(node.right, state);
		} else if (isCallExpression$5(node) || isOptionalCallExpression(node)) {
			state.hasCall = true;
			crawlInternal(node.callee, state);
		} else if (isFunction$4(node)) state.hasFunction = true;
		else if (isIdentifier$8(node)) state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee);
		return state;
	}
	function crawl(node) {
		return crawlInternal(node, {
			hasCall: false,
			hasFunction: false,
			hasHelper: false
		});
	}
	function isHelper(node) {
		if (!node) return false;
		if (isMemberExpression$3(node)) return isHelper(node.object) || isHelper(node.property);
		else if (isIdentifier$8(node)) return node.name === "require" || node.name.charCodeAt(0) === 95;
		else if (isCallExpression$5(node)) return isHelper(node.callee);
		else if (isBinary(node) || isAssignmentExpression$1(node)) return isIdentifier$8(node.left) && isHelper(node.left) || isHelper(node.right);
		else return false;
	}
	function isType$1(node) {
		return isLiteral$2(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier$8(node) || isMemberExpression$3(node);
	}
	const nodes = exports.nodes = {
		AssignmentExpression(node) {
			const state = crawl(node.right);
			if (state.hasCall && state.hasHelper || state.hasFunction) return state.hasFunction ? 3 : 2;
		},
		SwitchCase(node, parent) {
			return (!!node.consequent.length || parent.cases[0] === node ? 1 : 0) | (!node.consequent.length && parent.cases[parent.cases.length - 1] === node ? 2 : 0);
		},
		LogicalExpression(node) {
			if (isFunction$4(node.left) || isFunction$4(node.right)) return 2;
		},
		Literal(node) {
			if (isStringLiteral$3(node) && node.value === "use strict") return 2;
		},
		CallExpression(node) {
			if (isFunction$4(node.callee) || isHelper(node)) return 3;
		},
		OptionalCallExpression(node) {
			if (isFunction$4(node.callee)) return 3;
		},
		VariableDeclaration(node) {
			for (let i$6 = 0; i$6 < node.declarations.length; i$6++) {
				const declar = node.declarations[i$6];
				let enabled = isHelper(declar.id) && !isType$1(declar.init);
				if (!enabled && declar.init) {
					const state = crawl(declar.init);
					enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
				}
				if (enabled) return 3;
			}
		},
		IfStatement(node) {
			if (isBlockStatement$2(node.consequent)) return 3;
		}
	};
	nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
		if (parent.properties[0] === node) return 1;
	};
	nodes.ObjectTypeCallProperty = function(node, parent) {
		var _parent$properties;
		if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) return 1;
	};
	nodes.ObjectTypeIndexer = function(node, parent) {
		var _parent$properties2, _parent$callPropertie;
		if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) return 1;
	};
	nodes.ObjectTypeInternalSlot = function(node, parent) {
		var _parent$properties3, _parent$callPropertie2, _parent$indexers;
		if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) return 1;
	};
	[
		["Function", true],
		["Class", true],
		["Loop", true],
		["LabeledStatement", true],
		["SwitchStatement", true],
		["TryStatement", true]
	].forEach(function([type, amounts]) {
		[type].concat(FLIPPED_ALIAS_KEYS$1[type] || []).forEach(function(type$1) {
			const ret$1 = amounts ? 3 : 0;
			nodes[type$1] = () => ret$1;
		});
	});
} });

//#endregion
//#region node_modules/@babel/generator/lib/node/parentheses.js
var require_parentheses = __commonJS({ "node_modules/@babel/generator/lib/node/parentheses.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AssignmentExpression = AssignmentExpression$2;
	exports.Binary = Binary;
	exports.BinaryExpression = BinaryExpression$1;
	exports.ClassExpression = ClassExpression;
	exports.ArrowFunctionExpression = exports.ConditionalExpression = ConditionalExpression$2;
	exports.DoExpression = DoExpression$1;
	exports.FunctionExpression = FunctionExpression$1;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation$1;
	exports.Identifier = Identifier$1;
	exports.LogicalExpression = LogicalExpression$1;
	exports.NullableTypeAnnotation = NullableTypeAnnotation$1;
	exports.ObjectExpression = ObjectExpression$2;
	exports.OptionalIndexedAccessType = OptionalIndexedAccessType$1;
	exports.OptionalCallExpression = exports.OptionalMemberExpression = OptionalMemberExpression$1;
	exports.SequenceExpression = SequenceExpression$2;
	exports.TSSatisfiesExpression = exports.TSAsExpression = TSAsExpression$1;
	exports.TSConditionalType = TSConditionalType$1;
	exports.TSConstructorType = exports.TSFunctionType = TSFunctionType$1;
	exports.TSInferType = TSInferType$1;
	exports.TSInstantiationExpression = TSInstantiationExpression$1;
	exports.TSIntersectionType = TSIntersectionType$1;
	exports.UnaryLike = exports.TSTypeAssertion = UnaryLike;
	exports.TSTypeOperator = TSTypeOperator$1;
	exports.TSUnionType = TSUnionType$1;
	exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation$1;
	exports.UpdateExpression = UpdateExpression$2;
	exports.AwaitExpression = exports.YieldExpression = YieldExpression$1;
	var _t$30 = require_lib$4();
	var _index$13 = require_node();
	const { isArrayTypeAnnotation: isArrayTypeAnnotation$1, isBinaryExpression, isCallExpression: isCallExpression$4, isForOfStatement, isIndexedAccessType, isMemberExpression: isMemberExpression$2, isObjectPattern, isOptionalMemberExpression, isYieldExpression, isStatement: isStatement$7 } = _t$30;
	const PRECEDENCE = new Map([
		["||", 0],
		["??", 0],
		["|>", 0],
		["&&", 1],
		["|", 2],
		["^", 3],
		["&", 4],
		["==", 5],
		["===", 5],
		["!=", 5],
		["!==", 5],
		["<", 6],
		[">", 6],
		["<=", 6],
		[">=", 6],
		["in", 6],
		["instanceof", 6],
		[">>", 7],
		["<<", 7],
		[">>>", 7],
		["+", 8],
		["-", 8],
		["*", 9],
		["/", 9],
		["%", 9],
		["**", 10]
	]);
	function getBinaryPrecedence(node, nodeType) {
		if (nodeType === "BinaryExpression" || nodeType === "LogicalExpression") return PRECEDENCE.get(node.operator);
		if (nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression") return PRECEDENCE.get("in");
	}
	function isTSTypeExpression(nodeType) {
		return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
	}
	const isClassExtendsClause = (node, parent) => {
		const parentType = parent.type;
		return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node;
	};
	const hasPostfixPart = (node, parent) => {
		const parentType = parent.type;
		return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node || parentType === "TaggedTemplateExpression" && parent.tag === node || parentType === "TSNonNullExpression";
	};
	function NullableTypeAnnotation$1(node, parent) {
		return isArrayTypeAnnotation$1(parent);
	}
	function FunctionTypeAnnotation$1(node, parent, tokenContext) {
		const parentType = parent.type;
		return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || Boolean(tokenContext & _index$13.TokenContext.arrowFlowReturnType);
	}
	function UpdateExpression$2(node, parent) {
		return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
	}
	function needsParenBeforeExpressionBrace(tokenContext) {
		return Boolean(tokenContext & (_index$13.TokenContext.expressionStatement | _index$13.TokenContext.arrowBody));
	}
	function ObjectExpression$2(node, parent, tokenContext) {
		return needsParenBeforeExpressionBrace(tokenContext);
	}
	function DoExpression$1(node, parent, tokenContext) {
		return !node.async && Boolean(tokenContext & _index$13.TokenContext.expressionStatement);
	}
	function Binary(node, parent) {
		const parentType = parent.type;
		if (node.type === "BinaryExpression" && node.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") return parent.left === node;
		if (isClassExtendsClause(node, parent)) return true;
		if (hasPostfixPart(node, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") return true;
		const parentPos = getBinaryPrecedence(parent, parentType);
		if (parentPos != null) {
			const nodePos = getBinaryPrecedence(node, node.type);
			if (parentPos === nodePos && parentType === "BinaryExpression" && parent.right === node || parentPos > nodePos) return true;
		}
		return void 0;
	}
	function UnionTypeAnnotation$1(node, parent) {
		const parentType = parent.type;
		return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
	}
	function OptionalIndexedAccessType$1(node, parent) {
		return isIndexedAccessType(parent) && parent.objectType === node;
	}
	function TSAsExpression$1(node, parent) {
		if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left === node) return true;
		if (parent.type === "BinaryExpression" && (parent.operator === "|" || parent.operator === "&") && node === parent.left) return true;
		return Binary(node, parent);
	}
	function TSConditionalType$1(node, parent) {
		const parentType = parent.type;
		if (parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSOptionalType" || parentType === "TSTypeOperator" || parentType === "TSTypeParameter") return true;
		if ((parentType === "TSIntersectionType" || parentType === "TSUnionType") && parent.types[0] === node) return true;
		if (parentType === "TSConditionalType" && (parent.checkType === node || parent.extendsType === node)) return true;
		return false;
	}
	function TSUnionType$1(node, parent) {
		const parentType = parent.type;
		return parentType === "TSIntersectionType" || parentType === "TSTypeOperator" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSOptionalType";
	}
	function TSIntersectionType$1(node, parent) {
		const parentType = parent.type;
		return parentType === "TSTypeOperator" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSOptionalType";
	}
	function TSInferType$1(node, parent) {
		const parentType = parent.type;
		if (parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSOptionalType") return true;
		if (node.typeParameter.constraint) {
			if ((parentType === "TSIntersectionType" || parentType === "TSUnionType") && parent.types[0] === node) return true;
		}
		return false;
	}
	function TSTypeOperator$1(node, parent) {
		const parentType = parent.type;
		return parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSOptionalType";
	}
	function TSInstantiationExpression$1(node, parent) {
		const parentType = parent.type;
		return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
	}
	function TSFunctionType$1(node, parent) {
		const parentType = parent.type;
		return parentType === "TSIntersectionType" || parentType === "TSUnionType" || parentType === "TSTypeOperator" || parentType === "TSOptionalType" || parentType === "TSArrayType" || parentType === "TSIndexedAccessType" && parent.objectType === node || parentType === "TSConditionalType" && (parent.checkType === node || parent.extendsType === node);
	}
	function BinaryExpression$1(node, parent, tokenContext, inForStatementInit) {
		return node.operator === "in" && inForStatementInit;
	}
	function SequenceExpression$2(node, parent) {
		const parentType = parent.type;
		if (parentType === "SequenceExpression" || parentType === "ParenthesizedExpression" || parentType === "MemberExpression" && parent.property === node || parentType === "OptionalMemberExpression" && parent.property === node || parentType === "TemplateLiteral") return false;
		if (parentType === "ClassDeclaration") return true;
		if (parentType === "ForOfStatement") return parent.right === node;
		if (parentType === "ExportDefaultDeclaration") return true;
		return !isStatement$7(parent);
	}
	function YieldExpression$1(node, parent) {
		const parentType = parent.type;
		return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node, parent) || parentType === "AwaitExpression" && isYieldExpression(node) || parentType === "ConditionalExpression" && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
	}
	function ClassExpression(node, parent, tokenContext) {
		return Boolean(tokenContext & (_index$13.TokenContext.expressionStatement | _index$13.TokenContext.exportDefault));
	}
	function UnaryLike(node, parent) {
		return hasPostfixPart(node, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node || isClassExtendsClause(node, parent);
	}
	function FunctionExpression$1(node, parent, tokenContext) {
		return Boolean(tokenContext & (_index$13.TokenContext.expressionStatement | _index$13.TokenContext.exportDefault));
	}
	function ConditionalExpression$2(node, parent) {
		const parentType = parent.type;
		if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) return true;
		return UnaryLike(node, parent);
	}
	function OptionalMemberExpression$1(node, parent) {
		return isCallExpression$4(parent) && parent.callee === node || isMemberExpression$2(parent) && parent.object === node;
	}
	function AssignmentExpression$2(node, parent, tokenContext) {
		if (needsParenBeforeExpressionBrace(tokenContext) && isObjectPattern(node.left)) return true;
		else return ConditionalExpression$2(node, parent);
	}
	function LogicalExpression$1(node, parent) {
		const parentType = parent.type;
		if (isTSTypeExpression(parentType)) return true;
		if (parentType !== "LogicalExpression") return false;
		switch (node.operator) {
			case "||": return parent.operator === "??" || parent.operator === "&&";
			case "&&": return parent.operator === "??";
			case "??": return parent.operator !== "??";
		}
	}
	function Identifier$1(node, parent, tokenContext, _inForInit, getRawIdentifier) {
		var _node$extra;
		const parentType = parent.type;
		if ((_node$extra = node.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node) {
			const rightType = parent.right.type;
			if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) return true;
		}
		if (getRawIdentifier && getRawIdentifier(node) !== node.name) return false;
		if (node.name === "let") {
			const isFollowedByBracket = isMemberExpression$2(parent, {
				object: node,
				computed: true
			}) || isOptionalMemberExpression(parent, {
				object: node,
				computed: true,
				optional: false
			});
			if (isFollowedByBracket && tokenContext & (_index$13.TokenContext.expressionStatement | _index$13.TokenContext.forHead | _index$13.TokenContext.forInHead)) return true;
			return Boolean(tokenContext & _index$13.TokenContext.forOfHead);
		}
		return node.name === "async" && isForOfStatement(parent, {
			left: node,
			await: false
		});
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/node/index.js
var require_node = __commonJS({ "node_modules/@babel/generator/lib/node/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenContext = void 0;
	exports.isLastChild = isLastChild;
	exports.needsParens = needsParens$1;
	exports.needsWhitespace = needsWhitespace;
	exports.needsWhitespaceAfter = needsWhitespaceAfter;
	exports.needsWhitespaceBefore = needsWhitespaceBefore;
	var whitespace = require_whitespace();
	var parens = require_parentheses();
	var _t$29 = require_lib$4();
	const { FLIPPED_ALIAS_KEYS, VISITOR_KEYS: VISITOR_KEYS$6, isCallExpression: isCallExpression$3, isDecorator, isExpressionStatement: isExpressionStatement$2, isMemberExpression: isMemberExpression$1, isNewExpression: isNewExpression$2, isParenthesizedExpression } = _t$29;
	const TokenContext = exports.TokenContext = {
		expressionStatement: 1,
		arrowBody: 2,
		exportDefault: 4,
		forHead: 8,
		forInHead: 16,
		forOfHead: 32,
		arrowFlowReturnType: 64
	};
	function expandAliases(obj) {
		const map = new Map();
		function add(type, func) {
			const fn = map.get(type);
			map.set(type, fn ? function(node, parent, stack, inForInit, getRawIdentifier) {
				var _fn;
				return (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) != null ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);
			} : func);
		}
		for (const type of Object.keys(obj)) {
			const aliases = FLIPPED_ALIAS_KEYS[type];
			if (aliases) for (const alias of aliases) add(alias, obj[type]);
			else add(type, obj[type]);
		}
		return map;
	}
	const expandedParens = expandAliases(parens);
	const expandedWhitespaceNodes = expandAliases(whitespace.nodes);
	function isOrHasCallExpression(node) {
		if (isCallExpression$3(node)) return true;
		return isMemberExpression$1(node) && isOrHasCallExpression(node.object);
	}
	function needsWhitespace(node, parent, type) {
		var _expandedWhitespaceNo;
		if (!node) return false;
		if (isExpressionStatement$2(node)) node = node.expression;
		const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) == null ? void 0 : _expandedWhitespaceNo(node, parent);
		if (typeof flag === "number") return (flag & type) !== 0;
		return false;
	}
	function needsWhitespaceBefore(node, parent) {
		return needsWhitespace(node, parent, 1);
	}
	function needsWhitespaceAfter(node, parent) {
		return needsWhitespace(node, parent, 2);
	}
	function needsParens$1(node, parent, tokenContext, inForInit, getRawIdentifier) {
		var _expandedParens$get;
		if (!parent) return false;
		if (isNewExpression$2(parent) && parent.callee === node) {
			if (isOrHasCallExpression(node)) return true;
		}
		if (isDecorator(parent)) return !isDecoratorMemberExpression(node) && !(isCallExpression$3(node) && isDecoratorMemberExpression(node.callee)) && !isParenthesizedExpression(node);
		return (_expandedParens$get = expandedParens.get(node.type)) == null ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);
	}
	function isDecoratorMemberExpression(node) {
		switch (node.type) {
			case "Identifier": return true;
			case "MemberExpression": return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);
			default: return false;
		}
	}
	function isLastChild(parent, child) {
		const visitorKeys = VISITOR_KEYS$6[parent.type];
		for (let i$6 = visitorKeys.length - 1; i$6 >= 0; i$6--) {
			const val = parent[visitorKeys[i$6]];
			if (val === child) return true;
			else if (Array.isArray(val)) {
				let j$1 = val.length - 1;
				while (j$1 >= 0 && val[j$1] === null) j$1--;
				return j$1 >= 0 && val[j$1] === child;
			} else if (val) return false;
		}
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/token-map.js
var require_token_map = __commonJS({ "node_modules/@babel/generator/lib/token-map.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenMap = void 0;
	var _t$28 = require_lib$4();
	const { traverseFast: traverseFast$1, VISITOR_KEYS: VISITOR_KEYS$5 } = _t$28;
	var TokenMap = class {
		constructor(ast, tokens$3, source) {
			this._tokens = void 0;
			this._source = void 0;
			this._nodesToTokenIndexes = new Map();
			this._nodesOccurrencesCountCache = new Map();
			this._tokensCache = new Map();
			this._tokens = tokens$3;
			this._source = source;
			traverseFast$1(ast, (node) => {
				const indexes = this._getTokensIndexesOfNode(node);
				if (indexes.length > 0) this._nodesToTokenIndexes.set(node, indexes);
			});
			this._tokensCache = null;
		}
		has(node) {
			return this._nodesToTokenIndexes.has(node);
		}
		getIndexes(node) {
			return this._nodesToTokenIndexes.get(node);
		}
		find(node, condition) {
			const indexes = this._nodesToTokenIndexes.get(node);
			if (indexes) for (let k$1 = 0; k$1 < indexes.length; k$1++) {
				const index$1 = indexes[k$1];
				const tok = this._tokens[index$1];
				if (condition(tok, index$1)) return tok;
			}
			return null;
		}
		findLastIndex(node, condition) {
			const indexes = this._nodesToTokenIndexes.get(node);
			if (indexes) for (let k$1 = indexes.length - 1; k$1 >= 0; k$1--) {
				const index$1 = indexes[k$1];
				const tok = this._tokens[index$1];
				if (condition(tok, index$1)) return index$1;
			}
			return -1;
		}
		findMatching(node, test, occurrenceCount = 0) {
			const indexes = this._nodesToTokenIndexes.get(node);
			if (indexes) {
				let i$6 = 0;
				const count = occurrenceCount;
				if (count > 1) {
					const cache$3 = this._nodesOccurrencesCountCache.get(node);
					if (cache$3 && cache$3.test === test && cache$3.count < count) {
						i$6 = cache$3.i + 1;
						occurrenceCount -= cache$3.count + 1;
					}
				}
				for (; i$6 < indexes.length; i$6++) {
					const tok = this._tokens[indexes[i$6]];
					if (this.matchesOriginal(tok, test)) {
						if (occurrenceCount === 0) {
							if (count > 0) this._nodesOccurrencesCountCache.set(node, {
								test,
								count,
								i: i$6
							});
							return tok;
						}
						occurrenceCount--;
					}
				}
			}
			return null;
		}
		matchesOriginal(token$1, test) {
			if (token$1.end - token$1.start !== test.length) return false;
			if (token$1.value != null) return token$1.value === test;
			return this._source.startsWith(test, token$1.start);
		}
		startMatches(node, test) {
			const indexes = this._nodesToTokenIndexes.get(node);
			if (!indexes) return false;
			const tok = this._tokens[indexes[0]];
			if (tok.start !== node.start) return false;
			return this.matchesOriginal(tok, test);
		}
		endMatches(node, test) {
			const indexes = this._nodesToTokenIndexes.get(node);
			if (!indexes) return false;
			const tok = this._tokens[indexes[indexes.length - 1]];
			if (tok.end !== node.end) return false;
			return this.matchesOriginal(tok, test);
		}
		_getTokensIndexesOfNode(node) {
			if (node.start == null || node.end == null) return [];
			const { first, last: last$2 } = this._findTokensOfNode(node, 0, this._tokens.length - 1);
			let low = first;
			const children = childrenIterator(node);
			if ((node.type === "ExportNamedDeclaration" || node.type === "ExportDefaultDeclaration") && node.declaration && node.declaration.type === "ClassDeclaration") children.next();
			const indexes = [];
			for (const child of children) {
				if (child == null) continue;
				if (child.start == null || child.end == null) continue;
				const childTok = this._findTokensOfNode(child, low, last$2);
				const high = childTok.first;
				for (let k$1 = low; k$1 < high; k$1++) indexes.push(k$1);
				low = childTok.last + 1;
			}
			for (let k$1 = low; k$1 <= last$2; k$1++) indexes.push(k$1);
			return indexes;
		}
		_findTokensOfNode(node, low, high) {
			const cached = this._tokensCache.get(node);
			if (cached) return cached;
			const first = this._findFirstTokenOfNode(node.start, low, high);
			const last$2 = this._findLastTokenOfNode(node.end, first, high);
			this._tokensCache.set(node, {
				first,
				last: last$2
			});
			return {
				first,
				last: last$2
			};
		}
		_findFirstTokenOfNode(start, low, high) {
			while (low <= high) {
				const mid = high + low >> 1;
				if (start < this._tokens[mid].start) high = mid - 1;
				else if (start > this._tokens[mid].start) low = mid + 1;
				else return mid;
			}
			return low;
		}
		_findLastTokenOfNode(end, low, high) {
			while (low <= high) {
				const mid = high + low >> 1;
				if (end < this._tokens[mid].end) high = mid - 1;
				else if (end > this._tokens[mid].end) low = mid + 1;
				else return mid;
			}
			return high;
		}
	};
	exports.TokenMap = TokenMap;
	function* childrenIterator(node) {
		if (node.type === "TemplateLiteral") {
			yield node.quasis[0];
			for (let i$6 = 1; i$6 < node.quasis.length; i$6++) {
				yield node.expressions[i$6 - 1];
				yield node.quasis[i$6];
			}
			return;
		}
		const keys$1 = VISITOR_KEYS$5[node.type];
		for (const key of keys$1) {
			const child = node[key];
			if (!child) continue;
			if (Array.isArray(child)) yield* child;
			else yield child;
		}
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/template-literals.js
var require_template_literals = __commonJS({ "node_modules/@babel/generator/lib/generators/template-literals.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TaggedTemplateExpression = TaggedTemplateExpression$1;
	exports.TemplateElement = TemplateElement;
	exports.TemplateLiteral = TemplateLiteral$1;
	exports._printTemplate = _printTemplate;
	function TaggedTemplateExpression$1(node) {
		this.print(node.tag);
		this.print(node.typeParameters);
		this.print(node.quasi);
	}
	function TemplateElement() {
		throw new Error("TemplateElement printing is handled in TemplateLiteral");
	}
	function _printTemplate(node, substitutions) {
		const quasis = node.quasis;
		let partRaw = "`";
		for (let i$6 = 0; i$6 < quasis.length - 1; i$6++) {
			partRaw += quasis[i$6].value.raw;
			this.token(partRaw + "${", true);
			this.print(substitutions[i$6]);
			partRaw = "}";
			if (this.tokenMap) {
				const token$1 = this.tokenMap.findMatching(node, "}", i$6);
				if (token$1) this._catchUpTo(token$1.loc.start);
			}
		}
		partRaw += quasis[quasis.length - 1].value.raw;
		this.token(partRaw + "`", true);
	}
	function TemplateLiteral$1(node) {
		this._printTemplate(node, node.expressions);
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/expressions.js
var require_expressions = __commonJS({ "node_modules/@babel/generator/lib/generators/expressions.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression$1;
	exports.AssignmentPattern = AssignmentPattern;
	exports.AwaitExpression = AwaitExpression;
	exports.BindExpression = BindExpression;
	exports.CallExpression = CallExpression$1;
	exports.ConditionalExpression = ConditionalExpression$1;
	exports.Decorator = Decorator;
	exports.DoExpression = DoExpression;
	exports.EmptyStatement = EmptyStatement;
	exports.ExpressionStatement = ExpressionStatement;
	exports.Import = Import;
	exports.MemberExpression = MemberExpression;
	exports.MetaProperty = MetaProperty;
	exports.ModuleExpression = ModuleExpression;
	exports.NewExpression = NewExpression$1;
	exports.OptionalCallExpression = OptionalCallExpression;
	exports.OptionalMemberExpression = OptionalMemberExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression$1;
	exports.PrivateName = PrivateName;
	exports.SequenceExpression = SequenceExpression$1;
	exports.Super = Super;
	exports.ThisExpression = ThisExpression;
	exports.UnaryExpression = UnaryExpression$1;
	exports.UpdateExpression = UpdateExpression$1;
	exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
	exports.YieldExpression = YieldExpression;
	exports._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;
	var _t$27 = require_lib$4();
	var _index$12 = require_node();
	const { isCallExpression: isCallExpression$2, isLiteral: isLiteral$1, isMemberExpression, isNewExpression: isNewExpression$1, isPattern } = _t$27;
	function UnaryExpression$1(node) {
		const { operator: operator$1 } = node;
		if (operator$1 === "void" || operator$1 === "delete" || operator$1 === "typeof" || operator$1 === "throw") {
			this.word(operator$1);
			this.space();
		} else this.token(operator$1);
		this.print(node.argument);
	}
	function DoExpression(node) {
		if (node.async) {
			this.word("async", true);
			this.space();
		}
		this.word("do");
		this.space();
		this.print(node.body);
	}
	function ParenthesizedExpression$1(node) {
		this.tokenChar(40);
		const exit = this.enterDelimited();
		this.print(node.expression);
		exit();
		this.rightParens(node);
	}
	function UpdateExpression$1(node) {
		if (node.prefix) {
			this.token(node.operator);
			this.print(node.argument);
		} else {
			this.print(node.argument, true);
			this.token(node.operator);
		}
	}
	function ConditionalExpression$1(node) {
		this.print(node.test);
		this.space();
		this.tokenChar(63);
		this.space();
		this.print(node.consequent);
		this.space();
		this.tokenChar(58);
		this.space();
		this.print(node.alternate);
	}
	function NewExpression$1(node, parent) {
		this.word("new");
		this.space();
		this.print(node.callee);
		if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression$2(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression$1(parent)) return;
		this.print(node.typeArguments);
		this.print(node.typeParameters);
		if (node.optional) this.token("?.");
		if (node.arguments.length === 0 && this.tokenMap && !this.tokenMap.endMatches(node, ")")) return;
		this.tokenChar(40);
		const exit = this.enterDelimited();
		this.printList(node.arguments, this.shouldPrintTrailingComma(")"));
		exit();
		this.rightParens(node);
	}
	function SequenceExpression$1(node) {
		this.printList(node.expressions);
	}
	function ThisExpression() {
		this.word("this");
	}
	function Super() {
		this.word("super");
	}
	function _shouldPrintDecoratorsBeforeExport(node) {
		if (typeof this.format.decoratorsBeforeExport === "boolean") return this.format.decoratorsBeforeExport;
		return typeof node.start === "number" && node.start === node.declaration.start;
	}
	function Decorator(node) {
		this.tokenChar(64);
		this.print(node.expression);
		this.newline();
	}
	function OptionalMemberExpression(node) {
		let { computed } = node;
		const { optional, property } = node;
		this.print(node.object);
		if (!computed && isMemberExpression(property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
		if (isLiteral$1(property) && typeof property.value === "number") computed = true;
		if (optional) this.token("?.");
		if (computed) {
			this.tokenChar(91);
			this.print(property);
			this.tokenChar(93);
		} else {
			if (!optional) this.tokenChar(46);
			this.print(property);
		}
	}
	function OptionalCallExpression(node) {
		this.print(node.callee);
		this.print(node.typeParameters);
		if (node.optional) this.token("?.");
		this.print(node.typeArguments);
		this.tokenChar(40);
		const exit = this.enterDelimited();
		this.printList(node.arguments);
		exit();
		this.rightParens(node);
	}
	function CallExpression$1(node) {
		this.print(node.callee);
		this.print(node.typeArguments);
		this.print(node.typeParameters);
		this.tokenChar(40);
		const exit = this.enterDelimited();
		this.printList(node.arguments, this.shouldPrintTrailingComma(")"));
		exit();
		this.rightParens(node);
	}
	function Import() {
		this.word("import");
	}
	function AwaitExpression(node) {
		this.word("await");
		if (node.argument) {
			this.space();
			this.printTerminatorless(node.argument);
		}
	}
	function YieldExpression(node) {
		this.word("yield", true);
		if (node.delegate) {
			this.tokenChar(42);
			if (node.argument) {
				this.space();
				this.print(node.argument);
			}
		} else if (node.argument) {
			this.space();
			this.printTerminatorless(node.argument);
		}
	}
	function EmptyStatement() {
		this.semicolon(true);
	}
	function ExpressionStatement(node) {
		this.tokenContext |= _index$12.TokenContext.expressionStatement;
		this.print(node.expression);
		this.semicolon();
	}
	function AssignmentPattern(node) {
		this.print(node.left);
		if (node.left.type === "Identifier" || isPattern(node.left)) {
			if (node.left.optional) this.tokenChar(63);
			this.print(node.left.typeAnnotation);
		}
		this.space();
		this.tokenChar(61);
		this.space();
		this.print(node.right);
	}
	function AssignmentExpression$1(node) {
		this.print(node.left);
		this.space();
		if (node.operator === "in" || node.operator === "instanceof") this.word(node.operator);
		else {
			this.token(node.operator);
			this._endsWithDiv = node.operator === "/";
		}
		this.space();
		this.print(node.right);
	}
	function BindExpression(node) {
		this.print(node.object);
		this.token("::");
		this.print(node.callee);
	}
	function MemberExpression(node) {
		this.print(node.object);
		if (!node.computed && isMemberExpression(node.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
		let computed = node.computed;
		if (isLiteral$1(node.property) && typeof node.property.value === "number") computed = true;
		if (computed) {
			const exit = this.enterDelimited();
			this.tokenChar(91);
			this.print(node.property);
			this.tokenChar(93);
			exit();
		} else {
			this.tokenChar(46);
			this.print(node.property);
		}
	}
	function MetaProperty(node) {
		this.print(node.meta);
		this.tokenChar(46);
		this.print(node.property);
	}
	function PrivateName(node) {
		this.tokenChar(35);
		this.print(node.id);
	}
	function V8IntrinsicIdentifier(node) {
		this.tokenChar(37);
		this.word(node.name);
	}
	function ModuleExpression(node) {
		this.word("module", true);
		this.space();
		this.tokenChar(123);
		this.indent();
		const { body } = node;
		if (body.body.length || body.directives.length) this.newline();
		this.print(body);
		this.dedent();
		this.rightBrace(node);
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/statements.js
var require_statements = __commonJS({ "node_modules/@babel/generator/lib/generators/statements.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BreakStatement = BreakStatement;
	exports.CatchClause = CatchClause;
	exports.ContinueStatement = ContinueStatement;
	exports.DebuggerStatement = DebuggerStatement;
	exports.DoWhileStatement = DoWhileStatement;
	exports.ForOfStatement = exports.ForInStatement = void 0;
	exports.ForStatement = ForStatement;
	exports.IfStatement = IfStatement;
	exports.LabeledStatement = LabeledStatement;
	exports.ReturnStatement = ReturnStatement;
	exports.SwitchCase = SwitchCase;
	exports.SwitchStatement = SwitchStatement;
	exports.ThrowStatement = ThrowStatement;
	exports.TryStatement = TryStatement;
	exports.VariableDeclaration = VariableDeclaration;
	exports.VariableDeclarator = VariableDeclarator$1;
	exports.WhileStatement = WhileStatement;
	exports.WithStatement = WithStatement;
	var _t$26 = require_lib$4();
	var _index$11 = require_node();
	const { isFor, isForStatement, isIfStatement: isIfStatement$1, isStatement: isStatement$6 } = _t$26;
	function WithStatement(node) {
		this.word("with");
		this.space();
		this.tokenChar(40);
		this.print(node.object);
		this.tokenChar(41);
		this.printBlock(node);
	}
	function IfStatement(node) {
		this.word("if");
		this.space();
		this.tokenChar(40);
		this.print(node.test);
		this.tokenChar(41);
		this.space();
		const needsBlock = node.alternate && isIfStatement$1(getLastStatement(node.consequent));
		if (needsBlock) {
			this.tokenChar(123);
			this.newline();
			this.indent();
		}
		this.printAndIndentOnComments(node.consequent);
		if (needsBlock) {
			this.dedent();
			this.newline();
			this.tokenChar(125);
		}
		if (node.alternate) {
			if (this.endsWith(125)) this.space();
			this.word("else");
			this.space();
			this.printAndIndentOnComments(node.alternate);
		}
	}
	function getLastStatement(statement$2) {
		const { body } = statement$2;
		if (isStatement$6(body) === false) return statement$2;
		return getLastStatement(body);
	}
	function ForStatement(node) {
		this.word("for");
		this.space();
		this.tokenChar(40);
		{
			const exit = this.enterForStatementInit();
			this.tokenContext |= _index$11.TokenContext.forHead;
			this.print(node.init);
			exit();
		}
		this.tokenChar(59);
		if (node.test) {
			this.space();
			this.print(node.test);
		}
		this.token(";", false, 1);
		if (node.update) {
			this.space();
			this.print(node.update);
		}
		this.tokenChar(41);
		this.printBlock(node);
	}
	function WhileStatement(node) {
		this.word("while");
		this.space();
		this.tokenChar(40);
		this.print(node.test);
		this.tokenChar(41);
		this.printBlock(node);
	}
	function ForXStatement(node) {
		this.word("for");
		this.space();
		const isForOf = node.type === "ForOfStatement";
		if (isForOf && node.await) {
			this.word("await");
			this.space();
		}
		this.noIndentInnerCommentsHere();
		this.tokenChar(40);
		{
			const exit = isForOf ? null : this.enterForStatementInit();
			this.tokenContext |= isForOf ? _index$11.TokenContext.forOfHead : _index$11.TokenContext.forInHead;
			this.print(node.left);
			exit?.();
		}
		this.space();
		this.word(isForOf ? "of" : "in");
		this.space();
		this.print(node.right);
		this.tokenChar(41);
		this.printBlock(node);
	}
	const ForInStatement = exports.ForInStatement = ForXStatement;
	const ForOfStatement = exports.ForOfStatement = ForXStatement;
	function DoWhileStatement(node) {
		this.word("do");
		this.space();
		this.print(node.body);
		this.space();
		this.word("while");
		this.space();
		this.tokenChar(40);
		this.print(node.test);
		this.tokenChar(41);
		this.semicolon();
	}
	function printStatementAfterKeyword(printer$1, node) {
		if (node) {
			printer$1.space();
			printer$1.printTerminatorless(node);
		}
		printer$1.semicolon();
	}
	function BreakStatement(node) {
		this.word("break");
		printStatementAfterKeyword(this, node.label);
	}
	function ContinueStatement(node) {
		this.word("continue");
		printStatementAfterKeyword(this, node.label);
	}
	function ReturnStatement(node) {
		this.word("return");
		printStatementAfterKeyword(this, node.argument);
	}
	function ThrowStatement(node) {
		this.word("throw");
		printStatementAfterKeyword(this, node.argument);
	}
	function LabeledStatement(node) {
		this.print(node.label);
		this.tokenChar(58);
		this.space();
		this.print(node.body);
	}
	function TryStatement(node) {
		this.word("try");
		this.space();
		this.print(node.block);
		this.space();
		if (node.handlers) this.print(node.handlers[0]);
		else this.print(node.handler);
		if (node.finalizer) {
			this.space();
			this.word("finally");
			this.space();
			this.print(node.finalizer);
		}
	}
	function CatchClause(node) {
		this.word("catch");
		this.space();
		if (node.param) {
			this.tokenChar(40);
			this.print(node.param);
			this.print(node.param.typeAnnotation);
			this.tokenChar(41);
			this.space();
		}
		this.print(node.body);
	}
	function SwitchStatement(node) {
		this.word("switch");
		this.space();
		this.tokenChar(40);
		this.print(node.discriminant);
		this.tokenChar(41);
		this.space();
		this.tokenChar(123);
		this.printSequence(node.cases, true, void 0, function addNewlines(leading, cas) {
			if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
		});
		this.rightBrace(node);
	}
	function SwitchCase(node) {
		if (node.test) {
			this.word("case");
			this.space();
			this.print(node.test);
			this.tokenChar(58);
		} else {
			this.word("default");
			this.tokenChar(58);
		}
		if (node.consequent.length) {
			this.newline();
			this.printSequence(node.consequent, true);
		}
	}
	function DebuggerStatement() {
		this.word("debugger");
		this.semicolon();
	}
	function VariableDeclaration(node, parent) {
		if (node.declare) {
			this.word("declare");
			this.space();
		}
		const { kind } = node;
		if (kind === "await using") {
			this.word("await");
			this.space();
			this.word("using", true);
		} else this.word(kind, kind === "using");
		this.space();
		let hasInits = false;
		if (!isFor(parent)) {
			for (const declar of node.declarations) if (declar.init) hasInits = true;
		}
		this.printList(node.declarations, void 0, void 0, node.declarations.length > 1, hasInits ? function(occurrenceCount) {
			this.token(",", false, occurrenceCount);
			this.newline();
		} : void 0);
		if (isFor(parent)) {
			if (isForStatement(parent)) {
				if (parent.init === node) return;
			} else if (parent.left === node) return;
		}
		this.semicolon();
	}
	function VariableDeclarator$1(node) {
		this.print(node.id);
		if (node.definite) this.tokenChar(33);
		this.print(node.id.typeAnnotation);
		if (node.init) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.init);
		}
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/classes.js
var require_classes = __commonJS({ "node_modules/@babel/generator/lib/generators/classes.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ClassAccessorProperty = ClassAccessorProperty;
	exports.ClassBody = ClassBody;
	exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
	exports.ClassMethod = ClassMethod;
	exports.ClassPrivateMethod = ClassPrivateMethod;
	exports.ClassPrivateProperty = ClassPrivateProperty;
	exports.ClassProperty = ClassProperty;
	exports.StaticBlock = StaticBlock;
	exports._classMethodHead = _classMethodHead;
	var _t$25 = require_lib$4();
	const { isExportDefaultDeclaration, isExportNamedDeclaration: isExportNamedDeclaration$1 } = _t$25;
	function ClassDeclaration(node, parent) {
		const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration$1(parent);
		if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) this.printJoin(node.decorators);
		if (node.declare) {
			this.word("declare");
			this.space();
		}
		if (node.abstract) {
			this.word("abstract");
			this.space();
		}
		this.word("class");
		if (node.id) {
			this.space();
			this.print(node.id);
		}
		this.print(node.typeParameters);
		if (node.superClass) {
			this.space();
			this.word("extends");
			this.space();
			this.print(node.superClass);
			this.print(node.superTypeParameters);
		}
		if (node.implements) {
			this.space();
			this.word("implements");
			this.space();
			this.printList(node.implements);
		}
		this.space();
		this.print(node.body);
	}
	function ClassBody(node) {
		this.tokenChar(123);
		if (node.body.length === 0) this.tokenChar(125);
		else {
			this.newline();
			const separator = classBodyEmptySemicolonsPrinter(this, node);
			separator?.(-1);
			const exit = this.enterDelimited();
			this.printJoin(node.body, true, true, separator, true);
			exit();
			if (!this.endsWith(10)) this.newline();
			this.rightBrace(node);
		}
	}
	function classBodyEmptySemicolonsPrinter(printer$1, node) {
		if (!printer$1.tokenMap || node.start == null || node.end == null) return null;
		const indexes = printer$1.tokenMap.getIndexes(node);
		if (!indexes) return null;
		let k$1 = 1;
		let occurrenceCount = 0;
		let nextLocIndex = 0;
		const advanceNextLocIndex = () => {
			while (nextLocIndex < node.body.length && node.body[nextLocIndex].start == null) nextLocIndex++;
		};
		advanceNextLocIndex();
		return (i$6) => {
			if (nextLocIndex <= i$6) {
				nextLocIndex = i$6 + 1;
				advanceNextLocIndex();
			}
			const end = nextLocIndex === node.body.length ? node.end : node.body[nextLocIndex].start;
			let tok;
			while (k$1 < indexes.length && printer$1.tokenMap.matchesOriginal(tok = printer$1._tokens[indexes[k$1]], ";") && tok.start < end) {
				printer$1.token(";", void 0, occurrenceCount++);
				k$1++;
			}
		};
	}
	function ClassProperty(node) {
		this.printJoin(node.decorators);
		if (!node.static && !this.format.preserveFormat) {
			var _node$key$loc;
			const endLine = (_node$key$loc = node.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;
			if (endLine) this.catchUp(endLine);
		}
		this.tsPrintClassMemberModifiers(node);
		if (node.computed) {
			this.tokenChar(91);
			this.print(node.key);
			this.tokenChar(93);
		} else {
			this._variance(node);
			this.print(node.key);
		}
		if (node.optional) this.tokenChar(63);
		if (node.definite) this.tokenChar(33);
		this.print(node.typeAnnotation);
		if (node.value) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.value);
		}
		this.semicolon();
	}
	function ClassAccessorProperty(node) {
		var _node$key$loc2;
		this.printJoin(node.decorators);
		const endLine = (_node$key$loc2 = node.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;
		if (endLine) this.catchUp(endLine);
		this.tsPrintClassMemberModifiers(node);
		this.word("accessor", true);
		this.space();
		if (node.computed) {
			this.tokenChar(91);
			this.print(node.key);
			this.tokenChar(93);
		} else {
			this._variance(node);
			this.print(node.key);
		}
		if (node.optional) this.tokenChar(63);
		if (node.definite) this.tokenChar(33);
		this.print(node.typeAnnotation);
		if (node.value) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.value);
		}
		this.semicolon();
	}
	function ClassPrivateProperty(node) {
		this.printJoin(node.decorators);
		this.tsPrintClassMemberModifiers(node);
		this.print(node.key);
		if (node.optional) this.tokenChar(63);
		if (node.definite) this.tokenChar(33);
		this.print(node.typeAnnotation);
		if (node.value) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.value);
		}
		this.semicolon();
	}
	function ClassMethod(node) {
		this._classMethodHead(node);
		this.space();
		this.print(node.body);
	}
	function ClassPrivateMethod(node) {
		this._classMethodHead(node);
		this.space();
		this.print(node.body);
	}
	function _classMethodHead(node) {
		this.printJoin(node.decorators);
		if (!this.format.preserveFormat) {
			var _node$key$loc3;
			const endLine = (_node$key$loc3 = node.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;
			if (endLine) this.catchUp(endLine);
		}
		this.tsPrintClassMemberModifiers(node);
		this._methodHead(node);
	}
	function StaticBlock(node) {
		this.word("static");
		this.space();
		this.tokenChar(123);
		if (node.body.length === 0) this.tokenChar(125);
		else {
			this.newline();
			this.printSequence(node.body, true);
			this.rightBrace(node);
		}
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/methods.js
var require_methods = __commonJS({ "node_modules/@babel/generator/lib/generators/methods.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	exports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;
	exports._functionHead = _functionHead;
	exports._methodHead = _methodHead;
	exports._param = _param;
	exports._parameters = _parameters;
	exports._params = _params;
	exports._predicate = _predicate;
	exports._shouldPrintArrowParamsParens = _shouldPrintArrowParamsParens;
	var _t$24 = require_lib$4();
	var _index$10 = require_node();
	const { isIdentifier: isIdentifier$7 } = _t$24;
	function _params(node, idNode, parentNode) {
		this.print(node.typeParameters);
		const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
		if (nameInfo) this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
		this.tokenChar(40);
		this._parameters(node.params, ")");
		const noLineTerminator = node.type === "ArrowFunctionExpression";
		this.print(node.returnType, noLineTerminator);
		this._noLineTerminator = noLineTerminator;
	}
	function _parameters(parameters, endToken) {
		const exit = this.enterDelimited();
		const trailingComma = this.shouldPrintTrailingComma(endToken);
		const paramLength = parameters.length;
		for (let i$6 = 0; i$6 < paramLength; i$6++) {
			this._param(parameters[i$6]);
			if (trailingComma || i$6 < paramLength - 1) {
				this.token(",", null, i$6);
				this.space();
			}
		}
		this.token(endToken);
		exit();
	}
	function _param(parameter) {
		this.printJoin(parameter.decorators);
		this.print(parameter);
		if (parameter.optional) this.tokenChar(63);
		this.print(parameter.typeAnnotation);
	}
	function _methodHead(node) {
		const kind = node.kind;
		const key = node.key;
		if (kind === "get" || kind === "set") {
			this.word(kind);
			this.space();
		}
		if (node.async) {
			this.word("async", true);
			this.space();
		}
		if (kind === "method" || kind === "init") {
			if (node.generator) this.tokenChar(42);
		}
		if (node.computed) {
			this.tokenChar(91);
			this.print(key);
			this.tokenChar(93);
		} else this.print(key);
		if (node.optional) this.tokenChar(63);
		this._params(node, node.computed && node.key.type !== "StringLiteral" ? void 0 : node.key, void 0);
	}
	function _predicate(node, noLineTerminatorAfter) {
		if (node.predicate) {
			if (!node.returnType) this.tokenChar(58);
			this.space();
			this.print(node.predicate, noLineTerminatorAfter);
		}
	}
	function _functionHead(node, parent) {
		if (node.async) {
			this.word("async");
			if (!this.format.preserveFormat) this._endsWithInnerRaw = false;
			this.space();
		}
		this.word("function");
		if (node.generator) {
			if (!this.format.preserveFormat) this._endsWithInnerRaw = false;
			this.tokenChar(42);
		}
		this.space();
		if (node.id) this.print(node.id);
		this._params(node, node.id, parent);
		if (node.type !== "TSDeclareFunction") this._predicate(node);
	}
	function FunctionExpression(node, parent) {
		this._functionHead(node, parent);
		this.space();
		this.print(node.body);
	}
	function ArrowFunctionExpression(node, parent) {
		if (node.async) {
			this.word("async", true);
			this.space();
		}
		if (this._shouldPrintArrowParamsParens(node)) this._params(node, void 0, parent);
		else this.print(node.params[0], true);
		this._predicate(node, true);
		this.space();
		this.printInnerComments();
		this.token("=>");
		this.space();
		this.tokenContext |= _index$10.TokenContext.arrowBody;
		this.print(node.body);
	}
	function _shouldPrintArrowParamsParens(node) {
		var _firstParam$leadingCo, _firstParam$trailingC;
		if (node.params.length !== 1) return true;
		if (node.typeParameters || node.returnType || node.predicate) return true;
		const firstParam = node.params[0];
		if (!isIdentifier$7(firstParam) || firstParam.typeAnnotation || firstParam.optional || (_firstParam$leadingCo = firstParam.leadingComments) != null && _firstParam$leadingCo.length || (_firstParam$trailingC = firstParam.trailingComments) != null && _firstParam$trailingC.length) return true;
		if (this.tokenMap) {
			if (node.loc == null) return true;
			if (this.tokenMap.findMatching(node, "(") !== null) return true;
			const arrowToken = this.tokenMap.findMatching(node, "=>");
			if ((arrowToken == null ? void 0 : arrowToken.loc) == null) return true;
			return arrowToken.loc.start.line !== node.loc.start.line;
		}
		if (this.format.retainLines) return true;
		return false;
	}
	function _getFuncIdName(idNode, parent) {
		let id$4 = idNode;
		if (!id$4 && parent) {
			const parentType = parent.type;
			if (parentType === "VariableDeclarator") id$4 = parent.id;
			else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") id$4 = parent.left;
			else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {
				if (!parent.computed || parent.key.type === "StringLiteral") id$4 = parent.key;
			} else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") id$4 = parent.key;
		}
		if (!id$4) return;
		let nameInfo;
		if (id$4.type === "Identifier") {
			var _id$loc, _id$loc2;
			nameInfo = {
				pos: (_id$loc = id$4.loc) == null ? void 0 : _id$loc.start,
				name: ((_id$loc2 = id$4.loc) == null ? void 0 : _id$loc2.identifierName) || id$4.name
			};
		} else if (id$4.type === "PrivateName") {
			var _id$loc3;
			nameInfo = {
				pos: (_id$loc3 = id$4.loc) == null ? void 0 : _id$loc3.start,
				name: "#" + id$4.id.name
			};
		} else if (id$4.type === "StringLiteral") {
			var _id$loc4;
			nameInfo = {
				pos: (_id$loc4 = id$4.loc) == null ? void 0 : _id$loc4.start,
				name: id$4.value
			};
		}
		return nameInfo;
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/modules.js
var require_modules = __commonJS({ "node_modules/@babel/generator/lib/generators/modules.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ExportAllDeclaration = ExportAllDeclaration;
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	exports.ExportSpecifier = ExportSpecifier;
	exports.ImportAttribute = ImportAttribute;
	exports.ImportDeclaration = ImportDeclaration;
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	exports.ImportExpression = ImportExpression;
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	exports.ImportSpecifier = ImportSpecifier;
	exports._printAttributes = _printAttributes;
	var _t$23 = require_lib$4();
	var _index$9 = require_node();
	const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement: isStatement$5 } = _t$23;
	function ImportSpecifier(node) {
		if (node.importKind === "type" || node.importKind === "typeof") {
			this.word(node.importKind);
			this.space();
		}
		this.print(node.imported);
		if (node.local && node.local.name !== node.imported.name) {
			this.space();
			this.word("as");
			this.space();
			this.print(node.local);
		}
	}
	function ImportDefaultSpecifier(node) {
		this.print(node.local);
	}
	function ExportDefaultSpecifier(node) {
		this.print(node.exported);
	}
	function ExportSpecifier(node) {
		if (node.exportKind === "type") {
			this.word("type");
			this.space();
		}
		this.print(node.local);
		if (node.exported && node.local.name !== node.exported.name) {
			this.space();
			this.word("as");
			this.space();
			this.print(node.exported);
		}
	}
	function ExportNamespaceSpecifier(node) {
		this.tokenChar(42);
		this.space();
		this.word("as");
		this.space();
		this.print(node.exported);
	}
	let warningShown = false;
	function _printAttributes(node, hasPreviousBrace) {
		var _node$extra;
		const { importAttributesKeyword } = this.format;
		const { attributes, assertions } = node;
		if (attributes && !importAttributesKeyword && node.extra && (node.extra.deprecatedAssertSyntax || node.extra.deprecatedWithLegacySyntax) && !warningShown) {
			warningShown = true;
			console.warn(`\
You are using import attributes, without specifying the desired output syntax.
Please specify the "importAttributesKeyword" generator option, whose value can be one of:
 - "with"        : \`import { a } from "b" with { type: "json" };\`
 - "assert"      : \`import { a } from "b" assert { type: "json" };\`
 - "with-legacy" : \`import { a } from "b" with type: "json";\`
`);
		}
		const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;
		this.word(useAssertKeyword ? "assert" : "with");
		this.space();
		if (!useAssertKeyword && (importAttributesKeyword === "with-legacy" || !importAttributesKeyword && (_node$extra = node.extra) != null && _node$extra.deprecatedWithLegacySyntax)) {
			this.printList(attributes || assertions);
			return;
		}
		const occurrenceCount = hasPreviousBrace ? 1 : 0;
		this.token("{", null, occurrenceCount);
		this.space();
		this.printList(attributes || assertions, this.shouldPrintTrailingComma("}"));
		this.space();
		this.token("}", null, occurrenceCount);
	}
	function ExportAllDeclaration(node) {
		var _node$attributes, _node$assertions;
		this.word("export");
		this.space();
		if (node.exportKind === "type") {
			this.word("type");
			this.space();
		}
		this.tokenChar(42);
		this.space();
		this.word("from");
		this.space();
		if ((_node$attributes = node.attributes) != null && _node$attributes.length || (_node$assertions = node.assertions) != null && _node$assertions.length) {
			this.print(node.source, true);
			this.space();
			this._printAttributes(node, false);
		} else this.print(node.source);
		this.semicolon();
	}
	function maybePrintDecoratorsBeforeExport(printer$1, node) {
		if (isClassDeclaration(node.declaration) && printer$1._shouldPrintDecoratorsBeforeExport(node)) printer$1.printJoin(node.declaration.decorators);
	}
	function ExportNamedDeclaration(node) {
		maybePrintDecoratorsBeforeExport(this, node);
		this.word("export");
		this.space();
		if (node.declaration) {
			const declar = node.declaration;
			this.print(declar);
			if (!isStatement$5(declar)) this.semicolon();
		} else {
			if (node.exportKind === "type") {
				this.word("type");
				this.space();
			}
			const specifiers = node.specifiers.slice(0);
			let hasSpecial = false;
			for (;;) {
				const first = specifiers[0];
				if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
					hasSpecial = true;
					this.print(specifiers.shift());
					if (specifiers.length) {
						this.tokenChar(44);
						this.space();
					}
				} else break;
			}
			let hasBrace = false;
			if (specifiers.length || !specifiers.length && !hasSpecial) {
				hasBrace = true;
				this.tokenChar(123);
				if (specifiers.length) {
					this.space();
					this.printList(specifiers, this.shouldPrintTrailingComma("}"));
					this.space();
				}
				this.tokenChar(125);
			}
			if (node.source) {
				var _node$attributes2, _node$assertions2;
				this.space();
				this.word("from");
				this.space();
				if ((_node$attributes2 = node.attributes) != null && _node$attributes2.length || (_node$assertions2 = node.assertions) != null && _node$assertions2.length) {
					this.print(node.source, true);
					this.space();
					this._printAttributes(node, hasBrace);
				} else this.print(node.source);
			}
			this.semicolon();
		}
	}
	function ExportDefaultDeclaration(node) {
		maybePrintDecoratorsBeforeExport(this, node);
		this.word("export");
		this.noIndentInnerCommentsHere();
		this.space();
		this.word("default");
		this.space();
		this.tokenContext |= _index$9.TokenContext.exportDefault;
		const declar = node.declaration;
		this.print(declar);
		if (!isStatement$5(declar)) this.semicolon();
	}
	function ImportDeclaration(node) {
		var _node$attributes3, _node$assertions3;
		this.word("import");
		this.space();
		const isTypeKind = node.importKind === "type" || node.importKind === "typeof";
		if (isTypeKind) {
			this.noIndentInnerCommentsHere();
			this.word(node.importKind);
			this.space();
		} else if (node.module) {
			this.noIndentInnerCommentsHere();
			this.word("module");
			this.space();
		} else if (node.phase) {
			this.noIndentInnerCommentsHere();
			this.word(node.phase);
			this.space();
		}
		const specifiers = node.specifiers.slice(0);
		const hasSpecifiers = !!specifiers.length;
		while (hasSpecifiers) {
			const first = specifiers[0];
			if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
				this.print(specifiers.shift());
				if (specifiers.length) {
					this.tokenChar(44);
					this.space();
				}
			} else break;
		}
		let hasBrace = false;
		if (specifiers.length) {
			hasBrace = true;
			this.tokenChar(123);
			this.space();
			this.printList(specifiers, this.shouldPrintTrailingComma("}"));
			this.space();
			this.tokenChar(125);
		} else if (isTypeKind && !hasSpecifiers) {
			hasBrace = true;
			this.tokenChar(123);
			this.tokenChar(125);
		}
		if (hasSpecifiers || isTypeKind) {
			this.space();
			this.word("from");
			this.space();
		}
		if ((_node$attributes3 = node.attributes) != null && _node$attributes3.length || (_node$assertions3 = node.assertions) != null && _node$assertions3.length) {
			this.print(node.source, true);
			this.space();
			this._printAttributes(node, hasBrace);
		} else this.print(node.source);
		this.semicolon();
	}
	function ImportAttribute(node) {
		this.print(node.key);
		this.tokenChar(58);
		this.space();
		this.print(node.value);
	}
	function ImportNamespaceSpecifier(node) {
		this.tokenChar(42);
		this.space();
		this.word("as");
		this.space();
		this.print(node.local);
	}
	function ImportExpression(node) {
		this.word("import");
		if (node.phase) {
			this.tokenChar(46);
			this.word(node.phase);
		}
		this.tokenChar(40);
		this.print(node.source);
		if (node.options != null) {
			this.tokenChar(44);
			this.space();
			this.print(node.options);
		}
		this.tokenChar(41);
	}
} });

//#endregion
//#region node_modules/jsesc/jsesc.js
var require_jsesc = __commonJS({ "node_modules/jsesc/jsesc.js"(exports, module) {
	const object = {};
	const hasOwnProperty$1 = object.hasOwnProperty;
	const forOwn = (object$2, callback) => {
		for (const key in object$2) if (hasOwnProperty$1.call(object$2, key)) callback(key, object$2[key]);
	};
	const extend$1 = (destination, source) => {
		if (!source) return destination;
		forOwn(source, (key, value) => {
			destination[key] = value;
		});
		return destination;
	};
	const forEach = (array, callback) => {
		const length = array.length;
		let index$1 = -1;
		while (++index$1 < length) callback(array[index$1]);
	};
	const fourHexEscape = (hex$3) => {
		return "\\u" + ("0000" + hex$3).slice(-4);
	};
	const hexadecimal = (code$1, lowercase) => {
		let hexadecimal$1 = code$1.toString(16);
		if (lowercase) return hexadecimal$1;
		return hexadecimal$1.toUpperCase();
	};
	const toString = object.toString;
	const isArray$2 = Array.isArray;
	const isBuffer = (value) => {
		return typeof Buffer === "function" && Buffer.isBuffer(value);
	};
	const isObject$1 = (value) => {
		return toString.call(value) == "[object Object]";
	};
	const isString = (value) => {
		return typeof value == "string" || toString.call(value) == "[object String]";
	};
	const isNumber = (value) => {
		return typeof value == "number" || toString.call(value) == "[object Number]";
	};
	const isBigInt = (value) => {
		return typeof value == "bigint";
	};
	const isFunction$3 = (value) => {
		return typeof value == "function";
	};
	const isMap = (value) => {
		return toString.call(value) == "[object Map]";
	};
	const isSet = (value) => {
		return toString.call(value) == "[object Set]";
	};
	const singleEscapes = {
		"\\": "\\\\",
		"\b": "\\b",
		"\f": "\\f",
		"\n": "\\n",
		"\r": "\\r",
		"	": "\\t"
	};
	const regexSingleEscape = /[\\\b\f\n\r\t]/;
	const regexDigit = /[0-9]/;
	const regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
	const escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
	const escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;
	const jsesc = (argument, options) => {
		const increaseIndentation = () => {
			oldIndent = indent;
			++options.indentLevel;
			indent = options.indent.repeat(options.indentLevel);
		};
		const defaults$2 = {
			"escapeEverything": false,
			"minimal": false,
			"isScriptContext": false,
			"quotes": "single",
			"wrap": false,
			"es6": false,
			"json": false,
			"compact": true,
			"lowercaseHex": false,
			"numbers": "decimal",
			"indent": "	",
			"indentLevel": 0,
			"__inline1__": false,
			"__inline2__": false
		};
		const json = options && options.json;
		if (json) {
			defaults$2.quotes = "double";
			defaults$2.wrap = true;
		}
		options = extend$1(defaults$2, options);
		if (options.quotes != "single" && options.quotes != "double" && options.quotes != "backtick") options.quotes = "single";
		const quote = options.quotes == "double" ? "\"" : options.quotes == "backtick" ? "`" : "'";
		const compact = options.compact;
		const lowercaseHex = options.lowercaseHex;
		let indent = options.indent.repeat(options.indentLevel);
		let oldIndent = "";
		const inline1 = options.__inline1__;
		const inline2 = options.__inline2__;
		const newLine = compact ? "" : "\n";
		let result;
		let isEmpty$1 = true;
		const useBinNumbers = options.numbers == "binary";
		const useOctNumbers = options.numbers == "octal";
		const useDecNumbers = options.numbers == "decimal";
		const useHexNumbers = options.numbers == "hexadecimal";
		if (json && argument && isFunction$3(argument.toJSON)) argument = argument.toJSON();
		if (!isString(argument)) {
			if (isMap(argument)) {
				if (argument.size == 0) return "new Map()";
				if (!compact) {
					options.__inline1__ = true;
					options.__inline2__ = false;
				}
				return "new Map(" + jsesc(Array.from(argument), options) + ")";
			}
			if (isSet(argument)) {
				if (argument.size == 0) return "new Set()";
				return "new Set(" + jsesc(Array.from(argument), options) + ")";
			}
			if (isBuffer(argument)) {
				if (argument.length == 0) return "Buffer.from([])";
				return "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
			}
			if (isArray$2(argument)) {
				result = [];
				options.wrap = true;
				if (inline1) {
					options.__inline1__ = false;
					options.__inline2__ = true;
				}
				if (!inline2) increaseIndentation();
				forEach(argument, (value) => {
					isEmpty$1 = false;
					if (inline2) options.__inline2__ = false;
					result.push((compact || inline2 ? "" : indent) + jsesc(value, options));
				});
				if (isEmpty$1) return "[]";
				if (inline2) return "[" + result.join(", ") + "]";
				return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
			} else if (isNumber(argument) || isBigInt(argument)) {
				if (json) return JSON.stringify(Number(argument));
				let result$1;
				if (useDecNumbers) result$1 = String(argument);
				else if (useHexNumbers) {
					let hexadecimal$1 = argument.toString(16);
					if (!lowercaseHex) hexadecimal$1 = hexadecimal$1.toUpperCase();
					result$1 = "0x" + hexadecimal$1;
				} else if (useBinNumbers) result$1 = "0b" + argument.toString(2);
				else if (useOctNumbers) result$1 = "0o" + argument.toString(8);
				if (isBigInt(argument)) return result$1 + "n";
				return result$1;
			} else if (isBigInt(argument)) {
				if (json) return JSON.stringify(Number(argument));
				return argument + "n";
			} else if (!isObject$1(argument)) {
				if (json) return JSON.stringify(argument) || "null";
				return String(argument);
			} else {
				result = [];
				options.wrap = true;
				increaseIndentation();
				forOwn(argument, (key, value) => {
					isEmpty$1 = false;
					result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value, options));
				});
				if (isEmpty$1) return "{}";
				return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
			}
		}
		const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
		result = argument.replace(regex, (char, pair, lone, quoteChar, index$1, string$3) => {
			if (pair) {
				if (options.minimal) return pair;
				const first = pair.charCodeAt(0);
				const second = pair.charCodeAt(1);
				if (options.es6) {
					const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
					const hex$4 = hexadecimal(codePoint, lowercaseHex);
					return "\\u{" + hex$4 + "}";
				}
				return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
			}
			if (lone) return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
			if (char == "\0" && !json && !regexDigit.test(string$3.charAt(index$1 + 1))) return "\\0";
			if (quoteChar) {
				if (quoteChar == quote || options.escapeEverything) return "\\" + quoteChar;
				return quoteChar;
			}
			if (regexSingleEscape.test(char)) return singleEscapes[char];
			if (options.minimal && !regexWhitespace.test(char)) return char;
			const hex$3 = hexadecimal(char.charCodeAt(0), lowercaseHex);
			if (json || hex$3.length > 2) return fourHexEscape(hex$3);
			return "\\x" + ("00" + hex$3).slice(-2);
		});
		if (quote == "`") result = result.replace(/\$\{/g, "\\${");
		if (options.isScriptContext) result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
		if (options.wrap) result = quote + result + quote;
		return result;
	};
	jsesc.version = "3.0.2";
	module.exports = jsesc;
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/types.js
var require_types = __commonJS({ "node_modules/@babel/generator/lib/generators/types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ArgumentPlaceholder = ArgumentPlaceholder;
	exports.ArrayPattern = exports.ArrayExpression = ArrayExpression$1;
	exports.BigIntLiteral = BigIntLiteral;
	exports.BooleanLiteral = BooleanLiteral$1;
	exports.Identifier = Identifier;
	exports.NullLiteral = NullLiteral$1;
	exports.NumericLiteral = NumericLiteral$1;
	exports.ObjectPattern = exports.ObjectExpression = ObjectExpression$1;
	exports.ObjectMethod = ObjectMethod;
	exports.ObjectProperty = ObjectProperty;
	exports.PipelineBareFunction = PipelineBareFunction;
	exports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
	exports.PipelineTopicExpression = PipelineTopicExpression;
	exports.RecordExpression = RecordExpression;
	exports.RegExpLiteral = RegExpLiteral$1;
	exports.SpreadElement = exports.RestElement = RestElement$1;
	exports.StringLiteral = StringLiteral$1;
	exports.TopicReference = TopicReference;
	exports.TupleExpression = TupleExpression;
	exports._getRawIdentifier = _getRawIdentifier;
	var _t$22 = require_lib$4();
	var _jsesc = require_jsesc();
	const { isAssignmentPattern: isAssignmentPattern$1, isIdentifier: isIdentifier$6 } = _t$22;
	let lastRawIdentNode = null;
	let lastRawIdentResult = "";
	function _getRawIdentifier(node) {
		if (node === lastRawIdentNode) return lastRawIdentResult;
		lastRawIdentNode = node;
		const { name } = node;
		const token$1 = this.tokenMap.find(node, (tok) => tok.value === name);
		if (token$1) {
			lastRawIdentResult = this._originalCode.slice(token$1.start, token$1.end);
			return lastRawIdentResult;
		}
		return lastRawIdentResult = node.name;
	}
	function Identifier(node) {
		var _node$loc;
		this.sourceIdentifierName(((_node$loc = node.loc) == null ? void 0 : _node$loc.identifierName) || node.name);
		this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);
	}
	function ArgumentPlaceholder() {
		this.tokenChar(63);
	}
	function RestElement$1(node) {
		this.token("...");
		this.print(node.argument);
	}
	function ObjectExpression$1(node) {
		const props = node.properties;
		this.tokenChar(123);
		if (props.length) {
			const exit = this.enterDelimited();
			this.space();
			this.printList(props, this.shouldPrintTrailingComma("}"), true, true);
			this.space();
			exit();
		}
		this.sourceWithOffset("end", node.loc, -1);
		this.tokenChar(125);
	}
	function ObjectMethod(node) {
		this.printJoin(node.decorators);
		this._methodHead(node);
		this.space();
		this.print(node.body);
	}
	function ObjectProperty(node) {
		this.printJoin(node.decorators);
		if (node.computed) {
			this.tokenChar(91);
			this.print(node.key);
			this.tokenChar(93);
		} else {
			if (isAssignmentPattern$1(node.value) && isIdentifier$6(node.key) && node.key.name === node.value.left.name) {
				this.print(node.value);
				return;
			}
			this.print(node.key);
			if (node.shorthand && isIdentifier$6(node.key) && isIdentifier$6(node.value) && node.key.name === node.value.name) return;
		}
		this.tokenChar(58);
		this.space();
		this.print(node.value);
	}
	function ArrayExpression$1(node) {
		const elems = node.elements;
		const len = elems.length;
		this.tokenChar(91);
		const exit = this.enterDelimited();
		for (let i$6 = 0; i$6 < elems.length; i$6++) {
			const elem = elems[i$6];
			if (elem) {
				if (i$6 > 0) this.space();
				this.print(elem);
				if (i$6 < len - 1 || this.shouldPrintTrailingComma("]")) this.token(",", false, i$6);
			} else this.token(",", false, i$6);
		}
		exit();
		this.tokenChar(93);
	}
	function RecordExpression(node) {
		const props = node.properties;
		let startToken;
		let endToken;
		if (this.format.recordAndTupleSyntaxType === "bar") {
			startToken = "{|";
			endToken = "|}";
		} else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
		else {
			startToken = "#{";
			endToken = "}";
		}
		this.token(startToken);
		if (props.length) {
			this.space();
			this.printList(props, this.shouldPrintTrailingComma(endToken), true, true);
			this.space();
		}
		this.token(endToken);
	}
	function TupleExpression(node) {
		const elems = node.elements;
		const len = elems.length;
		let startToken;
		let endToken;
		if (this.format.recordAndTupleSyntaxType === "bar") {
			startToken = "[|";
			endToken = "|]";
		} else if (this.format.recordAndTupleSyntaxType === "hash") {
			startToken = "#[";
			endToken = "]";
		} else throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
		this.token(startToken);
		for (let i$6 = 0; i$6 < elems.length; i$6++) {
			const elem = elems[i$6];
			if (elem) {
				if (i$6 > 0) this.space();
				this.print(elem);
				if (i$6 < len - 1 || this.shouldPrintTrailingComma(endToken)) this.token(",", false, i$6);
			}
		}
		this.token(endToken);
	}
	function RegExpLiteral$1(node) {
		this.word(`/${node.pattern}/${node.flags}`);
	}
	function BooleanLiteral$1(node) {
		this.word(node.value ? "true" : "false");
	}
	function NullLiteral$1() {
		this.word("null");
	}
	function NumericLiteral$1(node) {
		const raw = this.getPossibleRaw(node);
		const opts = this.format.jsescOption;
		const value = node.value;
		const str$4 = value + "";
		if (opts.numbers) this.number(_jsesc(value, opts), value);
		else if (raw == null) this.number(str$4, value);
		else if (this.format.minified) this.number(raw.length < str$4.length ? raw : str$4, value);
		else this.number(raw, value);
	}
	function StringLiteral$1(node) {
		const raw = this.getPossibleRaw(node);
		if (!this.format.minified && raw !== void 0) {
			this.token(raw);
			return;
		}
		const val = _jsesc(node.value, this.format.jsescOption);
		this.token(val);
	}
	function BigIntLiteral(node) {
		const raw = this.getPossibleRaw(node);
		if (!this.format.minified && raw !== void 0) {
			this.word(raw);
			return;
		}
		this.word(node.value + "n");
	}
	const validTopicTokenSet = new Set([
		"^^",
		"@@",
		"^",
		"%",
		"#"
	]);
	function TopicReference() {
		const { topicToken } = this.format;
		if (validTopicTokenSet.has(topicToken)) this.token(topicToken);
		else {
			const givenTopicTokenJSON = JSON.stringify(topicToken);
			const validTopics = Array.from(validTopicTokenSet, (v$1) => JSON.stringify(v$1));
			throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
		}
	}
	function PipelineTopicExpression(node) {
		this.print(node.expression);
	}
	function PipelineBareFunction(node) {
		this.print(node.callee);
	}
	function PipelinePrimaryTopicReference() {
		this.tokenChar(35);
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/flow.js
var require_flow = __commonJS({ "node_modules/@babel/generator/lib/generators/flow.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
	exports.DeclareExportDeclaration = DeclareExportDeclaration;
	exports.DeclareFunction = DeclareFunction;
	exports.DeclareInterface = DeclareInterface;
	exports.DeclareModule = DeclareModule;
	exports.DeclareModuleExports = DeclareModuleExports;
	exports.DeclareOpaqueType = DeclareOpaqueType;
	exports.DeclareTypeAlias = DeclareTypeAlias;
	exports.DeclareVariable = DeclareVariable;
	exports.DeclaredPredicate = DeclaredPredicate;
	exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
	exports.EnumBooleanBody = EnumBooleanBody;
	exports.EnumBooleanMember = EnumBooleanMember;
	exports.EnumDeclaration = EnumDeclaration;
	exports.EnumDefaultedMember = EnumDefaultedMember;
	exports.EnumNumberBody = EnumNumberBody;
	exports.EnumNumberMember = EnumNumberMember;
	exports.EnumStringBody = EnumStringBody;
	exports.EnumStringMember = EnumStringMember;
	exports.EnumSymbolBody = EnumSymbolBody;
	exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.IndexedAccessType = IndexedAccessType;
	exports.InferredPredicate = InferredPredicate;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
	exports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _types2.NumericLiteral;
		}
	});
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
	exports.OpaqueType = OpaqueType;
	exports.OptionalIndexedAccessType = OptionalIndexedAccessType;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
		enumerable: true,
		get: function() {
			return _types2.StringLiteral;
		}
	});
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.SymbolTypeAnnotation = SymbolTypeAnnotation;
	exports.ThisTypeAnnotation = ThisTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression$1;
	exports.TypeParameter = TypeParameter;
	exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.Variance = Variance;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;
	exports._interfaceish = _interfaceish;
	exports._variance = _variance;
	var _t$21 = require_lib$4();
	var _modules$1 = require_modules();
	var _index$8 = require_node();
	var _types2 = require_types();
	const { isDeclareExportDeclaration, isStatement: isStatement$4 } = _t$21;
	function AnyTypeAnnotation() {
		this.word("any");
	}
	function ArrayTypeAnnotation(node) {
		this.print(node.elementType, true);
		this.tokenChar(91);
		this.tokenChar(93);
	}
	function BooleanTypeAnnotation() {
		this.word("boolean");
	}
	function BooleanLiteralTypeAnnotation(node) {
		this.word(node.value ? "true" : "false");
	}
	function NullLiteralTypeAnnotation() {
		this.word("null");
	}
	function DeclareClass(node, parent) {
		if (!isDeclareExportDeclaration(parent)) {
			this.word("declare");
			this.space();
		}
		this.word("class");
		this.space();
		this._interfaceish(node);
	}
	function DeclareFunction(node, parent) {
		if (!isDeclareExportDeclaration(parent)) {
			this.word("declare");
			this.space();
		}
		this.word("function");
		this.space();
		this.print(node.id);
		this.print(node.id.typeAnnotation.typeAnnotation);
		if (node.predicate) {
			this.space();
			this.print(node.predicate);
		}
		this.semicolon();
	}
	function InferredPredicate() {
		this.tokenChar(37);
		this.word("checks");
	}
	function DeclaredPredicate(node) {
		this.tokenChar(37);
		this.word("checks");
		this.tokenChar(40);
		this.print(node.value);
		this.tokenChar(41);
	}
	function DeclareInterface(node) {
		this.word("declare");
		this.space();
		this.InterfaceDeclaration(node);
	}
	function DeclareModule(node) {
		this.word("declare");
		this.space();
		this.word("module");
		this.space();
		this.print(node.id);
		this.space();
		this.print(node.body);
	}
	function DeclareModuleExports(node) {
		this.word("declare");
		this.space();
		this.word("module");
		this.tokenChar(46);
		this.word("exports");
		this.print(node.typeAnnotation);
	}
	function DeclareTypeAlias(node) {
		this.word("declare");
		this.space();
		this.TypeAlias(node);
	}
	function DeclareOpaqueType(node, parent) {
		if (!isDeclareExportDeclaration(parent)) {
			this.word("declare");
			this.space();
		}
		this.OpaqueType(node);
	}
	function DeclareVariable(node, parent) {
		if (!isDeclareExportDeclaration(parent)) {
			this.word("declare");
			this.space();
		}
		this.word("var");
		this.space();
		this.print(node.id);
		this.print(node.id.typeAnnotation);
		this.semicolon();
	}
	function DeclareExportDeclaration(node) {
		this.word("declare");
		this.space();
		this.word("export");
		this.space();
		if (node.default) {
			this.word("default");
			this.space();
		}
		FlowExportDeclaration.call(this, node);
	}
	function DeclareExportAllDeclaration(node) {
		this.word("declare");
		this.space();
		_modules$1.ExportAllDeclaration.call(this, node);
	}
	function EnumDeclaration(node) {
		const { id: id$4, body } = node;
		this.word("enum");
		this.space();
		this.print(id$4);
		this.print(body);
	}
	function enumExplicitType(context, name, hasExplicitType) {
		if (hasExplicitType) {
			context.space();
			context.word("of");
			context.space();
			context.word(name);
		}
		context.space();
	}
	function enumBody(context, node) {
		const { members } = node;
		context.token("{");
		context.indent();
		context.newline();
		for (const member of members) {
			context.print(member);
			context.newline();
		}
		if (node.hasUnknownMembers) {
			context.token("...");
			context.newline();
		}
		context.dedent();
		context.token("}");
	}
	function EnumBooleanBody(node) {
		const { explicitType } = node;
		enumExplicitType(this, "boolean", explicitType);
		enumBody(this, node);
	}
	function EnumNumberBody(node) {
		const { explicitType } = node;
		enumExplicitType(this, "number", explicitType);
		enumBody(this, node);
	}
	function EnumStringBody(node) {
		const { explicitType } = node;
		enumExplicitType(this, "string", explicitType);
		enumBody(this, node);
	}
	function EnumSymbolBody(node) {
		enumExplicitType(this, "symbol", true);
		enumBody(this, node);
	}
	function EnumDefaultedMember(node) {
		const { id: id$4 } = node;
		this.print(id$4);
		this.tokenChar(44);
	}
	function enumInitializedMember(context, node) {
		context.print(node.id);
		context.space();
		context.token("=");
		context.space();
		context.print(node.init);
		context.token(",");
	}
	function EnumBooleanMember(node) {
		enumInitializedMember(this, node);
	}
	function EnumNumberMember(node) {
		enumInitializedMember(this, node);
	}
	function EnumStringMember(node) {
		enumInitializedMember(this, node);
	}
	function FlowExportDeclaration(node) {
		if (node.declaration) {
			const declar = node.declaration;
			this.print(declar);
			if (!isStatement$4(declar)) this.semicolon();
		} else {
			this.tokenChar(123);
			if (node.specifiers.length) {
				this.space();
				this.printList(node.specifiers);
				this.space();
			}
			this.tokenChar(125);
			if (node.source) {
				this.space();
				this.word("from");
				this.space();
				this.print(node.source);
			}
			this.semicolon();
		}
	}
	function ExistsTypeAnnotation() {
		this.tokenChar(42);
	}
	function FunctionTypeAnnotation(node, parent) {
		this.print(node.typeParameters);
		this.tokenChar(40);
		if (node.this) {
			this.word("this");
			this.tokenChar(58);
			this.space();
			this.print(node.this.typeAnnotation);
			if (node.params.length || node.rest) {
				this.tokenChar(44);
				this.space();
			}
		}
		this.printList(node.params);
		if (node.rest) {
			if (node.params.length) {
				this.tokenChar(44);
				this.space();
			}
			this.token("...");
			this.print(node.rest);
		}
		this.tokenChar(41);
		const type = parent == null ? void 0 : parent.type;
		if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) this.tokenChar(58);
		else {
			this.space();
			this.token("=>");
		}
		this.space();
		this.print(node.returnType);
	}
	function FunctionTypeParam(node) {
		this.print(node.name);
		if (node.optional) this.tokenChar(63);
		if (node.name) {
			this.tokenChar(58);
			this.space();
		}
		this.print(node.typeAnnotation);
	}
	function InterfaceExtends(node) {
		this.print(node.id);
		this.print(node.typeParameters, true);
	}
	function _interfaceish(node) {
		var _node$extends;
		this.print(node.id);
		this.print(node.typeParameters);
		if ((_node$extends = node.extends) != null && _node$extends.length) {
			this.space();
			this.word("extends");
			this.space();
			this.printList(node.extends);
		}
		if (node.type === "DeclareClass") {
			var _node$mixins, _node$implements;
			if ((_node$mixins = node.mixins) != null && _node$mixins.length) {
				this.space();
				this.word("mixins");
				this.space();
				this.printList(node.mixins);
			}
			if ((_node$implements = node.implements) != null && _node$implements.length) {
				this.space();
				this.word("implements");
				this.space();
				this.printList(node.implements);
			}
		}
		this.space();
		this.print(node.body);
	}
	function _variance(node) {
		var _node$variance;
		const kind = (_node$variance = node.variance) == null ? void 0 : _node$variance.kind;
		if (kind != null) {
			if (kind === "plus") this.tokenChar(43);
			else if (kind === "minus") this.tokenChar(45);
		}
	}
	function InterfaceDeclaration(node) {
		this.word("interface");
		this.space();
		this._interfaceish(node);
	}
	function andSeparator(occurrenceCount) {
		this.space();
		this.token("&", false, occurrenceCount);
		this.space();
	}
	function InterfaceTypeAnnotation(node) {
		var _node$extends2;
		this.word("interface");
		if ((_node$extends2 = node.extends) != null && _node$extends2.length) {
			this.space();
			this.word("extends");
			this.space();
			this.printList(node.extends);
		}
		this.space();
		this.print(node.body);
	}
	function IntersectionTypeAnnotation(node) {
		this.printJoin(node.types, void 0, void 0, andSeparator);
	}
	function MixedTypeAnnotation() {
		this.word("mixed");
	}
	function EmptyTypeAnnotation() {
		this.word("empty");
	}
	function NullableTypeAnnotation(node) {
		this.tokenChar(63);
		this.print(node.typeAnnotation);
	}
	function NumberTypeAnnotation() {
		this.word("number");
	}
	function StringTypeAnnotation() {
		this.word("string");
	}
	function ThisTypeAnnotation() {
		this.word("this");
	}
	function TupleTypeAnnotation(node) {
		this.tokenChar(91);
		this.printList(node.types);
		this.tokenChar(93);
	}
	function TypeofTypeAnnotation(node) {
		this.word("typeof");
		this.space();
		this.print(node.argument);
	}
	function TypeAlias(node) {
		this.word("type");
		this.space();
		this.print(node.id);
		this.print(node.typeParameters);
		this.space();
		this.tokenChar(61);
		this.space();
		this.print(node.right);
		this.semicolon();
	}
	function TypeAnnotation(node, parent) {
		this.tokenChar(58);
		this.space();
		if (parent.type === "ArrowFunctionExpression") this.tokenContext |= _index$8.TokenContext.arrowFlowReturnType;
		else if (node.optional) this.tokenChar(63);
		this.print(node.typeAnnotation);
	}
	function TypeParameterInstantiation(node) {
		this.tokenChar(60);
		this.printList(node.params);
		this.tokenChar(62);
	}
	function TypeParameter(node) {
		this._variance(node);
		this.word(node.name);
		if (node.bound) this.print(node.bound);
		if (node.default) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.default);
		}
	}
	function OpaqueType(node) {
		this.word("opaque");
		this.space();
		this.word("type");
		this.space();
		this.print(node.id);
		this.print(node.typeParameters);
		if (node.supertype) {
			this.tokenChar(58);
			this.space();
			this.print(node.supertype);
		}
		if (node.impltype) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.impltype);
		}
		this.semicolon();
	}
	function ObjectTypeAnnotation(node) {
		if (node.exact) this.token("{|");
		else this.tokenChar(123);
		const props = [
			...node.properties,
			...node.callProperties || [],
			...node.indexers || [],
			...node.internalSlots || []
		];
		if (props.length) {
			this.newline();
			this.space();
			this.printJoin(props, true, true, void 0, void 0, function addNewlines(leading) {
				if (leading && !props[0]) return 1;
			}, () => {
				if (props.length !== 1 || node.inexact) {
					this.tokenChar(44);
					this.space();
				}
			});
			this.space();
		}
		if (node.inexact) {
			this.indent();
			this.token("...");
			if (props.length) this.newline();
			this.dedent();
		}
		if (node.exact) this.token("|}");
		else this.tokenChar(125);
	}
	function ObjectTypeInternalSlot(node) {
		if (node.static) {
			this.word("static");
			this.space();
		}
		this.tokenChar(91);
		this.tokenChar(91);
		this.print(node.id);
		this.tokenChar(93);
		this.tokenChar(93);
		if (node.optional) this.tokenChar(63);
		if (!node.method) {
			this.tokenChar(58);
			this.space();
		}
		this.print(node.value);
	}
	function ObjectTypeCallProperty(node) {
		if (node.static) {
			this.word("static");
			this.space();
		}
		this.print(node.value);
	}
	function ObjectTypeIndexer(node) {
		if (node.static) {
			this.word("static");
			this.space();
		}
		this._variance(node);
		this.tokenChar(91);
		if (node.id) {
			this.print(node.id);
			this.tokenChar(58);
			this.space();
		}
		this.print(node.key);
		this.tokenChar(93);
		this.tokenChar(58);
		this.space();
		this.print(node.value);
	}
	function ObjectTypeProperty(node) {
		if (node.proto) {
			this.word("proto");
			this.space();
		}
		if (node.static) {
			this.word("static");
			this.space();
		}
		if (node.kind === "get" || node.kind === "set") {
			this.word(node.kind);
			this.space();
		}
		this._variance(node);
		this.print(node.key);
		if (node.optional) this.tokenChar(63);
		if (!node.method) {
			this.tokenChar(58);
			this.space();
		}
		this.print(node.value);
	}
	function ObjectTypeSpreadProperty(node) {
		this.token("...");
		this.print(node.argument);
	}
	function QualifiedTypeIdentifier(node) {
		this.print(node.qualification);
		this.tokenChar(46);
		this.print(node.id);
	}
	function SymbolTypeAnnotation() {
		this.word("symbol");
	}
	function orSeparator(occurrenceCount) {
		this.space();
		this.token("|", false, occurrenceCount);
		this.space();
	}
	function UnionTypeAnnotation(node) {
		this.printJoin(node.types, void 0, void 0, orSeparator);
	}
	function TypeCastExpression$1(node) {
		this.tokenChar(40);
		this.print(node.expression);
		this.print(node.typeAnnotation);
		this.tokenChar(41);
	}
	function Variance(node) {
		if (node.kind === "plus") this.tokenChar(43);
		else this.tokenChar(45);
	}
	function VoidTypeAnnotation() {
		this.word("void");
	}
	function IndexedAccessType(node) {
		this.print(node.objectType, true);
		this.tokenChar(91);
		this.print(node.indexType);
		this.tokenChar(93);
	}
	function OptionalIndexedAccessType(node) {
		this.print(node.objectType);
		if (node.optional) this.token("?.");
		this.tokenChar(91);
		this.print(node.indexType);
		this.tokenChar(93);
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/base.js
var require_base = __commonJS({ "node_modules/@babel/generator/lib/generators/base.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BlockStatement = BlockStatement;
	exports.Directive = Directive;
	exports.DirectiveLiteral = DirectiveLiteral;
	exports.File = File;
	exports.InterpreterDirective = InterpreterDirective;
	exports.Placeholder = Placeholder;
	exports.Program = Program;
	function File(node) {
		if (node.program) this.print(node.program.interpreter);
		this.print(node.program);
	}
	function Program(node) {
		var _node$directives;
		this.noIndentInnerCommentsHere();
		this.printInnerComments();
		const directivesLen = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;
		if (directivesLen) {
			var _node$directives$trai;
			const newline$3 = node.body.length ? 2 : 1;
			this.printSequence(node.directives, void 0, newline$3);
			if (!((_node$directives$trai = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) this.newline(newline$3);
		}
		this.printSequence(node.body);
	}
	function BlockStatement(node) {
		var _node$directives2;
		this.tokenChar(123);
		const exit = this.enterDelimited();
		const directivesLen = (_node$directives2 = node.directives) == null ? void 0 : _node$directives2.length;
		if (directivesLen) {
			var _node$directives$trai2;
			const newline$3 = node.body.length ? 2 : 1;
			this.printSequence(node.directives, true, newline$3);
			if (!((_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) this.newline(newline$3);
		}
		this.printSequence(node.body, true);
		exit();
		this.rightBrace(node);
	}
	function Directive(node) {
		this.print(node.value);
		this.semicolon();
	}
	const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
	const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
	function DirectiveLiteral(node) {
		const raw = this.getPossibleRaw(node);
		if (!this.format.minified && raw !== void 0) {
			this.token(raw);
			return;
		}
		const { value } = node;
		if (!unescapedDoubleQuoteRE.test(value)) this.token(`"${value}"`);
		else if (!unescapedSingleQuoteRE.test(value)) this.token(`'${value}'`);
		else throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
	}
	function InterpreterDirective(node) {
		this.token(`#!${node.value}`);
		this.newline(1, true);
	}
	function Placeholder(node) {
		this.token("%%");
		this.print(node.name);
		this.token("%%");
		if (node.expectedNode === "Statement") this.semicolon();
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/jsx.js
var require_jsx = __commonJS({ "node_modules/@babel/generator/lib/generators/jsx.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXAttribute = JSXAttribute;
	exports.JSXClosingElement = JSXClosingElement;
	exports.JSXClosingFragment = JSXClosingFragment;
	exports.JSXElement = JSXElement;
	exports.JSXEmptyExpression = JSXEmptyExpression;
	exports.JSXExpressionContainer = JSXExpressionContainer;
	exports.JSXFragment = JSXFragment;
	exports.JSXIdentifier = JSXIdentifier;
	exports.JSXMemberExpression = JSXMemberExpression;
	exports.JSXNamespacedName = JSXNamespacedName;
	exports.JSXOpeningElement = JSXOpeningElement;
	exports.JSXOpeningFragment = JSXOpeningFragment;
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	exports.JSXSpreadChild = JSXSpreadChild;
	exports.JSXText = JSXText;
	function JSXAttribute(node) {
		this.print(node.name);
		if (node.value) {
			this.tokenChar(61);
			this.print(node.value);
		}
	}
	function JSXIdentifier(node) {
		this.word(node.name);
	}
	function JSXNamespacedName(node) {
		this.print(node.namespace);
		this.tokenChar(58);
		this.print(node.name);
	}
	function JSXMemberExpression(node) {
		this.print(node.object);
		this.tokenChar(46);
		this.print(node.property);
	}
	function JSXSpreadAttribute(node) {
		this.tokenChar(123);
		this.token("...");
		this.print(node.argument);
		this.rightBrace(node);
	}
	function JSXExpressionContainer(node) {
		this.tokenChar(123);
		this.print(node.expression);
		this.rightBrace(node);
	}
	function JSXSpreadChild(node) {
		this.tokenChar(123);
		this.token("...");
		this.print(node.expression);
		this.rightBrace(node);
	}
	function JSXText(node) {
		const raw = this.getPossibleRaw(node);
		if (raw !== void 0) this.token(raw, true);
		else this.token(node.value, true);
	}
	function JSXElement(node) {
		const open = node.openingElement;
		this.print(open);
		if (open.selfClosing) return;
		this.indent();
		for (const child of node.children) this.print(child);
		this.dedent();
		this.print(node.closingElement);
	}
	function spaceSeparator() {
		this.space();
	}
	function JSXOpeningElement(node) {
		this.tokenChar(60);
		this.print(node.name);
		{
			if (node.typeArguments) this.print(node.typeArguments);
			this.print(node.typeParameters);
		}
		if (node.attributes.length > 0) {
			this.space();
			this.printJoin(node.attributes, void 0, void 0, spaceSeparator);
		}
		if (node.selfClosing) {
			this.space();
			this.tokenChar(47);
		}
		this.tokenChar(62);
	}
	function JSXClosingElement(node) {
		this.tokenChar(60);
		this.tokenChar(47);
		this.print(node.name);
		this.tokenChar(62);
	}
	function JSXEmptyExpression() {
		this.printInnerComments();
	}
	function JSXFragment(node) {
		this.print(node.openingFragment);
		this.indent();
		for (const child of node.children) this.print(child);
		this.dedent();
		this.print(node.closingFragment);
	}
	function JSXOpeningFragment() {
		this.tokenChar(60);
		this.tokenChar(62);
	}
	function JSXClosingFragment() {
		this.token("</");
		this.tokenChar(62);
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/typescript.js
var require_typescript = __commonJS({ "node_modules/@babel/generator/lib/generators/typescript.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TSAnyKeyword = TSAnyKeyword;
	exports.TSArrayType = TSArrayType;
	exports.TSSatisfiesExpression = exports.TSAsExpression = TSTypeExpression;
	exports.TSBigIntKeyword = TSBigIntKeyword;
	exports.TSBooleanKeyword = TSBooleanKeyword;
	exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
	exports.TSInterfaceHeritage = exports.TSClassImplements = TSClassImplements;
	exports.TSConditionalType = TSConditionalType;
	exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
	exports.TSConstructorType = TSConstructorType;
	exports.TSDeclareFunction = TSDeclareFunction;
	exports.TSDeclareMethod = TSDeclareMethod;
	exports.TSEnumBody = TSEnumBody;
	exports.TSEnumDeclaration = TSEnumDeclaration;
	exports.TSEnumMember = TSEnumMember;
	exports.TSExportAssignment = TSExportAssignment;
	exports.TSExternalModuleReference = TSExternalModuleReference;
	exports.TSFunctionType = TSFunctionType;
	exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
	exports.TSImportType = TSImportType;
	exports.TSIndexSignature = TSIndexSignature;
	exports.TSIndexedAccessType = TSIndexedAccessType;
	exports.TSInferType = TSInferType;
	exports.TSInstantiationExpression = TSInstantiationExpression;
	exports.TSInterfaceBody = TSInterfaceBody;
	exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
	exports.TSIntersectionType = TSIntersectionType;
	exports.TSIntrinsicKeyword = TSIntrinsicKeyword;
	exports.TSLiteralType = TSLiteralType;
	exports.TSMappedType = TSMappedType;
	exports.TSMethodSignature = TSMethodSignature;
	exports.TSModuleBlock = TSModuleBlock;
	exports.TSModuleDeclaration = TSModuleDeclaration;
	exports.TSNamedTupleMember = TSNamedTupleMember;
	exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
	exports.TSNeverKeyword = TSNeverKeyword;
	exports.TSNonNullExpression = TSNonNullExpression$1;
	exports.TSNullKeyword = TSNullKeyword;
	exports.TSNumberKeyword = TSNumberKeyword;
	exports.TSObjectKeyword = TSObjectKeyword;
	exports.TSOptionalType = TSOptionalType;
	exports.TSParameterProperty = TSParameterProperty;
	exports.TSParenthesizedType = TSParenthesizedType;
	exports.TSPropertySignature = TSPropertySignature;
	exports.TSQualifiedName = TSQualifiedName;
	exports.TSRestType = TSRestType;
	exports.TSStringKeyword = TSStringKeyword;
	exports.TSSymbolKeyword = TSSymbolKeyword;
	exports.TSTemplateLiteralType = TSTemplateLiteralType;
	exports.TSThisType = TSThisType;
	exports.TSTupleType = TSTupleType;
	exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
	exports.TSTypeAnnotation = TSTypeAnnotation;
	exports.TSTypeAssertion = TSTypeAssertion;
	exports.TSTypeLiteral = TSTypeLiteral;
	exports.TSTypeOperator = TSTypeOperator;
	exports.TSTypeParameter = TSTypeParameter;
	exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
	exports.TSTypePredicate = TSTypePredicate;
	exports.TSTypeQuery = TSTypeQuery;
	exports.TSTypeReference = TSTypeReference;
	exports.TSUndefinedKeyword = TSUndefinedKeyword;
	exports.TSUnionType = TSUnionType;
	exports.TSUnknownKeyword = TSUnknownKeyword;
	exports.TSVoidKeyword = TSVoidKeyword;
	exports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
	exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
	exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
	exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
	function TSTypeAnnotation(node, parent) {
		this.token((parent.type === "TSFunctionType" || parent.type === "TSConstructorType") && parent.typeAnnotation === node ? "=>" : ":");
		this.space();
		if (node.optional) this.tokenChar(63);
		this.print(node.typeAnnotation);
	}
	function TSTypeParameterInstantiation(node, parent) {
		this.tokenChar(60);
		let printTrailingSeparator = parent.type === "ArrowFunctionExpression" && node.params.length === 1;
		if (this.tokenMap && node.start != null && node.end != null) {
			printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, (t$9) => this.tokenMap.matchesOriginal(t$9, ",")));
			printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">"));
		}
		this.printList(node.params, printTrailingSeparator);
		this.tokenChar(62);
	}
	function TSTypeParameter(node) {
		if (node.in) {
			this.word("in");
			this.space();
		}
		if (node.out) {
			this.word("out");
			this.space();
		}
		this.word(node.name);
		if (node.constraint) {
			this.space();
			this.word("extends");
			this.space();
			this.print(node.constraint);
		}
		if (node.default) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(node.default);
		}
	}
	function TSParameterProperty(node) {
		if (node.accessibility) {
			this.word(node.accessibility);
			this.space();
		}
		if (node.readonly) {
			this.word("readonly");
			this.space();
		}
		this._param(node.parameter);
	}
	function TSDeclareFunction(node, parent) {
		if (node.declare) {
			this.word("declare");
			this.space();
		}
		this._functionHead(node, parent);
		this.semicolon();
	}
	function TSDeclareMethod(node) {
		this._classMethodHead(node);
		this.semicolon();
	}
	function TSQualifiedName(node) {
		this.print(node.left);
		this.tokenChar(46);
		this.print(node.right);
	}
	function TSCallSignatureDeclaration(node) {
		this.tsPrintSignatureDeclarationBase(node);
		maybePrintTrailingCommaOrSemicolon(this, node);
	}
	function maybePrintTrailingCommaOrSemicolon(printer$1, node) {
		if (!printer$1.tokenMap || !node.start || !node.end) {
			printer$1.semicolon();
			return;
		}
		if (printer$1.tokenMap.endMatches(node, ",")) printer$1.token(",");
		else if (printer$1.tokenMap.endMatches(node, ";")) printer$1.semicolon();
	}
	function TSConstructSignatureDeclaration(node) {
		this.word("new");
		this.space();
		this.tsPrintSignatureDeclarationBase(node);
		maybePrintTrailingCommaOrSemicolon(this, node);
	}
	function TSPropertySignature(node) {
		const { readonly } = node;
		if (readonly) {
			this.word("readonly");
			this.space();
		}
		this.tsPrintPropertyOrMethodName(node);
		this.print(node.typeAnnotation);
		maybePrintTrailingCommaOrSemicolon(this, node);
	}
	function tsPrintPropertyOrMethodName(node) {
		if (node.computed) this.tokenChar(91);
		this.print(node.key);
		if (node.computed) this.tokenChar(93);
		if (node.optional) this.tokenChar(63);
	}
	function TSMethodSignature(node) {
		const { kind } = node;
		if (kind === "set" || kind === "get") {
			this.word(kind);
			this.space();
		}
		this.tsPrintPropertyOrMethodName(node);
		this.tsPrintSignatureDeclarationBase(node);
		maybePrintTrailingCommaOrSemicolon(this, node);
	}
	function TSIndexSignature(node) {
		const { readonly, static: isStatic$1 } = node;
		if (isStatic$1) {
			this.word("static");
			this.space();
		}
		if (readonly) {
			this.word("readonly");
			this.space();
		}
		this.tokenChar(91);
		this._parameters(node.parameters, "]");
		this.print(node.typeAnnotation);
		maybePrintTrailingCommaOrSemicolon(this, node);
	}
	function TSAnyKeyword() {
		this.word("any");
	}
	function TSBigIntKeyword() {
		this.word("bigint");
	}
	function TSUnknownKeyword() {
		this.word("unknown");
	}
	function TSNumberKeyword() {
		this.word("number");
	}
	function TSObjectKeyword() {
		this.word("object");
	}
	function TSBooleanKeyword() {
		this.word("boolean");
	}
	function TSStringKeyword() {
		this.word("string");
	}
	function TSSymbolKeyword() {
		this.word("symbol");
	}
	function TSVoidKeyword() {
		this.word("void");
	}
	function TSUndefinedKeyword() {
		this.word("undefined");
	}
	function TSNullKeyword() {
		this.word("null");
	}
	function TSNeverKeyword() {
		this.word("never");
	}
	function TSIntrinsicKeyword() {
		this.word("intrinsic");
	}
	function TSThisType() {
		this.word("this");
	}
	function TSFunctionType(node) {
		this.tsPrintFunctionOrConstructorType(node);
	}
	function TSConstructorType(node) {
		if (node.abstract) {
			this.word("abstract");
			this.space();
		}
		this.word("new");
		this.space();
		this.tsPrintFunctionOrConstructorType(node);
	}
	function tsPrintFunctionOrConstructorType(node) {
		const { typeParameters } = node;
		const parameters = node.parameters;
		this.print(typeParameters);
		this.tokenChar(40);
		this._parameters(parameters, ")");
		this.space();
		const returnType = node.typeAnnotation;
		this.print(returnType);
	}
	function TSTypeReference(node) {
		const typeArguments = node.typeParameters;
		this.print(node.typeName, !!typeArguments);
		this.print(typeArguments);
	}
	function TSTypePredicate(node) {
		if (node.asserts) {
			this.word("asserts");
			this.space();
		}
		this.print(node.parameterName);
		if (node.typeAnnotation) {
			this.space();
			this.word("is");
			this.space();
			this.print(node.typeAnnotation.typeAnnotation);
		}
	}
	function TSTypeQuery(node) {
		this.word("typeof");
		this.space();
		this.print(node.exprName);
		const typeArguments = node.typeParameters;
		if (typeArguments) this.print(typeArguments);
	}
	function TSTypeLiteral(node) {
		printBraced(this, node, () => this.printJoin(node.members, true, true));
	}
	function TSArrayType(node) {
		this.print(node.elementType, true);
		this.tokenChar(91);
		this.tokenChar(93);
	}
	function TSTupleType(node) {
		this.tokenChar(91);
		this.printList(node.elementTypes, this.shouldPrintTrailingComma("]"));
		this.tokenChar(93);
	}
	function TSOptionalType(node) {
		this.print(node.typeAnnotation);
		this.tokenChar(63);
	}
	function TSRestType(node) {
		this.token("...");
		this.print(node.typeAnnotation);
	}
	function TSNamedTupleMember(node) {
		this.print(node.label);
		if (node.optional) this.tokenChar(63);
		this.tokenChar(58);
		this.space();
		this.print(node.elementType);
	}
	function TSUnionType(node) {
		tsPrintUnionOrIntersectionType(this, node, "|");
	}
	function TSIntersectionType(node) {
		tsPrintUnionOrIntersectionType(this, node, "&");
	}
	function tsPrintUnionOrIntersectionType(printer$1, node, sep$1) {
		var _printer$tokenMap;
		let hasLeadingToken = 0;
		if ((_printer$tokenMap = printer$1.tokenMap) != null && _printer$tokenMap.startMatches(node, sep$1)) {
			hasLeadingToken = 1;
			printer$1.token(sep$1);
		}
		printer$1.printJoin(node.types, void 0, void 0, function(i$6) {
			this.space();
			this.token(sep$1, null, i$6 + hasLeadingToken);
			this.space();
		});
	}
	function TSConditionalType(node) {
		this.print(node.checkType);
		this.space();
		this.word("extends");
		this.space();
		this.print(node.extendsType);
		this.space();
		this.tokenChar(63);
		this.space();
		this.print(node.trueType);
		this.space();
		this.tokenChar(58);
		this.space();
		this.print(node.falseType);
	}
	function TSInferType(node) {
		this.word("infer");
		this.print(node.typeParameter);
	}
	function TSParenthesizedType(node) {
		this.tokenChar(40);
		this.print(node.typeAnnotation);
		this.tokenChar(41);
	}
	function TSTypeOperator(node) {
		this.word(node.operator);
		this.space();
		this.print(node.typeAnnotation);
	}
	function TSIndexedAccessType(node) {
		this.print(node.objectType, true);
		this.tokenChar(91);
		this.print(node.indexType);
		this.tokenChar(93);
	}
	function TSMappedType(node) {
		const { nameType, optional, readonly, typeAnnotation: typeAnnotation$1 } = node;
		this.tokenChar(123);
		const exit = this.enterDelimited();
		this.space();
		if (readonly) {
			tokenIfPlusMinus(this, readonly);
			this.word("readonly");
			this.space();
		}
		this.tokenChar(91);
		this.word(node.typeParameter.name);
		this.space();
		this.word("in");
		this.space();
		this.print(node.typeParameter.constraint);
		if (nameType) {
			this.space();
			this.word("as");
			this.space();
			this.print(nameType);
		}
		this.tokenChar(93);
		if (optional) {
			tokenIfPlusMinus(this, optional);
			this.tokenChar(63);
		}
		if (typeAnnotation$1) {
			this.tokenChar(58);
			this.space();
			this.print(typeAnnotation$1);
		}
		this.space();
		exit();
		this.tokenChar(125);
	}
	function tokenIfPlusMinus(self$1, tok) {
		if (tok !== true) self$1.token(tok);
	}
	function TSTemplateLiteralType(node) {
		this._printTemplate(node, node.types);
	}
	function TSLiteralType(node) {
		this.print(node.literal);
	}
	function TSClassImplements(node) {
		this.print(node.expression);
		this.print(node.typeArguments);
	}
	function TSInterfaceDeclaration(node) {
		const { declare, id: id$4, typeParameters, extends: extendz, body } = node;
		if (declare) {
			this.word("declare");
			this.space();
		}
		this.word("interface");
		this.space();
		this.print(id$4);
		this.print(typeParameters);
		if (extendz != null && extendz.length) {
			this.space();
			this.word("extends");
			this.space();
			this.printList(extendz);
		}
		this.space();
		this.print(body);
	}
	function TSInterfaceBody(node) {
		printBraced(this, node, () => this.printJoin(node.body, true, true));
	}
	function TSTypeAliasDeclaration(node) {
		const { declare, id: id$4, typeParameters, typeAnnotation: typeAnnotation$1 } = node;
		if (declare) {
			this.word("declare");
			this.space();
		}
		this.word("type");
		this.space();
		this.print(id$4);
		this.print(typeParameters);
		this.space();
		this.tokenChar(61);
		this.space();
		this.print(typeAnnotation$1);
		this.semicolon();
	}
	function TSTypeExpression(node) {
		const { type, expression: expression$2, typeAnnotation: typeAnnotation$1 } = node;
		this.print(expression$2, true);
		this.space();
		this.word(type === "TSAsExpression" ? "as" : "satisfies");
		this.space();
		this.print(typeAnnotation$1);
	}
	function TSTypeAssertion(node) {
		const { typeAnnotation: typeAnnotation$1, expression: expression$2 } = node;
		this.tokenChar(60);
		this.print(typeAnnotation$1);
		this.tokenChar(62);
		this.space();
		this.print(expression$2);
	}
	function TSInstantiationExpression(node) {
		this.print(node.expression);
		this.print(node.typeParameters);
	}
	function TSEnumDeclaration(node) {
		const { declare, const: isConst, id: id$4 } = node;
		if (declare) {
			this.word("declare");
			this.space();
		}
		if (isConst) {
			this.word("const");
			this.space();
		}
		this.word("enum");
		this.space();
		this.print(id$4);
		this.space();
		TSEnumBody.call(this, node);
	}
	function TSEnumBody(node) {
		printBraced(this, node, () => {
			var _this$shouldPrintTrai;
			return this.printList(node.members, (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) != null ? _this$shouldPrintTrai : true, true, true);
		});
	}
	function TSEnumMember(node) {
		const { id: id$4, initializer } = node;
		this.print(id$4);
		if (initializer) {
			this.space();
			this.tokenChar(61);
			this.space();
			this.print(initializer);
		}
	}
	function TSModuleDeclaration(node) {
		const { declare, id: id$4, kind } = node;
		if (declare) {
			this.word("declare");
			this.space();
		}
		{
			if (!node.global) {
				this.word(kind != null ? kind : id$4.type === "Identifier" ? "namespace" : "module");
				this.space();
			}
			this.print(id$4);
			if (!node.body) {
				this.semicolon();
				return;
			}
			let body = node.body;
			while (body.type === "TSModuleDeclaration") {
				this.tokenChar(46);
				this.print(body.id);
				body = body.body;
			}
			this.space();
			this.print(body);
		}
	}
	function TSModuleBlock(node) {
		printBraced(this, node, () => this.printSequence(node.body, true));
	}
	function TSImportType(node) {
		const { argument, qualifier, options } = node;
		this.word("import");
		this.tokenChar(40);
		this.print(argument);
		if (options) {
			this.tokenChar(44);
			this.print(options);
		}
		this.tokenChar(41);
		if (qualifier) {
			this.tokenChar(46);
			this.print(qualifier);
		}
		const typeArguments = node.typeParameters;
		if (typeArguments) this.print(typeArguments);
	}
	function TSImportEqualsDeclaration(node) {
		const { id: id$4, moduleReference } = node;
		if (node.isExport) {
			this.word("export");
			this.space();
		}
		this.word("import");
		this.space();
		this.print(id$4);
		this.space();
		this.tokenChar(61);
		this.space();
		this.print(moduleReference);
		this.semicolon();
	}
	function TSExternalModuleReference(node) {
		this.token("require(");
		this.print(node.expression);
		this.tokenChar(41);
	}
	function TSNonNullExpression$1(node) {
		this.print(node.expression);
		this.tokenChar(33);
	}
	function TSExportAssignment(node) {
		this.word("export");
		this.space();
		this.tokenChar(61);
		this.space();
		this.print(node.expression);
		this.semicolon();
	}
	function TSNamespaceExportDeclaration(node) {
		this.word("export");
		this.space();
		this.word("as");
		this.space();
		this.word("namespace");
		this.space();
		this.print(node.id);
		this.semicolon();
	}
	function tsPrintSignatureDeclarationBase(node) {
		const { typeParameters } = node;
		const parameters = node.parameters;
		this.print(typeParameters);
		this.tokenChar(40);
		this._parameters(parameters, ")");
		const returnType = node.typeAnnotation;
		this.print(returnType);
	}
	function tsPrintClassMemberModifiers(node) {
		const isPrivateField = node.type === "ClassPrivateProperty";
		const isPublicField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";
		printModifiersList(this, node, [isPublicField && node.declare && "declare", !isPrivateField && node.accessibility]);
		if (node.static) {
			this.word("static");
			this.space();
		}
		printModifiersList(this, node, [
			!isPrivateField && node.abstract && "abstract",
			!isPrivateField && node.override && "override",
			(isPublicField || isPrivateField) && node.readonly && "readonly"
		]);
	}
	function printBraced(printer$1, node, cb) {
		printer$1.token("{");
		const exit = printer$1.enterDelimited();
		cb();
		exit();
		printer$1.rightBrace(node);
	}
	function printModifiersList(printer$1, node, modifiers) {
		var _printer$tokenMap2;
		const modifiersSet = new Set();
		for (const modifier of modifiers) if (modifier) modifiersSet.add(modifier);
		(_printer$tokenMap2 = printer$1.tokenMap) == null || _printer$tokenMap2.find(node, (tok) => {
			if (modifiersSet.has(tok.value)) {
				printer$1.token(tok.value);
				printer$1.space();
				modifiersSet.delete(tok.value);
				return modifiersSet.size === 0;
			}
		});
		for (const modifier of modifiersSet) {
			printer$1.word(modifier);
			printer$1.space();
		}
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/index.js
var require_generators = __commonJS({ "node_modules/@babel/generator/lib/generators/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _templateLiterals = require_template_literals();
	Object.keys(_templateLiterals).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _templateLiterals[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _templateLiterals[key];
			}
		});
	});
	var _expressions = require_expressions();
	Object.keys(_expressions).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _expressions[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _expressions[key];
			}
		});
	});
	var _statements = require_statements();
	Object.keys(_statements).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _statements[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _statements[key];
			}
		});
	});
	var _classes = require_classes();
	Object.keys(_classes).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _classes[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _classes[key];
			}
		});
	});
	var _methods = require_methods();
	Object.keys(_methods).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _methods[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _methods[key];
			}
		});
	});
	var _modules = require_modules();
	Object.keys(_modules).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _modules[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _modules[key];
			}
		});
	});
	var _types = require_types();
	Object.keys(_types).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _types[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _types[key];
			}
		});
	});
	var _flow = require_flow();
	Object.keys(_flow).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _flow[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _flow[key];
			}
		});
	});
	var _base = require_base();
	Object.keys(_base).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _base[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _base[key];
			}
		});
	});
	var _jsx = require_jsx();
	Object.keys(_jsx).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _jsx[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _jsx[key];
			}
		});
	});
	var _typescript = require_typescript();
	Object.keys(_typescript).forEach(function(key) {
		if (key === "default" || key === "__esModule") return;
		if (key in exports && exports[key] === _typescript[key]) return;
		Object.defineProperty(exports, key, {
			enumerable: true,
			get: function() {
				return _typescript[key];
			}
		});
	});
} });

//#endregion
//#region node_modules/@babel/generator/lib/generators/deprecated.js
var require_deprecated = __commonJS({ "node_modules/@babel/generator/lib/generators/deprecated.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.addDeprecatedGenerators = addDeprecatedGenerators;
	function addDeprecatedGenerators(PrinterClass) {
		{
			const deprecatedBabel7Generators = {
				Noop() {},
				TSExpressionWithTypeArguments(node) {
					this.print(node.expression);
					this.print(node.typeParameters);
				},
				DecimalLiteral(node) {
					const raw = this.getPossibleRaw(node);
					if (!this.format.minified && raw !== void 0) {
						this.word(raw);
						return;
					}
					this.word(node.value + "m");
				}
			};
			Object.assign(PrinterClass.prototype, deprecatedBabel7Generators);
		}
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/printer.js
var require_printer = __commonJS({ "node_modules/@babel/generator/lib/printer.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _buffer = require_buffer();
	var n$2 = require_node();
	var _t$20 = require_lib$4();
	var _tokenMap = require_token_map();
	var generatorFunctions = require_generators();
	var _deprecated = require_deprecated();
	const { isExpression: isExpression$3, isFunction: isFunction$2, isStatement: isStatement$3, isClassBody, isTSInterfaceBody, isTSEnumMember } = _t$20;
	const SCIENTIFIC_NOTATION = /e/i;
	const ZERO_DECIMAL_INTEGER = /\.0+$/;
	const HAS_NEWLINE = /[\n\r\u2028\u2029]/;
	const HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
	function commentIsNewline(c$2) {
		return c$2.type === "CommentLine" || HAS_NEWLINE.test(c$2.value);
	}
	const { needsParens } = n$2;
	var Printer = class {
		constructor(format, map, tokens$3, originalCode) {
			this.inForStatementInit = false;
			this.tokenContext = 0;
			this._tokens = null;
			this._originalCode = null;
			this._currentNode = null;
			this._indent = 0;
			this._indentRepeat = 0;
			this._insideAux = false;
			this._noLineTerminator = false;
			this._noLineTerminatorAfterNode = null;
			this._printAuxAfterOnNextUserNode = false;
			this._printedComments = new Set();
			this._endsWithInteger = false;
			this._endsWithWord = false;
			this._endsWithDiv = false;
			this._lastCommentLine = 0;
			this._endsWithInnerRaw = false;
			this._indentInnerComments = true;
			this.tokenMap = null;
			this._boundGetRawIdentifier = this._getRawIdentifier.bind(this);
			this._printSemicolonBeforeNextNode = -1;
			this._printSemicolonBeforeNextToken = -1;
			this.format = format;
			this._tokens = tokens$3;
			this._originalCode = originalCode;
			this._indentRepeat = format.indent.style.length;
			this._inputMap = map == null ? void 0 : map._inputMap;
			this._buf = new _buffer.default(map, format.indent.style[0]);
		}
		enterForStatementInit() {
			if (this.inForStatementInit) return () => {};
			this.inForStatementInit = true;
			return () => {
				this.inForStatementInit = false;
			};
		}
		enterDelimited() {
			const oldInForStatementInit = this.inForStatementInit;
			const oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
			if (oldInForStatementInit === false && oldNoLineTerminatorAfterNode === null) return () => {};
			this.inForStatementInit = false;
			this._noLineTerminatorAfterNode = null;
			return () => {
				this.inForStatementInit = oldInForStatementInit;
				this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
			};
		}
		generate(ast) {
			if (this.format.preserveFormat) this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode);
			this.print(ast);
			this._maybeAddAuxComment();
			return this._buf.get();
		}
		indent() {
			const { format } = this;
			if (format.preserveFormat || format.compact || format.concise) return;
			this._indent++;
		}
		dedent() {
			const { format } = this;
			if (format.preserveFormat || format.compact || format.concise) return;
			this._indent--;
		}
		semicolon(force = false) {
			this._maybeAddAuxComment();
			if (force) {
				this._appendChar(59);
				this._noLineTerminator = false;
				return;
			}
			if (this.tokenMap) {
				const node = this._currentNode;
				if (node.start != null && node.end != null) {
					if (!this.tokenMap.endMatches(node, ";")) {
						this._printSemicolonBeforeNextNode = this._buf.getCurrentLine();
						return;
					}
					const indexes = this.tokenMap.getIndexes(this._currentNode);
					this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
				}
			}
			this._queue(59);
			this._noLineTerminator = false;
		}
		rightBrace(node) {
			if (this.format.minified) this._buf.removeLastSemicolon();
			this.sourceWithOffset("end", node.loc, -1);
			this.tokenChar(125);
		}
		rightParens(node) {
			this.sourceWithOffset("end", node.loc, -1);
			this.tokenChar(41);
		}
		space(force = false) {
			const { format } = this;
			if (format.compact || format.preserveFormat) return;
			if (force) this._space();
			else if (this._buf.hasContent()) {
				const lastCp = this.getLastChar();
				if (lastCp !== 32 && lastCp !== 10) this._space();
			}
		}
		word(str$4, noLineTerminatorAfter = false) {
			this.tokenContext = 0;
			this._maybePrintInnerComments(str$4);
			this._maybeAddAuxComment();
			if (this.tokenMap) this._catchUpToCurrentToken(str$4);
			if (this._endsWithWord || this._endsWithDiv && str$4.charCodeAt(0) === 47) this._space();
			this._append(str$4, false);
			this._endsWithWord = true;
			this._noLineTerminator = noLineTerminatorAfter;
		}
		number(str$4, number) {
			function isNonDecimalLiteral(str$5) {
				if (str$5.length > 2 && str$5.charCodeAt(0) === 48) {
					const secondChar = str$5.charCodeAt(1);
					return secondChar === 98 || secondChar === 111 || secondChar === 120;
				}
				return false;
			}
			this.word(str$4);
			this._endsWithInteger = Number.isInteger(number) && !isNonDecimalLiteral(str$4) && !SCIENTIFIC_NOTATION.test(str$4) && !ZERO_DECIMAL_INTEGER.test(str$4) && str$4.charCodeAt(str$4.length - 1) !== 46;
		}
		token(str$4, maybeNewline = false, occurrenceCount = 0) {
			this.tokenContext = 0;
			this._maybePrintInnerComments(str$4, occurrenceCount);
			this._maybeAddAuxComment();
			if (this.tokenMap) this._catchUpToCurrentToken(str$4, occurrenceCount);
			const lastChar = this.getLastChar();
			const strFirst = str$4.charCodeAt(0);
			if (lastChar === 33 && (str$4 === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) this._space();
			this._append(str$4, maybeNewline);
			this._noLineTerminator = false;
		}
		tokenChar(char) {
			this.tokenContext = 0;
			const str$4 = String.fromCharCode(char);
			this._maybePrintInnerComments(str$4);
			this._maybeAddAuxComment();
			if (this.tokenMap) this._catchUpToCurrentToken(str$4);
			const lastChar = this.getLastChar();
			if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) this._space();
			this._appendChar(char);
			this._noLineTerminator = false;
		}
		newline(i$6 = 1, force) {
			if (i$6 <= 0) return;
			if (!force) {
				if (this.format.retainLines || this.format.compact) return;
				if (this.format.concise) {
					this.space();
					return;
				}
			}
			if (i$6 > 2) i$6 = 2;
			i$6 -= this._buf.getNewlineCount();
			for (let j$1 = 0; j$1 < i$6; j$1++) this._newline();
			return;
		}
		endsWith(char) {
			return this.getLastChar() === char;
		}
		getLastChar() {
			return this._buf.getLastChar();
		}
		endsWithCharAndNewline() {
			return this._buf.endsWithCharAndNewline();
		}
		removeTrailingNewline() {
			this._buf.removeTrailingNewline();
		}
		exactSource(loc, cb) {
			if (!loc) {
				cb();
				return;
			}
			this._catchUp("start", loc);
			this._buf.exactSource(loc, cb);
		}
		source(prop, loc) {
			if (!loc) return;
			this._catchUp(prop, loc);
			this._buf.source(prop, loc);
		}
		sourceWithOffset(prop, loc, columnOffset) {
			if (!loc || this.format.preserveFormat) return;
			this._catchUp(prop, loc);
			this._buf.sourceWithOffset(prop, loc, columnOffset);
		}
		sourceIdentifierName(identifierName, pos) {
			if (!this._buf._canMarkIdName) return;
			const sourcePosition = this._buf._sourcePosition;
			sourcePosition.identifierNamePos = pos;
			sourcePosition.identifierName = identifierName;
		}
		_space() {
			this._queue(32);
		}
		_newline() {
			this._queue(10);
		}
		_catchUpToCurrentToken(str$4, occurrenceCount = 0) {
			const token$1 = this.tokenMap.findMatching(this._currentNode, str$4, occurrenceCount);
			if (token$1) this._catchUpTo(token$1.loc.start);
			if (this._printSemicolonBeforeNextToken !== -1 && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine()) {
				this._buf.appendChar(59);
				this._endsWithWord = false;
				this._endsWithInteger = false;
				this._endsWithDiv = false;
			}
			this._printSemicolonBeforeNextToken = -1;
			this._printSemicolonBeforeNextNode = -1;
		}
		_append(str$4, maybeNewline) {
			this._maybeIndent(str$4.charCodeAt(0));
			this._buf.append(str$4, maybeNewline);
			this._endsWithWord = false;
			this._endsWithInteger = false;
			this._endsWithDiv = false;
		}
		_appendChar(char) {
			this._maybeIndent(char);
			this._buf.appendChar(char);
			this._endsWithWord = false;
			this._endsWithInteger = false;
			this._endsWithDiv = false;
		}
		_queue(char) {
			this._maybeIndent(char);
			this._buf.queue(char);
			this._endsWithWord = false;
			this._endsWithInteger = false;
		}
		_maybeIndent(firstChar) {
			if (this._indent && firstChar !== 10 && this.endsWith(10)) this._buf.queueIndentation(this._getIndent());
		}
		_shouldIndent(firstChar) {
			if (this._indent && firstChar !== 10 && this.endsWith(10)) return true;
		}
		catchUp(line) {
			if (!this.format.retainLines) return;
			const count = line - this._buf.getCurrentLine();
			for (let i$6 = 0; i$6 < count; i$6++) this._newline();
		}
		_catchUp(prop, loc) {
			const { format } = this;
			if (!format.preserveFormat) {
				if (format.retainLines && loc != null && loc[prop]) this.catchUp(loc[prop].line);
				return;
			}
			const pos = loc == null ? void 0 : loc[prop];
			if (pos != null) this._catchUpTo(pos);
		}
		_catchUpTo({ line, column, index: index$1 }) {
			const count = line - this._buf.getCurrentLine();
			if (count > 0 && this._noLineTerminator) return;
			for (let i$6 = 0; i$6 < count; i$6++) this._newline();
			const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();
			if (spacesCount > 0) {
				const spaces = this._originalCode ? this._originalCode.slice(index$1 - spacesCount, index$1).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
				this._append(spaces, false);
			}
		}
		_getIndent() {
			return this._indentRepeat * this._indent;
		}
		printTerminatorless(node) {
			this._noLineTerminator = true;
			this.print(node);
		}
		print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {
			var _node$extra, _node$leadingComments, _node$leadingComments2;
			if (!node) return;
			this._endsWithInnerRaw = false;
			const nodeType = node.type;
			const format = this.format;
			const oldConcise = format.concise;
			if (node._compact) format.concise = true;
			const printMethod = this[nodeType];
			if (printMethod === void 0) throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
			const parent = this._currentNode;
			this._currentNode = node;
			if (this.tokenMap) this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode;
			const oldInAux = this._insideAux;
			this._insideAux = node.loc == null;
			this._maybeAddAuxComment(this._insideAux && !oldInAux);
			const parenthesized = (_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized;
			let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format.preserveFormat ? this._boundGetRawIdentifier : void 0);
			if (!shouldPrintParens && parenthesized && (_node$leadingComments = node.leadingComments) != null && _node$leadingComments.length && node.leadingComments[0].type === "CommentBlock") {
				const parentType = parent == null ? void 0 : parent.type;
				switch (parentType) {
					case "ExpressionStatement":
					case "VariableDeclarator":
					case "AssignmentExpression":
					case "ReturnStatement": break;
					case "CallExpression":
					case "OptionalCallExpression":
					case "NewExpression": if (parent.callee !== node) break;
					default: shouldPrintParens = true;
				}
			}
			let indentParenthesized = false;
			if (!shouldPrintParens && this._noLineTerminator && ((_node$leadingComments2 = node.leadingComments) != null && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine())) {
				shouldPrintParens = true;
				indentParenthesized = true;
			}
			let oldNoLineTerminatorAfterNode;
			let oldInForStatementInitWasTrue;
			if (!shouldPrintParens) {
				noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n$2.isLastChild(parent, node));
				if (noLineTerminatorAfter) {
					var _node$trailingComment;
					if ((_node$trailingComment = node.trailingComments) != null && _node$trailingComment.some(commentIsNewline)) {
						if (isExpression$3(node)) shouldPrintParens = true;
					} else {
						oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
						this._noLineTerminatorAfterNode = node;
					}
				}
			}
			if (shouldPrintParens) {
				this.tokenChar(40);
				if (indentParenthesized) this.indent();
				this._endsWithInnerRaw = false;
				if (this.inForStatementInit) {
					oldInForStatementInitWasTrue = true;
					this.inForStatementInit = false;
				}
				oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
				this._noLineTerminatorAfterNode = null;
			}
			this._lastCommentLine = 0;
			this._printLeadingComments(node, parent);
			const loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;
			this.exactSource(loc, printMethod.bind(this, node, parent));
			if (shouldPrintParens) {
				this._printTrailingComments(node, parent);
				if (indentParenthesized) {
					this.dedent();
					this.newline();
				}
				this.tokenChar(41);
				this._noLineTerminator = noLineTerminatorAfter;
				if (oldInForStatementInitWasTrue) this.inForStatementInit = true;
			} else if (noLineTerminatorAfter && !this._noLineTerminator) {
				this._noLineTerminator = true;
				this._printTrailingComments(node, parent);
			} else this._printTrailingComments(node, parent, trailingCommentsLineOffset);
			this._currentNode = parent;
			format.concise = oldConcise;
			this._insideAux = oldInAux;
			if (oldNoLineTerminatorAfterNode !== void 0) this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
			this._endsWithInnerRaw = false;
		}
		_maybeAddAuxComment(enteredPositionlessNode) {
			if (enteredPositionlessNode) this._printAuxBeforeComment();
			if (!this._insideAux) this._printAuxAfterComment();
		}
		_printAuxBeforeComment() {
			if (this._printAuxAfterOnNextUserNode) return;
			this._printAuxAfterOnNextUserNode = true;
			const comment$7 = this.format.auxiliaryCommentBefore;
			if (comment$7) this._printComment({
				type: "CommentBlock",
				value: comment$7
			}, 0);
		}
		_printAuxAfterComment() {
			if (!this._printAuxAfterOnNextUserNode) return;
			this._printAuxAfterOnNextUserNode = false;
			const comment$7 = this.format.auxiliaryCommentAfter;
			if (comment$7) this._printComment({
				type: "CommentBlock",
				value: comment$7
			}, 0);
		}
		getPossibleRaw(node) {
			const extra = node.extra;
			if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node.value === extra.rawValue) return extra.raw;
		}
		printJoin(nodes$1, statement$2, indent, separator, printTrailingSeparator, addNewlines, iterator, trailingCommentsLineOffset) {
			if (!(nodes$1 != null && nodes$1.length)) return;
			if (indent == null && this.format.retainLines) {
				var _nodes$0$loc;
				const startLine = (_nodes$0$loc = nodes$1[0].loc) == null ? void 0 : _nodes$0$loc.start.line;
				if (startLine != null && startLine !== this._buf.getCurrentLine()) indent = true;
			}
			if (indent) this.indent();
			const newlineOpts = {
				addNewlines,
				nextNodeStartLine: 0
			};
			const boundSeparator = separator == null ? void 0 : separator.bind(this);
			const len = nodes$1.length;
			for (let i$6 = 0; i$6 < len; i$6++) {
				const node = nodes$1[i$6];
				if (!node) continue;
				if (statement$2) this._printNewline(i$6 === 0, newlineOpts);
				this.print(node, void 0, trailingCommentsLineOffset || 0);
				iterator?.(node, i$6);
				if (boundSeparator != null) {
					if (i$6 < len - 1) boundSeparator(i$6, false);
					else if (printTrailingSeparator) boundSeparator(i$6, true);
				}
				if (statement$2) {
					var _node$trailingComment2;
					if (!((_node$trailingComment2 = node.trailingComments) != null && _node$trailingComment2.length)) this._lastCommentLine = 0;
					if (i$6 + 1 === len) this.newline(1);
					else {
						var _nextNode$loc;
						const nextNode = nodes$1[i$6 + 1];
						newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;
						this._printNewline(true, newlineOpts);
					}
				}
			}
			if (indent) this.dedent();
		}
		printAndIndentOnComments(node) {
			const indent = node.leadingComments && node.leadingComments.length > 0;
			if (indent) this.indent();
			this.print(node);
			if (indent) this.dedent();
		}
		printBlock(parent) {
			const node = parent.body;
			if (node.type !== "EmptyStatement") this.space();
			this.print(node);
		}
		_printTrailingComments(node, parent, lineOffset) {
			const { innerComments, trailingComments } = node;
			if (innerComments != null && innerComments.length) this._printComments(2, innerComments, node, parent, lineOffset);
			if (trailingComments != null && trailingComments.length) this._printComments(2, trailingComments, node, parent, lineOffset);
		}
		_printLeadingComments(node, parent) {
			const comments = node.leadingComments;
			if (!(comments != null && comments.length)) return;
			this._printComments(0, comments, node, parent);
		}
		_maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
			if (this._endsWithInnerRaw) {
				var _this$tokenMap;
				this.printInnerComments((_this$tokenMap = this.tokenMap) == null ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
			}
			this._endsWithInnerRaw = true;
			this._indentInnerComments = true;
		}
		printInnerComments(nextToken) {
			const node = this._currentNode;
			const comments = node.innerComments;
			if (!(comments != null && comments.length)) return;
			const hasSpace = this.endsWith(32);
			const indent = this._indentInnerComments;
			const printedCommentsCount = this._printedComments.size;
			if (indent) this.indent();
			this._printComments(1, comments, node, void 0, void 0, nextToken);
			if (hasSpace && printedCommentsCount !== this._printedComments.size) this.space();
			if (indent) this.dedent();
		}
		noIndentInnerCommentsHere() {
			this._indentInnerComments = false;
		}
		printSequence(nodes$1, indent, trailingCommentsLineOffset, addNewlines) {
			this.printJoin(nodes$1, true, indent != null ? indent : false, void 0, void 0, addNewlines, void 0, trailingCommentsLineOffset);
		}
		printList(items, printTrailingSeparator, statement$2, indent, separator, iterator) {
			this.printJoin(items, statement$2, indent, separator != null ? separator : commaSeparator, printTrailingSeparator, void 0, iterator);
		}
		shouldPrintTrailingComma(listEnd) {
			if (!this.tokenMap) return null;
			const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token$1) => this.tokenMap.matchesOriginal(token$1, listEnd));
			if (listEndIndex <= 0) return null;
			return this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
		}
		_printNewline(newLine, opts) {
			const format = this.format;
			if (format.retainLines || format.compact) return;
			if (format.concise) {
				this.space();
				return;
			}
			if (!newLine) return;
			const startLine = opts.nextNodeStartLine;
			const lastCommentLine = this._lastCommentLine;
			if (startLine > 0 && lastCommentLine > 0) {
				const offset = startLine - lastCommentLine;
				if (offset >= 0) {
					this.newline(offset || 1);
					return;
				}
			}
			if (this._buf.hasContent()) this.newline(1);
		}
		_shouldPrintComment(comment$7, nextToken) {
			if (comment$7.ignore) return 0;
			if (this._printedComments.has(comment$7)) return 0;
			if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment$7.value)) return 2;
			if (nextToken && this.tokenMap) {
				const commentTok = this.tokenMap.find(this._currentNode, (token$1) => token$1.value === comment$7.value);
				if (commentTok && commentTok.start > nextToken.start) return 2;
			}
			this._printedComments.add(comment$7);
			if (!this.format.shouldPrintComment(comment$7.value)) return 0;
			return 1;
		}
		_printComment(comment$7, skipNewLines) {
			const noLineTerminator = this._noLineTerminator;
			const isBlockComment = comment$7.type === "CommentBlock";
			const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
			if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) this.newline(1);
			const lastCharCode = this.getLastChar();
			if (lastCharCode !== 91 && lastCharCode !== 123 && lastCharCode !== 40) this.space();
			let val;
			if (isBlockComment) {
				val = `/*${comment$7.value}*/`;
				if (this.format.indent.adjustMultilineComment) {
					var _comment$loc;
					const offset = (_comment$loc = comment$7.loc) == null ? void 0 : _comment$loc.start.column;
					if (offset) {
						const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
						val = val.replace(newlineRegex, "\n");
					}
					if (this.format.concise) val = val.replace(/\n(?!$)/g, `\n`);
					else {
						let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
						if (this._shouldIndent(47) || this.format.retainLines) indentSize += this._getIndent();
						val = val.replace(/\n(?!$)/g, `\n${" ".repeat(indentSize)}`);
					}
				}
			} else if (!noLineTerminator) val = `//${comment$7.value}`;
			else val = `/*${comment$7.value}*/`;
			if (this._endsWithDiv) this._space();
			if (this.tokenMap) {
				const { _printSemicolonBeforeNextToken, _printSemicolonBeforeNextNode } = this;
				this._printSemicolonBeforeNextToken = -1;
				this._printSemicolonBeforeNextNode = -1;
				this.source("start", comment$7.loc);
				this._append(val, isBlockComment);
				this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode;
				this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
			} else {
				this.source("start", comment$7.loc);
				this._append(val, isBlockComment);
			}
			if (!isBlockComment && !noLineTerminator) this.newline(1, true);
			if (printNewLines && skipNewLines !== 3) this.newline(1);
		}
		_printComments(type, comments, node, parent, lineOffset = 0, nextToken) {
			const nodeLoc = node.loc;
			const len = comments.length;
			let hasLoc = !!nodeLoc;
			const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;
			const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
			let lastLine = 0;
			let leadingCommentNewline = 0;
			const maybeNewline = this._noLineTerminator ? function() {} : this.newline.bind(this);
			for (let i$6 = 0; i$6 < len; i$6++) {
				const comment$7 = comments[i$6];
				const shouldPrint = this._shouldPrintComment(comment$7, nextToken);
				if (shouldPrint === 2) {
					hasLoc = false;
					break;
				}
				if (hasLoc && comment$7.loc && shouldPrint === 1) {
					const commentStartLine = comment$7.loc.start.line;
					const commentEndLine = comment$7.loc.end.line;
					if (type === 0) {
						let offset = 0;
						if (i$6 === 0) {
							if (this._buf.hasContent() && (comment$7.type === "CommentLine" || commentStartLine !== commentEndLine)) offset = leadingCommentNewline = 1;
						} else offset = commentStartLine - lastLine;
						lastLine = commentEndLine;
						maybeNewline(offset);
						this._printComment(comment$7, 1);
						if (i$6 + 1 === len) {
							maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));
							lastLine = nodeStartLine;
						}
					} else if (type === 1) {
						const offset = commentStartLine - (i$6 === 0 ? nodeStartLine : lastLine);
						lastLine = commentEndLine;
						maybeNewline(offset);
						this._printComment(comment$7, 1);
						if (i$6 + 1 === len) {
							maybeNewline(Math.min(1, nodeEndLine - lastLine));
							lastLine = nodeEndLine;
						}
					} else {
						const offset = commentStartLine - (i$6 === 0 ? nodeEndLine - lineOffset : lastLine);
						lastLine = commentEndLine;
						maybeNewline(offset);
						this._printComment(comment$7, 1);
					}
				} else {
					hasLoc = false;
					if (shouldPrint !== 1) continue;
					if (len === 1) {
						const singleLine = comment$7.loc ? comment$7.loc.start.line === comment$7.loc.end.line : !HAS_NEWLINE.test(comment$7.value);
						const shouldSkipNewline = singleLine && !isStatement$3(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumMember(node);
						if (type === 0) this._printComment(comment$7, shouldSkipNewline && node.type !== "ObjectExpression" || singleLine && isFunction$2(parent, { body: node }) ? 1 : 0);
						else if (shouldSkipNewline && type === 2) this._printComment(comment$7, 1);
						else this._printComment(comment$7, 0);
					} else if (type === 1 && !(node.type === "ObjectExpression" && node.properties.length > 1) && node.type !== "ClassBody" && node.type !== "TSInterfaceBody") this._printComment(comment$7, i$6 === 0 ? 2 : i$6 === len - 1 ? 3 : 0);
					else this._printComment(comment$7, 0);
				}
			}
			if (type === 2 && hasLoc && lastLine) this._lastCommentLine = lastLine;
		}
	};
	Object.assign(Printer.prototype, generatorFunctions);
	(0, _deprecated.addDeprecatedGenerators)(Printer);
	var _default$4 = exports.default = Printer;
	function commaSeparator(occurrenceCount, last$2) {
		this.token(",", false, occurrenceCount);
		if (!last$2) this.space();
	}
} });

//#endregion
//#region node_modules/@babel/generator/lib/index.js
var require_lib$3 = __commonJS({ "node_modules/@babel/generator/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	exports.generate = generate;
	var _sourceMap = require_source_map();
	var _printer = require_printer();
	function normalizeOptions(code$1, opts, ast) {
		if (opts.experimental_preserveFormat) {
			if (typeof code$1 !== "string") throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
			if (!opts.retainLines) throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
			if (opts.compact && opts.compact !== "auto") throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
			if (opts.minified) throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
			if (opts.jsescOption) throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
			if (!Array.isArray(ast.tokens)) throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
		}
		const format = {
			auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
			auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
			shouldPrintComment: opts.shouldPrintComment,
			preserveFormat: opts.experimental_preserveFormat,
			retainLines: opts.retainLines,
			retainFunctionParens: opts.retainFunctionParens,
			comments: opts.comments == null || opts.comments,
			compact: opts.compact,
			minified: opts.minified,
			concise: opts.concise,
			indent: {
				adjustMultilineComment: true,
				style: "  "
			},
			jsescOption: Object.assign({
				quotes: "double",
				wrap: true,
				minimal: false
			}, opts.jsescOption),
			topicToken: opts.topicToken,
			importAttributesKeyword: opts.importAttributesKeyword
		};
		{
			var _opts$recordAndTupleS;
			format.decoratorsBeforeExport = opts.decoratorsBeforeExport;
			format.jsescOption.json = opts.jsonCompatibleStrings;
			format.recordAndTupleSyntaxType = (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash";
		}
		if (format.minified) {
			format.compact = true;
			format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
		} else format.shouldPrintComment = format.shouldPrintComment || ((value) => format.comments || value.includes("@license") || value.includes("@preserve"));
		if (format.compact === "auto") {
			format.compact = typeof code$1 === "string" && code$1.length > 5e5;
			if (format.compact) console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`);
		}
		if (format.compact || format.preserveFormat) format.indent.adjustMultilineComment = false;
		const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format;
		if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) format.auxiliaryCommentBefore = void 0;
		if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) format.auxiliaryCommentAfter = void 0;
		return format;
	}
	exports.CodeGenerator = class CodeGenerator {
		constructor(ast, opts = {}, code$1) {
			this._ast = void 0;
			this._format = void 0;
			this._map = void 0;
			this._ast = ast;
			this._format = normalizeOptions(code$1, opts, ast);
			this._map = opts.sourceMaps ? new _sourceMap.default(opts, code$1) : null;
		}
		generate() {
			const printer$1 = new _printer.default(this._format, this._map);
			return printer$1.generate(this._ast);
		}
	};
	function generate(ast, opts = {}, code$1) {
		const format = normalizeOptions(code$1, opts, ast);
		const map = opts.sourceMaps ? new _sourceMap.default(opts, code$1) : null;
		const printer$1 = new _printer.default(format, map, ast.tokens, typeof code$1 === "string" ? code$1 : null);
		return printer$1.generate(ast);
	}
	var _default$3 = exports.default = generate;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/ancestry.js
var require_ancestry = __commonJS({ "node_modules/@babel/traverse/lib/path/ancestry.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.find = find;
	exports.findParent = findParent;
	exports.getAncestry = getAncestry;
	exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	exports.getFunctionParent = getFunctionParent;
	exports.getStatementParent = getStatementParent;
	exports.inType = inType;
	exports.isAncestor = isAncestor;
	exports.isDescendant = isDescendant;
	var _t$19 = require_lib$4();
	const { VISITOR_KEYS: VISITOR_KEYS$4 } = _t$19;
	function findParent(callback) {
		let path$28 = this;
		while (path$28 = path$28.parentPath) if (callback(path$28)) return path$28;
		return null;
	}
	function find(callback) {
		let path$28 = this;
		do
			if (callback(path$28)) return path$28;
		while (path$28 = path$28.parentPath);
		return null;
	}
	function getFunctionParent() {
		return this.findParent((p$2) => p$2.isFunction());
	}
	function getStatementParent() {
		let path$28 = this;
		do
			if (!path$28.parentPath || Array.isArray(path$28.container) && path$28.isStatement()) break;
			else path$28 = path$28.parentPath;
		while (path$28);
		if (path$28 && (path$28.isProgram() || path$28.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
		return path$28;
	}
	function getEarliestCommonAncestorFrom(paths) {
		return this.getDeepestCommonAncestorFrom(paths, function(deepest, i$6, ancestries) {
			let earliest;
			const keys$1 = VISITOR_KEYS$4[deepest.type];
			for (const ancestry of ancestries) {
				const path$28 = ancestry[i$6 + 1];
				if (!earliest) {
					earliest = path$28;
					continue;
				}
				if (path$28.listKey && earliest.listKey === path$28.listKey) {
					if (path$28.key < earliest.key) {
						earliest = path$28;
						continue;
					}
				}
				const earliestKeyIndex = keys$1.indexOf(earliest.parentKey);
				const currentKeyIndex = keys$1.indexOf(path$28.parentKey);
				if (earliestKeyIndex > currentKeyIndex) earliest = path$28;
			}
			return earliest;
		});
	}
	function getDeepestCommonAncestorFrom(paths, filter$2) {
		if (!paths.length) return this;
		if (paths.length === 1) return paths[0];
		let minDepth = Infinity;
		let lastCommonIndex, lastCommon;
		const ancestries = paths.map((path$28) => {
			const ancestry = [];
			do
				ancestry.unshift(path$28);
			while ((path$28 = path$28.parentPath) && path$28 !== this);
			if (ancestry.length < minDepth) minDepth = ancestry.length;
			return ancestry;
		});
		const first = ancestries[0];
		depthLoop: for (let i$6 = 0; i$6 < minDepth; i$6++) {
			const shouldMatch = first[i$6];
			for (const ancestry of ancestries) if (ancestry[i$6] !== shouldMatch) break depthLoop;
			lastCommonIndex = i$6;
			lastCommon = shouldMatch;
		}
		if (lastCommon) if (filter$2) return filter$2(lastCommon, lastCommonIndex, ancestries);
		else return lastCommon;
		else throw new Error("Couldn't find intersection");
	}
	function getAncestry() {
		let path$28 = this;
		const paths = [];
		do
			paths.push(path$28);
		while (path$28 = path$28.parentPath);
		return paths;
	}
	function isAncestor(maybeDescendant) {
		return maybeDescendant.isDescendant(this);
	}
	function isDescendant(maybeAncestor) {
		return !!this.findParent((parent) => parent === maybeAncestor);
	}
	function inType(...candidateTypes) {
		let path$28 = this;
		while (path$28) {
			if (candidateTypes.includes(path$28.node.type)) return true;
			path$28 = path$28.parentPath;
		}
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/inference/util.js
var require_util = __commonJS({ "node_modules/@babel/traverse/lib/path/inference/util.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createUnionType = createUnionType;
	var _t$18 = require_lib$4();
	const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t$18;
	function createUnionType(types$7) {
		if (types$7.every((v$1) => isFlowType(v$1))) {
			if (createFlowUnionType) return createFlowUnionType(types$7);
			return createUnionTypeAnnotation(types$7);
		} else if (types$7.every((v$1) => isTSType(v$1))) {
			if (createTSUnionType) return createTSUnionType(types$7);
		}
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/inference/inferer-reference.js
var require_inferer_reference = __commonJS({ "node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = _default$2;
	var _t$17 = require_lib$4();
	var _util$1 = require_util();
	const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation: numberTypeAnnotation$1, voidTypeAnnotation: voidTypeAnnotation$2 } = _t$17;
	function _default$2(node) {
		if (!this.isReferenced()) return;
		const binding = this.scope.getBinding(node.name);
		if (binding) if (binding.identifier.typeAnnotation) return binding.identifier.typeAnnotation;
		else return getTypeAnnotationBindingConstantViolations(binding, this, node.name);
		if (node.name === "undefined") return voidTypeAnnotation$2();
		else if (node.name === "NaN" || node.name === "Infinity") return numberTypeAnnotation$1();
		else if (node.name === "arguments") {}
	}
	function getTypeAnnotationBindingConstantViolations(binding, path$28, name) {
		const types$7 = [];
		const functionConstantViolations = [];
		let constantViolations = getConstantViolationsBefore(binding, path$28, functionConstantViolations);
		const testType = getConditionalAnnotation(binding, path$28, name);
		if (testType) {
			const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
			constantViolations = constantViolations.filter((path$29) => !testConstantViolations.includes(path$29));
			types$7.push(testType.typeAnnotation);
		}
		if (constantViolations.length) {
			constantViolations.push(...functionConstantViolations);
			for (const violation of constantViolations) types$7.push(violation.getTypeAnnotation());
		}
		if (!types$7.length) return;
		return (0, _util$1.createUnionType)(types$7);
	}
	function getConstantViolationsBefore(binding, path$28, functions) {
		const violations = binding.constantViolations.slice();
		violations.unshift(binding.path);
		return violations.filter((violation) => {
			violation = violation.resolve();
			const status = violation._guessExecutionStatusRelativeTo(path$28);
			if (functions && status === "unknown") functions.push(violation);
			return status === "before";
		});
	}
	function inferAnnotationFromBinaryExpression(name, path$28) {
		const operator$1 = path$28.node.operator;
		const right = path$28.get("right").resolve();
		const left = path$28.get("left").resolve();
		let target;
		if (left.isIdentifier({ name })) target = right;
		else if (right.isIdentifier({ name })) target = left;
		if (target) {
			if (operator$1 === "===") return target.getTypeAnnotation();
			if (BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator$1)) return numberTypeAnnotation$1();
			return;
		}
		if (operator$1 !== "===" && operator$1 !== "==") return;
		let typeofPath;
		let typePath;
		if (left.isUnaryExpression({ operator: "typeof" })) {
			typeofPath = left;
			typePath = right;
		} else if (right.isUnaryExpression({ operator: "typeof" })) {
			typeofPath = right;
			typePath = left;
		}
		if (!typeofPath) return;
		if (!typeofPath.get("argument").isIdentifier({ name })) return;
		typePath = typePath.resolve();
		if (!typePath.isLiteral()) return;
		const typeValue = typePath.node.value;
		if (typeof typeValue !== "string") return;
		return createTypeAnnotationBasedOnTypeof(typeValue);
	}
	function getParentConditionalPath(binding, path$28, name) {
		let parentPath;
		while (parentPath = path$28.parentPath) {
			if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
				if (path$28.key === "test") return;
				return parentPath;
			}
			if (parentPath.isFunction()) {
				if (parentPath.parentPath.scope.getBinding(name) !== binding) return;
			}
			path$28 = parentPath;
		}
	}
	function getConditionalAnnotation(binding, path$28, name) {
		const ifStatement$1 = getParentConditionalPath(binding, path$28, name);
		if (!ifStatement$1) return;
		const test = ifStatement$1.get("test");
		const paths = [test];
		const types$7 = [];
		for (let i$6 = 0; i$6 < paths.length; i$6++) {
			const path$29 = paths[i$6];
			if (path$29.isLogicalExpression()) {
				if (path$29.node.operator === "&&") {
					paths.push(path$29.get("left"));
					paths.push(path$29.get("right"));
				}
			} else if (path$29.isBinaryExpression()) {
				const type = inferAnnotationFromBinaryExpression(name, path$29);
				if (type) types$7.push(type);
			}
		}
		if (types$7.length) return {
			typeAnnotation: (0, _util$1.createUnionType)(types$7),
			ifStatement: ifStatement$1
		};
		return getConditionalAnnotation(binding, ifStatement$1, name);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/inference/inferers.js
var require_inferers = __commonJS({ "node_modules/@babel/traverse/lib/path/inference/inferers.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ArrayExpression = ArrayExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.BooleanLiteral = BooleanLiteral;
	exports.CallExpression = CallExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
	Object.defineProperty(exports, "Identifier", {
		enumerable: true,
		get: function() {
			return _infererReference.default;
		}
	});
	exports.LogicalExpression = LogicalExpression;
	exports.NewExpression = NewExpression;
	exports.NullLiteral = NullLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.ObjectExpression = ObjectExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.RegExpLiteral = RegExpLiteral;
	exports.RestElement = RestElement;
	exports.SequenceExpression = SequenceExpression;
	exports.StringLiteral = StringLiteral;
	exports.TSAsExpression = TSAsExpression;
	exports.TSNonNullExpression = TSNonNullExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.TypeCastExpression = TypeCastExpression;
	exports.UnaryExpression = UnaryExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.VariableDeclarator = VariableDeclarator;
	var _t$16 = require_lib$4();
	var _infererReference = require_inferer_reference();
	var _util = require_util();
	const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation: anyTypeAnnotation$1, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier: identifier$3, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation: stringTypeAnnotation$1, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation: voidTypeAnnotation$1, isIdentifier: isIdentifier$5 } = _t$16;
	function VariableDeclarator() {
		if (!this.get("id").isIdentifier()) return;
		return this.get("init").getTypeAnnotation();
	}
	function TypeCastExpression(node) {
		return node.typeAnnotation;
	}
	TypeCastExpression.validParent = true;
	function TSAsExpression(node) {
		return node.typeAnnotation;
	}
	TSAsExpression.validParent = true;
	function TSNonNullExpression() {
		return this.get("expression").getTypeAnnotation();
	}
	function NewExpression(node) {
		if (node.callee.type === "Identifier") return genericTypeAnnotation(node.callee);
	}
	function TemplateLiteral() {
		return stringTypeAnnotation$1();
	}
	function UnaryExpression(node) {
		const operator$1 = node.operator;
		if (operator$1 === "void") return voidTypeAnnotation$1();
		else if (NUMBER_UNARY_OPERATORS.includes(operator$1)) return numberTypeAnnotation();
		else if (STRING_UNARY_OPERATORS.includes(operator$1)) return stringTypeAnnotation$1();
		else if (BOOLEAN_UNARY_OPERATORS.includes(operator$1)) return booleanTypeAnnotation();
	}
	function BinaryExpression(node) {
		const operator$1 = node.operator;
		if (NUMBER_BINARY_OPERATORS.includes(operator$1)) return numberTypeAnnotation();
		else if (BOOLEAN_BINARY_OPERATORS.includes(operator$1)) return booleanTypeAnnotation();
		else if (operator$1 === "+") {
			const right = this.get("right");
			const left = this.get("left");
			if (left.isBaseType("number") && right.isBaseType("number")) return numberTypeAnnotation();
			else if (left.isBaseType("string") || right.isBaseType("string")) return stringTypeAnnotation$1();
			return unionTypeAnnotation([stringTypeAnnotation$1(), numberTypeAnnotation()]);
		}
	}
	function LogicalExpression() {
		const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
		return (0, _util.createUnionType)(argumentTypes);
	}
	function ConditionalExpression() {
		const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
		return (0, _util.createUnionType)(argumentTypes);
	}
	function SequenceExpression() {
		return this.get("expressions").pop().getTypeAnnotation();
	}
	function ParenthesizedExpression() {
		return this.get("expression").getTypeAnnotation();
	}
	function AssignmentExpression() {
		return this.get("right").getTypeAnnotation();
	}
	function UpdateExpression(node) {
		const operator$1 = node.operator;
		if (operator$1 === "++" || operator$1 === "--") return numberTypeAnnotation();
	}
	function StringLiteral() {
		return stringTypeAnnotation$1();
	}
	function NumericLiteral() {
		return numberTypeAnnotation();
	}
	function BooleanLiteral() {
		return booleanTypeAnnotation();
	}
	function NullLiteral() {
		return nullLiteralTypeAnnotation();
	}
	function RegExpLiteral() {
		return genericTypeAnnotation(identifier$3("RegExp"));
	}
	function ObjectExpression() {
		return genericTypeAnnotation(identifier$3("Object"));
	}
	function ArrayExpression() {
		return genericTypeAnnotation(identifier$3("Array"));
	}
	function RestElement() {
		return ArrayExpression();
	}
	RestElement.validParent = true;
	function Func() {
		return genericTypeAnnotation(identifier$3("Function"));
	}
	const isArrayFrom = buildMatchMemberExpression("Array.from");
	const isObjectKeys = buildMatchMemberExpression("Object.keys");
	const isObjectValues = buildMatchMemberExpression("Object.values");
	const isObjectEntries = buildMatchMemberExpression("Object.entries");
	function CallExpression() {
		const { callee } = this.node;
		if (isObjectKeys(callee)) return arrayTypeAnnotation(stringTypeAnnotation$1());
		else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier$5(callee, { name: "Array" })) return arrayTypeAnnotation(anyTypeAnnotation$1());
		else if (isObjectEntries(callee)) return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation$1(), anyTypeAnnotation$1()]));
		return resolveCall(this.get("callee"));
	}
	function TaggedTemplateExpression() {
		return resolveCall(this.get("tag"));
	}
	function resolveCall(callee) {
		callee = callee.resolve();
		if (callee.isFunction()) {
			const { node } = callee;
			if (node.async) if (node.generator) return genericTypeAnnotation(identifier$3("AsyncIterator"));
			else return genericTypeAnnotation(identifier$3("Promise"));
			else if (node.generator) return genericTypeAnnotation(identifier$3("Iterator"));
			else if (callee.node.returnType) return callee.node.returnType;
		}
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/inference/index.js
var require_inference = __commonJS({ "node_modules/@babel/traverse/lib/path/inference/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._getTypeAnnotation = _getTypeAnnotation;
	exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	exports.couldBeBaseType = couldBeBaseType;
	exports.getTypeAnnotation = getTypeAnnotation;
	exports.isBaseType = isBaseType;
	exports.isGenericType = isGenericType;
	var inferers = require_inferers();
	var _t$15 = require_lib$4();
	const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier: isIdentifier$4, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t$15;
	function getTypeAnnotation() {
		let type = this.getData("typeAnnotation");
		if (type != null) return type;
		type = _getTypeAnnotation.call(this) || anyTypeAnnotation();
		if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) type = type.typeAnnotation;
		this.setData("typeAnnotation", type);
		return type;
	}
	const typeAnnotationInferringNodes = new WeakSet();
	function _getTypeAnnotation() {
		const node = this.node;
		if (!node) if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
			const declar = this.parentPath.parentPath;
			const declarParent = declar.parentPath;
			if (declar.key === "left" && declarParent.isForInStatement()) return stringTypeAnnotation();
			if (declar.key === "left" && declarParent.isForOfStatement()) return anyTypeAnnotation();
			return voidTypeAnnotation();
		} else return;
		if (node.typeAnnotation) return node.typeAnnotation;
		if (typeAnnotationInferringNodes.has(node)) return;
		typeAnnotationInferringNodes.add(node);
		try {
			var _inferer;
			let inferer = inferers[node.type];
			if (inferer) return inferer.call(this, node);
			inferer = inferers[this.parentPath.type];
			if ((_inferer = inferer) != null && _inferer.validParent) return this.parentPath.getTypeAnnotation();
		} finally {
			typeAnnotationInferringNodes.delete(node);
		}
	}
	function isBaseType(baseName, soft) {
		return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}
	function _isBaseType(baseName, type, soft) {
		if (baseName === "string") return isStringTypeAnnotation(type);
		else if (baseName === "number") return isNumberTypeAnnotation(type);
		else if (baseName === "boolean") return isBooleanTypeAnnotation(type);
		else if (baseName === "any") return isAnyTypeAnnotation(type);
		else if (baseName === "mixed") return isMixedTypeAnnotation(type);
		else if (baseName === "empty") return isEmptyTypeAnnotation(type);
		else if (baseName === "void") return isVoidTypeAnnotation(type);
		else if (soft) return false;
		else throw new Error(`Unknown base type ${baseName}`);
	}
	function couldBeBaseType(name) {
		const type = this.getTypeAnnotation();
		if (isAnyTypeAnnotation(type)) return true;
		if (isUnionTypeAnnotation(type)) {
			for (const type2 of type.types) if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) return true;
			return false;
		} else return _isBaseType(name, type, true);
	}
	function baseTypeStrictlyMatches(rightArg) {
		const left = this.getTypeAnnotation();
		const right = rightArg.getTypeAnnotation();
		if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) return right.type === left.type;
		return false;
	}
	function isGenericType(genericName) {
		const type = this.getTypeAnnotation();
		if (genericName === "Array") {
			if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) return true;
		}
		return isGenericTypeAnnotation(type) && isIdentifier$4(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier$4(type.typeName, { name: genericName });
	}
} });

//#endregion
//#region node_modules/js-tokens/index.js
var require_js_tokens = __commonJS({ "node_modules/js-tokens/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
	exports.matchToToken = function(match) {
		var token$1 = {
			type: "invalid",
			value: match[0],
			closed: void 0
		};
		if (match[1]) token$1.type = "string", token$1.closed = !!(match[3] || match[4]);
		else if (match[5]) token$1.type = "comment";
		else if (match[6]) token$1.type = "comment", token$1.closed = !!match[7];
		else if (match[8]) token$1.type = "regex";
		else if (match[9]) token$1.type = "number";
		else if (match[10]) token$1.type = "name";
		else if (match[11]) token$1.type = "punctuator";
		else if (match[12]) token$1.type = "whitespace";
		return token$1;
	};
} });

//#endregion
//#region node_modules/@babel/code-frame/lib/index.js
var require_lib$2 = __commonJS({ "node_modules/@babel/code-frame/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var picocolors = require_picocolors();
	var jsTokens = require_js_tokens();
	var helperValidatorIdentifier = require_lib$6();
	function isColorSupported() {
		return typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? false : picocolors.isColorSupported;
	}
	const compose = (f$1, g$1) => (v$1) => f$1(g$1(v$1));
	function buildDefs(colors$2) {
		return {
			keyword: colors$2.cyan,
			capitalized: colors$2.yellow,
			jsxIdentifier: colors$2.yellow,
			punctuator: colors$2.yellow,
			number: colors$2.magenta,
			string: colors$2.green,
			regex: colors$2.magenta,
			comment: colors$2.gray,
			invalid: compose(compose(colors$2.white, colors$2.bgRed), colors$2.bold),
			gutter: colors$2.gray,
			marker: compose(colors$2.red, colors$2.bold),
			message: compose(colors$2.red, colors$2.bold),
			reset: colors$2.reset
		};
	}
	const defsOn = buildDefs(picocolors.createColors(true));
	const defsOff = buildDefs(picocolors.createColors(false));
	function getDefs(enabled) {
		return enabled ? defsOn : defsOff;
	}
	const sometimesKeywords = new Set([
		"as",
		"async",
		"from",
		"get",
		"of",
		"set"
	]);
	const NEWLINE$1 = /\r\n|[\n\r\u2028\u2029]/;
	const BRACKET = /^[()[\]{}]$/;
	let tokenize;
	{
		const JSX_TAG = /^[a-z][\w-]*$/i;
		const getTokenType$1 = function(token$1, offset, text) {
			if (token$1.type === "name") {
				if (helperValidatorIdentifier.isKeyword(token$1.value) || helperValidatorIdentifier.isStrictReservedWord(token$1.value, true) || sometimesKeywords.has(token$1.value)) return "keyword";
				if (JSX_TAG.test(token$1.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) === "</")) return "jsxIdentifier";
				if (token$1.value[0] !== token$1.value[0].toLowerCase()) return "capitalized";
			}
			if (token$1.type === "punctuator" && BRACKET.test(token$1.value)) return "bracket";
			if (token$1.type === "invalid" && (token$1.value === "@" || token$1.value === "#")) return "punctuator";
			return token$1.type;
		};
		tokenize = function* (text) {
			let match;
			while (match = jsTokens.default.exec(text)) {
				const token$1 = jsTokens.matchToToken(match);
				yield {
					type: getTokenType$1(token$1, match.index, text),
					value: token$1.value
				};
			}
		};
	}
	function highlight(text) {
		if (text === "") return "";
		const defs = getDefs(true);
		let highlighted = "";
		for (const { type, value } of tokenize(text)) if (type in defs) highlighted += value.split(NEWLINE$1).map((str$4) => defs[type](str$4)).join("\n");
		else highlighted += value;
		return highlighted;
	}
	let deprecationWarningShown = false;
	const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
	function getMarkerLines(loc, source, opts) {
		const startLoc = Object.assign({
			column: 0,
			line: -1
		}, loc.start);
		const endLoc = Object.assign({}, startLoc, loc.end);
		const { linesAbove = 2, linesBelow = 3 } = opts || {};
		const startLine = startLoc.line;
		const startColumn = startLoc.column;
		const endLine = endLoc.line;
		const endColumn = endLoc.column;
		let start = Math.max(startLine - (linesAbove + 1), 0);
		let end = Math.min(source.length, endLine + linesBelow);
		if (startLine === -1) start = 0;
		if (endLine === -1) end = source.length;
		const lineDiff = endLine - startLine;
		const markerLines = {};
		if (lineDiff) for (let i$6 = 0; i$6 <= lineDiff; i$6++) {
			const lineNumber = i$6 + startLine;
			if (!startColumn) markerLines[lineNumber] = true;
			else if (i$6 === 0) {
				const sourceLength = source[lineNumber - 1].length;
				markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
			} else if (i$6 === lineDiff) markerLines[lineNumber] = [0, endColumn];
			else {
				const sourceLength = source[lineNumber - i$6].length;
				markerLines[lineNumber] = [0, sourceLength];
			}
		}
		else if (startColumn === endColumn) if (startColumn) markerLines[startLine] = [startColumn, 0];
		else markerLines[startLine] = true;
		else markerLines[startLine] = [startColumn, endColumn - startColumn];
		return {
			start,
			end,
			markerLines
		};
	}
	function codeFrameColumns(rawLines, loc, opts = {}) {
		const shouldHighlight = opts.forceColor || isColorSupported() && opts.highlightCode;
		const defs = getDefs(shouldHighlight);
		const lines = rawLines.split(NEWLINE);
		const { start, end, markerLines } = getMarkerLines(loc, lines, opts);
		const hasColumns = loc.start && typeof loc.start.column === "number";
		const numberMaxWidth = String(end).length;
		const highlightedLines = shouldHighlight ? highlight(rawLines) : rawLines;
		let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index$1) => {
			const number = start + 1 + index$1;
			const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
			const gutter = ` ${paddedNumber} |`;
			const hasMarker = markerLines[number];
			const lastMarkerLine = !markerLines[number + 1];
			if (hasMarker) {
				let markerLine = "";
				if (Array.isArray(hasMarker)) {
					const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
					const numberOfMarkers = hasMarker[1] || 1;
					markerLine = [
						"\n ",
						defs.gutter(gutter.replace(/\d/g, " ")),
						" ",
						markerSpacing,
						defs.marker("^").repeat(numberOfMarkers)
					].join("");
					if (lastMarkerLine && opts.message) markerLine += " " + defs.message(opts.message);
				}
				return [
					defs.marker(">"),
					defs.gutter(gutter),
					line.length > 0 ? ` ${line}` : "",
					markerLine
				].join("");
			} else return ` ${defs.gutter(gutter)}${line.length > 0 ? ` ${line}` : ""}`;
		}).join("\n");
		if (opts.message && !hasColumns) frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`;
		if (shouldHighlight) return defs.reset(frame);
		else return frame;
	}
	function index(rawLines, lineNumber, colNumber, opts = {}) {
		if (!deprecationWarningShown) {
			deprecationWarningShown = true;
			const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
			if (process.emitWarning) process.emitWarning(message, "DeprecationWarning");
			else {
				const deprecationError = new Error(message);
				deprecationError.name = "DeprecationWarning";
				console.warn(new Error(message));
			}
		}
		colNumber = Math.max(colNumber, 0);
		const location = { start: {
			column: colNumber,
			line: lineNumber
		} };
		return codeFrameColumns(rawLines, location, opts);
	}
	exports.codeFrameColumns = codeFrameColumns;
	exports.default = index;
	exports.highlight = highlight;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/lib/removal-hooks.js
var require_removal_hooks = __commonJS({ "node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hooks = void 0;
	const hooks = exports.hooks = [
		function(self$1, parent) {
			const removeParent = self$1.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self$1.key === "declaration" && parent.isExportDeclaration() || self$1.key === "body" && parent.isLabeledStatement() || self$1.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self$1.key === "expression" && parent.isExpressionStatement();
			if (removeParent) {
				parent.remove();
				return true;
			}
		},
		function(self$1, parent) {
			if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
				parent.replaceWith(parent.node.expressions[0]);
				return true;
			}
		},
		function(self$1, parent) {
			if (parent.isBinary()) {
				if (self$1.key === "left") parent.replaceWith(parent.node.right);
				else parent.replaceWith(parent.node.left);
				return true;
			}
		},
		function(self$1, parent) {
			if (parent.isIfStatement() && self$1.key === "consequent" || self$1.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
				self$1.replaceWith({
					type: "BlockStatement",
					body: []
				});
				return true;
			}
		}
	];
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/removal.js
var require_removal = __commonJS({ "node_modules/@babel/traverse/lib/path/removal.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._assertUnremoved = _assertUnremoved;
	exports._callRemovalHooks = _callRemovalHooks;
	exports._markRemoved = _markRemoved;
	exports._remove = _remove;
	exports._removeFromScope = _removeFromScope;
	exports.remove = remove;
	var _removalHooks = require_removal_hooks();
	var _cache$2 = require_cache();
	var _replacement = require_replacement();
	var _index$7 = require_path();
	var _t$14 = require_lib$4();
	var _modification$1 = require_modification();
	var _context$6 = require_context();
	const { getBindingIdentifiers: getBindingIdentifiers$2 } = _t$14;
	function remove() {
		var _this$opts;
		_assertUnremoved.call(this);
		_context$6.resync.call(this);
		if (_callRemovalHooks.call(this)) {
			_markRemoved.call(this);
			return;
		}
		if (!((_this$opts = this.opts) != null && _this$opts.noScope)) _removeFromScope.call(this);
		this.shareCommentsWithSiblings();
		_remove.call(this);
		_markRemoved.call(this);
	}
	function _removeFromScope() {
		const bindings = getBindingIdentifiers$2(this.node, false, false, true);
		Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
	}
	function _callRemovalHooks() {
		if (this.parentPath) {
			for (const fn of _removalHooks.hooks) if (fn(this, this.parentPath)) return true;
		}
	}
	function _remove() {
		if (Array.isArray(this.container)) {
			this.container.splice(this.key, 1);
			_modification$1.updateSiblingKeys.call(this, this.key, -1);
		} else _replacement._replaceWith.call(this, null);
	}
	function _markRemoved() {
		this._traverseFlags |= _index$7.SHOULD_SKIP | _index$7.REMOVED;
		if (this.parent) (0, _cache$2.getCachedPaths)(this.hub, this.parent).delete(this.node);
		this.node = null;
	}
	function _assertUnremoved() {
		if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/lib/hoister.js
var require_hoister = __commonJS({ "node_modules/@babel/traverse/lib/path/lib/hoister.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _t$13 = require_lib$4();
	var _t2 = _t$13;
	const { react } = _t$13;
	const { cloneNode: cloneNode$4, jsxExpressionContainer, variableDeclaration: variableDeclaration$1, variableDeclarator: variableDeclarator$1 } = _t2;
	const referenceVisitor = { ReferencedIdentifier(path$28, state) {
		if (path$28.isJSXIdentifier() && react.isCompatTag(path$28.node.name) && !path$28.parentPath.isJSXMemberExpression()) return;
		if (path$28.node.name === "this") {
			let scope$1 = path$28.scope;
			do
				if (scope$1.path.isFunction() && !scope$1.path.isArrowFunctionExpression()) break;
			while (scope$1 = scope$1.parent);
			if (scope$1) state.breakOnScopePaths.push(scope$1.path);
		}
		const binding = path$28.scope.getBinding(path$28.node.name);
		if (!binding) return;
		for (const violation of binding.constantViolations) if (violation.scope !== binding.path.scope) {
			state.mutableBinding = true;
			path$28.stop();
			return;
		}
		if (binding !== state.scope.getBinding(path$28.node.name)) return;
		state.bindings[path$28.node.name] = binding;
	} };
	var PathHoister = class {
		constructor(path$28, scope$1) {
			this.breakOnScopePaths = void 0;
			this.bindings = void 0;
			this.mutableBinding = void 0;
			this.scopes = void 0;
			this.scope = void 0;
			this.path = void 0;
			this.attachAfter = void 0;
			this.breakOnScopePaths = [];
			this.bindings = {};
			this.mutableBinding = false;
			this.scopes = [];
			this.scope = scope$1;
			this.path = path$28;
			this.attachAfter = false;
		}
		isCompatibleScope(scope$1) {
			for (const key of Object.keys(this.bindings)) {
				const binding = this.bindings[key];
				if (!scope$1.bindingIdentifierEquals(key, binding.identifier)) return false;
			}
			return true;
		}
		getCompatibleScopes() {
			let scope$1 = this.path.scope;
			do {
				if (this.isCompatibleScope(scope$1)) this.scopes.push(scope$1);
				else break;
				if (this.breakOnScopePaths.includes(scope$1.path)) break;
			} while (scope$1 = scope$1.parent);
		}
		getAttachmentPath() {
			let path$28 = this._getAttachmentPath();
			if (!path$28) return;
			let targetScope = path$28.scope;
			if (targetScope.path === path$28) targetScope = path$28.scope.parent;
			if (targetScope.path.isProgram() || targetScope.path.isFunction()) for (const name of Object.keys(this.bindings)) {
				if (!targetScope.hasOwnBinding(name)) continue;
				const binding = this.bindings[name];
				if (binding.kind === "param" || binding.path.parentKey === "params") continue;
				const bindingParentPath = this.getAttachmentParentForPath(binding.path);
				if (bindingParentPath.key >= path$28.key) {
					this.attachAfter = true;
					path$28 = binding.path;
					for (const violationPath of binding.constantViolations) if (this.getAttachmentParentForPath(violationPath).key > path$28.key) path$28 = violationPath;
				}
			}
			return path$28;
		}
		_getAttachmentPath() {
			const scopes = this.scopes;
			const scope$1 = scopes.pop();
			if (!scope$1) return;
			if (scope$1.path.isFunction()) if (this.hasOwnParamBindings(scope$1)) {
				if (this.scope === scope$1) return;
				const bodies = scope$1.path.get("body").get("body");
				for (let i$6 = 0; i$6 < bodies.length; i$6++) {
					if (bodies[i$6].node._blockHoist) continue;
					return bodies[i$6];
				}
			} else return this.getNextScopeAttachmentParent();
			else if (scope$1.path.isProgram()) return this.getNextScopeAttachmentParent();
		}
		getNextScopeAttachmentParent() {
			const scope$1 = this.scopes.pop();
			if (scope$1) return this.getAttachmentParentForPath(scope$1.path);
		}
		getAttachmentParentForPath(path$28) {
			do
				if (!path$28.parentPath || Array.isArray(path$28.container) && path$28.isStatement()) return path$28;
			while (path$28 = path$28.parentPath);
		}
		hasOwnParamBindings(scope$1) {
			for (const name of Object.keys(this.bindings)) {
				if (!scope$1.hasOwnBinding(name)) continue;
				const binding = this.bindings[name];
				if (binding.kind === "param" && binding.constant) return true;
			}
			return false;
		}
		run() {
			this.path.traverse(referenceVisitor, this);
			if (this.mutableBinding) return;
			this.getCompatibleScopes();
			const attachTo = this.getAttachmentPath();
			if (!attachTo) return;
			if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
			let uid$1 = attachTo.scope.generateUidIdentifier("ref");
			const declarator = variableDeclarator$1(uid$1, this.path.node);
			const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
			const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration$1("var", [declarator])]);
			const parent = this.path.parentPath;
			if (parent.isJSXElement() && this.path.container === parent.node.children) uid$1 = jsxExpressionContainer(uid$1);
			this.path.replaceWith(cloneNode$4(uid$1));
			return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
		}
	};
	exports.default = PathHoister;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/modification.js
var require_modification = __commonJS({ "node_modules/@babel/traverse/lib/path/modification.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._containerInsert = _containerInsert;
	exports._containerInsertAfter = _containerInsertAfter;
	exports._containerInsertBefore = _containerInsertBefore;
	exports._verifyNodeList = _verifyNodeList;
	exports.insertAfter = insertAfter;
	exports.insertBefore = insertBefore;
	exports.pushContainer = pushContainer;
	exports.unshiftContainer = unshiftContainer;
	exports.updateSiblingKeys = updateSiblingKeys;
	var _cache$1 = require_cache();
	var _index$6 = require_path();
	var _context$5 = require_context();
	var _removal$1 = require_removal();
	var _t$12 = require_lib$4();
	var _hoister = require_hoister();
	const { arrowFunctionExpression: arrowFunctionExpression$2, assertExpression, assignmentExpression: assignmentExpression$2, blockStatement: blockStatement$3, callExpression: callExpression$2, cloneNode: cloneNode$3, expressionStatement: expressionStatement$3, isAssignmentExpression, isCallExpression: isCallExpression$1, isExportNamedDeclaration, isExpression: isExpression$2, isIdentifier: isIdentifier$3, isSequenceExpression, isSuper, thisExpression: thisExpression$1 } = _t$12;
	function insertBefore(nodes_) {
		_removal$1._assertUnremoved.call(this);
		const nodes$1 = _verifyNodeList.call(this, nodes_);
		const { parentPath, parent } = this;
		if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertBefore(nodes$1);
		else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
			if (this.node) nodes$1.push(this.node);
			return this.replaceExpressionWithStatements(nodes$1);
		} else if (Array.isArray(this.container)) return _containerInsertBefore.call(this, nodes$1);
		else if (this.isStatementOrBlock()) {
			const node = this.node;
			const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
			this.replaceWith(blockStatement$3(shouldInsertCurrentNode ? [node] : []));
			return this.unshiftContainer("body", nodes$1);
		} else throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	}
	function _containerInsert(from, nodes$1) {
		updateSiblingKeys.call(this, from, nodes$1.length);
		const paths = [];
		this.container.splice(from, 0, ...nodes$1);
		for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
			var _this$context;
			const to = from + i$6;
			const path$28 = this.getSibling(to);
			paths.push(path$28);
			if ((_this$context = this.context) != null && _this$context.queue) _context$5.pushContext.call(path$28, this.context);
		}
		const contexts = _context$5._getQueueContexts.call(this);
		for (const path$28 of paths) {
			_context$5.setScope.call(path$28);
			path$28.debug("Inserted.");
			for (const context of contexts) context.maybeQueue(path$28, true);
		}
		return paths;
	}
	function _containerInsertBefore(nodes$1) {
		return _containerInsert.call(this, this.key, nodes$1);
	}
	function _containerInsertAfter(nodes$1) {
		return _containerInsert.call(this, this.key + 1, nodes$1);
	}
	const last = (arr) => arr[arr.length - 1];
	function isHiddenInSequenceExpression(path$28) {
		return isSequenceExpression(path$28.parent) && (last(path$28.parent.expressions) !== path$28.node || isHiddenInSequenceExpression(path$28.parentPath));
	}
	function isAlmostConstantAssignment(node, scope$1) {
		if (!isAssignmentExpression(node) || !isIdentifier$3(node.left)) return false;
		const blockScope = scope$1.getBlockParent();
		return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;
	}
	function insertAfter(nodes_) {
		_removal$1._assertUnremoved.call(this);
		if (this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(nodes_);
		const nodes$1 = _verifyNodeList.call(this, nodes_);
		const { parentPath, parent } = this;
		if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertAfter(nodes$1.map((node) => {
			return isExpression$2(node) ? expressionStatement$3(node) : node;
		}));
		else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
			const self$1 = this;
			if (self$1.node) {
				const node = self$1.node;
				let { scope: scope$1 } = this;
				if (scope$1.path.isPattern()) {
					assertExpression(node);
					self$1.replaceWith(callExpression$2(arrowFunctionExpression$2([], node), []));
					self$1.get("callee.body").insertAfter(nodes$1);
					return [self$1];
				}
				if (isHiddenInSequenceExpression(self$1)) nodes$1.unshift(node);
				else if (isCallExpression$1(node) && isSuper(node.callee)) {
					nodes$1.unshift(node);
					nodes$1.push(thisExpression$1());
				} else if (isAlmostConstantAssignment(node, scope$1)) {
					nodes$1.unshift(node);
					nodes$1.push(cloneNode$3(node.left));
				} else if (scope$1.isPure(node, true)) nodes$1.push(node);
				else {
					if (parentPath.isMethod({
						computed: true,
						key: node
					})) scope$1 = scope$1.parent;
					const temp = scope$1.generateDeclaredUidIdentifier();
					nodes$1.unshift(expressionStatement$3(assignmentExpression$2("=", cloneNode$3(temp), node)));
					nodes$1.push(expressionStatement$3(cloneNode$3(temp)));
				}
			}
			return this.replaceExpressionWithStatements(nodes$1);
		} else if (Array.isArray(this.container)) return _containerInsertAfter.call(this, nodes$1);
		else if (this.isStatementOrBlock()) {
			const node = this.node;
			const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
			this.replaceWith(blockStatement$3(shouldInsertCurrentNode ? [node] : []));
			return this.pushContainer("body", nodes$1);
		} else throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	}
	function updateSiblingKeys(fromIndex, incrementBy) {
		if (!this.parent) return;
		const paths = (0, _cache$1.getCachedPaths)(this.hub, this.parent) || [];
		for (const [, path$28] of paths) if (typeof path$28.key === "number" && path$28.container === this.container && path$28.key >= fromIndex) path$28.key += incrementBy;
	}
	function _verifyNodeList(nodes$1) {
		if (!nodes$1) return [];
		if (!Array.isArray(nodes$1)) nodes$1 = [nodes$1];
		for (let i$6 = 0; i$6 < nodes$1.length; i$6++) {
			const node = nodes$1[i$6];
			let msg;
			if (!node) msg = "has falsy node";
			else if (typeof node !== "object") msg = "contains a non-object node";
			else if (!node.type) msg = "without a type";
			else if (node instanceof _index$6.default) msg = "has a NodePath when it expected a raw object";
			if (msg) {
				const type = Array.isArray(node) ? "array" : typeof node;
				throw new Error(`Node list ${msg} with the index of ${i$6} and type of ${type}`);
			}
		}
		return nodes$1;
	}
	function unshiftContainer(listKey, nodes$1) {
		_removal$1._assertUnremoved.call(this);
		nodes$1 = _verifyNodeList.call(this, nodes$1);
		const path$28 = _index$6.default.get({
			parentPath: this,
			parent: this.node,
			container: this.node[listKey],
			listKey,
			key: 0
		}).setContext(this.context);
		return _containerInsertBefore.call(path$28, nodes$1);
	}
	function pushContainer(listKey, nodes$1) {
		_removal$1._assertUnremoved.call(this);
		const verifiedNodes = _verifyNodeList.call(this, nodes$1);
		const container = this.node[listKey];
		const path$28 = _index$6.default.get({
			parentPath: this,
			parent: this.node,
			container,
			listKey,
			key: container.length
		}).setContext(this.context);
		return path$28.replaceWithMultiple(verifiedNodes);
	}
	exports.hoist = function hoist(scope$1 = this.scope) {
		const hoister = new _hoister.default(this, scope$1);
		return hoister.run();
	};
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/replacement.js
var require_replacement = __commonJS({ "node_modules/@babel/traverse/lib/path/replacement.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._replaceWith = _replaceWith;
	exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
	exports.replaceInline = replaceInline;
	exports.replaceWith = replaceWith;
	exports.replaceWithMultiple = replaceWithMultiple;
	exports.replaceWithSourceString = replaceWithSourceString;
	var _codeFrame$1 = require_lib$2();
	var _index$5 = require_lib();
	var _index2$2 = require_path();
	var _cache = require_cache();
	var _modification = require_modification();
	var _parser$1 = require_lib$17();
	var _t$11 = require_lib$4();
	var _context$4 = require_context();
	const { FUNCTION_TYPES, arrowFunctionExpression: arrowFunctionExpression$1, assignmentExpression: assignmentExpression$1, awaitExpression, blockStatement: blockStatement$2, buildUndefinedNode, callExpression: callExpression$1, cloneNode: cloneNode$2, conditionalExpression: conditionalExpression$1, expressionStatement: expressionStatement$2, getBindingIdentifiers: getBindingIdentifiers$1, identifier: identifier$2, inheritLeadingComments, inheritTrailingComments, inheritsComments, isBlockStatement: isBlockStatement$1, isEmptyStatement, isExpression: isExpression$1, isExpressionStatement: isExpressionStatement$1, isIfStatement, isProgram, isStatement: isStatement$2, isVariableDeclaration, removeComments, returnStatement: returnStatement$1, sequenceExpression: sequenceExpression$1, validate: validate$3, yieldExpression } = _t$11;
	function replaceWithMultiple(nodes$1) {
		var _getCachedPaths;
		_context$4.resync.call(this);
		nodes$1 = _modification._verifyNodeList.call(this, nodes$1);
		inheritLeadingComments(nodes$1[0], this.node);
		inheritTrailingComments(nodes$1[nodes$1.length - 1], this.node);
		(_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node);
		this.node = this.container[this.key] = null;
		const paths = this.insertAfter(nodes$1);
		if (this.node) this.requeue();
		else this.remove();
		return paths;
	}
	function replaceWithSourceString(replacement) {
		_context$4.resync.call(this);
		let ast;
		try {
			replacement = `(${replacement})`;
			ast = (0, _parser$1.parse)(replacement);
		} catch (err) {
			const loc = err.loc;
			if (loc) {
				err.message += " - make sure this is an expression.\n" + (0, _codeFrame$1.codeFrameColumns)(replacement, { start: {
					line: loc.line,
					column: loc.column + 1
				} });
				err.code = "BABEL_REPLACE_SOURCE_ERROR";
			}
			throw err;
		}
		const expressionAST = ast.program.body[0].expression;
		_index$5.default.removeProperties(expressionAST);
		return this.replaceWith(expressionAST);
	}
	function replaceWith(replacementPath) {
		_context$4.resync.call(this);
		if (this.removed) throw new Error("You can't replace this node, we've already removed it");
		let replacement = replacementPath instanceof _index2$2.default ? replacementPath.node : replacementPath;
		if (!replacement) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
		if (this.node === replacement) return [this];
		if (this.isProgram() && !isProgram(replacement)) throw new Error("You can only replace a Program root node with another Program node");
		if (Array.isArray(replacement)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
		if (typeof replacement === "string") throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
		let nodePath = "";
		if (this.isNodeType("Statement") && isExpression$1(replacement)) {
			if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {
				replacement = expressionStatement$2(replacement);
				nodePath = "expression";
			}
		}
		if (this.isNodeType("Expression") && isStatement$2(replacement)) {
			if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) return this.replaceExpressionWithStatements([replacement]);
		}
		const oldNode = this.node;
		if (oldNode) {
			inheritsComments(replacement, oldNode);
			removeComments(oldNode);
		}
		_replaceWith.call(this, replacement);
		this.type = replacement.type;
		_context$4.setScope.call(this);
		this.requeue();
		return [nodePath ? this.get(nodePath) : this];
	}
	function _replaceWith(node) {
		var _getCachedPaths2;
		if (!this.container) throw new ReferenceError("Container is falsy");
		if (this.inList) validate$3(this.parent, this.key, [node]);
		else validate$3(this.parent, this.key, node);
		this.debug(`Replace with ${node == null ? void 0 : node.type}`);
		(_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node, this).delete(this.node);
		this.node = this.container[this.key] = node;
	}
	function replaceExpressionWithStatements(nodes$1) {
		_context$4.resync.call(this);
		const declars = [];
		const nodesAsSingleExpression = gatherSequenceExpressions(nodes$1, declars);
		if (nodesAsSingleExpression) {
			for (const id$4 of declars) this.scope.push({ id: id$4 });
			return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
		}
		const functionParent = this.getFunctionParent();
		const isParentAsync = functionParent == null ? void 0 : functionParent.node.async;
		const isParentGenerator = functionParent == null ? void 0 : functionParent.node.generator;
		const container = arrowFunctionExpression$1([], blockStatement$2(nodes$1));
		this.replaceWith(callExpression$1(container, []));
		const callee = this.get("callee");
		callee.get("body").scope.hoistVariables((id$4) => this.scope.push({ id: id$4 }));
		const completionRecords = callee.getCompletionRecords();
		for (const path$28 of completionRecords) {
			if (!path$28.isExpressionStatement()) continue;
			const loop = path$28.findParent((path$29) => path$29.isLoop());
			if (loop) {
				let uid$1 = loop.getData("expressionReplacementReturnUid");
				if (!uid$1) {
					uid$1 = callee.scope.generateDeclaredUidIdentifier("ret");
					callee.get("body").pushContainer("body", returnStatement$1(cloneNode$2(uid$1)));
					loop.setData("expressionReplacementReturnUid", uid$1);
				} else uid$1 = identifier$2(uid$1.name);
				path$28.get("expression").replaceWith(assignmentExpression$1("=", cloneNode$2(uid$1), path$28.node.expression));
			} else path$28.replaceWith(returnStatement$1(path$28.node.expression));
		}
		callee.arrowFunctionToExpression();
		const newCallee = callee;
		const needToAwaitFunction = isParentAsync && _index$5.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);
		const needToYieldFunction = isParentGenerator && _index$5.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
		if (needToAwaitFunction) {
			newCallee.set("async", true);
			if (!needToYieldFunction) this.replaceWith(awaitExpression(this.node));
		}
		if (needToYieldFunction) {
			newCallee.set("generator", true);
			this.replaceWith(yieldExpression(this.node, true));
		}
		return newCallee.get("body.body");
	}
	function gatherSequenceExpressions(nodes$1, declars) {
		const exprs = [];
		let ensureLastUndefined = true;
		for (const node of nodes$1) {
			if (!isEmptyStatement(node)) ensureLastUndefined = false;
			if (isExpression$1(node)) exprs.push(node);
			else if (isExpressionStatement$1(node)) exprs.push(node.expression);
			else if (isVariableDeclaration(node)) {
				if (node.kind !== "var") return;
				for (const declar of node.declarations) {
					const bindings = getBindingIdentifiers$1(declar);
					for (const key of Object.keys(bindings)) declars.push(cloneNode$2(bindings[key]));
					if (declar.init) exprs.push(assignmentExpression$1("=", declar.id, declar.init));
				}
				ensureLastUndefined = true;
			} else if (isIfStatement(node)) {
				const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode();
				const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
				if (!consequent || !alternate) return;
				exprs.push(conditionalExpression$1(node.test, consequent, alternate));
			} else if (isBlockStatement$1(node)) {
				const body = gatherSequenceExpressions(node.body, declars);
				if (!body) return;
				exprs.push(body);
			} else if (isEmptyStatement(node)) {
				if (nodes$1.indexOf(node) === 0) ensureLastUndefined = true;
			} else return;
		}
		if (ensureLastUndefined) exprs.push(buildUndefinedNode());
		if (exprs.length === 1) return exprs[0];
		else return sequenceExpression$1(exprs);
	}
	function replaceInline(nodes$1) {
		_context$4.resync.call(this);
		if (Array.isArray(nodes$1)) if (Array.isArray(this.container)) {
			nodes$1 = _modification._verifyNodeList.call(this, nodes$1);
			const paths = _modification._containerInsertAfter.call(this, nodes$1);
			this.remove();
			return paths;
		} else return this.replaceWithMultiple(nodes$1);
		else return this.replaceWith(nodes$1);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/evaluation.js
var require_evaluation = __commonJS({ "node_modules/@babel/traverse/lib/path/evaluation.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.evaluate = evaluate;
	exports.evaluateTruthy = evaluateTruthy;
	const VALID_OBJECT_CALLEES = [
		"Number",
		"String",
		"Math"
	];
	const VALID_IDENTIFIER_CALLEES = [
		"isFinite",
		"isNaN",
		"parseFloat",
		"parseInt",
		"decodeURI",
		"decodeURIComponent",
		"encodeURI",
		"encodeURIComponent",
		null,
		null
	];
	const INVALID_METHODS = ["random"];
	function isValidObjectCallee(val) {
		return VALID_OBJECT_CALLEES.includes(val);
	}
	function isValidIdentifierCallee(val) {
		return VALID_IDENTIFIER_CALLEES.includes(val);
	}
	function isInvalidMethod(val) {
		return INVALID_METHODS.includes(val);
	}
	function evaluateTruthy() {
		const res = this.evaluate();
		if (res.confident) return !!res.value;
	}
	function deopt(path$28, state) {
		if (!state.confident) return;
		state.deoptPath = path$28;
		state.confident = false;
	}
	const Globals = new Map([
		["undefined", void 0],
		["Infinity", Infinity],
		["NaN", NaN]
	]);
	function evaluateCached(path$28, state) {
		const { node } = path$28;
		const { seen: seen$1 } = state;
		if (seen$1.has(node)) {
			const existing = seen$1.get(node);
			if (existing.resolved) return existing.value;
			else {
				deopt(path$28, state);
				return;
			}
		} else {
			const item = { resolved: false };
			seen$1.set(node, item);
			const val = _evaluate(path$28, state);
			if (state.confident) {
				item.resolved = true;
				item.value = val;
			}
			return val;
		}
	}
	function _evaluate(path$28, state) {
		if (!state.confident) return;
		if (path$28.isSequenceExpression()) {
			const exprs = path$28.get("expressions");
			return evaluateCached(exprs[exprs.length - 1], state);
		}
		if (path$28.isStringLiteral() || path$28.isNumericLiteral() || path$28.isBooleanLiteral()) return path$28.node.value;
		if (path$28.isNullLiteral()) return null;
		if (path$28.isTemplateLiteral()) return evaluateQuasis(path$28, path$28.node.quasis, state);
		if (path$28.isTaggedTemplateExpression() && path$28.get("tag").isMemberExpression()) {
			const object$2 = path$28.get("tag.object");
			const { node: { name } } = object$2;
			const property = path$28.get("tag.property");
			if (object$2.isIdentifier() && name === "String" && !path$28.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") return evaluateQuasis(path$28, path$28.node.quasi.quasis, state, true);
		}
		if (path$28.isConditionalExpression()) {
			const testResult = evaluateCached(path$28.get("test"), state);
			if (!state.confident) return;
			if (testResult) return evaluateCached(path$28.get("consequent"), state);
			else return evaluateCached(path$28.get("alternate"), state);
		}
		if (path$28.isExpressionWrapper()) return evaluateCached(path$28.get("expression"), state);
		if (path$28.isMemberExpression() && !path$28.parentPath.isCallExpression({ callee: path$28.node })) {
			const property = path$28.get("property");
			const object$2 = path$28.get("object");
			if (object$2.isLiteral()) {
				const value = object$2.node.value;
				const type = typeof value;
				let key = null;
				if (path$28.node.computed) {
					key = evaluateCached(property, state);
					if (!state.confident) return;
				} else if (property.isIdentifier()) key = property.node.name;
				if ((type === "number" || type === "string") && key != null && (typeof key === "number" || typeof key === "string")) return value[key];
			}
		}
		if (path$28.isReferencedIdentifier()) {
			const binding = path$28.scope.getBinding(path$28.node.name);
			if (binding) {
				if (binding.constantViolations.length > 0 || path$28.node.start < binding.path.node.end) {
					deopt(binding.path, state);
					return;
				}
				const bindingPathScope = binding.path.scope;
				if (binding.kind === "var" && bindingPathScope !== binding.scope) {
					let hasUnsafeBlock = !bindingPathScope.path.parentPath.isBlockStatement();
					for (let scope$1 = bindingPathScope.parent; scope$1; scope$1 = scope$1.parent) {
						var _scope$path$parentPat;
						if (scope$1 === path$28.scope) {
							if (hasUnsafeBlock) {
								deopt(binding.path, state);
								return;
							}
							break;
						}
						if ((_scope$path$parentPat = scope$1.path.parentPath) != null && _scope$path$parentPat.isBlockStatement()) hasUnsafeBlock = true;
					}
				}
				if (binding.hasValue) return binding.value;
			}
			const name = path$28.node.name;
			if (Globals.has(name)) {
				if (!binding) return Globals.get(name);
				deopt(binding.path, state);
				return;
			}
			const resolved = path$28.resolve();
			if (resolved === path$28) {
				deopt(path$28, state);
				return;
			} else return evaluateCached(resolved, state);
		}
		if (path$28.isUnaryExpression({ prefix: true })) {
			if (path$28.node.operator === "void") return void 0;
			const argument = path$28.get("argument");
			if (path$28.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) return "function";
			const arg = evaluateCached(argument, state);
			if (!state.confident) return;
			switch (path$28.node.operator) {
				case "!": return !arg;
				case "+": return +arg;
				case "-": return -arg;
				case "~": return ~arg;
				case "typeof": return typeof arg;
			}
		}
		if (path$28.isArrayExpression()) {
			const arr = [];
			const elems = path$28.get("elements");
			for (const elem of elems) {
				const elemValue = elem.evaluate();
				if (elemValue.confident) arr.push(elemValue.value);
				else {
					deopt(elemValue.deopt, state);
					return;
				}
			}
			return arr;
		}
		if (path$28.isObjectExpression()) {
			const obj = {};
			const props = path$28.get("properties");
			for (const prop of props) {
				if (prop.isObjectMethod() || prop.isSpreadElement()) {
					deopt(prop, state);
					return;
				}
				const keyPath = prop.get("key");
				let key;
				if (prop.node.computed) {
					key = keyPath.evaluate();
					if (!key.confident) {
						deopt(key.deopt, state);
						return;
					}
					key = key.value;
				} else if (keyPath.isIdentifier()) key = keyPath.node.name;
				else key = keyPath.node.value;
				const valuePath = prop.get("value");
				let value = valuePath.evaluate();
				if (!value.confident) {
					deopt(value.deopt, state);
					return;
				}
				value = value.value;
				obj[key] = value;
			}
			return obj;
		}
		if (path$28.isLogicalExpression()) {
			const wasConfident = state.confident;
			const left = evaluateCached(path$28.get("left"), state);
			const leftConfident = state.confident;
			state.confident = wasConfident;
			const right = evaluateCached(path$28.get("right"), state);
			const rightConfident = state.confident;
			switch (path$28.node.operator) {
				case "||":
					state.confident = leftConfident && (!!left || rightConfident);
					if (!state.confident) return;
					return left || right;
				case "&&":
					state.confident = leftConfident && (!left || rightConfident);
					if (!state.confident) return;
					return left && right;
				case "??":
					state.confident = leftConfident && (left != null || rightConfident);
					if (!state.confident) return;
					return left != null ? left : right;
			}
		}
		if (path$28.isBinaryExpression()) {
			const left = evaluateCached(path$28.get("left"), state);
			if (!state.confident) return;
			const right = evaluateCached(path$28.get("right"), state);
			if (!state.confident) return;
			switch (path$28.node.operator) {
				case "-": return left - right;
				case "+": return left + right;
				case "/": return left / right;
				case "*": return left * right;
				case "%": return left % right;
				case "**": return Math.pow(left, right);
				case "<": return left < right;
				case ">": return left > right;
				case "<=": return left <= right;
				case ">=": return left >= right;
				case "==": return left == right;
				case "!=": return left != right;
				case "===": return left === right;
				case "!==": return left !== right;
				case "|": return left | right;
				case "&": return left & right;
				case "^": return left ^ right;
				case "<<": return left << right;
				case ">>": return left >> right;
				case ">>>": return left >>> right;
			}
		}
		if (path$28.isCallExpression()) {
			const callee = path$28.get("callee");
			let context;
			let func;
			if (callee.isIdentifier() && !path$28.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) func = global[callee.node.name];
			if (callee.isMemberExpression()) {
				const object$2 = callee.get("object");
				const property = callee.get("property");
				if (object$2.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object$2.node.name) && !isInvalidMethod(property.node.name)) {
					context = global[object$2.node.name];
					const key = property.node.name;
					if (hasOwnProperty.call(context, key)) func = context[key];
				}
				if (object$2.isLiteral() && property.isIdentifier()) {
					const type = typeof object$2.node.value;
					if (type === "string" || type === "number") {
						context = object$2.node.value;
						func = context[property.node.name];
					}
				}
			}
			if (func) {
				const args = path$28.get("arguments").map((arg) => evaluateCached(arg, state));
				if (!state.confident) return;
				return func.apply(context, args);
			}
		}
		deopt(path$28, state);
	}
	function evaluateQuasis(path$28, quasis, state, raw = false) {
		let str$4 = "";
		let i$6 = 0;
		const exprs = path$28.isTemplateLiteral() ? path$28.get("expressions") : path$28.get("quasi.expressions");
		for (const elem of quasis) {
			if (!state.confident) break;
			str$4 += raw ? elem.value.raw : elem.value.cooked;
			const expr = exprs[i$6++];
			if (expr) str$4 += String(evaluateCached(expr, state));
		}
		if (!state.confident) return;
		return str$4;
	}
	function evaluate() {
		const state = {
			confident: true,
			deoptPath: null,
			seen: new Map()
		};
		let value = evaluateCached(this, state);
		if (!state.confident) value = void 0;
		return {
			confident: state.confident,
			deopt: state.deoptPath,
			value
		};
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/formatters.js
var require_formatters = __commonJS({ "node_modules/@babel/template/lib/formatters.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;
	var _t$10 = require_lib$4();
	const { assertExpressionStatement } = _t$10;
	function makeStatementFormatter(fn) {
		return {
			code: (str$4) => `/* @babel/template */;\n${str$4}`,
			validate: () => {},
			unwrap: (ast) => {
				return fn(ast.program.body.slice(1));
			}
		};
	}
	const smart$1 = exports.smart = makeStatementFormatter((body) => {
		if (body.length > 1) return body;
		else return body[0];
	});
	const statements$1 = exports.statements = makeStatementFormatter((body) => body);
	const statement$1 = exports.statement = makeStatementFormatter((body) => {
		if (body.length === 0) throw new Error("Found nothing to return.");
		if (body.length > 1) throw new Error("Found multiple statements but wanted one");
		return body[0];
	});
	const expression$1 = exports.expression = {
		code: (str$4) => `(\n${str$4}\n)`,
		validate: (ast) => {
			if (ast.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
			if (expression$1.unwrap(ast).start === 0) throw new Error("Parse result included parens.");
		},
		unwrap: ({ program: program$3 }) => {
			const [stmt] = program$3.body;
			assertExpressionStatement(stmt);
			return stmt.expression;
		}
	};
	const program$1 = exports.program = {
		code: (str$4) => str$4,
		validate: () => {},
		unwrap: (ast) => ast.program
	};
} });

//#endregion
//#region node_modules/@babel/template/lib/options.js
var require_options = __commonJS({ "node_modules/@babel/template/lib/options.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.merge = merge;
	exports.normalizeReplacements = normalizeReplacements;
	exports.validate = validate$2;
	const _excluded = [
		"placeholderWhitelist",
		"placeholderPattern",
		"preserveComments",
		"syntacticPlaceholders"
	];
	function _objectWithoutPropertiesLoose(r$2, e$2) {
		if (null == r$2) return {};
		var t$9 = {};
		for (var n$4 in r$2) if ({}.hasOwnProperty.call(r$2, n$4)) {
			if (-1 !== e$2.indexOf(n$4)) continue;
			t$9[n$4] = r$2[n$4];
		}
		return t$9;
	}
	function merge(a$1, b$1) {
		const { placeholderWhitelist = a$1.placeholderWhitelist, placeholderPattern = a$1.placeholderPattern, preserveComments = a$1.preserveComments, syntacticPlaceholders = a$1.syntacticPlaceholders } = b$1;
		return {
			parser: Object.assign({}, a$1.parser, b$1.parser),
			placeholderWhitelist,
			placeholderPattern,
			preserveComments,
			syntacticPlaceholders
		};
	}
	function validate$2(opts) {
		if (opts != null && typeof opts !== "object") throw new Error("Unknown template options.");
		const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser$5 = _objectWithoutPropertiesLoose(_ref, _excluded);
		if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
		if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
		if (preserveComments != null && typeof preserveComments !== "boolean") throw new Error("'.preserveComments' must be a boolean, null, or undefined");
		if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
		if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
		return {
			parser: parser$5,
			placeholderWhitelist: placeholderWhitelist || void 0,
			placeholderPattern: placeholderPattern == null ? void 0 : placeholderPattern,
			preserveComments: preserveComments == null ? void 0 : preserveComments,
			syntacticPlaceholders: syntacticPlaceholders == null ? void 0 : syntacticPlaceholders
		};
	}
	function normalizeReplacements(replacements) {
		if (Array.isArray(replacements)) return replacements.reduce((acc, replacement, i$6) => {
			acc["$" + i$6] = replacement;
			return acc;
		}, {});
		else if (typeof replacements === "object" || replacements == null) return replacements || void 0;
		throw new Error("Template replacements must be an array, object, null, or undefined");
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/parse.js
var require_parse$1 = __commonJS({ "node_modules/@babel/template/lib/parse.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = parseAndBuildMetadata;
	var _t$9 = require_lib$4();
	var _parser = require_lib$17();
	var _codeFrame = require_lib$2();
	const { isCallExpression, isExpressionStatement, isFunction: isFunction$1, isIdentifier: isIdentifier$2, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement: isStatement$1, isStringLiteral: isStringLiteral$2, removePropertiesDeep, traverse: traverse$1 } = _t$9;
	const PATTERN = /^[_$A-Z0-9]+$/;
	function parseAndBuildMetadata(formatter$1, code$1, opts) {
		const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts;
		const ast = parseWithCodeFrame(code$1, opts.parser, syntacticPlaceholders);
		removePropertiesDeep(ast, { preserveComments });
		formatter$1.validate(ast);
		const state = {
			syntactic: {
				placeholders: [],
				placeholderNames: new Set()
			},
			legacy: {
				placeholders: [],
				placeholderNames: new Set()
			},
			placeholderWhitelist,
			placeholderPattern,
			syntacticPlaceholders
		};
		traverse$1(ast, placeholderVisitorHandler, state);
		return Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
	}
	function placeholderVisitorHandler(node, ancestors, state) {
		var _state$placeholderWhi;
		let name;
		let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
		if (isPlaceholder(node)) {
			if (state.syntacticPlaceholders === false) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
			name = node.name.name;
			hasSyntacticPlaceholders = true;
		} else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) return;
		else if (isIdentifier$2(node) || isJSXIdentifier(node)) name = node.name;
		else if (isStringLiteral$2(node)) name = node.value;
		else return;
		if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
		if (!hasSyntacticPlaceholders && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) return;
		ancestors = ancestors.slice();
		const { node: parent, key } = ancestors[ancestors.length - 1];
		let type;
		if (isStringLiteral$2(node) || isPlaceholder(node, { expectedNode: "StringLiteral" })) type = "string";
		else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction$1(parent) && key === "params") type = "param";
		else if (isExpressionStatement(parent) && !isPlaceholder(node)) {
			type = "statement";
			ancestors = ancestors.slice(0, -1);
		} else if (isStatement$1(node) && isPlaceholder(node)) type = "statement";
		else type = "other";
		const { placeholders: placeholders$1, placeholderNames } = !hasSyntacticPlaceholders ? state.legacy : state.syntactic;
		placeholders$1.push({
			name,
			type,
			resolve: (ast) => resolveAncestors(ast, ancestors),
			isDuplicate: placeholderNames.has(name)
		});
		placeholderNames.add(name);
	}
	function resolveAncestors(ast, ancestors) {
		let parent = ast;
		for (let i$6 = 0; i$6 < ancestors.length - 1; i$6++) {
			const { key: key$1, index: index$2 } = ancestors[i$6];
			if (index$2 === void 0) parent = parent[key$1];
			else parent = parent[key$1][index$2];
		}
		const { key, index: index$1 } = ancestors[ancestors.length - 1];
		return {
			parent,
			key,
			index: index$1
		};
	}
	function parseWithCodeFrame(code$1, parserOpts$1, syntacticPlaceholders) {
		const plugins = (parserOpts$1.plugins || []).slice();
		if (syntacticPlaceholders !== false) plugins.push("placeholders");
		parserOpts$1 = Object.assign({
			allowAwaitOutsideFunction: true,
			allowReturnOutsideFunction: true,
			allowNewTargetOutsideFunction: true,
			allowSuperOutsideMethod: true,
			allowYieldOutsideFunction: true,
			sourceType: "module"
		}, parserOpts$1, { plugins });
		try {
			return (0, _parser.parse)(code$1, parserOpts$1);
		} catch (err) {
			const loc = err.loc;
			if (loc) {
				err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code$1, { start: loc });
				err.code = "BABEL_TEMPLATE_PARSE_ERROR";
			}
			throw err;
		}
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/populate.js
var require_populate = __commonJS({ "node_modules/@babel/template/lib/populate.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = populatePlaceholders;
	var _t$8 = require_lib$4();
	const { blockStatement: blockStatement$1, cloneNode: cloneNode$1, emptyStatement, expressionStatement: expressionStatement$1, identifier: identifier$1, isStatement, isStringLiteral: isStringLiteral$1, stringLiteral: stringLiteral$1, validate: validate$1 } = _t$8;
	function populatePlaceholders(metadata, replacements) {
		const ast = cloneNode$1(metadata.ast);
		if (replacements) {
			metadata.placeholders.forEach((placeholder$1) => {
				if (!hasOwnProperty.call(replacements, placeholder$1.name)) {
					const placeholderName = placeholder$1.name;
					throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
				}
			});
			Object.keys(replacements).forEach((key) => {
				if (!metadata.placeholderNames.has(key)) throw new Error(`Unknown substitution "${key}" given`);
			});
		}
		metadata.placeholders.slice().reverse().forEach((placeholder$1) => {
			try {
				applyReplacement(placeholder$1, ast, replacements && replacements[placeholder$1.name] || null);
			} catch (e$2) {
				e$2.message = `@babel/template placeholder "${placeholder$1.name}": ${e$2.message}`;
				throw e$2;
			}
		});
		return ast;
	}
	function applyReplacement(placeholder$1, ast, replacement) {
		if (placeholder$1.isDuplicate) {
			if (Array.isArray(replacement)) replacement = replacement.map((node) => cloneNode$1(node));
			else if (typeof replacement === "object") replacement = cloneNode$1(replacement);
		}
		const { parent, key, index: index$1 } = placeholder$1.resolve(ast);
		if (placeholder$1.type === "string") {
			if (typeof replacement === "string") replacement = stringLiteral$1(replacement);
			if (!replacement || !isStringLiteral$1(replacement)) throw new Error("Expected string substitution");
		} else if (placeholder$1.type === "statement") {
			if (index$1 === void 0) {
				if (!replacement) replacement = emptyStatement();
				else if (Array.isArray(replacement)) replacement = blockStatement$1(replacement);
				else if (typeof replacement === "string") replacement = expressionStatement$1(identifier$1(replacement));
				else if (!isStatement(replacement)) replacement = expressionStatement$1(replacement);
			} else if (replacement && !Array.isArray(replacement)) {
				if (typeof replacement === "string") replacement = identifier$1(replacement);
				if (!isStatement(replacement)) replacement = expressionStatement$1(replacement);
			}
		} else if (placeholder$1.type === "param") {
			if (typeof replacement === "string") replacement = identifier$1(replacement);
			if (index$1 === void 0) throw new Error("Assertion failure.");
		} else {
			if (typeof replacement === "string") replacement = identifier$1(replacement);
			if (Array.isArray(replacement)) throw new Error("Cannot replace single expression with an array.");
		}
		function set(parent$1, key$1, value) {
			const node = parent$1[key$1];
			parent$1[key$1] = value;
			if (node.type === "Identifier" || node.type === "Placeholder") {
				if (node.typeAnnotation) value.typeAnnotation = node.typeAnnotation;
				if (node.optional) value.optional = node.optional;
				if (node.decorators) value.decorators = node.decorators;
			}
		}
		if (index$1 === void 0) {
			validate$1(parent, key, replacement);
			set(parent, key, replacement);
		} else {
			const items = parent[key].slice();
			if (placeholder$1.type === "statement" || placeholder$1.type === "param") if (replacement == null) items.splice(index$1, 1);
			else if (Array.isArray(replacement)) items.splice(index$1, 1, ...replacement);
			else set(items, index$1, replacement);
			else set(items, index$1, replacement);
			validate$1(parent, key, items);
			parent[key] = items;
		}
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/string.js
var require_string = __commonJS({ "node_modules/@babel/template/lib/string.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = stringTemplate;
	var _options$2 = require_options();
	var _parse$1 = require_parse$1();
	var _populate$1 = require_populate();
	function stringTemplate(formatter$1, code$1, opts) {
		code$1 = formatter$1.code(code$1);
		let metadata;
		return (arg) => {
			const replacements = (0, _options$2.normalizeReplacements)(arg);
			if (!metadata) metadata = (0, _parse$1.default)(formatter$1, code$1, opts);
			return formatter$1.unwrap((0, _populate$1.default)(metadata, replacements));
		};
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/literal.js
var require_literal = __commonJS({ "node_modules/@babel/template/lib/literal.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = literalTemplate;
	var _options$1 = require_options();
	var _parse = require_parse$1();
	var _populate = require_populate();
	function literalTemplate(formatter$1, tpl, opts) {
		const { metadata, names } = buildLiteralData(formatter$1, tpl, opts);
		return (arg) => {
			const defaultReplacements = {};
			arg.forEach((replacement, i$6) => {
				defaultReplacements[names[i$6]] = replacement;
			});
			return (arg$1) => {
				const replacements = (0, _options$1.normalizeReplacements)(arg$1);
				if (replacements) Object.keys(replacements).forEach((key) => {
					if (hasOwnProperty.call(defaultReplacements, key)) throw new Error("Unexpected replacement overlap.");
				});
				return formatter$1.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
			};
		};
	}
	function buildLiteralData(formatter$1, tpl, opts) {
		let prefix$1 = "BABEL_TPL$";
		const raw = tpl.join("");
		do
			prefix$1 = "$$" + prefix$1;
		while (raw.includes(prefix$1));
		const { names, code: code$1 } = buildTemplateCode(tpl, prefix$1);
		const metadata = (0, _parse.default)(formatter$1, formatter$1.code(code$1), {
			parser: opts.parser,
			placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
			placeholderPattern: opts.placeholderPattern,
			preserveComments: opts.preserveComments,
			syntacticPlaceholders: opts.syntacticPlaceholders
		});
		return {
			metadata,
			names
		};
	}
	function buildTemplateCode(tpl, prefix$1) {
		const names = [];
		let code$1 = tpl[0];
		for (let i$6 = 1; i$6 < tpl.length; i$6++) {
			const value = `${prefix$1}${i$6 - 1}`;
			names.push(value);
			code$1 += value + tpl[i$6];
		}
		return {
			names,
			code: code$1
		};
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/builder.js
var require_builder = __commonJS({ "node_modules/@babel/template/lib/builder.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = createTemplateBuilder;
	var _options = require_options();
	var _string = require_string();
	var _literal = require_literal();
	const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
	function createTemplateBuilder(formatter$1, defaultOpts$2) {
		const templateFnCache = new WeakMap();
		const templateAstCache = new WeakMap();
		const cachedOpts = defaultOpts$2 || (0, _options.validate)(null);
		return Object.assign((tpl, ...args) => {
			if (typeof tpl === "string") {
				if (args.length > 1) throw new Error("Unexpected extra params.");
				return extendedTrace((0, _string.default)(formatter$1, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
			} else if (Array.isArray(tpl)) {
				let builder = templateFnCache.get(tpl);
				if (!builder) {
					builder = (0, _literal.default)(formatter$1, tpl, cachedOpts);
					templateFnCache.set(tpl, builder);
				}
				return extendedTrace(builder(args));
			} else if (typeof tpl === "object" && tpl) {
				if (args.length > 0) throw new Error("Unexpected extra params.");
				return createTemplateBuilder(formatter$1, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
			}
			throw new Error(`Unexpected template param ${typeof tpl}`);
		}, { ast: (tpl, ...args) => {
			if (typeof tpl === "string") {
				if (args.length > 1) throw new Error("Unexpected extra params.");
				return (0, _string.default)(formatter$1, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
			} else if (Array.isArray(tpl)) {
				let builder = templateAstCache.get(tpl);
				if (!builder) {
					builder = (0, _literal.default)(formatter$1, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
					templateAstCache.set(tpl, builder);
				}
				return builder(args)();
			}
			throw new Error(`Unexpected template param ${typeof tpl}`);
		} });
	}
	function extendedTrace(fn) {
		let rootStack = "";
		try {
			throw new Error();
		} catch (error) {
			if (error.stack) rootStack = error.stack.split("\n").slice(3).join("\n");
		}
		return (arg) => {
			try {
				return fn(arg);
			} catch (err) {
				err.stack += `\n    =============\n${rootStack}`;
				throw err;
			}
		};
	}
} });

//#endregion
//#region node_modules/@babel/template/lib/index.js
var require_lib$1 = __commonJS({ "node_modules/@babel/template/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.statements = exports.statement = exports.smart = exports.program = exports.expression = exports.default = void 0;
	var formatters = require_formatters();
	var _builder = require_builder();
	const smart = exports.smart = (0, _builder.default)(formatters.smart);
	const statement = exports.statement = (0, _builder.default)(formatters.statement);
	const statements = exports.statements = (0, _builder.default)(formatters.statements);
	const expression = exports.expression = (0, _builder.default)(formatters.expression);
	const program = exports.program = (0, _builder.default)(formatters.program);
	var _default$1 = exports.default = Object.assign(smart.bind(void 0), {
		smart,
		statement,
		statements,
		expression,
		program,
		ast: smart.ast
	});
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/conversion.js
var require_conversion = __commonJS({ "node_modules/@babel/traverse/lib/path/conversion.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.arrowFunctionToExpression = arrowFunctionToExpression;
	exports.ensureBlock = ensureBlock;
	exports.ensureFunctionName = ensureFunctionName;
	exports.splitExportDeclaration = splitExportDeclaration;
	exports.toComputedKey = toComputedKey;
	exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
	var _t$7 = require_lib$4();
	var _template = require_lib$1();
	var _visitors = require_visitors();
	var _context$3 = require_context();
	const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier: isIdentifier$1, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral: numericLiteral$1, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression: unaryExpression$1, toBindingIdentifierName, isFunction, isAssignmentPattern, isRestElement, getFunctionName, cloneNode, variableDeclaration, variableDeclarator, exportNamedDeclaration, exportSpecifier, inherits: inherits$1 } = _t$7;
	function toComputedKey() {
		let key;
		if (this.isMemberExpression()) key = this.node.property;
		else if (this.isProperty() || this.isMethod()) key = this.node.key;
		else throw new ReferenceError("todo");
		if (!this.node.computed) {
			if (isIdentifier$1(key)) key = stringLiteral(key.name);
		}
		return key;
	}
	function ensureBlock() {
		const body = this.get("body");
		const bodyNode = body.node;
		if (Array.isArray(body)) throw new Error("Can't convert array path to a block statement");
		if (!bodyNode) throw new Error("Can't convert node without a body");
		if (body.isBlockStatement()) return bodyNode;
		const statements$2 = [];
		let stringPath = "body";
		let key;
		let listKey;
		if (body.isStatement()) {
			listKey = "body";
			key = 0;
			statements$2.push(body.node);
		} else {
			stringPath += ".body.0";
			if (this.isFunction()) {
				key = "argument";
				statements$2.push(returnStatement(body.node));
			} else {
				key = "expression";
				statements$2.push(expressionStatement(body.node));
			}
		}
		this.node.body = blockStatement(statements$2);
		const parentPath = this.get(stringPath);
		_context$3.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
		return this.node;
	}
	exports.arrowFunctionToShadowed = function() {
		if (!this.isArrowFunctionExpression()) return;
		this.arrowFunctionToExpression();
	};
	function unwrapFunctionEnvironment() {
		if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
		hoistFunctionEnvironment(this);
	}
	function setType(path$28, type) {
		path$28.node.type = type;
	}
	function arrowFunctionToExpression({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)() } = {}) {
		if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
		let self$1 = this;
		if (!noNewArrows) {
			var _self$ensureFunctionN;
			self$1 = (_self$ensureFunctionN = self$1.ensureFunctionName(false)) != null ? _self$ensureFunctionN : self$1;
		}
		const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(self$1, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
		fn.ensureBlock();
		setType(fn, "FunctionExpression");
		if (!noNewArrows) {
			const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
			if (checkBinding) fn.parentPath.scope.push({
				id: checkBinding,
				init: objectExpression([])
			});
			fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));
			fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));
			return fn.get("callee.object");
		}
		return fn;
	}
	const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { allSuperCalls }) {
		if (!child.get("callee").isSuper()) return;
		allSuperCalls.push(child);
	} });
	function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
		let arrowParent;
		let thisEnvFn = fnPath.findParent((p$2) => {
			if (p$2.isArrowFunctionExpression()) {
				arrowParent != null || (arrowParent = p$2);
				return false;
			}
			return p$2.isFunction() || p$2.isProgram() || p$2.isClassProperty({ static: false }) || p$2.isClassPrivateProperty({ static: false });
		});
		const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
		if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) if (arrowParent) thisEnvFn = arrowParent;
		else if (allowInsertArrow) {
			fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));
			thisEnvFn = fnPath.get("callee");
			fnPath = thisEnvFn.get("body");
		} else throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
		const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = getScopeInformation(fnPath);
		if (inConstructor && superCalls.length > 0) {
			if (!allowInsertArrow) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
			if (!allowInsertArrowWithRest) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
			const allSuperCalls = [];
			thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
			const superBinding = getSuperBinding(thisEnvFn);
			allSuperCalls.forEach((superCall) => {
				const callee = identifier(superBinding);
				callee.loc = superCall.node.callee.loc;
				superCall.get("callee").replaceWith(callee);
			});
		}
		if (argumentsPaths.length > 0) {
			const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
				const args = () => identifier("arguments");
				if (thisEnvFn.scope.path.isProgram()) return conditionalExpression(binaryExpression("===", unaryExpression$1("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
				else return args();
			});
			argumentsPaths.forEach((argumentsChild) => {
				const argsRef = identifier(argumentsBinding);
				argsRef.loc = argumentsChild.node.loc;
				argumentsChild.replaceWith(argsRef);
			});
		}
		if (newTargetPaths.length > 0) {
			const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
			newTargetPaths.forEach((targetChild) => {
				const targetRef = identifier(newTargetBinding);
				targetRef.loc = targetChild.node.loc;
				targetChild.replaceWith(targetRef);
			});
		}
		if (superProps.length > 0) {
			if (!allowInsertArrow) throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
			const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
			flatSuperProps.forEach((superProp) => {
				const key = superProp.node.computed ? "" : superProp.get("property").node.name;
				const superParentPath = superProp.parentPath;
				const isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node });
				const isCall = superParentPath.isCallExpression({ callee: superProp.node });
				const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node });
				const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
				const args = [];
				if (superProp.node.computed) args.push(superProp.get("property").node);
				if (isAssignment) {
					const value = superParentPath.node.right;
					args.push(value);
				}
				const call$2 = callExpression(identifier(superBinding), args);
				if (isCall) {
					superParentPath.unshiftContainer("arguments", thisExpression());
					superProp.replaceWith(memberExpression(call$2, identifier("call")));
					thisPaths.push(superParentPath.get("arguments.0"));
				} else if (isAssignment) superParentPath.replaceWith(call$2);
				else if (isTaggedTemplate) {
					superProp.replaceWith(callExpression(memberExpression(call$2, identifier("bind"), false), [thisExpression()]));
					thisPaths.push(superProp.get("arguments.0"));
				} else superProp.replaceWith(call$2);
			});
		}
		let thisBinding;
		if (thisPaths.length > 0 || !noNewArrows) {
			thisBinding = getThisBinding(thisEnvFn, inConstructor);
			if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
				thisPaths.forEach((thisChild) => {
					const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
					thisRef.loc = thisChild.node.loc;
					thisChild.replaceWith(thisRef);
				});
				if (!noNewArrows) thisBinding = null;
			}
		}
		return {
			thisBinding,
			fnPath
		};
	}
	function isLogicalOp(op) {
		return LOGICAL_OPERATORS.includes(op);
	}
	function standardizeSuperProperty(superProp) {
		if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
			const assignmentPath = superProp.parentPath;
			const op = assignmentPath.node.operator.slice(0, -1);
			const value = assignmentPath.node.right;
			const isLogicalAssignment = isLogicalOp(op);
			if (superProp.node.computed) {
				const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
				const object$2 = superProp.node.object;
				const property = superProp.node.property;
				assignmentPath.get("left").replaceWith(memberExpression(object$2, assignmentExpression("=", tmp, property), true));
				assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object$2, identifier(tmp.name), true), value));
			} else {
				const object$2 = superProp.node.object;
				const property = superProp.node.property;
				assignmentPath.get("left").replaceWith(memberExpression(object$2, property));
				assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object$2, identifier(property.name)), value));
			}
			if (isLogicalAssignment) assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
			else assignmentPath.node.operator = "=";
			return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
		} else if (superProp.parentPath.isUpdateExpression()) {
			const updateExpr = superProp.parentPath;
			const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
			const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
			const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier(tmp.name), numericLiteral$1(1)))];
			if (!superProp.parentPath.node.prefix) parts.push(identifier(tmp.name));
			updateExpr.replaceWith(sequenceExpression(parts));
			const left = updateExpr.get("expressions.0.right");
			const right = updateExpr.get("expressions.1.left");
			return [left, right];
		}
		return [superProp];
		function rightExpression(op, left, right) {
			if (op === "=") return assignmentExpression("=", left, right);
			else return binaryExpression(op, left, right);
		}
	}
	function hasSuperClass(thisEnvFn) {
		return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
	}
	const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { supers, thisBinding }) {
		if (!child.get("callee").isSuper()) return;
		if (supers.has(child.node)) return;
		supers.add(child.node);
		child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))]);
	} });
	function getThisBinding(thisEnvFn, inConstructor) {
		return getBinding(thisEnvFn, "this", (thisBinding) => {
			if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();
			thisEnvFn.traverse(assignSuperThisVisitor, {
				supers: new WeakSet(),
				thisBinding
			});
		});
	}
	function getSuperBinding(thisEnvFn) {
		return getBinding(thisEnvFn, "supercall", () => {
			const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
			return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
		});
	}
	function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
		const op = isAssignment ? "set" : "get";
		return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
			const argsList = [];
			let fnBody;
			if (propName) fnBody = memberExpression(_super(), identifier(propName));
			else {
				const method = thisEnvFn.scope.generateUidIdentifier("prop");
				argsList.unshift(method);
				fnBody = memberExpression(_super(), identifier(method.name), true);
			}
			if (isAssignment) {
				const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
				argsList.push(valueIdent);
				fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
			}
			return arrowFunctionExpression(argsList, fnBody);
		});
	}
	function getBinding(thisEnvFn, key, init$1) {
		const cacheKey = "binding:" + key;
		let data$2 = thisEnvFn.getData(cacheKey);
		if (!data$2) {
			const id$4 = thisEnvFn.scope.generateUidIdentifier(key);
			data$2 = id$4.name;
			thisEnvFn.setData(cacheKey, data$2);
			thisEnvFn.scope.push({
				id: id$4,
				init: init$1(data$2)
			});
		}
		return data$2;
	}
	const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({
		ThisExpression(child, { thisPaths }) {
			thisPaths.push(child);
		},
		JSXIdentifier(child, { thisPaths }) {
			if (child.node.name !== "this") return;
			if (!child.parentPath.isJSXMemberExpression({ object: child.node }) && !child.parentPath.isJSXOpeningElement({ name: child.node })) return;
			thisPaths.push(child);
		},
		CallExpression(child, { superCalls }) {
			if (child.get("callee").isSuper()) superCalls.push(child);
		},
		MemberExpression(child, { superProps }) {
			if (child.get("object").isSuper()) superProps.push(child);
		},
		Identifier(child, { argumentsPaths }) {
			if (!child.isReferencedIdentifier({ name: "arguments" })) return;
			let curr = child.scope;
			do {
				if (curr.hasOwnBinding("arguments")) {
					curr.rename("arguments");
					return;
				}
				if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) break;
			} while (curr = curr.parent);
			argumentsPaths.push(child);
		},
		MetaProperty(child, { newTargetPaths }) {
			if (!child.get("meta").isIdentifier({ name: "new" })) return;
			if (!child.get("property").isIdentifier({ name: "target" })) return;
			newTargetPaths.push(child);
		}
	});
	function getScopeInformation(fnPath) {
		const thisPaths = [];
		const argumentsPaths = [];
		const newTargetPaths = [];
		const superProps = [];
		const superCalls = [];
		fnPath.traverse(getScopeInformationVisitor, {
			thisPaths,
			argumentsPaths,
			newTargetPaths,
			superProps,
			superCalls
		});
		return {
			thisPaths,
			argumentsPaths,
			newTargetPaths,
			superProps,
			superCalls
		};
	}
	function splitExportDeclaration() {
		if (!this.isExportDeclaration() || this.isExportAllDeclaration()) throw new Error("Only default and named export declarations can be split.");
		if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
		const declaration = this.get("declaration");
		if (this.isExportDefaultDeclaration()) {
			const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();
			const exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression();
			const scope$1 = declaration.isScope() ? declaration.scope.parent : declaration.scope;
			let id$4 = declaration.node.id;
			let needBindingRegistration = false;
			if (!id$4) {
				needBindingRegistration = true;
				id$4 = scope$1.generateUidIdentifier("default");
				if (standaloneDeclaration || exportExpr) declaration.node.id = cloneNode(id$4);
			} else if (exportExpr && scope$1.hasBinding(id$4.name)) {
				needBindingRegistration = true;
				id$4 = scope$1.generateUidIdentifier(id$4.name);
			}
			const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id$4), declaration.node)]);
			const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id$4), identifier("default"))]);
			this.insertAfter(updatedExportDeclaration);
			this.replaceWith(updatedDeclaration);
			if (needBindingRegistration) scope$1.registerDeclaration(this);
			return this;
		} else if (this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
		const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
		const specifiers = Object.keys(bindingIdentifiers).map((name) => {
			return exportSpecifier(identifier(name), identifier(name));
		});
		const aliasDeclar = exportNamedDeclaration(null, specifiers);
		this.insertAfter(aliasDeclar);
		this.replaceWith(declaration.node);
		return this;
	}
	const refersOuterBindingVisitor = {
		"ReferencedIdentifier|BindingIdentifier"(path$28, state) {
			if (path$28.node.name !== state.name) return;
			state.needsRename = true;
			path$28.stop();
		},
		Scope(path$28, state) {
			if (path$28.scope.hasOwnBinding(state.name)) path$28.skip();
		}
	};
	function ensureFunctionName(supportUnicodeId) {
		if (this.node.id) return this;
		const res = getFunctionName(this.node, this.parent);
		if (res == null) return this;
		let { name } = res;
		if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) return null;
		if (name.startsWith("get ") || name.startsWith("set ")) return null;
		name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
		const id$4 = identifier(name);
		inherits$1(id$4, res.originalNode);
		const state = {
			needsRename: false,
			name
		};
		const { scope: scope$1 } = this;
		const binding = scope$1.getOwnBinding(name);
		if (binding) {
			if (binding.kind === "param") state.needsRename = true;
		} else if (scope$1.parent.hasBinding(name) || scope$1.hasGlobal(name)) this.traverse(refersOuterBindingVisitor, state);
		if (!state.needsRename) {
			this.node.id = id$4;
			scope$1.getProgramParent().references[id$4.name] = true;
			return this;
		}
		if (scope$1.hasBinding(id$4.name) && !scope$1.hasGlobal(id$4.name)) {
			scope$1.rename(id$4.name);
			this.node.id = id$4;
			scope$1.getProgramParent().references[id$4.name] = true;
			return this;
		}
		if (!isFunction(this.node)) return null;
		const key = scope$1.generateUidIdentifier(id$4.name);
		const params = [];
		for (let i$6 = 0, len = getFunctionArity(this.node); i$6 < len; i$6++) params.push(scope$1.generateUidIdentifier("x"));
		const call$2 = _template.default.expression.ast`
    (function (${key}) {
      function ${id$4}(${params}) {
        return ${cloneNode(key)}.apply(this, arguments);
      }

      ${cloneNode(id$4)}.toString = function () {
        return ${cloneNode(key)}.toString();
      }

      return ${cloneNode(id$4)};
    })(${toExpression(this.node)})
  `;
		return this.replaceWith(call$2)[0].get("arguments.0");
	}
	function getFunctionArity(node) {
		const count = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
		return count === -1 ? node.params.length : count;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/introspection.js
var require_introspection = __commonJS({ "node_modules/@babel/traverse/lib/path/introspection.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	exports._resolve = _resolve;
	exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
	exports.getSource = getSource;
	exports.isCompletionRecord = isCompletionRecord;
	exports.isConstantExpression = isConstantExpression;
	exports.isInStrictMode = isInStrictMode;
	exports.isNodeType = isNodeType;
	exports.isStatementOrBlock = isStatementOrBlock;
	exports.isStatic = isStatic;
	exports.matchesPattern = matchesPattern;
	exports.referencesImport = referencesImport;
	exports.resolve = resolve$1;
	exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	var _t$6 = require_lib$4();
	const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS: VISITOR_KEYS$3, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t$6;
	function matchesPattern(pattern, allowPartial) {
		return _matchesPattern(this.node, pattern, allowPartial);
	}
	exports.has = function has$3(key) {
		var _this$node;
		const val = (_this$node = this.node) == null ? void 0 : _this$node[key];
		if (val && Array.isArray(val)) return !!val.length;
		else return !!val;
	};
	function isStatic() {
		return this.scope.isStatic(this.node);
	}
	{
		exports.is = exports.has;
		exports.isnt = function isnt(key) {
			return !this.has(key);
		};
		exports.equals = function equals$3(key, value) {
			return this.node[key] === value;
		};
	}
	function isNodeType(type) {
		return isType(this.type, type);
	}
	function canHaveVariableDeclarationOrExpression() {
		return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}
	function canSwapBetweenExpressionAndStatement(replacement) {
		if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) return false;
		if (this.isExpression()) return isBlockStatement(replacement);
		else if (this.isBlockStatement()) return isExpression(replacement);
		return false;
	}
	function isCompletionRecord(allowInsideFunction) {
		let path$28 = this;
		let first = true;
		do {
			const { type, container } = path$28;
			if (!first && (path$28.isFunction() || type === "StaticBlock")) return !!allowInsideFunction;
			first = false;
			if (Array.isArray(container) && path$28.key !== container.length - 1) return false;
		} while ((path$28 = path$28.parentPath) && !path$28.isProgram() && !path$28.isDoExpression());
		return true;
	}
	function isStatementOrBlock() {
		if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) return false;
		else return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
	}
	function referencesImport(moduleSource, importName) {
		if (!this.isReferencedIdentifier()) {
			if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
				const object$2 = this.get("object");
				return object$2.isReferencedIdentifier() && object$2.referencesImport(moduleSource, "*");
			}
			return false;
		}
		const binding = this.scope.getBinding(this.node.name);
		if (!binding || binding.kind !== "module") return false;
		const path$28 = binding.path;
		const parent = path$28.parentPath;
		if (!parent.isImportDeclaration()) return false;
		if (parent.node.source.value === moduleSource) {
			if (!importName) return true;
		} else return false;
		if (path$28.isImportDefaultSpecifier() && importName === "default") return true;
		if (path$28.isImportNamespaceSpecifier() && importName === "*") return true;
		if (path$28.isImportSpecifier() && isIdentifier(path$28.node.imported, { name: importName })) return true;
		return false;
	}
	function getSource() {
		const node = this.node;
		if (node.end) {
			const code$1 = this.hub.getCode();
			if (code$1) return code$1.slice(node.start, node.end);
		}
		return "";
	}
	function willIMaybeExecuteBefore(target) {
		return this._guessExecutionStatusRelativeTo(target) !== "after";
	}
	function getOuterFunction(path$28) {
		return path$28.isProgram() ? path$28 : (path$28.parentPath.scope.getFunctionParent() || path$28.parentPath.scope.getProgramParent()).path;
	}
	function isExecutionUncertain(type, key) {
		switch (type) {
			case "LogicalExpression": return key === "right";
			case "ConditionalExpression":
			case "IfStatement": return key === "consequent" || key === "alternate";
			case "WhileStatement":
			case "DoWhileStatement":
			case "ForInStatement":
			case "ForOfStatement": return key === "body";
			case "ForStatement": return key === "body" || key === "update";
			case "SwitchStatement": return key === "cases";
			case "TryStatement": return key === "handler";
			case "AssignmentPattern": return key === "right";
			case "OptionalMemberExpression": return key === "property";
			case "OptionalCallExpression": return key === "arguments";
			default: return false;
		}
	}
	function isExecutionUncertainInList(paths, maxIndex) {
		for (let i$6 = 0; i$6 < maxIndex; i$6++) {
			const path$28 = paths[i$6];
			if (isExecutionUncertain(path$28.parent.type, path$28.parentKey)) return true;
		}
		return false;
	}
	const SYMBOL_CHECKING = Symbol();
	function _guessExecutionStatusRelativeTo(target) {
		return _guessExecutionStatusRelativeToCached(this, target, new Map());
	}
	function _guessExecutionStatusRelativeToCached(base$1, target, cache$3) {
		const funcParent = {
			this: getOuterFunction(base$1),
			target: getOuterFunction(target)
		};
		if (funcParent.target.node !== funcParent.this.node) return _guessExecutionStatusRelativeToDifferentFunctionsCached(base$1, funcParent.target, cache$3);
		const paths = {
			target: target.getAncestry(),
			this: base$1.getAncestry()
		};
		if (paths.target.includes(base$1)) return "after";
		if (paths.this.includes(target)) return "before";
		let commonPath;
		const commonIndex = {
			target: 0,
			this: 0
		};
		while (!commonPath && commonIndex.this < paths.this.length) {
			const path$28 = paths.this[commonIndex.this];
			commonIndex.target = paths.target.indexOf(path$28);
			if (commonIndex.target >= 0) commonPath = path$28;
			else commonIndex.this++;
		}
		if (!commonPath) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
		if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) return "unknown";
		const divergence = {
			this: paths.this[commonIndex.this - 1],
			target: paths.target[commonIndex.target - 1]
		};
		if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) return divergence.target.key > divergence.this.key ? "before" : "after";
		const keys$1 = VISITOR_KEYS$3[commonPath.type];
		const keyPosition = {
			this: keys$1.indexOf(divergence.this.parentKey),
			target: keys$1.indexOf(divergence.target.parentKey)
		};
		return keyPosition.target > keyPosition.this ? "before" : "after";
	}
	function _guessExecutionStatusRelativeToDifferentFunctionsInternal(base$1, target, cache$3) {
		if (!target.isFunctionDeclaration()) {
			if (_guessExecutionStatusRelativeToCached(base$1, target, cache$3) === "before") return "before";
			return "unknown";
		} else if (target.parentPath.isExportDeclaration()) return "unknown";
		const binding = target.scope.getBinding(target.node.id.name);
		if (!binding.references) return "before";
		const referencePaths = binding.referencePaths;
		let allStatus;
		for (const path$28 of referencePaths) {
			const childOfFunction = !!path$28.find((path$29) => path$29.node === target.node);
			if (childOfFunction) continue;
			if (path$28.key !== "callee" || !path$28.parentPath.isCallExpression()) return "unknown";
			const status = _guessExecutionStatusRelativeToCached(base$1, path$28, cache$3);
			if (allStatus && allStatus !== status) return "unknown";
			else allStatus = status;
		}
		return allStatus;
	}
	function _guessExecutionStatusRelativeToDifferentFunctionsCached(base$1, target, cache$3) {
		let nodeMap = cache$3.get(base$1.node);
		let cached;
		if (!nodeMap) cache$3.set(base$1.node, nodeMap = new Map());
		else if (cached = nodeMap.get(target.node)) {
			if (cached === SYMBOL_CHECKING) return "unknown";
			return cached;
		}
		nodeMap.set(target.node, SYMBOL_CHECKING);
		const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base$1, target, cache$3);
		nodeMap.set(target.node, result);
		return result;
	}
	function resolve$1(dangerous, resolved) {
		return _resolve.call(this, dangerous, resolved) || this;
	}
	function _resolve(dangerous, resolved) {
		var _resolved;
		if ((_resolved = resolved) != null && _resolved.includes(this)) return;
		resolved = resolved || [];
		resolved.push(this);
		if (this.isVariableDeclarator()) {
			if (this.get("id").isIdentifier()) return this.get("init").resolve(dangerous, resolved);
		} else if (this.isReferencedIdentifier()) {
			const binding = this.scope.getBinding(this.node.name);
			if (!binding) return;
			if (!binding.constant) return;
			if (binding.kind === "module") return;
			if (binding.path !== this) {
				const ret$1 = binding.path.resolve(dangerous, resolved);
				if (this.find((parent) => parent.node === ret$1.node)) return;
				return ret$1;
			}
		} else if (this.isTypeCastExpression()) return this.get("expression").resolve(dangerous, resolved);
		else if (dangerous && this.isMemberExpression()) {
			const targetKey = this.toComputedKey();
			if (!isLiteral(targetKey)) return;
			const targetName = targetKey.value;
			const target = this.get("object").resolve(dangerous, resolved);
			if (target.isObjectExpression()) {
				const props = target.get("properties");
				for (const prop of props) {
					if (!prop.isProperty()) continue;
					const key = prop.get("key");
					let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
					match = match || key.isLiteral({ value: targetName });
					if (match) return prop.get("value").resolve(dangerous, resolved);
				}
			} else if (target.isArrayExpression() && !isNaN(+targetName)) {
				const elems = target.get("elements");
				const elem = elems[targetName];
				if (elem) return elem.resolve(dangerous, resolved);
			}
		}
	}
	function isConstantExpression() {
		if (this.isIdentifier()) {
			const binding = this.scope.getBinding(this.node.name);
			if (!binding) return false;
			return binding.constant;
		}
		if (this.isLiteral()) {
			if (this.isRegExpLiteral()) return false;
			if (this.isTemplateLiteral()) return this.get("expressions").every((expression$2) => expression$2.isConstantExpression());
			return true;
		}
		if (this.isUnaryExpression()) {
			if (this.node.operator !== "void") return false;
			return this.get("argument").isConstantExpression();
		}
		if (this.isBinaryExpression()) {
			const { operator: operator$1 } = this.node;
			return operator$1 !== "in" && operator$1 !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
		}
		if (this.isMemberExpression()) return !this.node.computed && this.get("object").isIdentifier({ name: "Symbol" }) && !this.scope.hasBinding("Symbol", { noGlobals: true });
		if (this.isCallExpression()) return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", { noGlobals: true }) && this.get("arguments")[0].isStringLiteral();
		return false;
	}
	function isInStrictMode() {
		const start = this.isProgram() ? this : this.parentPath;
		const strictParent = start.find((path$28) => {
			if (path$28.isProgram({ sourceType: "module" })) return true;
			if (path$28.isClass()) return true;
			if (path$28.isArrowFunctionExpression() && !path$28.get("body").isBlockStatement()) return false;
			let body;
			if (path$28.isFunction()) body = path$28.node.body;
			else if (path$28.isProgram()) body = path$28.node;
			else return false;
			for (const directive$1 of body.directives) if (directive$1.value.value === "use strict") return true;
		});
		return !!strictParent;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/family.js
var require_family = __commonJS({ "node_modules/@babel/traverse/lib/path/family.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._getKey = _getKey;
	exports._getPattern = _getPattern;
	exports.get = get;
	exports.getAllNextSiblings = getAllNextSiblings;
	exports.getAllPrevSiblings = getAllPrevSiblings;
	exports.getAssignmentIdentifiers = getAssignmentIdentifiers;
	exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getCompletionRecords = getCompletionRecords;
	exports.getNextSibling = getNextSibling;
	exports.getOpposite = getOpposite;
	exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
	exports.getPrevSibling = getPrevSibling;
	exports.getSibling = getSibling;
	var _index$4 = require_path();
	var _t$5 = require_lib$4();
	const { getAssignmentIdentifiers: _getAssignmentIdentifiers, getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, numericLiteral, unaryExpression } = _t$5;
	const NORMAL_COMPLETION = 0;
	const BREAK_COMPLETION = 1;
	function NormalCompletion(path$28) {
		return {
			type: NORMAL_COMPLETION,
			path: path$28
		};
	}
	function BreakCompletion(path$28) {
		return {
			type: BREAK_COMPLETION,
			path: path$28
		};
	}
	function getOpposite() {
		if (this.key === "left") return this.getSibling("right");
		else if (this.key === "right") return this.getSibling("left");
		return null;
	}
	function addCompletionRecords(path$28, records, context) {
		if (path$28) records.push(..._getCompletionRecords(path$28, context));
		return records;
	}
	function completionRecordForSwitch(cases, records, context) {
		let lastNormalCompletions = [];
		for (let i$6 = 0; i$6 < cases.length; i$6++) {
			const casePath = cases[i$6];
			const caseCompletions = _getCompletionRecords(casePath, context);
			const normalCompletions = [];
			const breakCompletions = [];
			for (const c$2 of caseCompletions) {
				if (c$2.type === NORMAL_COMPLETION) normalCompletions.push(c$2);
				if (c$2.type === BREAK_COMPLETION) breakCompletions.push(c$2);
			}
			if (normalCompletions.length) lastNormalCompletions = normalCompletions;
			records.push(...breakCompletions);
		}
		records.push(...lastNormalCompletions);
		return records;
	}
	function normalCompletionToBreak(completions) {
		completions.forEach((c$2) => {
			c$2.type = BREAK_COMPLETION;
		});
	}
	function replaceBreakStatementInBreakCompletion(completions, reachable) {
		completions.forEach((c$2) => {
			if (c$2.path.isBreakStatement({ label: null })) if (reachable) c$2.path.replaceWith(unaryExpression("void", numericLiteral(0)));
			else c$2.path.remove();
		});
	}
	function getStatementListCompletion(paths, context) {
		const completions = [];
		if (context.canHaveBreak) {
			let lastNormalCompletions = [];
			for (let i$6 = 0; i$6 < paths.length; i$6++) {
				const path$28 = paths[i$6];
				const newContext = Object.assign({}, context, { inCaseClause: false });
				if (path$28.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) newContext.shouldPopulateBreak = true;
				else newContext.shouldPopulateBreak = false;
				const statementCompletions = _getCompletionRecords(path$28, newContext);
				if (statementCompletions.length > 0 && statementCompletions.every((c$2) => c$2.type === BREAK_COMPLETION)) {
					if (lastNormalCompletions.length > 0 && statementCompletions.every((c$2) => c$2.path.isBreakStatement({ label: null }))) {
						normalCompletionToBreak(lastNormalCompletions);
						completions.push(...lastNormalCompletions);
						if (lastNormalCompletions.some((c$2) => c$2.path.isDeclaration())) {
							completions.push(...statementCompletions);
							replaceBreakStatementInBreakCompletion(statementCompletions, true);
						}
						replaceBreakStatementInBreakCompletion(statementCompletions, false);
					} else {
						completions.push(...statementCompletions);
						if (!context.shouldPopulateBreak) replaceBreakStatementInBreakCompletion(statementCompletions, true);
					}
					break;
				}
				if (i$6 === paths.length - 1) completions.push(...statementCompletions);
				else {
					lastNormalCompletions = [];
					for (let i$7 = 0; i$7 < statementCompletions.length; i$7++) {
						const c$2 = statementCompletions[i$7];
						if (c$2.type === BREAK_COMPLETION) completions.push(c$2);
						if (c$2.type === NORMAL_COMPLETION) lastNormalCompletions.push(c$2);
					}
				}
			}
		} else if (paths.length) for (let i$6 = paths.length - 1; i$6 >= 0; i$6--) {
			const pathCompletions = _getCompletionRecords(paths[i$6], context);
			if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
				completions.push(...pathCompletions);
				break;
			}
		}
		return completions;
	}
	function _getCompletionRecords(path$28, context) {
		let records = [];
		if (path$28.isIfStatement()) {
			records = addCompletionRecords(path$28.get("consequent"), records, context);
			records = addCompletionRecords(path$28.get("alternate"), records, context);
		} else if (path$28.isDoExpression() || path$28.isFor() || path$28.isWhile() || path$28.isLabeledStatement()) return addCompletionRecords(path$28.get("body"), records, context);
		else if (path$28.isProgram() || path$28.isBlockStatement()) return getStatementListCompletion(path$28.get("body"), context);
		else if (path$28.isFunction()) return _getCompletionRecords(path$28.get("body"), context);
		else if (path$28.isTryStatement()) {
			records = addCompletionRecords(path$28.get("block"), records, context);
			records = addCompletionRecords(path$28.get("handler"), records, context);
		} else if (path$28.isCatchClause()) return addCompletionRecords(path$28.get("body"), records, context);
		else if (path$28.isSwitchStatement()) return completionRecordForSwitch(path$28.get("cases"), records, context);
		else if (path$28.isSwitchCase()) return getStatementListCompletion(path$28.get("consequent"), {
			canHaveBreak: true,
			shouldPopulateBreak: false,
			inCaseClause: true
		});
		else if (path$28.isBreakStatement()) records.push(BreakCompletion(path$28));
		else records.push(NormalCompletion(path$28));
		return records;
	}
	function getCompletionRecords() {
		const records = _getCompletionRecords(this, {
			canHaveBreak: false,
			shouldPopulateBreak: false,
			inCaseClause: false
		});
		return records.map((r$2) => r$2.path);
	}
	function getSibling(key) {
		return _index$4.default.get({
			parentPath: this.parentPath,
			parent: this.parent,
			container: this.container,
			listKey: this.listKey,
			key
		}).setContext(this.context);
	}
	function getPrevSibling() {
		return this.getSibling(this.key - 1);
	}
	function getNextSibling() {
		return this.getSibling(this.key + 1);
	}
	function getAllNextSiblings() {
		let _key = this.key;
		let sibling = this.getSibling(++_key);
		const siblings = [];
		while (sibling.node) {
			siblings.push(sibling);
			sibling = this.getSibling(++_key);
		}
		return siblings;
	}
	function getAllPrevSiblings() {
		let _key = this.key;
		let sibling = this.getSibling(--_key);
		const siblings = [];
		while (sibling.node) {
			siblings.push(sibling);
			sibling = this.getSibling(--_key);
		}
		return siblings;
	}
	function get(key, context = true) {
		if (context === true) context = this.context;
		const parts = key.split(".");
		if (parts.length === 1) return _getKey.call(this, key, context);
		else return _getPattern.call(this, parts, context);
	}
	function _getKey(key, context) {
		const node = this.node;
		const container = node[key];
		if (Array.isArray(container)) return container.map((_, i$6) => {
			return _index$4.default.get({
				listKey: key,
				parentPath: this,
				parent: node,
				container,
				key: i$6
			}).setContext(context);
		});
		else return _index$4.default.get({
			parentPath: this,
			parent: node,
			container: node,
			key
		}).setContext(context);
	}
	function _getPattern(parts, context) {
		let path$28 = this;
		for (const part of parts) if (part === ".") path$28 = path$28.parentPath;
		else if (Array.isArray(path$28)) path$28 = path$28[part];
		else path$28 = path$28.get(part, context);
		return path$28;
	}
	function getAssignmentIdentifiers() {
		return _getAssignmentIdentifiers(this.node);
	}
	function getBindingIdentifiers(duplicates) {
		return _getBindingIdentifiers(this.node, duplicates);
	}
	function getOuterBindingIdentifiers(duplicates) {
		return _getOuterBindingIdentifiers(this.node, duplicates);
	}
	function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
		const path$28 = this;
		const search = [path$28];
		const ids = Object.create(null);
		while (search.length) {
			const id$4 = search.shift();
			if (!id$4) continue;
			if (!id$4.node) continue;
			const keys$1 = _getBindingIdentifiers.keys[id$4.node.type];
			if (id$4.isIdentifier()) {
				if (duplicates) {
					const _ids = ids[id$4.node.name] = ids[id$4.node.name] || [];
					_ids.push(id$4);
				} else ids[id$4.node.name] = id$4;
				continue;
			}
			if (id$4.isExportDeclaration()) {
				const declaration = id$4.get("declaration");
				if (declaration.isDeclaration()) search.push(declaration);
				continue;
			}
			if (outerOnly) {
				if (id$4.isFunctionDeclaration()) {
					search.push(id$4.get("id"));
					continue;
				}
				if (id$4.isFunctionExpression()) continue;
			}
			if (keys$1) for (let i$6 = 0; i$6 < keys$1.length; i$6++) {
				const key = keys$1[i$6];
				const child = id$4.get(key);
				if (Array.isArray(child)) search.push(...child);
				else if (child.node) search.push(child);
			}
		}
		return ids;
	}
	function getOuterBindingIdentifierPaths(duplicates = false) {
		return this.getBindingIdentifierPaths(duplicates, true);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/comments.js
var require_comments = __commonJS({ "node_modules/@babel/traverse/lib/path/comments.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.addComment = addComment;
	exports.addComments = addComments;
	exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
	var _t$4 = require_lib$4();
	const { addComment: _addComment, addComments: _addComments } = _t$4;
	function shareCommentsWithSiblings() {
		if (typeof this.key === "string") return;
		const node = this.node;
		if (!node) return;
		const trailing = node.trailingComments;
		const leading = node.leadingComments;
		if (!trailing && !leading) return;
		const prev = this.getSibling(this.key - 1);
		const next = this.getSibling(this.key + 1);
		const hasPrev = Boolean(prev.node);
		const hasNext = Boolean(next.node);
		if (hasPrev) {
			if (leading) prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));
			if (trailing && !hasNext) prev.addComments("trailing", trailing);
		}
		if (hasNext) {
			if (trailing) next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));
			if (leading && !hasPrev) next.addComments("leading", leading);
		}
	}
	function removeIfExisting(list$4, toRemove) {
		if (!(toRemove != null && toRemove.length)) return list$4;
		const set = new Set(toRemove);
		return list$4.filter((el) => {
			return !set.has(el);
		});
	}
	function addComment(type, content, line) {
		_addComment(this.node, type, content, line);
	}
	function addComments(type, comments) {
		_addComments(this.node, type, comments);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/index.js
var require_path = __commonJS({ "node_modules/@babel/traverse/lib/path/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.SHOULD_STOP = exports.SHOULD_SKIP = exports.REMOVED = void 0;
	var virtualTypes = require_virtual_types();
	var _debug = require_src();
	var _index$3 = require_lib();
	var _index2$1 = require_scope();
	var _t$3 = require_lib$4();
	var t$3 = _t$3;
	var cache$1 = require_cache();
	var _generator = require_lib$3();
	var NodePath_ancestry = require_ancestry();
	var NodePath_inference = require_inference();
	var NodePath_replacement = require_replacement();
	var NodePath_evaluation = require_evaluation();
	var NodePath_conversion = require_conversion();
	var NodePath_introspection = require_introspection();
	var _context$2 = require_context();
	var NodePath_context = _context$2;
	var NodePath_removal = require_removal();
	var NodePath_modification = require_modification();
	var NodePath_family = require_family();
	var NodePath_comments = require_comments();
	var NodePath_virtual_types_validator = require_virtual_types_validator();
	const { validate } = _t$3;
	const debug = _debug("babel");
	const REMOVED = exports.REMOVED = 1;
	const SHOULD_STOP = exports.SHOULD_STOP = 2;
	const SHOULD_SKIP = exports.SHOULD_SKIP = 4;
	const NodePath_Final = exports.default = class NodePath {
		constructor(hub, parent) {
			this.contexts = [];
			this.state = null;
			this.opts = null;
			this._traverseFlags = 0;
			this.skipKeys = null;
			this.parentPath = null;
			this.container = null;
			this.listKey = null;
			this.key = null;
			this.node = null;
			this.type = null;
			this.parent = parent;
			this.hub = hub;
			this.data = null;
			this.context = null;
			this.scope = null;
		}
		get removed() {
			return (this._traverseFlags & 1) > 0;
		}
		set removed(v$1) {
			if (v$1) this._traverseFlags |= 1;
			else this._traverseFlags &= -2;
		}
		get shouldStop() {
			return (this._traverseFlags & 2) > 0;
		}
		set shouldStop(v$1) {
			if (v$1) this._traverseFlags |= 2;
			else this._traverseFlags &= -3;
		}
		get shouldSkip() {
			return (this._traverseFlags & 4) > 0;
		}
		set shouldSkip(v$1) {
			if (v$1) this._traverseFlags |= 4;
			else this._traverseFlags &= -5;
		}
		static get({ hub, parentPath, parent, container, listKey, key }) {
			if (!hub && parentPath) hub = parentPath.hub;
			if (!parent) throw new Error("To get a node path the parent needs to exist");
			const targetNode = container[key];
			const paths = cache$1.getOrCreateCachedPaths(hub, parent);
			let path$28 = paths.get(targetNode);
			if (!path$28) {
				path$28 = new NodePath(hub, parent);
				if (targetNode) paths.set(targetNode, path$28);
			}
			_context$2.setup.call(path$28, parentPath, container, listKey, key);
			return path$28;
		}
		getScope(scope$1) {
			return this.isScope() ? new _index2$1.default(this) : scope$1;
		}
		setData(key, val) {
			if (this.data == null) this.data = Object.create(null);
			return this.data[key] = val;
		}
		getData(key, def$1) {
			if (this.data == null) this.data = Object.create(null);
			let val = this.data[key];
			if (val === void 0 && def$1 !== void 0) val = this.data[key] = def$1;
			return val;
		}
		hasNode() {
			return this.node != null;
		}
		buildCodeFrameError(msg, Error$1 = SyntaxError) {
			return this.hub.buildError(this.node, msg, Error$1);
		}
		traverse(visitor, state) {
			(0, _index$3.default)(this.node, visitor, this.scope, state, this);
		}
		set(key, node) {
			validate(this.node, key, node);
			this.node[key] = node;
		}
		getPathLocation() {
			const parts = [];
			let path$28 = this;
			do {
				let key = path$28.key;
				if (path$28.inList) key = `${path$28.listKey}[${key}]`;
				parts.unshift(key);
			} while (path$28 = path$28.parentPath);
			return parts.join(".");
		}
		debug(message) {
			if (!debug.enabled) return;
			debug(`${this.getPathLocation()} ${this.type}: ${message}`);
		}
		toString() {
			return (0, _generator.default)(this.node).code;
		}
		get inList() {
			return !!this.listKey;
		}
		set inList(inList) {
			if (!inList) this.listKey = null;
		}
		get parentKey() {
			return this.listKey || this.key;
		}
	};
	const methods = {
		findParent: NodePath_ancestry.findParent,
		find: NodePath_ancestry.find,
		getFunctionParent: NodePath_ancestry.getFunctionParent,
		getStatementParent: NodePath_ancestry.getStatementParent,
		getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom,
		getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,
		getAncestry: NodePath_ancestry.getAncestry,
		isAncestor: NodePath_ancestry.isAncestor,
		isDescendant: NodePath_ancestry.isDescendant,
		inType: NodePath_ancestry.inType,
		getTypeAnnotation: NodePath_inference.getTypeAnnotation,
		isBaseType: NodePath_inference.isBaseType,
		couldBeBaseType: NodePath_inference.couldBeBaseType,
		baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,
		isGenericType: NodePath_inference.isGenericType,
		replaceWithMultiple: NodePath_replacement.replaceWithMultiple,
		replaceWithSourceString: NodePath_replacement.replaceWithSourceString,
		replaceWith: NodePath_replacement.replaceWith,
		replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements,
		replaceInline: NodePath_replacement.replaceInline,
		evaluateTruthy: NodePath_evaluation.evaluateTruthy,
		evaluate: NodePath_evaluation.evaluate,
		toComputedKey: NodePath_conversion.toComputedKey,
		ensureBlock: NodePath_conversion.ensureBlock,
		unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,
		arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,
		splitExportDeclaration: NodePath_conversion.splitExportDeclaration,
		ensureFunctionName: NodePath_conversion.ensureFunctionName,
		matchesPattern: NodePath_introspection.matchesPattern,
		isStatic: NodePath_introspection.isStatic,
		isNodeType: NodePath_introspection.isNodeType,
		canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression,
		canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement,
		isCompletionRecord: NodePath_introspection.isCompletionRecord,
		isStatementOrBlock: NodePath_introspection.isStatementOrBlock,
		referencesImport: NodePath_introspection.referencesImport,
		getSource: NodePath_introspection.getSource,
		willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,
		_guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo,
		resolve: NodePath_introspection.resolve,
		isConstantExpression: NodePath_introspection.isConstantExpression,
		isInStrictMode: NodePath_introspection.isInStrictMode,
		isDenylisted: NodePath_context.isDenylisted,
		visit: NodePath_context.visit,
		skip: NodePath_context.skip,
		skipKey: NodePath_context.skipKey,
		stop: NodePath_context.stop,
		setContext: NodePath_context.setContext,
		requeue: NodePath_context.requeue,
		requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators,
		remove: NodePath_removal.remove,
		insertBefore: NodePath_modification.insertBefore,
		insertAfter: NodePath_modification.insertAfter,
		unshiftContainer: NodePath_modification.unshiftContainer,
		pushContainer: NodePath_modification.pushContainer,
		getOpposite: NodePath_family.getOpposite,
		getCompletionRecords: NodePath_family.getCompletionRecords,
		getSibling: NodePath_family.getSibling,
		getPrevSibling: NodePath_family.getPrevSibling,
		getNextSibling: NodePath_family.getNextSibling,
		getAllNextSiblings: NodePath_family.getAllNextSiblings,
		getAllPrevSiblings: NodePath_family.getAllPrevSiblings,
		get: NodePath_family.get,
		getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,
		getBindingIdentifiers: NodePath_family.getBindingIdentifiers,
		getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,
		getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,
		getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths,
		shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,
		addComment: NodePath_comments.addComment,
		addComments: NodePath_comments.addComments
	};
	Object.assign(NodePath_Final.prototype, methods);
	{
		NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")];
		Object.assign(NodePath_Final.prototype, {
			has: NodePath_introspection[String("has")],
			is: NodePath_introspection[String("is")],
			isnt: NodePath_introspection[String("isnt")],
			equals: NodePath_introspection[String("equals")],
			hoist: NodePath_modification[String("hoist")],
			updateSiblingKeys: NodePath_modification.updateSiblingKeys,
			call: NodePath_context.call,
			isBlacklisted: NodePath_context[String("isBlacklisted")],
			setScope: NodePath_context.setScope,
			resync: NodePath_context.resync,
			popContext: NodePath_context.popContext,
			pushContext: NodePath_context.pushContext,
			setup: NodePath_context.setup,
			setKey: NodePath_context.setKey
		});
	}
	{
		NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
		NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
		Object.assign(NodePath_Final.prototype, {
			_getTypeAnnotation: NodePath_inference._getTypeAnnotation,
			_replaceWith: NodePath_replacement._replaceWith,
			_resolve: NodePath_introspection._resolve,
			_call: NodePath_context._call,
			_resyncParent: NodePath_context._resyncParent,
			_resyncKey: NodePath_context._resyncKey,
			_resyncList: NodePath_context._resyncList,
			_resyncRemoved: NodePath_context._resyncRemoved,
			_getQueueContexts: NodePath_context._getQueueContexts,
			_removeFromScope: NodePath_removal._removeFromScope,
			_callRemovalHooks: NodePath_removal._callRemovalHooks,
			_remove: NodePath_removal._remove,
			_markRemoved: NodePath_removal._markRemoved,
			_assertUnremoved: NodePath_removal._assertUnremoved,
			_containerInsert: NodePath_modification._containerInsert,
			_containerInsertBefore: NodePath_modification._containerInsertBefore,
			_containerInsertAfter: NodePath_modification._containerInsertAfter,
			_verifyNodeList: NodePath_modification._verifyNodeList,
			_getKey: NodePath_family._getKey,
			_getPattern: NodePath_family._getPattern
		});
	}
	for (const type of t$3.TYPES) {
		const typeKey = `is${type}`;
		const fn = t$3[typeKey];
		NodePath_Final.prototype[typeKey] = function(opts) {
			return fn(this.node, opts);
		};
		NodePath_Final.prototype[`assert${type}`] = function(opts) {
			if (!fn(this.node, opts)) throw new TypeError(`Expected node path of type ${type}`);
		};
	}
	Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
	for (const type of Object.keys(virtualTypes)) {
		if (type[0] === "_") continue;
		if (!t$3.TYPES.includes(type)) t$3.TYPES.push(type);
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/context.js
var require_context$1 = __commonJS({ "node_modules/@babel/traverse/lib/context.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var _index$2 = require_path();
	var _t$2 = require_lib$4();
	var _context$1 = require_context();
	const { VISITOR_KEYS: VISITOR_KEYS$2 } = _t$2;
	var TraversalContext = class {
		constructor(scope$1, opts, state, parentPath) {
			this.queue = null;
			this.priorityQueue = null;
			this.parentPath = parentPath;
			this.scope = scope$1;
			this.state = state;
			this.opts = opts;
		}
		shouldVisit(node) {
			const opts = this.opts;
			if (opts.enter || opts.exit) return true;
			if (opts[node.type]) return true;
			const keys$1 = VISITOR_KEYS$2[node.type];
			if (!(keys$1 != null && keys$1.length)) return false;
			for (const key of keys$1) if (node[key]) return true;
			return false;
		}
		create(node, container, key, listKey) {
			return _index$2.default.get({
				parentPath: this.parentPath,
				parent: node,
				container,
				key,
				listKey
			});
		}
		maybeQueue(path$28, notPriority) {
			if (this.queue) if (notPriority) this.queue.push(path$28);
			else this.priorityQueue.push(path$28);
		}
		visitMultiple(container, parent, listKey) {
			if (container.length === 0) return false;
			const queue$1 = [];
			for (let key = 0; key < container.length; key++) {
				const node = container[key];
				if (node && this.shouldVisit(node)) queue$1.push(this.create(parent, container, key, listKey));
			}
			return this.visitQueue(queue$1);
		}
		visitSingle(node, key) {
			if (this.shouldVisit(node[key])) return this.visitQueue([this.create(node, node, key)]);
			else return false;
		}
		visitQueue(queue$1) {
			this.queue = queue$1;
			this.priorityQueue = [];
			const visited = new WeakSet();
			let stop$1 = false;
			let visitIndex = 0;
			for (; visitIndex < queue$1.length;) {
				const path$28 = queue$1[visitIndex];
				visitIndex++;
				_context$1.resync.call(path$28);
				if (path$28.contexts.length === 0 || path$28.contexts[path$28.contexts.length - 1] !== this) _context$1.pushContext.call(path$28, this);
				if (path$28.key === null) continue;
				const { node } = path$28;
				if (visited.has(node)) continue;
				if (node) visited.add(node);
				if (path$28.visit()) {
					stop$1 = true;
					break;
				}
				if (this.priorityQueue.length) {
					stop$1 = this.visitQueue(this.priorityQueue);
					this.priorityQueue = [];
					this.queue = queue$1;
					if (stop$1) break;
				}
			}
			for (let i$6 = 0; i$6 < visitIndex; i$6++) _context$1.popContext.call(queue$1[i$6]);
			this.queue = null;
			return stop$1;
		}
		visit(node, key) {
			const nodes$1 = node[key];
			if (!nodes$1) return false;
			if (Array.isArray(nodes$1)) return this.visitMultiple(nodes$1, node, key);
			else return this.visitSingle(node, key);
		}
	};
	exports.default = TraversalContext;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/traverse-node.js
var require_traverse_node = __commonJS({ "node_modules/@babel/traverse/lib/traverse-node.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.traverseNode = traverseNode;
	var _context = require_context$1();
	var _t$1 = require_lib$4();
	const { VISITOR_KEYS: VISITOR_KEYS$1 } = _t$1;
	function traverseNode(node, opts, scope$1, state, path$28, skipKeys, visitSelf) {
		const keys$1 = VISITOR_KEYS$1[node.type];
		if (!keys$1) return false;
		const context = new _context.default(scope$1, opts, state, path$28);
		if (visitSelf) {
			if (skipKeys != null && skipKeys[path$28.parentKey]) return false;
			return context.visitQueue([path$28]);
		}
		for (const key of keys$1) {
			if (skipKeys != null && skipKeys[key]) continue;
			if (context.visit(node, key)) return true;
		}
		return false;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/path/context.js
var require_context = __commonJS({ "node_modules/@babel/traverse/lib/path/context.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports._call = _call;
	exports._getQueueContexts = _getQueueContexts;
	exports._resyncKey = _resyncKey;
	exports._resyncList = _resyncList;
	exports._resyncParent = _resyncParent;
	exports._resyncRemoved = _resyncRemoved;
	exports.call = call;
	exports.isDenylisted = isDenylisted;
	exports.popContext = popContext;
	exports.pushContext = pushContext;
	exports.requeue = requeue;
	exports.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
	exports.resync = resync;
	exports.setContext = setContext;
	exports.setKey = setKey;
	exports.setScope = setScope;
	exports.setup = setup;
	exports.skip = skip;
	exports.skipKey = skipKey;
	exports.stop = stop;
	exports.visit = visit;
	var _traverseNode$1 = require_traverse_node();
	var _index$1 = require_path();
	var _removal = require_removal();
	var t$2 = require_lib$4();
	function call(key) {
		const opts = this.opts;
		this.debug(key);
		if (this.node) {
			if (_call.call(this, opts[key])) return true;
		}
		if (this.node) {
			var _opts$this$node$type;
			return _call.call(this, (_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key]);
		}
		return false;
	}
	function _call(fns) {
		if (!fns) return false;
		for (const fn of fns) {
			if (!fn) continue;
			const node = this.node;
			if (!node) return true;
			const ret$1 = fn.call(this.state, this, this.state);
			if (ret$1 && typeof ret$1 === "object" && typeof ret$1.then === "function") throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
			if (ret$1) throw new Error(`Unexpected return value from visitor method ${fn}`);
			if (this.node !== node) return true;
			if (this._traverseFlags > 0) return true;
		}
		return false;
	}
	function isDenylisted() {
		var _this$opts$denylist;
		const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
		return denylist == null ? void 0 : denylist.includes(this.node.type);
	}
	exports.isBlacklisted = isDenylisted;
	function restoreContext(path$28, context) {
		if (path$28.context !== context) {
			path$28.context = context;
			path$28.state = context.state;
			path$28.opts = context.opts;
		}
	}
	function visit() {
		var _this$opts$shouldSkip, _this$opts;
		if (!this.node) return false;
		if (this.isDenylisted()) return false;
		if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) return false;
		const currentContext = this.context;
		if (this.shouldSkip || call.call(this, "enter")) {
			this.debug("Skip...");
			return this.shouldStop;
		}
		restoreContext(this, currentContext);
		this.debug("Recursing into...");
		this.shouldStop = (0, _traverseNode$1.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
		restoreContext(this, currentContext);
		call.call(this, "exit");
		return this.shouldStop;
	}
	function skip() {
		this.shouldSkip = true;
	}
	function skipKey(key) {
		if (this.skipKeys == null) this.skipKeys = {};
		this.skipKeys[key] = true;
	}
	function stop() {
		this._traverseFlags |= _index$1.SHOULD_SKIP | _index$1.SHOULD_STOP;
	}
	function setScope() {
		var _this$opts2, _this$scope;
		if ((_this$opts2 = this.opts) != null && _this$opts2.noScope) return;
		let path$28 = this.parentPath;
		if ((this.key === "key" || this.listKey === "decorators") && path$28.isMethod() || this.key === "discriminant" && path$28.isSwitchStatement()) path$28 = path$28.parentPath;
		let target;
		while (path$28 && !target) {
			var _path$opts;
			if ((_path$opts = path$28.opts) != null && _path$opts.noScope) return;
			target = path$28.scope;
			path$28 = path$28.parentPath;
		}
		this.scope = this.getScope(target);
		(_this$scope = this.scope) == null || _this$scope.init();
	}
	function setContext(context) {
		if (this.skipKeys != null) this.skipKeys = {};
		this._traverseFlags = 0;
		if (context) {
			this.context = context;
			this.state = context.state;
			this.opts = context.opts;
		}
		setScope.call(this);
		return this;
	}
	function resync() {
		if (this.removed) return;
		_resyncParent.call(this);
		_resyncList.call(this);
		_resyncKey.call(this);
	}
	function _resyncParent() {
		if (this.parentPath) this.parent = this.parentPath.node;
	}
	function _resyncKey() {
		if (!this.container) return;
		if (this.node === this.container[this.key]) return;
		if (Array.isArray(this.container)) {
			for (let i$6 = 0; i$6 < this.container.length; i$6++) if (this.container[i$6] === this.node) {
				setKey.call(this, i$6);
				return;
			}
		} else for (const key of Object.keys(this.container)) if (this.container[key] === this.node) {
			setKey.call(this, key);
			return;
		}
		this.key = null;
	}
	function _resyncList() {
		if (!this.parent || !this.inList) return;
		const newContainer = this.parent[this.listKey];
		if (this.container === newContainer) return;
		this.container = newContainer || null;
	}
	function _resyncRemoved() {
		if (this.key == null || !this.container || this.container[this.key] !== this.node) _removal._markRemoved.call(this);
	}
	function popContext() {
		this.contexts.pop();
		if (this.contexts.length > 0) this.setContext(this.contexts[this.contexts.length - 1]);
		else this.setContext(void 0);
	}
	function pushContext(context) {
		this.contexts.push(context);
		this.setContext(context);
	}
	function setup(parentPath, container, listKey, key) {
		this.listKey = listKey;
		this.container = container;
		this.parentPath = parentPath || this.parentPath;
		setKey.call(this, key);
	}
	function setKey(key) {
		var _this$node;
		this.key = key;
		this.node = this.container[this.key];
		this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
	}
	function requeue(pathToQueue = this) {
		if (pathToQueue.removed) return;
		const contexts = this.contexts;
		for (const context of contexts) context.maybeQueue(pathToQueue);
	}
	function requeueComputedKeyAndDecorators() {
		const { context, node } = this;
		if (!t$2.isPrivate(node) && node.computed) context.maybeQueue(this.get("key"));
		if (node.decorators) for (const decorator$1 of this.get("decorators")) context.maybeQueue(decorator$1);
	}
	function _getQueueContexts() {
		let path$28 = this;
		let contexts = this.contexts;
		while (!contexts.length) {
			path$28 = path$28.parentPath;
			if (!path$28) break;
			contexts = path$28.contexts;
		}
		return contexts;
	}
} });

//#endregion
//#region node_modules/@babel/traverse/lib/hub.js
var require_hub = __commonJS({ "node_modules/@babel/traverse/lib/hub.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = void 0;
	var Hub = class {
		getCode() {}
		getScope() {}
		addHelper() {
			throw new Error("Helpers are not supported by the default hub.");
		}
		buildError(node, msg, Error$1 = TypeError) {
			return new Error$1(msg);
		}
	};
	exports.default = Hub;
} });

//#endregion
//#region node_modules/@babel/traverse/lib/index.js
var require_lib = __commonJS({ "node_modules/@babel/traverse/lib/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	Object.defineProperty(exports, "Hub", {
		enumerable: true,
		get: function() {
			return _hub.default;
		}
	});
	Object.defineProperty(exports, "NodePath", {
		enumerable: true,
		get: function() {
			return _index.default;
		}
	});
	Object.defineProperty(exports, "Scope", {
		enumerable: true,
		get: function() {
			return _index2.default;
		}
	});
	exports.visitors = exports.default = void 0;
	require_context();
	var visitors = require_visitors();
	exports.visitors = visitors;
	var _t = require_lib$4();
	var cache = require_cache();
	var _traverseNode = require_traverse_node();
	var _index = require_path();
	var _index2 = require_scope();
	var _hub = require_hub();
	const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
	function traverse(parent, opts = {}, scope$1, state, parentPath, visitSelf) {
		if (!parent) return;
		if (!opts.noScope && !scope$1) {
			if (parent.type !== "Program" && parent.type !== "File") throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
		}
		if (!parentPath && visitSelf) throw new Error("visitSelf can only be used when providing a NodePath.");
		if (!VISITOR_KEYS[parent.type]) return;
		visitors.explode(opts);
		(0, _traverseNode.traverseNode)(parent, opts, scope$1, state, parentPath, null, visitSelf);
	}
	var _default = exports.default = traverse;
	traverse.visitors = visitors;
	traverse.verify = visitors.verify;
	traverse.explode = visitors.explode;
	traverse.cheap = function(node, enter) {
		traverseFast(node, enter);
		return;
	};
	traverse.node = function(node, opts, scope$1, state, path$28, skipKeys) {
		(0, _traverseNode.traverseNode)(node, opts, scope$1, state, path$28, skipKeys);
	};
	traverse.clearNode = function(node, opts) {
		removeProperties(node, opts);
	};
	traverse.removeProperties = function(tree, opts) {
		traverseFast(tree, traverse.clearNode, opts);
		return tree;
	};
	traverse.hasType = function(tree, type, denylistTypes) {
		if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
		if (tree.type === type) return true;
		return traverseFast(tree, function(node) {
			if (denylistTypes != null && denylistTypes.includes(node.type)) return traverseFast.skip;
			if (node.type === type) return traverseFast.stop;
		});
	};
	traverse.cache = cache;
} });
var import_lib = __toESM(require_lib());

//#endregion
//#region src/analyzer.ts
const parserOpts = {
	sourceType: "unambiguous",
	plugins: [
		"asyncGenerators",
		"bigInt",
		"classPrivateMethods",
		"classPrivateProperties",
		"classProperties",
		"decimal",
		"doExpressions",
		"dynamicImport",
		"exportDefaultFrom",
		"functionBind",
		"functionSent",
		"importMeta",
		"jsx",
		"logicalAssignment",
		"nullishCoalescingOperator",
		"numericSeparator",
		"objectRestSpread",
		"optionalCatchBinding",
		"optionalChaining",
		"partialApplication",
		"placeholders",
		"privateIn",
		"throwExpressions",
		"typescript"
	]
};
const vue3ui = (0, import_resolve.sync)("@pathscale/vue3-ui", {
	basedir: __dirname,
	packageFilter(pkg) {
		if (pkg.module) pkg.main = pkg.module;
		return pkg;
	}
});
const mappingsFile = normalizePath$1(path.dirname(vue3ui), "mappings.json");
const mappings = __require(mappingsFile);
const unstablesFile = normalizePath$1(path.dirname(vue3ui), "classes.json");
const unstables = __require(unstablesFile);
function analyze(input, debug$2, filter$2, alias) {
	const extensions = [
		".ts",
		".tsx",
		".mjs",
		".js",
		".jsx",
		".vue"
	];
	const isSupported = (id$4) => {
		const lowerId = normalizePath$1(id$4.toLowerCase());
		if (!filter$2(lowerId)) return false;
		return extensions.some((ext$1) => lowerId.endsWith(ext$1));
	};
	const traversed = new Set();
	const whitelist = new Set([
		"*",
		"html",
		"head",
		"body",
		"div",
		"app"
	]);
	let currentTag = "";
	const idList = (Array.isArray(input) ? input : typeof input === "object" ? Object.values(input) : [input]).map((id$4) => normalizePath$1(path.resolve(id$4)));
	const parser$5 = new import_lib$1.Parser({
		onopentagname(name) {
			whitelist.add(name);
			currentTag = pascalCase(name);
			if (kebabCase(currentTag).startsWith("v-")) {
				const props = unstables[currentTag] ?? {};
				const classes = Object.keys(props);
				for (const cl of classes) props[cl].length === 0 && whitelist.add(cl);
			}
		},
		onattribute(p$2, data$2) {
			for (const cl of data$2.split(" ")) whitelist.add(cl);
			const prop = p$2.replace(":", "");
			if (kebabCase(currentTag).startsWith("v-")) {
				if (mappings[currentTag]?.optional.includes(`is-${prop}`)) {
					console.log(`${currentTag} optional prop:`, `is-${prop}`);
					whitelist.add(`is-${prop}`);
					return;
				}
				const p$3 = camelCase$1(prop);
				const props = unstables[currentTag] ?? {};
				const classes = Object.keys(props);
				for (const cl of classes) {
					const valid = props[cl].includes(p$3);
					valid && console.log(`${currentTag} unstable prop:`, p$3);
					valid && whitelist.add(cl);
				}
			}
		}
	}, {
		decodeEntities: true,
		lowerCaseTags: false,
		lowerCaseAttributeNames: true
	});
	function extract$1(code$1, id$4) {
		debug$2 && console.log(`ANALYZER - TRAVERSAL (${humanlizePath(id$4)})`);
		if (!isVueSFC(id$4)) return code$1;
		debug$2 && console.log(`ANALYZER - INCLUDED (${humanlizePath(id$4)})`);
		const { template: template$1, script } = parseSFC(code$1, id$4);
		if (template$1?.content) parser$5.parseComplete(template$1.content);
		if (script?.content) return script.content;
		return;
	}
	function resolveSource(id$4, value) {
		value = value.split("?", 2)[0];
		for (const [from, to] of Object.entries(alias)) {
			if (value !== from && !value.startsWith(`${from}/`)) continue;
			value = to + value.slice(from.length);
		}
		const depId = normalizePath$1((0, import_resolve.sync)(value, {
			basedir: path.dirname(id$4),
			extensions,
			packageFilter(pkg) {
				if (pkg.module) pkg.main = pkg.module;
				return pkg;
			}
		}));
		if (traversed.has(depId) || !isSupported(depId)) return;
		else traversed.add(depId);
		return depId;
	}
	function traverseSource(id$4, rawCode) {
		const code$1 = extract$1(rawCode, id$4);
		if (!code$1) return;
		const ast = import_lib$2.parse(code$1, parserOpts);
		(0, import_lib.default)(ast, {
			StringLiteral({ node }) {
				if (!isVueSFC(id$4)) return;
				for (const cl of node.value.split(" ")) whitelist.add(cl);
			},
			ExportNamedDeclaration({ node }) {
				if (!node.source) return;
				const depId = resolveSource(id$4, node.source.value);
				if (depId) idList.push(depId);
			},
			ImportDeclaration({ node }) {
				const depId = resolveSource(id$4, node.source.value);
				if (depId) {
					idList.push(depId);
					if (!depId.includes("@pathscale/vue3-ui")) return;
				}
				for (const spec of node.specifiers) {
					if (spec.type !== "ImportSpecifier") continue;
					if (!("name" in spec.imported)) continue;
					const wl$1 = mappings[spec.imported.name]?.always;
					if (!wl$1) continue;
					for (const i$6 of wl$1) whitelist.add(i$6);
					debug$2 && console.log(`ANALYZER - VUE3-UI COMPONENT (${spec.imported.name}):\n`, wl$1);
				}
			}
		});
	}
	while (idList.length > 0) {
		const id$4 = idList.pop();
		if (!id$4) continue;
		const code$1 = import_lib$3.default.readFileSync(id$4, "utf8");
		try {
			traverseSource(id$4, code$1);
		} catch (error) {
			debug$2 && console.log(`ANALYZER - PROCESSING ERROR (${humanlizePath(id$4)}):\n`, error);
		}
	}
	const wl = [...whitelist].filter((_v) => {
		const v$1 = _v.trim();
		const garbage = ["vue", "slot"];
		if (!v$1) return false;
		if (/[A-Z]/.test(v$1)) return false;
		if (/[./:\\]/.test(v$1)) return false;
		if (garbage.includes(v$1)) return false;
		return true;
	}).sort();
	return wl;
}

//#endregion
//#region node_modules/picomatch/lib/constants.js
var require_constants = __commonJS({ "node_modules/picomatch/lib/constants.js"(exports, module) {
	const path$7 = __require("path");
	const WIN_SLASH = "\\\\/";
	const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
	/**
	* Posix glob regex
	*/
	const DOT_LITERAL = "\\.";
	const PLUS_LITERAL = "\\+";
	const QMARK_LITERAL = "\\?";
	const SLASH_LITERAL = "\\/";
	const ONE_CHAR = "(?=.)";
	const QMARK = "[^/]";
	const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
	const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
	const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
	const NO_DOT = `(?!${DOT_LITERAL})`;
	const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
	const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
	const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
	const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
	const STAR = `${QMARK}*?`;
	const POSIX_CHARS = {
		DOT_LITERAL,
		PLUS_LITERAL,
		QMARK_LITERAL,
		SLASH_LITERAL,
		ONE_CHAR,
		QMARK,
		END_ANCHOR,
		DOTS_SLASH,
		NO_DOT,
		NO_DOTS,
		NO_DOT_SLASH,
		NO_DOTS_SLASH,
		QMARK_NO_DOT,
		STAR,
		START_ANCHOR
	};
	/**
	* Windows glob regex
	*/
	const WINDOWS_CHARS = {
		...POSIX_CHARS,
		SLASH_LITERAL: `[${WIN_SLASH}]`,
		QMARK: WIN_NO_SLASH,
		STAR: `${WIN_NO_SLASH}*?`,
		DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
		NO_DOT: `(?!${DOT_LITERAL})`,
		NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
		NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
		START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
		END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
	};
	/**
	* POSIX Bracket Regex
	*/
	const POSIX_REGEX_SOURCE$1 = {
		alnum: "a-zA-Z0-9",
		alpha: "a-zA-Z",
		ascii: "\\x00-\\x7F",
		blank: " \\t",
		cntrl: "\\x00-\\x1F\\x7F",
		digit: "0-9",
		graph: "\\x21-\\x7E",
		lower: "a-z",
		print: "\\x20-\\x7E ",
		punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
		space: " \\t\\r\\n\\v\\f",
		upper: "A-Z",
		word: "A-Za-z0-9_",
		xdigit: "A-Fa-f0-9"
	};
	module.exports = {
		MAX_LENGTH: 1024 * 64,
		POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
		REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
		REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
		REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
		REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
		REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
		REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
		REPLACEMENTS: {
			"***": "*",
			"**/**": "**",
			"**/**/**": "**"
		},
		CHAR_0: 48,
		CHAR_9: 57,
		CHAR_UPPERCASE_A: 65,
		CHAR_LOWERCASE_A: 97,
		CHAR_UPPERCASE_Z: 90,
		CHAR_LOWERCASE_Z: 122,
		CHAR_LEFT_PARENTHESES: 40,
		CHAR_RIGHT_PARENTHESES: 41,
		CHAR_ASTERISK: 42,
		CHAR_AMPERSAND: 38,
		CHAR_AT: 64,
		CHAR_BACKWARD_SLASH: 92,
		CHAR_CARRIAGE_RETURN: 13,
		CHAR_CIRCUMFLEX_ACCENT: 94,
		CHAR_COLON: 58,
		CHAR_COMMA: 44,
		CHAR_DOT: 46,
		CHAR_DOUBLE_QUOTE: 34,
		CHAR_EQUAL: 61,
		CHAR_EXCLAMATION_MARK: 33,
		CHAR_FORM_FEED: 12,
		CHAR_FORWARD_SLASH: 47,
		CHAR_GRAVE_ACCENT: 96,
		CHAR_HASH: 35,
		CHAR_HYPHEN_MINUS: 45,
		CHAR_LEFT_ANGLE_BRACKET: 60,
		CHAR_LEFT_CURLY_BRACE: 123,
		CHAR_LEFT_SQUARE_BRACKET: 91,
		CHAR_LINE_FEED: 10,
		CHAR_NO_BREAK_SPACE: 160,
		CHAR_PERCENT: 37,
		CHAR_PLUS: 43,
		CHAR_QUESTION_MARK: 63,
		CHAR_RIGHT_ANGLE_BRACKET: 62,
		CHAR_RIGHT_CURLY_BRACE: 125,
		CHAR_RIGHT_SQUARE_BRACKET: 93,
		CHAR_SEMICOLON: 59,
		CHAR_SINGLE_QUOTE: 39,
		CHAR_SPACE: 32,
		CHAR_TAB: 9,
		CHAR_UNDERSCORE: 95,
		CHAR_VERTICAL_LINE: 124,
		CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
		SEP: path$7.sep,
		extglobChars(chars) {
			return {
				"!": {
					type: "negate",
					open: "(?:(?!(?:",
					close: `))${chars.STAR})`
				},
				"?": {
					type: "qmark",
					open: "(?:",
					close: ")?"
				},
				"+": {
					type: "plus",
					open: "(?:",
					close: ")+"
				},
				"*": {
					type: "star",
					open: "(?:",
					close: ")*"
				},
				"@": {
					type: "at",
					open: "(?:",
					close: ")"
				}
			};
		},
		globChars(win32$4) {
			return win32$4 === true ? WINDOWS_CHARS : POSIX_CHARS;
		}
	};
} });

//#endregion
//#region node_modules/picomatch/lib/utils.js
var require_utils = __commonJS({ "node_modules/picomatch/lib/utils.js"(exports) {
	const path$6 = __require("path");
	const win32$2 = process.platform === "win32";
	const { REGEX_BACKSLASH, REGEX_REMOVE_BACKSLASH, REGEX_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_GLOBAL } = require_constants();
	exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
	exports.hasRegexChars = (str$4) => REGEX_SPECIAL_CHARS.test(str$4);
	exports.isRegexChar = (str$4) => str$4.length === 1 && exports.hasRegexChars(str$4);
	exports.escapeRegex = (str$4) => str$4.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
	exports.toPosixSlashes = (str$4) => str$4.replace(REGEX_BACKSLASH, "/");
	exports.removeBackslashes = (str$4) => {
		return str$4.replace(REGEX_REMOVE_BACKSLASH, (match) => {
			return match === "\\" ? "" : match;
		});
	};
	exports.supportsLookbehinds = () => {
		const segs = process.version.slice(1).split(".").map(Number);
		if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) return true;
		return false;
	};
	exports.isWindows = (options) => {
		if (options && typeof options.windows === "boolean") return options.windows;
		return win32$2 === true || path$6.sep === "\\";
	};
	exports.escapeLast = (input, char, lastIdx) => {
		const idx = input.lastIndexOf(char, lastIdx);
		if (idx === -1) return input;
		if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
		return `${input.slice(0, idx)}\\${input.slice(idx)}`;
	};
	exports.removePrefix = (input, state = {}) => {
		let output = input;
		if (output.startsWith("./")) {
			output = output.slice(2);
			state.prefix = "./";
		}
		return output;
	};
	exports.wrapOutput = (input, state = {}, options = {}) => {
		const prepend$1 = options.contains ? "" : "^";
		const append$1 = options.contains ? "" : "$";
		let output = `${prepend$1}(?:${input})${append$1}`;
		if (state.negated === true) output = `(?:^(?!${output}).*$)`;
		return output;
	};
} });

//#endregion
//#region node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({ "node_modules/picomatch/lib/scan.js"(exports, module) {
	const utils$2 = require_utils();
	const { CHAR_ASTERISK, CHAR_AT, CHAR_BACKWARD_SLASH, CHAR_COMMA, CHAR_DOT, CHAR_EXCLAMATION_MARK, CHAR_FORWARD_SLASH, CHAR_LEFT_CURLY_BRACE, CHAR_LEFT_PARENTHESES, CHAR_LEFT_SQUARE_BRACKET, CHAR_PLUS, CHAR_QUESTION_MARK, CHAR_RIGHT_CURLY_BRACE, CHAR_RIGHT_PARENTHESES, CHAR_RIGHT_SQUARE_BRACKET } = require_constants();
	const isPathSeparator = (code$1) => {
		return code$1 === CHAR_FORWARD_SLASH || code$1 === CHAR_BACKWARD_SLASH;
	};
	const depth = (token$1) => {
		if (token$1.isPrefix !== true) token$1.depth = token$1.isGlobstar ? Infinity : 1;
	};
	/**
	* Quickly scans a glob pattern and returns an object with a handful of
	* useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
	* `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
	* with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
	*
	* ```js
	* const pm = require('picomatch');
	* console.log(pm.scan('foo/bar/*.js'));
	* { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
	* ```
	* @param {String} `str`
	* @param {Object} `options`
	* @return {Object} Returns an object with tokens and regex source string.
	* @api public
	*/
	const scan$1 = (input, options) => {
		const opts = options || {};
		const length = input.length - 1;
		const scanToEnd = opts.parts === true || opts.scanToEnd === true;
		const slashes = [];
		const tokens$3 = [];
		const parts = [];
		let str$4 = input;
		let index$1 = -1;
		let start = 0;
		let lastIndex = 0;
		let isBrace = false;
		let isBracket = false;
		let isGlob = false;
		let isExtglob = false;
		let isGlobstar = false;
		let braceEscaped = false;
		let backslashes = false;
		let negated = false;
		let negatedExtglob = false;
		let finished = false;
		let braces = 0;
		let prev;
		let code$1;
		let token$1 = {
			value: "",
			depth: 0,
			isGlob: false
		};
		const eos = () => index$1 >= length;
		const peek = () => str$4.charCodeAt(index$1 + 1);
		const advance = () => {
			prev = code$1;
			return str$4.charCodeAt(++index$1);
		};
		while (index$1 < length) {
			code$1 = advance();
			let next;
			if (code$1 === CHAR_BACKWARD_SLASH) {
				backslashes = token$1.backslashes = true;
				code$1 = advance();
				if (code$1 === CHAR_LEFT_CURLY_BRACE) braceEscaped = true;
				continue;
			}
			if (braceEscaped === true || code$1 === CHAR_LEFT_CURLY_BRACE) {
				braces++;
				while (eos() !== true && (code$1 = advance())) {
					if (code$1 === CHAR_BACKWARD_SLASH) {
						backslashes = token$1.backslashes = true;
						advance();
						continue;
					}
					if (code$1 === CHAR_LEFT_CURLY_BRACE) {
						braces++;
						continue;
					}
					if (braceEscaped !== true && code$1 === CHAR_DOT && (code$1 = advance()) === CHAR_DOT) {
						isBrace = token$1.isBrace = true;
						isGlob = token$1.isGlob = true;
						finished = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (braceEscaped !== true && code$1 === CHAR_COMMA) {
						isBrace = token$1.isBrace = true;
						isGlob = token$1.isGlob = true;
						finished = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (code$1 === CHAR_RIGHT_CURLY_BRACE) {
						braces--;
						if (braces === 0) {
							braceEscaped = false;
							isBrace = token$1.isBrace = true;
							finished = true;
							break;
						}
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_FORWARD_SLASH) {
				slashes.push(index$1);
				tokens$3.push(token$1);
				token$1 = {
					value: "",
					depth: 0,
					isGlob: false
				};
				if (finished === true) continue;
				if (prev === CHAR_DOT && index$1 === start + 1) {
					start += 2;
					continue;
				}
				lastIndex = index$1 + 1;
				continue;
			}
			if (opts.noext !== true) {
				const isExtglobChar = code$1 === CHAR_PLUS || code$1 === CHAR_AT || code$1 === CHAR_ASTERISK || code$1 === CHAR_QUESTION_MARK || code$1 === CHAR_EXCLAMATION_MARK;
				if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
					isGlob = token$1.isGlob = true;
					isExtglob = token$1.isExtglob = true;
					finished = true;
					if (code$1 === CHAR_EXCLAMATION_MARK && index$1 === start) negatedExtglob = true;
					if (scanToEnd === true) {
						while (eos() !== true && (code$1 = advance())) {
							if (code$1 === CHAR_BACKWARD_SLASH) {
								backslashes = token$1.backslashes = true;
								code$1 = advance();
								continue;
							}
							if (code$1 === CHAR_RIGHT_PARENTHESES) {
								isGlob = token$1.isGlob = true;
								finished = true;
								break;
							}
						}
						continue;
					}
					break;
				}
			}
			if (code$1 === CHAR_ASTERISK) {
				if (prev === CHAR_ASTERISK) isGlobstar = token$1.isGlobstar = true;
				isGlob = token$1.isGlob = true;
				finished = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_QUESTION_MARK) {
				isGlob = token$1.isGlob = true;
				finished = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code$1 === CHAR_LEFT_SQUARE_BRACKET) {
				while (eos() !== true && (next = advance())) {
					if (next === CHAR_BACKWARD_SLASH) {
						backslashes = token$1.backslashes = true;
						advance();
						continue;
					}
					if (next === CHAR_RIGHT_SQUARE_BRACKET) {
						isBracket = token$1.isBracket = true;
						isGlob = token$1.isGlob = true;
						finished = true;
						break;
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (opts.nonegate !== true && code$1 === CHAR_EXCLAMATION_MARK && index$1 === start) {
				negated = token$1.negated = true;
				start++;
				continue;
			}
			if (opts.noparen !== true && code$1 === CHAR_LEFT_PARENTHESES) {
				isGlob = token$1.isGlob = true;
				if (scanToEnd === true) {
					while (eos() !== true && (code$1 = advance())) {
						if (code$1 === CHAR_LEFT_PARENTHESES) {
							backslashes = token$1.backslashes = true;
							code$1 = advance();
							continue;
						}
						if (code$1 === CHAR_RIGHT_PARENTHESES) {
							finished = true;
							break;
						}
					}
					continue;
				}
				break;
			}
			if (isGlob === true) {
				finished = true;
				if (scanToEnd === true) continue;
				break;
			}
		}
		if (opts.noext === true) {
			isExtglob = false;
			isGlob = false;
		}
		let base$1 = str$4;
		let prefix$1 = "";
		let glob$1 = "";
		if (start > 0) {
			prefix$1 = str$4.slice(0, start);
			str$4 = str$4.slice(start);
			lastIndex -= start;
		}
		if (base$1 && isGlob === true && lastIndex > 0) {
			base$1 = str$4.slice(0, lastIndex);
			glob$1 = str$4.slice(lastIndex);
		} else if (isGlob === true) {
			base$1 = "";
			glob$1 = str$4;
		} else base$1 = str$4;
		if (base$1 && base$1 !== "" && base$1 !== "/" && base$1 !== str$4) {
			if (isPathSeparator(base$1.charCodeAt(base$1.length - 1))) base$1 = base$1.slice(0, -1);
		}
		if (opts.unescape === true) {
			if (glob$1) glob$1 = utils$2.removeBackslashes(glob$1);
			if (base$1 && backslashes === true) base$1 = utils$2.removeBackslashes(base$1);
		}
		const state = {
			prefix: prefix$1,
			input,
			start,
			base: base$1,
			glob: glob$1,
			isBrace,
			isBracket,
			isGlob,
			isExtglob,
			isGlobstar,
			negated,
			negatedExtglob
		};
		if (opts.tokens === true) {
			state.maxDepth = 0;
			if (!isPathSeparator(code$1)) tokens$3.push(token$1);
			state.tokens = tokens$3;
		}
		if (opts.parts === true || opts.tokens === true) {
			let prevIndex;
			for (let idx = 0; idx < slashes.length; idx++) {
				const n$4 = prevIndex ? prevIndex + 1 : start;
				const i$6 = slashes[idx];
				const value = input.slice(n$4, i$6);
				if (opts.tokens) {
					if (idx === 0 && start !== 0) {
						tokens$3[idx].isPrefix = true;
						tokens$3[idx].value = prefix$1;
					} else tokens$3[idx].value = value;
					depth(tokens$3[idx]);
					state.maxDepth += tokens$3[idx].depth;
				}
				if (idx !== 0 || value !== "") parts.push(value);
				prevIndex = i$6;
			}
			if (prevIndex && prevIndex + 1 < input.length) {
				const value = input.slice(prevIndex + 1);
				parts.push(value);
				if (opts.tokens) {
					tokens$3[tokens$3.length - 1].value = value;
					depth(tokens$3[tokens$3.length - 1]);
					state.maxDepth += tokens$3[tokens$3.length - 1].depth;
				}
			}
			state.slashes = slashes;
			state.parts = parts;
		}
		return state;
	};
	module.exports = scan$1;
} });

//#endregion
//#region node_modules/picomatch/lib/parse.js
var require_parse = __commonJS({ "node_modules/picomatch/lib/parse.js"(exports, module) {
	const constants$1 = require_constants();
	const utils$1 = require_utils();
	/**
	* Constants
	*/
	const { MAX_LENGTH, POSIX_REGEX_SOURCE, REGEX_NON_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_BACKREF, REPLACEMENTS } = constants$1;
	/**
	* Helpers
	*/
	const expandRange = (args, options) => {
		if (typeof options.expandRange === "function") return options.expandRange(...args, options);
		args.sort();
		const value = `[${args.join("-")}]`;
		try {
			new RegExp(value);
		} catch (ex) {
			return args.map((v$1) => utils$1.escapeRegex(v$1)).join("..");
		}
		return value;
	};
	/**
	* Create the message for a syntax error
	*/
	const syntaxError = (type, char) => {
		return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
	};
	/**
	* Parse the given input string.
	* @param {String} input
	* @param {Object} options
	* @return {Object}
	*/
	const parse$2 = (input, options) => {
		if (typeof input !== "string") throw new TypeError("Expected a string");
		input = REPLACEMENTS[input] || input;
		const opts = { ...options };
		const max$1 = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
		let len = input.length;
		if (len > max$1) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max$1}`);
		const bos = {
			type: "bos",
			value: "",
			output: opts.prepend || ""
		};
		const tokens$3 = [bos];
		const capture = opts.capture ? "" : "?:";
		const win32$4 = utils$1.isWindows(options);
		const PLATFORM_CHARS = constants$1.globChars(win32$4);
		const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS);
		const { DOT_LITERAL: DOT_LITERAL$1, PLUS_LITERAL: PLUS_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOT_SLASH: NO_DOT_SLASH$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, QMARK: QMARK$1, QMARK_NO_DOT: QMARK_NO_DOT$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = PLATFORM_CHARS;
		const globstar = (opts$1) => {
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const nodot = opts.dot ? "" : NO_DOT$1;
		const qmarkNoDot = opts.dot ? QMARK$1 : QMARK_NO_DOT$1;
		let star$2 = opts.bash === true ? globstar(opts) : STAR$1;
		if (opts.capture) star$2 = `(${star$2})`;
		if (typeof opts.noext === "boolean") opts.noextglob = opts.noext;
		const state = {
			input,
			index: -1,
			start: 0,
			dot: opts.dot === true,
			consumed: "",
			output: "",
			prefix: "",
			backtrack: false,
			negated: false,
			brackets: 0,
			braces: 0,
			parens: 0,
			quotes: 0,
			globstar: false,
			tokens: tokens$3
		};
		input = utils$1.removePrefix(input, state);
		len = input.length;
		const extglobs = [];
		const braces = [];
		const stack = [];
		let prev = bos;
		let value;
		/**
		* Tokenizing helpers
		*/
		const eos = () => state.index === len - 1;
		const peek = state.peek = (n$4 = 1) => input[state.index + n$4];
		const advance = state.advance = () => input[++state.index] || "";
		const remaining = () => input.slice(state.index + 1);
		const consume = (value$1 = "", num = 0) => {
			state.consumed += value$1;
			state.index += num;
		};
		const append$1 = (token$1) => {
			state.output += token$1.output != null ? token$1.output : token$1.value;
			consume(token$1.value);
		};
		const negate = () => {
			let count = 1;
			while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
				advance();
				state.start++;
				count++;
			}
			if (count % 2 === 0) return false;
			state.negated = true;
			state.start++;
			return true;
		};
		const increment = (type) => {
			state[type]++;
			stack.push(type);
		};
		const decrement = (type) => {
			state[type]--;
			stack.pop();
		};
		/**
		* Push tokens onto the tokens array. This helper speeds up
		* tokenizing by 1) helping us avoid backtracking as much as possible,
		* and 2) helping us avoid creating extra tokens when consecutive
		* characters are plain text. This improves performance and simplifies
		* lookbehinds.
		*/
		const push$1 = (tok) => {
			if (prev.type === "globstar") {
				const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
				const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
				if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
					state.output = state.output.slice(0, -prev.output.length);
					prev.type = "star";
					prev.value = "*";
					prev.output = star$2;
					state.output += prev.output;
				}
			}
			if (extglobs.length && tok.type !== "paren") extglobs[extglobs.length - 1].inner += tok.value;
			if (tok.value || tok.output) append$1(tok);
			if (prev && prev.type === "text" && tok.type === "text") {
				prev.value += tok.value;
				prev.output = (prev.output || "") + tok.value;
				return;
			}
			tok.prev = prev;
			tokens$3.push(tok);
			prev = tok;
		};
		const extglobOpen = (type, value$1) => {
			const token$1 = {
				...EXTGLOB_CHARS[value$1],
				conditions: 1,
				inner: ""
			};
			token$1.prev = prev;
			token$1.parens = state.parens;
			token$1.output = state.output;
			const output = (opts.capture ? "(" : "") + token$1.open;
			increment("parens");
			push$1({
				type,
				value: value$1,
				output: state.output ? "" : ONE_CHAR$1
			});
			push$1({
				type: "paren",
				extglob: true,
				value: advance(),
				output
			});
			extglobs.push(token$1);
		};
		const extglobClose = (token$1) => {
			let output = token$1.close + (opts.capture ? ")" : "");
			let rest;
			if (token$1.type === "negate") {
				let extglobStar = star$2;
				if (token$1.inner && token$1.inner.length > 1 && token$1.inner.includes("/")) extglobStar = globstar(opts);
				if (extglobStar !== star$2 || eos() || /^\)+$/.test(remaining())) output = token$1.close = `)$))${extglobStar}`;
				if (token$1.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
					const expression$2 = parse$2(rest, {
						...options,
						fastpaths: false
					}).output;
					output = token$1.close = `)${expression$2})${extglobStar})`;
				}
				if (token$1.prev.type === "bos") state.negatedExtglob = true;
			}
			push$1({
				type: "paren",
				extglob: true,
				value,
				output
			});
			decrement("parens");
		};
		/**
		* Fast paths
		*/
		if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
			let backslashes = false;
			let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m$2, esc, chars, first, rest, index$1) => {
				if (first === "\\") {
					backslashes = true;
					return m$2;
				}
				if (first === "?") {
					if (esc) return esc + first + (rest ? QMARK$1.repeat(rest.length) : "");
					if (index$1 === 0) return qmarkNoDot + (rest ? QMARK$1.repeat(rest.length) : "");
					return QMARK$1.repeat(chars.length);
				}
				if (first === ".") return DOT_LITERAL$1.repeat(chars.length);
				if (first === "*") {
					if (esc) return esc + first + (rest ? star$2 : "");
					return star$2;
				}
				return esc ? m$2 : `\\${m$2}`;
			});
			if (backslashes === true) if (opts.unescape === true) output = output.replace(/\\/g, "");
			else output = output.replace(/\\+/g, (m$2) => {
				return m$2.length % 2 === 0 ? "\\\\" : m$2 ? "\\" : "";
			});
			if (output === input && opts.contains === true) {
				state.output = input;
				return state;
			}
			state.output = utils$1.wrapOutput(output, state, options);
			return state;
		}
		/**
		* Tokenize input until we reach end-of-string
		*/
		while (!eos()) {
			value = advance();
			if (value === "\0") continue;
			/**
			* Escaped characters
			*/
			if (value === "\\") {
				const next = peek();
				if (next === "/" && opts.bash !== true) continue;
				if (next === "." || next === ";") continue;
				if (!next) {
					value += "\\";
					push$1({
						type: "text",
						value
					});
					continue;
				}
				const match = /^\\+/.exec(remaining());
				let slashes = 0;
				if (match && match[0].length > 2) {
					slashes = match[0].length;
					state.index += slashes;
					if (slashes % 2 !== 0) value += "\\";
				}
				if (opts.unescape === true) value = advance();
				else value += advance();
				if (state.brackets === 0) {
					push$1({
						type: "text",
						value
					});
					continue;
				}
			}
			/**
			* If we're inside a regex character class, continue
			* until we reach the closing bracket.
			*/
			if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
				if (opts.posix !== false && value === ":") {
					const inner = prev.value.slice(1);
					if (inner.includes("[")) {
						prev.posix = true;
						if (inner.includes(":")) {
							const idx = prev.value.lastIndexOf("[");
							const pre = prev.value.slice(0, idx);
							const rest$1 = prev.value.slice(idx + 2);
							const posix$3 = POSIX_REGEX_SOURCE[rest$1];
							if (posix$3) {
								prev.value = pre + posix$3;
								state.backtrack = true;
								advance();
								if (!bos.output && tokens$3.indexOf(prev) === 1) bos.output = ONE_CHAR$1;
								continue;
							}
						}
					}
				}
				if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") value = `\\${value}`;
				if (value === "]" && (prev.value === "[" || prev.value === "[^")) value = `\\${value}`;
				if (opts.posix === true && value === "!" && prev.value === "[") value = "^";
				prev.value += value;
				append$1({ value });
				continue;
			}
			/**
			* If we're inside a quoted string, continue
			* until we reach the closing double quote.
			*/
			if (state.quotes === 1 && value !== "\"") {
				value = utils$1.escapeRegex(value);
				prev.value += value;
				append$1({ value });
				continue;
			}
			/**
			* Double quotes
			*/
			if (value === "\"") {
				state.quotes = state.quotes === 1 ? 0 : 1;
				if (opts.keepQuotes === true) push$1({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Parentheses
			*/
			if (value === "(") {
				increment("parens");
				push$1({
					type: "paren",
					value
				});
				continue;
			}
			if (value === ")") {
				if (state.parens === 0 && opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "("));
				const extglob = extglobs[extglobs.length - 1];
				if (extglob && state.parens === extglob.parens + 1) {
					extglobClose(extglobs.pop());
					continue;
				}
				push$1({
					type: "paren",
					value,
					output: state.parens ? ")" : "\\)"
				});
				decrement("parens");
				continue;
			}
			/**
			* Square brackets
			*/
			if (value === "[") {
				if (opts.nobracket === true || !remaining().includes("]")) {
					if (opts.nobracket !== true && opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
					value = `\\${value}`;
				} else increment("brackets");
				push$1({
					type: "bracket",
					value
				});
				continue;
			}
			if (value === "]") {
				if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
					push$1({
						type: "text",
						value,
						output: `\\${value}`
					});
					continue;
				}
				if (state.brackets === 0) {
					if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "["));
					push$1({
						type: "text",
						value,
						output: `\\${value}`
					});
					continue;
				}
				decrement("brackets");
				const prevValue = prev.value.slice(1);
				if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) value = `/${value}`;
				prev.value += value;
				append$1({ value });
				if (opts.literalBrackets === false || utils$1.hasRegexChars(prevValue)) continue;
				const escaped = utils$1.escapeRegex(prev.value);
				state.output = state.output.slice(0, -prev.value.length);
				if (opts.literalBrackets === true) {
					state.output += escaped;
					prev.value = escaped;
					continue;
				}
				prev.value = `(${capture}${escaped}|${prev.value})`;
				state.output += prev.value;
				continue;
			}
			/**
			* Braces
			*/
			if (value === "{" && opts.nobrace !== true) {
				increment("braces");
				const open = {
					type: "brace",
					value,
					output: "(",
					outputIndex: state.output.length,
					tokensIndex: state.tokens.length
				};
				braces.push(open);
				push$1(open);
				continue;
			}
			if (value === "}") {
				const brace = braces[braces.length - 1];
				if (opts.nobrace === true || !brace) {
					push$1({
						type: "text",
						value,
						output: value
					});
					continue;
				}
				let output = ")";
				if (brace.dots === true) {
					const arr = tokens$3.slice();
					const range$2 = [];
					for (let i$6 = arr.length - 1; i$6 >= 0; i$6--) {
						tokens$3.pop();
						if (arr[i$6].type === "brace") break;
						if (arr[i$6].type !== "dots") range$2.unshift(arr[i$6].value);
					}
					output = expandRange(range$2, opts);
					state.backtrack = true;
				}
				if (brace.comma !== true && brace.dots !== true) {
					const out = state.output.slice(0, brace.outputIndex);
					const toks = state.tokens.slice(brace.tokensIndex);
					brace.value = brace.output = "\\{";
					value = output = "\\}";
					state.output = out;
					for (const t$9 of toks) state.output += t$9.output || t$9.value;
				}
				push$1({
					type: "brace",
					value,
					output
				});
				decrement("braces");
				braces.pop();
				continue;
			}
			/**
			* Pipes
			*/
			if (value === "|") {
				if (extglobs.length > 0) extglobs[extglobs.length - 1].conditions++;
				push$1({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Commas
			*/
			if (value === ",") {
				let output = value;
				const brace = braces[braces.length - 1];
				if (brace && stack[stack.length - 1] === "braces") {
					brace.comma = true;
					output = "|";
				}
				push$1({
					type: "comma",
					value,
					output
				});
				continue;
			}
			/**
			* Slashes
			*/
			if (value === "/") {
				if (prev.type === "dot" && state.index === state.start + 1) {
					state.start = state.index + 1;
					state.consumed = "";
					state.output = "";
					tokens$3.pop();
					prev = bos;
					continue;
				}
				push$1({
					type: "slash",
					value,
					output: SLASH_LITERAL$1
				});
				continue;
			}
			/**
			* Dots
			*/
			if (value === ".") {
				if (state.braces > 0 && prev.type === "dot") {
					if (prev.value === ".") prev.output = DOT_LITERAL$1;
					const brace = braces[braces.length - 1];
					prev.type = "dots";
					prev.output += value;
					prev.value += value;
					brace.dots = true;
					continue;
				}
				if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
					push$1({
						type: "text",
						value,
						output: DOT_LITERAL$1
					});
					continue;
				}
				push$1({
					type: "dot",
					value,
					output: DOT_LITERAL$1
				});
				continue;
			}
			/**
			* Question marks
			*/
			if (value === "?") {
				const isGroup = prev && prev.value === "(";
				if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("qmark", value);
					continue;
				}
				if (prev && prev.type === "paren") {
					const next = peek();
					let output = value;
					if (next === "<" && !utils$1.supportsLookbehinds()) throw new Error("Node.js v10 or higher is required for regex lookbehinds");
					if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) output = `\\${value}`;
					push$1({
						type: "text",
						value,
						output
					});
					continue;
				}
				if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
					push$1({
						type: "qmark",
						value,
						output: QMARK_NO_DOT$1
					});
					continue;
				}
				push$1({
					type: "qmark",
					value,
					output: QMARK$1
				});
				continue;
			}
			/**
			* Exclamation
			*/
			if (value === "!") {
				if (opts.noextglob !== true && peek() === "(") {
					if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
						extglobOpen("negate", value);
						continue;
					}
				}
				if (opts.nonegate !== true && state.index === 0) {
					negate();
					continue;
				}
			}
			/**
			* Plus
			*/
			if (value === "+") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("plus", value);
					continue;
				}
				if (prev && prev.value === "(" || opts.regex === false) {
					push$1({
						type: "plus",
						value,
						output: PLUS_LITERAL$1
					});
					continue;
				}
				if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
					push$1({
						type: "plus",
						value
					});
					continue;
				}
				push$1({
					type: "plus",
					value: PLUS_LITERAL$1
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value === "@") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					push$1({
						type: "at",
						extglob: true,
						value,
						output: ""
					});
					continue;
				}
				push$1({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value !== "*") {
				if (value === "$" || value === "^") value = `\\${value}`;
				const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
				if (match) {
					value += match[0];
					state.index += match[0].length;
				}
				push$1({
					type: "text",
					value
				});
				continue;
			}
			/**
			* Stars
			*/
			if (prev && (prev.type === "globstar" || prev.star === true)) {
				prev.type = "star";
				prev.star = true;
				prev.value += value;
				prev.output = star$2;
				state.backtrack = true;
				state.globstar = true;
				consume(value);
				continue;
			}
			let rest = remaining();
			if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
				extglobOpen("star", value);
				continue;
			}
			if (prev.type === "star") {
				if (opts.noglobstar === true) {
					consume(value);
					continue;
				}
				const prior = prev.prev;
				const before = prior.prev;
				const isStart = prior.type === "slash" || prior.type === "bos";
				const afterStar = before && (before.type === "star" || before.type === "globstar");
				if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
					push$1({
						type: "star",
						value,
						output: ""
					});
					continue;
				}
				const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
				const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
				if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
					push$1({
						type: "star",
						value,
						output: ""
					});
					continue;
				}
				while (rest.slice(0, 3) === "/**") {
					const after = input[state.index + 4];
					if (after && after !== "/") break;
					rest = rest.slice(3);
					consume("/**", 3);
				}
				if (prior.type === "bos" && eos()) {
					prev.type = "globstar";
					prev.value += value;
					prev.output = globstar(opts);
					state.output = prev.output;
					state.globstar = true;
					consume(value);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
					prev.value += value;
					state.globstar = true;
					state.output += prior.output + prev.output;
					consume(value);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
					const end = rest[1] !== void 0 ? "|$" : "";
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = `${globstar(opts)}${SLASH_LITERAL$1}|${SLASH_LITERAL$1}${end})`;
					prev.value += value;
					state.output += prior.output + prev.output;
					state.globstar = true;
					consume(value + advance());
					push$1({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				if (prior.type === "bos" && rest[0] === "/") {
					prev.type = "globstar";
					prev.value += value;
					prev.output = `(?:^|${SLASH_LITERAL$1}|${globstar(opts)}${SLASH_LITERAL$1})`;
					state.output = prev.output;
					state.globstar = true;
					consume(value + advance());
					push$1({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				state.output = state.output.slice(0, -prev.output.length);
				prev.type = "globstar";
				prev.output = globstar(opts);
				prev.value += value;
				state.output += prev.output;
				state.globstar = true;
				consume(value);
				continue;
			}
			const token$1 = {
				type: "star",
				value,
				output: star$2
			};
			if (opts.bash === true) {
				token$1.output = ".*?";
				if (prev.type === "bos" || prev.type === "slash") token$1.output = nodot + token$1.output;
				push$1(token$1);
				continue;
			}
			if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
				token$1.output = value;
				push$1(token$1);
				continue;
			}
			if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
				if (prev.type === "dot") {
					state.output += NO_DOT_SLASH$1;
					prev.output += NO_DOT_SLASH$1;
				} else if (opts.dot === true) {
					state.output += NO_DOTS_SLASH$1;
					prev.output += NO_DOTS_SLASH$1;
				} else {
					state.output += nodot;
					prev.output += nodot;
				}
				if (peek() !== "*") {
					state.output += ONE_CHAR$1;
					prev.output += ONE_CHAR$1;
				}
			}
			push$1(token$1);
		}
		while (state.brackets > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
			state.output = utils$1.escapeLast(state.output, "[");
			decrement("brackets");
		}
		while (state.parens > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
			state.output = utils$1.escapeLast(state.output, "(");
			decrement("parens");
		}
		while (state.braces > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
			state.output = utils$1.escapeLast(state.output, "{");
			decrement("braces");
		}
		if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) push$1({
			type: "maybe_slash",
			value: "",
			output: `${SLASH_LITERAL$1}?`
		});
		if (state.backtrack === true) {
			state.output = "";
			for (const token$1 of state.tokens) {
				state.output += token$1.output != null ? token$1.output : token$1.value;
				if (token$1.suffix) state.output += token$1.suffix;
			}
		}
		return state;
	};
	/**
	* Fast paths for creating regular expressions for common glob patterns.
	* This can significantly speed up processing and has very little downside
	* impact when none of the fast paths match.
	*/
	parse$2.fastpaths = (input, options) => {
		const opts = { ...options };
		const max$1 = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
		const len = input.length;
		if (len > max$1) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max$1}`);
		input = REPLACEMENTS[input] || input;
		const win32$4 = utils$1.isWindows(options);
		const { DOT_LITERAL: DOT_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOTS: NO_DOTS$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = constants$1.globChars(win32$4);
		const nodot = opts.dot ? NO_DOTS$1 : NO_DOT$1;
		const slashDot = opts.dot ? NO_DOTS_SLASH$1 : NO_DOT$1;
		const capture = opts.capture ? "" : "?:";
		const state = {
			negated: false,
			prefix: ""
		};
		let star$2 = opts.bash === true ? ".*?" : STAR$1;
		if (opts.capture) star$2 = `(${star$2})`;
		const globstar = (opts$1) => {
			if (opts$1.noglobstar === true) return star$2;
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const create$5 = (str$4) => {
			switch (str$4) {
				case "*": return `${nodot}${ONE_CHAR$1}${star$2}`;
				case ".*": return `${DOT_LITERAL$1}${ONE_CHAR$1}${star$2}`;
				case "*.*": return `${nodot}${star$2}${DOT_LITERAL$1}${ONE_CHAR$1}${star$2}`;
				case "*/*": return `${nodot}${star$2}${SLASH_LITERAL$1}${ONE_CHAR$1}${slashDot}${star$2}`;
				case "**": return nodot + globstar(opts);
				case "**/*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${ONE_CHAR$1}${star$2}`;
				case "**/*.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${star$2}${DOT_LITERAL$1}${ONE_CHAR$1}${star$2}`;
				case "**/.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${DOT_LITERAL$1}${ONE_CHAR$1}${star$2}`;
				default: {
					const match = /^(.*?)\.(\w+)$/.exec(str$4);
					if (!match) return;
					const source$1 = create$5(match[1]);
					if (!source$1) return;
					return source$1 + DOT_LITERAL$1 + match[2];
				}
			}
		};
		const output = utils$1.removePrefix(input, state);
		let source = create$5(output);
		if (source && opts.strictSlashes !== true) source += `${SLASH_LITERAL$1}?`;
		return source;
	};
	module.exports = parse$2;
} });

//#endregion
//#region node_modules/picomatch/lib/picomatch.js
var require_picomatch$1 = __commonJS({ "node_modules/picomatch/lib/picomatch.js"(exports, module) {
	const path$5 = __require("path");
	const scan = require_scan();
	const parse$1 = require_parse();
	const utils = require_utils();
	const constants = require_constants();
	const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
	/**
	* Creates a matcher function from one or more glob patterns. The
	* returned function takes a string to match as its first argument,
	* and returns true if the string is a match. The returned matcher
	* function also takes a boolean as the second argument that, when true,
	* returns an object with additional information.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch(glob[, options]);
	*
	* const isMatch = picomatch('*.!(*a)');
	* console.log(isMatch('a.a')); //=> false
	* console.log(isMatch('a.b')); //=> true
	* ```
	* @name picomatch
	* @param {String|Array} `globs` One or more glob patterns.
	* @param {Object=} `options`
	* @return {Function=} Returns a matcher function.
	* @api public
	*/
	const picomatch = (glob$1, options, returnState = false) => {
		if (Array.isArray(glob$1)) {
			const fns = glob$1.map((input) => picomatch(input, options, returnState));
			const arrayMatcher = (str$4) => {
				for (const isMatch of fns) {
					const state$1 = isMatch(str$4);
					if (state$1) return state$1;
				}
				return false;
			};
			return arrayMatcher;
		}
		const isState = isObject(glob$1) && glob$1.tokens && glob$1.input;
		if (glob$1 === "" || typeof glob$1 !== "string" && !isState) throw new TypeError("Expected pattern to be a non-empty string");
		const opts = options || {};
		const posix$3 = utils.isWindows(options);
		const regex = isState ? picomatch.compileRe(glob$1, options) : picomatch.makeRe(glob$1, options, false, true);
		const state = regex.state;
		delete regex.state;
		let isIgnored$3 = () => false;
		if (opts.ignore) {
			const ignoreOpts = {
				...options,
				ignore: null,
				onMatch: null,
				onResult: null
			};
			isIgnored$3 = picomatch(opts.ignore, ignoreOpts, returnState);
		}
		const matcher = (input, returnObject = false) => {
			const { isMatch, match, output } = picomatch.test(input, regex, options, {
				glob: glob$1,
				posix: posix$3
			});
			const result = {
				glob: glob$1,
				state,
				regex,
				posix: posix$3,
				input,
				output,
				match,
				isMatch
			};
			if (typeof opts.onResult === "function") opts.onResult(result);
			if (isMatch === false) {
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (isIgnored$3(input)) {
				if (typeof opts.onIgnore === "function") opts.onIgnore(result);
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (typeof opts.onMatch === "function") opts.onMatch(result);
			return returnObject ? result : true;
		};
		if (returnState) matcher.state = state;
		return matcher;
	};
	/**
	* Test `input` with the given `regex`. This is used by the main
	* `picomatch()` function to test the input string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.test(input, regex[, options]);
	*
	* console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
	* // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp} `regex`
	* @return {Object} Returns an object with matching info.
	* @api public
	*/
	picomatch.test = (input, regex, options, { glob: glob$1, posix: posix$3 } = {}) => {
		if (typeof input !== "string") throw new TypeError("Expected input to be a string");
		if (input === "") return {
			isMatch: false,
			output: ""
		};
		const opts = options || {};
		const format = opts.format || (posix$3 ? utils.toPosixSlashes : null);
		let match = input === glob$1;
		let output = match && format ? format(input) : input;
		if (match === false) {
			output = format ? format(input) : input;
			match = output === glob$1;
		}
		if (match === false || opts.capture === true) if (opts.matchBase === true || opts.basename === true) match = picomatch.matchBase(input, regex, options, posix$3);
		else match = regex.exec(output);
		return {
			isMatch: Boolean(match),
			match,
			output
		};
	};
	/**
	* Match the basename of a filepath.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.matchBase(input, glob[, options]);
	* console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
	* @return {Boolean}
	* @api public
	*/
	picomatch.matchBase = (input, glob$1, options, posix$3 = utils.isWindows(options)) => {
		const regex = glob$1 instanceof RegExp ? glob$1 : picomatch.makeRe(glob$1, options);
		return regex.test(path$5.basename(input));
	};
	/**
	* Returns true if **any** of the given glob `patterns` match the specified `string`.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.isMatch(string, patterns[, options]);
	*
	* console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
	* console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
	* ```
	* @param {String|Array} str The string to test.
	* @param {String|Array} patterns One or more glob patterns to use for matching.
	* @param {Object} [options] See available [options](#options).
	* @return {Boolean} Returns true if any patterns match `str`
	* @api public
	*/
	picomatch.isMatch = (str$4, patterns, options) => picomatch(patterns, options)(str$4);
	/**
	* Parse a glob pattern to create the source string for a regular
	* expression.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const result = picomatch.parse(pattern[, options]);
	* ```
	* @param {String} `pattern`
	* @param {Object} `options`
	* @return {Object} Returns an object with useful properties and output to be used as a regex source string.
	* @api public
	*/
	picomatch.parse = (pattern, options) => {
		if (Array.isArray(pattern)) return pattern.map((p$2) => picomatch.parse(p$2, options));
		return parse$1(pattern, {
			...options,
			fastpaths: false
		});
	};
	/**
	* Scan a glob pattern to separate the pattern into segments.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.scan(input[, options]);
	*
	* const result = picomatch.scan('!./foo/*.js');
	* console.log(result);
	* { prefix: '!./',
	*   input: '!./foo/*.js',
	*   start: 3,
	*   base: 'foo',
	*   glob: '*.js',
	*   isBrace: false,
	*   isBracket: false,
	*   isGlob: true,
	*   isExtglob: false,
	*   isGlobstar: false,
	*   negated: true }
	* ```
	* @param {String} `input` Glob pattern to scan.
	* @param {Object} `options`
	* @return {Object} Returns an object with
	* @api public
	*/
	picomatch.scan = (input, options) => scan(input, options);
	/**
	* Compile a regular expression from the `state` object returned by the
	* [parse()](#parse) method.
	*
	* @param {Object} `state`
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
	* @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
	* @return {RegExp}
	* @api public
	*/
	picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
		if (returnOutput === true) return state.output;
		const opts = options || {};
		const prepend$1 = opts.contains ? "" : "^";
		const append$1 = opts.contains ? "" : "$";
		let source = `${prepend$1}(?:${state.output})${append$1}`;
		if (state && state.negated === true) source = `^(?!${source}).*$`;
		const regex = picomatch.toRegex(source, options);
		if (returnState === true) regex.state = state;
		return regex;
	};
	/**
	* Create a regular expression from a parsed glob pattern.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const state = picomatch.parse('*.js');
	* // picomatch.compileRe(state[, options]);
	*
	* console.log(picomatch.compileRe(state));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `state` The object returned from the `.parse` method.
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
	* @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
	* @return {RegExp} Returns a regex created from the given pattern.
	* @api public
	*/
	picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
		if (!input || typeof input !== "string") throw new TypeError("Expected a non-empty string");
		let parsed = {
			negated: false,
			fastpaths: true
		};
		if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) parsed.output = parse$1.fastpaths(input, options);
		if (!parsed.output) parsed = parse$1(input, options);
		return picomatch.compileRe(parsed, options, returnOutput, returnState);
	};
	/**
	* Create a regular expression from the given regex source string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.toRegex(source[, options]);
	*
	* const { output } = picomatch.parse('*.js');
	* console.log(picomatch.toRegex(output));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `source` Regular expression source string.
	* @param {Object} `options`
	* @return {RegExp}
	* @api public
	*/
	picomatch.toRegex = (source, options) => {
		try {
			const opts = options || {};
			return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
		} catch (err) {
			if (options && options.debug === true) throw err;
			return /$^/;
		}
	};
	/**
	* Picomatch constants.
	* @return {Object}
	*/
	picomatch.constants = constants;
	/**
	* Expose "picomatch"
	*/
	module.exports = picomatch;
} });

//#endregion
//#region node_modules/picomatch/index.js
var require_picomatch = __commonJS({ "node_modules/picomatch/index.js"(exports, module) {
	module.exports = require_picomatch$1();
} });
var import_picomatch = __toESM(require_picomatch(), 1);

//#endregion
//#region node_modules/@rollup/pluginutils/dist/es/index.js
function isArray$1(arg) {
	return Array.isArray(arg);
}
function ensureArray(thing) {
	if (isArray$1(thing)) return thing;
	if (thing == null) return [];
	return [thing];
}
const normalizePath = function normalizePath$2(filename) {
	return filename.split(win32.sep).join(posix.sep);
};
function getMatcherString(id$4, resolutionBase) {
	if (resolutionBase === false || isAbsolute(id$4) || id$4.startsWith("*")) return normalizePath(id$4);
	const basePath = normalizePath(resolve(resolutionBase || "")).replace(/[-^$*+?.()|[\]{}]/g, "\\$&");
	return posix.join(basePath, normalizePath(id$4));
}
const createFilter = function createFilter$1(include, exclude, options) {
	const resolutionBase = options && options.resolve;
	const getMatcher = (id$4) => id$4 instanceof RegExp ? id$4 : { test: (what) => {
		const pattern = getMatcherString(id$4, resolutionBase);
		const fn = (0, import_picomatch.default)(pattern, { dot: true });
		const result = fn(what);
		return result;
	} };
	const includeMatchers = ensureArray(include).map(getMatcher);
	const excludeMatchers = ensureArray(exclude).map(getMatcher);
	return function result(id$4) {
		if (typeof id$4 !== "string") return false;
		if (/\0/.test(id$4)) return false;
		const pathId = normalizePath(id$4);
		for (let i$6 = 0; i$6 < excludeMatchers.length; ++i$6) {
			const matcher = excludeMatchers[i$6];
			if (matcher.test(pathId)) return false;
		}
		for (let i$6 = 0; i$6 < includeMatchers.length; ++i$6) {
			const matcher = includeMatchers[i$6];
			if (matcher.test(pathId)) return true;
		}
		return !includeMatchers.length;
	};
};
const reservedWords = "break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public";
const builtins = "arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl";
const forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(" "));
forbiddenIdentifiers.add("");

//#endregion
//#region src/post-cleaner.ts
var post_cleaner_default = (code$1) => {
	let _code = code$1;
	const originalCount = getDeclaredVariables(_code).length;
	let purgedCount = 0;
	for (;;) {
		const vars = getDeclaredVariables(_code);
		const unused = vars.filter((v$1) => !isVariableUsed(v$1, _code));
		if (unused.length === 0) break;
		for (const v$1 of unused) {
			const decl$1 = new RegExp(`.*--${v$1}:.*`, "g");
			_code = _code.replace(decl$1, "");
			if (_code.includes(`--${v$1}:`)) throw new Error("hey");
		}
		purgedCount += unused.length;
	}
	console.log(`POST-CLEANER - VARIABLES (${purgedCount} out of ${originalCount})`);
	return _code;
};

//#endregion
//#region node_modules/fs.realpath/old.js
var require_old = __commonJS({ "node_modules/fs.realpath/old.js"(exports) {
	var pathModule = __require("path");
	var isWindows = process.platform === "win32";
	var fs$2 = __require("fs");
	var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
	function rethrow() {
		var callback;
		if (DEBUG) {
			var backtrace = new Error();
			callback = debugCallback;
		} else callback = missingCallback;
		return callback;
		function debugCallback(err) {
			if (err) {
				backtrace.message = err.message;
				err = backtrace;
				missingCallback(err);
			}
		}
		function missingCallback(err) {
			if (err) {
				if (process.throwDeprecation) throw err;
				else if (!process.noDeprecation) {
					var msg = "fs: missing callback " + (err.stack || err.message);
					if (process.traceDeprecation) console.trace(msg);
					else console.error(msg);
				}
			}
		}
	}
	function maybeCallback(cb) {
		return typeof cb === "function" ? cb : rethrow();
	}
	var normalize = pathModule.normalize;
	if (isWindows) var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
	else var nextPartRe = /(.*?)(?:[\/]+|$)/g;
	if (isWindows) var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
	else var splitRootRe = /^[\/]*/;
	exports.realpathSync = function realpathSync$1(p$2, cache$3) {
		p$2 = pathModule.resolve(p$2);
		if (cache$3 && Object.prototype.hasOwnProperty.call(cache$3, p$2)) return cache$3[p$2];
		var original = p$2, seenLinks = {}, knownHard = {};
		var pos;
		var current;
		var base$1;
		var previous;
		start();
		function start() {
			var m$2 = splitRootRe.exec(p$2);
			pos = m$2[0].length;
			current = m$2[0];
			base$1 = m$2[0];
			previous = "";
			if (isWindows && !knownHard[base$1]) {
				fs$2.lstatSync(base$1);
				knownHard[base$1] = true;
			}
		}
		while (pos < p$2.length) {
			nextPartRe.lastIndex = pos;
			var result = nextPartRe.exec(p$2);
			previous = current;
			current += result[0];
			base$1 = previous + result[1];
			pos = nextPartRe.lastIndex;
			if (knownHard[base$1] || cache$3 && cache$3[base$1] === base$1) continue;
			var resolvedLink;
			if (cache$3 && Object.prototype.hasOwnProperty.call(cache$3, base$1)) resolvedLink = cache$3[base$1];
			else {
				var stat$5 = fs$2.lstatSync(base$1);
				if (!stat$5.isSymbolicLink()) {
					knownHard[base$1] = true;
					if (cache$3) cache$3[base$1] = base$1;
					continue;
				}
				var linkTarget = null;
				if (!isWindows) {
					var id$4 = stat$5.dev.toString(32) + ":" + stat$5.ino.toString(32);
					if (seenLinks.hasOwnProperty(id$4)) linkTarget = seenLinks[id$4];
				}
				if (linkTarget === null) {
					fs$2.statSync(base$1);
					linkTarget = fs$2.readlinkSync(base$1);
				}
				resolvedLink = pathModule.resolve(previous, linkTarget);
				if (cache$3) cache$3[base$1] = resolvedLink;
				if (!isWindows) seenLinks[id$4] = linkTarget;
			}
			p$2 = pathModule.resolve(resolvedLink, p$2.slice(pos));
			start();
		}
		if (cache$3) cache$3[original] = p$2;
		return p$2;
	};
	exports.realpath = function realpath$1(p$2, cache$3, cb) {
		if (typeof cb !== "function") {
			cb = maybeCallback(cache$3);
			cache$3 = null;
		}
		p$2 = pathModule.resolve(p$2);
		if (cache$3 && Object.prototype.hasOwnProperty.call(cache$3, p$2)) return process.nextTick(cb.bind(null, null, cache$3[p$2]));
		var original = p$2, seenLinks = {}, knownHard = {};
		var pos;
		var current;
		var base$1;
		var previous;
		start();
		function start() {
			var m$2 = splitRootRe.exec(p$2);
			pos = m$2[0].length;
			current = m$2[0];
			base$1 = m$2[0];
			previous = "";
			if (isWindows && !knownHard[base$1]) fs$2.lstat(base$1, function(err) {
				if (err) return cb(err);
				knownHard[base$1] = true;
				LOOP();
			});
			else process.nextTick(LOOP);
		}
		function LOOP() {
			if (pos >= p$2.length) {
				if (cache$3) cache$3[original] = p$2;
				return cb(null, p$2);
			}
			nextPartRe.lastIndex = pos;
			var result = nextPartRe.exec(p$2);
			previous = current;
			current += result[0];
			base$1 = previous + result[1];
			pos = nextPartRe.lastIndex;
			if (knownHard[base$1] || cache$3 && cache$3[base$1] === base$1) return process.nextTick(LOOP);
			if (cache$3 && Object.prototype.hasOwnProperty.call(cache$3, base$1)) return gotResolvedLink(cache$3[base$1]);
			return fs$2.lstat(base$1, gotStat);
		}
		function gotStat(err, stat$5) {
			if (err) return cb(err);
			if (!stat$5.isSymbolicLink()) {
				knownHard[base$1] = true;
				if (cache$3) cache$3[base$1] = base$1;
				return process.nextTick(LOOP);
			}
			if (!isWindows) {
				var id$4 = stat$5.dev.toString(32) + ":" + stat$5.ino.toString(32);
				if (seenLinks.hasOwnProperty(id$4)) return gotTarget(null, seenLinks[id$4], base$1);
			}
			fs$2.stat(base$1, function(err$1) {
				if (err$1) return cb(err$1);
				fs$2.readlink(base$1, function(err$2, target) {
					if (!isWindows) seenLinks[id$4] = target;
					gotTarget(err$2, target);
				});
			});
		}
		function gotTarget(err, target, base$2) {
			if (err) return cb(err);
			var resolvedLink = pathModule.resolve(previous, target);
			if (cache$3) cache$3[base$2] = resolvedLink;
			gotResolvedLink(resolvedLink);
		}
		function gotResolvedLink(resolvedLink) {
			p$2 = pathModule.resolve(resolvedLink, p$2.slice(pos));
			start();
		}
	};
} });

//#endregion
//#region node_modules/fs.realpath/index.js
var require_fs = __commonJS({ "node_modules/fs.realpath/index.js"(exports, module) {
	module.exports = realpath;
	realpath.realpath = realpath;
	realpath.sync = realpathSync;
	realpath.realpathSync = realpathSync;
	realpath.monkeypatch = monkeypatch;
	realpath.unmonkeypatch = unmonkeypatch;
	var fs$1 = __require("fs");
	var origRealpath = fs$1.realpath;
	var origRealpathSync = fs$1.realpathSync;
	var version = process.version;
	var ok = /^v[0-5]\./.test(version);
	var old = require_old();
	function newError(er) {
		return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
	}
	function realpath(p$2, cache$3, cb) {
		if (ok) return origRealpath(p$2, cache$3, cb);
		if (typeof cache$3 === "function") {
			cb = cache$3;
			cache$3 = null;
		}
		origRealpath(p$2, cache$3, function(er, result) {
			if (newError(er)) old.realpath(p$2, cache$3, cb);
			else cb(er, result);
		});
	}
	function realpathSync(p$2, cache$3) {
		if (ok) return origRealpathSync(p$2, cache$3);
		try {
			return origRealpathSync(p$2, cache$3);
		} catch (er) {
			if (newError(er)) return old.realpathSync(p$2, cache$3);
			else throw er;
		}
	}
	function monkeypatch() {
		fs$1.realpath = realpath;
		fs$1.realpathSync = realpathSync;
	}
	function unmonkeypatch() {
		fs$1.realpath = origRealpath;
		fs$1.realpathSync = origRealpathSync;
	}
} });

//#endregion
//#region node_modules/concat-map/index.js
var require_concat_map = __commonJS({ "node_modules/concat-map/index.js"(exports, module) {
	module.exports = function(xs, fn) {
		var res = [];
		for (var i$6 = 0; i$6 < xs.length; i$6++) {
			var x$1 = fn(xs[i$6], i$6);
			if (isArray(x$1)) res.push.apply(res, x$1);
			else res.push(x$1);
		}
		return res;
	};
	var isArray = Array.isArray || function(xs) {
		return Object.prototype.toString.call(xs) === "[object Array]";
	};
} });

//#endregion
//#region node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({ "node_modules/balanced-match/index.js"(exports, module) {
	module.exports = balanced$1;
	function balanced$1(a$1, b$1, str$4) {
		if (a$1 instanceof RegExp) a$1 = maybeMatch(a$1, str$4);
		if (b$1 instanceof RegExp) b$1 = maybeMatch(b$1, str$4);
		var r$2 = range(a$1, b$1, str$4);
		return r$2 && {
			start: r$2[0],
			end: r$2[1],
			pre: str$4.slice(0, r$2[0]),
			body: str$4.slice(r$2[0] + a$1.length, r$2[1]),
			post: str$4.slice(r$2[1] + b$1.length)
		};
	}
	function maybeMatch(reg$1, str$4) {
		var m$2 = str$4.match(reg$1);
		return m$2 ? m$2[0] : null;
	}
	balanced$1.range = range;
	function range(a$1, b$1, str$4) {
		var begs, beg, left, right, result;
		var ai = str$4.indexOf(a$1);
		var bi = str$4.indexOf(b$1, ai + 1);
		var i$6 = ai;
		if (ai >= 0 && bi > 0) {
			if (a$1 === b$1) return [ai, bi];
			begs = [];
			left = str$4.length;
			while (i$6 >= 0 && !result) {
				if (i$6 == ai) {
					begs.push(i$6);
					ai = str$4.indexOf(a$1, i$6 + 1);
				} else if (begs.length == 1) result = [begs.pop(), bi];
				else {
					beg = begs.pop();
					if (beg < left) {
						left = beg;
						right = bi;
					}
					bi = str$4.indexOf(b$1, i$6 + 1);
				}
				i$6 = ai < bi && ai >= 0 ? ai : bi;
			}
			if (begs.length) result = [left, right];
		}
		return result;
	}
} });

//#endregion
//#region node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({ "node_modules/brace-expansion/index.js"(exports, module) {
	var concatMap = require_concat_map();
	var balanced = require_balanced_match();
	module.exports = expandTop;
	var escSlash = "\0SLASH" + Math.random() + "\0";
	var escOpen = "\0OPEN" + Math.random() + "\0";
	var escClose = "\0CLOSE" + Math.random() + "\0";
	var escComma = "\0COMMA" + Math.random() + "\0";
	var escPeriod = "\0PERIOD" + Math.random() + "\0";
	function numeric(str$4) {
		return parseInt(str$4, 10) == str$4 ? parseInt(str$4, 10) : str$4.charCodeAt(0);
	}
	function escapeBraces(str$4) {
		return str$4.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
	}
	function unescapeBraces(str$4) {
		return str$4.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
	}
	function parseCommaParts(str$4) {
		if (!str$4) return [""];
		var parts = [];
		var m$2 = balanced("{", "}", str$4);
		if (!m$2) return str$4.split(",");
		var pre = m$2.pre;
		var body = m$2.body;
		var post = m$2.post;
		var p$2 = pre.split(",");
		p$2[p$2.length - 1] += "{" + body + "}";
		var postParts = parseCommaParts(post);
		if (post.length) {
			p$2[p$2.length - 1] += postParts.shift();
			p$2.push.apply(p$2, postParts);
		}
		parts.push.apply(parts, p$2);
		return parts;
	}
	function expandTop(str$4) {
		if (!str$4) return [];
		if (str$4.substr(0, 2) === "{}") str$4 = "\\{\\}" + str$4.substr(2);
		return expand$1(escapeBraces(str$4), true).map(unescapeBraces);
	}
	function embrace(str$4) {
		return "{" + str$4 + "}";
	}
	function isPadded(el) {
		return /^-?0\d/.test(el);
	}
	function lte(i$6, y$2) {
		return i$6 <= y$2;
	}
	function gte(i$6, y$2) {
		return i$6 >= y$2;
	}
	function expand$1(str$4, isTop) {
		var expansions = [];
		var m$2 = balanced("{", "}", str$4);
		if (!m$2 || /\$$/.test(m$2.pre)) return [str$4];
		var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m$2.body);
		var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m$2.body);
		var isSequence = isNumericSequence || isAlphaSequence;
		var isOptions = m$2.body.indexOf(",") >= 0;
		if (!isSequence && !isOptions) {
			if (m$2.post.match(/,.*\}/)) {
				str$4 = m$2.pre + "{" + m$2.body + escClose + m$2.post;
				return expand$1(str$4);
			}
			return [str$4];
		}
		var n$4;
		if (isSequence) n$4 = m$2.body.split(/\.\./);
		else {
			n$4 = parseCommaParts(m$2.body);
			if (n$4.length === 1) {
				n$4 = expand$1(n$4[0], false).map(embrace);
				if (n$4.length === 1) {
					var post = m$2.post.length ? expand$1(m$2.post, false) : [""];
					return post.map(function(p$2) {
						return m$2.pre + n$4[0] + p$2;
					});
				}
			}
		}
		var pre = m$2.pre;
		var post = m$2.post.length ? expand$1(m$2.post, false) : [""];
		var N;
		if (isSequence) {
			var x$1 = numeric(n$4[0]);
			var y$2 = numeric(n$4[1]);
			var width = Math.max(n$4[0].length, n$4[1].length);
			var incr = n$4.length == 3 ? Math.abs(numeric(n$4[2])) : 1;
			var test = lte;
			var reverse = y$2 < x$1;
			if (reverse) {
				incr *= -1;
				test = gte;
			}
			var pad$1 = n$4.some(isPadded);
			N = [];
			for (var i$6 = x$1; test(i$6, y$2); i$6 += incr) {
				var c$2;
				if (isAlphaSequence) {
					c$2 = String.fromCharCode(i$6);
					if (c$2 === "\\") c$2 = "";
				} else {
					c$2 = String(i$6);
					if (pad$1) {
						var need = width - c$2.length;
						if (need > 0) {
							var z = new Array(need + 1).join("0");
							if (i$6 < 0) c$2 = "-" + z + c$2.slice(1);
							else c$2 = z + c$2;
						}
					}
				}
				N.push(c$2);
			}
		} else N = concatMap(n$4, function(el) {
			return expand$1(el, false);
		});
		for (var j$1 = 0; j$1 < N.length; j$1++) for (var k$1 = 0; k$1 < post.length; k$1++) {
			var expansion = pre + N[j$1] + post[k$1];
			if (!isTop || isSequence || expansion) expansions.push(expansion);
		}
		return expansions;
	}
} });

//#endregion
//#region node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({ "node_modules/minimatch/minimatch.js"(exports, module) {
	module.exports = minimatch$3;
	minimatch$3.Minimatch = Minimatch$3;
	var path$4 = function() {
		try {
			return __require("path");
		} catch (e$2) {}
	}() || { sep: "/" };
	minimatch$3.sep = path$4.sep;
	var GLOBSTAR = minimatch$3.GLOBSTAR = Minimatch$3.GLOBSTAR = {};
	var expand = require_brace_expansion();
	var plTypes = {
		"!": {
			open: "(?:(?!(?:",
			close: "))[^/]*?)"
		},
		"?": {
			open: "(?:",
			close: ")?"
		},
		"+": {
			open: "(?:",
			close: ")+"
		},
		"*": {
			open: "(?:",
			close: ")*"
		},
		"@": {
			open: "(?:",
			close: ")"
		}
	};
	var qmark = "[^/]";
	var star = qmark + "*?";
	var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
	var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
	var reSpecials = charSet("().*{}+?[]^$\\!");
	function charSet(s$3) {
		return s$3.split("").reduce(function(set, c$2) {
			set[c$2] = true;
			return set;
		}, {});
	}
	var slashSplit = /\/+/;
	minimatch$3.filter = filter;
	function filter(pattern, options) {
		options = options || {};
		return function(p$2, i$6, list$4) {
			return minimatch$3(p$2, pattern, options);
		};
	}
	function ext(a$1, b$1) {
		b$1 = b$1 || {};
		var t$9 = {};
		Object.keys(a$1).forEach(function(k$1) {
			t$9[k$1] = a$1[k$1];
		});
		Object.keys(b$1).forEach(function(k$1) {
			t$9[k$1] = b$1[k$1];
		});
		return t$9;
	}
	minimatch$3.defaults = function(def$1) {
		if (!def$1 || typeof def$1 !== "object" || !Object.keys(def$1).length) return minimatch$3;
		var orig = minimatch$3;
		var m$2 = function minimatch$4(p$2, pattern, options) {
			return orig(p$2, pattern, ext(def$1, options));
		};
		m$2.Minimatch = function Minimatch$4(pattern, options) {
			return new orig.Minimatch(pattern, ext(def$1, options));
		};
		m$2.Minimatch.defaults = function defaults$2(options) {
			return orig.defaults(ext(def$1, options)).Minimatch;
		};
		m$2.filter = function filter$2(pattern, options) {
			return orig.filter(pattern, ext(def$1, options));
		};
		m$2.defaults = function defaults$2(options) {
			return orig.defaults(ext(def$1, options));
		};
		m$2.makeRe = function makeRe$1(pattern, options) {
			return orig.makeRe(pattern, ext(def$1, options));
		};
		m$2.braceExpand = function braceExpand$1(pattern, options) {
			return orig.braceExpand(pattern, ext(def$1, options));
		};
		m$2.match = function(list$4, pattern, options) {
			return orig.match(list$4, pattern, ext(def$1, options));
		};
		return m$2;
	};
	Minimatch$3.defaults = function(def$1) {
		return minimatch$3.defaults(def$1).Minimatch;
	};
	function minimatch$3(p$2, pattern, options) {
		assertValidPattern(pattern);
		if (!options) options = {};
		if (!options.nocomment && pattern.charAt(0) === "#") return false;
		return new Minimatch$3(pattern, options).match(p$2);
	}
	function Minimatch$3(pattern, options) {
		if (!(this instanceof Minimatch$3)) return new Minimatch$3(pattern, options);
		assertValidPattern(pattern);
		if (!options) options = {};
		pattern = pattern.trim();
		if (!options.allowWindowsEscape && path$4.sep !== "/") pattern = pattern.split(path$4.sep).join("/");
		this.options = options;
		this.set = [];
		this.pattern = pattern;
		this.regexp = null;
		this.negate = false;
		this.comment = false;
		this.empty = false;
		this.partial = !!options.partial;
		this.make();
	}
	Minimatch$3.prototype.debug = function() {};
	Minimatch$3.prototype.make = make;
	function make() {
		var pattern = this.pattern;
		var options = this.options;
		if (!options.nocomment && pattern.charAt(0) === "#") {
			this.comment = true;
			return;
		}
		if (!pattern) {
			this.empty = true;
			return;
		}
		this.parseNegate();
		var set = this.globSet = this.braceExpand();
		if (options.debug) this.debug = function debug$2() {
			console.error.apply(console, arguments);
		};
		this.debug(this.pattern, set);
		set = this.globParts = set.map(function(s$3) {
			return s$3.split(slashSplit);
		});
		this.debug(this.pattern, set);
		set = set.map(function(s$3, si, set$1) {
			return s$3.map(this.parse, this);
		}, this);
		this.debug(this.pattern, set);
		set = set.filter(function(s$3) {
			return s$3.indexOf(false) === -1;
		});
		this.debug(this.pattern, set);
		this.set = set;
	}
	Minimatch$3.prototype.parseNegate = parseNegate;
	function parseNegate() {
		var pattern = this.pattern;
		var negate = false;
		var options = this.options;
		var negateOffset = 0;
		if (options.nonegate) return;
		for (var i$6 = 0, l$1 = pattern.length; i$6 < l$1 && pattern.charAt(i$6) === "!"; i$6++) {
			negate = !negate;
			negateOffset++;
		}
		if (negateOffset) this.pattern = pattern.substr(negateOffset);
		this.negate = negate;
	}
	minimatch$3.braceExpand = function(pattern, options) {
		return braceExpand(pattern, options);
	};
	Minimatch$3.prototype.braceExpand = braceExpand;
	function braceExpand(pattern, options) {
		if (!options) if (this instanceof Minimatch$3) options = this.options;
		else options = {};
		pattern = typeof pattern === "undefined" ? this.pattern : pattern;
		assertValidPattern(pattern);
		if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) return [pattern];
		return expand(pattern);
	}
	var MAX_PATTERN_LENGTH = 1024 * 64;
	var assertValidPattern = function(pattern) {
		if (typeof pattern !== "string") throw new TypeError("invalid pattern");
		if (pattern.length > MAX_PATTERN_LENGTH) throw new TypeError("pattern is too long");
	};
	Minimatch$3.prototype.parse = parse;
	var SUBPARSE = {};
	function parse(pattern, isSub) {
		assertValidPattern(pattern);
		var options = this.options;
		if (pattern === "**") if (!options.noglobstar) return GLOBSTAR;
		else pattern = "*";
		if (pattern === "") return "";
		var re = "";
		var hasMagic = !!options.nocase;
		var escaping = false;
		var patternListStack = [];
		var negativeLists = [];
		var stateChar;
		var inClass = false;
		var reClassStart = -1;
		var classStart = -1;
		var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
		var self$1 = this;
		function clearStateChar() {
			if (stateChar) {
				switch (stateChar) {
					case "*":
						re += star;
						hasMagic = true;
						break;
					case "?":
						re += qmark;
						hasMagic = true;
						break;
					default:
						re += "\\" + stateChar;
						break;
				}
				self$1.debug("clearStateChar %j %j", stateChar, re);
				stateChar = false;
			}
		}
		for (var i$6 = 0, len = pattern.length, c$2; i$6 < len && (c$2 = pattern.charAt(i$6)); i$6++) {
			this.debug("%s	%s %s %j", pattern, i$6, re, c$2);
			if (escaping && reSpecials[c$2]) {
				re += "\\" + c$2;
				escaping = false;
				continue;
			}
			switch (c$2) {
				case "/": return false;
				case "\\":
					clearStateChar();
					escaping = true;
					continue;
				case "?":
				case "*":
				case "+":
				case "@":
				case "!":
					this.debug("%s	%s %s %j <-- stateChar", pattern, i$6, re, c$2);
					if (inClass) {
						this.debug("  in class");
						if (c$2 === "!" && i$6 === classStart + 1) c$2 = "^";
						re += c$2;
						continue;
					}
					self$1.debug("call clearStateChar %j", stateChar);
					clearStateChar();
					stateChar = c$2;
					if (options.noext) clearStateChar();
					continue;
				case "(":
					if (inClass) {
						re += "(";
						continue;
					}
					if (!stateChar) {
						re += "\\(";
						continue;
					}
					patternListStack.push({
						type: stateChar,
						start: i$6 - 1,
						reStart: re.length,
						open: plTypes[stateChar].open,
						close: plTypes[stateChar].close
					});
					re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
					this.debug("plType %j %j", stateChar, re);
					stateChar = false;
					continue;
				case ")":
					if (inClass || !patternListStack.length) {
						re += "\\)";
						continue;
					}
					clearStateChar();
					hasMagic = true;
					var pl = patternListStack.pop();
					re += pl.close;
					if (pl.type === "!") negativeLists.push(pl);
					pl.reEnd = re.length;
					continue;
				case "|":
					if (inClass || !patternListStack.length || escaping) {
						re += "\\|";
						escaping = false;
						continue;
					}
					clearStateChar();
					re += "|";
					continue;
				case "[":
					clearStateChar();
					if (inClass) {
						re += "\\" + c$2;
						continue;
					}
					inClass = true;
					classStart = i$6;
					reClassStart = re.length;
					re += c$2;
					continue;
				case "]":
					if (i$6 === classStart + 1 || !inClass) {
						re += "\\" + c$2;
						escaping = false;
						continue;
					}
					var cs = pattern.substring(classStart + 1, i$6);
					try {
						RegExp("[" + cs + "]");
					} catch (er) {
						var sp = this.parse(cs, SUBPARSE);
						re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
						hasMagic = hasMagic || sp[1];
						inClass = false;
						continue;
					}
					hasMagic = true;
					inClass = false;
					re += c$2;
					continue;
				default:
					clearStateChar();
					if (escaping) escaping = false;
					else if (reSpecials[c$2] && !(c$2 === "^" && inClass)) re += "\\";
					re += c$2;
			}
		}
		if (inClass) {
			cs = pattern.substr(classStart + 1);
			sp = this.parse(cs, SUBPARSE);
			re = re.substr(0, reClassStart) + "\\[" + sp[0];
			hasMagic = hasMagic || sp[1];
		}
		for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
			var tail = re.slice(pl.reStart + pl.open.length);
			this.debug("setting tail", re, pl);
			tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_, $1, $2) {
				if (!$2) $2 = "\\";
				return $1 + $1 + $2 + "|";
			});
			this.debug("tail=%j\n   %s", tail, tail, pl, re);
			var t$9 = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
			hasMagic = true;
			re = re.slice(0, pl.reStart) + t$9 + "\\(" + tail;
		}
		clearStateChar();
		if (escaping) re += "\\\\";
		var addPatternStart = false;
		switch (re.charAt(0)) {
			case "[":
			case ".":
			case "(": addPatternStart = true;
		}
		for (var n$4 = negativeLists.length - 1; n$4 > -1; n$4--) {
			var nl = negativeLists[n$4];
			var nlBefore = re.slice(0, nl.reStart);
			var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
			var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
			var nlAfter = re.slice(nl.reEnd);
			nlLast += nlAfter;
			var openParensBefore = nlBefore.split("(").length - 1;
			var cleanAfter = nlAfter;
			for (i$6 = 0; i$6 < openParensBefore; i$6++) cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
			nlAfter = cleanAfter;
			var dollar$3 = "";
			if (nlAfter === "" && isSub !== SUBPARSE) dollar$3 = "$";
			var newRe = nlBefore + nlFirst + nlAfter + dollar$3 + nlLast;
			re = newRe;
		}
		if (re !== "" && hasMagic) re = "(?=.)" + re;
		if (addPatternStart) re = patternStart + re;
		if (isSub === SUBPARSE) return [re, hasMagic];
		if (!hasMagic) return globUnescape(pattern);
		var flags = options.nocase ? "i" : "";
		try {
			var regExp = new RegExp("^" + re + "$", flags);
		} catch (er) {
			return new RegExp("$.");
		}
		regExp._glob = pattern;
		regExp._src = re;
		return regExp;
	}
	minimatch$3.makeRe = function(pattern, options) {
		return new Minimatch$3(pattern, options || {}).makeRe();
	};
	Minimatch$3.prototype.makeRe = makeRe;
	function makeRe() {
		if (this.regexp || this.regexp === false) return this.regexp;
		var set = this.set;
		if (!set.length) {
			this.regexp = false;
			return this.regexp;
		}
		var options = this.options;
		var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
		var flags = options.nocase ? "i" : "";
		var re = set.map(function(pattern) {
			return pattern.map(function(p$2) {
				return p$2 === GLOBSTAR ? twoStar : typeof p$2 === "string" ? regExpEscape(p$2) : p$2._src;
			}).join("\\/");
		}).join("|");
		re = "^(?:" + re + ")$";
		if (this.negate) re = "^(?!" + re + ").*$";
		try {
			this.regexp = new RegExp(re, flags);
		} catch (ex) {
			this.regexp = false;
		}
		return this.regexp;
	}
	minimatch$3.match = function(list$4, pattern, options) {
		options = options || {};
		var mm = new Minimatch$3(pattern, options);
		list$4 = list$4.filter(function(f$1) {
			return mm.match(f$1);
		});
		if (mm.options.nonull && !list$4.length) list$4.push(pattern);
		return list$4;
	};
	Minimatch$3.prototype.match = function match(f$1, partial) {
		if (typeof partial === "undefined") partial = this.partial;
		this.debug("match", f$1, this.pattern);
		if (this.comment) return false;
		if (this.empty) return f$1 === "";
		if (f$1 === "/" && partial) return true;
		var options = this.options;
		if (path$4.sep !== "/") f$1 = f$1.split(path$4.sep).join("/");
		f$1 = f$1.split(slashSplit);
		this.debug(this.pattern, "split", f$1);
		var set = this.set;
		this.debug(this.pattern, "set", set);
		var filename;
		var i$6;
		for (i$6 = f$1.length - 1; i$6 >= 0; i$6--) {
			filename = f$1[i$6];
			if (filename) break;
		}
		for (i$6 = 0; i$6 < set.length; i$6++) {
			var pattern = set[i$6];
			var file$2 = f$1;
			if (options.matchBase && pattern.length === 1) file$2 = [filename];
			var hit = this.matchOne(file$2, pattern, partial);
			if (hit) {
				if (options.flipNegate) return true;
				return !this.negate;
			}
		}
		if (options.flipNegate) return false;
		return this.negate;
	};
	Minimatch$3.prototype.matchOne = function(file$2, pattern, partial) {
		var options = this.options;
		this.debug("matchOne", {
			"this": this,
			file: file$2,
			pattern
		});
		this.debug("matchOne", file$2.length, pattern.length);
		for (var fi = 0, pi = 0, fl = file$2.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
			this.debug("matchOne loop");
			var p$2 = pattern[pi];
			var f$1 = file$2[fi];
			this.debug(pattern, p$2, f$1);
			/* istanbul ignore if */
			if (p$2 === false) return false;
			if (p$2 === GLOBSTAR) {
				this.debug("GLOBSTAR", [
					pattern,
					p$2,
					f$1
				]);
				var fr = fi;
				var pr = pi + 1;
				if (pr === pl) {
					this.debug("** at the end");
					for (; fi < fl; fi++) if (file$2[fi] === "." || file$2[fi] === ".." || !options.dot && file$2[fi].charAt(0) === ".") return false;
					return true;
				}
				while (fr < fl) {
					var swallowee = file$2[fr];
					this.debug("\nglobstar while", file$2, fr, pattern, pr, swallowee);
					if (this.matchOne(file$2.slice(fr), pattern.slice(pr), partial)) {
						this.debug("globstar found match!", fr, fl, swallowee);
						return true;
					} else {
						if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
							this.debug("dot detected!", file$2, fr, pattern, pr);
							break;
						}
						this.debug("globstar swallow a segment, and continue");
						fr++;
					}
				}
				/* istanbul ignore if */
				if (partial) {
					this.debug("\n>>> no match, partial?", file$2, fr, pattern, pr);
					if (fr === fl) return true;
				}
				return false;
			}
			var hit;
			if (typeof p$2 === "string") {
				hit = f$1 === p$2;
				this.debug("string match", p$2, f$1, hit);
			} else {
				hit = f$1.match(p$2);
				this.debug("pattern match", p$2, f$1, hit);
			}
			if (!hit) return false;
		}
		if (fi === fl && pi === pl) return true;
		else if (fi === fl) return partial;
		else if (pi === pl) return fi === fl - 1 && file$2[fi] === "";
		/* istanbul ignore next */
		throw new Error("wtf?");
	};
	function globUnescape(s$3) {
		return s$3.replace(/\\(.)/g, "$1");
	}
	function regExpEscape(s$3) {
		return s$3.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	}
} });

//#endregion
//#region node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({ "node_modules/inherits/inherits_browser.js"(exports, module) {
	if (typeof Object.create === "function") module.exports = function inherits$5(ctor, superCtor) {
		if (superCtor) {
			ctor.super_ = superCtor;
			ctor.prototype = Object.create(superCtor.prototype, { constructor: {
				value: ctor,
				enumerable: false,
				writable: true,
				configurable: true
			} });
		}
	};
	else module.exports = function inherits$5(ctor, superCtor) {
		if (superCtor) {
			ctor.super_ = superCtor;
			var TempCtor = function() {};
			TempCtor.prototype = superCtor.prototype;
			ctor.prototype = new TempCtor();
			ctor.prototype.constructor = ctor;
		}
	};
} });

//#endregion
//#region node_modules/inherits/inherits.js
var require_inherits = __commonJS({ "node_modules/inherits/inherits.js"(exports, module) {
	try {
		var util$2 = __require("util");
		/* istanbul ignore next */
		if (typeof util$2.inherits !== "function") throw "";
		module.exports = util$2.inherits;
	} catch (e$2) {
		/* istanbul ignore next */
		module.exports = require_inherits_browser();
	}
} });

//#endregion
//#region node_modules/path-is-absolute/index.js
var require_path_is_absolute = __commonJS({ "node_modules/path-is-absolute/index.js"(exports, module) {
	function posix$1(path$28) {
		return path$28.charAt(0) === "/";
	}
	function win32$1(path$28) {
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path$28);
		var device = result[1] || "";
		var isUnc = Boolean(device && device.charAt(1) !== ":");
		return Boolean(result[2] || isUnc);
	}
	module.exports = process.platform === "win32" ? win32$1 : posix$1;
	module.exports.posix = posix$1;
	module.exports.win32 = win32$1;
} });

//#endregion
//#region node_modules/glob/common.js
var require_common = __commonJS({ "node_modules/glob/common.js"(exports) {
	exports.setopts = setopts$2;
	exports.ownProp = ownProp$2;
	exports.makeAbs = makeAbs;
	exports.finish = finish;
	exports.mark = mark;
	exports.isIgnored = isIgnored$2;
	exports.childrenIgnored = childrenIgnored$2;
	function ownProp$2(obj, field) {
		return Object.prototype.hasOwnProperty.call(obj, field);
	}
	var fs = __require("fs");
	var path$3 = __require("path");
	var minimatch$2 = require_minimatch();
	var isAbsolute$3 = require_path_is_absolute();
	var Minimatch$2 = minimatch$2.Minimatch;
	function alphasort(a$1, b$1) {
		return a$1.localeCompare(b$1, "en");
	}
	function setupIgnores(self$1, options) {
		self$1.ignore = options.ignore || [];
		if (!Array.isArray(self$1.ignore)) self$1.ignore = [self$1.ignore];
		if (self$1.ignore.length) self$1.ignore = self$1.ignore.map(ignoreMap);
	}
	function ignoreMap(pattern) {
		var gmatcher = null;
		if (pattern.slice(-3) === "/**") {
			var gpattern = pattern.replace(/(\/\*\*)+$/, "");
			gmatcher = new Minimatch$2(gpattern, { dot: true });
		}
		return {
			matcher: new Minimatch$2(pattern, { dot: true }),
			gmatcher
		};
	}
	function setopts$2(self$1, pattern, options) {
		if (!options) options = {};
		if (options.matchBase && -1 === pattern.indexOf("/")) {
			if (options.noglobstar) throw new Error("base matching requires globstar");
			pattern = "**/" + pattern;
		}
		self$1.silent = !!options.silent;
		self$1.pattern = pattern;
		self$1.strict = options.strict !== false;
		self$1.realpath = !!options.realpath;
		self$1.realpathCache = options.realpathCache || Object.create(null);
		self$1.follow = !!options.follow;
		self$1.dot = !!options.dot;
		self$1.mark = !!options.mark;
		self$1.nodir = !!options.nodir;
		if (self$1.nodir) self$1.mark = true;
		self$1.sync = !!options.sync;
		self$1.nounique = !!options.nounique;
		self$1.nonull = !!options.nonull;
		self$1.nosort = !!options.nosort;
		self$1.nocase = !!options.nocase;
		self$1.stat = !!options.stat;
		self$1.noprocess = !!options.noprocess;
		self$1.absolute = !!options.absolute;
		self$1.fs = options.fs || fs;
		self$1.maxLength = options.maxLength || Infinity;
		self$1.cache = options.cache || Object.create(null);
		self$1.statCache = options.statCache || Object.create(null);
		self$1.symlinks = options.symlinks || Object.create(null);
		setupIgnores(self$1, options);
		self$1.changedCwd = false;
		var cwd$1 = process.cwd();
		if (!ownProp$2(options, "cwd")) self$1.cwd = cwd$1;
		else {
			self$1.cwd = path$3.resolve(options.cwd);
			self$1.changedCwd = self$1.cwd !== cwd$1;
		}
		self$1.root = options.root || path$3.resolve(self$1.cwd, "/");
		self$1.root = path$3.resolve(self$1.root);
		if (process.platform === "win32") self$1.root = self$1.root.replace(/\\/g, "/");
		self$1.cwdAbs = isAbsolute$3(self$1.cwd) ? self$1.cwd : makeAbs(self$1, self$1.cwd);
		if (process.platform === "win32") self$1.cwdAbs = self$1.cwdAbs.replace(/\\/g, "/");
		self$1.nomount = !!options.nomount;
		options.nonegate = true;
		options.nocomment = true;
		options.allowWindowsEscape = false;
		self$1.minimatch = new Minimatch$2(pattern, options);
		self$1.options = self$1.minimatch.options;
	}
	function finish(self$1) {
		var nou = self$1.nounique;
		var all = nou ? [] : Object.create(null);
		for (var i$6 = 0, l$1 = self$1.matches.length; i$6 < l$1; i$6++) {
			var matches = self$1.matches[i$6];
			if (!matches || Object.keys(matches).length === 0) {
				if (self$1.nonull) {
					var literal = self$1.minimatch.globSet[i$6];
					if (nou) all.push(literal);
					else all[literal] = true;
				}
			} else {
				var m$2 = Object.keys(matches);
				if (nou) all.push.apply(all, m$2);
				else m$2.forEach(function(m$3) {
					all[m$3] = true;
				});
			}
		}
		if (!nou) all = Object.keys(all);
		if (!self$1.nosort) all = all.sort(alphasort);
		if (self$1.mark) {
			for (var i$6 = 0; i$6 < all.length; i$6++) all[i$6] = self$1._mark(all[i$6]);
			if (self$1.nodir) all = all.filter(function(e$2) {
				var notDir = !/\/$/.test(e$2);
				var c$2 = self$1.cache[e$2] || self$1.cache[makeAbs(self$1, e$2)];
				if (notDir && c$2) notDir = c$2 !== "DIR" && !Array.isArray(c$2);
				return notDir;
			});
		}
		if (self$1.ignore.length) all = all.filter(function(m$3) {
			return !isIgnored$2(self$1, m$3);
		});
		self$1.found = all;
	}
	function mark(self$1, p$2) {
		var abs = makeAbs(self$1, p$2);
		var c$2 = self$1.cache[abs];
		var m$2 = p$2;
		if (c$2) {
			var isDir = c$2 === "DIR" || Array.isArray(c$2);
			var slash$4 = p$2.slice(-1) === "/";
			if (isDir && !slash$4) m$2 += "/";
			else if (!isDir && slash$4) m$2 = m$2.slice(0, -1);
			if (m$2 !== p$2) {
				var mabs = makeAbs(self$1, m$2);
				self$1.statCache[mabs] = self$1.statCache[abs];
				self$1.cache[mabs] = self$1.cache[abs];
			}
		}
		return m$2;
	}
	function makeAbs(self$1, f$1) {
		var abs = f$1;
		if (f$1.charAt(0) === "/") abs = path$3.join(self$1.root, f$1);
		else if (isAbsolute$3(f$1) || f$1 === "") abs = f$1;
		else if (self$1.changedCwd) abs = path$3.resolve(self$1.cwd, f$1);
		else abs = path$3.resolve(f$1);
		if (process.platform === "win32") abs = abs.replace(/\\/g, "/");
		return abs;
	}
	function isIgnored$2(self$1, path$28) {
		if (!self$1.ignore.length) return false;
		return self$1.ignore.some(function(item) {
			return item.matcher.match(path$28) || !!(item.gmatcher && item.gmatcher.match(path$28));
		});
	}
	function childrenIgnored$2(self$1, path$28) {
		if (!self$1.ignore.length) return false;
		return self$1.ignore.some(function(item) {
			return !!(item.gmatcher && item.gmatcher.match(path$28));
		});
	}
} });

//#endregion
//#region node_modules/glob/sync.js
var require_sync = __commonJS({ "node_modules/glob/sync.js"(exports, module) {
	module.exports = globSync$1;
	globSync$1.GlobSync = GlobSync$1;
	var rp$1 = require_fs();
	var minimatch$1 = require_minimatch();
	var Minimatch$1 = minimatch$1.Minimatch;
	var Glob$1 = require_glob().Glob;
	var util$1 = __require("util");
	var path$2 = __require("path");
	var assert$1 = __require("assert");
	var isAbsolute$2 = require_path_is_absolute();
	var common$1 = require_common();
	var setopts$1 = common$1.setopts;
	var ownProp$1 = common$1.ownProp;
	var childrenIgnored$1 = common$1.childrenIgnored;
	var isIgnored$1 = common$1.isIgnored;
	function globSync$1(pattern, options) {
		if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
		return new GlobSync$1(pattern, options).found;
	}
	function GlobSync$1(pattern, options) {
		if (!pattern) throw new Error("must provide pattern");
		if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
		if (!(this instanceof GlobSync$1)) return new GlobSync$1(pattern, options);
		setopts$1(this, pattern, options);
		if (this.noprocess) return this;
		var n$4 = this.minimatch.set.length;
		this.matches = new Array(n$4);
		for (var i$6 = 0; i$6 < n$4; i$6++) this._process(this.minimatch.set[i$6], i$6, false);
		this._finish();
	}
	GlobSync$1.prototype._finish = function() {
		assert$1.ok(this instanceof GlobSync$1);
		if (this.realpath) {
			var self$1 = this;
			this.matches.forEach(function(matchset, index$1) {
				var set = self$1.matches[index$1] = Object.create(null);
				for (var p$2 in matchset) try {
					p$2 = self$1._makeAbs(p$2);
					var real = rp$1.realpathSync(p$2, self$1.realpathCache);
					set[real] = true;
				} catch (er) {
					if (er.syscall === "stat") set[self$1._makeAbs(p$2)] = true;
					else throw er;
				}
			});
		}
		common$1.finish(this);
	};
	GlobSync$1.prototype._process = function(pattern, index$1, inGlobStar) {
		assert$1.ok(this instanceof GlobSync$1);
		var n$4 = 0;
		while (typeof pattern[n$4] === "string") n$4++;
		var prefix$1;
		switch (n$4) {
			case pattern.length:
				this._processSimple(pattern.join("/"), index$1);
				return;
			case 0:
				prefix$1 = null;
				break;
			default:
				prefix$1 = pattern.slice(0, n$4).join("/");
				break;
		}
		var remain = pattern.slice(n$4);
		var read$1;
		if (prefix$1 === null) read$1 = ".";
		else if (isAbsolute$2(prefix$1) || isAbsolute$2(pattern.map(function(p$2) {
			return typeof p$2 === "string" ? p$2 : "[*]";
		}).join("/"))) {
			if (!prefix$1 || !isAbsolute$2(prefix$1)) prefix$1 = "/" + prefix$1;
			read$1 = prefix$1;
		} else read$1 = prefix$1;
		var abs = this._makeAbs(read$1);
		if (childrenIgnored$1(this, read$1)) return;
		var isGlobStar = remain[0] === minimatch$1.GLOBSTAR;
		if (isGlobStar) this._processGlobStar(prefix$1, read$1, abs, remain, index$1, inGlobStar);
		else this._processReaddir(prefix$1, read$1, abs, remain, index$1, inGlobStar);
	};
	GlobSync$1.prototype._processReaddir = function(prefix$1, read$1, abs, remain, index$1, inGlobStar) {
		var entries = this._readdir(abs, inGlobStar);
		if (!entries) return;
		var pn = remain[0];
		var negate = !!this.minimatch.negate;
		var rawGlob = pn._glob;
		var dotOk = this.dot || rawGlob.charAt(0) === ".";
		var matchedEntries = [];
		for (var i$6 = 0; i$6 < entries.length; i$6++) {
			var e$2 = entries[i$6];
			if (e$2.charAt(0) !== "." || dotOk) {
				var m$2;
				if (negate && !prefix$1) m$2 = !e$2.match(pn);
				else m$2 = e$2.match(pn);
				if (m$2) matchedEntries.push(e$2);
			}
		}
		var len = matchedEntries.length;
		if (len === 0) return;
		if (remain.length === 1 && !this.mark && !this.stat) {
			if (!this.matches[index$1]) this.matches[index$1] = Object.create(null);
			for (var i$6 = 0; i$6 < len; i$6++) {
				var e$2 = matchedEntries[i$6];
				if (prefix$1) if (prefix$1.slice(-1) !== "/") e$2 = prefix$1 + "/" + e$2;
				else e$2 = prefix$1 + e$2;
				if (e$2.charAt(0) === "/" && !this.nomount) e$2 = path$2.join(this.root, e$2);
				this._emitMatch(index$1, e$2);
			}
			return;
		}
		remain.shift();
		for (var i$6 = 0; i$6 < len; i$6++) {
			var e$2 = matchedEntries[i$6];
			var newPattern;
			if (prefix$1) newPattern = [prefix$1, e$2];
			else newPattern = [e$2];
			this._process(newPattern.concat(remain), index$1, inGlobStar);
		}
	};
	GlobSync$1.prototype._emitMatch = function(index$1, e$2) {
		if (isIgnored$1(this, e$2)) return;
		var abs = this._makeAbs(e$2);
		if (this.mark) e$2 = this._mark(e$2);
		if (this.absolute) e$2 = abs;
		if (this.matches[index$1][e$2]) return;
		if (this.nodir) {
			var c$2 = this.cache[abs];
			if (c$2 === "DIR" || Array.isArray(c$2)) return;
		}
		this.matches[index$1][e$2] = true;
		if (this.stat) this._stat(e$2);
	};
	GlobSync$1.prototype._readdirInGlobStar = function(abs) {
		if (this.follow) return this._readdir(abs, false);
		var entries;
		var lstat;
		var stat$5;
		try {
			lstat = this.fs.lstatSync(abs);
		} catch (er) {
			if (er.code === "ENOENT") return null;
		}
		var isSym = lstat && lstat.isSymbolicLink();
		this.symlinks[abs] = isSym;
		if (!isSym && lstat && !lstat.isDirectory()) this.cache[abs] = "FILE";
		else entries = this._readdir(abs, false);
		return entries;
	};
	GlobSync$1.prototype._readdir = function(abs, inGlobStar) {
		var entries;
		if (inGlobStar && !ownProp$1(this.symlinks, abs)) return this._readdirInGlobStar(abs);
		if (ownProp$1(this.cache, abs)) {
			var c$2 = this.cache[abs];
			if (!c$2 || c$2 === "FILE") return null;
			if (Array.isArray(c$2)) return c$2;
		}
		try {
			return this._readdirEntries(abs, this.fs.readdirSync(abs));
		} catch (er) {
			this._readdirError(abs, er);
			return null;
		}
	};
	GlobSync$1.prototype._readdirEntries = function(abs, entries) {
		if (!this.mark && !this.stat) for (var i$6 = 0; i$6 < entries.length; i$6++) {
			var e$2 = entries[i$6];
			if (abs === "/") e$2 = abs + e$2;
			else e$2 = abs + "/" + e$2;
			this.cache[e$2] = true;
		}
		this.cache[abs] = entries;
		return entries;
	};
	GlobSync$1.prototype._readdirError = function(f$1, er) {
		switch (er.code) {
			case "ENOTSUP":
			case "ENOTDIR":
				var abs = this._makeAbs(f$1);
				this.cache[abs] = "FILE";
				if (abs === this.cwdAbs) {
					var error = new Error(er.code + " invalid cwd " + this.cwd);
					error.path = this.cwd;
					error.code = er.code;
					throw error;
				}
				break;
			case "ENOENT":
			case "ELOOP":
			case "ENAMETOOLONG":
			case "UNKNOWN":
				this.cache[this._makeAbs(f$1)] = false;
				break;
			default:
				this.cache[this._makeAbs(f$1)] = false;
				if (this.strict) throw er;
				if (!this.silent) console.error("glob error", er);
				break;
		}
	};
	GlobSync$1.prototype._processGlobStar = function(prefix$1, read$1, abs, remain, index$1, inGlobStar) {
		var entries = this._readdir(abs, inGlobStar);
		if (!entries) return;
		var remainWithoutGlobStar = remain.slice(1);
		var gspref = prefix$1 ? [prefix$1] : [];
		var noGlobStar = gspref.concat(remainWithoutGlobStar);
		this._process(noGlobStar, index$1, false);
		var len = entries.length;
		var isSym = this.symlinks[abs];
		if (isSym && inGlobStar) return;
		for (var i$6 = 0; i$6 < len; i$6++) {
			var e$2 = entries[i$6];
			if (e$2.charAt(0) === "." && !this.dot) continue;
			var instead = gspref.concat(entries[i$6], remainWithoutGlobStar);
			this._process(instead, index$1, true);
			var below = gspref.concat(entries[i$6], remain);
			this._process(below, index$1, true);
		}
	};
	GlobSync$1.prototype._processSimple = function(prefix$1, index$1) {
		var exists = this._stat(prefix$1);
		if (!this.matches[index$1]) this.matches[index$1] = Object.create(null);
		if (!exists) return;
		if (prefix$1 && isAbsolute$2(prefix$1) && !this.nomount) {
			var trail = /[\/\\]$/.test(prefix$1);
			if (prefix$1.charAt(0) === "/") prefix$1 = path$2.join(this.root, prefix$1);
			else {
				prefix$1 = path$2.resolve(this.root, prefix$1);
				if (trail) prefix$1 += "/";
			}
		}
		if (process.platform === "win32") prefix$1 = prefix$1.replace(/\\/g, "/");
		this._emitMatch(index$1, prefix$1);
	};
	GlobSync$1.prototype._stat = function(f$1) {
		var abs = this._makeAbs(f$1);
		var needDir = f$1.slice(-1) === "/";
		if (f$1.length > this.maxLength) return false;
		if (!this.stat && ownProp$1(this.cache, abs)) {
			var c$2 = this.cache[abs];
			if (Array.isArray(c$2)) c$2 = "DIR";
			if (!needDir || c$2 === "DIR") return c$2;
			if (needDir && c$2 === "FILE") return false;
		}
		var exists;
		var stat$5 = this.statCache[abs];
		if (!stat$5) {
			var lstat;
			try {
				lstat = this.fs.lstatSync(abs);
			} catch (er) {
				if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
					this.statCache[abs] = false;
					return false;
				}
			}
			if (lstat && lstat.isSymbolicLink()) try {
				stat$5 = this.fs.statSync(abs);
			} catch (er) {
				stat$5 = lstat;
			}
			else stat$5 = lstat;
		}
		this.statCache[abs] = stat$5;
		var c$2 = true;
		if (stat$5) c$2 = stat$5.isDirectory() ? "DIR" : "FILE";
		this.cache[abs] = this.cache[abs] || c$2;
		if (needDir && c$2 === "FILE") return false;
		return c$2;
	};
	GlobSync$1.prototype._mark = function(p$2) {
		return common$1.mark(this, p$2);
	};
	GlobSync$1.prototype._makeAbs = function(f$1) {
		return common$1.makeAbs(this, f$1);
	};
} });

//#endregion
//#region node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({ "node_modules/wrappy/wrappy.js"(exports, module) {
	module.exports = wrappy$2;
	function wrappy$2(fn, cb) {
		if (fn && cb) return wrappy$2(fn)(cb);
		if (typeof fn !== "function") throw new TypeError("need wrapper function");
		Object.keys(fn).forEach(function(k$1) {
			wrapper[k$1] = fn[k$1];
		});
		return wrapper;
		function wrapper() {
			var args = new Array(arguments.length);
			for (var i$6 = 0; i$6 < args.length; i$6++) args[i$6] = arguments[i$6];
			var ret$1 = fn.apply(this, args);
			var cb$1 = args[args.length - 1];
			if (typeof ret$1 === "function" && ret$1 !== cb$1) Object.keys(cb$1).forEach(function(k$1) {
				ret$1[k$1] = cb$1[k$1];
			});
			return ret$1;
		}
	}
} });

//#endregion
//#region node_modules/once/once.js
var require_once = __commonJS({ "node_modules/once/once.js"(exports, module) {
	var wrappy$1 = require_wrappy();
	module.exports = wrappy$1(once$2);
	module.exports.strict = wrappy$1(onceStrict);
	once$2.proto = once$2(function() {
		Object.defineProperty(Function.prototype, "once", {
			value: function() {
				return once$2(this);
			},
			configurable: true
		});
		Object.defineProperty(Function.prototype, "onceStrict", {
			value: function() {
				return onceStrict(this);
			},
			configurable: true
		});
	});
	function once$2(fn) {
		var f$1 = function() {
			if (f$1.called) return f$1.value;
			f$1.called = true;
			return f$1.value = fn.apply(this, arguments);
		};
		f$1.called = false;
		return f$1;
	}
	function onceStrict(fn) {
		var f$1 = function() {
			if (f$1.called) throw new Error(f$1.onceError);
			f$1.called = true;
			return f$1.value = fn.apply(this, arguments);
		};
		var name = fn.name || "Function wrapped with `once`";
		f$1.onceError = name + " shouldn't be called more than once";
		f$1.called = false;
		return f$1;
	}
} });

//#endregion
//#region node_modules/inflight/inflight.js
var require_inflight = __commonJS({ "node_modules/inflight/inflight.js"(exports, module) {
	var wrappy = require_wrappy();
	var reqs = Object.create(null);
	var once$1 = require_once();
	module.exports = wrappy(inflight$1);
	function inflight$1(key, cb) {
		if (reqs[key]) {
			reqs[key].push(cb);
			return null;
		} else {
			reqs[key] = [cb];
			return makeres(key);
		}
	}
	function makeres(key) {
		return once$1(function RES() {
			var cbs = reqs[key];
			var len = cbs.length;
			var args = slice(arguments);
			try {
				for (var i$6 = 0; i$6 < len; i$6++) cbs[i$6].apply(null, args);
			} finally {
				if (cbs.length > len) {
					cbs.splice(0, len);
					process.nextTick(function() {
						RES.apply(null, args);
					});
				} else delete reqs[key];
			}
		});
	}
	function slice(args) {
		var length = args.length;
		var array = [];
		for (var i$6 = 0; i$6 < length; i$6++) array[i$6] = args[i$6];
		return array;
	}
} });

//#endregion
//#region node_modules/glob/glob.js
var require_glob = __commonJS({ "node_modules/glob/glob.js"(exports, module) {
	module.exports = glob;
	var rp = require_fs();
	var minimatch = require_minimatch();
	var Minimatch = minimatch.Minimatch;
	var inherits = require_inherits();
	var EE = __require("events").EventEmitter;
	var path$1 = __require("path");
	var assert = __require("assert");
	var isAbsolute$1 = require_path_is_absolute();
	var globSync = require_sync();
	var common = require_common();
	var setopts = common.setopts;
	var ownProp = common.ownProp;
	var inflight = require_inflight();
	var util = __require("util");
	var childrenIgnored = common.childrenIgnored;
	var isIgnored = common.isIgnored;
	var once = require_once();
	function glob(pattern, options, cb) {
		if (typeof options === "function") cb = options, options = {};
		if (!options) options = {};
		if (options.sync) {
			if (cb) throw new TypeError("callback provided to sync glob");
			return globSync(pattern, options);
		}
		return new Glob(pattern, options, cb);
	}
	glob.sync = globSync;
	var GlobSync = glob.GlobSync = globSync.GlobSync;
	glob.glob = glob;
	function extend(origin, add) {
		if (add === null || typeof add !== "object") return origin;
		var keys$1 = Object.keys(add);
		var i$6 = keys$1.length;
		while (i$6--) origin[keys$1[i$6]] = add[keys$1[i$6]];
		return origin;
	}
	glob.hasMagic = function(pattern, options_) {
		var options = extend({}, options_);
		options.noprocess = true;
		var g$1 = new Glob(pattern, options);
		var set = g$1.minimatch.set;
		if (!pattern) return false;
		if (set.length > 1) return true;
		for (var j$1 = 0; j$1 < set[0].length; j$1++) if (typeof set[0][j$1] !== "string") return true;
		return false;
	};
	glob.Glob = Glob;
	inherits(Glob, EE);
	function Glob(pattern, options, cb) {
		if (typeof options === "function") {
			cb = options;
			options = null;
		}
		if (options && options.sync) {
			if (cb) throw new TypeError("callback provided to sync glob");
			return new GlobSync(pattern, options);
		}
		if (!(this instanceof Glob)) return new Glob(pattern, options, cb);
		setopts(this, pattern, options);
		this._didRealPath = false;
		var n$4 = this.minimatch.set.length;
		this.matches = new Array(n$4);
		if (typeof cb === "function") {
			cb = once(cb);
			this.on("error", cb);
			this.on("end", function(matches) {
				cb(null, matches);
			});
		}
		var self$1 = this;
		this._processing = 0;
		this._emitQueue = [];
		this._processQueue = [];
		this.paused = false;
		if (this.noprocess) return this;
		if (n$4 === 0) return done();
		var sync = true;
		for (var i$6 = 0; i$6 < n$4; i$6++) this._process(this.minimatch.set[i$6], i$6, false, done);
		sync = false;
		function done() {
			--self$1._processing;
			if (self$1._processing <= 0) if (sync) process.nextTick(function() {
				self$1._finish();
			});
			else self$1._finish();
		}
	}
	Glob.prototype._finish = function() {
		assert(this instanceof Glob);
		if (this.aborted) return;
		if (this.realpath && !this._didRealpath) return this._realpath();
		common.finish(this);
		this.emit("end", this.found);
	};
	Glob.prototype._realpath = function() {
		if (this._didRealpath) return;
		this._didRealpath = true;
		var n$4 = this.matches.length;
		if (n$4 === 0) return this._finish();
		var self$1 = this;
		for (var i$6 = 0; i$6 < this.matches.length; i$6++) this._realpathSet(i$6, next);
		function next() {
			if (--n$4 === 0) self$1._finish();
		}
	};
	Glob.prototype._realpathSet = function(index$1, cb) {
		var matchset = this.matches[index$1];
		if (!matchset) return cb();
		var found = Object.keys(matchset);
		var self$1 = this;
		var n$4 = found.length;
		if (n$4 === 0) return cb();
		var set = this.matches[index$1] = Object.create(null);
		found.forEach(function(p$2, i$6) {
			p$2 = self$1._makeAbs(p$2);
			rp.realpath(p$2, self$1.realpathCache, function(er, real) {
				if (!er) set[real] = true;
				else if (er.syscall === "stat") set[p$2] = true;
				else self$1.emit("error", er);
				if (--n$4 === 0) {
					self$1.matches[index$1] = set;
					cb();
				}
			});
		});
	};
	Glob.prototype._mark = function(p$2) {
		return common.mark(this, p$2);
	};
	Glob.prototype._makeAbs = function(f$1) {
		return common.makeAbs(this, f$1);
	};
	Glob.prototype.abort = function() {
		this.aborted = true;
		this.emit("abort");
	};
	Glob.prototype.pause = function() {
		if (!this.paused) {
			this.paused = true;
			this.emit("pause");
		}
	};
	Glob.prototype.resume = function() {
		if (this.paused) {
			this.emit("resume");
			this.paused = false;
			if (this._emitQueue.length) {
				var eq = this._emitQueue.slice(0);
				this._emitQueue.length = 0;
				for (var i$6 = 0; i$6 < eq.length; i$6++) {
					var e$2 = eq[i$6];
					this._emitMatch(e$2[0], e$2[1]);
				}
			}
			if (this._processQueue.length) {
				var pq = this._processQueue.slice(0);
				this._processQueue.length = 0;
				for (var i$6 = 0; i$6 < pq.length; i$6++) {
					var p$2 = pq[i$6];
					this._processing--;
					this._process(p$2[0], p$2[1], p$2[2], p$2[3]);
				}
			}
		}
	};
	Glob.prototype._process = function(pattern, index$1, inGlobStar, cb) {
		assert(this instanceof Glob);
		assert(typeof cb === "function");
		if (this.aborted) return;
		this._processing++;
		if (this.paused) {
			this._processQueue.push([
				pattern,
				index$1,
				inGlobStar,
				cb
			]);
			return;
		}
		var n$4 = 0;
		while (typeof pattern[n$4] === "string") n$4++;
		var prefix$1;
		switch (n$4) {
			case pattern.length:
				this._processSimple(pattern.join("/"), index$1, cb);
				return;
			case 0:
				prefix$1 = null;
				break;
			default:
				prefix$1 = pattern.slice(0, n$4).join("/");
				break;
		}
		var remain = pattern.slice(n$4);
		var read$1;
		if (prefix$1 === null) read$1 = ".";
		else if (isAbsolute$1(prefix$1) || isAbsolute$1(pattern.map(function(p$2) {
			return typeof p$2 === "string" ? p$2 : "[*]";
		}).join("/"))) {
			if (!prefix$1 || !isAbsolute$1(prefix$1)) prefix$1 = "/" + prefix$1;
			read$1 = prefix$1;
		} else read$1 = prefix$1;
		var abs = this._makeAbs(read$1);
		if (childrenIgnored(this, read$1)) return cb();
		var isGlobStar = remain[0] === minimatch.GLOBSTAR;
		if (isGlobStar) this._processGlobStar(prefix$1, read$1, abs, remain, index$1, inGlobStar, cb);
		else this._processReaddir(prefix$1, read$1, abs, remain, index$1, inGlobStar, cb);
	};
	Glob.prototype._processReaddir = function(prefix$1, read$1, abs, remain, index$1, inGlobStar, cb) {
		var self$1 = this;
		this._readdir(abs, inGlobStar, function(er, entries) {
			return self$1._processReaddir2(prefix$1, read$1, abs, remain, index$1, inGlobStar, entries, cb);
		});
	};
	Glob.prototype._processReaddir2 = function(prefix$1, read$1, abs, remain, index$1, inGlobStar, entries, cb) {
		if (!entries) return cb();
		var pn = remain[0];
		var negate = !!this.minimatch.negate;
		var rawGlob = pn._glob;
		var dotOk = this.dot || rawGlob.charAt(0) === ".";
		var matchedEntries = [];
		for (var i$6 = 0; i$6 < entries.length; i$6++) {
			var e$2 = entries[i$6];
			if (e$2.charAt(0) !== "." || dotOk) {
				var m$2;
				if (negate && !prefix$1) m$2 = !e$2.match(pn);
				else m$2 = e$2.match(pn);
				if (m$2) matchedEntries.push(e$2);
			}
		}
		var len = matchedEntries.length;
		if (len === 0) return cb();
		if (remain.length === 1 && !this.mark && !this.stat) {
			if (!this.matches[index$1]) this.matches[index$1] = Object.create(null);
			for (var i$6 = 0; i$6 < len; i$6++) {
				var e$2 = matchedEntries[i$6];
				if (prefix$1) if (prefix$1 !== "/") e$2 = prefix$1 + "/" + e$2;
				else e$2 = prefix$1 + e$2;
				if (e$2.charAt(0) === "/" && !this.nomount) e$2 = path$1.join(this.root, e$2);
				this._emitMatch(index$1, e$2);
			}
			return cb();
		}
		remain.shift();
		for (var i$6 = 0; i$6 < len; i$6++) {
			var e$2 = matchedEntries[i$6];
			var newPattern;
			if (prefix$1) if (prefix$1 !== "/") e$2 = prefix$1 + "/" + e$2;
			else e$2 = prefix$1 + e$2;
			this._process([e$2].concat(remain), index$1, inGlobStar, cb);
		}
		cb();
	};
	Glob.prototype._emitMatch = function(index$1, e$2) {
		if (this.aborted) return;
		if (isIgnored(this, e$2)) return;
		if (this.paused) {
			this._emitQueue.push([index$1, e$2]);
			return;
		}
		var abs = isAbsolute$1(e$2) ? e$2 : this._makeAbs(e$2);
		if (this.mark) e$2 = this._mark(e$2);
		if (this.absolute) e$2 = abs;
		if (this.matches[index$1][e$2]) return;
		if (this.nodir) {
			var c$2 = this.cache[abs];
			if (c$2 === "DIR" || Array.isArray(c$2)) return;
		}
		this.matches[index$1][e$2] = true;
		var st = this.statCache[abs];
		if (st) this.emit("stat", e$2, st);
		this.emit("match", e$2);
	};
	Glob.prototype._readdirInGlobStar = function(abs, cb) {
		if (this.aborted) return;
		if (this.follow) return this._readdir(abs, false, cb);
		var lstatkey = "lstat\0" + abs;
		var self$1 = this;
		var lstatcb = inflight(lstatkey, lstatcb_);
		if (lstatcb) self$1.fs.lstat(abs, lstatcb);
		function lstatcb_(er, lstat) {
			if (er && er.code === "ENOENT") return cb();
			var isSym = lstat && lstat.isSymbolicLink();
			self$1.symlinks[abs] = isSym;
			if (!isSym && lstat && !lstat.isDirectory()) {
				self$1.cache[abs] = "FILE";
				cb();
			} else self$1._readdir(abs, false, cb);
		}
	};
	Glob.prototype._readdir = function(abs, inGlobStar, cb) {
		if (this.aborted) return;
		cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
		if (!cb) return;
		if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs, cb);
		if (ownProp(this.cache, abs)) {
			var c$2 = this.cache[abs];
			if (!c$2 || c$2 === "FILE") return cb();
			if (Array.isArray(c$2)) return cb(null, c$2);
		}
		var self$1 = this;
		self$1.fs.readdir(abs, readdirCb(this, abs, cb));
	};
	function readdirCb(self$1, abs, cb) {
		return function(er, entries) {
			if (er) self$1._readdirError(abs, er, cb);
			else self$1._readdirEntries(abs, entries, cb);
		};
	}
	Glob.prototype._readdirEntries = function(abs, entries, cb) {
		if (this.aborted) return;
		if (!this.mark && !this.stat) for (var i$6 = 0; i$6 < entries.length; i$6++) {
			var e$2 = entries[i$6];
			if (abs === "/") e$2 = abs + e$2;
			else e$2 = abs + "/" + e$2;
			this.cache[e$2] = true;
		}
		this.cache[abs] = entries;
		return cb(null, entries);
	};
	Glob.prototype._readdirError = function(f$1, er, cb) {
		if (this.aborted) return;
		switch (er.code) {
			case "ENOTSUP":
			case "ENOTDIR":
				var abs = this._makeAbs(f$1);
				this.cache[abs] = "FILE";
				if (abs === this.cwdAbs) {
					var error = new Error(er.code + " invalid cwd " + this.cwd);
					error.path = this.cwd;
					error.code = er.code;
					this.emit("error", error);
					this.abort();
				}
				break;
			case "ENOENT":
			case "ELOOP":
			case "ENAMETOOLONG":
			case "UNKNOWN":
				this.cache[this._makeAbs(f$1)] = false;
				break;
			default:
				this.cache[this._makeAbs(f$1)] = false;
				if (this.strict) {
					this.emit("error", er);
					this.abort();
				}
				if (!this.silent) console.error("glob error", er);
				break;
		}
		return cb();
	};
	Glob.prototype._processGlobStar = function(prefix$1, read$1, abs, remain, index$1, inGlobStar, cb) {
		var self$1 = this;
		this._readdir(abs, inGlobStar, function(er, entries) {
			self$1._processGlobStar2(prefix$1, read$1, abs, remain, index$1, inGlobStar, entries, cb);
		});
	};
	Glob.prototype._processGlobStar2 = function(prefix$1, read$1, abs, remain, index$1, inGlobStar, entries, cb) {
		if (!entries) return cb();
		var remainWithoutGlobStar = remain.slice(1);
		var gspref = prefix$1 ? [prefix$1] : [];
		var noGlobStar = gspref.concat(remainWithoutGlobStar);
		this._process(noGlobStar, index$1, false, cb);
		var isSym = this.symlinks[abs];
		var len = entries.length;
		if (isSym && inGlobStar) return cb();
		for (var i$6 = 0; i$6 < len; i$6++) {
			var e$2 = entries[i$6];
			if (e$2.charAt(0) === "." && !this.dot) continue;
			var instead = gspref.concat(entries[i$6], remainWithoutGlobStar);
			this._process(instead, index$1, true, cb);
			var below = gspref.concat(entries[i$6], remain);
			this._process(below, index$1, true, cb);
		}
		cb();
	};
	Glob.prototype._processSimple = function(prefix$1, index$1, cb) {
		var self$1 = this;
		this._stat(prefix$1, function(er, exists) {
			self$1._processSimple2(prefix$1, index$1, er, exists, cb);
		});
	};
	Glob.prototype._processSimple2 = function(prefix$1, index$1, er, exists, cb) {
		if (!this.matches[index$1]) this.matches[index$1] = Object.create(null);
		if (!exists) return cb();
		if (prefix$1 && isAbsolute$1(prefix$1) && !this.nomount) {
			var trail = /[\/\\]$/.test(prefix$1);
			if (prefix$1.charAt(0) === "/") prefix$1 = path$1.join(this.root, prefix$1);
			else {
				prefix$1 = path$1.resolve(this.root, prefix$1);
				if (trail) prefix$1 += "/";
			}
		}
		if (process.platform === "win32") prefix$1 = prefix$1.replace(/\\/g, "/");
		this._emitMatch(index$1, prefix$1);
		cb();
	};
	Glob.prototype._stat = function(f$1, cb) {
		var abs = this._makeAbs(f$1);
		var needDir = f$1.slice(-1) === "/";
		if (f$1.length > this.maxLength) return cb();
		if (!this.stat && ownProp(this.cache, abs)) {
			var c$2 = this.cache[abs];
			if (Array.isArray(c$2)) c$2 = "DIR";
			if (!needDir || c$2 === "DIR") return cb(null, c$2);
			if (needDir && c$2 === "FILE") return cb();
		}
		var exists;
		var stat$5 = this.statCache[abs];
		if (stat$5 !== void 0) if (stat$5 === false) return cb(null, stat$5);
		else {
			var type = stat$5.isDirectory() ? "DIR" : "FILE";
			if (needDir && type === "FILE") return cb();
			else return cb(null, type, stat$5);
		}
		var self$1 = this;
		var statcb = inflight("stat\0" + abs, lstatcb_);
		if (statcb) self$1.fs.lstat(abs, statcb);
		function lstatcb_(er, lstat) {
			if (lstat && lstat.isSymbolicLink()) return self$1.fs.stat(abs, function(er$1, stat$6) {
				if (er$1) self$1._stat2(f$1, abs, null, lstat, cb);
				else self$1._stat2(f$1, abs, er$1, stat$6, cb);
			});
			else self$1._stat2(f$1, abs, er, lstat, cb);
		}
	};
	Glob.prototype._stat2 = function(f$1, abs, er, stat$5, cb) {
		if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
			this.statCache[abs] = false;
			return cb();
		}
		var needDir = f$1.slice(-1) === "/";
		this.statCache[abs] = stat$5;
		if (abs.slice(-1) === "/" && stat$5 && !stat$5.isDirectory()) return cb(null, false, stat$5);
		var c$2 = true;
		if (stat$5) c$2 = stat$5.isDirectory() ? "DIR" : "FILE";
		this.cache[abs] = this.cache[abs] || c$2;
		if (needDir && c$2 === "FILE") return cb();
		return cb(null, c$2, stat$5);
	};
} });

//#endregion
//#region node_modules/purgecss/lib/purgecss.js
var require_purgecss = __commonJS({ "node_modules/purgecss/lib/purgecss.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: !0 });
	var e$1 = require_postcss(), t$1 = require_dist$2(), s$1 = __require("fs"), r$1 = __require("util"), i$1 = require_glob(), a = __require("path");
	function n$1(e$2) {
		return e$2 && "object" == typeof e$2 && "default" in e$2 ? e$2 : { default: e$2 };
	}
	function o$1(e$2) {
		if (e$2 && e$2.__esModule) return e$2;
		var t$9 = Object.create(null);
		return e$2 && Object.keys(e$2).forEach(function(s$3) {
			if ("default" !== s$3) {
				var r$2 = Object.getOwnPropertyDescriptor(e$2, s$3);
				Object.defineProperty(t$9, s$3, r$2.get ? r$2 : {
					enumerable: !0,
					get: function() {
						return e$2[s$3];
					}
				});
			}
		}), t$9.default = e$2, Object.freeze(t$9);
	}
	var u$1 = n$1(t$1), c$1 = n$1(i$1), l = n$1(a);
	const d = {
		css: [],
		content: [],
		defaultExtractor: (e$2) => e$2.match(/[A-Za-z0-9_-]+/g) || [],
		extractors: [],
		fontFace: !1,
		keyframes: !1,
		rejected: !1,
		stdin: !1,
		stdout: !1,
		variables: !1,
		safelist: {
			standard: [],
			deep: [],
			greedy: [],
			variables: [],
			keyframes: []
		},
		blocklist: []
	}, f = [
		"*",
		"::-webkit-scrollbar",
		"::selection",
		":root",
		"::before",
		"::after"
	];
	var h = class {
		constructor(e$2) {
			this.nodes = [], this.isUsed = !1, this.value = e$2;
		}
	};
	var p = class {
		constructor() {
			this.nodes = new Map(), this.usedVariables = new Set(), this.safelist = [];
		}
		addVariable(e$2) {
			const { prop: t$9 } = e$2;
			if (!this.nodes.has(t$9)) {
				const s$3 = new h(e$2);
				this.nodes.set(t$9, s$3);
			}
		}
		addVariableUsage(e$2, t$9) {
			const { prop: s$3 } = e$2, r$2 = this.nodes.get(s$3);
			for (const e$3 of t$9) {
				const t$10 = e$3[1];
				if (this.nodes.has(t$10)) {
					const e$4 = this.nodes.get(t$10);
					r$2?.nodes.push(e$4);
				}
			}
		}
		addVariableUsageInProperties(e$2) {
			for (const t$9 of e$2) {
				const e$3 = t$9[1];
				this.usedVariables.add(e$3);
			}
		}
		setAsUsed(e$2) {
			const t$9 = [this.nodes.get(e$2)];
			for (; 0 !== t$9.length;) {
				const e$3 = t$9.pop();
				e$3 && !e$3.isUsed && (e$3.isUsed = !0, t$9.push(...e$3.nodes));
			}
		}
		removeUnused() {
			for (const e$2 of this.usedVariables) this.setAsUsed(e$2);
			for (const [e$2, t$9] of this.nodes) t$9.isUsed || this.isVariablesSafelisted(e$2) || t$9.value.remove();
		}
		isVariablesSafelisted(e$2) {
			return this.safelist.some((t$9) => "string" == typeof t$9 ? t$9 === e$2 : t$9.test(e$2));
		}
	};
	function m(e$2, t$9) {
		t$9 && t$9.forEach(e$2.add, e$2);
	}
	var g = class g {
		constructor(e$2) {
			this.undetermined = new Set(), this.attrNames = new Set(), this.attrValues = new Set(), this.classes = new Set(), this.ids = new Set(), this.tags = new Set(), this.merge(e$2);
		}
		merge(e$2) {
			return Array.isArray(e$2) ? m(this.undetermined, e$2) : e$2 instanceof g ? (m(this.undetermined, e$2.undetermined), m(this.attrNames, e$2.attrNames), m(this.attrValues, e$2.attrValues), m(this.classes, e$2.classes), m(this.ids, e$2.ids), m(this.tags, e$2.tags)) : (m(this.undetermined, e$2.undetermined), e$2.attributes && (m(this.attrNames, e$2.attributes.names), m(this.attrValues, e$2.attributes.values)), m(this.classes, e$2.classes), m(this.ids, e$2.ids), m(this.tags, e$2.tags)), this;
		}
		hasAttrName(e$2) {
			return this.attrNames.has(e$2) || this.undetermined.has(e$2);
		}
		someAttrValue(e$2) {
			for (const t$9 of this.attrValues) if (e$2(t$9)) return !0;
			for (const t$9 of this.undetermined) if (e$2(t$9)) return !0;
			return !1;
		}
		hasAttrPrefix(e$2) {
			return this.someAttrValue((t$9) => t$9.startsWith(e$2));
		}
		hasAttrSuffix(e$2) {
			return this.someAttrValue((t$9) => t$9.endsWith(e$2));
		}
		hasAttrSubstr(e$2) {
			return this.someAttrValue((t$9) => t$9.includes(e$2));
		}
		hasAttrValue(e$2) {
			return this.attrValues.has(e$2) || this.undetermined.has(e$2);
		}
		hasClass(e$2) {
			return this.classes.has(e$2) || this.undetermined.has(e$2);
		}
		hasId(e$2) {
			return this.ids.has(e$2) || this.undetermined.has(e$2);
		}
		hasTag(e$2) {
			return this.tags.has(e$2) || this.undetermined.has(e$2);
		}
	};
	const v = {
		access: r$1.promisify(s$1.access),
		readFile: r$1.promisify(s$1.readFile)
	};
	function y(e$2 = []) {
		return Array.isArray(e$2) ? {
			...d.safelist,
			standard: e$2
		} : {
			...d.safelist,
			...e$2
		};
	}
	async function S(e$2 = "purgecss.config.js") {
		let t$9;
		try {
			const s$3 = l.default.join(process.cwd(), e$2);
			t$9 = await Promise.resolve().then(function() {
				return o$1(__require(s$3));
			});
		} catch (e$3) {
			throw new Error("Error loading the config file " + e$3.message);
		}
		return {
			...d,
			...t$9,
			safelist: y(t$9.safelist)
		};
	}
	async function b(e$2, t$9) {
		return new g(await t$9(e$2));
	}
	function w(e$2, t$9) {
		switch (t$9) {
			case "next": return e$2.text.includes("purgecss ignore");
			case "start": return e$2.text.includes("purgecss start ignore");
			case "end": return e$2.text.includes("purgecss end ignore");
		}
	}
	function x(...e$2) {
		const t$9 = new g([]);
		return e$2.forEach(t$9.merge, t$9), t$9;
	}
	function F(e$2) {
		return e$2.replace(/(^["'])|(["']$)/g, "");
	}
	function A(e$2, t$9) {
		if (!t$9.hasAttrName(e$2.attribute)) return !1;
		if (void 0 === e$2.value) return !0;
		switch (e$2.operator) {
			case "$=": return t$9.hasAttrSuffix(e$2.value);
			case "~=":
			case "*=": return t$9.hasAttrSubstr(e$2.value);
			case "=": return t$9.hasAttrValue(e$2.value);
			case "|=":
			case "^=": return t$9.hasAttrPrefix(e$2.value);
			default: return !0;
		}
	}
	function V(e$2, t$9) {
		return t$9.hasId(e$2.value);
	}
	function k(e$2, t$9) {
		return t$9.hasTag(e$2.value);
	}
	function U(e$2) {
		return "atrule" === (null == e$2 ? void 0 : e$2.type);
	}
	function j(e$2) {
		return "rule" === (null == e$2 ? void 0 : e$2.type);
	}
	var R = class {
		constructor() {
			this.ignore = !1, this.atRules = {
				fontFace: [],
				keyframes: []
			}, this.usedAnimations = new Set(), this.usedFontFaces = new Set(), this.selectorsRemoved = new Set(), this.variablesStructure = new p(), this.options = d;
		}
		collectDeclarationsData(e$2) {
			const { prop: t$9, value: s$3 } = e$2;
			if (this.options.variables) {
				const r$2 = function(e$3, t$10) {
					const s$4 = [];
					return e$3.replace(t$10, function() {
						const t$11 = arguments, r$3 = Array.prototype.slice.call(t$11, 0, -2);
						return r$3.input = t$11[t$11.length - 1], r$3.index = t$11[t$11.length - 2], s$4.push(r$3), e$3;
					}), s$4;
				}(s$3, /var\((.+?)[,)]/g);
				t$9.startsWith("--") ? (this.variablesStructure.addVariable(e$2), r$2.length > 0 && this.variablesStructure.addVariableUsage(e$2, r$2)) : r$2.length > 0 && this.variablesStructure.addVariableUsageInProperties(r$2);
			}
			if (!this.options.keyframes || "animation" !== t$9 && "animation-name" !== t$9) {
				if (this.options.fontFace) {
					if ("font-family" === t$9) for (const e$3 of s$3.split(",")) {
						const t$10 = F(e$3.trim());
						this.usedFontFaces.add(t$10);
					}
				}
			} else for (const e$3 of s$3.split(/[\s,]+/)) this.usedAnimations.add(e$3);
		}
		getFileExtractor(e$2, t$9) {
			const s$3 = t$9.find((t$10) => t$10.extensions.find((t$11) => e$2.endsWith(t$11)));
			return void 0 === s$3 ? this.options.defaultExtractor : s$3.extractor;
		}
		async extractSelectorsFromFiles(e$2, t$9) {
			const r$2 = new g([]);
			for (const i$6 of e$2) {
				let e$3 = [];
				try {
					await v.access(i$6, s$1.constants.F_OK), e$3.push(i$6);
				} catch (t$10) {
					e$3 = c$1.default.sync(i$6, { nodir: !0 });
				}
				for (const s$3 of e$3) {
					const e$4 = await v.readFile(s$3, "utf-8"), i$7 = this.getFileExtractor(s$3, t$9), a$1 = await b(e$4, i$7);
					r$2.merge(a$1);
				}
			}
			return r$2;
		}
		async extractSelectorsFromString(e$2, t$9) {
			const s$3 = new g([]);
			for (const { raw: r$2, extension: i$6 } of e$2) {
				const e$3 = this.getFileExtractor("." + i$6, t$9), a$1 = await b(r$2, e$3);
				s$3.merge(a$1);
			}
			return s$3;
		}
		evaluateAtRule(e$2) {
			if (this.options.keyframes && e$2.name.endsWith("keyframes")) this.atRules.keyframes.push(e$2);
			else if (this.options.fontFace && "font-face" === e$2.name && e$2.nodes) for (const t$9 of e$2.nodes) "decl" === t$9.type && "font-family" === t$9.prop && this.atRules.fontFace.push({
				name: F(t$9.value),
				node: e$2
			});
		}
		async evaluateRule(e$2, t$9) {
			if (this.ignore) return;
			const s$3 = e$2.prev();
			if (function(e$3) {
				return "comment" === (null == e$3 ? void 0 : e$3.type);
			}(s$3) && w(s$3, "next")) return void s$3.remove();
			if (e$2.parent && U(e$2.parent) && "keyframes" === e$2.parent.name) return;
			if (!j(e$2)) return;
			if (function(e$3) {
				let t$10 = !1;
				return e$3.walkComments((e$4) => {
					e$4 && "comment" === e$4.type && e$4.text.includes("purgecss ignore current") && (t$10 = !0, e$4.remove());
				}), t$10;
			}(e$2)) return;
			let r$2 = !0;
			if (e$2.selector = u$1.default((e$3) => {
				e$3.walk((e$4) => {
					"selector" === e$4.type && (r$2 = this.shouldKeepSelector(e$4, t$9), r$2 || (this.options.rejected && this.selectorsRemoved.add(e$4.toString()), e$4.remove()));
				});
			}).processSync(e$2.selector), r$2 && void 0 !== e$2.nodes) for (const t$10 of e$2.nodes) "decl" === t$10.type && this.collectDeclarationsData(t$10);
			const i$6 = e$2.parent;
			e$2.selector || e$2.remove(), function(e$3) {
				return !!(j(e$3) && !e$3.selector || (null == e$3 ? void 0 : e$3.nodes) && !e$3.nodes.length || U(e$3) && (!e$3.nodes && !e$3.params || !e$3.params && e$3.nodes && !e$3.nodes.length));
			}(i$6) && i$6?.remove();
		}
		async getPurgedCSS(t$9, s$3) {
			const r$2 = [], i$6 = [];
			for (const e$2 of t$9) "string" == typeof e$2 ? i$6.push(...c$1.default.sync(e$2, { nodir: !0 })) : i$6.push(e$2);
			for (const t$10 of i$6) {
				const i$7 = "string" == typeof t$10 ? this.options.stdin ? t$10 : await v.readFile(t$10, "utf-8") : t$10.raw, a$1 = e$1.parse(i$7);
				this.walkThroughCSS(a$1, s$3), this.options.fontFace && this.removeUnusedFontFaces(), this.options.keyframes && this.removeUnusedKeyframes(), this.options.variables && this.removeUnusedCSSVariables();
				const n$4 = {
					css: a$1.toString(),
					file: "string" == typeof t$10 ? t$10 : void 0
				};
				"string" == typeof t$10 && (n$4.file = t$10), this.options.rejected && (n$4.rejected = Array.from(this.selectorsRemoved), this.selectorsRemoved.clear()), r$2.push(n$4);
			}
			return r$2;
		}
		isKeyframesSafelisted(e$2) {
			return this.options.safelist.keyframes.some((t$9) => "string" == typeof t$9 ? t$9 === e$2 : t$9.test(e$2));
		}
		isSelectorBlocklisted(e$2) {
			return this.options.blocklist.some((t$9) => "string" == typeof t$9 ? t$9 === e$2 : t$9.test(e$2));
		}
		isSelectorSafelisted(e$2) {
			const t$9 = this.options.safelist.standard.some((t$10) => "string" == typeof t$10 ? t$10 === e$2 : t$10.test(e$2));
			return f.includes(e$2) || t$9;
		}
		isSelectorSafelistedDeep(e$2) {
			return this.options.safelist.deep.some((t$9) => t$9.test(e$2));
		}
		isSelectorSafelistedGreedy(e$2) {
			return this.options.safelist.greedy.some((t$9) => t$9.test(e$2));
		}
		async purge(e$2) {
			this.options = "object" != typeof e$2 ? await S(e$2) : {
				...d,
				...e$2,
				safelist: y(e$2.safelist)
			};
			const { content: t$9, css: s$3, extractors: r$2, safelist: i$6 } = this.options;
			this.options.variables && (this.variablesStructure.safelist = i$6.variables || []);
			const a$1 = t$9.filter((e$3) => "string" == typeof e$3), n$4 = t$9.filter((e$3) => "object" == typeof e$3), o$2 = await this.extractSelectorsFromFiles(a$1, r$2), u$14 = await this.extractSelectorsFromString(n$4, r$2);
			return this.getPurgedCSS(s$3, x(o$2, u$14));
		}
		removeUnusedCSSVariables() {
			this.variablesStructure.removeUnused();
		}
		removeUnusedFontFaces() {
			for (const { name: e$2, node: t$9 } of this.atRules.fontFace) this.usedFontFaces.has(e$2) || t$9.remove();
		}
		removeUnusedKeyframes() {
			for (const e$2 of this.atRules.keyframes) this.usedAnimations.has(e$2.params) || this.isKeyframesSafelisted(e$2.params) || e$2.remove();
		}
		getSelectorValue(e$2) {
			return "attribute" === e$2.type && e$2.attribute || e$2.value;
		}
		shouldKeepSelector(e$2, t$9) {
			if (function(e$3) {
				return e$3.parent && "pseudo" === e$3.parent.type && e$3.parent.value.startsWith(":") || !1;
			}(e$2)) return !0;
			if (this.options.safelist.greedy.length > 0) {
				if (e$2.nodes.map(this.getSelectorValue).some((e$3) => e$3 && this.isSelectorSafelistedGreedy(e$3))) return !0;
			}
			let s$3 = !1;
			for (const i$6 of e$2.nodes) {
				const e$3 = this.getSelectorValue(i$6);
				if (e$3 && this.isSelectorSafelistedDeep(e$3)) return !0;
				if (e$3 && (f.includes(e$3) || this.isSelectorSafelisted(e$3))) s$3 = !0;
				else {
					if (e$3 && this.isSelectorBlocklisted(e$3)) return !1;
					switch (i$6.type) {
						case "attribute":
							s$3 = !![
								"value",
								"checked",
								"selected",
								"open"
							].includes(i$6.attribute) || A(i$6, t$9);
							break;
						case "class":
							r$2 = i$6, s$3 = t$9.hasClass(r$2.value);
							break;
						case "id":
							s$3 = V(i$6, t$9);
							break;
						case "tag":
							s$3 = k(i$6, t$9);
							break;
						default: continue;
					}
					if (!s$3) return !1;
				}
			}
			var r$2;
			return s$3;
		}
		walkThroughCSS(e$2, t$9) {
			e$2.walk((e$3) => "rule" === e$3.type ? this.evaluateRule(e$3, t$9) : "atrule" === e$3.type ? this.evaluateAtRule(e$3) : void ("comment" === e$3.type && (w(e$3, "start") ? (this.ignore = !0, e$3.remove()) : w(e$3, "end") && (this.ignore = !1, e$3.remove()))));
		}
	};
	exports.PurgeCSS = R, exports.default = R, exports.defaultOptions = d, exports.mergeExtractorSelectors = x, exports.setOptions = S, exports.standardizeSafelist = y;
} });

//#endregion
//#region node_modules/@fullhuman/postcss-purgecss/lib/postcss-purgecss.js
var require_postcss_purgecss = __commonJS({ "node_modules/@fullhuman/postcss-purgecss/lib/postcss-purgecss.js"(exports, module) {
	var e = require_postcss(), t = require_purgecss();
	function o(e$2) {
		return e$2 && "object" == typeof e$2 && "default" in e$2 ? e$2 : { default: e$2 };
	}
	var s = o(e), r = o(t);
	async function n(e$2, o$2, { result: s$3 }) {
		const n$4 = new r.default(), c$2 = {
			...t.defaultOptions,
			...e$2,
			safelist: t.standardizeSafelist(null == e$2 ? void 0 : e$2.safelist)
		};
		e$2 && "function" == typeof e$2.contentFunction && (c$2.content = e$2.contentFunction(o$2.source && o$2.source.input.file || "")), n$4.options = c$2;
		const { content: i$6, extractors: u$14 } = c$2, a$1 = i$6.filter((e$3) => "string" == typeof e$3), l$1 = i$6.filter((e$3) => "object" == typeof e$3), p$2 = await n$4.extractSelectorsFromFiles(a$1, u$14), f$1 = await n$4.extractSelectorsFromString(l$1, u$14), d$2 = t.mergeExtractorSelectors(p$2, f$1);
		n$4.walkThroughCSS(o$2, d$2), n$4.options.fontFace && n$4.removeUnusedFontFaces(), n$4.options.keyframes && n$4.removeUnusedKeyframes(), n$4.options.variables && n$4.removeUnusedCSSVariables(), n$4.options.rejected && n$4.selectorsRemoved.size > 0 && (s$3.messages.push({
			type: "purgecss",
			plugin: "postcss-purgecss",
			text: `purging ${n$4.selectorsRemoved.size} selectors:\n          ${Array.from(n$4.selectorsRemoved).map((e$3) => e$3.trim()).join("\n  ")}`
		}), n$4.selectorsRemoved.clear());
	}
	const c = function(e$2) {
		if (void 0 === e$2) throw new Error("PurgeCSS plugin does not have the correct options");
		return {
			postcssPlugin: "postcss-purgecss",
			Once: (t$9, o$2) => n(e$2, t$9, o$2)
		};
	};
	c.postcss = !0;
	var i, u = function(e$2) {
		return void 0 !== e$2.Root;
	}(i = s.default) ? c : i.plugin("postcss-purgecss", (e$2) => {
		if (void 0 === e$2) throw new Error("PurgeCSS plugin does not have the correct options");
		return async function(t$9, o$2) {
			return n(e$2, t$9, o$2);
		};
	});
	module.exports = u;
} });
var import_postcss_purgecss = __toESM(require_postcss_purgecss());

//#endregion
//#region src/index.ts
const generator = (options = {}) => {
	const filter$2 = createFilter(options.include, options.exclude ?? ["**/node_modules/**"]);
	const isVue3UICSS = createFilter([
		"**/node_modules/@pathscale/vue3-ui/**/*.css",
		"**/node_modules/@pathscale/bulma-css-var-only/**/*.css",
		"**/node_modules/@pathscale/bulma-extensions-css-var/**/*.css",
		"**/node_modules/@bulvar/bulma/css/bulma.css"
	]);
	let foundMain = false;
	let fakeBundlePath = "";
	let base$1 = [];
	const whitelist = new Set();
	const plugin$2 = {
		name: "vue3-ui-css-purge",
		buildStart(inputOpts) {
			base$1 = [
				"*",
				"html",
				"head",
				"body",
				"app",
				"div",
				...analyze(inputOpts.input, options.debug ?? false, filter$2, options.alias ?? {})
			].map((b$1) => b$1.replace(/[$()*+.?[\\\]^{|}-]/g, "\\$&"));
			for (const b$1 of base$1) {
				whitelist.add(new RegExp(`^${b$1}$`));
				whitelist.add(new RegExp(`${b$1}\\[.+?\\]`));
			}
			options.debug && console.log(`CSS PURGER - WHITELIST:\n`, inspect(new Set([...base$1]), {
				showHidden: false,
				depth: null,
				maxArrayLength: null
			}));
		},
		async transform(code$1, id$4) {
			if (isVue3UICSS(id$4)) return "";
			if (isMain(code$1) && !foundMain) {
				const newJs = injectFakeBundle(code$1);
				const fakeBundle = await makeVue3UiBundle(id$4);
				foundMain = true;
				fakeBundlePath = `${path.dirname(id$4)}/vue3-ui-bundle.css`;
				await import_lib$3.default.writeFile(fakeBundlePath, fakeBundle);
				return newJs;
			}
			if (!id$4.includes("vue3-ui-bundle.css")) return null;
			/**
			* having as whitelist = ["switch", "input", "check"] will purge the following code anyway
			* .switch input[type=checkbox]+.check { ... }
			*
			* whitelisting all children for switch works, TODO: find the proper way to not nuke this
			* */
			const deepClasses = ["switch"];
			const deep = deepClasses.reduce((acc, cl) => base$1.includes(cl) ? [...acc, new RegExp(cl)] : acc, []);
			const purger = postcss_default((0, import_postcss_purgecss.default)({
				content: [],
				safelist: {
					standard: [...whitelist],
					deep
				},
				keyframes: true
			}));
			const { css } = await purger.process(code$1, { from: id$4 });
			return { code: post_cleaner_default(css) };
		},
		async buildEnd() {
			if (!await import_lib$3.default.pathExists(fakeBundlePath)) this.warn("CSS PURGER - FAKE BUNDLE MISSING (vue3-ui-bundle.css)");
			await import_lib$3.default.remove(fakeBundlePath);
		}
	};
	return plugin$2;
};
var src_default = generator;

//#endregion
export { src_default as default };