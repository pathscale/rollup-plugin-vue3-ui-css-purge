// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic simple: css 1`] = `
"/*!
  * @bulvar/bulma v0.11.23 (https://github.com/daniil4udo/bulvar/tree/master/packages/bulma)
  * Copyright 2025 Daniil Chumachenko daniil4udo@gmail.com
  * Licensed under MIT (https://github.com/daniil4udo/bulvar/blob/master/LICENSE)
  */

:root {











  --weight-normal: 400;


  --weight-bold: 700;



  --radius: 4px;


  --easing: ease-out;
  --speed: 86ms;
  --scheme-main: #fff;



  --scheme-invert-rgb: 10.2, 10.2, 10.2;




  --border: #dbdbdb;




  --invert-dark-color: #0a0a0ab3;



  --invert-light-color: white;



  --text: #4a4a4a;


  --text-strong: #363636;




  --link: hsla(var(--link-h), var(--link-s), var(--link-l), var(--link-a));




  --link-hover: #363636;
  --link-hover-border: #b5b5b5;
  --link-focus: #363636;
  --link-focus-border: var(--link);
  --link-active: #363636;
  --link-active-border: #4a4a4a;
  --family-primary: BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Helvetica, Arial, sans-serif;


  --size-small: .75rem;
  --size-normal: 1rem;

  --size-large: 1.5rem;













  --black-h: 0deg;
  --black-s: 0%;
  --black-l: 4%;
  --black-a: 1;
  --black: hsla(var(--black-h), var(--black-s), var(--black-l), var(--black-a));
  --black-invert: var(--invert-light-color);






























  --primary-h: 163deg;
  --primary-s: 75%;
  --primary-l: 37%;
  --primary-a: 1;
  --primary: hsla(var(--primary-h), var(--primary-s), var(--primary-l), var(--primary-a));
  --primary-invert: var(--invert-light-color);


















  --link-h: 217deg;
  --link-s: 61%;
  --link-l: 40%;
  --link-a: 1;




























  --warning-h: 44deg;
  --warning-s: 100%;
  --warning-l: 77%;
  --warning-a: 1;
  --warning: hsla(var(--warning-h), var(--warning-s), var(--warning-l), var(--warning-a));
  --warning-invert: var(--invert-dark-color);




























}

html, body, h1 {
  margin: 0;
  padding: 0;
}

h1 {
  font-size: 100%;
  font-weight: normal;
}

button {
  margin: 0;
}

html {
  box-sizing: border-box;
}

* {
  box-sizing: inherit;
}

 .button {
  appearance: none;
  border: var(--control-border-width) solid transparent;
  border-radius: var(--control-radius);
  box-shadow: none;
  font-size: var(--size-normal);
  height: var(--control-height);
  line-height: var(--control-line-height);
  padding-bottom: var(--control-padding-vertical);
  padding-left: var(--control-padding-horizontal);
  padding-right: var(--control-padding-horizontal);
  padding-top: var(--control-padding-vertical);
  vertical-align: top;
  justify-content: flex-start;
  align-items: center;
  display: inline-flex;
  position: relative;
}

 .button:focus, .button:active {
  outline: none;
}

 [disabled].button {
  cursor: not-allowed;
}

 .button {
  user-select: none;
  -webkit-touch-callout: none;
}

html {
  background-color: var(--body-background-color);
  font-size: var(--body-font-size);
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  min-width: var(--body-min-width);
  overflow-x: var(--body-overflow-x);
  overflow-y: var(--body-overflow-y);
  text-rendering: var(--body-rendering);
  text-size-adjust: 100%;
}

:root {
  --body-background-color: var(--scheme-main);
  --body-min-width: 300px;
  --body-rendering: optimizeLegibility;
  --body-family: var(--family-primary);
  --body-overflow-x: hidden;
  --body-overflow-y: scroll;
  --body-color: var(--text);
  --body-font-size: 1em;
  --body-weight: var(--weight-normal);
  --body-line-height: 1.5;













}

body, button {
  font-family: var(--body-family);
}

body {
  color: var(--body-color);
  font-size: var(--body-font-size);
  font-weight: var(--body-weight);
  line-height: var(--body-line-height);
}

span {
  font-style: inherit;
  font-weight: inherit;
}

:root {







}

:root {
  --button-color: var(--text-strong);
  --button-background-color: var(--scheme-main);

  --button-font-size: var(--size-normal);
  --button-border-color: var(--border);
  --button-border-width: var(--control-border-width);
  --button-padding-vertical: calc(.5em - var(--button-border-width));
  --button-padding-horizontal: 1em;
  --button-hover-color: var(--link-hover);
  --button-hover-border-color: var(--link-hover-border);
  --button-focus-color: var(--link-focus);
  --button-focus-border-color: var(--link-focus-border);
  --button-focus-box-shadow-size: 0 0 0 .125em;
  --button-focus-box-shadow-color: rgba(var(--scheme-invert-rgb), .25);
  --button-active-color: var(--link-active);
  --button-active-border-color: var(--link-active-border);










  --button-disabled-background-color: var(--scheme-main);
  --button-disabled-border-color: var(--border);
  --button-disabled-shadow: none;
  --button-disabled-opacity: .5;



}

.button {
  background-color: var(--button-background-color);
  transition: color calc(2 * var(--speed)) var(--easing);
  transition: background-color calc(2 * var(--speed)) var(--easing);
  border-color: var(--button-border-color);
  border-width: var(--button-border-width);
  color: var(--button-color);
  cursor: pointer;
  font-size: var(--button-font-size);
  padding-bottom: var(--button-padding-vertical);
  padding-left: var(--button-padding-horizontal);
  padding-right: var(--button-padding-horizontal);
  padding-top: var(--button-padding-vertical);
  text-align: center;
  white-space: nowrap;
  justify-content: center;
}

.button:hover {
  border-color: var(--button-hover-border-color);
  color: var(--button-hover-color);
}

.button:focus {
  border-color: var(--button-focus-border-color);
  color: var(--button-focus-color);
}

.button:focus:not(:active) {
  box-shadow: var(--button-focus-box-shadow-size) var(--button-focus-box-shadow-color);
}

.button:active {
  border-color: var(--button-active-border-color);
  color: var(--button-active-color);
}

.button.is-black {
  background-color: var(--black);
  color: var(--black-invert);
  border-color: #0000;
}

.button.is-black:hover {
  background-color: hsla(var(--black-h), var(--black-s), calc(var(--black-l)  + -2.5%), var(--black-a));
  color: var(--black-invert);
  border-color: #0000;
}

.button.is-black:focus {
  color: var(--black-invert);
  border-color: #0000;
}

.button.is-black:focus:not(:active) {
  box-shadow: var(--button-focus-box-shadow-size) hsla(var(--black-h), var(--black-s), var(--black-l), .25);
}

.button.is-black:active {
  background-color: hsla(var(--black-h), var(--black-s), calc(var(--black-l)  + -5%), var(--black-a));
  color: var(--black-invert);
  border-color: #0000;
}

.button.is-black[disabled] {
  background-color: var(--black);
  border-color: var(--black);
  box-shadow: none;
}

.button.is-black.is-outlined {
  border-color: var(--black);
  color: var(--black);
  background-color: #0000;
}

.button.is-black.is-outlined:hover, .button.is-black.is-outlined:focus {
  background-color: var(--black);
  border-color: var(--black);
  color: var(--black-invert);
}

.button.is-black.is-outlined[disabled] {
  border-color: var(--black);
  box-shadow: none;
  color: var(--black);
  background-color: #0000;
}

.button.is-primary {
  background-color: var(--primary);
  color: var(--primary-invert);
  border-color: #0000;
}

.button.is-primary:hover {
  background-color: hsla(var(--primary-h), var(--primary-s), calc(var(--primary-l)  + -2.5%), var(--primary-a));
  color: var(--primary-invert);
  border-color: #0000;
}

.button.is-primary:focus {
  color: var(--primary-invert);
  border-color: #0000;
}

.button.is-primary:focus:not(:active) {
  box-shadow: var(--button-focus-box-shadow-size) hsla(var(--primary-h), var(--primary-s), var(--primary-l), .25);
}

.button.is-primary:active {
  background-color: hsla(var(--primary-h), var(--primary-s), calc(var(--primary-l)  + -5%), var(--primary-a));
  color: var(--primary-invert);
  border-color: #0000;
}

.button.is-primary[disabled] {
  background-color: var(--primary);
  border-color: var(--primary);
  box-shadow: none;
}

.button.is-primary.is-outlined {
  border-color: var(--primary);
  color: var(--primary);
  background-color: #0000;
}

.button.is-primary.is-outlined:hover, .button.is-primary.is-outlined:focus {
  background-color: var(--primary);
  border-color: var(--primary);
  color: var(--primary-invert);
}

.button.is-primary.is-outlined[disabled] {
  border-color: var(--primary);
  box-shadow: none;
  color: var(--primary);
  background-color: #0000;
}

.button.is-warning {
  background-color: var(--warning);
  color: var(--warning-invert);
  border-color: #0000;
}

.button.is-warning:hover {
  background-color: hsla(var(--warning-h), var(--warning-s), calc(var(--warning-l)  + -2.5%), var(--warning-a));
  color: var(--warning-invert);
  border-color: #0000;
}

.button.is-warning:focus {
  color: var(--warning-invert);
  border-color: #0000;
}

.button.is-warning:focus:not(:active) {
  box-shadow: var(--button-focus-box-shadow-size) hsla(var(--warning-h), var(--warning-s), var(--warning-l), .25);
}

.button.is-warning:active {
  background-color: hsla(var(--warning-h), var(--warning-s), calc(var(--warning-l)  + -5%), var(--warning-a));
  color: var(--warning-invert);
  border-color: #0000;
}

.button.is-warning[disabled] {
  background-color: var(--warning);
  border-color: var(--warning);
  box-shadow: none;
}

.button.is-warning.is-outlined {
  border-color: var(--warning);
  color: var(--warning);
  background-color: #0000;
}

.button.is-warning.is-outlined:hover, .button.is-warning.is-outlined:focus {
  background-color: var(--warning);
  border-color: var(--warning);
  color: var(--warning-invert);
}

.button.is-warning.is-outlined[disabled] {
  border-color: var(--warning);
  box-shadow: none;
  color: var(--warning);
  background-color: #0000;
}

.button.is-large {
  --button-font-size: var(--size-large);
}

.button[disabled] {
  background-color: var(--button-disabled-background-color);
  border-color: var(--button-disabled-border-color);
  box-shadow: var(--button-disabled-shadow);
  opacity: var(--button-disabled-opacity);
}

.button.is-fullwidth {
  width: 100%;
  display: flex;
}

:root {

















}

:root {





}

:root {





}

:root {





}

:root {


















}

:root {







}

:root {

















}

:root {



}

:root {























}

:root {



}

:root {






}

:root {













}

:root {
  --label-size: var(--size-normal);
  --label-color: var(--text-strong);
  --label-weight: var(--weight-bold);
}

.label {
  color: var(--label-color);
  font-size: var(--label-size);
  font-weight: var(--label-weight);
  display: block;
}

.label:not(:last-child) {
  margin-bottom: .5em;
}

.label.is-large {
  --label-size: var(--size-large);
}

:root {
  --help-font-size: var(--size-small);
}

.help {
  font-size: var(--help-font-size);
  margin-top: .25rem;
  display: block;
}

.help.is-black {
  color: var(--black);
}

.help.is-primary {
  color: var(--primary);
}

.help.is-warning {
  color: var(--warning);
}

.field:not(:last-child) {
  margin-bottom: .75rem;
}

.field-label .label {
  font-size: inherit;
}

@media screen and (width <= 768px) {
  .field-label {
    margin-bottom: .5rem;
  }
}

@media screen and (width >= 769px), print {
  .field-label {
    text-align: right;
    flex: 1 0 0;
    margin-right: 1.5rem;
  }

  .field-label.is-large {
    font-size: var(--size-large);
  }

   .field-label.is-large {
    padding-top: .375em;
  }
}

.field-body .field .field {
  margin-bottom: 0;
}

@media screen and (width >= 769px), print {
  .field-body {
    flex: 5 1 0;
    display: flex;
  }

  .field-body .field {
    margin-bottom: 0;
  }

  .field-body > .field {
    flex-shrink: 1;
  }

  .field-body > .field:not(.is-narrow) {
    flex-grow: 1;
  }

  .field-body > .field:not(:last-child) {
    margin-right: .75rem;
  }
}

:root {
  --control-radius: var(--radius);

  --control-border-width: 1px;
  --control-height: 2.5em;
  --control-line-height: 1.5;
  --control-padding-vertical: calc(.5em - var(--control-border-width));
  --control-padding-horizontal: calc(.75em - var(--control-border-width));

}

:root {








}

:root {















}

:root {















}

:root {

}

:root {








}

:root {
















}

:root {
















}

:root {





















}

:root {







































}

:root {























}

:root {























}

:root {

























}

:root {

}

.has-text-centered {
  text-align: center !important;
}

:root {





}

:root {



}

:root {



}

.switch {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.switch {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  position: relative;
  margin-right: 0.5em;
}

.switch + .switch:last-child {
  margin-right: 0;
}

.switch input[type=checkbox] {
  position: absolute;
  left: 0;
  opacity: 0;
  outline: none;
  z-index: -1;
}

.switch input[type=checkbox] + .check {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  width: 2.75em;
  height: 1.575em;
  padding: 0.2em;
  background: #b5b5b5;
  border-radius: 4px;
  transition: background 0.5s ease-out, box-shadow 0.5s ease-out;
}

.switch input[type=checkbox] + .check.is-white-passive, .switch input[type=checkbox] + .check:hover {
  background: white;
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-black-passive, .switch input[type=checkbox] + .check:hover {
  background: #0a0a0a;
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-light-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-white-ter);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-dark-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-grey-darker);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-primary-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-link-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-blue);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-info-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-cyan);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-success-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-green);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-warning-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-yellow);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-danger-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-red);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check:before {
  content: \\"\\";
  display: block;
  border-radius: 4px;
  width: 1.175em;
  height: 1.175em;
  background: var(--blm-white-ter);
  box-shadow: 0 3px 1px 0 rgba(0, 0, 0, 0.05), 0 2px 2px 0 rgba(0, 0, 0, 0.1), 0 3px 3px 0 rgba(0, 0, 0, 0.05);
  transition: transform 0.5s ease-out;
  will-change: transform;
  transform-origin: left;
}

.switch input[type=checkbox] + .check.is-elastic:before {
  transform: scaleX(1.5);
  border-radius: 4px;
}

.switch input[type=checkbox]:checked + .check {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox]:checked + .check.is-white {
  background: white;
}

.switch input[type=checkbox]:checked + .check.is-black {
  background: #0a0a0a;
}

.switch input[type=checkbox]:checked + .check.is-light {
  background: var(--blm-white-ter);
}

.switch input[type=checkbox]:checked + .check.is-dark {
  background: var(--blm-grey-darker);
}

.switch input[type=checkbox]:checked + .check.is-primary {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox]:checked + .check.is-link {
  background: var(--blm-blue);
}

.switch input[type=checkbox]:checked + .check.is-info {
  background: var(--blm-cyan);
}

.switch input[type=checkbox]:checked + .check.is-success {
  background: var(--blm-green);
}

.switch input[type=checkbox]:checked + .check.is-warning {
  background: var(--blm-yellow);
}

.switch input[type=checkbox]:checked + .check.is-danger {
  background: var(--blm-red);
}

.switch input[type=checkbox]:checked + .check:before {
  transform: translate3d(100%, 0, 0);
}

.switch input[type=checkbox]:checked + .check.is-elastic:before {
  transform: translate3d(50%, 0, 0) scaleX(1.5);
}

.switch input[type=checkbox]:focus, .switch input[type=checkbox]:active {
  outline: none;
}

.switch input[type=checkbox]:focus + .check, .switch input[type=checkbox]:active + .check {
  box-shadow: 0 0 0.5em rgba(122, 122, 122, 0.6);
}

.switch input[type=checkbox]:focus + .check.is-white-passive, .switch input[type=checkbox]:active + .check.is-white-passive {
  box-shadow: 0 0 0.4em white, 0.8;
}

.switch input[type=checkbox]:focus + .check.is-black-passive, .switch input[type=checkbox]:active + .check.is-black-passive {
  box-shadow: 0 0 0.4em #0a0a0a, 0.8;
}

.switch input[type=checkbox]:focus + .check.is-light-passive, .switch input[type=checkbox]:active + .check.is-light-passive {
  box-shadow: 0 0 0.4em var(--blm-white-ter), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-dark-passive, .switch input[type=checkbox]:active + .check.is-dark-passive {
  box-shadow: 0 0 0.4em var(--blm-grey-darker), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-primary-passive, .switch input[type=checkbox]:active + .check.is-primary-passive {
  box-shadow: 0 0 0.4em var(--blm-turquoise), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-link-passive, .switch input[type=checkbox]:active + .check.is-link-passive {
  box-shadow: 0 0 0.4em var(--blm-blue), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-info-passive, .switch input[type=checkbox]:active + .check.is-info-passive {
  box-shadow: 0 0 0.4em var(--blm-cyan), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-success-passive, .switch input[type=checkbox]:active + .check.is-success-passive {
  box-shadow: 0 0 0.4em var(--blm-green), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-warning-passive, .switch input[type=checkbox]:active + .check.is-warning-passive {
  box-shadow: 0 0 0.4em var(--blm-yellow), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-danger-passive, .switch input[type=checkbox]:active + .check.is-danger-passive {
  box-shadow: 0 0 0.4em var(--blm-red), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check, .switch input[type=checkbox]:active:checked + .check {
  box-shadow: 0 0 0.4em var(--blm-turquoise);
}

.switch input[type=checkbox]:focus:checked + .check.is-white, .switch input[type=checkbox]:active:checked + .check.is-white {
  box-shadow: 0 0 0.4em white, 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-black, .switch input[type=checkbox]:active:checked + .check.is-black {
  box-shadow: 0 0 0.4em #0a0a0a, 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-light, .switch input[type=checkbox]:active:checked + .check.is-light {
  box-shadow: 0 0 0.4em var(--blm-white-ter), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-dark, .switch input[type=checkbox]:active:checked + .check.is-dark {
  box-shadow: 0 0 0.4em var(--blm-grey-darker), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-primary, .switch input[type=checkbox]:active:checked + .check.is-primary {
  box-shadow: 0 0 0.4em var(--blm-turquoise), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-link, .switch input[type=checkbox]:active:checked + .check.is-link {
  box-shadow: 0 0 0.4em var(--blm-blue), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-info, .switch input[type=checkbox]:active:checked + .check.is-info {
  box-shadow: 0 0 0.4em var(--blm-cyan), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-success, .switch input[type=checkbox]:active:checked + .check.is-success {
  box-shadow: 0 0 0.4em var(--blm-green), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-warning, .switch input[type=checkbox]:active:checked + .check.is-warning {
  box-shadow: 0 0 0.4em var(--blm-yellow), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-danger, .switch input[type=checkbox]:active:checked + .check.is-danger {
  box-shadow: 0 0 0.4em var(--blm-red), 0.8;
}

.switch .control-label {
  padding-left: 0.5em;
}

.switch:hover input[type=checkbox] + .check {
  background: rgba(181, 181, 181, 0.9);
}

.switch:hover input[type=checkbox] + .check.is-white-passive {
  background: white;
}

.switch:hover input[type=checkbox] + .check.is-black-passive {
  background: #0a0a0a;
}

.switch:hover input[type=checkbox] + .check.is-light-passive {
  background: var(--blm-white-ter);
}

.switch:hover input[type=checkbox] + .check.is-dark-passive {
  background: var(--blm-grey-darker);
}

.switch:hover input[type=checkbox] + .check.is-primary-passive {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox] + .check.is-link-passive {
  background: var(--blm-blue);
}

.switch:hover input[type=checkbox] + .check.is-info-passive {
  background: var(--blm-cyan);
}

.switch:hover input[type=checkbox] + .check.is-success-passive {
  background: var(--blm-green);
}

.switch:hover input[type=checkbox] + .check.is-warning-passive {
  background: var(--blm-yellow);
}

.switch:hover input[type=checkbox] + .check.is-danger-passive {
  background: var(--blm-red);
}

.switch:hover input[type=checkbox]:checked + .check {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox]:checked + .check.is-white {
  background: white;
}

.switch:hover input[type=checkbox]:checked + .check.is-black {
  background: #0a0a0a;
}

.switch:hover input[type=checkbox]:checked + .check.is-light {
  background: var(--blm-white-ter);
}

.switch:hover input[type=checkbox]:checked + .check.is-dark {
  background: var(--blm-grey-darker);
}

.switch:hover input[type=checkbox]:checked + .check.is-primary {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox]:checked + .check.is-link {
  background: var(--blm-blue);
}

.switch:hover input[type=checkbox]:checked + .check.is-info {
  background: var(--blm-cyan);
}

.switch:hover input[type=checkbox]:checked + .check.is-success {
  background: var(--blm-green);
}

.switch:hover input[type=checkbox]:checked + .check.is-warning {
  background: var(--blm-yellow);
}

.switch:hover input[type=checkbox]:checked + .check.is-danger {
  background: var(--blm-red);
}

.switch.is-rounded input[type=checkbox] + .check {
  border-radius: 290486px;
}

.switch.is-rounded input[type=checkbox] + .check:before {
  border-radius: 290486px;
}

.switch.is-rounded input[type=checkbox].is-elastic:before {
  transform: scaleX(1.5);
  border-radius: 290486px;
}

.switch.is-outlined input[type=checkbox] + .check {
  background: transparent;
  border: 0.1rem solid #b5b5b5;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive {
  border: 0.1rem solid white;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive:before {
  background: white;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive:hover {
  border-color: white;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive {
  border: 0.1rem solid #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive:before {
  background: #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive:hover {
  border-color: #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive {
  border: 0.1rem solid var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive:before {
  background: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive:hover {
  border-color: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive {
  border: 0.1rem solid var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive:before {
  background: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive:hover {
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive {
  border: 0.1rem solid var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive:hover {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive {
  border: 0.1rem solid var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive:before {
  background: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive:hover {
  border-color: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive {
  border: 0.1rem solid var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive:before {
  background: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive:hover {
  border-color: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive {
  border: 0.1rem solid var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive:before {
  background: var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive:hover {
  border-color: var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive {
  border: 0.1rem solid var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive:before {
  background: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive:hover {
  border-color: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive {
  border: 0.1rem solid var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive:before {
  background: var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive:hover {
  border-color: var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check:before {
  background: #b5b5b5;
}

.switch.is-outlined input[type=checkbox]:checked + .check {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-white {
  background: transparent;
  border-color: white;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-white:before {
  background: white;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-black {
  background: transparent;
  border-color: #0a0a0a;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-black:before {
  background: #0a0a0a;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-light {
  background: transparent;
  border-color: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-light:before {
  background: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-dark {
  background: transparent;
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-dark:before {
  background: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-primary {
  background: transparent;
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-primary:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-link {
  background: transparent;
  border-color: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-link:before {
  background: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-info {
  background: transparent;
  border-color: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-info:before {
  background: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-success {
  background: transparent;
  border-color: var(--blm-green);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-success:before {
  background: var(--blm-green);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-warning {
  background: transparent;
  border-color: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-warning:before {
  background: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-danger {
  background: transparent;
  border-color: var(--blm-red);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-danger:before {
  background: var(--blm-red);
}

.switch.is-outlined input[type=checkbox]:checked + .check:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox] + .check {
  background: transparent;
  border-color: rgba(181, 181, 181, 0.9);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check {
  background: transparent;
  border-color: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-white {
  border-color: white;
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-black {
  border-color: #0a0a0a;
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-light {
  border-color: var(--blm-white-ter);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-dark {
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-primary {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-link {
  border-color: var(--blm-blue);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-info {
  border-color: var(--blm-cyan);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-success {
  border-color: var(--blm-green);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-warning {
  border-color: var(--blm-yellow);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-danger {
  border-color: var(--blm-red);
}

.switch.is-small {
  border-radius: 2px;
  font-size: var(--blm-s-7);
}

.switch.is-medium {
  font-size: var(--blm-s-5);
}

.switch.is-large {
  font-size: var(--blm-s-4);
}

.switch[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
  color: #7a7a7a;
}"
`;

exports[`basic simple: js 1`] = `
"import { reactive, computed, onMounted, watchEffect, resolveComponent, openBlock, createBlock, createVNode, withCtx, createTextVNode, toDisplayString, createApp } from 'vue';
import { VField, VButton, VSwitch } from '@pathscale/vue3-ui';

var script$1 = {
  components: { VField, VButton, VSwitch },
  emits: [\\"login\\"],
  setup(props, { emit }) {
    const state = reactive({ email: \\"\\", password: \\"\\", remember: false });
    const status = reactive({ email: \\"valid\\", password: \\"valid\\" });

    const isValid = computed(() => status.email === \\"valid\\" && status.password === \\"valid\\");

    onMounted(() => {
      emit(\\"whatever\\");
    });

    const sendLogin = () => {
      if (isValid.value) emit(\\"login\\", state);
    };

    watchEffect(() => {
      status.email = state.email.length > 2 ? \\"valid\\" : \\"error\\";
      status.password = state.password.length > 2 ? \\"valid\\" : \\"error\\";
    });

    return { state, status, sendLogin, isValid };
  },
};

const _hoisted_1$1 = /*#__PURE__*/createTextVNode(\\" Remember me \\");
const _hoisted_2$1 = /*#__PURE__*/createTextVNode(\\"Login\\");

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VSwitch = resolveComponent(\\"VSwitch\\");
  const _component_v_field = resolveComponent(\\"v-field\\");
  const _component_VButton = resolveComponent(\\"VButton\\");
  const _component_VField = resolveComponent(\\"VField\\");

  return (openBlock(), createBlock(\\"form\\", null, [
    createVNode(_component_v_field, { \\"group-multiline\\": \\"\\" }, {
      default: withCtx(() => [
        createVNode(_component_VSwitch, {
          type: \\"is-outlined\\",
          \\"passive-type\\": \\"is-warning\\",
          modelValue: $setup.state.remember,
          \\"onUpdate:modelValue\\": _cache[1] || (_cache[1] = $event => ($setup.state.remember = $event))
        }, {
          default: withCtx(() => [
            _hoisted_1$1
          ]),
          _: 1 /* STABLE */
        }, 8 /* PROPS */, [\\"modelValue\\"])
      ]),
      _: 1 /* STABLE */
    }),
    createVNode(_component_VField, null, {
      default: withCtx(() => [
        createVNode(_component_VButton, {
          expanded: \\"\\",
          type: \\"is-black\\",
          size: \\"is-large\\",
          class: \\"is-100 has-text-centered\\",
          onClick: $setup.sendLogin,
          disabled: !$setup.isValid
        }, {
          default: withCtx(() => [
            _hoisted_2$1
          ]),
          _: 1 /* STABLE */
        }, 8 /* PROPS */, [\\"onClick\\", \\"disabled\\"])
      ]),
      _: 1 /* STABLE */
    })
  ]))
}

script$1.render = render$1;
script$1.__file = \\"__tests__/fixtures/simple/Dummy.vue\\";

var script = {
  components: { Dummy: script$1 },
  props: { name: { type: String, default: \\"John\\" } },
};

const _hoisted_1 = /*#__PURE__*/createTextVNode(\\" Hello \\");
const _hoisted_2 = { class: \\"name\\" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Dummy = resolveComponent(\\"Dummy\\");

  return (openBlock(), createBlock(\\"h1\\", null, [
    _hoisted_1,
    createVNode(\\"span\\", _hoisted_2, toDisplayString($props.name), 1 /* TEXT */),
    createVNode(_component_Dummy)
  ]))
}

script.render = render;
script.__file = \\"__tests__/fixtures/simple/Test.vue\\";

createApp(script).mount(document.body);
"
`;
