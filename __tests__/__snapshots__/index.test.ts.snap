// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic simple: css 1`] = `
"
/*! bulma.io v0.9.0 | MIT License | github.com/jgthms/bulma */

.button {
  -moz-appearance: none;
  -webkit-appearance: none;
  align-items: center;
  border: var(--blm-ctrl-bd-width) solid transparent;
  border-radius: var(--blm-ctrl-radius);
  box-shadow: none;
  display: inline-flex;
  font-size: var(--blm-s-normal);
  height: var(--blm-ctrl-height);
  justify-content: flex-start;
  line-height: var(--blm-ctrl-line-height);
  padding: var(--blm-ctrl-p-vertical) var(--blm-ctrl-p-horizontal);
  position: relative;
  vertical-align: top;
}

.button:focus, .button:active {
  outline: none;
}

 .button {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */
html,
body,
h1 {
  margin: 0;
  padding: 0;
}

h1 {
  font-size: 100%;
  font-weight: normal;
}

button {
  margin: 0;
}

html {
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

html {
  background-color: var(--blm-sch-main);
  font-size: 16px;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  min-width: 300px;
  overflow-x: hidden;
  overflow-y: scroll;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
     -moz-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%;
}

button,
body {
  font-family: var(--blm-family-prim);
}

body {
  color: var(--blm-txt);
  font-size: 1em;
  font-weight: var(--blm-weight-normal);
  line-height: 1.5;
}

span {
  font-style: inherit;
  font-weight: inherit;
}

.button {
  background-color: var(--blm-bt-bg-clr);
  border-color: var(--blm-bt-bd-clr);
  border-width: var(--blm-bt-bd-width);
  color: var(--blm-bt-clr);
  cursor: pointer;
  font-family: var(--blm-bt-family);
  justify-content: center;
  padding: var(--blm-bt-p-vertical) var(--blm-bt-p-horizontal);
  text-align: center;
  white-space: nowrap;
}

.button:hover {
  border-color: var(--blm-bt-hov-bd-clr);
  color: var(--blm-bt-hov-clr);
}

.button:focus {
  border-color: var(--blm-bt-foc-bd-clr);
  color: var(--blm-bt-foc-clr);
}

.button:focus:not(:active) {
  box-shadow: var(--blm-bt-foc-box-shadow-s) var(--blm-bt-foc-box-shadow-clr);
}

.button:active {
  border-color: var(--blm-bt-act-bd-clr);
  color: var(--blm-bt-act-clr);
}

.button.is-black {
  background-color: var(--blm-black);
  border-color: transparent;
  color: var(--blm-black-inv);
}

.button.is-black:hover {
  background-color: hsla(var(--blm-black-h), var(--blm-black-s), calc(var(--blm-black-l) - 2.5%), var(--blm-black-a));
  border-color: transparent;
  color: var(--blm-black-inv);
}

.button.is-black:focus {
  border-color: transparent;
  color: var(--blm-black-inv);
}

.button.is-black:focus:not(:active) {
  box-shadow: var(--blm-bt-foc-box-shadow-s) hsla(var(--blm-black-h), var(--blm-black-s), var(--blm-black-l), 0.25);
}

.button.is-black:active {
  background-color: hsla(var(--blm-black-h), var(--blm-black-s), calc(var(--blm-black-l) - 5%), var(--blm-black-a));
  border-color: transparent;
  color: var(--blm-black-inv);
}

.button.is-black.is-outlined {
  background-color: transparent;
  border-color: var(--blm-black);
  color: var(--blm-black);
}

.button.is-black.is-outlined:hover, .button.is-black.is-outlined:focus {
  background-color: var(--blm-black);
  border-color: var(--blm-black);
  color: var(--blm-black-inv);
}

.button.is-warning {
  background-color: var(--blm-warn);
  border-color: transparent;
  color: var(--blm-warn-inv);
}

.button.is-warning:hover {
  background-color: hsla(var(--blm-warn-h), var(--blm-warn-s), calc(var(--blm-warn-l) - 2.5%), var(--blm-warn-a));
  border-color: transparent;
  color: var(--blm-warn-inv);
}

.button.is-warning:focus {
  border-color: transparent;
  color: var(--blm-warn-inv);
}

.button.is-warning:focus:not(:active) {
  box-shadow: var(--blm-bt-foc-box-shadow-s) hsla(var(--blm-warn-h), var(--blm-warn-s), var(--blm-warn-l), 0.25);
}

.button.is-warning:active {
  background-color: hsla(var(--blm-warn-h), var(--blm-warn-s), calc(var(--blm-warn-l) - 5%), var(--blm-warn-a));
  border-color: transparent;
  color: var(--blm-warn-inv);
}

.button.is-warning.is-outlined {
  background-color: transparent;
  border-color: var(--blm-warn);
  color: var(--blm-warn);
}

.button.is-warning.is-outlined:hover, .button.is-warning.is-outlined:focus {
  background-color: var(--blm-warn);
  border-color: var(--blm-warn);
  color: var(--blm-warn-inv);
}

.button.is-large {
  font-size: var(--blm-s-lg);
}

.button.is-fullwidth {
  display: flex;
  width: 100%;
}

.label {
  color: var(--blm-label-clr);
  display: block;
  font-size: var(--blm-s-normal);
  font-weight: var(--blm-label-weight);
}

.label:not(:last-child) {
  margin-bottom: 0.5em;
}

.label.is-large {
  font-size: var(--blm-s-lg);
}

.help {
  display: block;
  font-size: var(--blm-help-s);
  margin-top: 0.25rem;
}

.help.is-black {
  color: var(--blm-black);
}

.help.is-warning {
  color: var(--blm-warn);
}

.field:not(:last-child) {
  margin-bottom: 0.75rem;
}

.field-label .label {
  font-size: inherit;
}

@media screen and (max-width: 768px) {
  .field-label {
    margin-bottom: 0.5rem;
  }
}

@media screen and (min-width: 769px), print {
  .field-label {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
    margin-right: 1.5rem;
    text-align: right;
  }
  .field-label.is-large {
    font-size: var(--blm-s-lg);
    padding-top: 0.375em;
  }
}

.field-body .field .field {
  margin-bottom: 0;
}

@media screen and (min-width: 769px), print {
  .field-body {
    display: flex;
    flex-basis: 0;
    flex-grow: 5;
    flex-shrink: 1;
  }
  .field-body .field {
    margin-bottom: 0;
  }
  .field-body > .field {
    flex-shrink: 1;
  }
  .field-body > .field:not(.is-narrow) {
    flex-grow: 1;
  }
  .field-body > .field:not(:last-child) {
    margin-right: 0.75rem;
  }
}

.has-text-centered {
  text-align: center !important;
}

 :root {
  --blm-turquoise-h: 171;
  --blm-turquoise-s: 100%;
  --blm-turquoise-l: 41%;
  --blm-turquoise-a: 1;
  --blm-turquoise: hsla(var(--blm-turquoise-h), var(--blm-turquoise-s), var(--blm-turquoise-l), var(--blm-turquoise-a));
  --blm-cyan-h: 204;
  --blm-cyan-s: 71%;
  --blm-cyan-l: 53%;
  --blm-cyan-a: 1;
  --blm-cyan: hsla(var(--blm-cyan-h), var(--blm-cyan-s), var(--blm-cyan-l), var(--blm-cyan-a));
  --blm-green-h: 141;
  --blm-green-s: 53%;
  --blm-green-l: 53%;
  --blm-green-a: 1;
  --blm-green: hsla(var(--blm-green-h), var(--blm-green-s), var(--blm-green-l), var(--blm-green-a));
  --blm-yellow-h: 48;
  --blm-yellow-s: 100%;
  --blm-yellow-l: 67%;
  --blm-yellow-a: 1;
  --blm-yellow: hsla(var(--blm-yellow-h), var(--blm-yellow-s), var(--blm-yellow-l), var(--blm-yellow-a));
  --blm-red-h: 348;
  --blm-red-s: 86%;
  --blm-red-l: 61%;
  --blm-red-a: 1;
  --blm-red: hsla(var(--blm-red-h), var(--blm-red-s), var(--blm-red-l), var(--blm-red-a));
  --blm-white-ter-h: 0;
  --blm-white-ter-s: 0%;
  --blm-white-ter-l: 96%;
  --blm-white-ter-a: 1;
  --blm-white-ter: hsla(var(--blm-white-ter-h), var(--blm-white-ter-s), var(--blm-white-ter-l), var(--blm-white-ter-a));
  --blm-grey-darker-h: 0;
  --blm-grey-darker-s: 0%;
  --blm-grey-darker-l: 21%;
  --blm-grey-darker-a: 1;
  --blm-grey-darker: hsla(var(--blm-grey-darker-h), var(--blm-grey-darker-s), var(--blm-grey-darker-l), var(--blm-grey-darker-a));





  --blm-blue-h: 217;
  --blm-blue-s: 71%;
  --blm-blue-l: 53%;
  --blm-blue-a: 1;
  --blm-blue: hsla(var(--blm-blue-h), var(--blm-blue-s), var(--blm-blue-l), var(--blm-blue-a));




















  --blm-warn-h: var(--blm-yellow-h);
  --blm-warn-s: var(--blm-yellow-s);
  --blm-warn-l: var(--blm-yellow-l);
  --blm-warn-a: var(--blm-yellow-a);
  --blm-warn: hsla(var(--blm-warn-h), var(--blm-warn-s), var(--blm-warn-l), var(--blm-warn-a));















  --blm-black-h: 0;
  --blm-black-s: 0%;
  --blm-black-l: 4%;
  --blm-black-a: 1;
  --blm-black: hsla(var(--blm-black-h), var(--blm-black-s), var(--blm-black-l), var(--blm-black-a));
  --blm-white-h: 0;
  --blm-white-s: 0%;
  --blm-white-l: 100%;
  --blm-white-a: 1;
















  --blm-grey-lighter-h: 0;
  --blm-grey-lighter-s: 0%;
  --blm-grey-lighter-l: 86%;
  --blm-grey-lighter-a: 1;

  --blm-grey-light-h: 0;
  --blm-grey-light-s: 0%;
  --blm-grey-light-l: 71%;
  --blm-grey-light-a: 1;






  --blm-grey-dark-s: 0%;
  --blm-grey-dark-l: 29%;
  --blm-grey-dark-h: 0;
  --blm-grey-dark-a: 1;

  --blm-txt-h: var(--blm-grey-dark-h);
  --blm-txt-s: var(--blm-grey-dark-s);
  --blm-txt-l: var(--blm-grey-dark-l);
  --blm-txt-a: var(--blm-grey-dark-a);
  --blm-txt: hsla(var(--blm-txt-h), var(--blm-txt-s), var(--blm-txt-l), var(--blm-txt-a));










  --blm-link-h: var(--blm-blue-h);
  --blm-link-s: var(--blm-blue-s);
  --blm-link-l: var(--blm-blue-l);


  --blm-family-sans-serif: BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Helvetica, Arial, sans-serif;

  --blm-s-7: 0.75rem;
  --blm-s-6: 1rem;
  --blm-s-5: 1.25rem;
  --blm-s-4: 1.5rem;



  --blm-radius: 4px;

  --blm-ctrl-bd-width: 1px;
  --blm-ctrl-radius: var(--blm-radius);
  --blm-s-normal: var(--blm-s-6);
  --blm-ctrl-height: 2.5em;
  --blm-ctrl-line-height: 1.5;
  --blm-ctrl-p-vertical: calc(0.5em - var(--blm-ctrl-bd-width));
  --blm-ctrl-p-horizontal: calc(0.75em - var(--blm-ctrl-bd-width));






  --blm-sch-main-h: var(--blm-white-h);
  --blm-sch-main-s: var(--blm-white-s);
  --blm-sch-main-l: var(--blm-white-l);
  --blm-sch-main-a: var(--blm-white-a);
  --blm-sch-main: hsla(var(--blm-sch-main-h), var(--blm-sch-main-s), var(--blm-sch-main-l), var(--blm-sch-main-a));
  --blm-family-prim: var(--blm-family-sans-serif);
  --blm-weight-normal: 400;

  --blm-txt-strong-h: var(--blm-grey-darker-h);
  --blm-txt-strong-s: var(--blm-grey-darker-s);
  --blm-txt-strong-l: var(--blm-grey-darker-l);
  --blm-txt-strong-a: var(--blm-grey-darker-a);

  --blm-weight-bold: 700;
















  --blm-bd-h: var(--blm-grey-lighter-h);
  --blm-bd-s: var(--blm-grey-lighter-s);
  --blm-bd-l: var(--blm-grey-lighter-l);
  --blm-bd-a: var(--blm-grey-lighter-a);

  --blm-bt-bd-width: var(--blm-ctrl-bd-width);
  --blm-link-hov-h: var(--blm-grey-darker-h);
  --blm-link-hov-s: var(--blm-grey-darker-s);
  --blm-link-hov-l: var(--blm-grey-darker-l);
  --blm-link-hov-a: var(--blm-grey-darker-a);

  --blm-link-hov-bd-h: var(--blm-grey-light-h);
  --blm-link-hov-bd-s: var(--blm-grey-light-s);
  --blm-link-hov-bd-l: var(--blm-grey-light-l);
  --blm-link-hov-bd-a: var(--blm-grey-light-a);

  --blm-link-foc-h: var(--blm-grey-darker-h);
  --blm-link-foc-s: var(--blm-grey-darker-s);
  --blm-link-foc-l: var(--blm-grey-darker-l);
  --blm-link-foc-a: var(--blm-grey-darker-a);

  --blm-link-foc-bd-h: var(--blm-blue-h);
  --blm-link-foc-bd-s: var(--blm-blue-s);
  --blm-link-foc-bd-l: var(--blm-blue-l);
  --blm-link-foc-bd-a: var(--blm-blue-a);

  --blm-link-act-h: var(--blm-grey-darker-h);
  --blm-link-act-s: var(--blm-grey-darker-s);
  --blm-link-act-l: var(--blm-grey-darker-l);
  --blm-link-act-a: var(--blm-grey-darker-a);

  --blm-link-act-bd-h: var(--blm-grey-dark-h);
  --blm-link-act-bd-s: var(--blm-grey-dark-s);
  --blm-link-act-bd-l: var(--blm-grey-dark-l);
  --blm-link-act-bd-a: var(--blm-grey-dark-a);











  --blm-bt-bg-clr-h: var(--blm-sch-main-h);
  --blm-bt-bg-clr-s: var(--blm-sch-main-s);
  --blm-bt-bg-clr-l: var(--blm-sch-main-l);
  --blm-bt-bg-clr-a: var(--blm-sch-main-a);
  --blm-bt-bg-clr: hsla(var(--blm-bt-bg-clr-h), var(--blm-bt-bg-clr-s), var(--blm-bt-bg-clr-l), var(--blm-bt-bg-clr-a));
  --blm-bt-bd-clr-h: var(--blm-bd-h);
  --blm-bt-bd-clr-s: var(--blm-bd-s);
  --blm-bt-bd-clr-l: var(--blm-bd-l);
  --blm-bt-bd-clr-a: var(--blm-bd-a);
  --blm-bt-bd-clr: hsla(var(--blm-bt-bd-clr-h), var(--blm-bt-bd-clr-s), var(--blm-bt-bd-clr-l), var(--blm-bt-bd-clr-a));
  --blm-bt-clr-h: var(--blm-txt-strong-h);
  --blm-bt-clr-s: var(--blm-txt-strong-s);
  --blm-bt-clr-l: var(--blm-txt-strong-l);
  --blm-bt-clr-a: var(--blm-txt-strong-a);
  --blm-bt-clr: hsla(var(--blm-bt-clr-h), var(--blm-bt-clr-s), var(--blm-bt-clr-l), var(--blm-bt-clr-a));
  --blm-bt-family: inherit;
  --blm-bt-p-vertical: calc(0.5em - var(--blm-bt-bd-width));
  --blm-bt-p-horizontal: 1em;
  --blm-bt-hov-bd-clr-h: var(--blm-link-hov-bd-h);
  --blm-bt-hov-bd-clr-s: var(--blm-link-hov-bd-s);
  --blm-bt-hov-bd-clr-l: var(--blm-link-hov-bd-l);
  --blm-bt-hov-bd-clr-a: var(--blm-link-hov-bd-a);
  --blm-bt-hov-bd-clr: hsla(var(--blm-bt-hov-bd-clr-h), var(--blm-bt-hov-bd-clr-s), var(--blm-bt-hov-bd-clr-l), var(--blm-bt-hov-bd-clr-a));
  --blm-bt-hov-clr-h: var(--blm-link-hov-h);
  --blm-bt-hov-clr-s: var(--blm-link-hov-s);
  --blm-bt-hov-clr-l: var(--blm-link-hov-l);
  --blm-bt-hov-clr-a: var(--blm-link-hov-a);
  --blm-bt-hov-clr: hsla(var(--blm-bt-hov-clr-h), var(--blm-bt-hov-clr-s), var(--blm-bt-hov-clr-l), var(--blm-bt-hov-clr-a));
  --blm-bt-foc-bd-clr-h: var(--blm-link-foc-bd-h);
  --blm-bt-foc-bd-clr-s: var(--blm-link-foc-bd-s);
  --blm-bt-foc-bd-clr-l: var(--blm-link-foc-bd-l);
  --blm-bt-foc-bd-clr-a: var(--blm-link-foc-bd-a);
  --blm-bt-foc-bd-clr: hsla(var(--blm-bt-foc-bd-clr-h), var(--blm-bt-foc-bd-clr-s), var(--blm-bt-foc-bd-clr-l), var(--blm-bt-foc-bd-clr-a));
  --blm-bt-foc-clr-h: var(--blm-link-foc-h);
  --blm-bt-foc-clr-s: var(--blm-link-foc-s);
  --blm-bt-foc-clr-l: var(--blm-link-foc-l);
  --blm-bt-foc-clr-a: var(--blm-link-foc-a);
  --blm-bt-foc-clr: hsla(var(--blm-bt-foc-clr-h), var(--blm-bt-foc-clr-s), var(--blm-bt-foc-clr-l), var(--blm-bt-foc-clr-a));
  --blm-bt-foc-box-shadow-s: 0 0 0 0.125em;
  --blm-bt-foc-box-shadow-clr-h: var(--blm-link-h);
  --blm-bt-foc-box-shadow-clr-s: var(--blm-link-s);
  --blm-bt-foc-box-shadow-clr-l: var(--blm-link-l);
  --blm-bt-foc-box-shadow-clr-a: 0.25;
  --blm-bt-foc-box-shadow-clr: hsla(var(--blm-bt-foc-box-shadow-clr-h), var(--blm-bt-foc-box-shadow-clr-s), var(--blm-bt-foc-box-shadow-clr-l), var(--blm-bt-foc-box-shadow-clr-a));
  --blm-bt-act-bd-clr-h: var(--blm-link-act-bd-h);
  --blm-bt-act-bd-clr-s: var(--blm-link-act-bd-s);
  --blm-bt-act-bd-clr-l: var(--blm-link-act-bd-l);
  --blm-bt-act-bd-clr-a: var(--blm-link-act-bd-a);
  --blm-bt-act-bd-clr: hsla(var(--blm-bt-act-bd-clr-h), var(--blm-bt-act-bd-clr-s), var(--blm-bt-act-bd-clr-l), var(--blm-bt-act-bd-clr-a));
  --blm-bt-act-clr-h: var(--blm-link-act-h);
  --blm-bt-act-clr-s: var(--blm-link-act-s);
  --blm-bt-act-clr-l: var(--blm-link-act-l);
  --blm-bt-act-clr-a: var(--blm-link-act-a);
  --blm-bt-act-clr: hsla(var(--blm-bt-act-clr-h), var(--blm-bt-act-clr-s), var(--blm-bt-act-clr-l), var(--blm-bt-act-clr-a));





















  --blm-black-inv-h: var(--blm-white-h);
  --blm-black-inv-s: var(--blm-white-s);
  --blm-black-inv-l: var(--blm-white-l);
  --blm-black-inv-a: var(--blm-white-a);
  --blm-black-inv: hsla(var(--blm-black-inv-h), var(--blm-black-inv-s), var(--blm-black-inv-l), var(--blm-black-inv-a));






































































  --blm-warn-inv-h: 0;
  --blm-warn-inv-s: 0%;
  --blm-warn-inv-l: 0%;
  --blm-warn-inv-a: 0.7;
  --blm-warn-inv: hsla(var(--blm-warn-inv-h), var(--blm-warn-inv-s), var(--blm-warn-inv-l), var(--blm-warn-inv-a));

























  --blm-s-small: var(--blm-s-7);

  --blm-s-lg: var(--blm-s-4);






































































































































































































































































































































  --blm-label-clr-h: var(--blm-txt-strong-h);
  --blm-label-clr-s: var(--blm-txt-strong-s);
  --blm-label-clr-l: var(--blm-txt-strong-l);
  --blm-label-clr-a: var(--blm-txt-strong-a);
  --blm-label-clr: hsla(var(--blm-label-clr-h), var(--blm-label-clr-s), var(--blm-label-clr-l), var(--blm-label-clr-a));
  --blm-label-weight: var(--blm-weight-bold);
  --blm-help-s: var(--blm-s-small);




































































































































































































































































































































































































































































































































































































































}/* Animations */

/* Controls */

/* v-sidebar */

/* v-tooltip */

/* v-switch */

.switch {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.switch {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  position: relative;
  margin-right: 0.5em;
}

.switch + .switch:last-child {
  margin-right: 0;
}

.switch input[type=checkbox] {
  position: absolute;
  left: 0;
  opacity: 0;
  outline: none;
  z-index: -1;
}

.switch input[type=checkbox] + .check {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  width: 2.75em;
  height: 1.575em;
  padding: 0.2em;
  background: #b5b5b5;
  border-radius: 4px;
  transition: background 0.5s ease-out, box-shadow 0.5s ease-out;
}

.switch input[type=checkbox] + .check.is-white-passive, .switch input[type=checkbox] + .check:hover {
  background: white;
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-black-passive, .switch input[type=checkbox] + .check:hover {
  background: #0a0a0a;
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-light-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-white-ter);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-dark-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-grey-darker);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-primary-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-link-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-blue);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-info-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-cyan);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-success-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-green);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-warning-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-yellow);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check.is-danger-passive, .switch input[type=checkbox] + .check:hover {
  background: var(--blm-red);
}

.switch input[type=checkbox] + .check.input[type=checkbox] + .switch input[type=checkbox] + .check.check {
  background: 'pink';
}

.switch input[type=checkbox] + .check:before {
  content: \\"\\";
  display: block;
  border-radius: 4px;
  width: 1.175em;
  height: 1.175em;
  background: var(--blm-white-ter);
  box-shadow: 0 3px 1px 0 rgba(0, 0, 0, 0.05), 0 2px 2px 0 rgba(0, 0, 0, 0.1), 0 3px 3px 0 rgba(0, 0, 0, 0.05);
  transition: transform 0.5s ease-out;
  will-change: transform;
  transform-origin: left;
}

.switch input[type=checkbox] + .check.is-elastic:before {
  transform: scaleX(1.5);
  border-radius: 4px;
}

.switch input[type=checkbox]:checked + .check {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox]:checked + .check.is-white {
  background: white;
}

.switch input[type=checkbox]:checked + .check.is-black {
  background: #0a0a0a;
}

.switch input[type=checkbox]:checked + .check.is-light {
  background: var(--blm-white-ter);
}

.switch input[type=checkbox]:checked + .check.is-dark {
  background: var(--blm-grey-darker);
}

.switch input[type=checkbox]:checked + .check.is-primary {
  background: var(--blm-turquoise);
}

.switch input[type=checkbox]:checked + .check.is-link {
  background: var(--blm-blue);
}

.switch input[type=checkbox]:checked + .check.is-info {
  background: var(--blm-cyan);
}

.switch input[type=checkbox]:checked + .check.is-success {
  background: var(--blm-green);
}

.switch input[type=checkbox]:checked + .check.is-warning {
  background: var(--blm-yellow);
}

.switch input[type=checkbox]:checked + .check.is-danger {
  background: var(--blm-red);
}

.switch input[type=checkbox]:checked + .check:before {
  transform: translate3d(100%, 0, 0);
}

.switch input[type=checkbox]:checked + .check.is-elastic:before {
  transform: translate3d(50%, 0, 0) scaleX(1.5);
}

.switch input[type=checkbox]:focus, .switch input[type=checkbox]:active {
  outline: none;
}

.switch input[type=checkbox]:focus + .check, .switch input[type=checkbox]:active + .check {
  box-shadow: 0 0 0.5em rgba(122, 122, 122, 0.6);
}

.switch input[type=checkbox]:focus + .check.is-white-passive, .switch input[type=checkbox]:active + .check.is-white-passive {
  box-shadow: 0 0 0.4em white, 0.8;
}

.switch input[type=checkbox]:focus + .check.is-black-passive, .switch input[type=checkbox]:active + .check.is-black-passive {
  box-shadow: 0 0 0.4em #0a0a0a, 0.8;
}

.switch input[type=checkbox]:focus + .check.is-light-passive, .switch input[type=checkbox]:active + .check.is-light-passive {
  box-shadow: 0 0 0.4em var(--blm-white-ter), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-dark-passive, .switch input[type=checkbox]:active + .check.is-dark-passive {
  box-shadow: 0 0 0.4em var(--blm-grey-darker), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-primary-passive, .switch input[type=checkbox]:active + .check.is-primary-passive {
  box-shadow: 0 0 0.4em var(--blm-turquoise), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-link-passive, .switch input[type=checkbox]:active + .check.is-link-passive {
  box-shadow: 0 0 0.4em var(--blm-blue), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-info-passive, .switch input[type=checkbox]:active + .check.is-info-passive {
  box-shadow: 0 0 0.4em var(--blm-cyan), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-success-passive, .switch input[type=checkbox]:active + .check.is-success-passive {
  box-shadow: 0 0 0.4em var(--blm-green), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-warning-passive, .switch input[type=checkbox]:active + .check.is-warning-passive {
  box-shadow: 0 0 0.4em var(--blm-yellow), 0.8;
}

.switch input[type=checkbox]:focus + .check.is-danger-passive, .switch input[type=checkbox]:active + .check.is-danger-passive {
  box-shadow: 0 0 0.4em var(--blm-red), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check, .switch input[type=checkbox]:active:checked + .check {
  box-shadow: 0 0 0.4em var(--blm-turquoise);
}

.switch input[type=checkbox]:focus:checked + .check.is-white, .switch input[type=checkbox]:active:checked + .check.is-white {
  box-shadow: 0 0 0.4em white, 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-black, .switch input[type=checkbox]:active:checked + .check.is-black {
  box-shadow: 0 0 0.4em #0a0a0a, 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-light, .switch input[type=checkbox]:active:checked + .check.is-light {
  box-shadow: 0 0 0.4em var(--blm-white-ter), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-dark, .switch input[type=checkbox]:active:checked + .check.is-dark {
  box-shadow: 0 0 0.4em var(--blm-grey-darker), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-primary, .switch input[type=checkbox]:active:checked + .check.is-primary {
  box-shadow: 0 0 0.4em var(--blm-turquoise), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-link, .switch input[type=checkbox]:active:checked + .check.is-link {
  box-shadow: 0 0 0.4em var(--blm-blue), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-info, .switch input[type=checkbox]:active:checked + .check.is-info {
  box-shadow: 0 0 0.4em var(--blm-cyan), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-success, .switch input[type=checkbox]:active:checked + .check.is-success {
  box-shadow: 0 0 0.4em var(--blm-green), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-warning, .switch input[type=checkbox]:active:checked + .check.is-warning {
  box-shadow: 0 0 0.4em var(--blm-yellow), 0.8;
}

.switch input[type=checkbox]:focus:checked + .check.is-danger, .switch input[type=checkbox]:active:checked + .check.is-danger {
  box-shadow: 0 0 0.4em var(--blm-red), 0.8;
}

.switch .control-label {
  padding-left: 0.5em;
}

.switch:hover input[type=checkbox] + .check {
  background: rgba(181, 181, 181, 0.9);
}

.switch:hover input[type=checkbox] + .check.is-white-passive {
  background: white;
}

.switch:hover input[type=checkbox] + .check.is-black-passive {
  background: #0a0a0a;
}

.switch:hover input[type=checkbox] + .check.is-light-passive {
  background: var(--blm-white-ter);
}

.switch:hover input[type=checkbox] + .check.is-dark-passive {
  background: var(--blm-grey-darker);
}

.switch:hover input[type=checkbox] + .check.is-primary-passive {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox] + .check.is-link-passive {
  background: var(--blm-blue);
}

.switch:hover input[type=checkbox] + .check.is-info-passive {
  background: var(--blm-cyan);
}

.switch:hover input[type=checkbox] + .check.is-success-passive {
  background: var(--blm-green);
}

.switch:hover input[type=checkbox] + .check.is-warning-passive {
  background: var(--blm-yellow);
}

.switch:hover input[type=checkbox] + .check.is-danger-passive {
  background: var(--blm-red);
}

.switch:hover input[type=checkbox]:checked + .check {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox]:checked + .check.is-white {
  background: white;
}

.switch:hover input[type=checkbox]:checked + .check.is-black {
  background: #0a0a0a;
}

.switch:hover input[type=checkbox]:checked + .check.is-light {
  background: var(--blm-white-ter);
}

.switch:hover input[type=checkbox]:checked + .check.is-dark {
  background: var(--blm-grey-darker);
}

.switch:hover input[type=checkbox]:checked + .check.is-primary {
  background: var(--blm-turquoise);
}

.switch:hover input[type=checkbox]:checked + .check.is-link {
  background: var(--blm-blue);
}

.switch:hover input[type=checkbox]:checked + .check.is-info {
  background: var(--blm-cyan);
}

.switch:hover input[type=checkbox]:checked + .check.is-success {
  background: var(--blm-green);
}

.switch:hover input[type=checkbox]:checked + .check.is-warning {
  background: var(--blm-yellow);
}

.switch:hover input[type=checkbox]:checked + .check.is-danger {
  background: var(--blm-red);
}

.switch.is-rounded input[type=checkbox] + .check {
  border-radius: 290486px;
}

.switch.is-rounded input[type=checkbox] + .check:before {
  border-radius: 290486px;
}

.switch.is-rounded input[type=checkbox].is-elastic:before {
  transform: scaleX(1.5);
  border-radius: 290486px;
}

.switch.is-outlined input[type=checkbox] + .check {
  background: transparent;
  border: 0.1rem solid #b5b5b5;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive {
  border: 0.1rem solid white;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive:before {
  background: white;
}

.switch.is-outlined input[type=checkbox] + .check.is-white-passive:hover {
  border-color: white;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive {
  border: 0.1rem solid #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive:before {
  background: #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-black-passive:hover {
  border-color: #0a0a0a;
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive {
  border: 0.1rem solid var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive:before {
  background: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-light-passive:hover {
  border-color: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive {
  border: 0.1rem solid var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive:before {
  background: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-dark-passive:hover {
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive {
  border: 0.1rem solid var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-primary-passive:hover {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive {
  border: 0.1rem solid var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive:before {
  background: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-link-passive:hover {
  border-color: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive {
  border: 0.1rem solid var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive:before {
  background: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-info-passive:hover {
  border-color: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive {
  border: 0.1rem solid var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive:before {
  background: var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-success-passive:hover {
  border-color: var(--blm-green);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive {
  border: 0.1rem solid var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive:before {
  background: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-warning-passive:hover {
  border-color: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive {
  border: 0.1rem solid var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive:before {
  background: var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check.is-danger-passive:hover {
  border-color: var(--blm-red);
}

.switch.is-outlined input[type=checkbox] + .check:before {
  background: #b5b5b5;
}

.switch.is-outlined input[type=checkbox]:checked + .check {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-white {
  background: transparent;
  border-color: white;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-white:before {
  background: white;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-black {
  background: transparent;
  border-color: #0a0a0a;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-black:before {
  background: #0a0a0a;
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-light {
  background: transparent;
  border-color: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-light:before {
  background: var(--blm-white-ter);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-dark {
  background: transparent;
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-dark:before {
  background: var(--blm-grey-darker);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-primary {
  background: transparent;
  border-color: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-primary:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-link {
  background: transparent;
  border-color: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-link:before {
  background: var(--blm-blue);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-info {
  background: transparent;
  border-color: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-info:before {
  background: var(--blm-cyan);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-success {
  background: transparent;
  border-color: var(--blm-green);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-success:before {
  background: var(--blm-green);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-warning {
  background: transparent;
  border-color: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-warning:before {
  background: var(--blm-yellow);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-danger {
  background: transparent;
  border-color: var(--blm-red);
}

.switch.is-outlined input[type=checkbox]:checked + .check.is-danger:before {
  background: var(--blm-red);
}

.switch.is-outlined input[type=checkbox]:checked + .check:before {
  background: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox] + .check {
  background: transparent;
  border-color: rgba(181, 181, 181, 0.9);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check {
  background: transparent;
  border-color: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-white {
  border-color: white;
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-black {
  border-color: #0a0a0a;
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-light {
  border-color: var(--blm-white-ter);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-dark {
  border-color: var(--blm-grey-darker);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-primary {
  border-color: var(--blm-turquoise);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-link {
  border-color: var(--blm-blue);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-info {
  border-color: var(--blm-cyan);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-success {
  border-color: var(--blm-green);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-warning {
  border-color: var(--blm-yellow);
}

.switch.is-outlined:hover input[type=checkbox]:checked + .check.is-danger {
  border-color: var(--blm-red);
}

.switch.is-small {
  border-radius: 2px;
  font-size: var(--blm-s-7);
}

.switch.is-medium {
  font-size: var(--blm-s-5);
}

.switch.is-large {
  font-size: var(--blm-s-4);
}

.switch[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
  color: #7a7a7a;
}

/* v-accordion */

/* Messages */


/* Table */

/* Progress */"
`;

exports[`basic simple: js 1`] = `
"import { setDevtoolsHook, initCustomFormatter, computed, ref, watchEffect, openBlock, createBlock, resolveDynamicComponent, withCtx, toDisplayString, createCommentVNode, renderSlot, createVNode, withDirectives, withModifiers, vModelCheckbox, reactive, onMounted, resolveComponent, createTextVNode, createApp } from '@vue/runtime-dom';
import { getGlobalThis } from '@vue/shared';

function initDev() {
    const target = getGlobalThis();
    target.__VUE__ = true;
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);
    {
        console.info(\`You are running a development build of Vue.\\\\n\` +
            \`Make sure to use the production build (*.prod.js) when deploying for production.\`);
        initCustomFormatter();
    }
}

// This entry exports the runtime only, and is built as
(process.env.NODE_ENV !== 'production') && initDev();

var script = {
  name: 'VButton',
  props: {
    type: {
      type: String,
      default: 'button'
    },
    size: String,
    label: String,
    rounded: Boolean,
    loading: Boolean,
    outlined: Boolean,
    expanded: Boolean,
    inverted: Boolean,
    focused: Boolean,
    active: Boolean,
    hovered: Boolean,
    selected: Boolean,
    nativeType: {
      type: String,
      default: 'button'
    },
    tag: {
      type: String,
      default: 'button'
    },
    light: Boolean
  },
  setup(props, { attrs }) {
    const computedTag = computed(() => attrs.disabled ? 'button' : props.tag);
    return { computedTag }
  }
};

const _hoisted_1 = { key: 0 };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(resolveDynamicComponent($setup.computedTag), {
    class: [\\"button\\", [
      $props.size,
      $props.type,
      {
        'is-rounded': $props.rounded,
        'is-loading': $props.loading,
        'is-outlined': $props.outlined,
        'is-fullwidth': $props.expanded,
        'is-inverted': $props.inverted,
        'is-focused': $props.focused,
        'is-active': $props.active,
        'is-hovered': $props.hovered,
        'is-selected': $props.selected,
        'is-light': $props.light,
      }
    ]],
    type: $props.nativeType
  }, {
    default: withCtx(() => [
      ($props.label)
        ? (openBlock(), createBlock(\\"span\\", _hoisted_1, toDisplayString($props.label), 1))
        : createCommentVNode(\\"\\", true),
      renderSlot(_ctx.$slots, \\"default\\")
    ]),
    _: 3
  }, 8, [\\"type\\", \\"class\\"]))
}

script.render = render;

var script$3 = {
  name: 'VField',
  props: {
    type: String,
    label: String,
    labelFor: String,
    message: String,
    grouped: Boolean,
    groupMultiline: Boolean,
    position: String,
    expanded: Boolean,
    horizontal: Boolean,
    addons: Boolean,
    size: String,
  },
  setup(props) {
    const hasHorizontalLabel = computed(() => props.horizontal && props.label);
    return { hasHorizontalLabel }
  }
};

const _hoisted_1$2 = {
  key: 2,
  class: \\"field-body\\"
};

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(\\"div\\", {
    class: [\\"field\\", [
    $props.position, {
      'is-expanded': $props.expanded,
      'is-horizontal': $props.horizontal,
      'is-grouped': $props.grouped,
      'is-grouped-multiline': $props.groupMultiline,
      'has-addons': $props.addons
    }]]
  }, [
    ($setup.hasHorizontalLabel)
      ? (openBlock(), createBlock(\\"div\\", {
          key: 0,
          class: [\\"field-label\\", $props.size]
        }, [
          createVNode(\\"label\\", {
            class: \\"label\\",
            for: $props.labelFor
          }, toDisplayString($props.label), 9, [\\"for\\"])
        ], 2))
      : ($props.label)
        ? (openBlock(), createBlock(\\"label\\", {
            key: 1,
            class: \\"label\\",
            for: $props.labelFor
          }, toDisplayString($props.label), 9, [\\"for\\"]))
        : createCommentVNode(\\"\\", true),
    ($props.horizontal)
      ? (openBlock(), createBlock(\\"div\\", _hoisted_1$2, [
          createVNode(\\"div\\", {
            class: [\\"field\\", {'is-grouped': $props.grouped}]
          }, [
            renderSlot(_ctx.$slots, \\"default\\")
          ], 2)
        ]))
      : renderSlot(_ctx.$slots, \\"default\\", { key: 3 }),
    ($props.message)
      ? (openBlock(), createBlock(\\"p\\", {
          key: 4,
          class: [\\"help\\", $props.type]
        }, toDisplayString($props.message), 3))
      : createCommentVNode(\\"\\", true)
  ], 2))
}

script$3.render = render$3;

function checkBenchieSupport() {
    const isProduction = process.env.NODE_ENV === 'production';
    if (!isProduction) return false
    return typeof t !== 'undefined' && typeof $__CDN !== 'undefined' && typeof t === 'function' && typeof $__CDN === 'string'
}

const hasBenchieSupport$1 = checkBenchieSupport();

var script$c = {
  name: 'VSwitch',
  props: {
    modelValue: {
      type: [String, Number, Boolean, Function, Object, Array, Date],
    },
    nativeValue: {
      type: [String, Number, Boolean, Function, Object, Array, Date],
    },
    disabled: {
      type: Boolean,
      default: null
    },
    type: String,
    passiveType: String,
    name: String,
    required: Boolean,
    size: String,
    trueValue: {
      type: [String, Number, Boolean, Function, Object, Array, Date],
      default: true
    },
    falseValue: {
      type: [String, Number, Boolean, Function, Object, Array, Date],
      default: false
    },
    rounded: {
      type: Boolean,
      default: true
    },
    outlined: Boolean
  },
  emits: ['update:modelValue'],
  setup(props, { emit }) {
    const value = ref(props.modelValue);
    const passiveClass = computed(() => props.passiveType && \`\${props.passiveType}-passive\`);
    watchEffect(() => {
      value.value = props.modelValue;
    });
    watchEffect(() => {
      emit('update:modelValue', value.value);
    });
    return { value, passiveClass }
  }
};

const _hoisted_1$a = { class: \\"control-label\\" };

function render$c(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock(\\"label\\", {
    class: [\\"switch\\", [
      $props.size,
      {
        'is-disabled': $props.disabled,
        'is-rounded': $props.rounded,
        'is-outlined': $props.outlined,
      }
    ]],
    disabled: $props.disabled
  }, [
    withDirectives(createVNode(\\"input\\", {
      \\"onUpdate:modelValue\\": _cache[1] || (_cache[1] = $event => ($setup.value = $event)),
      type: \\"checkbox\\",
      onClick: _cache[2] || (_cache[2] = withModifiers(() => {}, [\\"stop\\"])),
      disabled: $props.disabled,
      name: $props.name,
      required: $props.required,
      value: $props.nativeValue,
      \\"true-value\\": $props.trueValue,
      \\"false-value\\": $props.falseValue
    }, null, 8, [\\"disabled\\", \\"name\\", \\"required\\", \\"value\\", \\"true-value\\", \\"false-value\\"]), [
      [vModelCheckbox, $setup.value]
    ]),
    createVNode(\\"span\\", {
      class: [\\"check\\", [$setup.passiveClass, $props.type]]
    }, null, 2),
    createVNode(\\"span\\", _hoisted_1$a, [
      renderSlot(_ctx.$slots, \\"default\\")
    ])
  ], 10, [\\"disabled\\"]))
}

script$c.render = render$c;

var script$1 = {
  components: { VField: script$3, VButton: script, VSwitch: script$c },
  emits: [\\"login\\"],
  setup(props, { emit }) {
    const state = reactive({ email: \\"\\", password: \\"\\", remember: false });
    const status = reactive({ email: \\"valid\\", password: \\"valid\\" });

    const isValid = computed(() => status.email === \\"valid\\" && status.password === \\"valid\\");

    onMounted(() => {
      emit(\\"whatever\\");
    });

    const sendLogin = () => {
      if (isValid.value) emit(\\"login\\", state);
    };

    watchEffect(() => {
      status.email = state.email.length > 2 ? \\"valid\\" : \\"error\\";
      status.password = state.password.length > 2 ? \\"valid\\" : \\"error\\";
    });

    return { state, status, sendLogin, isValid };
  },
};

const _hoisted_1$1 = /*#__PURE__*/createTextVNode(\\" Remember me \\");
const _hoisted_2 = /*#__PURE__*/createTextVNode(\\"Login\\");

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VSwitch = resolveComponent(\\"VSwitch\\");
  const _component_v_field = resolveComponent(\\"v-field\\");
  const _component_VButton = resolveComponent(\\"VButton\\");
  const _component_VField = resolveComponent(\\"VField\\");

  return (openBlock(), createBlock(\\"form\\", null, [
    createVNode(_component_v_field, { \\"group-multiline\\": \\"\\" }, {
      default: withCtx(() => [
        createVNode(_component_VSwitch, {
          type: \\"is-outlined\\",
          \\"passive-type\\": \\"is-warning\\",
          modelValue: $setup.state.remember,
          \\"onUpdate:modelValue\\": _cache[1] || (_cache[1] = $event => ($setup.state.remember = $event))
        }, {
          default: withCtx(() => [
            _hoisted_1$1
          ]),
          _: 1
        }, 8 /* PROPS */, [\\"modelValue\\"])
      ]),
      _: 1
    }),
    createVNode(_component_VField, null, {
      default: withCtx(() => [
        createVNode(_component_VButton, {
          expanded: \\"\\",
          type: \\"is-black\\",
          size: \\"is-large\\",
          class: \\"is-100 has-text-centered\\",
          onClick: $setup.sendLogin,
          disabled: !$setup.isValid
        }, {
          default: withCtx(() => [
            _hoisted_2
          ]),
          _: 1
        }, 8 /* PROPS */, [\\"onClick\\", \\"disabled\\"])
      ]),
      _: 1
    })
  ]))
}

script$1.render = render$1;
script$1.__file = \\"__tests__/fixtures/simple/Dummy.vue\\";

var script$2 = {
  components: { Dummy: script$1 },
  props: { name: { type: String, default: \\"John\\" } },
};

const _hoisted_1$3 = /*#__PURE__*/createTextVNode(\\" Hello \\");
const _hoisted_2$1 = { class: \\"name\\" };

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Dummy = resolveComponent(\\"Dummy\\");

  return (openBlock(), createBlock(\\"h1\\", null, [
    _hoisted_1$3,
    createVNode(\\"span\\", _hoisted_2$1, toDisplayString($props.name), 1 /* TEXT */),
    createVNode(_component_Dummy)
  ]))
}

script$2.render = render$2;
script$2.__file = \\"__tests__/fixtures/simple/Test.vue\\";

createApp(script$2).mount(document.body);
"
`;
